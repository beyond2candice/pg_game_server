(function (i, b, c) {
  function f(a) {
    var c = b[a];
    if (!c) {
      var d = i[a];
      if (!d) {
        return;
      }
      var e = {};
      c = b[a] = {
        exports: e
      };
      d[0](function (b) {
        return f(d[1][b] || b);
      }, c, e);
    }
    return c.exports;
  }
  for (var a = 0; a < c.length; a++) {
    f(c[a]);
  }
})({
  1: [function (c) {
    "use strict";

    c("../core/platform/CCClass");
    var a = c("../core/utils/misc");
    cc.Action = cc.Class({
      name: "cc.Action",
      ctor: function () {
        this.originalTarget = null;
        this.target = null;
        this.tag = cc.Action.TAG_INVALID;
      },
      clone: function () {
        var b = new cc.Action();
        b.originalTarget = null;
        b.target = null;
        b.tag = this.tag;
        return b;
      },
      isDone: function () {
        return true;
      },
      startWithTarget: function (b) {
        this.originalTarget = b;
        this.target = b;
      },
      stop: function () {
        this.target = null;
      },
      step: function () {},
      update: function () {},
      getTarget: function () {
        return this.target;
      },
      setTarget: function (b) {
        this.target = b;
      },
      getOriginalTarget: function () {
        return this.originalTarget;
      },
      setOriginalTarget: function (b) {
        this.originalTarget = b;
      },
      getTag: function () {
        return this.tag;
      },
      setTag: function (b) {
        this.tag = b;
      },
      retain: function () {},
      release: function () {}
    });
    cc.Action.TAG_INVALID = -1;
    cc.FiniteTimeAction = cc.Class({
      name: "cc.FiniteTimeAction",
      extends: cc.Action,
      ctor: function () {
        this._duration = 0;
      },
      getDuration: function () {
        return this._duration * (this._timesForRepeat || 1);
      },
      setDuration: function (b) {
        this._duration = b;
      },
      reverse: function () {
        return null;
      },
      clone: function () {
        return new cc.FiniteTimeAction();
      }
    });
    cc.Speed = cc.Class({
      name: "cc.Speed",
      extends: cc.Action,
      ctor: function (c, a) {
        this._speed = 0;
        this._innerAction = null;
        if (c) {
          this.initWithAction(c, a);
        }
      },
      getSpeed: function () {
        return this._speed;
      },
      setSpeed: function (b) {
        this._speed = b;
      },
      initWithAction: function (c, a) {
        return !!c && (this._innerAction = c, this._speed = a, true);
      },
      clone: function () {
        var b = new cc.Speed();
        b.initWithAction(this._innerAction.clone(), this._speed);
        return b;
      },
      startWithTarget: function (b) {
        cc.Action.prototype.startWithTarget.call(this, b);
        this._innerAction.startWithTarget(b);
      },
      stop: function () {
        this._innerAction.stop();
        cc.Action.prototype.stop.call(this);
      },
      step: function (b) {
        this._innerAction.step(b * this._speed);
      },
      isDone: function () {
        return this._innerAction.isDone();
      },
      reverse: function () {
        return new cc.Speed(this._innerAction.reverse(), this._speed);
      },
      setInnerAction: function (b) {
        if (this._innerAction !== b) {
          this._innerAction = b;
        }
      },
      getInnerAction: function () {
        return this._innerAction;
      }
    });
    cc.speed = function (c, a) {
      return new cc.Speed(c, a);
    };
    cc.Follow = cc.Class({
      name: "cc.Follow",
      extends: cc.Action,
      ctor: function (c, a) {
        this._followedNode = null;
        this._boundarySet = false;
        this._boundaryFullyCovered = false;
        this._halfScreenSize = null;
        this._fullScreenSize = null;
        this.leftBoundary = 0;
        this.rightBoundary = 0;
        this.topBoundary = 0;
        this.bottomBoundary = 0;
        this._worldRect = cc.rect(0, 0, 0, 0);
        if (c) {
          if (a) {
            this.initWithTarget(c, a);
          } else {
            this.initWithTarget(c);
          }
        }
      },
      clone: function () {
        var d = new cc.Follow();
        var a = this._worldRect;
        var b = new cc.Rect(a.x, a.y, a.width, a.height);
        d.initWithTarget(this._followedNode, b);
        return d;
      },
      isBoundarySet: function () {
        return this._boundarySet;
      },
      setBoundarySet: function (b) {
        this._boundarySet = b;
      },
      setBoudarySet: function (b) {
        this.setBoundarySet(b);
      },
      initWithTarget: function (d, a) {
        if (!d) {
          return false;
        }
        a = a || cc.rect(0, 0, 0, 0);
        this._followedNode = d;
        this._worldRect = a;
        this._boundarySet = !(a.width === 0 && a.height === 0);
        this._boundaryFullyCovered = false;
        var e = cc.winSize;
        this._fullScreenSize = cc.v2(e.width, e.height);
        this._halfScreenSize = this._fullScreenSize.mul(0.5);
        if (this._boundarySet) {
          this.leftBoundary = -(a.x + a.width - this._fullScreenSize.x);
          this.rightBoundary = -a.x;
          this.topBoundary = -a.y;
          this.bottomBoundary = -(a.y + a.height - this._fullScreenSize.y);
          if (this.rightBoundary < this.leftBoundary) {
            this.rightBoundary = this.leftBoundary = (this.leftBoundary + this.rightBoundary) / 2;
          }
          if (this.topBoundary < this.bottomBoundary) {
            this.topBoundary = this.bottomBoundary = (this.topBoundary + this.bottomBoundary) / 2;
          }
          if (this.topBoundary === this.bottomBoundary && this.leftBoundary === this.rightBoundary) {
            this._boundaryFullyCovered = true;
          }
        }
        return true;
      },
      step: function () {
        var b = this.target.convertToWorldSpaceAR(cc.Vec2.ZERO);
        var f = this._followedNode.convertToWorldSpaceAR(cc.Vec2.ZERO);
        var c = b.sub(f);
        var d = this.target.parent.convertToNodeSpaceAR(c.add(this._halfScreenSize));
        if (this._boundarySet) {
          if (this._boundaryFullyCovered) {
            return;
          }
          this.target.setPosition(a.clampf(d.x, this.leftBoundary, this.rightBoundary), a.clampf(d.y, this.bottomBoundary, this.topBoundary));
        } else {
          this.target.setPosition(d.x, d.y);
        }
      },
      isDone: function () {
        return !this._followedNode.activeInHierarchy;
      },
      stop: function () {
        this.target = null;
        cc.Action.prototype.stop.call(this);
      }
    });
    cc.follow = function (c, a) {
      return new cc.Follow(c, a);
    };
  }, {
    "../core/platform/CCClass": 162,
    "../core/utils/misc": 236
  }],
  2: [function () {
    "use strict";

    function d(c, a) {
      return c[Math.min(c.length - 1, Math.max(a, 0))];
    }
    function g(d) {
      for (var a = [], b = d.length - 1; b >= 0; b--) {
        a.push(cc.v2(d[b].x, d[b].y));
      }
      return a;
    }
    function b(d) {
      for (var a = [], b = 0; b < d.length; b++) {
        a.push(cc.v2(d[b].x, d[b].y));
      }
      return a;
    }
    cc.CardinalSplineTo = cc.Class({
      name: "cc.CardinalSplineTo",
      extends: cc.ActionInterval,
      ctor: function (d, a, b) {
        this._points = [];
        this._deltaT = 0;
        this._tension = 0;
        this._previousPosition = null;
        this._accumulatedDiff = null;
        if (b !== undefined) {
          cc.CardinalSplineTo.prototype.initWithDuration.call(this, d, a, b);
        }
      },
      initWithDuration: function (d, a, b) {
        return !(!a || a.length === 0 || !cc.ActionInterval.prototype.initWithDuration.call(this, d) || (this.setPoints(a), this._tension = b, 0));
      },
      clone: function () {
        var c = new cc.CardinalSplineTo();
        c.initWithDuration(this._duration, b(this._points), this._tension);
        return c;
      },
      startWithTarget: function (b) {
        cc.ActionInterval.prototype.startWithTarget.call(this, b);
        this._deltaT = 1 / (this._points.length - 1);
        this._previousPosition = cc.v2(this.target.x, this.target.y);
        this._accumulatedDiff = cc.v2(0, 0);
      },
      update: function (a) {
        var b;
        var c;
        a = this._computeEaseTime(a);
        var e = this._points;
        if (a === 1) {
          b = e.length - 1;
          c = 1;
        } else {
          var f = this._deltaT;
          c = (a - f * (b = a / f | 0)) / f;
        }
        var g;
        var h;
        var i;
        var l;
        var m;
        var n;
        var o;
        var p;
        var r;
        var t;
        var u;
        var v;
        var x;
        var y;
        var E;
        var Q;
        g = d(e, b - 1);
        h = d(e, b - 0);
        i = d(e, b + 1);
        l = d(e, b + 2);
        r = (p = (1 - this._tension) / 2) * ((n = (m = c) * m) * 2 - (o = n * m) - m);
        t = p * (-o + n) + (o * 2 - n * 3) + 1;
        u = p * (o - n * 2 + m) + o * -2 + n * 3;
        v = p * (o - n);
        x = g.x * r + h.x * t + i.x * u + l.x * v;
        y = g.y * r + h.y * t + i.y * u + l.y * v;
        var R = cc.v2(x, y);
        if (cc.macro.ENABLE_STACKABLE_ACTIONS && (E = this.target.x - this._previousPosition.x, Q = this.target.y - this._previousPosition.y, E !== 0 || Q !== 0)) {
          var P = this._accumulatedDiff;
          E = P.x + E;
          Q = P.y + Q;
          P.x = E;
          P.y = Q;
          R.x += E;
          R.y += Q;
        }
        this.updatePosition(R);
      },
      reverse: function () {
        var a = g(this._points);
        return cc.cardinalSplineTo(this._duration, a, this._tension);
      },
      updatePosition: function (b) {
        this.target.setPosition(b);
        this._previousPosition = b;
      },
      getPoints: function () {
        return this._points;
      },
      setPoints: function (b) {
        this._points = b;
      }
    });
    cc.cardinalSplineTo = function (d, a, b) {
      return new cc.CardinalSplineTo(d, a, b);
    };
    cc.CardinalSplineBy = cc.Class({
      name: "cc.CardinalSplineBy",
      extends: cc.CardinalSplineTo,
      ctor: function (d, a, b) {
        this._startPosition = cc.v2(0, 0);
        if (b !== undefined) {
          this.initWithDuration(d, a, b);
        }
      },
      startWithTarget: function (b) {
        cc.CardinalSplineTo.prototype.startWithTarget.call(this, b);
        this._startPosition.x = b.x;
        this._startPosition.y = b.y;
      },
      reverse: function () {
        for (var a, h = this._points.slice(), c = h[0], i = 1; i < h.length; ++i) {
          a = h[i];
          h[i] = a.sub(c);
          c = a;
        }
        var j = g(h);
        c = j[j.length - 1];
        j.pop();
        c.x = -c.x;
        c.y = -c.y;
        j.unshift(c);
        i = 1;
        for (; i < j.length; ++i) {
          (a = j[i]).x = -a.x;
          a.y = -a.y;
          a.x += c.x;
          a.y += c.y;
          j[i] = a;
          c = a;
        }
        return cc.cardinalSplineBy(this._duration, j, this._tension);
      },
      updatePosition: function (e) {
        var a = this._startPosition;
        var b = e.x + a.x;
        var c = e.y + a.y;
        this._previousPosition.x = b;
        this._previousPosition.y = c;
        this.target.setPosition(b, c);
      },
      clone: function () {
        var c = new cc.CardinalSplineBy();
        c.initWithDuration(this._duration, b(this._points), this._tension);
        return c;
      }
    });
    cc.cardinalSplineBy = function (d, a, b) {
      return new cc.CardinalSplineBy(d, a, b);
    };
    cc.CatmullRomTo = cc.Class({
      name: "cc.CatmullRomTo",
      extends: cc.CardinalSplineTo,
      ctor: function (c, a) {
        if (a) {
          this.initWithDuration(c, a);
        }
      },
      initWithDuration: function (c, a) {
        return cc.CardinalSplineTo.prototype.initWithDuration.call(this, c, a, 0.5);
      },
      clone: function () {
        var c = new cc.CatmullRomTo();
        c.initWithDuration(this._duration, b(this._points));
        return c;
      }
    });
    cc.catmullRomTo = function (c, a) {
      return new cc.CatmullRomTo(c, a);
    };
    cc.CatmullRomBy = cc.Class({
      name: "cc.CatmullRomBy",
      extends: cc.CardinalSplineBy,
      ctor: function (c, a) {
        if (a) {
          this.initWithDuration(c, a);
        }
      },
      initWithDuration: function (c, a) {
        return cc.CardinalSplineTo.prototype.initWithDuration.call(this, c, a, 0.5);
      },
      clone: function () {
        var c = new cc.CatmullRomBy();
        c.initWithDuration(this._duration, b(this._points));
        return c;
      }
    });
    cc.catmullRomBy = function (c, a) {
      return new cc.CatmullRomBy(c, a);
    };
  }, {}],
  3: [function () {
    "use strict";

    cc.easeIn = function (b) {
      return {
        _rate: b,
        easing: function (b) {
          return Math.pow(b, this._rate);
        },
        reverse: function () {
          return cc.easeIn(1 / this._rate);
        }
      };
    };
    cc.easeOut = function (b) {
      return {
        _rate: b,
        easing: function (b) {
          return Math.pow(b, 1 / this._rate);
        },
        reverse: function () {
          return cc.easeOut(1 / this._rate);
        }
      };
    };
    cc.easeInOut = function (b) {
      return {
        _rate: b,
        easing: function (b) {
          if ((b *= 2) < 1) {
            return Math.pow(b, this._rate) * 0.5;
          } else {
            return 1 - Math.pow(2 - b, this._rate) * 0.5;
          }
        },
        reverse: function () {
          return cc.easeInOut(this._rate);
        }
      };
    };
    var w = {
      easing: function (b) {
        if (b === 0) {
          return 0;
        } else {
          return Math.pow(2, (b - 1) * 10);
        }
      },
      reverse: function () {
        return j;
      }
    };
    cc.easeExponentialIn = function () {
      return w;
    };
    var j = {
      easing: function (b) {
        if (b === 1) {
          return 1;
        } else {
          return 1 - Math.pow(2, b * -10);
        }
      },
      reverse: function () {
        return w;
      }
    };
    cc.easeExponentialOut = function () {
      return j;
    };
    var k = {
      easing: function (b) {
        if (b !== 1 && b !== 0) {
          if ((b *= 2) < 1) {
            return Math.pow(2, (b - 1) * 10) * 0.5;
          } else {
            return (2 - Math.pow(2, (b - 1) * -10)) * 0.5;
          }
        } else {
          return b;
        }
      },
      reverse: function () {
        return k;
      }
    };
    cc.easeExponentialInOut = function () {
      return k;
    };
    var e = {
      easing: function (b) {
        if (b === 0 || b === 1) {
          return b;
        } else {
          return Math.cos(b * Math.PI / 2) * -1 + 1;
        }
      },
      reverse: function () {
        return i;
      }
    };
    cc.easeSineIn = function () {
      return e;
    };
    var i = {
      easing: function (b) {
        if (b === 0 || b === 1) {
          return b;
        } else {
          return Math.sin(b * Math.PI / 2);
        }
      },
      reverse: function () {
        return e;
      }
    };
    cc.easeSineOut = function () {
      return i;
    };
    var n = {
      easing: function (b) {
        if (b === 0 || b === 1) {
          return b;
        } else {
          return (Math.cos(Math.PI * b) - 1) * -0.5;
        }
      },
      reverse: function () {
        return n;
      }
    };
    cc.easeSineInOut = function () {
      return n;
    };
    var q = {
      easing: function (b) {
        if (b === 0 || b === 1) {
          return b;
        } else {
          return -Math.pow(2, (b -= 1) * 10) * Math.sin((b - 0.075) * Math.PI * 2 / 0.3);
        }
      },
      reverse: function () {
        return r;
      }
    };
    cc.easeElasticIn = function (b) {
      if (b && b !== 0.3) {
        return {
          _period: b,
          easing: function (b) {
            if (b === 0 || b === 1) {
              return b;
            } else {
              return -Math.pow(2, (b -= 1) * 10) * Math.sin((b - this._period / 4) * Math.PI * 2 / this._period);
            }
          },
          reverse: function () {
            return cc.easeElasticOut(this._period);
          }
        };
      } else {
        return q;
      }
    };
    var r = {
      easing: function (b) {
        if (b === 0 || b === 1) {
          return b;
        } else {
          return Math.pow(2, b * -10) * Math.sin((b - 0.075) * Math.PI * 2 / 0.3) + 1;
        }
      },
      reverse: function () {
        return q;
      }
    };
    function F(b) {
      if (b < 1 / 2.75) {
        return b * 7.5625 * b;
      } else if (b < 2 / 2.75) {
        return (b -= 1.5 / 2.75) * 7.5625 * b + 0.75;
      } else if (b < 2.5 / 2.75) {
        return (b -= 2.25 / 2.75) * 7.5625 * b + 0.9375;
      } else {
        return (b -= 2.625 / 2.75) * 7.5625 * b + 0.984375;
      }
    }
    cc.easeElasticOut = function (a) {
      if (a && a !== 0.3) {
        return {
          _period: a,
          easing: function (b) {
            if (b === 0 || b === 1) {
              return b;
            } else {
              return Math.pow(2, b * -10) * Math.sin((b - this._period / 4) * Math.PI * 2 / this._period) + 1;
            }
          },
          reverse: function () {
            return cc.easeElasticIn(this._period);
          }
        };
      } else {
        return r;
      }
    };
    cc.easeElasticInOut = function (b) {
      return {
        _period: b = b || 0.3,
        easing: function (e) {
          var f = 0;
          var g = this._period;
          if (e === 0 || e === 1) {
            f = e;
          } else {
            e *= 2;
            if (!g) {
              g = this._period = 0.44999999999999996;
            }
            var h = g / 4;
            f = (e -= 1) < 0 ? Math.pow(2, e * 10) * -0.5 * Math.sin((e - h) * Math.PI * 2 / g) : Math.pow(2, e * -10) * Math.sin((e - h) * Math.PI * 2 / g) * 0.5 + 1;
          }
          return f;
        },
        reverse: function () {
          return cc.easeElasticInOut(this._period);
        }
      };
    };
    var a = {
      easing: function (b) {
        return 1 - F(1 - b);
      },
      reverse: function () {
        return c;
      }
    };
    cc.easeBounceIn = function () {
      return a;
    };
    var c = {
      easing: function (b) {
        return F(b);
      },
      reverse: function () {
        return a;
      }
    };
    cc.easeBounceOut = function () {
      return c;
    };
    var l = {
      easing: function (b) {
        if (b < 0.5) {
          return (1 - F(1 - (b *= 2))) * 0.5;
        } else {
          return F(b * 2 - 1) * 0.5 + 0.5;
        }
      },
      reverse: function () {
        return l;
      }
    };
    cc.easeBounceInOut = function () {
      return l;
    };
    var h = {
      easing: function (b) {
        if (b === 0 || b === 1) {
          return b;
        } else {
          return b * b * (b * 2.70158 - 1.70158);
        }
      },
      reverse: function () {
        return o;
      }
    };
    cc.easeBackIn = function () {
      return h;
    };
    var o = {
      easing: function (b) {
        if (b === 0) {
          return 0;
        } else {
          return (b -= 1) * b * (b * 2.70158 + 1.70158) + 1;
        }
      },
      reverse: function () {
        return h;
      }
    };
    cc.easeBackOut = function () {
      return o;
    };
    var f = {
      easing: function (b) {
        if ((b *= 2) < 1) {
          return b * b * (b * 3.5949095 - 2.5949095) / 2;
        } else {
          return (b -= 2) * b * (b * 3.5949095 + 2.5949095) / 2 + 1;
        }
      },
      reverse: function () {
        return f;
      }
    };
    cc.easeBackInOut = function () {
      return f;
    };
    cc.easeBezierAction = function (f, a, b, c) {
      return {
        easing: function (d) {
          return Math.pow(1 - d, 3) * f + d * 3 * Math.pow(1 - d, 2) * a + Math.pow(d, 2) * 3 * (1 - d) * b + Math.pow(d, 3) * c;
        },
        reverse: function () {
          return cc.easeBezierAction(c, b, a, f);
        }
      };
    };
    var d = {
      easing: function (b) {
        return Math.pow(b, 2);
      },
      reverse: function () {
        return d;
      }
    };
    cc.easeQuadraticActionIn = function () {
      return d;
    };
    var s = {
      easing: function (b) {
        return -b * (b - 2);
      },
      reverse: function () {
        return s;
      }
    };
    cc.easeQuadraticActionOut = function () {
      return s;
    };
    var p = {
      easing: function (b) {
        if ((b *= 2) < 1) {
          return b * b * 0.5;
        } else {
          return (--b * (b - 2) - 1) * -0.5;
        }
      },
      reverse: function () {
        return p;
      }
    };
    cc.easeQuadraticActionInOut = function () {
      return p;
    };
    var t = {
      easing: function (b) {
        return b * b * b * b;
      },
      reverse: function () {
        return t;
      }
    };
    cc.easeQuarticActionIn = function () {
      return t;
    };
    var g = {
      easing: function (b) {
        return -((b -= 1) * b * b * b - 1);
      },
      reverse: function () {
        return g;
      }
    };
    cc.easeQuarticActionOut = function () {
      return g;
    };
    var m = {
      easing: function (b) {
        if ((b *= 2) < 1) {
          return b * 0.5 * b * b * b;
        } else {
          return ((b -= 2) * b * b * b - 2) * -0.5;
        }
      },
      reverse: function () {
        return m;
      }
    };
    cc.easeQuarticActionInOut = function () {
      return m;
    };
    var u = {
      easing: function (b) {
        return b * b * b * b * b;
      },
      reverse: function () {
        return u;
      }
    };
    cc.easeQuinticActionIn = function () {
      return u;
    };
    var v = {
      easing: function (b) {
        return (b -= 1) * b * b * b * b + 1;
      },
      reverse: function () {
        return v;
      }
    };
    cc.easeQuinticActionOut = function () {
      return v;
    };
    var y = {
      easing: function (b) {
        if ((b *= 2) < 1) {
          return b * 0.5 * b * b * b * b;
        } else {
          return ((b -= 2) * b * b * b * b + 2) * 0.5;
        }
      },
      reverse: function () {
        return y;
      }
    };
    cc.easeQuinticActionInOut = function () {
      return y;
    };
    var z = {
      easing: function (b) {
        return (Math.sqrt(1 - b * b) - 1) * -1;
      },
      reverse: function () {
        return z;
      }
    };
    cc.easeCircleActionIn = function () {
      return z;
    };
    var x = {
      easing: function (b) {
        return Math.sqrt(1 - (b -= 1) * b);
      },
      reverse: function () {
        return x;
      }
    };
    cc.easeCircleActionOut = function () {
      return x;
    };
    var A = {
      easing: function (b) {
        if ((b *= 2) < 1) {
          return (Math.sqrt(1 - b * b) - 1) * -0.5;
        } else {
          return (Math.sqrt(1 - (b -= 2) * b) + 1) * 0.5;
        }
      },
      reverse: function () {
        return A;
      }
    };
    cc.easeCircleActionInOut = function () {
      return A;
    };
    var b = {
      easing: function (b) {
        return b * b * b;
      },
      reverse: function () {
        return b;
      }
    };
    cc.easeCubicActionIn = function () {
      return b;
    };
    var B = {
      easing: function (b) {
        return (b -= 1) * b * b + 1;
      },
      reverse: function () {
        return B;
      }
    };
    cc.easeCubicActionOut = function () {
      return B;
    };
    var C = {
      easing: function (b) {
        if ((b *= 2) < 1) {
          return b * 0.5 * b * b;
        } else {
          return ((b -= 2) * b * b + 2) * 0.5;
        }
      },
      reverse: function () {
        return C;
      }
    };
    cc.easeCubicActionInOut = function () {
      return C;
    };
  }, {}],
  4: [function () {
    "use strict";

    cc.ActionInstant = cc.Class({
      name: "cc.ActionInstant",
      extends: cc.FiniteTimeAction,
      isDone: function () {
        return true;
      },
      step: function () {
        this.update(1);
      },
      update: function () {},
      reverse: function () {
        return this.clone();
      },
      clone: function () {
        return new cc.ActionInstant();
      }
    });
    cc.Show = cc.Class({
      name: "cc.Show",
      extends: cc.ActionInstant,
      update: function () {
        for (var c = this.target.getComponentsInChildren(cc.RenderComponent), a = 0; a < c.length; ++a) {
          c[a].enabled = true;
        }
      },
      reverse: function () {
        return new cc.Hide();
      },
      clone: function () {
        return new cc.Show();
      }
    });
    cc.show = function () {
      return new cc.Show();
    };
    cc.Hide = cc.Class({
      name: "cc.Hide",
      extends: cc.ActionInstant,
      update: function () {
        for (var c = this.target.getComponentsInChildren(cc.RenderComponent), a = 0; a < c.length; ++a) {
          c[a].enabled = false;
        }
      },
      reverse: function () {
        return new cc.Show();
      },
      clone: function () {
        return new cc.Hide();
      }
    });
    cc.hide = function () {
      return new cc.Hide();
    };
    cc.ToggleVisibility = cc.Class({
      name: "cc.ToggleVisibility",
      extends: cc.ActionInstant,
      update: function () {
        for (var d = this.target.getComponentsInChildren(cc.RenderComponent), a = 0; a < d.length; ++a) {
          var e = d[a];
          e.enabled = !e.enabled;
        }
      },
      reverse: function () {
        return new cc.ToggleVisibility();
      },
      clone: function () {
        return new cc.ToggleVisibility();
      }
    });
    cc.toggleVisibility = function () {
      return new cc.ToggleVisibility();
    };
    cc.RemoveSelf = cc.Class({
      name: "cc.RemoveSelf",
      extends: cc.ActionInstant,
      ctor: function (b) {
        this._isNeedCleanUp = true;
        if (b !== undefined) {
          this.init(b);
        }
      },
      update: function () {
        this.target.removeFromParent(this._isNeedCleanUp);
      },
      init: function (b) {
        this._isNeedCleanUp = b;
        return true;
      },
      reverse: function () {
        return new cc.RemoveSelf(this._isNeedCleanUp);
      },
      clone: function () {
        return new cc.RemoveSelf(this._isNeedCleanUp);
      }
    });
    cc.removeSelf = function (b) {
      return new cc.RemoveSelf(b);
    };
    cc.DestroySelf = cc.Class({
      name: "cc.DestroySelf",
      extends: cc.ActionInstant,
      update: function () {
        this.target.destroy();
      },
      reverse: function () {
        return new cc.DestroySelf();
      },
      clone: function () {
        return new cc.DestroySelf();
      }
    });
    cc.destroySelf = function () {
      return new cc.DestroySelf();
    };
    cc.FlipX = cc.Class({
      name: "cc.FlipX",
      extends: cc.ActionInstant,
      ctor: function (b) {
        this._flippedX = false;
        if (b !== undefined) {
          this.initWithFlipX(b);
        }
      },
      initWithFlipX: function (b) {
        this._flippedX = b;
        return true;
      },
      update: function () {
        this.target.scaleX = Math.abs(this.target.scaleX) * (this._flippedX ? -1 : 1);
      },
      reverse: function () {
        return new cc.FlipX(!this._flippedX);
      },
      clone: function () {
        var b = new cc.FlipX();
        b.initWithFlipX(this._flippedX);
        return b;
      }
    });
    cc.flipX = function (b) {
      return new cc.FlipX(b);
    };
    cc.FlipY = cc.Class({
      name: "cc.FlipY",
      extends: cc.ActionInstant,
      ctor: function (b) {
        this._flippedY = false;
        if (b !== undefined) {
          this.initWithFlipY(b);
        }
      },
      initWithFlipY: function (b) {
        this._flippedY = b;
        return true;
      },
      update: function () {
        this.target.scaleY = Math.abs(this.target.scaleY) * (this._flippedY ? -1 : 1);
      },
      reverse: function () {
        return new cc.FlipY(!this._flippedY);
      },
      clone: function () {
        var b = new cc.FlipY();
        b.initWithFlipY(this._flippedY);
        return b;
      }
    });
    cc.flipY = function (b) {
      return new cc.FlipY(b);
    };
    cc.Place = cc.Class({
      name: "cc.Place",
      extends: cc.ActionInstant,
      ctor: function (c, d) {
        this._x = 0;
        this._y = 0;
        if (c !== undefined) {
          if (c.x !== undefined) {
            d = c.y;
            c = c.x;
          }
          this.initWithPosition(c, d);
        }
      },
      initWithPosition: function (c, a) {
        this._x = c;
        this._y = a;
        return true;
      },
      update: function () {
        this.target.setPosition(this._x, this._y);
      },
      clone: function () {
        var b = new cc.Place();
        b.initWithPosition(this._x, this._y);
        return b;
      }
    });
    cc.place = function (c, a) {
      return new cc.Place(c, a);
    };
    cc.CallFunc = cc.Class({
      name: "cc.CallFunc",
      extends: cc.ActionInstant,
      ctor: function (d, a, b) {
        this._selectorTarget = null;
        this._function = null;
        this._data = null;
        this.initWithFunction(d, a, b);
      },
      initWithFunction: function (d, a, b) {
        if (d) {
          this._function = d;
        }
        if (a) {
          this._selectorTarget = a;
        }
        if (b !== undefined) {
          this._data = b;
        }
        return true;
      },
      execute: function () {
        if (this._function) {
          this._function.call(this._selectorTarget, this.target, this._data);
        }
      },
      update: function () {
        this.execute();
      },
      getTargetCallback: function () {
        return this._selectorTarget;
      },
      setTargetCallback: function (b) {
        if (b !== this._selectorTarget) {
          if (this._selectorTarget) {
            this._selectorTarget = null;
          }
          this._selectorTarget = b;
        }
      },
      clone: function () {
        var b = new cc.CallFunc();
        b.initWithFunction(this._function, this._selectorTarget, this._data);
        return b;
      }
    });
    cc.callFunc = function (d, a, b) {
      return new cc.CallFunc(d, a, b);
    };
  }, {}],
  5: [function () {
    "use strict";

    function e(f, a, b, c, d) {
      return Math.pow(1 - d, 3) * f + d * 3 * Math.pow(1 - d, 2) * a + Math.pow(d, 2) * 3 * (1 - d) * b + Math.pow(d, 3) * c;
    }
    cc.ActionInterval = cc.Class({
      name: "cc.ActionInterval",
      extends: cc.FiniteTimeAction,
      ctor: function (b) {
        this.MAX_VALUE = 2;
        this._elapsed = 0;
        this._firstTick = false;
        this._easeList = null;
        this._speed = 1;
        this._timesForRepeat = 1;
        this._repeatForever = false;
        this._repeatMethod = false;
        this._speedMethod = false;
        if (b !== undefined) {
          cc.ActionInterval.prototype.initWithDuration.call(this, b);
        }
      },
      getElapsed: function () {
        return this._elapsed;
      },
      initWithDuration: function (b) {
        this._duration = b === 0 ? cc.macro.FLT_EPSILON : b;
        this._elapsed = 0;
        this._firstTick = true;
        return true;
      },
      isDone: function () {
        return this._elapsed >= this._duration;
      },
      _cloneDecoration: function (b) {
        b._repeatForever = this._repeatForever;
        b._speed = this._speed;
        b._timesForRepeat = this._timesForRepeat;
        b._easeList = this._easeList;
        b._speedMethod = this._speedMethod;
        b._repeatMethod = this._repeatMethod;
      },
      _reverseEaseList: function (c) {
        if (this._easeList) {
          c._easeList = [];
          for (var a = 0; a < this._easeList.length; a++) {
            c._easeList.push(this._easeList[a].reverse());
          }
        }
      },
      clone: function () {
        var b = new cc.ActionInterval(this._duration);
        this._cloneDecoration(b);
        return b;
      },
      easing: function () {
        if (this._easeList) {
          this._easeList.length = 0;
        } else {
          this._easeList = [];
        }
        for (var b = 0; b < arguments.length; b++) {
          this._easeList.push(arguments[b]);
        }
        return this;
      },
      _computeEaseTime: function (e) {
        var f = this._easeList;
        if (!f || f.length === 0) {
          return e;
        }
        for (var b = 0, g = f.length; b < g; b++) {
          e = f[b].easing(e);
        }
        return e;
      },
      step: function (c) {
        if (this._firstTick) {
          this._firstTick = false;
          this._elapsed = 0;
        } else {
          this._elapsed += c;
        }
        var a = this._elapsed / (this._duration > 1.192092896e-7 ? this._duration : 1.192092896e-7);
        a = a < 1 ? a : 1;
        this.update(a > 0 ? a : 0);
        if (this._repeatMethod && this._timesForRepeat > 1 && this.isDone()) {
          if (!this._repeatForever) {
            this._timesForRepeat--;
          }
          this.startWithTarget(this.target);
          this.step(this._elapsed - this._duration);
        }
      },
      startWithTarget: function (b) {
        cc.Action.prototype.startWithTarget.call(this, b);
        this._elapsed = 0;
        this._firstTick = true;
      },
      reverse: function () {
        return null;
      },
      setAmplitudeRate: function () {},
      getAmplitudeRate: function () {
        return 0;
      },
      speed: function (b) {
        if (b <= 0) {
          return this;
        } else {
          this._speedMethod = true;
          this._speed *= b;
          return this;
        }
      },
      getSpeed: function () {
        return this._speed;
      },
      setSpeed: function (b) {
        this._speed = b;
        return this;
      },
      repeat: function (b) {
        if (isNaN(b = Math.round(b)) || b < 1) {
          return this;
        } else {
          this._repeatMethod = true;
          this._timesForRepeat *= b;
          return this;
        }
      },
      repeatForever: function () {
        this._repeatMethod = true;
        this._timesForRepeat = this.MAX_VALUE;
        this._repeatForever = true;
        return this;
      }
    });
    cc.actionInterval = function (b) {
      return new cc.ActionInterval(b);
    };
    cc.Sequence = cc.Class({
      name: "cc.Sequence",
      extends: cc.ActionInterval,
      ctor: function (g) {
        this._actions = [];
        this._split = null;
        this._last = 0;
        this._reversed = false;
        var a = g instanceof Array ? g : arguments;
        if (a.length !== 1) {
          var b = a.length - 1;
          if (b >= 0) {
            a[b];
          }
          if (b >= 0) {
            for (var c, h = a[0], i = 1; i < b; i++) {
              if (a[i]) {
                c = h;
                h = cc.Sequence._actionOneTwo(c, a[i]);
              }
            }
            this.initWithTwoActions(h, a[b]);
          }
        }
      },
      initWithTwoActions: function (f, a) {
        if (!f || !a) {
          return false;
        }
        var b = f._duration;
        var g = a._duration;
        var h = (b *= f._repeatMethod ? f._timesForRepeat : 1) + (g *= a._repeatMethod ? a._timesForRepeat : 1);
        this.initWithDuration(h);
        this._actions[0] = f;
        this._actions[1] = a;
        return true;
      },
      clone: function () {
        var b = new cc.Sequence();
        this._cloneDecoration(b);
        b.initWithTwoActions(this._actions[0].clone(), this._actions[1].clone());
        return b;
      },
      startWithTarget: function (b) {
        cc.ActionInterval.prototype.startWithTarget.call(this, b);
        this._split = this._actions[0]._duration / this._duration;
        this._split *= this._actions[0]._repeatMethod ? this._actions[0]._timesForRepeat : 1;
        this._last = -1;
      },
      stop: function () {
        if (this._last !== -1) {
          this._actions[this._last].stop();
        }
        cc.Action.prototype.stop.call(this);
      },
      update: function (a) {
        var e;
        var i;
        var k = 0;
        var l = this._split;
        var g = this._actions;
        var h = this._last;
        if ((a = this._computeEaseTime(a)) < l) {
          e = l !== 0 ? a / l : 1;
          if (k === 0 && h === 1 && this._reversed) {
            g[1].update(0);
            g[1].stop();
          }
        } else {
          k = 1;
          e = l === 1 ? 1 : (a - l) / (1 - l);
          if (h === -1) {
            g[0].startWithTarget(this.target);
            g[0].update(1);
            g[0].stop();
          }
          if (h === 0) {
            g[0].update(1);
            g[0].stop();
          }
        }
        i = g[k];
        if (!(h === k && i.isDone())) {
          if (h !== k) {
            i.startWithTarget(this.target);
          }
          e *= i._timesForRepeat;
          i.update(e > 1 ? e % 1 : e);
          this._last = k;
        }
      },
      reverse: function () {
        var b = cc.Sequence._actionOneTwo(this._actions[1].reverse(), this._actions[0].reverse());
        this._cloneDecoration(b);
        this._reverseEaseList(b);
        b._reversed = true;
        return b;
      }
    });
    cc.sequence = function (f) {
      var a = f instanceof Array ? f : arguments;
      if (a.length === 1) {
        return null;
      }
      var b = a.length - 1;
      if (b >= 0) {
        a[b];
      }
      var c = null;
      if (b >= 0) {
        c = a[0];
        for (var g = 1; g <= b; g++) {
          if (a[g]) {
            c = cc.Sequence._actionOneTwo(c, a[g]);
          }
        }
      }
      return c;
    };
    cc.Sequence._actionOneTwo = function (d, a) {
      var b = new cc.Sequence();
      b.initWithTwoActions(d, a);
      return b;
    };
    cc.Repeat = cc.Class({
      name: "cc.Repeat",
      extends: cc.ActionInterval,
      ctor: function (c, a) {
        this._times = 0;
        this._total = 0;
        this._nextDt = 0;
        this._actionInstant = false;
        this._innerAction = null;
        if (a !== undefined) {
          this.initWithAction(c, a);
        }
      },
      initWithAction: function (d, a) {
        var b = d._duration * a;
        return !!this.initWithDuration(b) && (this._times = a, this._innerAction = d, d instanceof cc.ActionInstant && (this._actionInstant = true, this._times -= 1), this._total = 0, true);
      },
      clone: function () {
        var b = new cc.Repeat();
        this._cloneDecoration(b);
        b.initWithAction(this._innerAction.clone(), this._times);
        return b;
      },
      startWithTarget: function (b) {
        this._total = 0;
        this._nextDt = this._innerAction._duration / this._duration;
        cc.ActionInterval.prototype.startWithTarget.call(this, b);
        this._innerAction.startWithTarget(b);
      },
      stop: function () {
        this._innerAction.stop();
        cc.Action.prototype.stop.call(this);
      },
      update: function (f) {
        f = this._computeEaseTime(f);
        var g = this._innerAction;
        var b = this._duration;
        var c = this._times;
        var d = this._nextDt;
        if (f >= d) {
          for (; f > d && this._total < c;) {
            g.update(1);
            this._total++;
            g.stop();
            g.startWithTarget(this.target);
            d += g._duration / b;
            this._nextDt = d > 1 ? 1 : d;
          }
          if (f >= 1 && this._total < c) {
            g.update(1);
            this._total++;
          }
          if (!this._actionInstant) {
            if (this._total === c) {
              g.stop();
            } else {
              g.update(f - (d - g._duration / b));
            }
          }
        } else {
          g.update(f * c % 1);
        }
      },
      isDone: function () {
        return this._total === this._times;
      },
      reverse: function () {
        var b = new cc.Repeat(this._innerAction.reverse(), this._times);
        this._cloneDecoration(b);
        this._reverseEaseList(b);
        return b;
      },
      setInnerAction: function (b) {
        if (this._innerAction !== b) {
          this._innerAction = b;
        }
      },
      getInnerAction: function () {
        return this._innerAction;
      }
    });
    cc.repeat = function (c, a) {
      return new cc.Repeat(c, a);
    };
    cc.repeatForever = function (b) {
      return new cc.RepeatForever(b);
    };
    cc.RepeatForever = cc.Class({
      name: "cc.RepeatForever",
      extends: cc.ActionInterval,
      ctor: function (b) {
        this._innerAction = null;
        if (b) {
          this.initWithAction(b);
        }
      },
      initWithAction: function (b) {
        return !!b && (this._innerAction = b, true);
      },
      clone: function () {
        var b = new cc.RepeatForever();
        this._cloneDecoration(b);
        b.initWithAction(this._innerAction.clone());
        return b;
      },
      startWithTarget: function (b) {
        cc.ActionInterval.prototype.startWithTarget.call(this, b);
        this._innerAction.startWithTarget(b);
      },
      step: function (c) {
        var a = this._innerAction;
        a.step(c);
        if (a.isDone()) {
          a.startWithTarget(this.target);
          a.step(a.getElapsed() - a._duration);
        }
      },
      isDone: function () {
        return false;
      },
      reverse: function () {
        var b = new cc.RepeatForever(this._innerAction.reverse());
        this._cloneDecoration(b);
        this._reverseEaseList(b);
        return b;
      },
      setInnerAction: function (b) {
        if (this._innerAction !== b) {
          this._innerAction = b;
        }
      },
      getInnerAction: function () {
        return this._innerAction;
      }
    });
    cc.repeatForever = function (b) {
      return new cc.RepeatForever(b);
    };
    cc.Spawn = cc.Class({
      name: "cc.Spawn",
      extends: cc.ActionInterval,
      ctor: function (g) {
        this._one = null;
        this._two = null;
        var a = g instanceof Array ? g : arguments;
        if (a.length !== 1) {
          var b = a.length - 1;
          if (b >= 0) {
            a[b];
          }
          if (b >= 0) {
            for (var c, h = a[0], i = 1; i < b; i++) {
              if (a[i]) {
                c = h;
                h = cc.Spawn._actionOneTwo(c, a[i]);
              }
            }
            this.initWithTwoActions(h, a[b]);
          }
        }
      },
      initWithTwoActions: function (f, a) {
        if (!f || !a) {
          return false;
        }
        var b = false;
        var g = f._duration;
        var d = a._duration;
        if (this.initWithDuration(Math.max(g, d))) {
          this._one = f;
          this._two = a;
          if (g > d) {
            this._two = cc.Sequence._actionOneTwo(a, cc.delayTime(g - d));
          } else if (g < d) {
            this._one = cc.Sequence._actionOneTwo(f, cc.delayTime(d - g));
          }
          b = true;
        }
        return b;
      },
      clone: function () {
        var b = new cc.Spawn();
        this._cloneDecoration(b);
        b.initWithTwoActions(this._one.clone(), this._two.clone());
        return b;
      },
      startWithTarget: function (b) {
        cc.ActionInterval.prototype.startWithTarget.call(this, b);
        this._one.startWithTarget(b);
        this._two.startWithTarget(b);
      },
      stop: function () {
        this._one.stop();
        this._two.stop();
        cc.Action.prototype.stop.call(this);
      },
      update: function (b) {
        b = this._computeEaseTime(b);
        if (this._one) {
          this._one.update(b);
        }
        if (this._two) {
          this._two.update(b);
        }
      },
      reverse: function () {
        var b = cc.Spawn._actionOneTwo(this._one.reverse(), this._two.reverse());
        this._cloneDecoration(b);
        this._reverseEaseList(b);
        return b;
      }
    });
    cc.spawn = function (e) {
      var a = e instanceof Array ? e : arguments;
      if (a.length === 1) {
        return null;
      }
      if (a.length > 0) {
        a[a.length - 1];
      }
      for (var b = a[0], f = 1; f < a.length; f++) {
        if (a[f] != null) {
          b = cc.Spawn._actionOneTwo(b, a[f]);
        }
      }
      return b;
    };
    cc.Spawn._actionOneTwo = function (d, a) {
      var b = new cc.Spawn();
      b.initWithTwoActions(d, a);
      return b;
    };
    cc.RotateTo = cc.Class({
      name: "cc.RotateTo",
      extends: cc.ActionInterval,
      statics: {
        _reverse: false
      },
      ctor: function (c, a) {
        this._startAngle = 0;
        this._dstAngle = 0;
        this._angle = 0;
        if (a !== undefined) {
          this.initWithDuration(c, a);
        }
      },
      initWithDuration: function (c, a) {
        return !!cc.ActionInterval.prototype.initWithDuration.call(this, c) && (this._dstAngle = a, true);
      },
      clone: function () {
        var b = new cc.RotateTo();
        this._cloneDecoration(b);
        b.initWithDuration(this._duration, this._dstAngle);
        return b;
      },
      startWithTarget: function (d) {
        cc.ActionInterval.prototype.startWithTarget.call(this, d);
        var a = d.angle % 360;
        var b = cc.RotateTo._reverse ? this._dstAngle - a : this._dstAngle + a;
        if (b > 180) {
          b -= 360;
        }
        if (b < -180) {
          b += 360;
        }
        this._startAngle = a;
        this._angle = cc.RotateTo._reverse ? b : -b;
      },
      reverse: function () {},
      update: function (b) {
        b = this._computeEaseTime(b);
        if (this.target) {
          this.target.angle = this._startAngle + this._angle * b;
        }
      }
    });
    cc.rotateTo = function (c, a) {
      return new cc.RotateTo(c, a);
    };
    cc.RotateBy = cc.Class({
      name: "cc.RotateBy",
      extends: cc.ActionInterval,
      statics: {
        _reverse: false
      },
      ctor: function (c, a) {
        a *= cc.RotateBy._reverse ? 1 : -1;
        this._deltaAngle = 0;
        this._startAngle = 0;
        if (a !== undefined) {
          this.initWithDuration(c, a);
        }
      },
      initWithDuration: function (c, a) {
        return !!cc.ActionInterval.prototype.initWithDuration.call(this, c) && (this._deltaAngle = a, true);
      },
      clone: function () {
        var b = new cc.RotateBy();
        this._cloneDecoration(b);
        b.initWithDuration(this._duration, this._deltaAngle);
        return b;
      },
      startWithTarget: function (b) {
        cc.ActionInterval.prototype.startWithTarget.call(this, b);
        this._startAngle = b.angle;
      },
      update: function (b) {
        b = this._computeEaseTime(b);
        if (this.target) {
          this.target.angle = this._startAngle + this._deltaAngle * b;
        }
      },
      reverse: function () {
        var b = new cc.RotateBy();
        b.initWithDuration(this._duration, -this._deltaAngle);
        this._cloneDecoration(b);
        this._reverseEaseList(b);
        return b;
      }
    });
    cc.rotateBy = function (c, a) {
      return new cc.RotateBy(c, a);
    };
    cc.MoveBy = cc.Class({
      name: "cc.MoveBy",
      extends: cc.ActionInterval,
      ctor: function (d, a, b) {
        this._positionDelta = cc.v2(0, 0);
        this._startPosition = cc.v2(0, 0);
        this._previousPosition = cc.v2(0, 0);
        if (a !== undefined) {
          cc.MoveBy.prototype.initWithDuration.call(this, d, a, b);
        }
      },
      initWithDuration: function (d, a, e) {
        return !!cc.ActionInterval.prototype.initWithDuration.call(this, d) && (a.x !== undefined && (e = a.y, a = a.x), this._positionDelta.x = a, this._positionDelta.y = e, true);
      },
      clone: function () {
        var b = new cc.MoveBy();
        this._cloneDecoration(b);
        b.initWithDuration(this._duration, this._positionDelta);
        return b;
      },
      startWithTarget: function (d) {
        cc.ActionInterval.prototype.startWithTarget.call(this, d);
        var a = d.x;
        var b = d.y;
        this._previousPosition.x = a;
        this._previousPosition.y = b;
        this._startPosition.x = a;
        this._startPosition.y = b;
      },
      update: function (a) {
        a = this._computeEaseTime(a);
        if (this.target) {
          var e = this._positionDelta.x * a;
          var i = this._positionDelta.y * a;
          var k = this._startPosition;
          if (cc.macro.ENABLE_STACKABLE_ACTIONS) {
            var f = this.target.x;
            var g = this.target.y;
            var h = this._previousPosition;
            k.x = k.x + f - h.x;
            k.y = k.y + g - h.y;
            e += k.x;
            i += k.y;
            h.x = e;
            h.y = i;
            this.target.setPosition(e, i);
          } else {
            this.target.setPosition(k.x + e, k.y + i);
          }
        }
      },
      reverse: function () {
        var b = new cc.MoveBy(this._duration, cc.v2(-this._positionDelta.x, -this._positionDelta.y));
        this._cloneDecoration(b);
        this._reverseEaseList(b);
        return b;
      }
    });
    cc.moveBy = function (d, a, b) {
      return new cc.MoveBy(d, a, b);
    };
    cc.MoveTo = cc.Class({
      name: "cc.MoveTo",
      extends: cc.MoveBy,
      ctor: function (d, a, b) {
        this._endPosition = cc.v2(0, 0);
        if (a !== undefined) {
          this.initWithDuration(d, a, b);
        }
      },
      initWithDuration: function (d, a, e) {
        return !!cc.MoveBy.prototype.initWithDuration.call(this, d, a, e) && (a.x !== undefined && (e = a.y, a = a.x), this._endPosition.x = a, this._endPosition.y = e, true);
      },
      clone: function () {
        var b = new cc.MoveTo();
        this._cloneDecoration(b);
        b.initWithDuration(this._duration, this._endPosition);
        return b;
      },
      startWithTarget: function (b) {
        cc.MoveBy.prototype.startWithTarget.call(this, b);
        this._positionDelta.x = this._endPosition.x - b.x;
        this._positionDelta.y = this._endPosition.y - b.y;
      }
    });
    cc.moveTo = function (d, a, b) {
      return new cc.MoveTo(d, a, b);
    };
    cc.SkewTo = cc.Class({
      name: "cc.SkewTo",
      extends: cc.ActionInterval,
      ctor: function (d, a, b) {
        this._skewX = 0;
        this._skewY = 0;
        this._startSkewX = 0;
        this._startSkewY = 0;
        this._endSkewX = 0;
        this._endSkewY = 0;
        this._deltaX = 0;
        this._deltaY = 0;
        if (b !== undefined) {
          cc.SkewTo.prototype.initWithDuration.call(this, d, a, b);
        }
      },
      initWithDuration: function (e, a, b) {
        var c = false;
        if (cc.ActionInterval.prototype.initWithDuration.call(this, e)) {
          this._endSkewX = a;
          this._endSkewY = b;
          c = true;
        }
        return c;
      },
      clone: function () {
        var b = new cc.SkewTo();
        this._cloneDecoration(b);
        b.initWithDuration(this._duration, this._endSkewX, this._endSkewY);
        return b;
      },
      startWithTarget: function (b) {
        cc.ActionInterval.prototype.startWithTarget.call(this, b);
        this._startSkewX = b.skewX % 180;
        this._deltaX = this._endSkewX - this._startSkewX;
        if (this._deltaX > 180) {
          this._deltaX -= 360;
        }
        if (this._deltaX < -180) {
          this._deltaX += 360;
        }
        this._startSkewY = b.skewY % 360;
        this._deltaY = this._endSkewY - this._startSkewY;
        if (this._deltaY > 180) {
          this._deltaY -= 360;
        }
        if (this._deltaY < -180) {
          this._deltaY += 360;
        }
      },
      update: function (b) {
        b = this._computeEaseTime(b);
        this.target.skewX = this._startSkewX + this._deltaX * b;
        this.target.skewY = this._startSkewY + this._deltaY * b;
      }
    });
    cc.skewTo = function (d, a, b) {
      return new cc.SkewTo(d, a, b);
    };
    cc.SkewBy = cc.Class({
      name: "cc.SkewBy",
      extends: cc.SkewTo,
      ctor: function (d, a, b) {
        if (b !== undefined) {
          this.initWithDuration(d, a, b);
        }
      },
      initWithDuration: function (e, a, b) {
        var c = false;
        if (cc.SkewTo.prototype.initWithDuration.call(this, e, a, b)) {
          this._skewX = a;
          this._skewY = b;
          c = true;
        }
        return c;
      },
      clone: function () {
        var b = new cc.SkewBy();
        this._cloneDecoration(b);
        b.initWithDuration(this._duration, this._skewX, this._skewY);
        return b;
      },
      startWithTarget: function (b) {
        cc.SkewTo.prototype.startWithTarget.call(this, b);
        this._deltaX = this._skewX;
        this._deltaY = this._skewY;
        this._endSkewX = this._startSkewX + this._deltaX;
        this._endSkewY = this._startSkewY + this._deltaY;
      },
      reverse: function () {
        var b = new cc.SkewBy(this._duration, -this._skewX, -this._skewY);
        this._cloneDecoration(b);
        this._reverseEaseList(b);
        return b;
      }
    });
    cc.skewBy = function (d, a, b) {
      return new cc.SkewBy(d, a, b);
    };
    cc.JumpBy = cc.Class({
      name: "cc.JumpBy",
      extends: cc.ActionInterval,
      ctor: function (f, a, b, c, d) {
        this._startPosition = cc.v2(0, 0);
        this._previousPosition = cc.v2(0, 0);
        this._delta = cc.v2(0, 0);
        this._height = 0;
        this._jumps = 0;
        if (c !== undefined) {
          cc.JumpBy.prototype.initWithDuration.call(this, f, a, b, c, d);
        }
      },
      initWithDuration: function (e, a, g, h, i) {
        return !!cc.ActionInterval.prototype.initWithDuration.call(this, e) && (i === undefined && (i = h, h = g, g = a.y, a = a.x), this._delta.x = a, this._delta.y = g, this._height = h, this._jumps = i, true);
      },
      clone: function () {
        var b = new cc.JumpBy();
        this._cloneDecoration(b);
        b.initWithDuration(this._duration, this._delta, this._height, this._jumps);
        return b;
      },
      startWithTarget: function (d) {
        cc.ActionInterval.prototype.startWithTarget.call(this, d);
        var a = d.x;
        var b = d.y;
        this._previousPosition.x = a;
        this._previousPosition.y = b;
        this._startPosition.x = a;
        this._startPosition.y = b;
      },
      update: function (i) {
        i = this._computeEaseTime(i);
        if (this.target) {
          var j = i * this._jumps % 1;
          var c = this._height * 4 * j * (1 - j);
          c += this._delta.y * i;
          var k = this._delta.x * i;
          var l = this._startPosition;
          if (cc.macro.ENABLE_STACKABLE_ACTIONS) {
            var f = this.target.x;
            var g = this.target.y;
            var h = this._previousPosition;
            l.x = l.x + f - h.x;
            l.y = l.y + g - h.y;
            k += l.x;
            c += l.y;
            h.x = k;
            h.y = c;
            this.target.setPosition(k, c);
          } else {
            this.target.setPosition(l.x + k, l.y + c);
          }
        }
      },
      reverse: function () {
        var b = new cc.JumpBy(this._duration, cc.v2(-this._delta.x, -this._delta.y), this._height, this._jumps);
        this._cloneDecoration(b);
        this._reverseEaseList(b);
        return b;
      }
    });
    cc.jumpBy = function (f, a, b, c, d) {
      return new cc.JumpBy(f, a, b, c, d);
    };
    cc.JumpTo = cc.Class({
      name: "cc.JumpTo",
      extends: cc.JumpBy,
      ctor: function (f, a, b, c, d) {
        this._endPosition = cc.v2(0, 0);
        if (c !== undefined) {
          this.initWithDuration(f, a, b, c, d);
        }
      },
      initWithDuration: function (e, a, g, h, d) {
        return !!cc.JumpBy.prototype.initWithDuration.call(this, e, a, g, h, d) && (d === undefined && (g = a.y, a = a.x), this._endPosition.x = a, this._endPosition.y = g, true);
      },
      startWithTarget: function (b) {
        cc.JumpBy.prototype.startWithTarget.call(this, b);
        this._delta.x = this._endPosition.x - this._startPosition.x;
        this._delta.y = this._endPosition.y - this._startPosition.y;
      },
      clone: function () {
        var b = new cc.JumpTo();
        this._cloneDecoration(b);
        b.initWithDuration(this._duration, this._endPosition, this._height, this._jumps);
        return b;
      }
    });
    cc.jumpTo = function (f, a, b, c, d) {
      return new cc.JumpTo(f, a, b, c, d);
    };
    cc.BezierBy = cc.Class({
      name: "cc.BezierBy",
      extends: cc.ActionInterval,
      ctor: function (c, a) {
        this._config = [];
        this._startPosition = cc.v2(0, 0);
        this._previousPosition = cc.v2(0, 0);
        if (a) {
          cc.BezierBy.prototype.initWithDuration.call(this, c, a);
        }
      },
      initWithDuration: function (c, a) {
        return !!cc.ActionInterval.prototype.initWithDuration.call(this, c) && (this._config = a, true);
      },
      clone: function () {
        var e = new cc.BezierBy();
        this._cloneDecoration(e);
        for (var a = [], b = 0; b < this._config.length; b++) {
          var f = this._config[b];
          a.push(cc.v2(f.x, f.y));
        }
        e.initWithDuration(this._duration, a);
        return e;
      },
      startWithTarget: function (d) {
        cc.ActionInterval.prototype.startWithTarget.call(this, d);
        var a = d.x;
        var b = d.y;
        this._previousPosition.x = a;
        this._previousPosition.y = b;
        this._startPosition.x = a;
        this._startPosition.y = b;
      },
      update: function (b) {
        b = this._computeEaseTime(b);
        if (this.target) {
          var h = this._config;
          var j = h[0].x;
          var i = h[1].x;
          var k = h[2].x;
          var l = h[0].y;
          var m = h[1].y;
          var a = h[2].y;
          var n = e(0, j, i, k, b);
          var o = e(0, l, m, a, b);
          var s = this._startPosition;
          if (cc.macro.ENABLE_STACKABLE_ACTIONS) {
            var q = this.target.x;
            var r = this.target.y;
            var f = this._previousPosition;
            s.x = s.x + q - f.x;
            s.y = s.y + r - f.y;
            n += s.x;
            o += s.y;
            f.x = n;
            f.y = o;
            this.target.setPosition(n, o);
          } else {
            this.target.setPosition(s.x + n, s.y + o);
          }
        }
      },
      reverse: function () {
        var c = this._config;
        var b = c[0].x;
        var d = c[0].y;
        var e = c[1].x;
        var f = c[1].y;
        var g = c[2].x;
        var h = c[2].y;
        var i = [cc.v2(e - g, f - h), cc.v2(b - g, d - h), cc.v2(-g, -h)];
        var a = new cc.BezierBy(this._duration, i);
        this._cloneDecoration(a);
        this._reverseEaseList(a);
        return a;
      }
    });
    cc.bezierBy = function (c, a) {
      return new cc.BezierBy(c, a);
    };
    cc.BezierTo = cc.Class({
      name: "cc.BezierTo",
      extends: cc.BezierBy,
      ctor: function (c, a) {
        this._toConfig = [];
        if (a) {
          this.initWithDuration(c, a);
        }
      },
      initWithDuration: function (c, a) {
        return !!cc.ActionInterval.prototype.initWithDuration.call(this, c) && (this._toConfig = a, true);
      },
      clone: function () {
        var b = new cc.BezierTo();
        this._cloneDecoration(b);
        b.initWithDuration(this._duration, this._toConfig);
        return b;
      },
      startWithTarget: function (e) {
        cc.BezierBy.prototype.startWithTarget.call(this, e);
        var a = this._startPosition;
        var b = this._toConfig;
        var c = this._config;
        c[0] = b[0].sub(a);
        c[1] = b[1].sub(a);
        c[2] = b[2].sub(a);
      }
    });
    cc.bezierTo = function (c, a) {
      return new cc.BezierTo(c, a);
    };
    cc.ScaleTo = cc.Class({
      name: "cc.ScaleTo",
      extends: cc.ActionInterval,
      ctor: function (d, a, b) {
        this._scaleX = 1;
        this._scaleY = 1;
        this._startScaleX = 1;
        this._startScaleY = 1;
        this._endScaleX = 0;
        this._endScaleY = 0;
        this._deltaX = 0;
        this._deltaY = 0;
        if (a !== undefined) {
          cc.ScaleTo.prototype.initWithDuration.call(this, d, a, b);
        }
      },
      initWithDuration: function (d, a, b) {
        return !!cc.ActionInterval.prototype.initWithDuration.call(this, d) && (this._endScaleX = a, this._endScaleY = b != null ? b : a, true);
      },
      clone: function () {
        var b = new cc.ScaleTo();
        this._cloneDecoration(b);
        b.initWithDuration(this._duration, this._endScaleX, this._endScaleY);
        return b;
      },
      startWithTarget: function (b) {
        cc.ActionInterval.prototype.startWithTarget.call(this, b);
        this._startScaleX = b.scaleX;
        this._startScaleY = b.scaleY;
        this._deltaX = this._endScaleX - this._startScaleX;
        this._deltaY = this._endScaleY - this._startScaleY;
      },
      update: function (b) {
        b = this._computeEaseTime(b);
        if (this.target) {
          this.target.scaleX = this._startScaleX + this._deltaX * b;
          this.target.scaleY = this._startScaleY + this._deltaY * b;
        }
      }
    });
    cc.scaleTo = function (d, a, b) {
      return new cc.ScaleTo(d, a, b);
    };
    cc.ScaleBy = cc.Class({
      name: "cc.ScaleBy",
      extends: cc.ScaleTo,
      startWithTarget: function (b) {
        cc.ScaleTo.prototype.startWithTarget.call(this, b);
        this._deltaX = this._startScaleX * this._endScaleX - this._startScaleX;
        this._deltaY = this._startScaleY * this._endScaleY - this._startScaleY;
      },
      reverse: function () {
        var b = new cc.ScaleBy(this._duration, 1 / this._endScaleX, 1 / this._endScaleY);
        this._cloneDecoration(b);
        this._reverseEaseList(b);
        return b;
      },
      clone: function () {
        var b = new cc.ScaleBy();
        this._cloneDecoration(b);
        b.initWithDuration(this._duration, this._endScaleX, this._endScaleY);
        return b;
      }
    });
    cc.scaleBy = function (d, a, b) {
      return new cc.ScaleBy(d, a, b);
    };
    cc.Blink = cc.Class({
      name: "cc.Blink",
      extends: cc.ActionInterval,
      ctor: function (c, a) {
        this._times = 0;
        this._originalState = false;
        if (a !== undefined) {
          this.initWithDuration(c, a);
        }
      },
      initWithDuration: function (c, a) {
        return !!cc.ActionInterval.prototype.initWithDuration.call(this, c) && (this._times = a, true);
      },
      clone: function () {
        var b = new cc.Blink();
        this._cloneDecoration(b);
        b.initWithDuration(this._duration, this._times);
        return b;
      },
      update: function (d) {
        d = this._computeEaseTime(d);
        if (this.target && !this.isDone()) {
          var e = 1 / this._times;
          var b = d % e;
          this.target.opacity = b > e / 2 ? 255 : 0;
        }
      },
      startWithTarget: function (b) {
        cc.ActionInterval.prototype.startWithTarget.call(this, b);
        this._originalState = b.opacity;
      },
      stop: function () {
        this.target.opacity = this._originalState;
        cc.ActionInterval.prototype.stop.call(this);
      },
      reverse: function () {
        var b = new cc.Blink(this._duration, this._times);
        this._cloneDecoration(b);
        this._reverseEaseList(b);
        return b;
      }
    });
    cc.blink = function (c, a) {
      return new cc.Blink(c, a);
    };
    cc.FadeTo = cc.Class({
      name: "cc.FadeTo",
      extends: cc.ActionInterval,
      ctor: function (c, a) {
        this._toOpacity = 0;
        this._fromOpacity = 0;
        if (a !== undefined) {
          cc.FadeTo.prototype.initWithDuration.call(this, c, a);
        }
      },
      initWithDuration: function (c, a) {
        return !!cc.ActionInterval.prototype.initWithDuration.call(this, c) && (this._toOpacity = a, true);
      },
      clone: function () {
        var b = new cc.FadeTo();
        this._cloneDecoration(b);
        b.initWithDuration(this._duration, this._toOpacity);
        return b;
      },
      update: function (c) {
        c = this._computeEaseTime(c);
        var d = this._fromOpacity !== undefined ? this._fromOpacity : 255;
        this.target.opacity = d + (this._toOpacity - d) * c;
      },
      startWithTarget: function (b) {
        cc.ActionInterval.prototype.startWithTarget.call(this, b);
        this._fromOpacity = b.opacity;
      }
    });
    cc.fadeTo = function (c, a) {
      return new cc.FadeTo(c, a);
    };
    cc.FadeIn = cc.Class({
      name: "cc.FadeIn",
      extends: cc.FadeTo,
      ctor: function (b) {
        if (b == null) {
          b = 0;
        }
        this._reverseAction = null;
        this.initWithDuration(b, 255);
      },
      reverse: function () {
        var b = new cc.FadeOut();
        b.initWithDuration(this._duration, 0);
        this._cloneDecoration(b);
        this._reverseEaseList(b);
        return b;
      },
      clone: function () {
        var b = new cc.FadeIn();
        this._cloneDecoration(b);
        b.initWithDuration(this._duration, this._toOpacity);
        return b;
      },
      startWithTarget: function (b) {
        if (this._reverseAction) {
          this._toOpacity = this._reverseAction._fromOpacity;
        }
        cc.FadeTo.prototype.startWithTarget.call(this, b);
      }
    });
    cc.fadeIn = function (b) {
      return new cc.FadeIn(b);
    };
    cc.FadeOut = cc.Class({
      name: "cc.FadeOut",
      extends: cc.FadeTo,
      ctor: function (b) {
        if (b == null) {
          b = 0;
        }
        this._reverseAction = null;
        this.initWithDuration(b, 0);
      },
      reverse: function () {
        var b = new cc.FadeIn();
        b._reverseAction = this;
        b.initWithDuration(this._duration, 255);
        this._cloneDecoration(b);
        this._reverseEaseList(b);
        return b;
      },
      clone: function () {
        var b = new cc.FadeOut();
        this._cloneDecoration(b);
        b.initWithDuration(this._duration, this._toOpacity);
        return b;
      }
    });
    cc.fadeOut = function (b) {
      return new cc.FadeOut(b);
    };
    cc.TintTo = cc.Class({
      name: "cc.TintTo",
      extends: cc.ActionInterval,
      ctor: function (e, a, f, g) {
        this._to = cc.color(0, 0, 0);
        this._from = cc.color(0, 0, 0);
        if (a instanceof cc.Color) {
          g = a.b;
          f = a.g;
          a = a.r;
        }
        if (g !== undefined) {
          this.initWithDuration(e, a, f, g);
        }
      },
      initWithDuration: function (e, a, b, c) {
        return !!cc.ActionInterval.prototype.initWithDuration.call(this, e) && (this._to = cc.color(a, b, c), true);
      },
      clone: function () {
        var c = new cc.TintTo();
        this._cloneDecoration(c);
        var a = this._to;
        c.initWithDuration(this._duration, a.r, a.g, a.b);
        return c;
      },
      startWithTarget: function (b) {
        cc.ActionInterval.prototype.startWithTarget.call(this, b);
        this._from = this.target.color;
      },
      update: function (d) {
        d = this._computeEaseTime(d);
        var e = this._from;
        var b = this._to;
        if (e) {
          this.target.color = cc.color(e.r + (b.r - e.r) * d, e.g + (b.g - e.g) * d, e.b + (b.b - e.b) * d);
        }
      }
    });
    cc.tintTo = function (e, a, b, c) {
      return new cc.TintTo(e, a, b, c);
    };
    cc.TintBy = cc.Class({
      name: "cc.TintBy",
      extends: cc.ActionInterval,
      ctor: function (e, a, b, c) {
        this._deltaR = 0;
        this._deltaG = 0;
        this._deltaB = 0;
        this._fromR = 0;
        this._fromG = 0;
        this._fromB = 0;
        if (c !== undefined) {
          this.initWithDuration(e, a, b, c);
        }
      },
      initWithDuration: function (e, a, b, c) {
        return !!cc.ActionInterval.prototype.initWithDuration.call(this, e) && (this._deltaR = a, this._deltaG = b, this._deltaB = c, true);
      },
      clone: function () {
        var b = new cc.TintBy();
        this._cloneDecoration(b);
        b.initWithDuration(this._duration, this._deltaR, this._deltaG, this._deltaB);
        return b;
      },
      startWithTarget: function (c) {
        cc.ActionInterval.prototype.startWithTarget.call(this, c);
        var a = c.color;
        this._fromR = a.r;
        this._fromG = a.g;
        this._fromB = a.b;
      },
      update: function (b) {
        b = this._computeEaseTime(b);
        this.target.color = cc.color(this._fromR + this._deltaR * b, this._fromG + this._deltaG * b, this._fromB + this._deltaB * b);
      },
      reverse: function () {
        var b = new cc.TintBy(this._duration, -this._deltaR, -this._deltaG, -this._deltaB);
        this._cloneDecoration(b);
        this._reverseEaseList(b);
        return b;
      }
    });
    cc.tintBy = function (e, a, b, c) {
      return new cc.TintBy(e, a, b, c);
    };
    cc.DelayTime = cc.Class({
      name: "cc.DelayTime",
      extends: cc.ActionInterval,
      update: function () {},
      reverse: function () {
        var b = new cc.DelayTime(this._duration);
        this._cloneDecoration(b);
        this._reverseEaseList(b);
        return b;
      },
      clone: function () {
        var b = new cc.DelayTime();
        this._cloneDecoration(b);
        b.initWithDuration(this._duration);
        return b;
      }
    });
    cc.delayTime = function (b) {
      return new cc.DelayTime(b);
    };
    cc.ReverseTime = cc.Class({
      name: "cc.ReverseTime",
      extends: cc.ActionInterval,
      ctor: function (b) {
        this._other = null;
        if (b) {
          this.initWithAction(b);
        }
      },
      initWithAction: function (b) {
        return !!b && b !== this._other && !!cc.ActionInterval.prototype.initWithDuration.call(this, b._duration) && (this._other = b, true);
      },
      clone: function () {
        var b = new cc.ReverseTime();
        this._cloneDecoration(b);
        b.initWithAction(this._other.clone());
        return b;
      },
      startWithTarget: function (b) {
        cc.ActionInterval.prototype.startWithTarget.call(this, b);
        this._other.startWithTarget(b);
      },
      update: function (b) {
        b = this._computeEaseTime(b);
        if (this._other) {
          this._other.update(1 - b);
        }
      },
      reverse: function () {
        return this._other.clone();
      },
      stop: function () {
        this._other.stop();
        cc.Action.prototype.stop.call(this);
      }
    });
    cc.reverseTime = function (b) {
      return new cc.ReverseTime(b);
    };
    cc.TargetedAction = cc.Class({
      name: "cc.TargetedAction",
      extends: cc.ActionInterval,
      ctor: function (c, a) {
        this._action = null;
        this._forcedTarget = null;
        if (a) {
          this.initWithTarget(c, a);
        }
      },
      initWithTarget: function (c, a) {
        return !!this.initWithDuration(a._duration) && (this._forcedTarget = c, this._action = a, true);
      },
      clone: function () {
        var b = new cc.TargetedAction();
        this._cloneDecoration(b);
        b.initWithTarget(this._forcedTarget, this._action.clone());
        return b;
      },
      startWithTarget: function (b) {
        cc.ActionInterval.prototype.startWithTarget.call(this, b);
        this._action.startWithTarget(this._forcedTarget);
      },
      stop: function () {
        this._action.stop();
      },
      update: function (b) {
        b = this._computeEaseTime(b);
        this._action.update(b);
      },
      getForcedTarget: function () {
        return this._forcedTarget;
      },
      setForcedTarget: function (b) {
        if (this._forcedTarget !== b) {
          this._forcedTarget = b;
        }
      }
    });
    cc.targetedAction = function (c, a) {
      return new cc.TargetedAction(c, a);
    };
  }, {}],
  6: [function (d) {
    "use strict";

    d("../core/platform/CCClass");
    var e = d("../core/platform/js");
    function a() {
      this.actions = [];
      this.target = null;
      this.actionIndex = 0;
      this.currentAction = null;
      this.paused = false;
      this.lock = false;
    }
    cc.ActionManager = function () {
      this._hashTargets = e.createMap(true);
      this._arrayTargets = [];
      this._currentTarget = null;
      if (cc.director._scheduler) {
        cc.director._scheduler.enableForTarget(this);
      }
    };
    cc.ActionManager.prototype = {
      constructor: cc.ActionManager,
      _elementPool: [],
      _searchElementByTarget: function (d, a) {
        for (var b = 0; b < d.length; b++) {
          if (a === d[b].target) {
            return d[b];
          }
        }
        return null;
      },
      _getElement: function (c, e) {
        var b = this._elementPool.pop();
        if (!b) {
          b = new a();
        }
        b.target = c;
        b.paused = !!e;
        return b;
      },
      _putElement: function (b) {
        b.actions.length = 0;
        b.actionIndex = 0;
        b.currentAction = null;
        b.paused = false;
        b.target = null;
        b.lock = false;
        this._elementPool.push(b);
      },
      addAction: function (e, a, b) {
        if (e && a) {
          var c = this._hashTargets[a._id];
          if (c) {
            if (!c.actions) {
              c.actions = [];
            }
          } else {
            c = this._getElement(a, b);
            this._hashTargets[a._id] = c;
            this._arrayTargets.push(c);
          }
          c.actions.push(e);
          e.startWithTarget(a);
        }
      },
      removeAllActions: function () {
        for (var b = this._arrayTargets, a = 0; a < b.length; a++) {
          var f = b[a];
          if (f) {
            this._putElement(f);
          }
        }
        this._arrayTargets.length = 0;
        this._hashTargets = e.createMap(true);
      },
      removeAllActionsFromTarget: function (c) {
        if (c != null) {
          var a = this._hashTargets[c._id];
          if (a) {
            a.actions.length = 0;
            this._deleteHashElement(a);
          }
        }
      },
      removeAction: function (e) {
        if (e) {
          var a = e.getOriginalTarget();
          var b = this._hashTargets[a._id];
          if (b) {
            for (var c = 0; c < b.actions.length; c++) {
              if (b.actions[c] === e) {
                b.actions.splice(c, 1);
                if (b.actionIndex >= c) {
                  b.actionIndex--;
                }
                break;
              }
            }
          }
        }
      },
      _removeActionByTag: function (g, a, b) {
        for (var c = 0, h = a.actions.length; c < h; ++c) {
          var e = a.actions[c];
          if (e && e.getTag() === g) {
            if (b && e.getOriginalTarget() !== b) {
              continue;
            }
            this._removeActionAtIndex(c, a);
            break;
          }
        }
      },
      _removeAllActionsByTag: function (f, a, b) {
        for (var c = a.actions.length - 1; c >= 0; --c) {
          var g = a.actions[c];
          if (g && g.getTag() === f) {
            if (b && g.getOriginalTarget() !== b) {
              continue;
            }
            this._removeActionAtIndex(c, a);
          }
        }
      },
      removeActionByTag: function (g, a) {
        cc.Action.TAG_INVALID;
        var b = this._hashTargets;
        if (a) {
          var c = b[a._id];
          if (c) {
            this._removeActionByTag(g, c, a);
          }
        } else {
          for (var d in b) {
            var h = b[d];
            this._removeActionByTag(g, h);
          }
        }
      },
      removeAllActionsByTag: function (g, a) {
        cc.Action.TAG_INVALID;
        var b = this._hashTargets;
        if (a) {
          var c = b[a._id];
          if (c) {
            this._removeAllActionsByTag(g, c, a);
          }
        } else {
          for (var d in b) {
            var h = b[d];
            this._removeAllActionsByTag(g, h);
          }
        }
      },
      getActionByTag: function (f, a) {
        cc.Action.TAG_INVALID;
        var b = this._hashTargets[a._id];
        if (b && b.actions != null) {
          for (var c = 0; c < b.actions.length; ++c) {
            var g = b.actions[c];
            if (g && g.getTag() === f) {
              return g;
            }
          }
        }
        return null;
      },
      getNumberOfRunningActionsInTarget: function (c) {
        var a = this._hashTargets[c._id];
        if (a && a.actions) {
          return a.actions.length;
        } else {
          return 0;
        }
      },
      pauseTarget: function (c) {
        var a = this._hashTargets[c._id];
        if (a) {
          a.paused = true;
        }
      },
      resumeTarget: function (c) {
        var a = this._hashTargets[c._id];
        if (a) {
          a.paused = false;
        }
      },
      pauseAllRunningActions: function () {
        for (var e = [], a = this._arrayTargets, b = 0; b < a.length; b++) {
          var f = a[b];
          if (f && !f.paused) {
            f.paused = true;
            e.push(f.target);
          }
        }
        return e;
      },
      resumeTargets: function (c) {
        if (c) {
          for (var a = 0; a < c.length; a++) {
            if (c[a]) {
              this.resumeTarget(c[a]);
            }
          }
        }
      },
      pauseTargets: function (c) {
        if (c) {
          for (var a = 0; a < c.length; a++) {
            if (c[a]) {
              this.pauseTarget(c[a]);
            }
          }
        }
      },
      purgeSharedManager: function () {
        cc.director.getScheduler().unscheduleUpdate(this);
      },
      _removeActionAtIndex: function (c, a) {
        a.actions[c];
        a.actions.splice(c, 1);
        if (a.actionIndex >= c) {
          a.actionIndex--;
        }
        if (a.actions.length === 0) {
          this._deleteHashElement(a);
        }
      },
      _deleteHashElement: function (e) {
        var a = false;
        if (e && !e.lock && this._hashTargets[e.target._id]) {
          delete this._hashTargets[e.target._id];
          for (var g = this._arrayTargets, c = 0, h = g.length; c < h; c++) {
            if (g[c] === e) {
              g.splice(c, 1);
              break;
            }
          }
          this._putElement(e);
          a = true;
        }
        return a;
      },
      update: function (e) {
        for (var a, g = this._arrayTargets, c = 0; c < g.length; c++) {
          this._currentTarget = g[c];
          if (!(a = this._currentTarget).paused && a.actions) {
            a.lock = true;
            a.actionIndex = 0;
            for (; a.actionIndex < a.actions.length; a.actionIndex++) {
              a.currentAction = a.actions[a.actionIndex];
              if (a.currentAction) {
                a.currentAction.step(e * (a.currentAction._speedMethod ? a.currentAction._speed : 1));
                if (a.currentAction && a.currentAction.isDone()) {
                  a.currentAction.stop();
                  var h = a.currentAction;
                  a.currentAction = null;
                  this.removeAction(h);
                }
                a.currentAction = null;
              }
            }
            a.lock = false;
          }
          if (a.actions.length === 0 && this._deleteHashElement(a)) {
            c--;
          }
        }
      }
    };
  }, {
    "../core/platform/CCClass": 162,
    "../core/platform/js": 183
  }],
  7: [function (b) {
    "use strict";

    b("./CCActionManager");
    b("./CCAction");
    b("./CCActionInterval");
    b("./CCActionInstant");
    b("./CCActionEase");
    b("./CCActionCatmullRom");
    b("./tween");
  }, {
    "./CCAction": 1,
    "./CCActionCatmullRom": 2,
    "./CCActionEase": 3,
    "./CCActionInstant": 4,
    "./CCActionInterval": 5,
    "./CCActionManager": 6,
    "./tween": 8
  }],
  8: [function (f) {
    "use strict";

    var h = f("../animation/bezier");
    var b = 0;
    var g = cc.Class({
      name: "cc.TweenAction",
      extends: cc.ActionInterval,
      ctor: function (a, b, c) {
        this._opts = c = c || Object.create(null);
        this._props = Object.create(null);
        c.progress = c.progress || this.progress;
        if (c.easing && typeof c.easing == "string") {
          var d = c.easing;
          c.easing = cc.easing[d];
          c.easing;
        }
        var f = this._opts.relative;
        for (var g in b) {
          var i = b[g];
          var l = undefined;
          var o = undefined;
          if (i.value !== undefined && (i.easing || i.progress)) {
            l = typeof i.easing == "string" ? cc.easing[i.easing] : i.easing;
            o = i.progress;
            i = i.value;
          }
          if (typeof i == "number" || i.lerp && (!f || i.add || i.mul) && i.clone) {
            var p = Object.create(null);
            p.value = i;
            p.easing = l;
            p.progress = o;
            this._props[g] = p;
          }
        }
        this._originProps = b;
        this.initWithDuration(a);
      },
      clone: function () {
        var b = new g(this._duration, this._originProps, this._opts);
        this._cloneDecoration(b);
        return b;
      },
      startWithTarget: function (g) {
        cc.ActionInterval.prototype.startWithTarget.call(this, g);
        var a = !!this._opts.relative;
        var b = this._props;
        for (var c in b) {
          var h = g[c];
          var i = b[c];
          if (typeof h == "number") {
            i.start = h;
            i.current = h;
            i.end = a ? h + i.value : i.value;
          } else {
            i.start = h.clone();
            i.current = h.clone();
            i.end = a ? (h.add || h.mul).call(h, i.value) : i.value;
          }
        }
      },
      update: function (a) {
        var b = this._opts;
        var c = a;
        if (b.easing) {
          c = b.easing(a);
        }
        var d = this.target;
        if (d) {
          var f = this._props;
          var g = b.progress;
          for (var h in f) {
            var i = f[h];
            var j = i.easing ? i.easing(a) : c;
            var l = i.current = (i.progress || g)(i.start, i.end, i.current, j);
            d[h] = l;
          }
          var o = b.onUpdate;
          if (o) {
            o(d, a);
          }
        }
      },
      progress: function (e, a, b, f) {
        if (typeof e == "number") {
          b = e + (a - e) * f;
        } else {
          e.lerp(a, f, b);
        }
        return b;
      }
    });
    var i = cc.Class({
      name: "cc.SetAction",
      extends: cc.ActionInstant,
      ctor: function (b) {
        this._props = {};
        if (b !== undefined) {
          this.init(b);
        }
      },
      init: function (c) {
        for (var a in c) {
          this._props[a] = c[a];
        }
        return true;
      },
      update: function () {
        var d = this._props;
        var a = this.target;
        for (var b in d) {
          a[b] = d[b];
        }
      },
      clone: function () {
        var b = new i();
        b.init(this._props);
        return b;
      }
    });
    function j(b) {
      this._actions = [];
      this._finalAction = null;
      this._target = b;
      this._tag = cc.Action.TAG_INVALID;
    }
    j.stopAll = function () {
      cc.director.getActionManager().removeAllActions();
    };
    j.stopAllByTag = function (b) {
      cc.director.getActionManager().removeAllActionsByTag(b);
    };
    j.stopAllByTarget = function (b) {
      cc.director.getActionManager().removeAllActionsFromTarget(b);
    };
    j.prototype.then = function (b) {
      if (b instanceof cc.Action) {
        this._actions.push(b.clone());
      } else {
        this._actions.push(b._union());
      }
      return this;
    };
    j.prototype.target = function (b) {
      this._target = b;
      return this;
    };
    j.prototype.start = function () {
      var c = this._target;
      if (c) {
        if (c instanceof cc.Object && !c.isValid) {
          return undefined;
        } else {
          if (this._finalAction) {
            cc.director.getActionManager().removeAction(this._finalAction);
          }
          this._finalAction = this._union();
          if (c._id === undefined) {
            c._id = ++b;
          }
          this._finalAction.setTag(this._tag);
          cc.director.getActionManager().addAction(this._finalAction, c, false);
          return this;
        }
      } else {
        return this;
      }
    };
    j.prototype.stop = function () {
      if (this._finalAction) {
        cc.director.getActionManager().removeAction(this._finalAction);
        this._finalAction = null;
      }
      return this;
    };
    j.prototype.tag = function (b) {
      this._tag = b;
      return this;
    };
    j.prototype.clone = function (c) {
      var a = this._union();
      return cc.tween(c).then(a.clone());
    };
    j.prototype.union = function () {
      var b = this._union();
      this._actions.length = 0;
      this._actions.push(b);
      return this;
    };
    j.prototype._union = function () {
      var b = this._actions;
      if (b.length === 1) {
        return b[0];
      } else {
        return cc.sequence(b);
      }
    };
    Object.assign(j.prototype, {
      bezierTo: function (g, b, d, e, f) {
        var i = b.x;
        var j = b.y;
        var a = d.x;
        var k = d.y;
        (f = f || Object.create(null)).progress = function (c, b, d, e) {
          d.x = (0, h.bezier)(c.x, i, a, b.x, e);
          d.y = (0, h.bezier)(c.y, j, k, b.y, e);
          return d;
        };
        return this.to(g, {
          position: e
        }, f);
      },
      bezierBy: function (g, b, d, e, f) {
        var m = b.x;
        var j = b.y;
        var a = d.x;
        var k = d.y;
        (f = f || Object.create(null)).progress = function (c, b, d, e) {
          var f = c.x;
          var g = c.y;
          d.x = (0, h.bezier)(f, m + f, a + f, b.x, e);
          d.y = (0, h.bezier)(g, j + g, k + g, b.y, e);
          return d;
        };
        return this.by(g, {
          position: e
        }, f);
      },
      flipX: function () {
        var b = this;
        return this.call(function () {
          b._target.scaleX *= -1;
        }, this);
      },
      flipY: function () {
        var b = this;
        return this.call(function () {
          b._target.scaleY *= -1;
        }, this);
      },
      blink: function (e, a, b) {
        var f = 1 / a;
        (b = b || Object.create(null)).progress = function (d, a, b, c) {
          if (c >= 1) {
            return d;
          } else if (c % f > f / 2) {
            return 255;
          } else {
            return 0;
          }
        };
        return this.to(e, {
          opacity: 1
        }, b);
      }
    });
    var k = [];
    function m(e) {
      return function () {
        k.length = 0;
        for (var a = arguments.length, b = 0; b < a; b++) {
          var f = k[b] = arguments[b];
          if (f instanceof j) {
            k[b] = f._union();
          }
        }
        return e.apply(this, k);
      };
    }
    for (var p = {
        to: function (d, a, b) {
          (b = b || Object.create(null)).relative = false;
          return new g(d, a, b);
        },
        by: function (d, a, b) {
          (b = b || Object.create(null)).relative = true;
          return new g(d, a, b);
        },
        set: function (b) {
          return new i(b);
        },
        delay: cc.delayTime,
        call: cc.callFunc,
        hide: cc.hide,
        show: cc.show,
        removeSelf: cc.removeSelf,
        sequence: m(cc.sequence),
        parallel: m(cc.spawn)
      }, n = {
        repeat: cc.repeat,
        repeatForever: cc.repeatForever,
        reverseTime: cc.reverseTime
      }, c = Object.keys(p), a = function (d) {
        var e = c[d];
        j.prototype[e] = function () {
          var b = p[e].apply(this, arguments);
          this._actions.push(b);
          return this;
        };
      }, o = 0; o < c.length; o++) {
      a(o);
    }
    c = Object.keys(n);
    for (var s = function (d) {
        var h = c[d];
        j.prototype[h] = function () {
          var b = this._actions;
          var a = arguments[arguments.length - 1];
          var c = arguments.length - 1;
          if (a instanceof cc.Tween) {
            a = a._union();
          } else if (!(a instanceof cc.Action)) {
            a = b[b.length - 1];
            b.length -= 1;
            c += 1;
          }
          for (var i = [a], f = 0; f < c; f++) {
            i.push(arguments[f]);
          }
          a = n[h].apply(this, i);
          b.push(a);
          return this;
        };
      }, r = 0; r < c.length; r++) {
      s(r);
    }
    cc.tween = function (b) {
      return new j(b);
    };
    cc.Tween = j;
  }, {
    "../animation/bezier": 14
  }],
  9: [function (m, b) {
    "use strict";

    var d = cc.js;
    var f = m("./playable");
    var g = m("./animation-curves");
    var e = g.EventAnimCurve;
    var i = g.EventInfo;
    var j = m("./types").WrapModeMask;
    var a = m("../core/utils/binary-search").binarySearchEpsilon;
    function k(c, a) {
      f.call(this);
      this.target = c;
      this.animation = a;
      this._anims = new d.array.MutableForwardIterator([]);
    }
    d.extend(k, f);
    var c = k.prototype;
    function l(d, b) {
      var c = b.clip;
      b.duration = c.duration;
      b.speed = c.speed;
      b.wrapMode = c.wrapMode;
      b.frameRate = c.sample;
      if ((b.wrapMode & j.Loop) === j.Loop) {
        b.repeatCount = Infinity;
      } else {
        b.repeatCount = 1;
      }
      var f = b.curves = c.createCurves(b, d);
      var g = c.events;
      if (g) {
        for (var h, k = 0, l = g.length; k < l; k++) {
          if (!h) {
            (h = new e()).target = d;
            f.push(h);
          }
          var m = g[k];
          var p = m.frame / b.duration;
          var q = undefined;
          var v = a(h.ratios, p);
          if (v >= 0) {
            q = h.events[v];
          } else {
            q = new i();
            h.ratios.push(p);
            h.events.push(q);
          }
          q.add(m.func, m.params);
        }
      }
    }
    c.playState = function (c, a) {
      if (c.clip) {
        if (!c.curveLoaded) {
          l(this.target, c);
        }
        c.animator = this;
        c.play();
        if (typeof a == "number") {
          c.setTime(a);
        }
        this.play();
      }
    };
    c.stopStatesExcept = function (e) {
      var a = this._anims;
      var b = a.array;
      for (a.i = 0; a.i < b.length; ++a.i) {
        var c = b[a.i];
        if (c !== e) {
          this.stopState(c);
        }
      }
    };
    c.addAnimation = function (b) {
      if (this._anims.array.indexOf(b) === -1) {
        this._anims.push(b);
      }
      b._setEventTarget(this.animation);
    };
    c.removeAnimation = function (c) {
      var a = this._anims.array.indexOf(c);
      if (a >= 0) {
        this._anims.fastRemoveAt(a);
        if (this._anims.array.length === 0) {
          this.stop();
        }
      }
      c.animator = null;
    };
    c.sample = function () {
      var c = this._anims;
      var a = c.array;
      for (c.i = 0; c.i < a.length; ++c.i) {
        a[c.i].sample();
      }
    };
    c.stopState = function (b) {
      if (b) {
        b.stop();
      }
    };
    c.pauseState = function (b) {
      if (b) {
        b.pause();
      }
    };
    c.resumeState = function (b) {
      if (b) {
        b.resume();
      }
      if (this.isPaused) {
        this.resume();
      }
    };
    c.setStateTime = function (e, a) {
      if (a !== undefined) {
        if (e) {
          e.setTime(a);
          e.sample();
        }
      } else {
        a = e;
        for (var g = this._anims.array, c = 0; c < g.length; ++c) {
          var h = g[c];
          h.setTime(a);
          h.sample();
        }
      }
    };
    c.onStop = function () {
      var c = this._anims;
      var a = c.array;
      for (c.i = 0; c.i < a.length; ++c.i) {
        a[c.i].stop();
      }
    };
    c.onPause = function () {
      for (var d = this._anims.array, a = 0; a < d.length; ++a) {
        var e = d[a];
        e.pause();
        e.animator = null;
      }
    };
    c.onResume = function () {
      for (var d = this._anims.array, a = 0; a < d.length; ++a) {
        var e = d[a];
        e.animator = this;
        e.resume();
      }
    };
    c._reloadClip = function (b) {
      l(this.target, b);
    };
    b.exports = k;
  }, {
    "../core/utils/binary-search": 229,
    "./animation-curves": 11,
    "./playable": 18,
    "./types": 19
  }],
  10: [function (c, b) {
    "use strict";

    var d = c("./types").WrapMode;
    var e = c("./animation-curves");
    var f = e.DynamicAnimCurve;
    var j = e.quickFindIndex;
    var k = c("./motion-path-helper").sampleMotionPaths;
    var g = c("../core/utils/binary-search").binarySearchEpsilon;
    var a = cc.Class({
      name: "cc.AnimationClip",
      extends: cc.Asset,
      properties: {
        _duration: {
          default: 0,
          type: cc.Float
        },
        duration: {
          get: function () {
            return this._duration;
          }
        },
        sample: {
          default: 60
        },
        speed: {
          default: 1
        },
        wrapMode: {
          default: d.Normal
        },
        curveData: {
          default: {},
          visible: false
        },
        events: {
          default: [],
          visible: false
        }
      },
      statics: {
        createWithSpriteFrames: function (h, b) {
          if (!Array.isArray(h)) {
            return null;
          }
          var c = new a();
          c.sample = b || c.sample;
          c._duration = h.length / c.sample;
          for (var d = [], e = 1 / c.sample, f = 0, j = h.length; f < j; f++) {
            d[f] = {
              frame: f * e,
              value: h[f]
            };
          }
          c.curveData = {
            comps: {
              "cc.Sprite": {
                spriteFrame: d
              }
            }
          };
          return c;
        }
      },
      onLoad: function () {
        this._duration = Number.parseFloat(this.duration);
        this.speed = Number.parseFloat(this.speed);
        this.wrapMode = Number.parseInt(this.wrapMode);
        this.frameRate = Number.parseFloat(this.sample);
      },
      createPropCurve: function (a, b, d) {
        var e = [];
        var h = a instanceof cc.Node && b === "position";
        var i = new f();
        i.target = a;
        i.prop = b;
        for (var c = 0, n = d.length; c < n; c++) {
          var o = d[c];
          var p = o.frame / this.duration;
          i.ratios.push(p);
          if (h) {
            e.push(o.motionPath);
          }
          var q = o.value;
          i.values.push(q);
          var v = o.curve;
          if (v) {
            if (typeof v == "string") {
              i.types.push(v);
              continue;
            }
            if (Array.isArray(v)) {
              if (v[0] === v[1] && v[2] === v[3]) {
                i.types.push(f.Linear);
              } else {
                i.types.push(f.Bezier(v));
              }
              continue;
            }
          }
          i.types.push(f.Linear);
        }
        if (h) {
          k(e, i, this.duration, this.sample, a);
        }
        for (var y, A, E = i.ratios, z = true, F = 1, G = E.length; F < G; F++) {
          y = E[F] - E[F - 1];
          if (F === 1) {
            A = y;
          } else if (Math.abs(y - A) > 0.000001) {
            z = false;
            break;
          }
        }
        i._findFrameIndex = z ? j : g;
        var C = i.values[0];
        if (!(C == null || i._lerp)) {
          if (typeof C == "number") {
            i._lerp = f.prototype._lerpNumber;
          } else if (C instanceof cc.Quat) {
            i._lerp = f.prototype._lerpQuat;
          } else if (C instanceof cc.Vec2) {
            i._lerp = f.prototype._lerpVector2;
          } else if (C instanceof cc.Vec3) {
            i._lerp = f.prototype._lerpVector3;
          } else if (C.lerp) {
            i._lerp = f.prototype._lerpObject;
          }
        }
        return i;
      },
      createTargetCurves: function (a, b, c) {
        var d = b.props;
        var e = b.comps;
        if (d) {
          for (var f in d) {
            var g = d[f];
            var h = this.createPropCurve(a, f, g);
            c.push(h);
          }
        }
        if (e) {
          for (var i in e) {
            var j = a.getComponent(i);
            if (j) {
              var l = e[i];
              for (var o in l) {
                var s = l[o];
                var u = this.createPropCurve(j, o, s);
                c.push(u);
              }
            }
          }
        }
      },
      createCurves: function (a, b) {
        var c = this.curveData;
        var d = c.paths;
        var e = [];
        this.createTargetCurves(b, c, e);
        for (var f in d) {
          var j = cc.find(f, b);
          if (j) {
            var k = d[f];
            this.createTargetCurves(j, k, e);
          }
        }
        return e;
      }
    });
    cc.AnimationClip = b.exports = a;
  }, {
    "../core/utils/binary-search": 229,
    "./animation-curves": 11,
    "./motion-path-helper": 17,
    "./types": 19
  }],
  11: [function (c, b) {
    "use strict";

    var d = c("./bezier").bezierByTime;
    var u = c("../core/utils/binary-search").binarySearchEpsilon;
    var g = c("./types").WrapModeMask;
    var e = c("./types").WrappedInfo;
    function f(e, f) {
      if (typeof f == "string") {
        var b = cc.easing[f];
        if (b) {
          e = b(e);
        }
      } else if (Array.isArray(f)) {
        e = d(f, e);
      }
      return e;
    }
    var i = cc.Class({
      name: "cc.AnimCurve",
      sample: function () {},
      onTimeChangedManually: undefined
    });
    var j;
    var a = cc.Class({
      name: "cc.DynamicAnimCurve",
      extends: i,
      ctor: function () {
        this._cachedIndex = 0;
      },
      properties: {
        target: null,
        prop: "",
        values: [],
        ratios: [],
        types: []
      },
      _findFrameIndex: u,
      _lerp: undefined,
      _lerpNumber: function (d, a, b) {
        return d + (a - d) * b;
      },
      _lerpObject: function (d, a, b) {
        return d.lerp(a, b);
      },
      _lerpQuat: (j = cc.quat(), function (d, a, b) {
        return d.lerp(a, b, j);
      }),
      _lerpVector2: function () {
        var e = cc.v2();
        return function (a, b, c) {
          return a.lerp(b, c, e);
        };
      }(),
      _lerpVector3: function () {
        var e = cc.v3();
        return function (a, b, c) {
          return a.lerp(b, c, e);
        };
      }(),
      sample: function (c, a) {
        var b = this.values;
        var e = this.ratios;
        var g = e.length;
        if (g !== 0) {
          var i;
          var j = true;
          var k = this._cachedIndex;
          if (k < 0 && (k = ~k) > 0 && k < e.length) {
            var o = e[k - 1];
            var r = e[k];
            if (a > o && a < r) {
              j = false;
            }
          }
          if (j) {
            this._cachedIndex = this._findFrameIndex(e, a);
          }
          var l = this._cachedIndex;
          if (l < 0) {
            if ((l = ~l) <= 0) {
              i = b[0];
            } else if (l >= g) {
              i = b[g - 1];
            } else {
              var s = b[l - 1];
              if (this._lerp) {
                var t = e[l - 1];
                var u = e[l];
                var d = this.types[l - 1];
                var v = (a - t) / (u - t);
                if (d) {
                  v = f(v, d);
                }
                var w = b[l];
                i = this._lerp(s, w, v);
              } else {
                i = s;
              }
            }
          } else {
            i = b[l];
          }
          this.target[this.prop] = i;
        }
      }
    });
    a.Linear = null;
    a.Bezier = function (b) {
      return b;
    };
    function m() {
      this.events = [];
    }
    m.prototype.add = function (c, a) {
      this.events.push({
        func: c || "",
        params: a || []
      });
    };
    var l = cc.Class({
      name: "cc.EventAnimCurve",
      extends: i,
      properties: {
        target: null,
        ratios: [],
        events: [],
        _wrappedInfo: {
          default: function () {
            return new e();
          }
        },
        _lastWrappedInfo: null,
        _ignoreIndex: NaN
      },
      _wrapIterations: function (b) {
        if (b - (b | 0) == 0) {
          b -= 1;
        }
        return b | 0;
      },
      sample: function (c, b, d) {
        var i = this.ratios.length;
        var j = d.getWrappedInfo(d.time, this._wrappedInfo);
        var a = j.direction;
        var k = u(this.ratios, j.ratio);
        if (k < 0) {
          k = ~k - 1;
          if (a < 0) {
            k += 1;
          }
        }
        if (this._ignoreIndex !== k) {
          this._ignoreIndex = NaN;
        }
        j.frameIndex = k;
        if (!this._lastWrappedInfo) {
          this._fireEvent(k);
          this._lastWrappedInfo = new e(j);
          return;
        }
        var l = d.wrapMode;
        var m = this._wrapIterations(j.iterations);
        var h = this._lastWrappedInfo;
        var q = this._wrapIterations(h.iterations);
        var r = h.frameIndex;
        var v = h.direction;
        var t = q !== -1 && m !== q;
        if (r === k && t && i === 1) {
          this._fireEvent(0);
        } else if (r !== k || t) {
          a = v;
          do {
            if (r !== k) {
              if (a === -1 && r === 0 && k > 0) {
                if ((l & g.PingPong) === g.PingPong) {
                  a *= -1;
                } else {
                  r = i;
                }
                q++;
              } else if (a === 1 && r === i - 1 && k < i - 1) {
                if ((l & g.PingPong) === g.PingPong) {
                  a *= -1;
                } else {
                  r = -1;
                }
                q++;
              }
              if (r === k) {
                break;
              }
              if (q > m) {
                break;
              }
            }
            r += a;
            cc.director.getAnimationManager().pushDelayEvent(this, "_fireEvent", [r]);
          } while (r !== k && r > -1 && r < i);
        }
        this._lastWrappedInfo.set(j);
      },
      _fireEvent: function (a) {
        if (!(a < 0 || a >= this.events.length || this._ignoreIndex === a)) {
          var b = this.events[a].events;
          if (this.target.isValid) {
            for (var c = this.target._components, d = 0; d < b.length; d++) {
              for (var e = b[d], l = e.func, m = 0; m < c.length; m++) {
                var n = c[m];
                var o = n[l];
                if (o) {
                  o.apply(n, e.params);
                }
              }
            }
          }
        }
      },
      onTimeChangedManually: function (f, a) {
        this._lastWrappedInfo = null;
        this._ignoreIndex = NaN;
        var b = a.getWrappedInfo(f, this._wrappedInfo);
        var c = b.direction;
        var d = u(this.ratios, b.ratio);
        if (d < 0) {
          d = ~d - 1;
          if (c < 0) {
            d += 1;
          }
          this._ignoreIndex = d;
        }
      }
    });
    b.exports = {
      AnimCurve: i,
      DynamicAnimCurve: a,
      EventAnimCurve: l,
      EventInfo: m,
      computeRatioByType: f,
      quickFindIndex: function (a, b) {
        var e = a.length - 1;
        if (e === 0) {
          return 0;
        }
        var d = a[0];
        if (b < d) {
          return 0;
        }
        var f = a[e];
        if (b > f) {
          return ~a.length;
        }
        var g = (b = (b - d) / (f - d)) / (1 / e);
        var h = g | 0;
        if (g - h < 0.000001) {
          return h;
        } else if (h + 1 - g < 0.000001) {
          return h + 1;
        } else {
          return ~(h + 1);
        }
      }
    };
  }, {
    "../core/utils/binary-search": 229,
    "./bezier": 14,
    "./types": 19
  }],
  12: [function (e, a) {
    "use strict";

    var b = cc.js;
    var c = cc.Class({
      ctor: function () {
        this._anims = new b.array.MutableForwardIterator([]);
        this._delayEvents = [];
        if (cc.director._scheduler) {
          cc.director._scheduler.enableForTarget(this);
        }
      },
      update: function (a) {
        var b = this._anims;
        var c = b.array;
        for (b.i = 0; b.i < c.length; ++b.i) {
          var d = c[b.i];
          if (d._isPlaying && !d._isPaused) {
            d.update(a);
          }
        }
        for (var i = this._delayEvents, f = 0; f < i.length; f++) {
          var j = i[f];
          j.target[j.func].apply(j.target, j.args);
        }
        i.length = 0;
      },
      destruct: function () {},
      addAnimation: function (b) {
        if (this._anims.array.indexOf(b) === -1) {
          this._anims.push(b);
        }
      },
      removeAnimation: function (c) {
        var a = this._anims.array.indexOf(c);
        if (a >= 0) {
          this._anims.fastRemoveAt(a);
        }
      },
      pushDelayEvent: function (d, a, b) {
        this._delayEvents.push({
          target: d,
          func: a,
          args: b
        });
      }
    });
    cc.AnimationManager = a.exports = c;
  }, {}],
  13: [function (m, b) {
    "use strict";

    var d = cc.js;
    var e = m("./playable");
    var f = m("./types");
    var t = f.WrappedInfo;
    var g = f.WrapMode;
    var i = f.WrapModeMask;
    function j(c, a) {
      e.call(this);
      this._currentFramePlayed = false;
      this._delay = 0;
      this._delayTime = 0;
      this._wrappedInfo = new t();
      this._lastWrappedInfo = null;
      this._process = k;
      this._clip = c;
      this._name = a || c && c.name;
      this.animator = null;
      this.curves = [];
      this.delay = 0;
      this.repeatCount = 1;
      this.duration = 1;
      this.speed = 1;
      this.wrapMode = g.Normal;
      this.time = 0;
      this._target = null;
      this._lastframeEventOn = false;
      this.emit = function () {
        for (var d = Array(arguments.length), a = 0, e = d.length; a < e; a++) {
          d[a] = arguments[a];
        }
        cc.director.getAnimationManager().pushDelayEvent(this, "_emit", d);
      };
    }
    d.extend(j, e);
    var a = j.prototype;
    function k() {
      var c;
      var d = this.sample();
      if (this._lastframeEventOn) {
        c = this._lastWrappedInfo ? this._lastWrappedInfo : this._lastWrappedInfo = new t(d);
        if (this.repeatCount > 1 && (d.iterations | 0) > (c.iterations | 0)) {
          this.emit("lastframe", this);
        }
        c.set(d);
      }
      if (d.stopped) {
        this.stop();
        this.emit("finished", this);
      }
    }
    function l() {
      var g = this.time;
      var h = this.duration;
      if (g > h) {
        if ((g %= h) == 0) {
          g = h;
        }
      } else if (g < 0 && (g %= h) != 0) {
        g += h;
      }
      for (var b = g / h, c = this.curves, d = 0, i = c.length; d < i; d++) {
        c[d].sample(g, b, this);
      }
      if (this._lastframeEventOn) {
        if (this._lastIterations === undefined) {
          this._lastIterations = b;
        }
        if (this.time > 0 && this._lastIterations > b || this.time < 0 && this._lastIterations < b) {
          this.emit("lastframe", this);
        }
        this._lastIterations = b;
      }
    }
    a._emit = function (c, a) {
      if (this._target && this._target.isValid) {
        this._target.emit(c, c, a);
      }
    };
    a.on = function (d, a, b) {
      if (this._target && this._target.isValid) {
        if (d === "lastframe") {
          this._lastframeEventOn = true;
        }
        return this._target.on(d, a, b);
      } else {
        return null;
      }
    };
    a.once = function (e, f, b) {
      if (this._target && this._target.isValid) {
        if (e === "lastframe") {
          this._lastframeEventOn = true;
        }
        var c = this;
        return this._target.once(e, function (d) {
          f.call(b, d);
          c._lastframeEventOn = false;
        });
      }
      return null;
    };
    a.off = function (d, a, b) {
      if (this._target && this._target.isValid) {
        if (d === "lastframe") {
          if (!this._target.hasEventListener(d)) {
            this._lastframeEventOn = false;
          }
        }
        this._target.off(d, a, b);
      }
    };
    a._setEventTarget = function (b) {
      this._target = b;
    };
    a.onPlay = function () {
      this.setTime(0);
      this._delayTime = this._delay;
      cc.director.getAnimationManager().addAnimation(this);
      if (this.animator) {
        this.animator.addAnimation(this);
      }
      this.emit("play", this);
    };
    a.onStop = function () {
      if (!this.isPaused) {
        cc.director.getAnimationManager().removeAnimation(this);
      }
      if (this.animator) {
        this.animator.removeAnimation(this);
      }
      this.emit("stop", this);
    };
    a.onResume = function () {
      cc.director.getAnimationManager().addAnimation(this);
      this.emit("resume", this);
    };
    a.onPause = function () {
      cc.director.getAnimationManager().removeAnimation(this);
      this.emit("pause", this);
    };
    a.setTime = function (f) {
      this._currentFramePlayed = false;
      this.time = f || 0;
      for (var a = this.curves, b = 0, g = a.length; b < g; b++) {
        var d = a[b];
        if (d.onTimeChangedManually) {
          d.onTimeChangedManually(f, this);
        }
      }
    };
    a.update = function (b) {
      if (!(this._delayTime > 0 && (this._delayTime -= b, this._delayTime > 0))) {
        if (this._currentFramePlayed) {
          this.time += b * this.speed;
        } else {
          this._currentFramePlayed = true;
        }
        this._process();
      }
    };
    a._needRevers = function (d) {
      var e = this.wrapMode;
      var b = false;
      if ((e & i.PingPong) === i.PingPong) {
        if (d - (d | 0) == 0 && d > 0) {
          d -= 1;
        }
        if (d & 1) {
          b = !b;
        }
      }
      if ((e & i.Reverse) === i.Reverse) {
        b = !b;
      }
      return b;
    };
    a.getWrappedInfo = function (a, c) {
      c = c || new t();
      var e = false;
      var f = this.duration;
      var h = this.repeatCount;
      var j = a > 0 ? a / f : -a / f;
      if (j >= h) {
        j = h;
        e = true;
        var k = h - (h | 0);
        if (k === 0) {
          k = 1;
        }
        a = k * f * (a > 0 ? 1 : -1);
      }
      if (a > f) {
        var m = a % f;
        a = m === 0 ? f : m;
      } else if (a < 0 && (a %= f) != 0) {
        a += f;
      }
      var n = false;
      var q = this._wrapMode & i.ShouldWrap;
      if (q) {
        n = this._needRevers(j);
      }
      var r = n ? -1 : 1;
      if (this.speed < 0) {
        r *= -1;
      }
      if (q && n) {
        a = f - a;
      }
      c.ratio = a / f;
      c.time = a;
      c.direction = r;
      c.stopped = e;
      c.iterations = j;
      return c;
    };
    a.sample = function () {
      for (var e = this.getWrappedInfo(this.time, this._wrappedInfo), a = this.curves, b = 0, f = a.length; b < f; b++) {
        a[b].sample(e.time, e.ratio, this);
      }
      return e;
    };
    d.get(a, "clip", function () {
      return this._clip;
    });
    d.get(a, "name", function () {
      return this._name;
    });
    d.obsolete(a, "AnimationState.length", "duration");
    d.getset(a, "curveLoaded", function () {
      return this.curves.length > 0;
    }, function () {
      this.curves.length = 0;
    });
    d.getset(a, "wrapMode", function () {
      return this._wrapMode;
    }, function (b) {
      this._wrapMode = b;
      this.time = 0;
      if (b & i.Loop) {
        this.repeatCount = Infinity;
      } else {
        this.repeatCount = 1;
      }
    });
    d.getset(a, "repeatCount", function () {
      return this._repeatCount;
    }, function (d) {
      this._repeatCount = d;
      var a = this._wrapMode & i.ShouldWrap;
      var b = (this.wrapMode & i.Reverse) === i.Reverse;
      this._process = d !== Infinity || a || b ? k : l;
    });
    d.getset(a, "delay", function () {
      return this._delay;
    }, function (b) {
      this._delayTime = this._delay = b;
    });
    cc.AnimationState = b.exports = j;
  }, {
    "./playable": 18,
    "./types": 19
  }],
  14: [function (c, b) {
    "use strict";

    var d = Math.cos;
    var e = Math.acos;
    var f = Math.max;
    var g = 6.283185307179586;
    var i = Math.sqrt;
    function j(b) {
      if (b < 0) {
        return -Math.pow(-b, 1 / 3);
      } else {
        return Math.pow(b, 1 / 3);
      }
    }
    function k(a, c) {
      var h;
      var k;
      var l;
      var n;
      var u = c - 0;
      var t = c - a[0];
      var z = u * 3;
      var K = t * 3;
      var B = (c - a[2]) * 3;
      var p = 1 / (-u + K - B + (c - 1));
      var v = (z - t * 6 + B) * p;
      var D = v * (1 / 3);
      var m = (-z + K) * p;
      var y = 1 / 3 * (m * 3 - v * v);
      var F = y * (1 / 3);
      var E = (v * 2 * v * v - v * 9 * m + u * p * 27) / 27;
      var A = E / 2;
      var x = A * A + F * F * F;
      if (x < 0) {
        var C = 1 / 3 * -y;
        var b = i(C * C * C);
        var G = -E / (b * 2);
        var H = e(G < -1 ? -1 : G > 1 ? 1 : G);
        var J = j(b) * 2;
        k = J * d(H * (1 / 3)) - D;
        l = J * d((H + g) * (1 / 3)) - D;
        n = J * d((H + g * 2) * (1 / 3)) - D;
        if (k >= 0 && k <= 1) {
          if (l >= 0 && l <= 1) {
            if (n >= 0 && n <= 1) {
              return f(k, l, n);
            } else {
              return f(k, l);
            }
          } else if (n >= 0 && n <= 1) {
            return f(k, n);
          } else {
            return k;
          }
        } else if (l >= 0 && l <= 1) {
          if (n >= 0 && n <= 1) {
            return f(l, n);
          } else {
            return l;
          }
        } else {
          return n;
        }
      }
      if (x === 0) {
        l = -(h = A < 0 ? j(-A) : -j(A)) - D;
        if ((k = h * 2 - D) >= 0 && k <= 1) {
          if (l >= 0 && l <= 1) {
            return f(k, l);
          } else {
            return k;
          }
        } else {
          return l;
        }
      }
      var w = i(x);
      return (h = j(-A + w)) - j(A + w) - D;
    }
    b.exports = {
      bezier: function (g, a, b, c, d) {
        var e = 1 - d;
        return e * (e * (g + (a * 3 - g) * d) + b * 3 * d * d) + c * d * d * d;
      },
      bezierByTime: function (e, a) {
        var b = k(e, a);
        var c = e[1];
        return ((1 - b) * (c + (e[3] - c) * b) * 3 + b * b) * b;
      }
    };
  }, {}],
  15: [function (e, a) {
    "use strict";

    var b = {
      constant: function () {
        return 0;
      },
      linear: function (b) {
        return b;
      },
      quadIn: function (b) {
        return b * b;
      },
      quadOut: function (b) {
        return b * (2 - b);
      },
      quadInOut: function (b) {
        if ((b *= 2) < 1) {
          return b * 0.5 * b;
        } else {
          return (--b * (b - 2) - 1) * -0.5;
        }
      },
      cubicIn: function (b) {
        return b * b * b;
      },
      cubicOut: function (b) {
        return --b * b * b + 1;
      },
      cubicInOut: function (b) {
        if ((b *= 2) < 1) {
          return b * 0.5 * b * b;
        } else {
          return ((b -= 2) * b * b + 2) * 0.5;
        }
      },
      quartIn: function (b) {
        return b * b * b * b;
      },
      quartOut: function (b) {
        return 1 - --b * b * b * b;
      },
      quartInOut: function (b) {
        if ((b *= 2) < 1) {
          return b * 0.5 * b * b * b;
        } else {
          return ((b -= 2) * b * b * b - 2) * -0.5;
        }
      },
      quintIn: function (b) {
        return b * b * b * b * b;
      },
      quintOut: function (b) {
        return --b * b * b * b * b + 1;
      },
      quintInOut: function (b) {
        if ((b *= 2) < 1) {
          return b * 0.5 * b * b * b * b;
        } else {
          return ((b -= 2) * b * b * b * b + 2) * 0.5;
        }
      },
      sineIn: function (b) {
        return 1 - Math.cos(b * Math.PI / 2);
      },
      sineOut: function (b) {
        return Math.sin(b * Math.PI / 2);
      },
      sineInOut: function (b) {
        return (1 - Math.cos(Math.PI * b)) * 0.5;
      },
      expoIn: function (b) {
        if (b === 0) {
          return 0;
        } else {
          return Math.pow(1024, b - 1);
        }
      },
      expoOut: function (b) {
        if (b === 1) {
          return 1;
        } else {
          return 1 - Math.pow(2, b * -10);
        }
      },
      expoInOut: function (b) {
        if (b === 0) {
          return 0;
        } else if (b === 1) {
          return 1;
        } else if ((b *= 2) < 1) {
          return Math.pow(1024, b - 1) * 0.5;
        } else {
          return (2 - Math.pow(2, (b - 1) * -10)) * 0.5;
        }
      },
      circIn: function (b) {
        return 1 - Math.sqrt(1 - b * b);
      },
      circOut: function (b) {
        return Math.sqrt(1 - --b * b);
      },
      circInOut: function (b) {
        if ((b *= 2) < 1) {
          return (Math.sqrt(1 - b * b) - 1) * -0.5;
        } else {
          return (Math.sqrt(1 - (b -= 2) * b) + 1) * 0.5;
        }
      },
      elasticIn: function (d) {
        var e;
        var f = 0.1;
        if (d === 0) {
          return 0;
        } else if (d === 1) {
          return 1;
        } else {
          if (!f || f < 1) {
            f = 1;
            e = 0.1;
          } else {
            e = Math.asin(1 / f) * 0.4 / (Math.PI * 2);
          }
          return -f * Math.pow(2, (d -= 1) * 10) * Math.sin(Math.PI * 2 * (d - e) / 0.4);
        }
      },
      elasticOut: function (d) {
        var a;
        var e = 0.1;
        if (d === 0) {
          return 0;
        } else if (d === 1) {
          return 1;
        } else {
          if (!e || e < 1) {
            e = 1;
            a = 0.1;
          } else {
            a = Math.asin(1 / e) * 0.4 / (Math.PI * 2);
          }
          return e * Math.pow(2, d * -10) * Math.sin(Math.PI * 2 * (d - a) / 0.4) + 1;
        }
      },
      elasticInOut: function (d) {
        var e;
        var f = 0.1;
        if (d === 0) {
          return 0;
        } else if (d === 1) {
          return 1;
        } else {
          if (!f || f < 1) {
            f = 1;
            e = 0.1;
          } else {
            e = Math.asin(1 / f) * 0.4 / (Math.PI * 2);
          }
          if ((d *= 2) < 1) {
            return f * Math.pow(2, (d -= 1) * 10) * Math.sin(Math.PI * 2 * (d - e) / 0.4) * -0.5;
          } else {
            return f * Math.pow(2, (d -= 1) * -10) * Math.sin(Math.PI * 2 * (d - e) / 0.4) * 0.5 + 1;
          }
        }
      },
      backIn: function (c) {
        var a = 1.70158;
        return c * c * ((a + 1) * c - a);
      },
      backOut: function (c) {
        var d = 1.70158;
        return --c * c * ((d + 1) * c + d) + 1;
      },
      backInOut: function (c) {
        var d = 2.5949095;
        if ((c *= 2) < 1) {
          return c * c * ((d + 1) * c - d) * 0.5;
        } else {
          return ((c -= 2) * c * ((d + 1) * c + d) + 2) * 0.5;
        }
      },
      bounceIn: function (c) {
        return 1 - b.bounceOut(1 - c);
      },
      bounceOut: function (b) {
        if (b < 1 / 2.75) {
          return b * 7.5625 * b;
        } else if (b < 2 / 2.75) {
          return (b -= 1.5 / 2.75) * 7.5625 * b + 0.75;
        } else if (b < 2.5 / 2.75) {
          return (b -= 2.25 / 2.75) * 7.5625 * b + 0.9375;
        } else {
          return (b -= 2.625 / 2.75) * 7.5625 * b + 0.984375;
        }
      },
      bounceInOut: function (c) {
        if (c < 0.5) {
          return b.bounceIn(c * 2) * 0.5;
        } else {
          return b.bounceOut(c * 2 - 1) * 0.5 + 0.5;
        }
      },
      smooth: function (b) {
        if (b <= 0) {
          return 0;
        } else if (b >= 1) {
          return 1;
        } else {
          return b * b * (3 - b * 2);
        }
      },
      fade: function (b) {
        if (b <= 0) {
          return 0;
        } else if (b >= 1) {
          return 1;
        } else {
          return b * b * b * (b * (b * 6 - 15) + 10);
        }
      }
    };
    function c(d, a) {
      return function (b) {
        if (b < 0.5) {
          return a(b * 2) / 2;
        } else {
          return d(b * 2 - 1) / 2 + 0.5;
        }
      };
    }
    b.quadOutIn = c(b.quadIn, b.quadOut);
    b.cubicOutIn = c(b.cubicIn, b.cubicOut);
    b.quartOutIn = c(b.quartIn, b.quartOut);
    b.quintOutIn = c(b.quintIn, b.quintOut);
    b.sineOutIn = c(b.sineIn, b.sineOut);
    b.expoOutIn = c(b.expoIn, b.expoOut);
    b.circOutIn = c(b.circIn, b.circOut);
    b.backOutIn = c(b.backIn, b.backOut);
    b.bounceIn = function (c) {
      return 1 - b.bounceOut(1 - c);
    };
    b.bounceInOut = function (c) {
      if (c < 0.5) {
        return b.bounceIn(c * 2) * 0.5;
      } else {
        return b.bounceOut(c * 2 - 1) * 0.5 + 0.5;
      }
    };
    b.bounceOutIn = c(b.bounceIn, b.bounceOut);
    cc.easing = a.exports = b;
  }, {}],
  16: [function (b) {
    "use strict";

    b("./bezier");
    b("./easing");
    b("./types");
    b("./motion-path-helper");
    b("./animation-curves");
    b("./animation-clip");
    b("./animation-manager");
    b("./animation-state");
    b("./animation-animator");
  }, {
    "./animation-animator": 9,
    "./animation-clip": 10,
    "./animation-curves": 11,
    "./animation-manager": 12,
    "./animation-state": 13,
    "./bezier": 14,
    "./easing": 15,
    "./motion-path-helper": 17,
    "./types": 19
  }],
  17: [function (i, b) {
    "use strict";

    var d = i("./animation-curves").DynamicAnimCurve;
    var f = i("./animation-curves").computeRatioByType;
    var e = i("./bezier").bezier;
    var g = i("../core/utils/binary-search").binarySearchEpsilon;
    var l = cc.v2;
    function h(b) {
      this.points = b || [];
      this.beziers = [];
      this.ratios = [];
      this.progresses = [];
      this.length = 0;
      this.computeBeziers();
    }
    function j() {
      this.start = l();
      this.end = l();
      this.startCtrlPoint = l();
      this.endCtrlPoint = l();
    }
    function a(e) {
      if (!Array.isArray(e)) {
        return false;
      }
      for (var a = 0, f = e.length; a < f; a++) {
        var c = e[a];
        if (!Array.isArray(c) || c.length !== 6) {
          return false;
        }
      }
      return true;
    }
    h.prototype.computeBeziers = function () {
      var e;
      this.beziers.length = 0;
      this.ratios.length = 0;
      this.progresses.length = 0;
      this.length = 0;
      for (var g = 1; g < this.points.length; g++) {
        var h = this.points[g - 1];
        var i = this.points[g];
        (e = new j()).start = h.pos;
        e.startCtrlPoint = h.out;
        e.end = i.pos;
        e.endCtrlPoint = i.in;
        this.beziers.push(e);
        this.length += e.getLength();
      }
      var k = 0;
      for (g = 0; g < this.beziers.length; g++) {
        e = this.beziers[g];
        this.ratios[g] = e.getLength() / this.length;
        this.progresses[g] = k += this.ratios[g];
      }
      return this.beziers;
    };
    j.prototype.getPointAt = function (c) {
      var a = this.getUtoTmapping(c);
      return this.getPoint(a);
    };
    j.prototype.getPoint = function (d) {
      var a = e(this.start.x, this.startCtrlPoint.x, this.endCtrlPoint.x, this.end.x, d);
      var b = e(this.start.y, this.startCtrlPoint.y, this.endCtrlPoint.y, this.end.y, d);
      return new l(a, b);
    };
    j.prototype.getLength = function () {
      var b = this.getLengths();
      return b[b.length - 1];
    };
    j.prototype.getLengths = function (e) {
      if (!e) {
        e = this.__arcLengthDivisions ? this.__arcLengthDivisions : 200;
      }
      if (this.cacheArcLengths && this.cacheArcLengths.length === e + 1) {
        return this.cacheArcLengths;
      }
      var i;
      var j;
      var k = [];
      var d = this.getPoint(0);
      var m = l();
      var g = 0;
      k.push(0);
      j = 1;
      for (; j <= e; j++) {
        i = this.getPoint(j / e);
        m.x = d.x - i.x;
        m.y = d.y - i.y;
        g += m.mag();
        k.push(g);
        d = i;
      }
      this.cacheArcLengths = k;
      return k;
    };
    j.prototype.getUtoTmapping = function (a, b) {
      var c;
      var d = this.getLengths();
      var f = 0;
      var i = d.length;
      c = b || a * d[i - 1];
      for (var h, l = 0, o = i - 1; l <= o;) {
        if ((h = d[f = Math.floor(l + (o - l) / 2)] - c) < 0) {
          l = f + 1;
        } else {
          if (!(h > 0)) {
            o = f;
            break;
          }
          o = f - 1;
        }
      }
      if (d[f = o] === c) {
        return f / (i - 1);
      }
      var p = d[f];
      return (f + (c - p) / (d[f + 1] - p)) / (i - 1);
    };
    b.exports = {
      sampleMotionPaths: function (b, c, e, i) {
        function j(b) {
          if (b instanceof cc.Vec2) {
            return {
              in: b,
              pos: b,
              out: b
            };
          } else if (Array.isArray(b) && b.length === 6) {
            return {
              in: l(b[2], b[3]),
              pos: l(b[0], b[1]),
              out: l(b[4], b[5])
            };
          } else {
            return {
              in: cc.Vec2.ZERO,
              pos: cc.Vec2.ZERO,
              out: cc.Vec2.ZERO
            };
          }
        }
        var k = c.values = c.values.map(function (b) {
          if (Array.isArray(b)) {
            b = b.length === 2 ? cc.v2(b[0], b[1]) : cc.v3(b[0], b[1], b[2]);
          }
          return b;
        });
        if (b.length !== 0 && k.length !== 0) {
          for (var n = false, o = 0; o < b.length; o++) {
            var q = b[o];
            if (q && !a(q)) {
              q = null;
            }
            if (q && q.length > 0) {
              n = true;
              break;
            }
          }
          if (n && k.length !== 1) {
            for (var r = c.types, w = c.ratios, p = c.values = [], v = c.types = [], z = c.ratios = [], m = 0, A = d.Linear, B = 0, C = b.length; B < C - 1; B++) {
              var D;
              var E = b[B];
              var F = w[B];
              var G = w[B + 1] - F;
              var H = k[B];
              var I = k[B + 1];
              var J = r[B];
              var L = [];
              var M = m / G;
              var N = 1 / (G * e * i);
              if (E && E.length > 0) {
                var O = [];
                O.push(j(H));
                for (var P = 0, R = E.length; P < R; P++) {
                  var S = j(E[P]);
                  O.push(S);
                }
                O.push(j(I));
                var T = new h(O);
                T.computeBeziers();
                for (var U = T.progresses; 1 - M > 0.000001;) {
                  var V;
                  var W;
                  var X;
                  var Y;
                  if ((D = f(D = M, J)) < 0) {
                    Y = (0 - D) * (W = T.beziers[0]).getLength();
                    X = W.start.sub(W.endCtrlPoint).normalize();
                    V = W.start.add(X.mul(Y));
                  } else if (D > 1) {
                    Y = (D - 1) * (W = T.beziers[T.beziers.length - 1]).getLength();
                    X = W.end.sub(W.startCtrlPoint).normalize();
                    V = W.end.add(X.mul(Y));
                  } else {
                    var Z = g(U, D);
                    if (Z < 0) {
                      Z = ~Z;
                    }
                    D -= Z > 0 ? U[Z - 1] : 0;
                    D /= T.ratios[Z];
                    V = T.beziers[Z].getPointAt(D);
                  }
                  L.push(V);
                  M += N;
                }
              } else {
                for (; 1 - M > 0.000001;) {
                  D = f(D = M, J);
                  L.push(H.lerp(I, D));
                  M += N;
                }
              }
              A = J === "constant" ? J : d.Linear;
              P = 0;
              R = L.length;
              for (; P < R; P++) {
                var _ = F + m + N * P * G;
                va(L[P], A, _);
              }
              m = Math.abs(M - 1) > 0.000001 ? (M - 1) * G : 0;
            }
            if (w[w.length - 1] !== z[z.length - 1]) {
              va(k[k.length - 1], A, w[w.length - 1]);
            }
          }
        }
        function va(d, a, b) {
          p.push(d);
          v.push(a);
          z.push(b);
        }
      },
      Curve: h,
      Bezier: j
    };
  }, {
    "../core/utils/binary-search": 229,
    "./animation-curves": 11,
    "./bezier": 14
  }],
  18: [function (a, b) {
    "use strict";

    var c = cc.js;
    var d = a("../core/CCDebug");
    function e() {
      this._isPlaying = false;
      this._isPaused = false;
      this._stepOnce = false;
    }
    var f = e.prototype;
    c.get(f, "isPlaying", function () {
      return this._isPlaying;
    }, true);
    c.get(f, "isPaused", function () {
      return this._isPaused;
    }, true);
    function g() {}
    f.onPlay = g;
    f.onPause = g;
    f.onResume = g;
    f.onStop = g;
    f.onError = g;
    f.play = function () {
      if (this._isPlaying) {
        if (this._isPaused) {
          this._isPaused = false;
          this.onResume();
        } else {
          this.onError(d.getError(3912));
        }
      } else {
        this._isPlaying = true;
        this.onPlay();
      }
    };
    f.stop = function () {
      if (this._isPlaying) {
        this._isPlaying = false;
        this.onStop();
        this._isPaused = false;
      }
    };
    f.pause = function () {
      if (this._isPlaying && !this._isPaused) {
        this._isPaused = true;
        this.onPause();
      }
    };
    f.resume = function () {
      if (this._isPlaying && this._isPaused) {
        this._isPaused = false;
        this.onResume();
      }
    };
    f.step = function () {
      this.pause();
      this._stepOnce = true;
      if (!this._isPlaying) {
        this.play();
      }
    };
    b.exports = e;
  }, {
    "../core/CCDebug": 23
  }],
  19: [function (f, a) {
    "use strict";

    var b = {
      Loop: 2,
      ShouldWrap: 4,
      PingPong: 22,
      Reverse: 36
    };
    var c = cc.Enum({
      Default: 0,
      Normal: 1,
      Reverse: b.Reverse,
      Loop: b.Loop,
      LoopReverse: b.Loop | b.Reverse,
      PingPong: b.PingPong,
      PingPongReverse: b.PingPong | b.Reverse
    });
    function d(b) {
      if (b) {
        this.set(b);
      } else {
        this.ratio = 0;
        this.time = 0;
        this.direction = 1;
        this.stopped = true;
        this.iterations = 0;
        this.frameIndex = undefined;
      }
    }
    cc.WrapMode = c;
    d.prototype.set = function (b) {
      this.ratio = b.ratio;
      this.time = b.time;
      this.direction = b.direction;
      this.stopped = b.stopped;
      this.iterations = b.iterations;
      this.frameIndex = b.frameIndex;
    };
    a.exports = {
      WrapModeMask: b,
      WrapMode: c,
      WrappedInfo: d
    };
  }, {}],
  20: [function (c, b) {
    "use strict";

    var d;
    var i = c("../core/event/event-target");
    var f = c("../core/platform/CCSys");
    var g = function a(d) {
      i.call(this);
      this._shouldRecycleOnEnded = false;
      this._src = d;
      this._element = null;
      this._state = a.State.INITIALZING;
      var b = this;
      this._onended = function () {
        b._state = a.State.STOPPED;
        b.emit("ended");
      };
      this._onendedSecond = function () {
        b._unbindEnded(b._onendedSecond);
        b._bindEnded();
      };
    };
    function h(b) {
      b.onended = undefined;
      b.stop(0);
      if (g.ScratchAudioBuffer) {
        try {
          b.buffer = g.ScratchAudioBuffer;
        } catch (b) {}
      }
    }
    cc.js.extend(g, i);
    g.State = {
      ERROR: -1,
      INITIALZING: 0,
      PLAYING: 1,
      PAUSED: 2,
      STOPPED: 3
    };
    g.ScratchAudioBuffer = undefined;
    (d = g.prototype)._bindEnded = function (c) {
      if (!(c = c || this._onended)._binded) {
        c._binded = true;
        var d = this._element;
        if (this._src && d instanceof HTMLAudioElement) {
          d.addEventListener("ended", this._onended);
        } else {
          d.onended = this._onended;
        }
      }
    };
    d._unbindEnded = function (c) {
      if ((c = c || this._onended)._binded) {
        c._binded = false;
        var d = this._element;
        if (d instanceof HTMLAudioElement) {
          d.removeEventListener("ended", c);
        } else if (d) {
          d.onended = null;
        }
      }
    };
    d._onLoaded = function () {
      this._createElement();
      this._state = g.State.INITIALZING;
      this.setVolume(1);
      this.setLoop(false);
    };
    d._createElement = function () {
      var a = this._src._nativeAsset;
      if (a instanceof HTMLAudioElement) {
        if (!this._element) {
          this._element = document.createElement("audio");
        }
        this._element.src = a.src;
      } else {
        this._element = new j(a, this);
      }
    };
    d.play = function (e, a) {
      var b = this;
      if (this._src) {
        this._src._ensureLoaded(function () {
          b._state = g.State.PLAYING;
          b._offset = b._length = 0;
          b._bindEnded();
          var c = b._element.play(e, a);
          if (window.Promise && c instanceof Promise) {
            c.catch(function () {});
          }
        });
      }
    };
    d.destroy = function () {
      this._element = null;
    };
    d.pause = function () {
      if (this.getState() === g.State.PLAYING) {
        var b = this;
        if (this._src) {
          this._src._ensureLoaded(function () {
            b._unbindEnded();
            b._element.pause();
            b._state = g.State.PAUSED;
          });
        }
      }
    };
    d.resume = function () {
      if (this.getState() === g.State.PAUSED) {
        var b = this;
        if (this._src) {
          this._src._ensureLoaded(function () {
            b._bindEnded();
            b._element.play();
            b._state = g.State.PLAYING;
          });
        }
      }
    };
    d.stop = function () {
      var b = this;
      if (this._src) {
        this._src._ensureLoaded(function () {
          b._element._rateParam = undefined;
          b._element.pause();
          b._element.currentTime = 0;
          b._unbindEnded();
          b._state = g.State.STOPPED;
          b.emit("stop");
        });
      }
    };
    d.setLoop = function (c) {
      var a = this;
      if (this._src) {
        this._src._ensureLoaded(function () {
          a._element.loop = c;
        });
      }
    };
    d.isLoop = function () {
      return !!this._element && this._element.loop;
    };
    d.setVolume = function (c) {
      var a = this;
      if (this._src) {
        this._src._ensureLoaded(function () {
          a._element.volume = c;
        });
      }
    };
    d.getVolume = function () {
      if (this._element) {
        return this._element.volume;
      } else {
        return 1;
      }
    };
    d.setCurrentTime = function (c) {
      var a = this;
      if (this._src) {
        this._src._ensureLoaded(function () {
          a._unbindEnded();
          a._bindEnded(a._onendedSecond);
          a._element.currentTime = c;
        });
      }
    };
    d.getCurrentTime = function () {
      if (this._element) {
        return this._element.currentTime;
      } else {
        return 0;
      }
    };
    d.getDuration = function () {
      if (this._src) {
        return this._src.duration;
      } else {
        return 0;
      }
    };
    d.getState = function (b) {
      if (b === undefined) {
        b = true;
      }
      if (b) {
        this._forceUpdatingState();
      }
      return this._state;
    };
    d._forceUpdatingState = function () {
      var b = this._element;
      if (b) {
        if (g.State.PLAYING === this._state && b.paused) {
          this._state = g.State.STOPPED;
        } else if (!(g.State.STOPPED !== this._state || b.paused)) {
          this._state = g.State.PLAYING;
        }
      }
    };
    Object.defineProperty(d, "src", {
      get: function () {
        return this._src;
      },
      set: function (a) {
        this._unbindEnded();
        if (a && a.isValid) {
          if (a !== this._src) {
            this._src = a;
            if (a.loaded) {
              this._onLoaded();
            } else {
              var b = this;
              a.once("load", function () {
                if (a === b._src) {
                  b._onLoaded();
                }
              });
            }
          }
        } else {
          this._src = null;
          if (this._element instanceof j) {
            this._element = null;
          } else if (this._element) {
            this._element.src = "";
          }
          this._state = g.State.INITIALZING;
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(d, "paused", {
      get: function () {
        return !this._element || this._element.paused;
      },
      enumerable: true,
      configurable: true
    });
    if (!(cc.sys.browserType === cc.sys.BROWSER_TYPE_EDGE || cc.sys.browserType === cc.sys.BROWSER_TYPE_BAIDU)) {
      cc.sys.browserType;
      cc.sys.BROWSER_TYPE_UC;
    }
    function j(c, a) {
      this._audio = a;
      this._context = f.__audioSupport.context;
      this._buffer = c;
      this._gainObj = this._context.createGain();
      this.volume = 1;
      this._useSetTarget = this._gainObj.gain.setValueAtTime !== undefined;
      if (this._useSetTarget) {
        this._gainObj.gain.setValueAtTime(1, this._context.currentTime);
      } else {
        this._gainObj.gain.value = 1;
      }
      this._gainObj.connect(this._context.destination);
      this._loop = false;
      this._startTime = -1;
      this._currentSource = null;
      this.playedLength = 0;
      this._offset = 0;
      this._duration = c.duration;
      this._fadeParam = undefined;
      this._rateParam = undefined;
      this._endCallback = function () {
        var b = this._currentSource;
        if (b) {
          this._currentSource = null;
          h(b);
        }
        if (this._fadeParam) {
          if (this._fadeParam.callback) {
            this._fadeParam.callback();
          }
          this._fadeParam.callback = undefined;
          this._stopFade(true);
        }
        this._rateParam = undefined;
        if (this.onended) {
          this.onended(this);
        }
      }.bind(this);
    }
    (function (b) {
      b.play = function (e, g) {
        if (e === undefined) {
          e = 0;
        }
        if (g === undefined) {
          g = 0;
        }
        if (!this.paused) {
          h(this._currentSource);
          this.playedLength = 0;
          this._stopFade(true);
        }
        var i = this.playedLength;
        if (e || g) {
          this._offset = e;
          if (g) {
            this._duration = g;
          } else {
            g = this._duration = this._buffer.duration - e;
          }
        } else {
          e = this._offset + i;
          g = this._duration - i;
        }
        if (this._context.state === "suspended") {
          this._context.resume();
        }
        var c = this._context.createBufferSource();
        c.buffer = this._buffer;
        c.connect(this._gainObj);
        this._startTime = this._context.currentTime - i;
        if (this._loop) {
          c.loop = true;
          c.loopStart = this._offset;
          c.loopEnd = this._offset + this._duration;
          if (c.start) {
            c.start(0, e);
          } else if (c.noteGrainOn) {
            c.noteGrainOn(0, e);
          } else {
            c.noteOn(0, e);
          }
        } else if (c.start) {
          c.start(0, e, g);
        } else if (c.noteGrainOn) {
          c.noteGrainOn(0, e, g);
        } else {
          c.noteOn(0, e, g);
        }
        if (this._rateParam && this._rateParam.applyTime === undefined) {
          if (this._rateParam.rate === 1) {
            this._rateParam = undefined;
          } else {
            c.playbackRate.value = this._rateParam.rate;
            this._rateParam.applyTime = this._context.currentTime;
          }
        }
        this._resumeFade();
        this._currentSource = c;
        c.onended = this._endCallback;
        var d = cc.sys;
        if (d.os === d.OS_IOS && d.isBrowser && d.isMobile && (c.context.state === "suspended" && this._context.currentTime !== 0 || c.context.state === "interrupted")) {
          c.context.resume();
        }
      };
      b.pause = function () {
        if (!this.paused) {
          var c = this._context.currentTime - this._startTime;
          var d = this._currentSource;
          this._currentSource = null;
          this._startTime = -1;
          if (d) {
            h(d);
            if (this._rateParam && this._rateParam.applyTime !== undefined) {
              c += this._instantRateOffset();
              this._rateParam.applyTime = undefined;
              this._rateParam.offset = 0;
            }
          }
          this.playedLength = c % this._duration;
          this._pauseFade();
        }
      };
      Object.defineProperty(b, "paused", {
        get: function () {
          if (this._currentSource && this._currentSource.loop) {
            return false;
          }
          if (this._startTime === -1) {
            return true;
          }
          var b = this._context.currentTime - this._startTime;
          if (this._rateParam && this._rateParam.applyTime !== undefined) {
            b += this._instantRateOffset();
          }
          return b > this._duration;
        },
        enumerable: true,
        configurable: true
      });
      b.fade = function (f, a, b, g) {
        if (this.paused || f === a || b === 0) {
          this.volume = a;
        } else {
          var d = b;
          if (this._rateParam) {
            b /= this._rateParam.rate;
          }
          this.volume = f;
          this._gainObj.gain.linearRampToValueAtTime(a, this._context.currentTime + b);
          this._volume = a;
          this._fadeParam = {
            from: f,
            to: a,
            duration: d,
            callback: g,
            cancel: // TOLOOK
            // TOLOOK
            setTimeout(this._fadeComplete.bind(this), b * 1000)
          };
        }
      };
      b._stopFade = function (b) {
        if (this._fadeParam !== undefined) {
          if (this._fadeParam.cancel !== undefined) {
            clearTimeout(this._fadeParam.cancel);
          }
          this._gainObj.gain.cancelScheduledValues(this._context.currentTime);
          if (b) {
            this._volume = this._fadeParam.to;
            if (this._useSetTarget) {
              this._gainObj.gain.setValueAtTime(this._volume, this._context.currentTime);
            } else {
              this._gainObj.gain.value = this._volume;
            }
          }
          this._fadeParam = undefined;
        }
      };
      b._pauseFade = function () {
        if (this._fadeParam !== undefined && this._fadeParam.cancel) {
          clearTimeout(this._fadeParam.cancel);
          this._fadeParam.cancel = undefined;
          this._gainObj.gain.cancelScheduledValues(this._context.currentTime);
        }
      };
      b._resumeFade = function () {
        if (this._fadeParam !== undefined && !this._fadeParam.cancel) {
          var g = this._fadeParam.to;
          var a = this._fadeParam.from;
          var b = this._fadeParam.duration;
          var c = g - a;
          var d = (this._gainObj.gain.value - a) / c;
          if (d < 0 || d > 1) {
            d = 0;
            this._gainObj.gain.value = a;
          }
          var h = b * (1 - d);
          if (this._rateParam && this._rateParam.applyTime) {
            h /= this._rateParam.rate;
          }
          this._volume = g;
          this._gainObj.gain.linearRampToValueAtTime(g, this._context.currentTime + h);
          this._fadeParam.cancel = // TOLOOK
          // TOLOOK
          setTimeout(this._fadeComplete.bind(this), h * 1000);
        }
      };
      b._fadeComplete = function () {
        if (this._fadeParam) {
          if (this._fadeParam.callback) {
            this._fadeParam.callback();
          }
          this._fadeParam = undefined;
        }
      };
      b._instantRateOffset = function () {
        if (this._rateParam && this._rateParam.applyTime) {
          var b = (this._context.currentTime - this._rateParam.applyTime) * (this._rateParam.rate - 1);
          return this._rateParam.offset + b;
        }
        return 0;
      };
      Object.defineProperty(b, "loop", {
        get: function () {
          return this._loop;
        },
        set: function (b) {
          if (this._loop !== b) {
            if (this.paused) {
              this._loop = b;
            } else {
              this.pause();
              this._loop = b;
              this.play();
            }
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(b, "volume", {
        get: function () {
          return this._volume;
        },
        set: function (b) {
          this._stopFade(false);
          this._volume = b;
          if (this._useSetTarget) {
            this._gainObj.gain.setValueAtTime(b, this._context.currentTime);
          } else {
            this._gainObj.gain.value = b;
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(b, "currentTime", {
        get: function () {
          if (this.paused) {
            return this.playedLength;
          }
          var b = this._context.currentTime - this._startTime;
          if (this._rateParam && this._rateParam.applyTime !== undefined) {
            b += this._instantRateOffset();
          }
          return b % this._duration;
        },
        set: function (b) {
          this._stopFade(true);
          if (this.paused) {
            this.playedLength = b;
          } else {
            if (this._rateParam && this._rateParam.applyTime !== undefined) {
              this._rateParam.applyTime = undefined;
              this._rateParam.offset = 0;
            }
            this.pause();
            this.playedLength = b;
            this.play();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(b, "duration", {
        get: function () {
          return this._duration;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(b, "rate", {
        get: function () {
          if (this._rateParam) {
            return this._rateParam.rate;
          } else {
            return 1;
          }
        },
        set: function (c) {
          if (!(c <= 0)) {
            var a = this._currentSource !== null;
            if (this._rateParam === undefined) {
              this._rateParam = {
                applyTime: a ? this._context.currentTime : undefined,
                rate: c,
                offset: 0
              };
            } else {
              if (this._rateParam.rate === c) {
                return;
              }
              if (this._rateParam.applyTime !== undefined && a) {
                this._rateParam.offset = this._instantRateOffset();
                this._rateParam.applyTime = this._context.currentTime;
              }
              this._rateParam.rate = c;
            }
            if (this._rateParam.applyTime !== undefined && a) {
              this._currentSource.playbackRate.value = c;
              this._pauseFade();
              this._resumeFade();
            }
          }
        },
        enumerable: true,
        configurable: true
      });
    })(j.prototype);
    var a = window.shell && window.shell.WebAudio ? window.shell.WebAudio : g;
    b.exports = cc._Audio = a;
  }, {
    "../core/event/event-target": 134,
    "../core/platform/CCSys": 171
  }],
  21: [function (d, a) {
    "use strict";

    var b = {
      name: "Jacob__Codec"
    };
    b.Base64 = d("./base64");
    b.unzip = function () {
      return b.GZip.gunzip.apply(b.GZip, arguments);
    };
    b.unzipBase64 = function () {
      var c = b.Base64.decode.apply(b.Base64, arguments);
      try {
        return b.GZip.gunzip.call(b.GZip, c);
      } catch (a) {
        return c.slice(7);
      }
    };
    b.unzipBase64AsArray = function (a, b) {
      b = b || 1;
      var e;
      var i;
      var k;
      var l = this.unzipBase64(a);
      var h = [];
      e = 0;
      k = l.length / b;
      for (; e < k; e++) {
        h[e] = 0;
        i = b - 1;
        h[e] = 0;
        i = b - 1;
        for (; i >= 0; --i) {
          h[e] += l.charCodeAt(e * b + i) << i * 8;
        }
      }
      return h;
    };
    b.unzipAsArray = function (a, b) {
      b = b || 1;
      var e;
      var i;
      var k;
      var l = this.unzip(a);
      var h = [];
      e = 0;
      k = l.length / b;
      for (; e < k; e++) {
        h[e] = 0;
        i = b - 1;
        h[e] = 0;
        i = b - 1;
        for (; i >= 0; --i) {
          h[e] += l.charCodeAt(e * b + i) << i * 8;
        }
      }
      return h;
    };
    cc.codec = a.exports = b;
  }, {
    "./base64": 22
  }],
  22: [function (e, a) {
    "use strict";

    var l = e("../core/utils/misc").BASE64_VALUES;
    var b = {
      name: "Jacob__Codec__Base64",
      decode: function (a) {
        var d;
        var e;
        var n;
        var o;
        var p;
        var q;
        var r = [];
        var m = 0;
        for (a = a.replace(/[^A-Za-z0-9\+\/\=]/g, ""); m < a.length;) {
          d = l[a.charCodeAt(m++)] << 2 | (o = l[a.charCodeAt(m++)]) >> 4;
          e = (o & 15) << 4 | (p = l[a.charCodeAt(m++)]) >> 2;
          n = (p & 3) << 6 | (q = l[a.charCodeAt(m++)]);
          r.push(String.fromCharCode(d));
          if (p !== 64) {
            r.push(String.fromCharCode(e));
          }
          if (q !== 64) {
            r.push(String.fromCharCode(n));
          }
        }
        return r.join("");
      },
      decodeAsArray: function (a, b) {
        var c;
        var i;
        var j;
        var k = this.decode(a);
        var g = [];
        c = 0;
        j = k.length / b;
        for (; c < j; c++) {
          g[c] = 0;
          i = b - 1;
          g[c] = 0;
          i = b - 1;
          for (; i >= 0; --i) {
            g[c] += k.charCodeAt(c * b + i) << i * 8;
          }
        }
        return g;
      }
    };
    a.exports = b;
  }, {
    "../core/utils/misc": 236
  }],
  23: [function (a, b) {
    "use strict";

    var i;
    var c = a("./platform/utils");
    a("../../DebugInfos");
    var e = (typeof window == "undefined" ? global : window).console;
    cc.log = cc.warn = cc.error = cc.assert = e.log.bind ? e.log.bind(e) : e.log;
    cc._throw = function (b) {
      c.callInNextTick(function () {
        throw b;
      });
    };
    cc.logID = function () {};
    cc.warnID = function () {};
    cc.errorID = function () {};
    cc.assertID = function () {};
    var f;
    var j = cc.Enum({
      NONE: 0,
      INFO: 1,
      WARN: 2,
      ERROR: 3,
      INFO_FOR_WEB_PAGE: 4,
      WARN_FOR_WEB_PAGE: 5,
      ERROR_FOR_WEB_PAGE: 6
    });
    b.exports = cc.debug = {
      DebugMode: j,
      _resetDebugSetting: function (c) {
        cc.log = cc.warn = cc.error = cc.assert = function () {};
        if (c !== j.NONE) {
          if (c > j.ERROR) {
            function a(d) {
              if (cc.game.canvas) {
                if (!i) {
                  var a = document.createElement("Div");
                  a.setAttribute("id", "logInfoDiv");
                  a.setAttribute("width", "200");
                  a.setAttribute("height", cc.game.canvas.height);
                  var b = a.style;
                  b.zIndex = "99999";
                  b.position = "absolute";
                  b.top = b.left = "0";
                  (i = document.createElement("textarea")).setAttribute("rows", "20");
                  i.setAttribute("cols", "30");
                  i.setAttribute("disabled", "true");
                  var c = i.style;
                  c.backgroundColor = "transparent";
                  c.borderBottom = "1px solid #cccccc";
                  c.borderTopWidth = c.borderLeftWidth = c.borderRightWidth = "0px";
                  c.borderTopStyle = c.borderLeftStyle = c.borderRightStyle = "none";
                  c.padding = "0px";
                  c.margin = 0;
                  a.appendChild(i);
                  cc.game.canvas.parentNode.appendChild(a);
                }
                i.value = i.value + d + "\r\n";
                i.scrollTop = i.scrollHeight;
              }
            }
            cc.error = function () {
              a("ERROR :  " + cc.js.formatStr.apply(null, arguments));
            };
            cc.assert = function (b, d) {
              if (!b && d) {
                d = cc.js.formatStr.apply(null, cc.js.shiftArguments.apply(null, arguments));
                a("ASSERT: " + d);
              }
            };
            if (c !== j.ERROR_FOR_WEB_PAGE) {
              cc.warn = function () {
                a("WARN :  " + cc.js.formatStr.apply(null, arguments));
              };
            }
            if (c === j.INFO_FOR_WEB_PAGE) {
              cc.log = function () {
                a(cc.js.formatStr.apply(null, arguments));
              };
            }
          } else if (e && e.log.apply) {
            if (!e.error) {
              e.error = e.log;
            }
            if (!e.warn) {
              e.warn = e.log;
            }
            if (e.error.bind) {
              cc.error = e.error.bind(e);
            } else {
              cc.error = function () {
                return e.error.apply(e, arguments);
              };
            }
            cc.assert = function (c, a) {
              if (!c) {
                if (a) {
                  a = cc.js.formatStr.apply(null, cc.js.shiftArguments.apply(null, arguments));
                }
                throw Error(a);
              }
            };
          }
          if (c !== j.ERROR) {
            if (e.warn.bind) {
              cc.warn = e.warn.bind(e);
            } else {
              cc.warn = function () {
                return e.warn.apply(e, arguments);
              };
            }
          }
          if (c === j.INFO) {
            if (e.log.bind) {
              cc.log = e.log.bind(e);
            } else {
              cc.log = function () {
                return e.log.apply(e, arguments);
              };
            }
          }
        }
      },
      getError: (f = "ERROR", function () {
        var d = arguments[0];
        var a = f + " " + d + ".";
        if (arguments.length === 1) {
          return a;
        }
        if (arguments.length === 2) {
          return a + " Arguments: " + arguments[1];
        }
        var b = cc.js.shiftArguments.apply(null, arguments);
        return a + " Arguments: " + b.join(", ");
      }),
      isDisplayStats: function () {
        return !!cc.profiler && cc.profiler.isShowingStats();
      },
      setDisplayStats: function (b) {
        if (cc.profiler && cc.game.renderType !== cc.game.RENDER_TYPE_CANVAS) {
          if (b) {
            cc.profiler.showStats();
          } else {
            cc.profiler.hideStats();
          }
          cc.game.config.showFPS = !!b;
        }
      }
    };
  }, {
    "../../DebugInfos": undefined,
    "./platform/utils": 186
  }],
  24: [function (i, b) {
    "use strict";

    var d = i("./event/event-target");
    var e = i("./component-scheduler");
    var f = i("./node-activator");
    var l = i("./platform/CCObject");
    var j = i("./CCGame");
    var g = i("./renderer");
    var a = i("./event-manager");
    var h = i("./CCScheduler");
    cc.Director = function () {
      d.call(this);
      this._invalid = false;
      this._paused = false;
      this._purgeDirectorInNextLoop = false;
      this._winSizeInPoints = null;
      this._scene = null;
      this._loadingScene = "";
      this._totalFrames = 0;
      this._lastUpdate = 0;
      this._deltaTime = 0;
      this._startTime = 0;
      this._maxParticleDeltaTime = 0;
      this._timeScale = 1;
      this._scheduler = null;
      this._compScheduler = null;
      this._nodeActivator = null;
      this._actionManager = null;
      var b = this;
      j.on(j.EVENT_SHOW, function () {
        b._lastUpdate = performance.now();
      });
      j.once(j.EVENT_ENGINE_INITED, this.init, this);
    };
    cc.Director.prototype = {
      constructor: cc.Director,
      init: function () {
        this._totalFrames = 0;
        this._lastUpdate = performance.now();
        this._startTime = this._lastUpdate;
        this._paused = false;
        this._purgeDirectorInNextLoop = false;
        this._winSizeInPoints = cc.size(0, 0);
        this._scheduler = new h();
        this.sharedInit();
        return true;
      },
      sharedInit: function () {
        this._compScheduler = new e();
        this._nodeActivator = new f();
        if (a) {
          a.setEnabled(true);
        }
        if (cc.ActionManager) {
          this._actionManager = new cc.ActionManager();
          this._scheduler.scheduleUpdate(this._actionManager, h.PRIORITY_SYSTEM, false);
        } else {
          this._actionManager = null;
        }
        if (cc.AnimationManager) {
          this._animationManager = new cc.AnimationManager();
          this._scheduler.scheduleUpdate(this._animationManager, h.PRIORITY_SYSTEM, false);
        } else {
          this._animationManager = null;
        }
        if (cc.CollisionManager) {
          this._collisionManager = new cc.CollisionManager();
          this._scheduler.scheduleUpdate(this._collisionManager, h.PRIORITY_SYSTEM, false);
        } else {
          this._collisionManager = null;
        }
        if (cc.PhysicsManager) {
          this._physicsManager = new cc.PhysicsManager();
          this._scheduler.scheduleUpdate(this._physicsManager, h.PRIORITY_SYSTEM, false);
        } else {
          this._physicsManager = null;
        }
        cc.Physics3DManager;
        this._physics3DManager = null;
        if (cc._widgetManager) {
          cc._widgetManager.init(this);
        }
      },
      calculateDeltaTime: function (b) {
        if (!b) {
          b = performance.now();
        }
        this._deltaTime = b > this._lastUpdate ? (b - this._lastUpdate) / 1000 : 0;
        this._lastUpdate = b;
      },
      convertToGL: function (c) {
        var a = j.container;
        var b = cc.view;
        var d = a.getBoundingClientRect();
        var e = d.left + window.pageXOffset - a.clientLeft;
        var f = d.top + window.pageYOffset - a.clientTop;
        var g = b._devicePixelRatio * (c.x - e);
        var h = b._devicePixelRatio * (f + d.height - c.y);
        if (b._isRotated) {
          return cc.v2(b._viewportRect.width - h, g);
        } else {
          return cc.v2(g, h);
        }
      },
      convertToUI: function (h) {
        var a = j.container;
        var b = cc.view;
        var c = a.getBoundingClientRect();
        var d = c.left + window.pageXOffset - a.clientLeft;
        var e = c.top + window.pageYOffset - a.clientTop;
        var f = cc.v2(0, 0);
        if (b._isRotated) {
          f.x = d + h.y / b._devicePixelRatio;
          f.y = e + c.height - (b._viewportRect.width - h.x) / b._devicePixelRatio;
        } else {
          f.x = d + h.x * b._devicePixelRatio;
          f.y = e + c.height - h.y * b._devicePixelRatio;
        }
        return f;
      },
      end: function () {
        this._purgeDirectorInNextLoop = true;
      },
      getWinSize: function () {
        return cc.size(cc.winSize);
      },
      getWinSizeInPixels: function () {
        return cc.size(cc.winSize);
      },
      pause: function () {
        if (!this._paused) {
          this._paused = true;
        }
      },
      purgeCachedData: function () {
        cc.assetManager.releaseAll();
      },
      purgeDirector: function () {
        this._scheduler.unscheduleAll();
        this._compScheduler.unscheduleAll();
        this._nodeActivator.reset();
        if (a) {
          a.setEnabled(false);
        }
        if (cc.isValid(this._scene)) {
          this._scene.destroy();
        }
        this._scene = null;
        cc.renderer.clear();
        cc.assetManager.builtins.clear();
        this.stopAnimation();
        cc.assetManager.releaseAll();
      },
      reset: function () {
        this.purgeDirector();
        if (a) {
          a.setEnabled(true);
        }
        if (this._actionManager) {
          this._scheduler.scheduleUpdate(this._actionManager, cc.Scheduler.PRIORITY_SYSTEM, false);
        }
        if (this._animationManager) {
          this._scheduler.scheduleUpdate(this._animationManager, cc.Scheduler.PRIORITY_SYSTEM, false);
        }
        if (this._collisionManager) {
          this._scheduler.scheduleUpdate(this._collisionManager, cc.Scheduler.PRIORITY_SYSTEM, false);
        }
        if (this._physicsManager) {
          this._scheduler.scheduleUpdate(this._physicsManager, cc.Scheduler.PRIORITY_SYSTEM, false);
        }
        this._resetDeltaTime();
        this.startAnimation();
      },
      runSceneImmediate: function (c, h, b) {
        if (c instanceof cc.SceneAsset) {
          c = c.scene;
        }
        c._load();
        this.emit(cc.Director.EVENT_BEFORE_SCENE_DESTROY, c);
        for (var d = Object.keys(j._persistRootNodes).map(function (b) {
            return j._persistRootNodes[b];
          }), e = 0; e < d.length; e++) {
          var k = d[e];
          var o = c.getChildByUuid(k.uuid);
          if (o) {
            var p = o.getSiblingIndex();
            o._destroyImmediate();
            c.insertChild(k, p);
          } else {
            k.parent = c;
          }
        }
        var q = this._scene;
        cc.assetManager._releaseManager._autoRelease(q, c, j._persistRootNodes);
        if (cc.isValid(q)) {
          q.destroy();
        }
        this._scene = null;
        l._deferredDestroy();
        if (h) {
          h();
        }
        this.emit(cc.Director.EVENT_BEFORE_SCENE_LAUNCH, c);
        this._scene = c;
        c._activate();
        this.startAnimation();
        if (b) {
          b(null, c);
        }
        this.emit(cc.Director.EVENT_AFTER_SCENE_LAUNCH, c);
      },
      runScene: function (d, e, b) {
        if (d instanceof cc.SceneAsset) {
          d = d.scene;
        }
        d._load();
        this.once(cc.Director.EVENT_AFTER_DRAW, function () {
          this.runSceneImmediate(d, e, b);
        }, this);
      },
      loadScene: function (f, g, a) {
        if (this._loadingScene) {
          return false;
        }
        var b = cc.assetManager.bundles.find(function (a) {
          return a.getSceneInfo(f);
        });
        if (b) {
          this.emit(cc.Director.EVENT_BEFORE_SCENE_LOADING, f);
          this._loadingScene = f;
          var c = this;
          b.loadScene(f, function (b, e) {
            c._loadingScene = "";
            if (b) {
              b = "Failed to load scene: " + b;
              if (g) {
                g(b);
              }
            } else {
              c.runSceneImmediate(e, a, g);
            }
          });
          return true;
        }
        return false;
      },
      preloadScene: function (e, a, b) {
        var c = cc.assetManager.bundles.find(function (a) {
          return a.getSceneInfo(e);
        });
        if (!c) {
          return null;
        }
        c.preloadScene(e, null, a, b);
      },
      resume: function () {
        if (this._paused) {
          this._lastUpdate = performance.now();
          this._lastUpdate;
          this._paused = false;
          this._deltaTime = 0;
        }
      },
      setDepthTest: function (b) {
        if (cc.Camera.main) {
          cc.Camera.main.depth = !!b;
        }
      },
      setClearColor: function (b) {
        if (cc.Camera.main) {
          cc.Camera.main.backgroundColor = b;
        }
      },
      getRunningScene: function () {
        return this._scene;
      },
      getScene: function () {
        return this._scene;
      },
      getAnimationInterval: function () {
        return 1000 / j.getFrameRate();
      },
      setAnimationInterval: function (b) {
        j.setFrameRate(Math.round(1000 / b));
      },
      getDeltaTime: function () {
        return this._deltaTime;
      },
      getTotalTime: function () {
        return performance.now() - this._startTime;
      },
      getTotalFrames: function () {
        return this._totalFrames;
      },
      isPaused: function () {
        return this._paused;
      },
      getScheduler: function () {
        return this._scheduler;
      },
      setScheduler: function (b) {
        if (this._scheduler !== b) {
          this._scheduler = b;
        }
      },
      getActionManager: function () {
        return this._actionManager;
      },
      setActionManager: function (b) {
        if (this._actionManager !== b) {
          if (this._actionManager) {
            this._scheduler.unscheduleUpdate(this._actionManager);
          }
          this._actionManager = b;
          this._scheduler.scheduleUpdate(this._actionManager, cc.Scheduler.PRIORITY_SYSTEM, false);
        }
      },
      getAnimationManager: function () {
        return this._animationManager;
      },
      getCollisionManager: function () {
        return this._collisionManager;
      },
      getPhysicsManager: function () {
        return this._physicsManager;
      },
      getPhysics3DManager: function () {
        return this._physics3DManager;
      },
      startAnimation: function () {
        this._invalid = false;
      },
      stopAnimation: function () {
        this._invalid = true;
      },
      _resetDeltaTime: function () {
        this._lastUpdate = performance.now();
        this._deltaTime = 0;
      },
      setTimeScale: function (b) {
        this._timeScale = b;
      },
      getTimeScale: function () {
        return this._timeScale;
      },
      mainLoop: function (d) {
        if (this._purgeDirectorInNextLoop) {
          this._purgeDirectorInNextLoop = false;
          this.purgeDirector();
        } else if (!this._invalid) {
          this.calculateDeltaTime(d);
          var b = this._deltaTime;
          if (this._timeScale !== 1) {
            b *= this._timeScale;
          }
          if (!this._paused) {
            this.emit(cc.Director.EVENT_BEFORE_UPDATE);
            this._compScheduler.startPhase();
            this._compScheduler.updatePhase(b);
            this._scheduler.update(b);
            this._compScheduler.lateUpdatePhase(b);
            this.emit(cc.Director.EVENT_AFTER_UPDATE);
            l._deferredDestroy();
          }
          this.emit(cc.Director.EVENT_BEFORE_DRAW);
          g.render(this._scene, b);
          this.emit(cc.Director.EVENT_AFTER_DRAW);
          a.frameUpdateListeners();
          this._totalFrames++;
        }
      },
      __fastOn: function (d, a, b) {
        this.on(d, a, b);
      },
      __fastOff: function (d, a, b) {
        this.off(d, a, b);
      }
    };
    cc.js.addon(cc.Director.prototype, d.prototype);
    cc.Director.EVENT_PROJECTION_CHANGED = "director_projection_changed";
    cc.Director.EVENT_BEFORE_SCENE_LOADING = "director_before_scene_loading";
    cc.Director.EVENT_BEFORE_SCENE_DESTROY = "director_before_scene_destroy";
    cc.Director.EVENT_BEFORE_SCENE_LAUNCH = "director_before_scene_launch";
    cc.Director.EVENT_AFTER_SCENE_LAUNCH = "director_after_scene_launch";
    cc.Director.EVENT_BEFORE_UPDATE = "director_before_update";
    cc.Director.EVENT_AFTER_UPDATE = "director_after_update";
    cc.Director.EVENT_BEFORE_VISIT = "director_before_draw";
    cc.Director.EVENT_AFTER_VISIT = "director_before_draw";
    cc.Director.EVENT_BEFORE_DRAW = "director_before_draw";
    cc.Director.EVENT_AFTER_DRAW = "director_after_draw";
    cc.Director.PROJECTION_2D = 0;
    cc.Director.PROJECTION_3D = 1;
    cc.Director.PROJECTION_CUSTOM = 3;
    cc.Director.PROJECTION_DEFAULT = cc.Director.PROJECTION_2D;
    cc.Director.EVENT_BEFORE_PHYSICS = "director_before_physics";
    cc.Director.EVENT_AFTER_PHYSICS = "director_after_physics";
    cc.director = new cc.Director();
    b.exports = cc.director;
  }, {
    "./CCGame": 25,
    "./CCScheduler": 29,
    "./component-scheduler": 95,
    "./event-manager": 133,
    "./event/event-target": 134,
    "./node-activator": 161,
    "./platform/CCObject": 168,
    "./renderer": 193
  }],
  25: [function (h, b) {
    "use strict";

    var n = h("./utils/text-utils");
    var c = h("./event/event-target");
    var j = h("./CCDebug");
    var d = h("./renderer");
    var e = h("../core/renderer/utils/dynamic-atlas/manager");
    var f = {
      EVENT_HIDE: "game_on_hide",
      EVENT_SHOW: "game_on_show",
      EVENT_RESTART: "game_on_restart",
      EVENT_GAME_INITED: "game_inited",
      EVENT_ENGINE_INITED: "engine_inited",
      EVENT_RENDERER_INITED: "engine_inited",
      RENDER_TYPE_CANVAS: 0,
      RENDER_TYPE_WEBGL: 1,
      RENDER_TYPE_OPENGL: 2,
      _persistRootNodes: {},
      _paused: true,
      _configLoaded: false,
      _isCloning: false,
      _prepared: false,
      _rendererInitialized: false,
      _renderContext: null,
      _intervalId: null,
      _lastTime: null,
      _frameTime: null,
      frame: null,
      container: null,
      canvas: null,
      renderType: -1,
      config: null,
      onStart: null,
      setFrameRate: function (b) {
        this.config.frameRate = b;
        this._setAnimFrame();
        if (!this._paused) {
          if (this._intervalId) {
            window.cancelAnimFrame(this._intervalId);
          }
          this._intervalId = 0;
          this._runMainLoop();
        }
      },
      getFrameRate: function () {
        return this.config.frameRate;
      },
      step: function () {
        cc.director.mainLoop();
      },
      pause: function () {
        if (!this._paused) {
          this._paused = true;
          if (this._intervalId) {
            window.cancelAnimFrame(this._intervalId);
          }
          this._intervalId = 0;
          this.emit(f.EVENT_HIDE, this);
        }
      },
      resume: function () {
        if (this._paused) {
          this._paused = false;
          cc.director._resetDeltaTime();
          this._runMainLoop();
          this.emit(f.EVENT_SHOW, this);
        }
      },
      isPaused: function () {
        return this._paused;
      },
      restart: function () {
        cc.director.once(cc.Director.EVENT_AFTER_DRAW, function () {
          for (var a in f._persistRootNodes) {
            f.removePersistRootNode(f._persistRootNodes[a]);
          }
          cc.director.getScene().destroy();
          cc.Object._deferredDestroy();
          cc.director.reset();
          f.pause();
          cc.assetManager.builtins.init(function (a) {
            if (a) {
              throw a;
            }
            f.onStart();
            f.emit(f.EVENT_RESTART);
          });
        });
      },
      end: function () {
        close();
      },
      _initEngine: function () {
        if (!this._rendererInitialized) {
          this._initRenderer();
          this._initEvents();
          this.emit(this.EVENT_ENGINE_INITED);
        }
      },
      _loadPreviewScript: function (b) {
        b();
      },
      _prepareFinished: function (d) {
        var a = this;
        try {
          this._initEngine();
        } catch (a) {
          if (d) {
            d(a);
          }
          return;
        }
        this._setAnimFrame();
        cc.assetManager.builtins.init(function (b) {
          if (b) {
            if (d) {
              d(b);
            }
          } else {
            a._prepared = true;
            a._runMainLoop();
            a._paused = false;
            a.emit(a.EVENT_GAME_INITED);
            if (d) {
              d();
            }
          }
        });
      },
      eventTargetOn: c.prototype.on,
      eventTargetOnce: c.prototype.once,
      on: function (e, a, b, c) {
        if (this._prepared && e === this.EVENT_ENGINE_INITED || !this._paused && e === this.EVENT_GAME_INITED) {
          a.call(b);
        } else {
          this.eventTargetOn(e, a, b, c);
        }
      },
      once: function (d, a, b) {
        if (this._prepared && d === this.EVENT_ENGINE_INITED || !this._paused && d === this.EVENT_GAME_INITED) {
          a.call(b);
        } else {
          this.eventTargetOnce(d, a, b);
        }
      },
      prepare: function (c) {
        var a = this;
        if (this._prepared) {
          if (c) {
            c();
          }
        } else {
          this._loadPreviewScript(function () {
            a._prepareFinished(c);
          });
        }
      },
      run: function (a, b) {
        this._initConfig(a);
        this.onStart = b;
        this.prepare(f.onStart && f.onStart.bind(f));
      },
      addPersistRootNode: function (d) {
        if (cc.Node.isNode(d) && d.uuid) {
          var a = d.uuid;
          if (!this._persistRootNodes[a]) {
            var b = cc.director._scene;
            if (cc.isValid(b)) {
              if (d.parent) {
                if (!(d.parent instanceof cc.Scene)) {
                  return;
                }
                if (d.parent !== b) {
                  return;
                }
              } else {
                d.parent = b;
              }
            }
            this._persistRootNodes[a] = d;
            d._persistNode = true;
            cc.assetManager._releaseManager._addPersistNodeRef(d);
          }
        }
      },
      removePersistRootNode: function (c) {
        var a = c.uuid || "";
        if (c === this._persistRootNodes[a]) {
          delete this._persistRootNodes[a];
          c._persistNode = false;
          cc.assetManager._releaseManager._removePersistNodeRef(c);
        }
      },
      isPersistRootNode: function (b) {
        return b._persistNode;
      },
      _setAnimFrame: function () {
        this._lastTime = performance.now();
        var a = f.config.frameRate;
        this._frameTime = 1000 / a;
        cc.director._maxParticleDeltaTime = this._frameTime / 1000 * 2;
        var b = window.requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame;
        if (a !== 60 && a !== 30) {
          window.requestAnimFrame = b ? this._stTimeWithRAF : this._stTime;
          window.cancelAnimFrame = this._ctTime;
        } else {
          window.requestAnimFrame = b || this._stTime;
          window.cancelAnimFrame = window.cancelAnimationFrame || window.cancelRequestAnimationFrame || window.msCancelRequestAnimationFrame || window.mozCancelRequestAnimationFrame || window.oCancelRequestAnimationFrame || window.webkitCancelRequestAnimationFrame || window.msCancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.oCancelAnimationFrame || this._ctTime;
        }
      },
      _stTimeWithRAF: function (a) {
        var b = performance.now();
        var c = Math.max(0, f._frameTime - (b - f._lastTime));
        var d = window.setTimeout(function () {
          window.requestAnimationFrame(a);
        }, c);
        f._lastTime = b + c;
        return d;
      },
      _stTime: function (a) {
        var b = performance.now();
        var c = Math.max(0, f._frameTime - (b - f._lastTime));
        var d = window.setTimeout(function () {
          a();
        }, c);
        f._lastTime = b + c;
        return d;
      },
      _ctTime: function (b) {
        window.clearTimeout(b);
      },
      _runMainLoop: function () {
        if (this._prepared) {
          var f;
          var i = this;
          var a = i.config;
          var c = cc.director;
          var d = true;
          var e = a.frameRate;
          j.setDisplayStats(a.showFPS);
          f = function (b) {
            if (!i._paused) {
              i._intervalId = window.requestAnimFrame(f);
              if (e === 30 && (d = !d)) {
                return;
              }
              c.mainLoop(b);
            }
          };
          i._intervalId = window.requestAnimFrame(f);
        }
      },
      _initConfig: function (c) {
        if (typeof c.debugMode != "number") {
          c.debugMode = 0;
        }
        c.exposeClassName = !!c.exposeClassName;
        if (typeof c.frameRate != "number") {
          c.frameRate = 60;
        }
        var a = c.renderMode;
        if (typeof a != "number" || a > 2 || a < 0) {
          c.renderMode = 0;
        }
        if (typeof c.registerSystemEvent != "boolean") {
          c.registerSystemEvent = true;
        }
        c.showFPS = a !== 1 && !!c.showFPS;
        this.collisionMatrix = c.collisionMatrix || [];
        this.groupList = c.groupList || [];
        j._resetDebugSetting(c.debugMode);
        this.config = c;
        this._configLoaded = true;
      },
      _determineRenderType: function () {
        var d = this.config;
        var a = parseInt(d.renderMode) || 0;
        this.renderType = this.RENDER_TYPE_CANVAS;
        var b = false;
        if (a === 0) {
          if (cc.sys.capabilities.opengl) {
            this.renderType = this.RENDER_TYPE_WEBGL;
            b = true;
          } else if (cc.sys.capabilities.canvas) {
            this.renderType = this.RENDER_TYPE_CANVAS;
            b = true;
          }
        } else if (a === 1 && cc.sys.capabilities.canvas) {
          this.renderType = this.RENDER_TYPE_CANVAS;
          b = true;
        } else if (a === 2 && cc.sys.capabilities.opengl) {
          this.renderType = this.RENDER_TYPE_WEBGL;
          b = true;
        }
        if (!b) {
          throw Error(j.getError(3820, a));
        }
      },
      _initRenderer: function () {
        if (!this._rendererInitialized) {
          var g;
          var h;
          var i;
          var o;
          var p = this.config;
          var k = p.id;
          var m = k instanceof HTMLElement ? k : document.querySelector(k) || document.querySelector("#" + k);
          if (m.tagName === "CANVAS") {
            g = m.width;
            h = m.height;
            this.canvas = i = m;
            this.container = o = document.createElement("DIV");
            if (i.parentNode) {
              i.parentNode.insertBefore(o, i);
            }
          } else {
            m.tagName;
            g = m.clientWidth;
            h = m.clientHeight;
            this.canvas = i = document.createElement("CANVAS");
            this.container = o = document.createElement("DIV");
            m.appendChild(o);
          }
          o.setAttribute("id", "Cocos2dGameContainer");
          o.appendChild(i);
          this.frame = o.parentNode === document.body ? document.documentElement : o.parentNode;
          (function (b) {
            if (!((" " + b.className + " ").indexOf(" gameCanvas ") > -1)) {
              if (b.className) {
                b.className += " ";
              }
              b.className += "gameCanvas";
            }
          })(i);
          i.setAttribute("width", g || 480);
          i.setAttribute("height", h || 320);
          i.setAttribute("tabindex", 99);
          this._determineRenderType();
          if (this.renderType === this.RENDER_TYPE_WEBGL) {
            var c = {
              stencil: true,
              antialias: cc.macro.ENABLE_WEBGL_ANTIALIAS,
              alpha: cc.macro.ENABLE_TRANSPARENT_CANVAS
            };
            d.initWebGL(i, c);
            this._renderContext = d.device._gl;
            if (!cc.macro.CLEANUP_IMAGE_CACHE && e) {
              e.enabled = true;
            }
          }
          if (!this._renderContext) {
            this.renderType = this.RENDER_TYPE_CANVAS;
            d.initCanvas(i);
            this._renderContext = d.device._ctx;
          }
          this.canvas.oncontextmenu = function () {
            if (!cc._isContextMenuEnable) {
              return false;
            }
          };
          n.setRegexLang(p.localeHint);
          this._rendererInitialized = true;
        }
      },
      _initEvents: function () {
        var k;
        var c = window;
        var d = this;
        if (this.config.registerSystemEvent) {
          cc.internal.inputManager.registerSystemEvent(this.canvas);
        }
        if (document.hidden !== undefined) {
          k = "hidden";
        } else if (document.mozHidden !== undefined) {
          k = "mozHidden";
        } else if (document.msHidden !== undefined) {
          k = "msHidden";
        } else if (document.webkitHidden !== undefined) {
          k = "webkitHidden";
        }
        var e = false;
        function l() {
          if (!(e || d._paused)) {
            e = true;
            d.pause();
          }
        }
        function g() {
          if (e) {
            e = false;
            d.resume();
          }
        }
        if (k) {
          for (var h = ["visibilitychange", "mozvisibilitychange", "msvisibilitychange", "webkitvisibilitychange", "qbrowserVisibilityChange"], i = function (b) {
              var a = document[k];
              if (a = a || b.hidden) {
                l();
              } else {
                g();
              }
            }, a = 0; a < h.length; a++) {
            document.addEventListener(h[a], i);
          }
        } else {
          c.addEventListener("blur", l);
          c.addEventListener("focus", g);
        }
        if (navigator.userAgent.indexOf("MicroMessenger") > -1) {
          c.onfocus = g;
        }
        if ("onpageshow" in window && "onpagehide" in window) {
          c.addEventListener("pagehide", l);
          c.addEventListener("pageshow", g);
          document.addEventListener("pagehide", l);
          document.addEventListener("pageshow", g);
        }
      }
    };
    c.call(f);
    cc.js.addon(f, c.prototype);
    cc.game = b.exports = f;
  }, {
    "../core/renderer/utils/dynamic-atlas/manager": 196,
    "./CCDebug": 23,
    "./event/event-target": 134,
    "./renderer": 193,
    "./utils/text-utils": 243
  }],
  26: [function (Y, aa) {
    "use strict";

    var qa = Y("./value-types");
    var t = Y("./value-types/utils");
    var ba = Y("./utils/base-node");
    var e = Y("./utils/prefab-helper");
    var i = Y("./utils/trans-pool").NodeMemPool;
    var n = Y("./utils/affine-transform");
    var ca = Y("./event-manager");
    var da = Y("./platform/CCMacro");
    var ra = Y("./platform/js");
    Y("./event/event");
    var l = Y("./event/event-target");
    var h = Y("./renderer/render-flow");
    var o = cc.Object.Flags.Destroying;
    var c = Math.PI / 180;
    var f = !!cc.ActionManager;
    function a() {}
    var d = new qa.Vec3();
    var p = new qa.Quat();
    var g = new qa.Vec3();
    var m = new qa.Vec3();
    var r = new qa.Quat();
    var s = new qa.Quat();
    var u = new qa.Vec3();
    var v = new qa.Vec3();
    var x = new qa.Vec3();
    var y = new qa.Vec3();
    var b = new qa.Vec3();
    var A = new qa.Quat();
    var C = new qa.Quat();
    var E = new qa.Vec3();
    var w = new qa.Quat();
    var I = new qa.Vec3();
    var M = new qa.Quat();
    var L = new qa.Vec3();
    var O = new qa.Vec3();
    var D = new qa.Quat();
    var N = new qa.Quat();
    new qa.Quat();
    var F = cc.mat4();
    var B = new qa.Vec3();
    var P = new ra.Pool();
    P.get = function () {
      return this._get() || [];
    };
    var k = cc.Enum({
      DEBUG: 31
    });
    var R = cc.Enum({
      POSITION: 1,
      SCALE: 2,
      ROTATION: 4,
      SKEW: 8,
      TRS: 7,
      RS: 6,
      TRSS: 15,
      PHYSICS_POSITION: 16,
      PHYSICS_SCALE: 32,
      PHYSICS_ROTATION: 64,
      PHYSICS_TRS: 112,
      PHYSICS_RS: 96,
      ALL_POSITION: 17,
      ALL_SCALE: 34,
      ALL_ROTATION: 68,
      ALL_TRS: 119,
      ALL: 65535
    });
    var z = cc.Enum({
      TOUCH_START: "touchstart",
      TOUCH_MOVE: "touchmove",
      TOUCH_END: "touchend",
      TOUCH_CANCEL: "touchcancel",
      MOUSE_DOWN: "mousedown",
      MOUSE_MOVE: "mousemove",
      MOUSE_ENTER: "mouseenter",
      MOUSE_LEAVE: "mouseleave",
      MOUSE_UP: "mouseup",
      MOUSE_WHEEL: "mousewheel",
      POSITION_CHANGED: "position-changed",
      ROTATION_CHANGED: "rotation-changed",
      SCALE_CHANGED: "scale-changed",
      SIZE_CHANGED: "size-changed",
      ANCHOR_CHANGED: "anchor-changed",
      COLOR_CHANGED: "color-changed",
      CHILD_ADDED: "child-added",
      CHILD_REMOVED: "child-removed",
      CHILD_REORDER: "child-reorder",
      GROUP_CHANGED: "group-changed",
      SIBLING_ORDER_CHANGED: "sibling-order-changed"
    });
    var G = [z.TOUCH_START, z.TOUCH_MOVE, z.TOUCH_END, z.TOUCH_CANCEL];
    var H = [z.MOUSE_DOWN, z.MOUSE_ENTER, z.MOUSE_MOVE, z.MOUSE_LEAVE, z.MOUSE_UP, z.MOUSE_WHEEL];
    var S = null;
    function T(e, a) {
      var b = e.getLocation();
      var c = this.owner;
      return !!c._hitTest(b, this) && (a.type = z.TOUCH_START, a.touch = e, a.bubbles = true, c.dispatchEvent(a), true);
    }
    function V(d, a) {
      var b = this.owner;
      a.type = z.TOUCH_MOVE;
      a.touch = d;
      a.bubbles = true;
      b.dispatchEvent(a);
    }
    function j(e, a) {
      var b = e.getLocation();
      var c = this.owner;
      if (c._hitTest(b, this)) {
        a.type = z.TOUCH_END;
      } else {
        a.type = z.TOUCH_CANCEL;
      }
      a.touch = e;
      a.bubbles = true;
      c.dispatchEvent(a);
    }
    function q(d, a) {
      d.getLocation();
      var b = this.owner;
      a.type = z.TOUCH_CANCEL;
      a.touch = d;
      a.bubbles = true;
      b.dispatchEvent(a);
    }
    function W(d) {
      var a = d.getLocation();
      var b = this.owner;
      if (b._hitTest(a, this)) {
        d.type = z.MOUSE_DOWN;
        d.bubbles = true;
        b.dispatchEvent(d);
      }
    }
    function K(d) {
      var a = d.getLocation();
      var b = this.owner;
      if (b._hitTest(a, this)) {
        if (!this._previousIn) {
          if (S && S._mouseListener) {
            d.type = z.MOUSE_LEAVE;
            S.dispatchEvent(d);
            S._mouseListener._previousIn = false;
          }
          S = this.owner;
          d.type = z.MOUSE_ENTER;
          b.dispatchEvent(d);
          this._previousIn = true;
        }
        d.type = z.MOUSE_MOVE;
        d.bubbles = true;
        b.dispatchEvent(d);
      } else {
        if (!this._previousIn) {
          return;
        }
        d.type = z.MOUSE_LEAVE;
        b.dispatchEvent(d);
        this._previousIn = false;
        S = null;
      }
      d.stopPropagation();
    }
    function Q(d) {
      var a = d.getLocation();
      var b = this.owner;
      if (b._hitTest(a, this)) {
        d.type = z.MOUSE_UP;
        d.bubbles = true;
        b.dispatchEvent(d);
        d.stopPropagation();
      }
    }
    function J(d) {
      var a = d.getLocation();
      var b = this.owner;
      if (b._hitTest(a, this)) {
        d.type = z.MOUSE_WHEEL;
        d.bubbles = true;
        b.dispatchEvent(d);
        d.stopPropagation();
      }
    }
    function X(g, a) {
      if (a) {
        for (var b = 0, h = null, i = g; i && cc.Node.isNode(i); i = i._parent, ++b) {
          if (i.getComponent(a)) {
            var j = {
              index: b,
              node: i
            };
            if (h) {
              h.push(j);
            } else {
              h = [j];
            }
          }
        }
        return h;
      }
      return null;
    }
    function Z(f, a) {
      if (!(f._objFlags & o)) {
        if (f._bubblingListeners) {
          for (var b = 0, h = a.length; b < h; ++b) {
            if (f._bubblingListeners.hasEventListener(a[b])) {
              return true;
            }
          }
        }
        if (f._capturingListeners) {
          for (var d = 0, i = a.length; d < i; ++d) {
            if (f._capturingListeners.hasEventListener(a[d])) {
              return true;
            }
          }
        }
        return false;
      }
      return true;
    }
    function $(f, a, b) {
      var c;
      var g;
      a.target = f;
      b.length = 0;
      f._getCapturingTargets(a.type, b);
      a.eventPhase = 1;
      g = b.length - 1;
      for (; g >= 0; --g) {
        if ((c = b[g])._capturingListeners && (a.currentTarget = c, c._capturingListeners.emit(a.type, a, b), a._propagationStopped)) {
          b.length = 0;
          return;
        }
      }
      b.length = 0;
      a.eventPhase = 2;
      a.currentTarget = f;
      if (f._capturingListeners) {
        f._capturingListeners.emit(a.type, a);
      }
      if (!a._propagationImmediateStopped && f._bubblingListeners) {
        f._bubblingListeners.emit(a.type, a);
      }
      if (!a._propagationStopped && a.bubbles) {
        f._getBubblingTargets(a.type, b);
        a.eventPhase = 3;
        g = 0;
        f._getBubblingTargets(a.type, b);
        a.eventPhase = 3;
        g = 0;
        for (; g < b.length; ++g) {
          if ((c = b[g])._bubblingListeners && (a.currentTarget = c, c._bubblingListeners.emit(a.type, a), a._propagationStopped)) {
            b.length = 0;
            return;
          }
        }
      }
      b.length = 0;
    }
    function _(c) {
      var a = c.groupIndex;
      if (a === 0 && c.parent) {
        a = _(c.parent);
      }
      return a;
    }
    function ea(d) {
      var a = _(d);
      d._cullingMask = 1 << a;
      for (var b = 0; b < d._children.length; b++) {
        ea(d._children[b]);
      }
    }
    function fa() {
      if (this._localMatDirty & R.TRSS) {
        var j = this._matrix;
        var b = j.m;
        qa.Trs.toMat4(j, this._trs);
        if (this._skewX || this._skewY) {
          var d = b[0];
          var e = b[1];
          var f = b[4];
          var g = b[5];
          var h = Math.tan(this._skewX * c);
          var k = Math.tan(this._skewY * c);
          if (h === Infinity) {
            h = 99999999;
          }
          if (k === Infinity) {
            k = 99999999;
          }
          b[0] = d + f * k;
          b[1] = e + g * k;
          b[4] = f + d * h;
          b[5] = g + e * h;
        }
        this._localMatDirty &= ~R.TRSS;
        this._worldMatDirty = true;
      }
    }
    function ga() {
      var g = this._localMatDirty;
      if (g & R.TRSS) {
        var b = this._matrix.m;
        var h = this._trs;
        if (g & (R.RS | R.SKEW)) {
          var e = -this._eulerAngles.z;
          var i = this._skewX || this._skewY;
          var j = h[7];
          var k = h[8];
          if (e || i) {
            var l = 1;
            var m = 0;
            var n = 0;
            var o = 1;
            if (e) {
              var q = e * c;
              n = Math.sin(q);
              l = o = Math.cos(q);
              m = -n;
            }
            b[0] = l *= j;
            b[1] = m *= j;
            b[4] = n *= k;
            b[5] = o *= k;
            if (i) {
              var w = b[0];
              var u = b[1];
              var f = b[4];
              var d = b[5];
              var p = Math.tan(this._skewX * c);
              var y = Math.tan(this._skewY * c);
              if (p === Infinity) {
                p = 99999999;
              }
              if (y === Infinity) {
                y = 99999999;
              }
              b[0] = w + f * y;
              b[1] = u + d * y;
              b[4] = f + w * p;
              b[5] = d + u * p;
            }
          } else {
            b[0] = j;
            b[1] = 0;
            b[4] = 0;
            b[5] = k;
          }
        }
        b[12] = h[0];
        b[13] = h[1];
        this._localMatDirty &= ~R.TRSS;
        this._worldMatDirty = true;
      }
    }
    function ha() {
      if (this._localMatDirty & R.TRSS) {
        this._updateLocalMatrix();
      }
      if (this._parent) {
        var b = this._parent._worldMatrix;
        qa.Mat4.mul(this._worldMatrix, b, this._matrix);
      } else {
        qa.Mat4.copy(this._worldMatrix, this._matrix);
      }
      this._worldMatDirty = false;
    }
    function ia() {
      if (this._localMatDirty & R.TRSS) {
        this._updateLocalMatrix();
      }
      var b = this._parent;
      if (b) {
        this._mulMat(this._worldMatrix, b._worldMatrix, this._matrix);
      } else {
        qa.Mat4.copy(this._worldMatrix, this._matrix);
      }
      this._worldMatDirty = false;
    }
    function ja(g, b, j) {
      var e = b.m;
      var i = j.m;
      var k = g.m;
      var m = e[0];
      var n = e[1];
      var a = e[4];
      var o = e[5];
      var c = e[12];
      var l = e[13];
      var h = i[0];
      var q = i[1];
      var f = i[4];
      var d = i[5];
      var r = i[12];
      var p = i[13];
      if (n !== 0 || a !== 0) {
        k[0] = h * m + q * a;
        k[1] = h * n + q * o;
        k[4] = f * m + d * a;
        k[5] = f * n + d * o;
        k[12] = m * r + a * p + c;
        k[13] = n * r + o * p + l;
      } else {
        k[0] = h * m;
        k[1] = q * o;
        k[4] = f * m;
        k[5] = d * o;
        k[12] = m * r + c;
        k[13] = o * p + l;
      }
    }
    var ka = qa.Mat4.mul;
    var la = {
      name: "cc.Node",
      extends: ba,
      properties: {
        _opacity: 255,
        _color: cc.Color.WHITE,
        _contentSize: cc.Size,
        _anchorPoint: cc.v2(0.5, 0.5),
        _position: undefined,
        _scale: undefined,
        _trs: null,
        _eulerAngles: cc.Vec3,
        _skewX: 0,
        _skewY: 0,
        _zIndex: {
          default: undefined,
          type: cc.Integer
        },
        _localZOrder: {
          default: 0,
          serializable: false
        },
        _is3DNode: false,
        _groupIndex: {
          default: 0,
          formerlySerializedAs: "groupIndex"
        },
        groupIndex: {
          get: function () {
            return this._groupIndex;
          },
          set: function (b) {
            this._groupIndex = b;
            ea(this);
            this.emit(z.GROUP_CHANGED, this);
          }
        },
        group: {
          get: function () {
            return cc.game.groupList[this.groupIndex] || "";
          },
          set: function (b) {
            this.groupIndex = cc.game.groupList.indexOf(b);
          }
        },
        x: {
          get: function () {
            return this._trs[0];
          },
          set: function (c) {
            var a = this._trs;
            if (c !== a[0]) {
              a[0] = c;
              this.setLocalDirty(R.ALL_POSITION);
              if (this._eventMask & 1) {
                this.emit(z.POSITION_CHANGED);
              }
            }
          }
        },
        y: {
          get: function () {
            return this._trs[1];
          },
          set: function (c) {
            var a = this._trs;
            if (c !== a[1]) {
              a[1] = c;
              this.setLocalDirty(R.ALL_POSITION);
              if (this._eventMask & 1) {
                this.emit(z.POSITION_CHANGED);
              }
            }
          }
        },
        z: {
          get: function () {
            return this._trs[2];
          },
          set: function (c) {
            var a = this._trs;
            if (c !== a[2]) {
              a[2] = c;
              this.setLocalDirty(R.ALL_POSITION);
              this._renderFlag |= h.FLAG_WORLD_TRANSFORM;
              if (this._eventMask & 1) {
                this.emit(z.POSITION_CHANGED);
              }
            }
          }
        },
        rotation: {
          get: function () {
            return -this.angle;
          },
          set: function (b) {
            this.angle = -b;
          }
        },
        angle: {
          get: function () {
            return this._eulerAngles.z;
          },
          set: function (b) {
            qa.Vec3.set(this._eulerAngles, 0, 0, b);
            qa.Trs.fromAngleZ(this._trs, b);
            this.setLocalDirty(R.ALL_ROTATION);
            if (this._eventMask & 4) {
              this.emit(z.ROTATION_CHANGED);
            }
          }
        },
        rotationX: {
          get: function () {
            return this._eulerAngles.x;
          },
          set: function (b) {
            if (this._eulerAngles.x !== b) {
              this._eulerAngles.x = b;
              if (this._eulerAngles.x === this._eulerAngles.y) {
                qa.Trs.fromAngleZ(this._trs, -b);
              } else {
                qa.Trs.fromEulerNumber(this._trs, b, this._eulerAngles.y, 0);
              }
              this.setLocalDirty(R.ALL_ROTATION);
              if (this._eventMask & 4) {
                this.emit(z.ROTATION_CHANGED);
              }
            }
          }
        },
        rotationY: {
          get: function () {
            return this._eulerAngles.y;
          },
          set: function (b) {
            if (this._eulerAngles.y !== b) {
              this._eulerAngles.y = b;
              if (this._eulerAngles.x === this._eulerAngles.y) {
                qa.Trs.fromAngleZ(this._trs, -b);
              } else {
                qa.Trs.fromEulerNumber(this._trs, this._eulerAngles.x, b, 0);
              }
              this.setLocalDirty(R.ALL_ROTATION);
              if (this._eventMask & 4) {
                this.emit(z.ROTATION_CHANGED);
              }
            }
          }
        },
        eulerAngles: {
          get: function () {
            return qa.Trs.toEuler(this._eulerAngles, this._trs);
          },
          set: function (b) {
            qa.Trs.fromEuler(this._trs, b);
            this.setLocalDirty(R.ALL_ROTATION);
            this._renderFlag |= h.FLAG_TRANSFORM;
            if (this._eventMask & 4) {
              this.emit(z.ROTATION_CHANGED);
            }
          }
        },
        quat: {
          get: function () {
            var b = this._trs;
            return new qa.Quat(b[3], b[4], b[5], b[6]);
          },
          set: function (b) {
            this.setRotation(b);
          }
        },
        scale: {
          get: function () {
            return this._trs[7];
          },
          set: function (b) {
            this.setScale(b);
          }
        },
        scaleX: {
          get: function () {
            return this._trs[7];
          },
          set: function (b) {
            if (this._trs[7] !== b) {
              this._trs[7] = b;
              this.setLocalDirty(R.ALL_SCALE);
              if (this._eventMask & 2) {
                this.emit(z.SCALE_CHANGED);
              }
            }
          }
        },
        scaleY: {
          get: function () {
            return this._trs[8];
          },
          set: function (b) {
            if (this._trs[8] !== b) {
              this._trs[8] = b;
              this.setLocalDirty(R.ALL_SCALE);
              if (this._eventMask & 2) {
                this.emit(z.SCALE_CHANGED);
              }
            }
          }
        },
        scaleZ: {
          get: function () {
            return this._trs[9];
          },
          set: function (b) {
            if (this._trs[9] !== b) {
              this._trs[9] = b;
              this.setLocalDirty(R.ALL_SCALE);
              this._renderFlag |= h.FLAG_TRANSFORM;
              if (this._eventMask & 2) {
                this.emit(z.SCALE_CHANGED);
              }
            }
          }
        },
        skewX: {
          get: function () {
            return this._skewX;
          },
          set: function (b) {
            this._skewX = b;
            this.setLocalDirty(R.SKEW);
          }
        },
        skewY: {
          get: function () {
            return this._skewY;
          },
          set: function (b) {
            this._skewY = b;
            this.setLocalDirty(R.SKEW);
          }
        },
        opacity: {
          get: function () {
            return this._opacity;
          },
          set: function (b) {
            if (this._opacity !== b) {
              this._opacity = b;
              this._renderFlag |= h.FLAG_OPACITY_COLOR;
            }
          },
          range: [0, 255]
        },
        color: {
          get: function () {
            return this._color.clone();
          },
          set: function (b) {
            if (!this._color.equals(b)) {
              this._color.set(b);
              this._renderFlag |= h.FLAG_COLOR;
              if (this._eventMask & 32) {
                this.emit(z.COLOR_CHANGED, b);
              }
            }
          }
        },
        anchorX: {
          get: function () {
            return this._anchorPoint.x;
          },
          set: function (c) {
            var a = this._anchorPoint;
            if (a.x !== c) {
              a.x = c;
              if (this._eventMask & 16) {
                this.emit(z.ANCHOR_CHANGED);
              }
            }
          }
        },
        anchorY: {
          get: function () {
            return this._anchorPoint.y;
          },
          set: function (c) {
            var a = this._anchorPoint;
            if (a.y !== c) {
              a.y = c;
              if (this._eventMask & 16) {
                this.emit(z.ANCHOR_CHANGED);
              }
            }
          }
        },
        width: {
          get: function () {
            return this._contentSize.width;
          },
          set: function (b) {
            if (b !== this._contentSize.width) {
              this._contentSize.width = b;
              if (this._eventMask & 8) {
                this.emit(z.SIZE_CHANGED);
              }
            }
          }
        },
        height: {
          get: function () {
            return this._contentSize.height;
          },
          set: function (b) {
            if (b !== this._contentSize.height) {
              this._contentSize.height = b;
              if (this._eventMask & 8) {
                this.emit(z.SIZE_CHANGED);
              }
            }
          }
        },
        zIndex: {
          get: function () {
            return this._localZOrder >> 16;
          },
          set: function (b) {
            if (b > da.MAX_ZINDEX) {
              b = da.MAX_ZINDEX;
            } else if (b < da.MIN_ZINDEX) {
              b = da.MIN_ZINDEX;
            }
            if (this.zIndex !== b) {
              this._localZOrder = this._localZOrder & 65535 | b << 16;
              this.emit(z.SIBLING_ORDER_CHANGED);
              this._onSiblingIndexChanged();
            }
          }
        },
        swallowTouches: {
          get: function () {
            return this._swallowTouches;
          },
          set: function (b) {
            this._swallowTouches = b;
            if (this._touchListener) {
              this._touchListener.setSwallowTouches(b);
            }
          }
        },
        is3DNode: {
          get: function () {
            return this._is3DNode;
          },
          set: function (b) {
            if (this._is3DNode !== b) {
              this._is3DNode = b;
              this._update3DFunction();
            }
          }
        },
        up: {
          get: function () {
            return qa.Vec3.transformQuat(I, qa.Vec3.UP, this.getWorldRotation(M)).clone();
          }
        },
        right: {
          get: function () {
            return qa.Vec3.transformQuat(I, qa.Vec3.RIGHT, this.getWorldRotation(M)).clone();
          }
        },
        forward: {
          get: function () {
            return qa.Vec3.transformQuat(I, qa.Vec3.FORWARD, this.getWorldRotation(M)).clone();
          }
        }
      },
      ctor: function () {
        this._reorderChildDirty = false;
        this._widget = null;
        this._renderComponent = null;
        this._capturingListeners = null;
        this._bubblingListeners = null;
        this._touchListener = null;
        this._mouseListener = null;
        this._initDataFromPool();
        this._eventMask = 0;
        this._cullingMask = 1;
        this._childArrivalOrder = 1;
        this._swallowTouches = true;
        this._renderFlag = h.FLAG_TRANSFORM | h.FLAG_OPACITY_COLOR;
      },
      statics: {
        EventType: z,
        _LocalDirtyFlag: R,
        isNode: function (b) {
          return b instanceof ma && (b.constructor === ma || !(b instanceof cc.Scene));
        },
        BuiltinGroupIndex: k
      },
      _onSiblingIndexChanged: function () {
        if (this._parent) {
          this._parent._delaySort();
        }
      },
      _onPreDestroy: function () {
        this._onPreDestroyBase();
        if (f) {
          cc.director.getActionManager().removeAllActionsFromTarget(this);
        }
        if (S === this) {
          S = null;
        }
        if (this._bubblingListeners) {
          this._bubblingListeners.clear();
        }
        if (this._capturingListeners) {
          this._capturingListeners.clear();
        }
        if (this._touchListener || this._mouseListener) {
          ca.removeListeners(this);
          if (this._touchListener) {
            this._touchListener.owner = null;
            this._touchListener.mask = null;
            this._touchListener = null;
          }
          if (this._mouseListener) {
            this._mouseListener.owner = null;
            this._mouseListener.mask = null;
            this._mouseListener = null;
          }
        }
        this._backDataIntoPool();
        if (this._reorderChildDirty) {
          cc.director.__fastOff(cc.Director.EVENT_AFTER_UPDATE, this.sortAllChildren, this);
        }
      },
      _onPostActivated: function (c) {
        var a = f ? cc.director.getActionManager() : null;
        if (c) {
          this._renderFlag |= h.FLAG_WORLD_TRANSFORM;
          if (a) {
            a.resumeTarget(this);
          }
          ca.resumeTarget(this);
          this._checkListenerMask();
        } else {
          if (a) {
            a.pauseTarget(this);
          }
          ca.pauseTarget(this);
        }
      },
      _onHierarchyChanged: function (b) {
        this._updateOrderOfArrival();
        ea(this);
        if (this._parent) {
          this._parent._delaySort();
        }
        this._renderFlag |= h.FLAG_WORLD_TRANSFORM | h.FLAG_OPACITY_COLOR;
        this._onHierarchyChangedBase(b);
        if (cc._widgetManager) {
          cc._widgetManager._nodesOrderDirty = true;
        }
        if (b && this._activeInHierarchy) {
          this._checkListenerMask();
        }
      },
      _update3DFunction: function () {
        if (this._is3DNode) {
          this._updateLocalMatrix = fa;
          this._calculWorldMatrix = ha;
          this._mulMat = ka;
        } else {
          this._updateLocalMatrix = ga;
          this._calculWorldMatrix = ia;
          this._mulMat = ja;
        }
        if (this._renderComponent && this._renderComponent._on3DNodeChanged) {
          this._renderComponent._on3DNodeChanged();
        }
        this._renderFlag |= h.FLAG_TRANSFORM;
        this._localMatDirty = R.ALL;
      },
      _initDataFromPool: function () {
        if (!this._spaceInfo) {
          this._spaceInfo = i.pop();
        }
        var c = this._spaceInfo;
        this._matrix = cc.mat4(c.localMat);
        qa.Mat4.identity(this._matrix);
        this._worldMatrix = cc.mat4(c.worldMat);
        qa.Mat4.identity(this._worldMatrix);
        this._localMatDirty = R.ALL;
        this._worldMatDirty = true;
        var a = this._trs = c.trs;
        a[0] = 0;
        a[1] = 0;
        a[2] = 0;
        a[3] = 0;
        a[4] = 0;
        a[5] = 0;
        a[6] = 1;
        a[7] = 1;
        a[8] = 1;
        a[9] = 1;
      },
      _backDataIntoPool: function () {
        i.push(this._spaceInfo);
        this._matrix = null;
        this._worldMatrix = null;
        this._trs = null;
        this._spaceInfo = null;
      },
      _toEuler: function () {
        if (this.is3DNode) {
          qa.Trs.toEuler(this._eulerAngles, this._trs);
        } else {
          var b = Math.asin(this._trs[5]) / c * 2;
          qa.Vec3.set(this._eulerAngles, 0, 0, b);
        }
      },
      _fromEuler: function () {
        if (this.is3DNode) {
          qa.Trs.fromEuler(this._trs, this._eulerAngles);
        } else {
          qa.Trs.fromAngleZ(this._trs, this._eulerAngles.z);
        }
      },
      _initProperties: function () {
        if (this._is3DNode) {
          this._update3DFunction();
        }
        var c = this._trs;
        if (c) {
          var d = c;
          c = this._trs = this._spaceInfo.trs;
          if (d.length === 11) {
            c.set(d.subarray(1));
          } else {
            c.set(d);
          }
        } else {
          c = this._trs = this._spaceInfo.trs;
        }
        this._fromEuler();
      },
      _onBatchCreated: function (a) {
        this._initProperties();
        this._cullingMask = 1 << _(this);
        if (!this._activeInHierarchy) {
          if (f) {
            cc.director.getActionManager().pauseTarget(this);
          }
          ca.pauseTarget(this);
        }
        for (var b = this._children, c = 0, d = b.length; c < d; c++) {
          var i = b[c];
          if (!a) {
            var j = i._prefab;
            if (j && j.sync && j.root === i) {
              e.syncWithPrefab(i);
            }
            i._updateOrderOfArrival();
          }
          i._onBatchCreated(a);
        }
        if (b.length > 0) {
          this._renderFlag |= h.FLAG_CHILDREN;
        }
      },
      _checkListenerMask: function () {
        if (this._touchListener) {
          var b = this._touchListener.mask = X(this, cc.Mask);
          if (this._mouseListener) {
            this._mouseListener.mask = b;
          }
        } else if (this._mouseListener) {
          this._mouseListener.mask = X(this, cc.Mask);
        }
      },
      _checknSetupSysEvent: function (d) {
        var a = false;
        var e = false;
        if (G.indexOf(d) !== -1) {
          if (!this._touchListener) {
            this._touchListener = cc.EventListener.create({
              event: cc.EventListener.TOUCH_ONE_BY_ONE,
              swallowTouches: this._swallowTouches,
              owner: this,
              mask: X(this, cc.Mask),
              onTouchBegan: T,
              onTouchMoved: V,
              onTouchEnded: j,
              onTouchCancelled: q
            });
            ca.addListener(this._touchListener, this);
            a = true;
          }
          e = true;
        } else if (H.indexOf(d) !== -1) {
          if (!this._mouseListener) {
            this._mouseListener = cc.EventListener.create({
              event: cc.EventListener.MOUSE,
              _previousIn: false,
              owner: this,
              mask: X(this, cc.Mask),
              onMouseDown: W,
              onMouseMove: K,
              onMouseUp: Q,
              onMouseScroll: J
            });
            ca.addListener(this._mouseListener, this);
            a = true;
          }
          e = true;
        }
        if (a && !this._activeInHierarchy) {
          cc.director.getScheduler().schedule(function () {
            if (!this._activeInHierarchy) {
              ca.pauseTarget(this);
            }
          }, this, 0, 0, 0, false);
        }
        return e;
      },
      on: function (e, a, b, c) {
        return this._realon(e, a, b, c, false);
      },
      _realon: function (f, a, b, g, h) {
        if (typeof b == "boolean") {
          g = b;
          b = undefined;
        } else {
          g = !!g;
        }
        if (a) {
          if (this._checknSetupSysEvent(f)) {
            return this._onDispatch(f, a, b, g, h);
          }
          switch (f) {
            case z.POSITION_CHANGED:
              this._eventMask |= 1;
              break;
            case z.SCALE_CHANGED:
              this._eventMask |= 2;
              break;
            case z.ROTATION_CHANGED:
              this._eventMask |= 4;
              break;
            case z.SIZE_CHANGED:
              this._eventMask |= 8;
              break;
            case z.ANCHOR_CHANGED:
              this._eventMask |= 16;
              break;
            case z.COLOR_CHANGED:
              this._eventMask |= 32;
          }
          return this._onDispatch(f, a, b, false, h);
        }
      },
      once: function (e, a, b, c) {
        this._realon(e, a, b, c, true);
      },
      _onDispatch: function (g, a, b, c, d) {
        var e = null;
        if (!(e = c ? this._capturingListeners = this._capturingListeners || new l() : this._bubblingListeners = this._bubblingListeners || new l()).hasEventListener(g, a, b)) {
          e.on(g, a, b, d);
          if (b && b.__eventTargets) {
            b.__eventTargets.push(this);
          }
        }
        return a;
      },
      off: function (g, a, b, h) {
        if (typeof b == "boolean") {
          h = b;
          b = undefined;
        } else {
          h = !!h;
        }
        var i = G.indexOf(g) !== -1;
        var e = !i && H.indexOf(g) !== -1;
        if (i || e) {
          this._offDispatch(g, a, b, h);
          if (i) {
            if (this._touchListener && !Z(this, G)) {
              ca.removeListener(this._touchListener);
              this._touchListener = null;
            }
          } else if (e && this._mouseListener && !Z(this, H)) {
            ca.removeListener(this._mouseListener);
            this._mouseListener = null;
          }
        } else if (this._bubblingListeners && (this._offDispatch(g, a, b, false), !this._bubblingListeners.hasEventListener(g))) {
          switch (g) {
            case z.POSITION_CHANGED:
              this._eventMask &= -2;
              break;
            case z.SCALE_CHANGED:
              this._eventMask &= -3;
              break;
            case z.ROTATION_CHANGED:
              this._eventMask &= -5;
              break;
            case z.SIZE_CHANGED:
              this._eventMask &= -9;
              break;
            case z.ANCHOR_CHANGED:
              this._eventMask &= -17;
              break;
            case z.COLOR_CHANGED:
              this._eventMask &= -33;
          }
        }
      },
      _offDispatch: function (f, a, b, c) {
        if (a) {
          var d = c ? this._capturingListeners : this._bubblingListeners;
          if (d && d.off(f, a, b) && b && b.__eventTargets) {
            ra.array.fastRemove(b.__eventTargets, this);
          }
        } else {
          if (this._capturingListeners) {
            this._capturingListeners.removeAll(f);
          }
          if (this._bubblingListeners) {
            this._bubblingListeners.removeAll(f);
          }
        }
      },
      targetOff: function (c) {
        var a = this._bubblingListeners;
        if (a) {
          a.targetOff(c);
          if (this._eventMask & 1 && !a.hasEventListener(z.POSITION_CHANGED)) {
            this._eventMask &= -2;
          }
          if (this._eventMask & 2 && !a.hasEventListener(z.SCALE_CHANGED)) {
            this._eventMask &= -3;
          }
          if (this._eventMask & 4 && !a.hasEventListener(z.ROTATION_CHANGED)) {
            this._eventMask &= -5;
          }
          if (this._eventMask & 8 && !a.hasEventListener(z.SIZE_CHANGED)) {
            this._eventMask &= -9;
          }
          if (this._eventMask & 16 && !a.hasEventListener(z.ANCHOR_CHANGED)) {
            this._eventMask &= -17;
          }
          if (this._eventMask & 32 && !a.hasEventListener(z.COLOR_CHANGED)) {
            this._eventMask &= -33;
          }
        }
        if (this._capturingListeners) {
          this._capturingListeners.targetOff(c);
        }
        if (c && c.__eventTargets) {
          ra.array.fastRemoveAll(c.__eventTargets, this);
        }
        if (this._touchListener && !Z(this, G)) {
          ca.removeListener(this._touchListener);
          this._touchListener = null;
        }
        if (this._mouseListener && !Z(this, H)) {
          ca.removeListener(this._mouseListener);
          this._mouseListener = null;
        }
      },
      hasEventListener: function (c) {
        var a = false;
        if (this._bubblingListeners) {
          a = this._bubblingListeners.hasEventListener(c);
        }
        if (!a && this._capturingListeners) {
          a = this._capturingListeners.hasEventListener(c);
        }
        return a;
      },
      emit: function (g, a, b, c, d, e) {
        if (this._bubblingListeners) {
          this._bubblingListeners.emit(g, a, b, c, d, e);
        }
      },
      dispatchEvent: function (c) {
        var a = P.get();
        $(this, c, a);
        P.put(a);
      },
      pauseSystemEvents: function (b) {
        ca.pauseTarget(this, b);
      },
      resumeSystemEvents: function (b) {
        ca.resumeTarget(this, b);
      },
      _hitTest: function (c, b) {
        var d = this._contentSize.width;
        var e = this._contentSize.height;
        var f = L;
        var g = O;
        var h = cc.Camera.findCamera(this);
        if (h) {
          h.getScreenToWorldPoint(c, f);
        } else {
          f.set(c);
        }
        this._updateWorldMatrix();
        if (!qa.Mat4.invert(F, this._worldMatrix)) {
          return false;
        }
        qa.Vec2.transformMat4(g, f, F);
        g.x += this._anchorPoint.x * d;
        g.y += this._anchorPoint.y * e;
        var a = false;
        if (g.x >= 0 && g.y >= 0 && g.x <= d && g.y <= e && (a = true, b && b.mask)) {
          for (var i = b.mask, j = this, k = i ? i.length : 0, n = 0, o = 0; j && o < k; ++n, j = j.parent) {
            var p = i[o];
            if (n === p.index) {
              if (j !== p.node) {
                i.length = o;
                break;
              }
              var u = j.getComponent(cc.Mask);
              if (u && u._enabled && !u._hitTest(f)) {
                a = false;
                break;
              }
              o++;
            } else if (n > p.index) {
              i.length = o;
              break;
            }
          }
        }
        return a;
      },
      _getCapturingTargets: function (d, a) {
        for (var b = this.parent; b;) {
          if (b._capturingListeners && b._capturingListeners.hasEventListener(d)) {
            a.push(b);
          }
          b = b.parent;
        }
      },
      _getBubblingTargets: function (d, a) {
        for (var b = this.parent; b;) {
          if (b._bubblingListeners && b._bubblingListeners.hasEventListener(d)) {
            a.push(b);
          }
          b = b.parent;
        }
      },
      runAction: f ? function (c) {
        if (this.active) {
          var a = cc.director.getActionManager();
          if (!a._suppressDeprecation) {
            a._suppressDeprecation = true;
          }
          a.addAction(c, this, false);
          return c;
        }
      } : a,
      pauseAllActions: f ? function () {
        cc.director.getActionManager().pauseTarget(this);
      } : a,
      resumeAllActions: f ? function () {
        cc.director.getActionManager().resumeTarget(this);
      } : a,
      stopAllActions: f ? function () {
        cc.director.getActionManager().removeAllActionsFromTarget(this);
      } : a,
      stopAction: f ? function (b) {
        cc.director.getActionManager().removeAction(b);
      } : a,
      stopActionByTag: f ? function (b) {
        if (b !== cc.Action.TAG_INVALID) {
          cc.director.getActionManager().removeActionByTag(b, this);
        }
      } : a,
      getActionByTag: f ? function (b) {
        if (b === cc.Action.TAG_INVALID) {
          return null;
        } else {
          return cc.director.getActionManager().getActionByTag(b, this);
        }
      } : function () {
        return null;
      },
      getNumberOfRunningActions: f ? function () {
        return cc.director.getActionManager().getNumberOfRunningActionsInTarget(this);
      } : function () {
        return 0;
      },
      getPosition: function (b) {
        b = b || new qa.Vec3();
        return qa.Trs.toPosition(b, this._trs);
      },
      setPosition: function (e, a, g) {
        var i;
        if (a === undefined) {
          i = e.x;
          a = e.y;
          g = e.z;
        } else {
          i = e;
        }
        var j = this._trs;
        if (g === undefined) {
          g = j[2];
        }
        if (j[0] !== i || j[1] !== a || j[2] !== g) {
          j[0] = i;
          j[1] = a;
          j[2] = g;
          this.setLocalDirty(R.ALL_POSITION);
          this._renderFlag |= h.FLAG_WORLD_TRANSFORM;
          if (this._eventMask & 1) {
            this.emit(z.POSITION_CHANGED);
          }
        }
      },
      getScale: function (b) {
        if (b !== undefined) {
          return qa.Trs.toScale(b, this._trs);
        } else {
          return this._trs[7];
        }
      },
      setScale: function (e, a, g) {
        var i;
        if (e && typeof e != "number") {
          i = e.x;
          a = e.y;
          g = e.z;
        } else if (e !== undefined && a === undefined) {
          i = e;
          a = e;
          g = e;
        } else {
          i = e;
        }
        var j = this._trs;
        if (g === undefined) {
          g = j[9];
        }
        if (!(j[7] === i && j[8] === a && j[9] === g)) {
          j[7] = i;
          j[8] = a;
          j[9] = g;
          this.setLocalDirty(R.ALL_SCALE);
          this._renderFlag |= h.FLAG_TRANSFORM;
          if (this._eventMask & 2) {
            this.emit(z.SCALE_CHANGED);
          }
        }
      },
      getRotation: function (b) {
        if (b instanceof qa.Quat) {
          return qa.Trs.toRotation(b, this._trs);
        } else {
          return -this.angle;
        }
      },
      setRotation: function (e, a, h, i) {
        if (typeof e == "number" && a === undefined) {
          this.angle = -e;
        } else {
          var j = e;
          if (a === undefined) {
            j = e.x;
            a = e.y;
            h = e.z;
            i = e.w;
          }
          var k = this._trs;
          if (!(k[3] === j && k[4] === a && k[5] === h && k[6] === i)) {
            k[3] = j;
            k[4] = a;
            k[5] = h;
            k[6] = i;
            this.setLocalDirty(R.ALL_ROTATION);
            if (this._eventMask & 4) {
              this.emit(z.ROTATION_CHANGED);
            }
          }
        }
      },
      getContentSize: function () {
        return cc.size(this._contentSize.width, this._contentSize.height);
      },
      setContentSize: function (d, a) {
        var b = this._contentSize;
        if (a === undefined) {
          if ((0, t.approx)(d.width, b.width) && (0, t.approx)(d.height, b.height)) {
            return;
          }
          b.width = d.width;
          b.height = d.height;
        } else {
          if ((0, t.approx)(d, b.width) && (0, t.approx)(a, b.height)) {
            return;
          }
          b.width = d;
          b.height = a;
        }
        if (this._eventMask & 8) {
          this.emit(z.SIZE_CHANGED);
        }
      },
      getAnchorPoint: function () {
        return cc.v2(this._anchorPoint);
      },
      setAnchorPoint: function (d, a) {
        var b = this._anchorPoint;
        if (a === undefined) {
          if (d.x === b.x && d.y === b.y) {
            return;
          }
          b.x = d.x;
          b.y = d.y;
        } else {
          if (d === b.x && a === b.y) {
            return;
          }
          b.x = d;
          b.y = a;
        }
        this.setLocalDirty(R.ALL_POSITION);
        if (this._eventMask & 16) {
          this.emit(z.ANCHOR_CHANGED);
        }
      },
      _invTransformPoint: function (d, a) {
        if (this._parent) {
          this._parent._invTransformPoint(d, a);
        } else {
          qa.Vec3.copy(d, a);
        }
        var b = this._trs;
        qa.Trs.toPosition(g, b);
        qa.Vec3.sub(d, d, g);
        qa.Trs.toRotation(r, b);
        qa.Quat.conjugate(s, r);
        qa.Vec3.transformQuat(d, d, s);
        qa.Trs.toScale(g, b);
        qa.Vec3.inverseSafe(m, g);
        qa.Vec3.mul(d, d, m);
        return d;
      },
      getWorldPosition: function (e) {
        qa.Trs.toPosition(e, this._trs);
        for (var a, f = this._parent; f;) {
          a = f._trs;
          qa.Trs.toScale(d, a);
          qa.Vec3.mul(e, e, d);
          qa.Trs.toRotation(p, a);
          qa.Vec3.transformQuat(e, e, p);
          qa.Trs.toPosition(d, a);
          qa.Vec3.add(e, e, d);
          f = f._parent;
        }
        return e;
      },
      setWorldPosition: function (c) {
        var a = this._trs;
        if (this._parent) {
          this._parent._invTransformPoint(u, c);
        } else {
          qa.Vec3.copy(u, c);
        }
        qa.Trs.fromPosition(a, u);
        this.setLocalDirty(R.ALL_POSITION);
        if (this._eventMask & 1) {
          this.emit(z.POSITION_CHANGED);
        }
      },
      getWorldRotation: function (c) {
        qa.Trs.toRotation(D, this._trs);
        qa.Quat.copy(c, D);
        for (var a = this._parent; a;) {
          qa.Trs.toRotation(D, a._trs);
          qa.Quat.mul(c, D, c);
          a = a._parent;
        }
        return c;
      },
      setWorldRotation: function (b) {
        if (this._parent) {
          this._parent.getWorldRotation(N);
          qa.Quat.conjugate(N, N);
          qa.Quat.mul(N, N, b);
        } else {
          qa.Quat.copy(N, b);
        }
        qa.Trs.fromRotation(this._trs, N);
        this.setLocalDirty(R.ALL_ROTATION);
      },
      getWorldScale: function (c) {
        qa.Trs.toScale(v, this._trs);
        qa.Vec3.copy(c, v);
        for (var a = this._parent; a;) {
          qa.Trs.toScale(v, a._trs);
          qa.Vec3.mul(c, c, v);
          a = a._parent;
        }
        return c;
      },
      setWorldScale: function (b) {
        if (this._parent) {
          this._parent.getWorldScale(x);
          qa.Vec3.div(x, b, x);
        } else {
          qa.Vec3.copy(x, b);
        }
        qa.Trs.fromScale(this._trs, x);
        this.setLocalDirty(R.ALL_SCALE);
      },
      getWorldRT: function (g) {
        var a = y;
        var c = A;
        var d = this._trs;
        qa.Trs.toPosition(a, d);
        qa.Trs.toRotation(c, d);
        for (var h = this._parent; h;) {
          d = h._trs;
          qa.Trs.toScale(b, d);
          qa.Vec3.mul(a, a, b);
          qa.Trs.toRotation(C, d);
          qa.Vec3.transformQuat(a, a, C);
          qa.Trs.toPosition(b, d);
          qa.Vec3.add(a, a, b);
          qa.Quat.mul(c, C, c);
          h = h._parent;
        }
        qa.Mat4.fromRT(g, c, a);
        return g;
      },
      lookAt: function (c, a) {
        this.getWorldPosition(E);
        qa.Vec3.sub(E, E, c);
        qa.Vec3.normalize(E, E);
        qa.Quat.fromViewUp(w, E, a);
        this.setWorldRotation(w);
      },
      _updateLocalMatrix: ga,
      _calculWorldMatrix: function () {
        if (this._localMatDirty & R.TRSS) {
          this._updateLocalMatrix();
        }
        var b = this._parent;
        if (b) {
          this._mulMat(this._worldMatrix, b._worldMatrix, this._matrix);
        } else {
          qa.Mat4.copy(this._worldMatrix, this._matrix);
        }
        this._worldMatDirty = false;
      },
      _mulMat: ja,
      _updateWorldMatrix: function () {
        if (this._parent) {
          this._parent._updateWorldMatrix();
        }
        if (this._worldMatDirty) {
          this._calculWorldMatrix();
          for (var d = this._children, a = 0, e = d.length; a < e; a++) {
            d[a]._worldMatDirty = true;
          }
        }
      },
      setLocalDirty: function (b) {
        this._localMatDirty |= b;
        this._worldMatDirty = true;
        if (b === R.ALL_POSITION || b === R.POSITION) {
          this._renderFlag |= h.FLAG_WORLD_TRANSFORM;
        } else {
          this._renderFlag |= h.FLAG_TRANSFORM;
        }
      },
      setWorldDirty: function () {
        this._worldMatDirty = true;
      },
      getLocalMatrix: function (b) {
        this._updateLocalMatrix();
        return qa.Mat4.copy(b, this._matrix);
      },
      getWorldMatrix: function (b) {
        this._updateWorldMatrix();
        return qa.Mat4.copy(b, this._worldMatrix);
      },
      convertToNodeSpaceAR: function (c, a) {
        this._updateWorldMatrix();
        qa.Mat4.invert(F, this._worldMatrix);
        if (c instanceof cc.Vec2) {
          a = a || new cc.Vec2();
          return qa.Vec2.transformMat4(a, c, F);
        } else {
          a = a || new cc.Vec3();
          return qa.Vec3.transformMat4(a, c, F);
        }
      },
      convertToWorldSpaceAR: function (c, a) {
        this._updateWorldMatrix();
        if (c instanceof cc.Vec2) {
          a = a || new cc.Vec2();
          return qa.Vec2.transformMat4(a, c, this._worldMatrix);
        } else {
          a = a || new cc.Vec3();
          return qa.Vec3.transformMat4(a, c, this._worldMatrix);
        }
      },
      convertToNodeSpace: function (c) {
        this._updateWorldMatrix();
        qa.Mat4.invert(F, this._worldMatrix);
        var a = new cc.Vec2();
        qa.Vec2.transformMat4(a, c, F);
        a.x += this._anchorPoint.x * this._contentSize.width;
        a.y += this._anchorPoint.y * this._contentSize.height;
        return a;
      },
      convertToWorldSpace: function (c) {
        this._updateWorldMatrix();
        var a = new cc.Vec2(c.x - this._anchorPoint.x * this._contentSize.width, c.y - this._anchorPoint.y * this._contentSize.height);
        return qa.Vec2.transformMat4(a, a, this._worldMatrix);
      },
      getNodeToParentTransform: function (a) {
        if (!a) {
          a = n.identity();
        }
        this._updateLocalMatrix();
        var d = this._contentSize;
        B.x = -this._anchorPoint.x * d.width;
        B.y = -this._anchorPoint.y * d.height;
        qa.Mat4.copy(F, this._matrix);
        qa.Mat4.transform(F, F, B);
        return n.fromMat4(a, F);
      },
      getNodeToParentTransformAR: function (a) {
        if (!a) {
          a = n.identity();
        }
        this._updateLocalMatrix();
        return n.fromMat4(a, this._matrix);
      },
      getNodeToWorldTransform: function (a) {
        if (!a) {
          a = n.identity();
        }
        this._updateWorldMatrix();
        var d = this._contentSize;
        B.x = -this._anchorPoint.x * d.width;
        B.y = -this._anchorPoint.y * d.height;
        qa.Mat4.copy(F, this._worldMatrix);
        qa.Mat4.transform(F, F, B);
        return n.fromMat4(a, F);
      },
      getNodeToWorldTransformAR: function (a) {
        if (!a) {
          a = n.identity();
        }
        this._updateWorldMatrix();
        return n.fromMat4(a, this._worldMatrix);
      },
      getParentToNodeTransform: function (a) {
        if (!a) {
          a = n.identity();
        }
        this._updateLocalMatrix();
        qa.Mat4.invert(F, this._matrix);
        return n.fromMat4(a, F);
      },
      getWorldToNodeTransform: function (a) {
        if (!a) {
          a = n.identity();
        }
        this._updateWorldMatrix();
        qa.Mat4.invert(F, this._worldMatrix);
        return n.fromMat4(a, F);
      },
      convertTouchToNodeSpace: function (b) {
        return this.convertToNodeSpace(b.getLocation());
      },
      convertTouchToNodeSpaceAR: function (b) {
        return this.convertToNodeSpaceAR(b.getLocation());
      },
      getBoundingBox: function () {
        this._updateLocalMatrix();
        var d = this._contentSize.width;
        var a = this._contentSize.height;
        var b = cc.rect(-this._anchorPoint.x * d, -this._anchorPoint.y * a, d, a);
        return b.transformMat4(b, this._matrix);
      },
      getBoundingBoxToWorld: function () {
        if (this._parent) {
          this._parent._updateWorldMatrix();
          return this._getBoundingBoxTo();
        } else {
          return this.getBoundingBox();
        }
      },
      _getBoundingBoxTo: function () {
        var a = this._contentSize.width;
        var b = this._contentSize.height;
        var c = cc.rect(-this._anchorPoint.x * a, -this._anchorPoint.y * b, a, b);
        this._calculWorldMatrix();
        c.transformMat4(c, this._worldMatrix);
        if (!this._children) {
          return c;
        }
        for (var d = this._children, e = 0; e < d.length; e++) {
          var i = d[e];
          if (i && i.active) {
            var j = i._getBoundingBoxTo();
            if (j) {
              c.union(c, j);
            }
          }
        }
        return c;
      },
      _updateOrderOfArrival: function () {
        var b = this._parent ? ++this._parent._childArrivalOrder : 0;
        this._localZOrder = this._localZOrder & 4294901760 | b;
        this.emit(z.SIBLING_ORDER_CHANGED);
      },
      setSelfGroupIndex: function (b) {
        this._groupIndex = b || 0;
        this._cullingMask = 1 << b;
      },
      addChild: function (d, a, b) {
        d.parent = this;
        if (a !== undefined) {
          d.zIndex = a;
        }
        if (b !== undefined) {
          d.name = b;
        }
      },
      cleanup: function () {
        if (f) {
          cc.director.getActionManager().removeAllActionsFromTarget(this);
        }
        ca.removeListeners(this);
        var d;
        var e;
        var g = this._children.length;
        for (d = 0; d < g; ++d) {
          if (e = this._children[d]) {
            e.cleanup();
          }
        }
      },
      sortAllChildren: function () {
        if (this._reorderChildDirty) {
          this._reorderChildDirty = false;
          var e = this._children;
          this._childArrivalOrder = 1;
          for (var b = 0, j = e.length; b < j; b++) {
            e[b]._updateOrderOfArrival();
          }
          ca._setDirtyForNode(this);
          if (e.length > 1) {
            for (var d, k, l = 1, m = e.length; l < m; l++) {
              d = e[l];
              for (var i = l; i > 0 && (k = e[i - 1])._localZOrder > d._localZOrder; i--) {
                e[i] = k;
              }
              e[i] = d;
            }
            this.emit(z.CHILD_REORDER, this);
          }
          cc.director.__fastOff(cc.Director.EVENT_AFTER_UPDATE, this.sortAllChildren, this);
        }
      },
      _delaySort: function () {
        if (!this._reorderChildDirty) {
          this._reorderChildDirty = true;
          cc.director.__fastOn(cc.Director.EVENT_AFTER_UPDATE, this.sortAllChildren, this);
        }
      },
      _restoreProperties: false,
      onRestore: false
    };
    var ma = cc.Class(la);
    var na = ma.prototype;
    ra.getset(na, "position", na.getPosition, na.setPosition, false, true);
    cc.Node = aa.exports = ma;
  }, {
    "./event-manager": 133,
    "./event/event": 135,
    "./event/event-target": 134,
    "./platform/CCMacro": 167,
    "./platform/js": 183,
    "./renderer/render-flow": 194,
    "./utils/affine-transform": 227,
    "./utils/base-node": 228,
    "./utils/prefab-helper": 239,
    "./utils/trans-pool": 245,
    "./value-types": 251,
    "./value-types/utils": 258
  }],
  27: [function (a, b) {
    "use strict";

    var c = a("./CCNode");
    var d = a("./renderer/render-flow");
    cc.Object.Flags.HideInHierarchy;
    var e = c._LocalDirtyFlag;
    var f = cc.Class({
      name: "cc.PrivateNode",
      extends: c,
      properties: {
        x: {
          get: function () {
            return this._originPos.x;
          },
          set: function (c) {
            var a = this._originPos;
            if (c !== a.x) {
              a.x = c;
              this._posDirty(true);
            }
          },
          override: true
        },
        y: {
          get: function () {
            return this._originPos.y;
          },
          set: function (c) {
            var a = this._originPos;
            if (c !== a.y) {
              a.y = c;
              this._posDirty(true);
            }
          },
          override: true
        },
        zIndex: {
          get: function () {
            return cc.macro.MIN_ZINDEX;
          },
          set: function () {},
          override: true
        },
        showInEditor: {
          default: false,
          editorOnly: true,
          override: true
        }
      },
      ctor: function () {
        this._localZOrder = cc.macro.MIN_ZINDEX << 16;
        this._originPos = cc.v2();
      },
      _posDirty: function (b) {
        this.setLocalDirty(e.POSITION);
        this._renderFlag |= d.FLAG_TRANSFORM;
        if (b === true && this._eventMask & 1) {
          this.emit(c.EventType.POSITION_CHANGED);
        }
      },
      _updateLocalMatrix: function () {
        if (this._localMatDirty) {
          var b = this.parent;
          if (b) {
            this._trs[0] = this._originPos.x - (b._anchorPoint.x - 0.5) * b._contentSize.width;
            this._trs[1] = this._originPos.y - (b._anchorPoint.y - 0.5) * b._contentSize.height;
          }
          this._super();
        }
      },
      getPosition: function () {
        return new cc.Vec2(this._originPos);
      },
      setPosition: function (d, e) {
        if (e === undefined) {
          e = (d = d.x).y;
        }
        var f = this._originPos;
        if (!(f.x === d && f.y === e)) {
          f.x = d;
          f.y = e;
          this._posDirty(true);
        }
      },
      setParent: function (d) {
        var a = this._parent;
        this._super(d);
        if (a !== d) {
          if (a) {
            a.off(c.EventType.ANCHOR_CHANGED, this._posDirty, this);
          }
          if (d) {
            d.on(c.EventType.ANCHOR_CHANGED, this._posDirty, this);
          }
        }
      },
      _updateOrderOfArrival: function () {}
    });
    var g = f.prototype;
    cc.js.getset(g, "parent", g.getParent, g.setParent);
    cc.js.getset(g, "position", g.getPosition, g.setPosition);
    cc.PrivateNode = b.exports = f;
  }, {
    "./CCNode": 26,
    "./renderer/render-flow": 194
  }],
  28: [function (c, a) {
    "use strict";

    cc.Scene = cc.Class({
      name: "cc.Scene",
      extends: c("./CCNode"),
      properties: {
        _is3DNode: {
          default: true,
          override: true
        },
        autoReleaseAssets: false
      },
      ctor: function () {
        this._anchorPoint.x = 0;
        this._anchorPoint.y = 0;
        this._activeInHierarchy = false;
        this._inited = !cc.game._isCloning;
        this.dependAssets = null;
      },
      destroy: function () {
        if (cc.Object.prototype.destroy.call(this)) {
          for (var c = this._children, a = 0; a < c.length; ++a) {
            c[a].active = false;
          }
        }
        this._active = false;
        this._activeInHierarchy = false;
      },
      _onHierarchyChanged: function () {},
      _instantiate: null,
      _load: function () {
        if (!this._inited) {
          this._onBatchCreated(false);
          this._inited = true;
        }
      },
      _activate: function (b) {
        b = b !== false;
        cc.director._nodeActivator.activateNode(this, b);
      }
    });
    a.exports = cc.Scene;
  }, {
    "./CCNode": 26
  }],
  29: [function (n, b) {
    "use strict";

    var g = n("./platform/js");
    var e = new (n("./platform/id-generater"))("Scheduler");
    function q(e, a, b, c) {
      this.target = e;
      this.priority = a;
      this.paused = b;
      this.markedForDeletion = c;
    }
    var i = [];
    q.get = function (a, b, c, d) {
      var e = i.pop();
      if (e) {
        e.target = a;
        e.priority = b;
        e.paused = c;
        e.markedForDeletion = d;
      } else {
        e = new q(a, b, c, d);
      }
      return e;
    };
    q.put = function (b) {
      if (i.length < 20) {
        b.target = null;
        i.push(b);
      }
    };
    function j(e, a, b, c) {
      this.list = e;
      this.entry = a;
      this.target = b;
      this.callback = c;
    }
    var k = [];
    j.get = function (a, b, c, d) {
      var e = k.pop();
      if (e) {
        e.list = a;
        e.entry = b;
        e.target = c;
        e.callback = d;
      } else {
        e = new j(a, b, c, d);
      }
      return e;
    };
    j.put = function (a) {
      if (k.length < 20) {
        a.list = a.entry = a.target = a.callback = null;
        k.push(a);
      }
    };
    function m(e, a, b, c) {
      this.timers = e;
      this.target = a;
      this.timerIndex = b;
      this.paused = c;
    }
    var o = [];
    function r() {
      this._lock = false;
      this._scheduler = null;
      this._elapsed = -1;
      this._runForever = false;
      this._useDelay = false;
      this._timesExecuted = 0;
      this._repeat = 0;
      this._delay = 0;
      this._interval = 0;
      this._target = null;
      this._callback = null;
    }
    m.get = function (c, a, b, d) {
      var e = o.pop();
      if (e) {
        e.timers = c;
        e.target = a;
        e.timerIndex = b;
        e.paused = d;
      } else {
        e = new m(c, a, b, d);
      }
      return e;
    };
    m.put = function (b) {
      if (o.length < 20) {
        b.timers = b.target = null;
        o.push(b);
      }
    };
    var a = r.prototype;
    a.initWithCallback = function (g, a, b, c, d, e) {
      this._lock = false;
      this._scheduler = g;
      this._target = b;
      this._callback = a;
      this._elapsed = -1;
      this._interval = c;
      this._delay = e;
      this._useDelay = this._delay > 0;
      this._repeat = d;
      this._runForever = this._repeat === cc.macro.REPEAT_FOREVER;
      return true;
    };
    a.getInterval = function () {
      return this._interval;
    };
    a.setInterval = function (b) {
      this._interval = b;
    };
    a.update = function (b) {
      if (this._elapsed === -1) {
        this._elapsed = 0;
        this._timesExecuted = 0;
      } else {
        this._elapsed += b;
        if (this._runForever && !this._useDelay) {
          if (this._elapsed >= this._interval) {
            this.trigger();
            this._elapsed = 0;
          }
        } else {
          if (this._useDelay) {
            if (this._elapsed >= this._delay) {
              this.trigger();
              this._elapsed -= this._delay;
              this._timesExecuted += 1;
              this._useDelay = false;
            }
          } else if (this._elapsed >= this._interval) {
            this.trigger();
            this._elapsed = 0;
            this._timesExecuted += 1;
          }
          if (this._callback && !this._runForever && this._timesExecuted > this._repeat) {
            this.cancel();
          }
        }
      }
    };
    a.getCallback = function () {
      return this._callback;
    };
    a.trigger = function () {
      if (this._target && this._callback) {
        this._lock = true;
        this._callback.call(this._target, this._elapsed);
        this._lock = false;
      }
    };
    a.cancel = function () {
      this._scheduler.unschedule(this._callback, this._target);
    };
    var c = [];
    function h() {}
    function p(c) {
      var a = c._id;
      if (!a) {
        if (c.__instanceId) {
          a = c._id = c.__instanceId;
        }
      }
      return a;
    }
    r.get = function () {
      return c.pop() || new r();
    };
    r.put = function (b) {
      if (c.length < 20 && !b._lock) {
        b._scheduler = b._target = b._callback = null;
        c.push(b);
      }
    };
    cc.Scheduler = function () {
      this._timeScale = 1;
      this._updatesNegList = [];
      this._updates0List = [];
      this._updatesPosList = [];
      this._hashForUpdates = g.createMap(true);
      this._hashForTimers = g.createMap(true);
      this._currentTarget = null;
      this._currentTargetSalvaged = false;
      this._updateHashLocked = false;
      this._arrayForTimers = [];
    };
    cc.Scheduler.prototype = {
      constructor: cc.Scheduler,
      _removeHashElement: function (e) {
        delete this._hashForTimers[e.target._id];
        for (var a = this._arrayForTimers, b = 0, f = a.length; b < f; b++) {
          if (a[b] === e) {
            a.splice(b, 1);
            break;
          }
        }
        m.put(e);
      },
      _removeUpdateFromHash: function (c) {
        var a = c.target._id;
        var b = this._hashForUpdates[a];
        if (b) {
          for (var d = b.list, e = b.entry, f = 0, i = d.length; f < i; f++) {
            if (d[f] === e) {
              d.splice(f, 1);
              break;
            }
          }
          delete this._hashForUpdates[a];
          q.put(e);
          j.put(b);
        }
      },
      _priorityIn: function (f, a, b) {
        for (var c = 0, g = f.length; c < g; c++) {
          if (b < f[c].priority) {
            f.splice(c, 0, a);
            return;
          }
        }
        f.push(a);
      },
      _appendIn: function (c, a) {
        c.push(a);
      },
      enableForTarget: function (b) {
        if (!(b._id || b.__instanceId)) {
          b._id = e.getNewId();
        }
      },
      setTimeScale: function (b) {
        this._timeScale = b;
      },
      getTimeScale: function () {
        return this._timeScale;
      },
      update: function (a) {
        var e;
        var i;
        var k;
        var l;
        this._updateHashLocked = true;
        if (this._timeScale !== 1) {
          a *= this._timeScale;
        }
        i = this._updatesNegList;
        for (; i != null;) {
          e = 0;
          k = i.length;
          for (; e < k; e++) {
            if (!((l = i[e]).paused || l.markedForDeletion)) {
              l.target.update(a);
            }
          }
          i = i === this._updatesNegList ? this._updates0List : i === this._updates0List ? this._updatesPosList : null;
        }
        var m;
        var n = this._arrayForTimers;
        for (e = 0; e < n.length; e++) {
          m = n[e];
          this._currentTarget = m;
          this._currentTargetSalvaged = false;
          if (!m.paused) {
            for (m.timerIndex = 0; m.timerIndex < m.timers.length; ++m.timerIndex) {
              m.timers[m.timerIndex].update(a);
            }
          }
          if (this._currentTargetSalvaged && this._currentTarget.timers.length === 0) {
            this._removeHashElement(this._currentTarget);
            --e;
          }
        }
        for (i = this._updatesNegList; i != null;) {
          for (e = 0; e < i.length;) {
            if ((l = i[e]).markedForDeletion) {
              this._removeUpdateFromHash(l);
            } else {
              e++;
            }
          }
          i = i === this._updatesNegList ? this._updates0List : i === this._updates0List ? this._updatesPosList : null;
        }
        this._updateHashLocked = false;
        this._currentTarget = null;
      },
      schedule: function (d, e, f, g, l, n) {
        if (typeof d != "function") {
          var o = d;
          d = e;
          e = o;
        }
        if (!(arguments.length !== 4 && arguments.length !== 5)) {
          n = !!g;
          g = cc.macro.REPEAT_FOREVER;
          l = 0;
        }
        var k;
        var s;
        var t = p(e);
        var q = this._hashForTimers[t];
        if (q) {
          q.paused;
        } else {
          q = m.get(null, e, 0, n);
          this._arrayForTimers.push(q);
          this._hashForTimers[t] = q;
        }
        if (q.timers == null) {
          q.timers = [];
        } else {
          for (s = 0; s < q.timers.length; ++s) {
            if ((k = q.timers[s]) && d === k._callback) {
              k._interval = f;
              return;
            }
          }
        }
        (k = r.get()).initWithCallback(this, d, e, f, g, l);
        q.timers.push(k);
        if (this._currentTarget === q && this._currentTargetSalvaged) {
          this._currentTargetSalvaged = false;
        }
      },
      scheduleUpdate: function (c, a, b) {
        var d = p(c);
        var e = this._hashForUpdates[d];
        if (e && e.entry) {
          if (e.entry.priority === a) {
            e.entry.markedForDeletion = false;
            e.entry.paused = b;
            return;
          }
          if (this._updateHashLocked) {
            e.entry.markedForDeletion = false;
            e.entry.paused = b;
            return;
          }
          this.unscheduleUpdate(c);
        }
        var f;
        var g = q.get(c, a, b, false);
        if (a === 0) {
          f = this._updates0List;
          this._appendIn(f, g);
        } else {
          f = a < 0 ? this._updatesNegList : this._updatesPosList;
          this._priorityIn(f, g, a);
        }
        this._hashForUpdates[d] = j.get(f, g, c, null);
      },
      unschedule: function (a, c) {
        if (arguments.length === 1 && typeof a != "function") {
          c = a;
          a = h;
        }
        if (c && a) {
          var d = p(c);
          var e = this;
          var f = e._hashForTimers[d];
          if (f) {
            for (var i = f.timers, j = 0, k = i.length; j < k; j++) {
              var m = i[j];
              if ((a === h || a === m._callback) && (r.put(m), a !== h)) {
                i.splice(j, 1);
                if (f.timerIndex >= j) {
                  f.timerIndex--;
                }
                break;
              }
            }
            if (a === h) {
              i.length = 0;
            }
            if (i.length === 0) {
              if (e._currentTarget === f) {
                e._currentTargetSalvaged = true;
              } else {
                e._removeHashElement(f);
              }
            }
          }
        }
      },
      unscheduleUpdate: function (d) {
        if (d) {
          var a = p(d);
          var b = this._hashForUpdates[a];
          if (b) {
            if (this._updateHashLocked) {
              b.entry.markedForDeletion = true;
            } else {
              this._removeUpdateFromHash(b.entry);
            }
          }
        }
      },
      unscheduleAllForTarget: function (b) {
        if (b) {
          this.unschedule(b);
          this.unscheduleUpdate(b);
        }
      },
      unscheduleAll: function () {
        var d;
        var e;
        var f = this._arrayForTimers;
        for (d = f.length - 1; d >= 0; d--) {
          e = f[d];
          this.unschedule(e.target);
        }
        this.unscheduleAllWithMinPriority(cc.Scheduler.PRIORITY_SYSTEM);
      },
      unscheduleAllWithMinPriority: function (e) {
        var a;
        var g;
        var h;
        var i = 0;
        for (g = e < 0 ? this._updatesNegList : e === 0 ? this._updates0List : this._updatesPosList; g != null;) {
          for (h = 0; h < g.length;) {
            i = g.length;
            if ((a = g[h]) && a.priority >= e) {
              this.unscheduleUpdate(a.target);
            }
            if (i === g.length) {
              h++;
            }
          }
          g = g === this._updatesNegList ? this._updates0List : g === this._updates0List ? this._updatesPosList : null;
        }
      },
      isScheduled: function (d, a) {
        var b = p(a);
        var c = this._hashForTimers[b];
        if (!c) {
          return false;
        }
        if (c.timers == null) {
          return false;
        }
        for (var e = c.timers, f = 0; f < e.length; ++f) {
          if (d === e[f]._callback) {
            return true;
          }
        }
        return false;
      },
      pauseAllTargets: function () {
        this._setPausedForAllTimers(true);
        this._setPausedForAllTargetsWithMinPriority(cc.Scheduler.PRIORITY_SYSTEM, true);
      },
      pauseAllTargetsWithMinPriority: function (b) {
        this._setPausedForAllTargetsWithMinPriority(b, true);
      },
      resumeAllTargets: function () {
        this._setPausedForAllTimers(false);
        this._setPausedForAllTargetsWithMinPriority(cc.Scheduler.PRIORITY_SYSTEM, false);
      },
      resumeAllTargetsWithMinPriority: function (b) {
        this._setPausedForAllTargetsWithMinPriority(b, false);
      },
      _setPausedForAllTimers: function (e) {
        var a;
        var g;
        var h;
        var i = this._arrayForTimers;
        g = 0;
        h = i.length;
        for (; g < h; g++) {
          if (a = i[g]) {
            a.paused = e;
          }
        }
      },
      _setPausedForAllTargetsWithMinPriority: function (f, a) {
        var b;
        var g;
        var h;
        for (h = f < 0 ? this._updatesNegList : f === 0 ? this._updates0List : this._updatesPosList; h != null;) {
          for (g = 0; g < h.length; g++) {
            if ((b = h[g]) && b.priority >= f) {
              b.paused = a;
            }
          }
          h = h === this._updatesNegList ? this._updates0List : h === this._updates0List ? this._updatesPosList : null;
        }
      },
      pauseTarget: function (d) {
        var a = p(d);
        var b = this._hashForTimers[a];
        if (b) {
          b.paused = true;
        }
        var c = this._hashForUpdates[a];
        if (c) {
          c.entry.paused = true;
        }
      },
      resumeTarget: function (d) {
        var a = p(d);
        var b = this._hashForTimers[a];
        if (b) {
          b.paused = false;
        }
        var c = this._hashForUpdates[a];
        if (c) {
          c.entry.paused = false;
        }
      },
      isTargetPaused: function (d) {
        var a = p(d);
        var b = this._hashForTimers[a];
        if (b) {
          return b.paused;
        }
        var c = this._hashForUpdates[a];
        return !!c && c.entry.paused;
      }
    };
    cc.Scheduler.PRIORITY_SYSTEM = 1 << 31;
    cc.Scheduler.PRIORITY_NON_SYSTEM = cc.Scheduler.PRIORITY_SYSTEM + 1;
    b.exports = cc.Scheduler;
  }, {
    "./platform/id-generater": 179,
    "./platform/js": 183
  }],
  30: [function (K, j) {
    "use strict";

    var k = K("./preprocess");
    var e = K("./fetch");
    var i = K("./cache");
    var n = K("./helper");
    var q = K("./releaseManager");
    var r = K("./depend-util");
    var a = K("./load");
    var o = K("./pipeline");
    var L = K("./task");
    var c = K("./request-item");
    var h = K("./downloader");
    var l = K("./parser");
    var f = K("./pack-manager");
    var d = K("./bundle");
    var s = K("./builtins");
    var p = K("./factory");
    var t = K("./urlTransformer");
    var g = t.parse;
    var m = t.combine;
    var u = K("./utilities");
    var v = u.parseParameters;
    var y = u.asyncify;
    var z = u.parseLoadResArgs;
    var x = K("./shared");
    var A = x.assets;
    var b = x.files;
    var B = x.parsed;
    var C = x.pipeline;
    var E = x.transformPipeline;
    var w = x.fetchPipeline;
    var F = x.RequestType;
    var G = x.bundles;
    var H = x.BuiltinBundleName;
    function I() {
      this._preprocessPipe = k;
      this._fetchPipe = e;
      this._loadPipe = a;
      this.pipeline = C.append(k).append(a);
      this.fetchPipeline = w.append(k).append(e);
      this.transformPipeline = E.append(g).append(m);
      this.bundles = G;
      this.assets = A;
      this._files = b;
      this._parsed = B;
      this.generalImportBase = "";
      this.generalNativeBase = "";
      this.dependUtil = r;
      this._releaseManager = q;
      this.cacheAsset = true;
      this.force = false;
      this.utils = n;
      this.downloader = h;
      this.parser = l;
      this.builtins = s;
      this.packManager = f;
      this.factory = p;
      this.cacheManager = null;
      this.presets = {
        default: {
          priority: 0
        },
        preload: {
          maxConcurrency: 2,
          maxRequestsPerFrame: 2,
          priority: -1
        },
        scene: {
          maxConcurrency: 8,
          maxRequestsPerFrame: 8,
          priority: 1
        },
        bundle: {
          maxConcurrency: 8,
          maxRequestsPerFrame: 8,
          priority: 2
        },
        script: {
          maxConcurrency: 1024,
          maxRequestsPerFrame: 1024,
          priority: 2
        }
      };
      this._parseLoadResArgs = z;
      this._onProgress = null;
    }
    I.Pipeline = o;
    I.Task = L;
    I.Cache = i;
    I.RequestItem = c;
    I.Bundle = d;
    I.BuiltinBundleName = H;
    I.prototype = {
      constructor: I,
      get main() {
        return G.get(H.MAIN);
      },
      get resources() {
        return G.get(H.RESOURCES);
      },
      get internal() {
        return G.get(H.INTERNAL);
      },
      init: function (b) {
        b = b || Object.create(null);
        this._files.clear();
        this._parsed.clear();
        this._releaseManager.init();
        this.assets.clear();
        this.bundles.clear();
        this.packManager.init();
        this.downloader.init(b.bundleVers, b.server);
        this.parser.init();
        this.dependUtil.init();
        this.generalImportBase = b.importBase;
        this.generalNativeBase = b.nativeBase;
      },
      getBundle: function (b) {
        return G.get(b);
      },
      removeBundle: function (b) {
        b._destroy();
        G.remove(b.name);
      },
      loadAny: function (e, h, i, j) {
        var k = v(h, i, j);
        h = k.options;
        i = k.onProgress;
        j = k.onComplete;
        h.preset = h.preset || "default";
        i = i || this._onProgress;
        e = Array.isArray(e) ? e.concat() : e;
        var f = new L({
          input: e,
          onProgress: i,
          onComplete: y(j),
          options: h
        });
        C.async(f);
      },
      preloadAny: function (e, h, i, j) {
        var k = v(h, i, j);
        h = k.options;
        i = k.onProgress;
        j = k.onComplete;
        h.preset = h.preset || "preload";
        i = i || this._onProgress;
        e = Array.isArray(e) ? e.concat() : e;
        var f = new L({
          input: e,
          onProgress: i,
          onComplete: y(j),
          options: h
        });
        w.async(f);
      },
      postLoadNative: function (e, a, b) {
        if (!(e instanceof cc.Asset)) {
          throw Error("input is not asset");
        }
        var i = v(a, undefined, b);
        a = i.options;
        b = i.onComplete;
        if (!e._native || e._nativeAsset) {
          return y(b)(null);
        }
        var f = r.getNativeDep(e._uuid);
        if (f) {
          if (!G.has(f.bundle)) {
            var g = G.find(function (b) {
              return b.getAssetInfo(e._uuid);
            });
            if (g) {
              f.bundle = g.name;
            }
          }
          this.loadAny(f, a, function (d, a) {
            if (!d) {
              if (e.isValid && !e._nativeAsset) {
                e._nativeAsset = a;
              }
            }
            if (b) {
              b(d);
            }
          });
        }
      },
      loadRemote: function (f, a, e) {
        var g = v(a, undefined, e);
        a = g.options;
        e = g.onComplete;
        if (this.assets.has(f)) {
          return y(e)(null, this.assets.get(f));
        }
        a.__isNative__ = true;
        a.preset = a.preset || "remote";
        this.loadAny({
          url: f
        }, a, null, function (b, c) {
          if (b) {
            if (e) {
              e(b, null);
            }
          } else {
            p.create(f, c, a.ext || cc.path.extname(f), a, function (c, a) {
              if (e) {
                e(c, a);
              }
            });
          }
        });
      },
      loadScript: function (e, a, f) {
        var g = v(a, undefined, f);
        a = g.options;
        f = g.onComplete;
        a.__requestType__ = F.URL;
        a.preset = a.preset || "script";
        this.loadAny(e, a, f);
      },
      loadBundle: function (e, a, g) {
        var h = v(a, undefined, g);
        a = h.options;
        g = h.onComplete;
        var d = cc.path.basename(e);
        if (this.bundles.has(d)) {
          return y(g)(null, this.getBundle(d));
        }
        a.preset = a.preset || "bundle";
        a.ext = "bundle";
        this.loadRemote(e, a, g);
      },
      releaseAsset: function (b) {
        q.tryRelease(b, true);
      },
      releaseUnusedAssets: function () {
        A.forEach(function (b) {
          q.tryRelease(b);
        });
      },
      releaseAll: function () {
        A.forEach(function (b) {
          q.tryRelease(b, true);
        });
      },
      _transform: function (a, b) {
        var c = L.create({
          input: a,
          options: b
        });
        var d = [];
        try {
          for (var e = E.sync(c), f = 0, g = e.length; f < g; f++) {
            var l = e[f];
            var m = l.url;
            l.recycle();
            d.push(m);
          }
        } catch (b) {
          f = 0;
          g = c.output.length;
          for (; f < g; f++) {
            c.output[f].recycle();
          }
        }
        c.recycle();
        if (d.length > 1) {
          return d;
        } else {
          return d[0];
        }
      }
    };
    cc.AssetManager = I;
    cc.assetManager = new I();
    Object.defineProperty(cc, "resources", {
      get: function () {
        return G.get(H.RESOURCES);
      }
    });
    j.exports = cc.assetManager;
  }, {
    "./builtins": 31,
    "./bundle": 32,
    "./cache": 33,
    "./depend-util": 35,
    "./downloader": 40,
    "./factory": 41,
    "./fetch": 42,
    "./helper": 44,
    "./load": 46,
    "./pack-manager": 47,
    "./parser": 48,
    "./pipeline": 49,
    "./preprocess": 50,
    "./releaseManager": 51,
    "./request-item": 52,
    "./shared": 53,
    "./task": 54,
    "./urlTransformer": 55,
    "./utilities": 56
  }],
  31: [function (g, a) {
    "use strict";

    var b = g("./cache");
    var c = g("./releaseManager");
    var d = g("./shared").BuiltinBundleName;
    var f = {
      _assets: new b({
        material: new b(),
        effect: new b()
      }),
      _loadBuiltins: function (e, g) {
        var a = e + "s";
        var b = this._assets.get(e);
        return cc.assetManager.internal.loadDir(a, null, null, function (d, a) {
          if (d) {
            g(d);
          } else {
            for (var c = 0; c < a.length; c++) {
              var h = a[c];
              b.add(h.name, h.addRef());
            }
            g();
          }
        });
      },
      init: function (e) {
        var a = this;
        this.clear();
        if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS || !cc.assetManager.bundles.has(d.INTERNAL)) {
          return e && e();
        }
        this._loadBuiltins("effect", function (b) {
          if (b) {
            if (e) {
              e(b);
            }
          } else {
            a._loadBuiltins("material", e);
          }
        });
      },
      getBuiltin: function (c, a) {
        if (arguments.length === 0) {
          return this._assets;
        } else if (arguments.length === 1) {
          return this._assets.get(c);
        } else {
          return this._assets.get(c).get(a);
        }
      },
      clear: function () {
        this._assets.forEach(function (b) {
          b.forEach(function (b) {
            c.tryRelease(b, true);
          });
          b.clear();
        });
      }
    };
    a.exports = f;
  }, {
    "./cache": 33,
    "./releaseManager": 51,
    "./shared": 53
  }],
  32: [function (l, b) {
    "use strict";

    var d = l("./config");
    var e = l("./releaseManager");
    var f = l("./utilities");
    var g = f.parseParameters;
    var j = f.parseLoadResArgs;
    var k = l("./shared");
    var n = k.RequestType;
    var m = k.assets;
    var c = k.bundles;
    function a() {
      this._config = new d();
    }
    a.prototype = {
      constructor: a,
      get name() {
        return this._config.name;
      },
      get deps() {
        return this._config.deps;
      },
      get base() {
        return this._config.base;
      },
      getInfoWithPath: function (c, a) {
        return this._config.getInfoWithPath(c, a);
      },
      getDirWithPath: function (d, a, b) {
        return this._config.getDirWithPath(d, a, b);
      },
      getAssetInfo: function (b) {
        return this._config.getAssetInfo(b);
      },
      getSceneInfo: function (b) {
        return this._config.getSceneInfo(b);
      },
      init: function (b) {
        this._config.init(b);
        c.add(b.name, this);
      },
      load: function (e, a, g, h) {
        var i = j(a, g, h);
        a = i.type;
        g = i.onProgress;
        h = i.onComplete;
        cc.assetManager.loadAny(e, {
          __requestType__: n.PATH,
          type: a,
          bundle: this.name,
          __outputAsArray__: Array.isArray(e)
        }, g, h);
      },
      preload: function (e, a, g, h) {
        var i = j(a, g, h);
        a = i.type;
        g = i.onProgress;
        h = i.onComplete;
        cc.assetManager.preloadAny(e, {
          __requestType__: n.PATH,
          type: a,
          bundle: this.name
        }, g, h);
      },
      loadDir: function (e, a, g, h) {
        var i = j(a, g, h);
        a = i.type;
        g = i.onProgress;
        h = i.onComplete;
        cc.assetManager.loadAny(e, {
          __requestType__: n.DIR,
          type: a,
          bundle: this.name,
          __outputAsArray__: true
        }, g, h);
      },
      preloadDir: function (e, a, g, h) {
        var i = j(a, g, h);
        a = i.type;
        g = i.onProgress;
        h = i.onComplete;
        cc.assetManager.preloadAny(e, {
          __requestType__: n.DIR,
          type: a,
          bundle: this.name
        }, g, h);
      },
      loadScene: function (e, a, h, i) {
        var j = g(a, h, i);
        a = j.options;
        h = j.onProgress;
        i = j.onComplete;
        a.preset = a.preset || "scene";
        a.bundle = this.name;
        cc.assetManager.loadAny({
          scene: e
        }, a, h, function (d, a) {
          if (d) {
            if (i) {
              i(d);
            }
          } else if (a instanceof cc.SceneAsset) {
            var b = a.scene;
            b._id = a._uuid;
            b._name = a._name;
            if (i) {
              i(null, a);
            }
          } else if (i) {
            i(Error("The asset " + a._uuid + " is not a scene"));
          }
        });
      },
      preloadScene: function (e, a, h, i) {
        var j = g(a, h, i);
        a = j.options;
        h = j.onProgress;
        i = j.onComplete;
        a.bundle = this.name;
        cc.assetManager.preloadAny({
          scene: e
        }, a, h, function (b) {
          if (i) {
            i(b);
          }
        });
      },
      get: function (c, a) {
        var b = this.getInfoWithPath(c, a);
        return m.get(b && b.uuid);
      },
      release: function (c, a) {
        e.tryRelease(this.get(c, a), true);
      },
      releaseUnusedAssets: function () {
        var d = this;
        m.forEach(function (a) {
          var b = d.getAssetInfo(a._uuid);
          if (b && !b.redirect) {
            e.tryRelease(a);
          }
        });
      },
      releaseAll: function () {
        var d = this;
        m.forEach(function (a) {
          var b = d.getAssetInfo(a._uuid);
          if (b && !b.redirect) {
            e.tryRelease(a, true);
          }
        });
      },
      _destroy: function () {
        this._config.destroy();
      }
    };
    b.exports = a;
  }, {
    "./config": 34,
    "./releaseManager": 51,
    "./shared": 53,
    "./utilities": 56
  }],
  33: [function (e, a) {
    "use strict";

    var b = e("../platform/js");
    function c(c) {
      if (c) {
        this._map = c;
        this._count = Object.keys(c).length;
      } else {
        this._map = b.createMap(true);
        this._count = 0;
      }
    }
    c.prototype = {
      constructor: c,
      add: function (c, a) {
        if (!(c in this._map)) {
          this._count++;
        }
        return this._map[c] = a;
      },
      get: function (b) {
        return this._map[b];
      },
      has: function (b) {
        return b in this._map;
      },
      remove: function (c) {
        var a = this._map[c];
        if (c in this._map) {
          delete this._map[c];
          this._count--;
        }
        return a;
      },
      clear: function () {
        if (this._count !== 0) {
          this._map = b.createMap(true);
          this._count = 0;
        }
      },
      forEach: function (c) {
        for (var a in this._map) {
          c(this._map[a], a);
        }
      },
      find: function (c) {
        for (var a in this._map) {
          if (c(this._map[a], a)) {
            return this._map[a];
          }
        }
        return null;
      },
      get count() {
        return this._count;
      },
      destroy: function () {
        this._map = null;
      }
    };
    a.exports = c;
  }, {
    "../platform/js": 183
  }],
  34: [function (a, b) {
    "use strict";

    var l = a("../platform/js");
    var c = a("./cache");
    var d = a("./helper").normalize;
    var e = a("./utilities").processOptions;
    function f() {
      this.name = "";
      this.base = "";
      this.importBase = "";
      this.nativeBase = "";
      this.deps = null;
      this.assetInfos = new c();
      this.scenes = new c();
      this.paths = new c();
    }
    f.prototype = {
      constructor: f,
      init: function (b) {
        e(b);
        this.importBase = b.importBase || "";
        this.nativeBase = b.nativeBase || "";
        this.base = b.base || "";
        this.name = b.name || "";
        this.deps = b.deps || [];
        this._initUuid(b.uuids);
        this._initPath(b.paths);
        this._initScene(b.scenes);
        this._initPackage(b.packs);
        this._initVersion(b.versions);
        this._initRedirect(b.redirect);
      },
      _initUuid: function (e) {
        if (e) {
          this.assetInfos.clear();
          for (var a = 0, f = e.length; a < f; a++) {
            var c = e[a];
            this.assetInfos.add(c, {
              uuid: c
            });
          }
        }
      },
      _initPath: function (a) {
        if (a) {
          var b = this.paths;
          b.clear();
          for (var c in a) {
            var d = a[c];
            var f = d[0];
            var m = d[1];
            var n = d.length === 3;
            var o = this.assetInfos.get(c);
            o.path = f;
            o.ctor = l._getClassById(m);
            if (b.has(f)) {
              if (n) {
                b.get(f).push(o);
              } else {
                b.get(f).unshift(o);
              }
            } else {
              b.add(f, [o]);
            }
          }
        }
      },
      _initScene: function (g) {
        if (g) {
          var a = this.scenes;
          a.clear();
          var b = this.assetInfos;
          for (var c in g) {
            var h = g[c];
            var i = b.get(h);
            i.url = c;
            a.add(c, i);
          }
        }
      },
      _initPackage: function (a) {
        if (a) {
          var b = this.assetInfos;
          for (var c in a) {
            var d = a[c];
            var i = {
              uuid: c,
              packs: d,
              ext: ".json"
            };
            b.add(c, i);
            for (var l = 0, n = d.length; l < n; l++) {
              var o = d[l];
              var q = b.get(o);
              var r = q.packs;
              if (r) {
                if (n === 1) {
                  r.unshift(i);
                } else {
                  r.push(i);
                }
              } else {
                q.packs = [i];
              }
            }
          }
        }
      },
      _initVersion: function (g) {
        if (g) {
          var a = this.assetInfos;
          var b = g.import;
          if (b) {
            for (var h = 0, i = b.length; h < i; h += 2) {
              var j = b[h];
              a.get(j).ver = b[h + 1];
            }
          }
          if (b = g.native) {
            h = 0;
            i = b.length;
            h = 0;
            i = b.length;
            for (; h < i; h += 2) {
              j = b[h];
              a.get(j).nativeVer = b[h + 1];
            }
          }
        }
      },
      _initRedirect: function (f) {
        if (f) {
          for (var a = this.assetInfos, b = 0, g = f.length; b < g; b += 2) {
            var d = f[b];
            a.get(d).redirect = f[b + 1];
          }
        }
      },
      getInfoWithPath: function (f, i) {
        if (!f) {
          return null;
        }
        f = d(f);
        var c = this.paths.get(f);
        if (c) {
          if (!i) {
            return c[0];
          }
          for (var e = 0, j = c.length; e < j; e++) {
            var h = c[e];
            if (l.isChildClassOf(h.ctor, i)) {
              return h;
            }
          }
        }
        return null;
      },
      getDirWithPath: function (k, i, a) {
        if ((k = d(k))[k.length - 1] === "/") {
          k = k.slice(0, -1);
        }
        var c = a || [];
        function g(c, a) {
          return !(c.length > a.length) || c.charCodeAt(a.length) === 47;
        }
        this.paths.forEach(function (b, a) {
          if (a.startsWith(k) && g(a, k) || !k) {
            for (var d = 0, e = b.length; d < e; d++) {
              var h = b[d];
              if (!(i && !l.isChildClassOf(h.ctor, i))) {
                c.push(h);
              }
            }
          }
        });
        return c;
      },
      getAssetInfo: function (b) {
        return this.assetInfos.get(b);
      },
      getSceneInfo: function (d) {
        if (!d.endsWith(".fire")) {
          d += ".fire";
        }
        if (!(d[0] === "/" || d.startsWith("db://"))) {
          d = "/" + d;
        }
        return this.scenes.find(function (a, b) {
          return b.endsWith(d);
        });
      },
      destroy: function () {
        this.paths.destroy();
        this.scenes.destroy();
        this.assetInfos.destroy();
      }
    };
    b.exports = f;
  }, {
    "../platform/js": 183,
    "./cache": 33,
    "./helper": 44,
    "./utilities": 56
  }],
  35: [function (k, b) {
    "use strict";

    var l = function (a) {
      if (a && a.__esModule) {
        return a;
      }
      if (a === null || typeof a != "object" && typeof a != "function") {
        return {
          default: a
        };
      }
      var b = m(undefined);
      if (b && b.has(a)) {
        return b.get(a);
      }
      var c = {};
      var d = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var e in a) {
        if (e !== "default" && Object.prototype.hasOwnProperty.call(a, e)) {
          var g = d ? Object.getOwnPropertyDescriptor(a, e) : null;
          if (g && (g.get || g.set)) {
            Object.defineProperty(c, e, g);
          } else {
            c[e] = a[e];
          }
        }
      }
      c.default = a;
      if (b) {
        b.set(a, c);
      }
      return c;
    }(k("../platform/deserialize-compiled"));
    function m(d) {
      if (typeof WeakMap != "function") {
        return null;
      }
      var a = new WeakMap();
      var b = new WeakMap();
      return (m = function (c) {
        if (c) {
          return b;
        } else {
          return a;
        }
      })(d);
    }
    var d = k("./cache");
    var f = k("./deserialize");
    var e = k("./shared");
    var h = e.files;
    var i = e.parsed;
    var a = {
      _depends: new d(),
      init: function () {
        this._depends.clear();
      },
      getNativeDep: function (c) {
        var a = this._depends.get(c);
        if (a) {
          return a.nativeDep && Object.assign({}, a.nativeDep);
        } else {
          return null;
        }
      },
      getDeps: function (b) {
        if (this._depends.has(b)) {
          return this._depends.get(b).deps;
        } else {
          return [];
        }
      },
      getDepsRecursively: function (d) {
        var a = Object.create(null);
        var b = [];
        this._descend(d, a, b);
        return b;
      },
      _descend: function (g, a, b) {
        for (var c = this.getDeps(g), d = 0; d < c.length; d++) {
          var h = c[d];
          if (!a[h]) {
            a[h] = true;
            b.push(h);
            this._descend(h, a, b);
          }
        }
      },
      remove: function (b) {
        this._depends.remove(b);
      },
      parse: function (a, b) {
        var g = null;
        if (Array.isArray(b) || b.__type__) {
          if (g = this._depends.get(a)) {
            return g;
          }
          if (Array.isArray(b) && !(0, l.hasNativeDep)(b)) {
            g = {
              deps: this._parseDepsFromJson(b)
            };
          } else {
            try {
              var c = f(b);
              if ((g = this._parseDepsFromAsset(c)).nativeDep) {
                g.nativeDep.uuid = a;
              }
              i.add(a + "@import", c);
            } catch (b) {
              h.remove(a + "@import");
              g = {
                deps: []
              };
            }
          }
        } else {
          if ((g = this._depends.get(a)) && g.parsedFromExistAsset) {
            return g;
          }
          g = this._parseDepsFromAsset(b);
        }
        this._depends.add(a, g);
        return g;
      },
      _parseDepsFromAsset: function (g) {
        for (var a = {
            deps: [],
            parsedFromExistAsset: true,
            preventPreloadNativeObject: g.constructor.preventPreloadNativeObject,
            preventDeferredLoadDependents: g.constructor.preventDeferredLoadDependents
          }, b = g.__depends__, c = 0, h = b.length; c < h; c++) {
          var e = b[c].uuid;
          a.deps.push(e);
        }
        if (g.__nativeDepend__) {
          a.nativeDep = g._nativeDep;
        }
        return a;
      },
      _parseDepsFromJson: function (c) {
        var d = (0, l.getDependUuidList)(c);
        d.forEach(function (b, a) {
          return d[a] = cc.assetManager.utils.decodeUuid(b);
        });
        return d;
      }
    };
    b.exports = a;
  }, {
    "../platform/deserialize-compiled": 177,
    "./cache": 33,
    "./deserialize": 36,
    "./shared": 53
  }],
  36: [function (c, a) {
    "use strict";

    var b = c("./helper");
    c("../platform/deserialize");
    a.exports = function (d, f) {
      var g;
      g = cc._MissingScript.safeFindClass;
      var n;
      var p = null;
      var q = (p = cc.deserialize.Details.pool).get();
      try {
        n = cc.deserialize(d, q, {
          classFinder: g,
          customEnv: f
        });
      } catch (b) {
        p.put(q);
        throw b;
      }
      for (var k = q.uuidList, a = q.uuidObjList, m = q.uuidPropList, c = [], l = 0; l < k.length; l++) {
        var r = k[l];
        c[l] = {
          uuid: b.decodeUuid(r),
          owner: a[l],
          prop: m[l]
        };
      }
      n.__depends__ = c;
      if (n._native) {
        n.__nativeDepend__ = true;
      }
      p.put(q);
      return n;
    };
  }, {
    "../platform/deserialize": 178,
    "../platform/deserialize-compiled": 177,
    "../platform/deserialize-editor": undefined,
    "./helper": 44
  }],
  37: [function (e, a) {
    "use strict";

    var i = e("./utilities").parseParameters;
    var c = e("./download-file").downloadFile;
    a.exports = function (d, b, f) {
      var e = i(b, undefined, f);
      var g = e.options;
      var h = e.onComplete;
      g.responseType = "blobURL";
      c(d, g, function (a, b) {
        if (a) {
          if (h) {
            h(a);
          }
        } else {
          var c = new Image();
          c.addEventListener("load", e);
          c.addEventListener("error", f);
          c.src = b;
        }
        function e() {
          c.removeEventListener("load", e);
          c.removeEventListener("error", f);
          URL.revokeObjectURL(b);
          if (h) {
            h(null, c);
          }
        }
        function f() {
          c.removeEventListener("load", e);
          c.removeEventListener("error", f);
          URL.revokeObjectURL(b);
          if (h) {
            h(Error(cc.debug.getError(4930, d)));
          }
        }
      });
    };
  }, {
    "./download-file": 38,
    "./utilities": 56
  }],
  38: [function (c, b) {
    "use strict";

    var o = c("./utilities").parseParameters;
    var d = typeof window == "undefined" ? global : window;
    var e = d.shell || Object.create(null);
    var i = e.fetch || d.fetch;
    var g = e.fetchBlobURL || function (c, a) {
      return i(c, a).then(function (b) {
        if (!b.ok) {
          throw b.status;
        }
        return b.blob().then(function (b) {
          return URL.createObjectURL(b);
        });
      });
    };
    var j = e.unregisterBlobURL || function () {
      return null;
    };
    function m(b) {
      if (e.authenticate) {
        return e.authenticate(b);
      } else {
        return b;
      }
    }
    cc.setAuthenticateUrl = function (b) {
      m = b;
    };
    var k = function () {
      function c() {
        this._aborted = false;
      }
      var a = c.prototype;
      a.abort = function () {
        this._aborted = true;
      };
      a.isAborted = function () {
        return this._aborted;
      };
      return c;
    }();
    function a(g, a) {
      var b = +g.headers.get("Content-Length");
      if (!Number.isInteger(b)) {
        return g;
      }
      var c = g.body.getReader();
      var d = 0;
      var i = [];
      return c.read().then(function f(e) {
        if (e.done) {
          return new Response(new Blob(i, {
            type: g.headers.get("Content-Type")
          }), {
            status: g.status
          });
        } else {
          d += e.value.length;
          i.push(e.value);
          a(d, b);
          return c.read().then(f);
        }
      });
    }
    function l(c) {
      var a = Object.create(null);
      if (c.withCredentials === true) {
        a.credentials = "include";
      } else if (c.withCredentials === false) {
        a.credentials = "omit";
      }
      if (c.header) {
        a.headers = c.header;
      }
      return a;
    }
    function h(e, a, h) {
      var b = l(a);
      var i = new k();
      g(e, b).then(function (a) {
        if (i.isAborted()) {
          throw [4928, e + "(abort)"];
        }
        var b = h;
        h = null;
        b(null, a);
      }).catch(function (a) {
        if (h) {
          if (!Array.isArray(a)) {
            a = [4928, e + "(error)"];
          }
          if (i.isAborted()) {
            a[1] = "(abort)";
          }
          h(Error(cc.debug.getError(a[0], a[1])));
        }
      });
      return i;
    }
    function n(h, b, j, m) {
      var n = b.responseType !== undefined ? b.responseType : "text";
      var c = l(b);
      var e = new k();
      i(h, c).then(function (b) {
        if (e.isAborted()) {
          throw [4928, h + "(abort)"];
        }
        if (!b.ok) {
          throw [4928, h + "(wrong status)"];
        }
        if (j) {
          return a(b, j);
        } else {
          return b;
        }
      }).then(function (a) {
        if (e.isAborted()) {
          throw [4928, h + "(abort)"];
        }
        var b;
        switch (n) {
          case "json":
            b = a.json();
            break;
          case "arraybuffer":
            b = a.arrayBuffer();
            break;
          case "blob":
            b = a.blob();
            break;
          default:
            b = a.text();
        }
        return b.then(function (a) {
          if (e.isAborted()) {
            throw [4928, h + "(abort)"];
          }
          var b = m;
          m = null;
          b(null, a);
        });
      }).catch(function (b) {
        if (m) {
          if (!Array.isArray(b)) {
            b = [4928, h + "(error)"];
          }
          m(Error(cc.debug.getError(b[0]), b[1]));
        }
      });
      return e;
    }
    b.exports = {
      downloadFile: function (f, b, c, d) {
        var e = o(b, c, d);
        var g = e.options;
        var i = e.onProgress;
        var a = e.onComplete;
        var j = m(f);
        if (g.responseType === "blobURL") {
          return h(j, g, a);
        } else {
          return n(j, g, i, a);
        }
      },
      unregisterBlobURL: j
    };
  }, {
    "./utilities": 56
  }],
  39: [function (a, b) {
    "use strict";

    var j = a("./utilities").parseParameters;
    var c = a("./download-file");
    var d = c.downloadFile;
    var f = c.unregisterBlobURL;
    var g = {};
    b.exports = function (h, a, k) {
      var e = j(a, undefined, k);
      a = e.options;
      k = e.onComplete;
      if (g[h]) {
        return k && k(null);
      }
      a.responseType = "blobURL";
      d(h, a, function (a, b) {
        if (a) {
          return k && k(a);
        }
        var c = document.createElement("script");
        c.async = true;
        c.src = b;
        c.addEventListener("load", function () {
          document.head.removeChild(c);
          URL.revokeObjectURL(b);
          g[h] = true;
          if (k) {
            k(null);
          }
        }, false);
        c.addEventListener("error", function () {
          document.head.removeChild(c);
          URL.revokeObjectURL(b);
          f(b);
          if (k) {
            k(Error(cc.debug.getError(4928, h)));
          }
        }, false);
        document.head.appendChild(c);
      });
    };
  }, {
    "./download-file": 38,
    "./utilities": 56
  }],
  40: [function (i, j) {
    "use strict";

    function F() {
      return (F = Object.assign || function (e) {
        for (var a = 1; a < arguments.length; a++) {
          var f = arguments[a];
          for (var g in f) {
            if (Object.prototype.hasOwnProperty.call(f, g)) {
              e[g] = f[g];
            }
          }
        }
        return e;
      }).apply(this, arguments);
    }
    var k = i("../platform/js");
    var e = i("../CCDebug");
    var n = i("./font-loader").loadFont;
    var r = i("../platform/utils").callInNextTick;
    var s = i("./download-dom-image");
    var w = i("./download-file").downloadFile;
    var a = i("./download-script.js");
    var o = i("./cache");
    var c = i("./shared").files;
    var z = i("../platform/CCSys");
    var h = z.__audioSupport;
    var f = z.capabilities;
    var d = i("./utilities").retry;
    var B = /^(?:\w+:\/\/|\.+\/).+/;
    var l = h.format || [];
    function p(d, a, b) {
      b(Error(e.getError(4927)));
    }
    function g(d, a, b) {
      if (l.length > 0) {
        v(d, a, b);
      } else {
        p(0, 0, b);
      }
    }
    function m() {
      var a = f.imageBitmap && cc.macro.ALLOW_IMAGE_BITMAP ? t : s;
      a.apply(this, arguments);
    }
    function t(d, a, b) {
      a.responseType = "blob";
      w(d, a, a.onFileProgress, b);
    }
    function u(d, a, e) {
      a.responseType = "json";
      w(d, a, a.onFileProgress, function (c, d) {
        if (!c && typeof d == "string") {
          try {
            d = JSON.parse(d);
          } catch (a) {
            c = a;
          }
        }
        if (e) {
          e(c, d);
        }
      });
    }
    function v(d, a, b) {
      a.responseType = "arraybuffer";
      w(d, a, a.onFileProgress, b);
    }
    function y(d, a, b) {
      a.responseType = "text";
      w(d, a, a.onFileProgress, b);
    }
    function x(d, a, b) {
      b(null, d);
    }
    var A = new o();
    var C = [];
    var b = false;
    var E = 0;
    var I = 0;
    var L = -1;
    var M = false;
    function O() {
      var c = Date.now();
      var a = cc.director._deltaTime > P._maxInterval ? P._maxInterval : cc.director._deltaTime;
      if (c - L > a * 1000) {
        I = 0;
        L = c;
      }
    }
    var R = function f(e, a) {
      M = false;
      O();
      for (; C.length > 0 && E < e && I < a;) {
        if (b) {
          C.sort(function (c, a) {
            return c.priority - a.priority;
          });
          b = false;
        }
        var c = C.pop();
        if (!c) {
          break;
        }
        E++;
        I++;
        c.invoke();
      }
      if (C.length > 0 && E < e) {
        r(f, e, a);
        M = true;
      }
    };
    var P = {
      _remoteServerAddress: "",
      _maxInterval: 1 / 30,
      get remoteServerAddress() {
        return this._remoteServerAddress;
      },
      maxConcurrency: 6,
      maxRequestsPerFrame: 6,
      maxRetryCount: 3,
      limited: true,
      retryInterval: 2000,
      bundleVers: null,
      downloadFile: w,
      downloadScript: a,
      init: function (b, a) {
        A.clear();
        C.length = 0;
        this._remoteServerAddress = a || "";
        if (this._remoteServerAddress && !this._remoteServerAddress.endsWith("/")) {
          this._remoteServerAddress += "/";
        }
        this.bundleVers = b || Object.create(null);
      },
      register: function (c, a) {
        if (typeof c == "object") {
          k.mixin(D, c);
        } else {
          D[c] = a;
        }
      },
      download: function (l, a, f, i, e) {
        var k = D[f] || D.default;
        i = F({
          remoteServerAddress: this.remoteServerAddress
        }, i);
        var p;
        var q;
        var s = this;
        if (p = c.get(l)) {
          e(null, p);
        } else if (q = A.get(l)) {
          q.push(e);
          for (var t = 0, v = C.length; t < v; t++) {
            var u = C[t];
            if (u.id === l) {
              var y = i.priority || 0;
              if (u.priority < y) {
                u.priority = y;
                b = true;
              }
              return;
            }
          }
        } else {
          var z = i.maxRetryCount !== undefined ? i.maxRetryCount : this.maxRetryCount;
          var x = i.maxConcurrency !== undefined ? i.maxConcurrency : this.maxConcurrency;
          var g = i.maxRequestsPerFrame !== undefined ? i.maxRequestsPerFrame : this.maxRequestsPerFrame;
          d(function (c, d) {
            if (c === 0) {
              A.add(l, [e]);
            }
            if (!s.limited) {
              return k(a, i, d);
            }
            function h() {
              k(a, i, function () {
                E--;
                if (!M && C.length > 0) {
                  r(R, x, g);
                  M = true;
                }
                d.apply(this, arguments);
              });
            }
            O();
            if (E < x && I < g) {
              h();
              E++;
              I++;
            } else {
              C.push({
                id: l,
                priority: i.priority || 0,
                invoke: h
              });
              b = true;
              if (!M && E < x) {
                r(R, x, g);
                M = true;
              }
            }
          }, z, this.retryInterval, function (a, b) {
            if (!a) {
              c.add(l, b);
            }
            for (var d = A.remove(l), e = 0, h = d.length; e < h; e++) {
              d[e](a, b);
            }
          });
        }
      }
    };
    var D = {
      ".png": m,
      ".jpg": m,
      ".bmp": m,
      ".jpeg": m,
      ".gif": m,
      ".ico": m,
      ".tiff": m,
      ".webp": m,
      ".image": m,
      ".pvr": v,
      ".pkm": v,
      ".astc": v,
      ".mp3": g,
      ".ogg": g,
      ".wav": g,
      ".m4a": g,
      ".txt": y,
      ".xml": y,
      ".vsh": y,
      ".fsh": y,
      ".atlas": y,
      ".tmx": y,
      ".tsx": y,
      ".json": u,
      ".ExportJson": u,
      ".plist": y,
      ".fnt": y,
      ".font": n,
      ".eot": n,
      ".ttf": n,
      ".woff": n,
      ".svg": n,
      ".ttc": n,
      ".mp4": x,
      ".avi": x,
      ".mov": x,
      ".mpg": x,
      ".mpeg": x,
      ".rm": x,
      ".rmvb": x,
      ".binary": v,
      ".bin": v,
      ".dbbin": v,
      ".skel": v,
      ".js": a,
      bundle: function (c, b, d) {
        var e = cc.path.basename(c);
        var f = c;
        if (!B.test(f)) {
          f = b.remoteServerAddress ? b.remoteServerAddress + "assets/" + e : "assets/" + e;
        }
        var h;
        var o;
        var p = b.version || P.bundleVers[e];
        var k = 0;
        if (typeof p == "string") {
          h = o = p;
        } else if (p) {
          h = p.config;
          o = p.index;
        }
        var q = null;
        var r = null;
        u(f + "/config." + (h ? h + "." : "") + "json", b, function (c, a) {
          if (c) {
            r = c;
          }
          if (q = a) {
            q.base = f + "/";
          }
          if (++k == 2) {
            d(r, q);
          }
        });
        a(f + "/index." + (o ? o + "." : "") + "js", b, function (b) {
          if (b) {
            r = b;
          }
          if (++k == 2) {
            d(r, q);
          }
        });
      },
      default: y
    };
    P._downloaders = D;
    j.exports = P;
  }, {
    "../CCDebug": 23,
    "../platform/CCSys": 171,
    "../platform/js": 183,
    "../platform/utils": 186,
    "./cache": 33,
    "./download-dom-image": 37,
    "./download-file": 38,
    "./download-script.js": 39,
    "./font-loader": 43,
    "./shared": 53,
    "./utilities": 56
  }],
  41: [function (r, b) {
    "use strict";

    var g = r("./bundle");
    var j = r("./cache");
    var e = r("./shared");
    var s = e.assets;
    var i = e.bundles;
    var k = new j();
    function m(g, a, b, c) {
      var d = null;
      var h = null;
      try {
        (d = new cc.Texture2D())._nativeUrl = g;
        d._nativeAsset = a;
      } catch (a) {
        h = a;
      }
      if (c) {
        c(h, d);
      }
    }
    function a(f, a, b, c) {
      var d = new cc.AudioClip();
      d._nativeUrl = f;
      d._nativeAsset = a;
      d.duration = a.duration;
      if (c) {
        c(null, d);
      }
    }
    function c(f, a, b, c) {
      var d = new cc.VideoClip();
      d._nativeUrl = f;
      d._nativeAsset = a;
      if (c) {
        c(null, d);
      }
    }
    function l(f, a, b, c) {
      var d = new cc.JsonAsset();
      d.json = a;
      if (c) {
        c(null, d);
      }
    }
    function h(f, a, b, c) {
      var d = new cc.TextAsset();
      d.text = a;
      if (c) {
        c(null, d);
      }
    }
    function n(f, a, b, c) {
      var d = new cc.TTFFont();
      d._nativeUrl = f;
      d._nativeAsset = a;
      if (c) {
        c(null, d);
      }
    }
    function f(f, a, b, c) {
      var d = new cc.BufferAsset();
      d._nativeUrl = f;
      d._nativeAsset = a;
      if (c) {
        c(null, d);
      }
    }
    var d = {
      register: function (c, a) {
        if (typeof c == "object") {
          cc.js.mixin(o, c);
        } else {
          o[c] = a;
        }
      },
      create: function (a, b, c, d, e) {
        var f;
        var g;
        var l = o[c] || o.default;
        if (f = s.get(a)) {
          e(null, f);
        } else if (g = k.get(a)) {
          g.push(e);
        } else {
          k.add(a, [e]);
          l(a, b, d, function (b, c) {
            if (!b && c instanceof cc.Asset) {
              c._uuid = a;
              s.add(a, c);
            }
            for (var d = k.remove(a), e = 0, h = d.length; e < h; e++) {
              d[e](b, c);
            }
          });
        }
      }
    };
    var o = {
      ".png": m,
      ".jpg": m,
      ".bmp": m,
      ".jpeg": m,
      ".gif": m,
      ".ico": m,
      ".tiff": m,
      ".webp": m,
      ".image": m,
      ".pvr": m,
      ".pkm": m,
      ".astc": m,
      ".mp3": a,
      ".ogg": a,
      ".wav": a,
      ".m4a": a,
      ".mp4": c,
      ".avi": c,
      ".mov": c,
      ".mpg": c,
      ".mpeg": c,
      ".rm": c,
      ".rmvb": c,
      ".txt": h,
      ".xml": h,
      ".vsh": h,
      ".fsh": h,
      ".atlas": h,
      ".tmx": h,
      ".tsx": h,
      ".fnt": h,
      ".json": l,
      ".ExportJson": l,
      ".font": n,
      ".eot": n,
      ".ttf": n,
      ".woff": n,
      ".svg": n,
      ".ttc": n,
      ".binary": f,
      ".bin": f,
      ".dbbin": f,
      ".skel": f,
      bundle: function (f, a, b, c) {
        var d = i.get(a.name);
        if (!d) {
          d = new g();
          a.base = a.base || f + "/";
          d.init(a);
        }
        if (c) {
          c(null, d);
        }
      },
      default: function (f, a, b, c) {
        var d = new cc.Asset();
        d._nativeUrl = f;
        d._nativeAsset = a;
        if (c) {
          c(null, d);
        }
      }
    };
    b.exports = d;
  }, {
    "./bundle": 32,
    "./cache": 33,
    "./shared": 53
  }],
  42: [function (f, b) {
    "use strict";

    var p = f("./pack-manager");
    var d = f("./task");
    var g = f("./utilities");
    var j = g.getDepends;
    var e = g.clear;
    var i = g.forEach;
    var a = f("./shared");
    var k = a.assets;
    var o = a.fetchPipeline;
    function l(e) {
      for (var a = e.output, b = 0, f = a.length; b < f; b++) {
        if (a[b].content) {
          a[b].content.decRef(false);
        }
      }
    }
    function n(k, b, d, e, f, g, h) {
      var a = b.options.__exclude__;
      var i = b.progress;
      k.content = d;
      k.file = e;
      b.output.push(k);
      if (f) {
        a[k.uuid] = true;
        j(k.uuid, e || d, a, g, true, false, k.config);
        i.total = h + g.length;
      }
      if (i.canInvoke) {
        b.dispatch("progress", ++i.finish, i.total, k);
      }
    }
    b.exports = function (h, b) {
      var f = false;
      if (!h.progress) {
        h.progress = {
          finish: 0,
          total: h.input.length,
          canInvoke: true
        };
        f = true;
      }
      var c = h.options;
      var g = [];
      var j = h.progress;
      var a = j.total;
      c.__exclude__ = c.__exclude__ || Object.create(null);
      h.output = [];
      i(h.input, function (d, c) {
        if (!d.isNative && k.has(d.uuid)) {
          var e = k.get(d.uuid);
          e.addRef();
          n(d, h, e, null, e.__asyncLoadAssets__, g, a);
          return c();
        }
        p.load(d, h.options, function (e, k) {
          if (e) {
            if (!h.isFinish) {
              if (!cc.assetManager.force || f) {
                j.canInvoke = false;
                b(e);
              } else {
                n(d, h, null, null, false, g, a);
              }
            }
          } else if (!h.isFinish) {
            n(d, h, null, k, !d.isNative, g, a);
          }
          c();
        });
      }, function () {
        if (h.isFinish) {
          e(h, true);
          return h.dispatch("error");
        }
        if (g.length > 0) {
          var i = d.create({
            name: h.name + " dependencies",
            input: g,
            progress: j,
            options: c,
            onProgress: h.onProgress,
            onError: d.prototype.recycle,
            onComplete: function (a) {
              if (!a) {
                h.output.push.apply(h.output, this.output);
                i.recycle();
              }
              if (f) {
                l(h);
              }
              b(a);
            }
          });
          o.async(i);
        } else {
          if (f) {
            l(h);
          }
          b();
        }
      });
    };
  }, {
    "./pack-manager": 47,
    "./shared": 53,
    "./task": 54,
    "./utilities": 56
  }],
  43: [function (f, b) {
    "use strict";

    var d;
    var x = f("../utils/text-utils");
    var j = null;
    var y = "BES bswy:->@123丁ぁᄁ";
    var n = Object.create(null);
    var o = -1;
    var q = [];
    var i = 3000;
    d = undefined;
    function c() {
      if (d === undefined) {
        if (window.FontFace) {
          var c = /Gecko.*Firefox\/(\d+)/.exec(window.navigator.userAgent);
          var a = /OS X.*Version\/10\..*Safari/.exec(window.navigator.userAgent) && /Apple/.exec(window.navigator.vendor);
          d = c ? parseInt(c[1], 10) > 42 : !a;
        } else {
          d = false;
        }
      }
      return d;
    }
    function l() {
      for (var a = true, c = Date.now(), d = q.length - 1; d >= 0; d--) {
        var f = q[d];
        var h = f.fontFamilyName;
        if (c - f.startTime > i) {
          f.onComplete(null, h);
          q.splice(d, 1);
        } else {
          var k = f.refWidth;
          var m = "40px " + h;
          j.font = m;
          if (k !== x.safeMeasureText(j, y, m)) {
            q.splice(d, 1);
            f.onComplete(null, h);
          } else {
            a = false;
          }
        }
      }
      if (a) {
        clearInterval(o);
        o = -1;
      }
    }
    var e = {
      loadFont: function (a, f, h) {
        var k = e._getFontFamily(a);
        if (n[k]) {
          return h(null, k);
        }
        if (!j) {
          var m = document.createElement("canvas");
          m.width = 100;
          m.height = 100;
          j = m.getContext("2d");
        }
        var d = "40px " + k;
        j.font = d;
        var r = x.safeMeasureText(j, y, d);
        var p = document.createElement("style");
        p.type = "text/css";
        var s = "";
        s += isNaN(k - 0) ? "@font-face { font-family:" + k + "; src:" : "@font-face { font-family:'" + k + "'; src:";
        s += "url('" + a + "');";
        p.textContent = s + "}";
        document.body.appendChild(p);
        var t;
        var A;
        var C;
        var E;
        var H;
        var I;
        var J = document.createElement("div");
        var F = J.style;
        F.fontFamily = k;
        J.innerHTML = ".";
        F.position = "absolute";
        F.left = "-100px";
        F.top = "-100px";
        document.body.appendChild(J);
        if (c()) {
          t = Date.now();
          A = k;
          C = h;
          E = new Promise(function (c, a) {
            (function b() {
              if (Date.now() - t >= i) {
                a();
              } else {
                document.fonts.load("40px " + A).then(function (a) {
                  if (a.length >= 1) {
                    c();
                  } else {
                    // TOLOOK
                    // TOLOOK
                    setTimeout(b, 100);
                  }
                }, function () {
                  a();
                });
              }
            })();
          });
          H = null;
          I = new Promise(function (c, a) {
            H = // TOLOOK
            // TOLOOK
            setTimeout(a, i);
          });
          Promise.race([I, E]).then(function () {
            if (H) {
              clearTimeout(H);
              H = null;
            }
            C(null, A);
          }, function () {
            C(null, A);
          });
        } else {
          var b = {
            fontFamilyName: k,
            refWidth: r,
            onComplete: h,
            startTime: Date.now()
          };
          q.push(b);
          if (o === -1) {
            o = // TOLOOK
            // TOLOOK
            setInterval(l, 100);
          }
        }
        n[k] = p;
      },
      _getFontFamily: function (e) {
        var a = e.lastIndexOf(".ttf");
        if (a === -1) {
          return e;
        }
        var b;
        var f = e.lastIndexOf("/");
        if ((b = f === -1 ? e.substring(0, a) + "_LABEL" : e.substring(f + 1, a) + "_LABEL").indexOf(" ") !== -1) {
          b = "\"" + b + "\"";
        }
        return b;
      }
    };
    b.exports = e;
  }, {
    "../utils/text-utils": 243
  }],
  44: [function (f, a) {
    "use strict";

    var g;
    var h = f("./shared").bundles;
    var b = {
      decodeUuid: f("../utils/decode-uuid"),
      getUuidFromURL: (g = /.*[/\\][0-9a-fA-F]{2}[/\\]([0-9a-fA-F-]{8,})/, function (c) {
        var a = c.match(g);
        if (a) {
          return a[1];
        } else {
          return "";
        }
      }),
      getUrlWithUuid: function (d, a) {
        (a = a || Object.create(null)).__isNative__ = a.isNative;
        a.ext = a.nativeExt;
        var e = h.find(function (a) {
          return a.getAssetInfo(d);
        });
        if (e) {
          a.bundle = e.name;
        }
        return cc.assetManager._transform(d, a);
      },
      isScene: function (b) {
        return b && (b.constructor === cc.SceneAsset || b instanceof cc.Scene);
      },
      normalize: function (b) {
        if (b) {
          if (b.charCodeAt(0) === 46 && b.charCodeAt(1) === 47) {
            b = b.slice(2);
          } else if (b.charCodeAt(0) === 47) {
            b = b.slice(1);
          }
        }
        return b;
      }
    };
    a.exports = b;
  }, {
    "../utils/decode-uuid": 231,
    "./shared": 53
  }],
  45: [function (b) {
    "use strict";

    b("./CCAssetManager");
  }, {
    "./CCAssetManager": 30
  }],
  46: [function (n, b) {
    "use strict";

    var j = n("./pack-manager");
    var k = n("./pipeline");
    var u = n("./parser");
    var e = n("./utilities");
    var y = e.getDepends;
    var i = e.cache;
    var q = e.gatherAsset;
    var a = e.setProperties;
    var o = e.forEach;
    var c = e.clear;
    var v = e.checkCircleReference;
    var h = n("./shared");
    var r = h.assets;
    var t = h.files;
    var d = h.parsed;
    var l = h.pipeline;
    var p = n("./task");
    var g = new k("loadOneAsset", [function (c, k) {
      var d = c.output = c.input;
      var b = d.options;
      var e = d.isNative;
      var f = d.uuid;
      var g = d.file;
      var a = b.reload;
      if (g || !a && !e && r.has(f)) {
        return k();
      }
      j.load(d, c.options, function (c, a) {
        d.file = a;
        k(c);
      });
    }, function (l, b) {
      var f = l.output = l.input;
      var e = l.progress;
      var i = l.options.__exclude__;
      var j = f.id;
      var k = f.file;
      var a = f.options;
      if (f.isNative) {
        u.parse(j, k, f.ext, a, function (g, a) {
          if (g) {
            return b(g);
          }
          f.content = a;
          if (e.canInvoke) {
            l.dispatch("progress", ++e.finish, e.total, f);
          }
          t.remove(j);
          d.remove(j);
          b();
        });
      } else {
        var n = f.uuid;
        if (n in i) {
          var c = i[n];
          var o = c.finish;
          var h = c.content;
          var p = c.err;
          var q = c.callbacks;
          if (e.canInvoke) {
            l.dispatch("progress", ++e.finish, e.total, f);
          }
          if (o || v(n, n, i)) {
            if (h && h.addRef) {
              h.addRef();
            }
            f.content = h;
            b(p);
          } else {
            q.push({
              done: b,
              item: f
            });
          }
        } else if (!a.reload && r.has(n)) {
          var g = r.get(n);
          if (a.__asyncLoadAssets__ || !g.__asyncLoadAssets__) {
            f.content = g.addRef();
            if (e.canInvoke) {
              l.dispatch("progress", ++e.finish, e.total, f);
            }
            b();
          } else {
            w(l, g, b, false);
          }
        } else {
          u.parse(j, k, "import", a, function (c, a) {
            if (c) {
              return b(c);
            }
            a._uuid = n;
            w(l, a, b, true);
          });
        }
      }
    }]);
    function w(g, s, b, j) {
      var e = g.input;
      var k = g.progress;
      var m = e.uuid;
      var n = e.id;
      var c = e.options;
      var h = e.config;
      var u = c.__asyncLoadAssets__;
      var o = c.cacheAsset;
      var f = [];
      if (s.addRef) {
        s.addRef();
      }
      y(m, s, Object.create(null), f, false, u, h);
      if (k.canInvoke) {
        g.dispatch("progress", ++k.finish, k.total += f.length, e);
      }
      var q = g.options.__exclude__[m] = {
        content: s,
        finish: false,
        callbacks: [{
          done: b,
          item: e
        }]
      };
      var r = p.create({
        input: f,
        options: g.options,
        onProgress: g.onProgress,
        onError: p.prototype.recycle,
        progress: k,
        onComplete: function (c) {
          if (s.decRef) {
            s.decRef(false);
          }
          s.__asyncLoadAssets__ = u;
          q.finish = true;
          q.err = c;
          if (!c) {
            for (var b = Array.isArray(r.output) ? r.output : [r.output], e = Object.create(null), f = 0, g = b.length; f < g; f++) {
              var h = b[f];
              if (h) {
                e[h instanceof cc.Asset ? h._uuid + "@import" : m + "@native"] = h;
              }
            }
            if (j) {
              if (!a(m, s, e) && !s.__onLoadInvoked__) {
                try {
                  if (s.onLoad) {
                    s.onLoad();
                  }
                  s.__onLoadInvoked__ = true;
                } catch (b) {}
              }
              t.remove(n);
              d.remove(n);
              i(m, s, o !== undefined ? o : cc.assetManager.cacheAsset);
            } else if (s.__nativeDepend__ && !s._nativeAsset && !a(m, s, e) && !s.__onLoadInvoked__) {
              try {
                if (s.onLoad) {
                  s.onLoad();
                }
                s.__onLoadInvoked__ = true;
              } catch (b) {}
            }
            r.recycle();
          }
          for (var k = q.callbacks, l = 0, v = k.length; l < v; l++) {
            var x = k[l];
            if (s.addRef) {
              s.addRef();
            }
            x.item.content = s;
            x.done(c);
          }
          k.length = 0;
        }
      });
      l.async(r);
    }
    b.exports = function (j, b) {
      var a = false;
      if (!j.progress) {
        j.progress = {
          finish: 0,
          total: j.input.length,
          canInvoke: true
        };
        a = true;
      }
      var k = j.options;
      var l = j.progress;
      k.__exclude__ = k.__exclude__ || Object.create(null);
      j.output = [];
      o(j.input, function (d, f) {
        var h = p.create({
          input: d,
          onProgress: j.onProgress,
          options: k,
          progress: l,
          onComplete: function (d, c) {
            if (d && !j.isFinish) {
              if (!cc.assetManager.force || a) {
                l.canInvoke = false;
                b(d);
              } else if (l.canInvoke) {
                j.dispatch("progress", ++l.finish, l.total, c);
              }
            }
            j.output.push(c);
            h.recycle();
            f();
          }
        });
        g.async(h);
      }, function () {
        k.__exclude__ = null;
        if (j.isFinish) {
          c(j, true);
          return j.dispatch("error");
        }
        q(j);
        c(j, true);
        b();
      });
    };
  }, {
    "./pack-manager": 47,
    "./parser": 48,
    "./pipeline": 49,
    "./shared": 53,
    "./task": 54,
    "./utilities": 56
  }],
  47: [function (h, b) {
    "use strict";

    var d = h("../platform/deserialize-compiled");
    var n = h("./downloader");
    var f = h("./cache");
    var e = h("../platform/js");
    var g = h("./shared").files;
    var j = new f();
    function a(a) {
      return j.has(a.uuid);
    }
    var k = {
      unpackJson: function (a, b, c, f) {
        var i = e.createMap(true);
        var j = null;
        if (Array.isArray(b)) {
          (b = (0, d.unpackJSONs)(b)).length;
          a.length;
          for (var k = 0; k < a.length; k++) {
            i[a[k] + "@import"] = b[k];
          }
        } else {
          var o = e._getClassId(cc.Texture2D);
          if (b.type === o) {
            if (b.data) {
              var p = b.data.split("|");
              p.length;
              a.length;
              if (!cc.sys.capabilities.webp) {
                for (var l = 0, r = p.length; l < r; l++) {
                  var s = p[l];
                  var u = s.indexOf(",");
                  var v = s.substring(0, u);
                  v = v.replace("4_", "");
                  p[l] = v + s.substring(u);
                }
              }
              for (var z = 0; z < a.length; z++) {
                i[a[z] + "@import"] = (0, d.packCustomObjData)(o, p[z], true);
              }
            }
          } else {
            j = Error("unmatched type pack!");
            i = null;
          }
        }
        if (f) {
          f(j, i);
        }
      },
      init: function () {
        j.clear();
      },
      register: function (c, a) {
        if (typeof c == "object") {
          e.mixin(i, c);
        } else {
          i[c] = a;
        }
      },
      unpack: function (f, a, b, c, d) {
        if (a) {
          (0, i[b])(f, a, c, d);
        } else if (d) {
          d(Error("package data is wrong!"));
        }
      },
      load: function (c, b, d) {
        if (c.isNative || !c.info || !c.info.packs) {
          return n.download(c.id, c.url, c.ext, c.options, d);
        }
        if (g.has(c.id)) {
          return d(null, g.get(c.id));
        }
        var e = c.info.packs;
        var l = e.find(a);
        if (l) {
          return j.get(l.uuid).push({
            onComplete: d,
            id: c.id
          });
        }
        l = e[0];
        j.add(l.uuid, [{
          onComplete: d,
          id: c.id
        }]);
        var f = cc.assetManager._transform(l.uuid, {
          ext: l.ext,
          bundle: c.config.name
        });
        n.download(l.uuid, f, l.ext, c.options, function (a, b) {
          g.remove(l.uuid);
          k.unpack(l.packs, b, l.ext, c.options, function (a, b) {
            if (a) {
              a.message = "unpack " + f + " failed! details: " + a.message;
            } else {
              for (var d in b) {
                g.add(d, b[d]);
              }
            }
            for (var i = j.remove(l.uuid), m = 0, n = i.length; m < n; m++) {
              var h = i[m];
              if (a) {
                h.onComplete(a);
              } else {
                var o = b[h.id];
                if (o) {
                  h.onComplete(null, o);
                } else {
                  h.onComplete(Error("can not retrieve data from package"));
                }
              }
            }
          });
        });
      }
    };
    var i = {
      ".json": k.unpackJson
    };
    b.exports = k;
  }, {
    "../platform/deserialize-compiled": 177,
    "../platform/js": 183,
    "./cache": 33,
    "./downloader": 40,
    "./shared": 53
  }],
  48: [function (n, b) {
    "use strict";

    var g = n("../platform/CCSAXParser").plistParser;
    var j = n("../platform/js");
    var e = n("./deserialize");
    var i = n("./cache");
    var k = n("./helper").isScene;
    var m = n("./shared");
    var p = m.parsed;
    var q = m.files;
    var a = n("../platform/CCSys");
    var l = a.__audioSupport;
    var h = a.capabilities;
    var c = new i();
    var f = {
      parseImage: function (e, f, b) {
        if (h.imageBitmap && e instanceof Blob) {
          var a = {
            imageOrientation: f.__flipY__ ? "flipY" : "none",
            premultiplyAlpha: f.__premultiplyAlpha__ ? "premultiply" : "none"
          };
          createImageBitmap(e, a).then(function (c) {
            c.flipY = !!f.__flipY__;
            c.premultiplyAlpha = !!f.__premultiplyAlpha__;
            if (b) {
              b(null, c);
            }
          }, function (c) {
            if (b) {
              b(c, null);
            }
          });
        } else if (b) {
          b(null, e);
        }
      },
      parseAudio: function (d, a, b) {
        if (d instanceof ArrayBuffer && l.WEB_AUDIO) {
          l.context.decodeAudioData(d, function (c) {
            if (b) {
              b(null, c);
            }
          }, function (c) {
            if (b) {
              b(c, null);
            }
          });
        } else if (b) {
          b(null, d);
        }
      },
      parsePVRTex: function (k, b, d) {
        var e = null;
        var l = null;
        try {
          var m = k instanceof ArrayBuffer ? k : k.buffer;
          var h = new Int32Array(m, 0, 13);
          if (h[0] != 55727696) {
            throw Error("Invalid magic number in PVR header");
          }
          var i = h[7];
          var a = h[6];
          var j = h[12] + 52;
          l = {
            _data: new Uint8Array(m, j),
            _compressed: true,
            width: i,
            height: a
          };
        } catch (b) {
          e = b;
        }
        if (d) {
          d(e, l);
        }
      },
      parsePKMTex: function () {
        function e(c, a) {
          return c[a] << 8 | c[a + 1];
        }
        return function (b, d, h) {
          var f = null;
          var m = null;
          try {
            var n = b instanceof ArrayBuffer ? b : b.buffer;
            var j = new Uint8Array(n);
            var a = e(j, 6);
            if (a !== 0 && a !== 1 && a !== 3) {
              return Error("Invalid magic number in ETC header");
            }
            var k = e(j, 12);
            var c = e(j, 14);
            e(j, 8);
            e(j, 10);
            m = {
              _data: new Uint8Array(n, 16),
              _compressed: true,
              width: k,
              height: c
            };
          } catch (b) {
            f = b;
          }
          if (h) {
            h(f, m);
          }
        };
      }(),
      parseASTCTex: function () {
        function d(c, a) {
          if (c === 4) {
            return cc.Texture2D.PixelFormat.RGBA_ASTC_4x4;
          } else if (c === 5) {
            if (a === 4) {
              return cc.Texture2D.PixelFormat.RGBA_ASTC_5x4;
            } else {
              return cc.Texture2D.PixelFormat.RGBA_ASTC_5x5;
            }
          } else if (c === 6) {
            if (a === 5) {
              return cc.Texture2D.PixelFormat.RGBA_ASTC_6x5;
            } else {
              return cc.Texture2D.PixelFormat.RGBA_ASTC_6x6;
            }
          } else if (c === 8) {
            if (a === 5) {
              return cc.Texture2D.PixelFormat.RGBA_ASTC_8x5;
            } else if (a === 6) {
              return cc.Texture2D.PixelFormat.RGBA_ASTC_8x6;
            } else {
              return cc.Texture2D.PixelFormat.RGBA_ASTC_8x8;
            }
          } else if (c === 10) {
            if (a === 5) {
              return cc.Texture2D.PixelFormat.RGBA_ASTC_10x5;
            } else if (a === 6) {
              return cc.Texture2D.PixelFormat.RGBA_ASTC_10x6;
            } else if (a === 8) {
              return cc.Texture2D.PixelFormat.RGBA_ASTC_10x8;
            } else {
              return cc.Texture2D.PixelFormat.RGBA_ASTC_10x10;
            }
          } else if (a === 10) {
            return cc.Texture2D.PixelFormat.RGBA_ASTC_12x10;
          } else {
            return cc.Texture2D.PixelFormat.RGBA_ASTC_12x12;
          }
        }
        return function (b, g, e) {
          var i = null;
          var p = null;
          try {
            var q = b instanceof ArrayBuffer ? b : b.buffer;
            var m = new Uint8Array(q);
            if (m[0] + (m[1] << 8) + (m[2] << 16) + (m[3] << 24) !== 1554098963) {
              return Error("Invalid magic number in ASTC header");
            }
            var a = m[4];
            var n = m[5];
            var c = m[6];
            if ((a < 3 || a > 6 || n < 3 || n > 6 || c < 3 || c > 6) && (a < 4 || a === 7 || a === 9 || a === 11 || a > 12 || n < 4 || n === 7 || n === 9 || n === 11 || n > 12 || c !== 1)) {
              return Error("Invalid block number in ASTC header");
            }
            var l = d(a, n);
            var h = m[7] + (m[8] << 8) + (m[9] << 16);
            var o = m[10] + (m[11] << 8) + (m[12] << 16);
            m[13];
            m[14];
            m[15];
            p = {
              _data: new Uint8Array(q, 16),
              _compressed: true,
              width: h,
              height: o,
              format: l
            };
          } catch (b) {
            i = b;
          }
          e(i, p);
        };
      }(),
      parsePlist: function (f, a, b) {
        var c = null;
        var h = g.parse(f);
        if (!h) {
          c = Error("parse failed");
        }
        if (b) {
          b(c, h);
        }
      },
      parseImport: function (f, a, b) {
        if (!f) {
          return b && b(Error("Json is empty"));
        }
        var c;
        var g = null;
        try {
          c = e(f, a);
        } catch (a) {
          g = a;
        }
        if (b) {
          b(g, c);
        }
      },
      init: function () {
        c.clear();
      },
      register: function (c, a) {
        if (typeof c == "object") {
          j.mixin(o, c);
        } else {
          o[c] = a;
        }
      },
      parse: function (f, a, b, d, e) {
        var g;
        var h;
        var l;
        if (g = p.get(f)) {
          e(null, g);
        } else if (h = c.get(f)) {
          h.push(e);
        } else if (l = o[b]) {
          c.add(f, [e]);
          l(a, d, function (a, b) {
            if (a) {
              q.remove(f);
            } else if (!k(b)) {
              p.add(f, b);
            }
            for (var d = c.remove(f), e = 0, i = d.length; e < i; e++) {
              d[e](a, b);
            }
          });
        } else {
          e(null, a);
        }
      }
    };
    var o = {
      ".png": f.parseImage,
      ".jpg": f.parseImage,
      ".bmp": f.parseImage,
      ".jpeg": f.parseImage,
      ".gif": f.parseImage,
      ".ico": f.parseImage,
      ".tiff": f.parseImage,
      ".webp": f.parseImage,
      ".image": f.parseImage,
      ".pvr": f.parsePVRTex,
      ".pkm": f.parsePKMTex,
      ".astc": f.parseASTCTex,
      ".mp3": f.parseAudio,
      ".ogg": f.parseAudio,
      ".wav": f.parseAudio,
      ".m4a": f.parseAudio,
      ".plist": f.parsePlist,
      import: f.parseImport
    };
    b.exports = f;
  }, {
    "../platform/CCSAXParser": 169,
    "../platform/CCSys": 171,
    "../platform/js": 183,
    "./cache": 33,
    "./deserialize": 36,
    "./helper": 44,
    "./shared": 53
  }],
  49: [function (f, a) {
    "use strict";

    var g = f("./task");
    var h = 0;
    function b(d, a) {
      if (Array.isArray(a)) {
        this.id = h++;
        this.name = d;
        this.pipes = [];
        for (var b = 0, f = a.length; b < f; b++) {
          if (typeof a[b] == "function") {
            this.pipes.push(a[b]);
          }
        }
      }
    }
    b.prototype = {
      constructor: b,
      insert: function (c, a) {
        if (!(typeof c != "function" || a > this.pipes.length)) {
          this.pipes.splice(a, 0, c);
          return this;
        }
      },
      append: function (b) {
        if (typeof b == "function") {
          this.pipes.push(b);
          return this;
        }
      },
      remove: function (b) {
        if (typeof b == "number") {
          this.pipes.splice(b, 1);
          return this;
        }
      },
      sync: function (c) {
        var a = this.pipes;
        if (c instanceof g && a.length !== 0) {
          if (c.output != null) {
            c.input = c.output;
            c.output = null;
          }
          c._isFinish = false;
          for (var b = 0, h = a.length; b < h;) {
            var e = (0, a[b])(c);
            if (e) {
              c._isFinish = true;
              return e;
            }
            if (++b !== h) {
              c.input = c.output;
              c.output = null;
            }
          }
          c._isFinish = true;
          return c.output;
        }
      },
      async: function (c) {
        var a = this.pipes;
        if (c instanceof g && a.length !== 0) {
          if (c.output != null) {
            c.input = c.output;
            c.output = null;
          }
          c._isFinish = false;
          this._flow(0, c);
        }
      },
      _flow: function (e, f) {
        var b = this;
        (0, this.pipes[e])(f, function (a) {
          if (a) {
            f._isFinish = true;
            if (f.onComplete) {
              f.onComplete(a);
            }
          } else if (++e < b.pipes.length) {
            f.input = f.output;
            f.output = null;
            b._flow(e, f);
          } else {
            f._isFinish = true;
            if (f.onComplete) {
              f.onComplete(a, f.output);
            }
          }
        });
      }
    };
    a.exports = b;
  }, {
    "./task": 54
  }],
  50: [function (g, a) {
    "use strict";

    var h = g("./task");
    var b = g("./shared");
    var c = b.transformPipeline;
    var d = b.RequestType;
    a.exports = function (e, b) {
      var f = e.options;
      var g = Object.create(null);
      var i = Object.create(null);
      for (var a in f) {
        switch (a) {
          case d.PATH:
          case d.UUID:
          case d.DIR:
          case d.SCENE:
          case d.URL:
            break;
          case "__requestType__":
          case "__isNative__":
          case "ext":
          case "type":
          case "__nativeName__":
          case "audioLoadMode":
          case "bundle":
            g[a] = f[a];
            break;
          case "__exclude__":
          case "__outputAsArray__":
            i[a] = f[a];
            break;
          default:
            g[a] = f[a];
            i[a] = f[a];
        }
      }
      e.options = i;
      var j = h.create({
        input: e.input,
        options: g
      });
      var m = null;
      try {
        e.output = e.source = c.sync(j);
      } catch (b) {
        m = b;
        for (var p = 0, q = j.output.length; p < q; p++) {
          j.output[p].recycle();
        }
      }
      j.recycle();
      b(m);
    };
  }, {
    "./shared": 53,
    "./task": 54
  }],
  51: [function (r, b) {
    "use strict";

    var u = r("./depend-util");
    var g = r("./cache");
    r("../assets/CCAsset");
    var j = r("./shared").assets;
    var e = r("../platform/utils").callInNextTick;
    function i(c, a) {
      if (c._uuid) {
        a.push(c._uuid);
      }
    }
    function k(c, a) {
      for (var b = Object.getOwnPropertyNames(c), d = 0; d < b.length; d++) {
        var h = b[d];
        if (h !== "node" && h !== "__eventTargets") {
          var l = c[h];
          if (typeof l == "object" && l) {
            if (Array.isArray(l)) {
              for (var m = 0; m < l.length; m++) {
                var n = l[m];
                if (n instanceof cc.Asset) {
                  i(n, a);
                }
              }
            } else if (l.constructor && l.constructor !== Object) {
              if (l instanceof cc.Asset) {
                i(l, a);
              }
            } else {
              for (var o = Object.getOwnPropertyNames(l), r = 0; r < o.length; r++) {
                var s = l[o[r]];
                if (s instanceof cc.Asset) {
                  i(s, a);
                }
              }
            }
          }
        }
      }
    }
    var m = [];
    function n(a, b) {
      for (var c = 0; c < a._components.length; c++) {
        k(a._components[c], b);
      }
      for (var d = 0; d < a._children.length; d++) {
        n(a._children[d], b);
      }
    }
    function s(k, b, d, e) {
      d.push(k._uuid);
      for (var f = u.getDeps(k._uuid), g = 0, l = f.length; g < l; g++) {
        var h = j.get(f[g]);
        if (h) {
          var m = h._uuid;
          if (m in b) {
            b[m] += e;
          } else {
            b[m] = h.refCount + e;
          }
          if (d.includes(m)) {
            continue;
          }
          s(h, b, d, e);
        }
      }
    }
    function o(d) {
      var a = Object.create(null);
      a[d._uuid] = d.refCount;
      s(d, a, m, -1);
      m.length = 0;
      if (a[d._uuid] !== 0) {
        return a[d._uuid];
      }
      for (var b in a) {
        if (a[b] !== 0) {
          s(j.get(b), a, m, 1);
        }
      }
      m.length = 0;
      return a[d._uuid];
    }
    var h = new g();
    var l = new g();
    var c = false;
    function a() {
      c = false;
      l.forEach(function (b) {
        f._free(b);
      });
      l.clear();
    }
    var f = {
      init: function () {
        h.clear();
        l.clear();
      },
      _addPersistNodeRef: function (c) {
        var a = [];
        n(c, a);
        for (var b = 0, g = a.length; b < g; b++) {
          var e = j.get(a[b]);
          if (e) {
            e.addRef();
          }
        }
        h.add(c.uuid, a);
      },
      _removePersistNodeRef: function (f) {
        if (h.has(f.uuid)) {
          for (var a = h.get(f.uuid), b = 0, g = a.length; b < g; b++) {
            var d = j.get(a[b]);
            if (d) {
              d.decRef();
            }
          }
          h.remove(f.uuid);
        }
      },
      _autoRelease: function (a, b, c) {
        if (a) {
          for (var e = u.getDeps(a._id), f = 0, g = e.length; f < g; f++) {
            var i = j.get(e[f]);
            if (i) {
              i.decRef(a.autoReleaseAssets);
            }
          }
          var k = u._depends.get(a._id);
          if (k && k.persistDeps) {
            for (var l = k.persistDeps, m = 0, q = l.length; m < q; m++) {
              var r = j.get(l[m]);
              if (r) {
                r.decRef(a.autoReleaseAssets);
              }
            }
          }
          if (a._id !== b._id) {
            u.remove(a._id);
          }
        }
        var s = u._depends.get(b._id);
        if (s) {
          s.persistDeps = [];
        }
        for (var t in c) {
          for (var v = c[t], w = h.get(v.uuid), y = 0, D = w.length; y < D; y++) {
            var E = j.get(w[y]);
            if (E) {
              E.addRef();
            }
          }
          if (s) {
            s.persistDeps.push.apply(s.persistDeps, w);
          }
        }
      },
      _free: function (h, b) {
        l.remove(h._uuid);
        if (cc.isValid(h, true) && !(!b && h.refCount > 0 && o(h) > 0)) {
          j.remove(h._uuid);
          for (var c = u.getDeps(h._uuid), d = 0, i = c.length; d < i; d++) {
            var g = j.get(c[d]);
            if (g) {
              g.decRef(false);
              f._free(g, false);
            }
          }
          h.destroy();
          u.remove(h._uuid);
        }
      },
      tryRelease: function (d, g) {
        if (d instanceof cc.Asset) {
          if (g) {
            f._free(d, g);
          } else {
            l.add(d._uuid, d);
            if (!c) {
              c = true;
              e(a);
            }
          }
        }
      }
    };
    b.exports = f;
  }, {
    "../assets/CCAsset": 57,
    "../platform/utils": 186,
    "./cache": 33,
    "./depend-util": 35,
    "./shared": 53
  }],
  52: [function (e, a) {
    "use strict";

    var b = [];
    function c() {
      this._id = "";
      this.uuid = "";
      this.url = "";
      this.ext = ".json";
      this.content = null;
      this.file = null;
      this.info = null;
      this.config = null;
      this.isNative = false;
      this.options = Object.create(null);
    }
    c.prototype = {
      constructor: c,
      get id() {
        if (!this._id) {
          this._id = this.uuid + "@" + (this.isNative ? "native" : "import");
        }
        return this._id;
      },
      recycle: function () {
        if (b.length !== 500) {
          this._id = "";
          this.uuid = "";
          this.url = "";
          this.ext = ".json";
          this.content = null;
          this.file = null;
          this.info = null;
          this.config = null;
          this.isNative = false;
          this.options = Object.create(null);
          b.push(this);
        }
      }
    };
    c.create = function () {
      if (b.length !== 0) {
        return b.pop();
      } else {
        return new c();
      }
    };
    a.exports = c;
  }, {}],
  53: [function (h, b) {
    "use strict";

    var d = h("./cache");
    var e = h("./pipeline");
    var f = new d();
    var g = new d();
    var i = new d();
    var j = new d();
    var a = new e("normal load", []);
    var k = new e("fetch", []);
    var c = new e("transform url", []);
    b.exports = {
      assets: f,
      files: g,
      parsed: i,
      pipeline: a,
      fetchPipeline: k,
      transformPipeline: c,
      RequestType: {
        UUID: "uuid",
        PATH: "path",
        DIR: "dir",
        URL: "url",
        SCENE: "scene"
      },
      bundles: j,
      BuiltinBundleName: {
        RESOURCES: "resources",
        INTERNAL: "internal",
        MAIN: "main",
        START_SCENE: "start-scene"
      }
    };
  }, {
    "./cache": 33,
    "./pipeline": 49
  }],
  54: [function (f, a) {
    "use strict";

    var b = 0;
    var g = [];
    function d(c) {
      this.id = b++;
      this._isFinish = true;
      this.onComplete = null;
      this.onProgress = null;
      this.onError = null;
      this.source = null;
      this.output = null;
      this.input = null;
      this.progress = null;
      this.options = null;
      this.set(c);
    }
    d.prototype = {
      constructor: d,
      set: function (b) {
        b = b || Object.create(null);
        this.onComplete = b.onComplete;
        this.onProgress = b.onProgress;
        this.onError = b.onError;
        this.source = this.input = b.input;
        this.output = null;
        this.progress = b.progress;
        this.options = b.options || Object.create(null);
      },
      dispatch: function (g, a, b, c, d) {
        switch (g) {
          case "complete":
            if (this.onComplete) {
              this.onComplete(a, b, c, d);
            }
            break;
          case "progress":
            if (this.onProgress) {
              this.onProgress(a, b, c, d);
            }
            break;
          case "error":
            if (this.onError) {
              this.onError(a, b, c, d);
            }
            break;
          default:
            var e = "on" + g[0].toUpperCase() + g.substr(1);
            if (typeof this[e] == "function") {
              this[e](a, b, c, d);
            }
        }
      },
      recycle: function () {
        if (g.length !== 500) {
          this.onComplete = null;
          this.onProgress = null;
          this.onError = null;
          this.source = this.output = this.input = null;
          this.progress = null;
          this.options = null;
          g.push(this);
        }
      },
      get isFinish() {
        return this._isFinish;
      }
    };
    d.create = function (c) {
      var a = null;
      if (g.length !== 0) {
        (a = g.pop()).set(c);
      } else {
        a = new d(c);
      }
      return a;
    };
    a.exports = d;
  }, {}],
  55: [function (a, b) {
    "use strict";

    var c = a("./helper").decodeUuid;
    var e = a("./request-item");
    var f = a("./shared");
    var d = f.RequestType;
    var g = f.bundles;
    b.exports = {
      parse: function (f) {
        var a = f.input;
        var h = f.options;
        a = Array.isArray(a) ? a : [a];
        f.output = [];
        for (var i = 0; i < a.length; i++) {
          var j = a[i];
          var k = e.create();
          if (typeof j == "string") {
            (j = Object.create(null))[h.__requestType__ || d.UUID] = a[i];
          }
          if (typeof j == "object") {
            cc.js.addon(j, h);
            if (j.preset) {
              cc.js.addon(j, cc.assetManager.presets[j.preset]);
            }
            for (var l in j) {
              switch (l) {
                case d.UUID:
                  var m = k.uuid = c(j.uuid);
                  if (g.has(j.bundle)) {
                    if ((v = (B = g.get(j.bundle)._config).getAssetInfo(m)) && v.redirect) {
                      if (!g.has(v.redirect)) {
                        throw Error("Please load bundle " + v.redirect + " first");
                      }
                      v = (B = g.get(v.redirect)._config).getAssetInfo(m);
                    }
                    k.config = B;
                    k.info = v;
                  }
                  k.ext = j.ext || ".json";
                  break;
                case "__requestType__":
                case "ext":
                case "bundle":
                case "preset":
                case "type":
                  break;
                case d.DIR:
                  if (g.has(j.bundle)) {
                    var o = [];
                    g.get(j.bundle)._config.getDirWithPath(j.dir, j.type, o);
                    for (var p = 0, u = o.length; p < u; p++) {
                      var v = o[p];
                      a.push({
                        uuid: v.uuid,
                        __isNative__: false,
                        ext: ".json",
                        bundle: j.bundle
                      });
                    }
                  }
                  k.recycle();
                  k = null;
                  break;
                case d.PATH:
                  if (g.has(j.bundle)) {
                    if ((v = (B = g.get(j.bundle)._config).getInfoWithPath(j.path, j.type)) && v.redirect) {
                      if (!g.has(v.redirect)) {
                        throw Error("you need to load bundle " + v.redirect + " first");
                      }
                      v = (B = g.get(v.redirect)._config).getAssetInfo(v.uuid);
                    }
                    if (!v) {
                      k.recycle();
                      throw Error("Bundle " + j.bundle + " doesn't contain " + j.path);
                    }
                    k.config = B;
                    k.uuid = v.uuid;
                    k.info = v;
                  }
                  k.ext = j.ext || ".json";
                  break;
                case d.SCENE:
                  if (g.has(j.bundle)) {
                    var B;
                    if ((v = (B = g.get(j.bundle)._config).getSceneInfo(j.scene)) && v.redirect) {
                      if (!g.has(v.redirect)) {
                        throw Error("you need to load bundle " + v.redirect + " first");
                      }
                      v = (B = g.get(v.redirect)._config).getAssetInfo(v.uuid);
                    }
                    if (!v) {
                      k.recycle();
                      throw Error("Bundle " + B.name + " doesn't contain scene " + j.scene);
                    }
                    k.config = B;
                    k.uuid = v.uuid;
                    k.info = v;
                  }
                  break;
                case "__isNative__":
                  k.isNative = j.__isNative__;
                  break;
                case d.URL:
                  k.url = j.url;
                  k.uuid = j.uuid || j.url;
                  k.ext = j.ext || cc.path.extname(j.url);
                  k.isNative = j.__isNative__ === undefined || j.__isNative__;
                  break;
                default:
                  k.options[l] = j[l];
              }
              if (!k) {
                break;
              }
            }
          }
          if (k && (f.output.push(k), !k.uuid && !k.url)) {
            throw Error("Can not parse this input:" + JSON.stringify(j));
          }
        }
        return null;
      },
      combine: function (a) {
        for (var b = a.output = a.input, c = 0; c < b.length; c++) {
          var d = b[c];
          if (!d.url) {
            var i;
            var m;
            var n = d.config;
            m = d.isNative ? n && n.nativeBase ? n.base + n.nativeBase : cc.assetManager.generalNativeBase : n && n.importBase ? n.base + n.importBase : cc.assetManager.generalImportBase;
            var o = d.uuid;
            var p = "";
            if (d.info) {
              p = d.isNative ? d.info.nativeVer ? "." + d.info.nativeVer : "" : d.info.ver ? "." + d.info.ver : "";
            }
            i = d.ext === ".ttf" ? m + "/" + o.slice(0, 2) + "/" + o + p + "/" + d.options.__nativeName__ : m + "/" + o.slice(0, 2) + "/" + o + p + d.ext;
            d.url = i;
          }
        }
        return null;
      }
    };
  }, {
    "./helper": 44,
    "./request-item": 52,
    "./shared": 53
  }],
  56: [function (c, b) {
    "use strict";

    var p = c("./depend-util");
    var d = c("./helper");
    var e = d.isScene;
    var g = d.decodeUuid;
    var f = c("./shared").assets;
    var h = c("../platform/utils").callInNextTick;
    c("../assets/CCAsset");
    var k = {
      processOptions: function (d) {
        var e = d.uuids;
        var h = d.paths;
        var j = d.types;
        var i = d.deps;
        var l = d.paths = Object.create(null);
        if (d.debug === false) {
          for (var n = 0, o = e.length; n < o; n++) {
            e[n] = g(e[n]);
          }
          for (var p in h) {
            var q = h[p];
            var r = q[1];
            q[1] = j[r];
          }
        } else {
          for (var s = Object.create(null), u = 0, v = e.length; u < v; u++) {
            var w = e[u];
            e[u] = s[w] = g(w);
          }
          e = s;
        }
        for (var x in h) {
          var y = h[x];
          l[e[x]] = y;
        }
        var A = d.scenes;
        for (var B in A) {
          var C = A[B];
          A[B] = e[C];
        }
        var D = d.packs;
        for (var J in D) {
          for (var L = D[J], M = 0; M < L.length; ++M) {
            L[M] = e[L[M]];
          }
        }
        var O = d.versions;
        if (O) {
          for (var Q in O) {
            for (var R = O[Q], S = 0; S < R.length; S += 2) {
              var T = R[S];
              R[S] = e[T] || T;
            }
          }
        }
        var Y = d.redirect;
        if (Y) {
          for (var X = 0; X < Y.length; X += 2) {
            Y[X] = e[Y[X]];
            Y[X + 1] = i[Y[X + 1]];
          }
        }
      },
      clear: function (f, a) {
        for (var b = 0, g = f.input.length; b < g; b++) {
          var d = f.input[b];
          if (a && !d.isNative && d.content && d.content.decRef) {
            d.content.decRef(false);
          }
          d.recycle();
        }
        f.input = null;
      },
      retry: function (f, a, b, c, d) {
        f(d = d || 0, function (e, h) {
          d++;
          if (!e || d > a) {
            if (c) {
              c(e, h);
            }
          } else {
            // TOLOOK
            // TOLOOK
            setTimeout(function () {
              k.retry(f, a, b, c, d);
            }, b);
          }
        });
      },
      getDepends: function (a, b, d, e, f, g, h) {
        try {
          var i = p.parse(a, b);
          var j = true;
          if (b instanceof cc.Asset && (!b.__nativeDepend__ || b._nativeAsset)) {
            j = false;
          }
          if (f) {
            for (var k = 0, l = i.deps.length; k < l; k++) {
              var n = i.deps[k];
              if (!(n in d)) {
                d[n] = true;
                e.push({
                  uuid: n,
                  bundle: h && h.name
                });
              }
            }
            if (j && i.nativeDep) {
              if (h) {
                i.nativeDep.bundle = h.name;
              }
              e.push(Object.assign({}, i.nativeDep));
            }
          } else {
            g = !!b.asyncLoadAssets || g && !i.preventDeferredLoadDependents;
            for (var o = 0, r = i.deps.length; o < r; o++) {
              var u = i.deps[o];
              if (!(u in d)) {
                d[u] = true;
                e.push({
                  uuid: u,
                  __asyncLoadAssets__: g,
                  bundle: h && h.name
                });
              }
            }
            if (j && !g && !i.preventPreloadNativeObject && i.nativeDep) {
              if (h) {
                i.nativeDep.bundle = h.name;
              }
              e.push(Object.assign({}, i.nativeDep));
            }
          }
        } catch (b) {}
      },
      cache: function (d, a, b) {
        if (a && !e(a) && b) {
          f.add(d, a);
        }
      },
      setProperties: function (c, b, d) {
        var e = false;
        var k = b.__depends__;
        if (k) {
          for (var g = 0, l = k.length; g < l; g++) {
            var i = k[g];
            var m = d[i.uuid + "@import"];
            if (m) {
              i.owner[i.prop] = m.addRef();
            } else {
              e = true;
            }
          }
          b.__depends__ = undefined;
        }
        if (b.__nativeDepend__) {
          if (!b._nativeAsset) {
            if (d[c + "@native"]) {
              b._nativeAsset = d[c + "@native"];
            } else {
              e = true;
            }
          }
          b.__nativeDepend__ = undefined;
        }
        return e;
      },
      gatherAsset: function (f) {
        var a = f.source;
        if (f.options.__outputAsArray__ || a.length !== 1) {
          for (var b = f.output = [], c = 0, g = a.length; c < g; c++) {
            b.push(a[c].content);
          }
        } else {
          f.output = a[0].content;
        }
      },
      forEach: function (a, b, c) {
        var d = 0;
        var i = [];
        if (a.length === 0 && c) {
          c(i);
        }
        for (var f = 0, j = a.length; f < j; f++) {
          b(a[f], function (b) {
            if (b) {
              i.push(b);
            }
            if (++d === j && c) {
              c(i);
            }
          });
        }
      },
      parseParameters: function (e, f, g) {
        if (g === undefined) {
          var h = typeof e == "function";
          if (f) {
            g = f;
            if (!h) {
              f = null;
            }
          } else if (f === undefined && h) {
            g = e;
            e = null;
            f = null;
          }
          if (f !== undefined && h) {
            f = e;
            e = null;
          }
        }
        return {
          options: e = e || Object.create(null),
          onProgress: f,
          onComplete: g
        };
      },
      parseLoadResArgs: function (e, f, g) {
        if (g === undefined) {
          var h = cc.js.isChildClassOf(e, cc.Asset);
          if (f) {
            g = f;
            if (h) {
              f = null;
            }
          } else if (!(f !== undefined || h)) {
            g = e;
            f = null;
            e = null;
          }
          if (!(f === undefined || h)) {
            f = e;
            e = null;
          }
        }
        return {
          type: e,
          onProgress: f,
          onComplete: g
        };
      },
      checkCircleReference: function (g, b, c, d) {
        if (!d) {
          d = Object.create(null);
        }
        if (!c[b] || d[b]) {
          return false;
        }
        d[b] = true;
        var h = false;
        var j = p.getDeps(b);
        if (j) {
          for (var i = 0, m = j.length; i < m; i++) {
            var n = j[i];
            if (n === g || k.checkCircleReference(g, n, c, d)) {
              h = true;
              break;
            }
          }
        }
        return h;
      },
      asyncify: function (a) {
        return function (b, c) {
          if (a) {
            var d = [];
            if (Array.isArray(c)) {
              c.forEach(function (b) {
                return b instanceof cc.Asset && d.push(b.addRef());
              });
            } else if (c instanceof cc.Asset) {
              d.push(c.addRef());
            }
            h(function () {
              d.forEach(function (b) {
                return b.decRef(false);
              });
              a(b, c);
            });
          }
        };
      }
    };
    b.exports = k;
  }, {
    "../assets/CCAsset": 57,
    "../platform/utils": 186,
    "./depend-util": 35,
    "./helper": 44,
    "./shared": 53
  }],
  57: [function (d, a) {
    "use strict";

    var b = d("../platform/CCObject");
    cc.Asset = cc.Class({
      name: "cc.Asset",
      extends: b,
      ctor: function () {
        Object.defineProperty(this, "_uuid", {
          value: "",
          writable: true
        });
        this.loaded = true;
        this._nativeUrl = "";
        this._ref = 0;
      },
      properties: {
        nativeUrl: {
          get: function () {
            if (!this._nativeUrl && this._native) {
              var b = this._native;
              if (b.charCodeAt(0) === 47) {
                return b.slice(1);
              }
              if (b.charCodeAt(0) === 46) {
                this._nativeUrl = cc.assetManager.utils.getUrlWithUuid(this._uuid, {
                  nativeExt: b,
                  isNative: true
                });
              } else {
                this._nativeUrl = cc.assetManager.utils.getUrlWithUuid(this._uuid, {
                  __nativeName__: b,
                  nativeExt: cc.path.extname(b),
                  isNative: true
                });
              }
            }
            return this._nativeUrl;
          },
          visible: false
        },
        refCount: {
          get: function () {
            return this._ref;
          }
        },
        _native: "",
        _nativeAsset: {
          get: function () {
            return this._$nativeAsset;
          },
          set: function (b) {
            this._$nativeAsset = b;
          }
        },
        _nativeDep: {
          get: function () {
            if (this._native) {
              return {
                __isNative__: true,
                uuid: this._uuid,
                ext: this._native
              };
            }
          }
        }
      },
      statics: {
        deserialize: false,
        preventDeferredLoadDependents: false,
        preventPreloadNativeObject: false
      },
      toString: function () {
        return this.nativeUrl;
      },
      serialize: false,
      createNode: null,
      _setRawAsset: function (c, a) {
        this._native = a !== false ? c || undefined : "/" + c;
      },
      addRef: function () {
        this._ref++;
        return this;
      },
      decRef: function (b) {
        if (this._ref > 0) {
          this._ref--;
        }
        if (b !== false) {
          cc.assetManager._releaseManager.tryRelease(this);
        }
        return this;
      },
      destroy: function () {
        this.loaded = false;
        return this._super();
      }
    });
    a.exports = cc.Asset;
  }, {
    "../platform/CCObject": 168
  }],
  58: [function (g, a) {
    "use strict";

    var b = g("./CCAsset");
    var c = g("../event/event-target");
    var d = cc.Enum({
      WEB_AUDIO: 0,
      DOM_AUDIO: 1
    });
    var e = cc.Class({
      name: "cc.AudioClip",
      extends: b,
      mixins: [c],
      ctor: function () {
        this._loading = false;
        this.loaded = false;
        this._audio = null;
      },
      properties: {
        duration: 0,
        loadMode: {
          default: d.WEB_AUDIO,
          type: d
        },
        _nativeAsset: {
          get: function () {
            return this._audio;
          },
          set: function (b) {
            if (b instanceof cc.AudioClip) {
              this._audio = b._nativeAsset;
            } else {
              this._audio = b;
            }
            if (this._audio) {
              this.loaded = true;
              this.emit("load");
            }
          },
          override: true
        },
        _nativeDep: {
          get: function () {
            return {
              uuid: this._uuid,
              audioLoadMode: this.loadMode,
              ext: cc.path.extname(this._native),
              __isNative__: true
            };
          },
          override: true
        }
      },
      statics: {
        LoadMode: d,
        _loadByUrl: null
      },
      _ensureLoaded: function (c) {
        if (this.isValid) {
          if (this.loaded) {
            return c && c();
          }
          if (c) {
            this.once("load", c);
          }
          if (!this._loading) {
            this._loading = true;
            var a = this;
            cc.assetManager.postLoadNative(this, function () {
              a._loading = false;
            });
          }
        }
      }
    });
    cc.AudioClip = e;
    a.exports = e;
  }, {
    "../event/event-target": 134,
    "./CCAsset": 57
  }],
  59: [function (f, a) {
    "use strict";

    function j() {
      this.u = 0;
      this.v = 0;
      this.w = 0;
      this.h = 0;
      this.offsetX = 0;
      this.offsetY = 0;
      this.textureID = 0;
      this.valid = false;
      this.xAdvance = 0;
    }
    function c(b) {
      this._letterDefinitions = {};
      this._texture = b;
    }
    c.prototype = {
      constructor: c,
      addLetterDefinitions: function (c, a) {
        this._letterDefinitions[c] = a;
      },
      cloneLetterDefinition: function () {
        var c = {};
        for (var a in this._letterDefinitions) {
          var e = new j();
          cc.js.mixin(e, this._letterDefinitions[a]);
          c[a] = e;
        }
        return c;
      },
      getTexture: function () {
        return this._texture;
      },
      getLetter: function (b) {
        return this._letterDefinitions[b];
      },
      getLetterDefinitionForChar: function (c) {
        var a = c.charCodeAt(0);
        if (this._letterDefinitions.hasOwnProperty(a)) {
          return this._letterDefinitions[a];
        } else {
          return null;
        }
      },
      clear: function () {
        this._letterDefinitions = {};
      }
    };
    var b = cc.Class({
      name: "cc.BitmapFont",
      extends: cc.Font,
      properties: {
        fntDataStr: {
          default: ""
        },
        spriteFrame: {
          default: null,
          type: cc.SpriteFrame
        },
        fontSize: {
          default: -1
        },
        _fntConfig: null,
        _fontDefDictionary: null
      },
      onLoad: function () {
        var a = this.spriteFrame;
        if (!this._fontDefDictionary) {
          this._fontDefDictionary = new c();
          if (a) {
            this._fontDefDictionary._texture = a._texture;
          }
        }
        var b = this._fntConfig;
        if (b) {
          var d = b.fontDefDictionary;
          for (var e in d) {
            var f = new j();
            var k = d[e].rect;
            f.offsetX = d[e].xOffset;
            f.offsetY = d[e].yOffset;
            f.w = k.width;
            f.h = k.height;
            f.u = k.x;
            f.v = k.y;
            f.textureID = 0;
            f.valid = true;
            f.xAdvance = d[e].xAdvance;
            this._fontDefDictionary.addLetterDefinitions(e, f);
          }
        }
      }
    });
    cc.BitmapFont = b;
    cc.BitmapFont.FontLetterDefinition = j;
    cc.BitmapFont.FontAtlas = c;
    a.exports = b;
  }, {}],
  60: [function (d, a) {
    "use strict";

    var b = cc.Class({
      name: "cc.BufferAsset",
      extends: cc.Asset,
      ctor: function () {
        this._buffer = null;
      },
      properties: {
        _nativeAsset: {
          get: function () {
            return this._buffer;
          },
          set: function (b) {
            this._buffer = b.buffer || b;
          },
          override: true
        },
        buffer: function () {
          return this._buffer;
        }
      }
    });
    cc.BufferAsset = a.exports = b;
  }, {}],
  61: [function (d, a) {
    "use strict";

    var b = cc.Class({
      name: "cc.Font",
      extends: cc.Asset
    });
    cc.Font = a.exports = b;
  }, {}],
  62: [function (d, a) {
    "use strict";

    var b = cc.Class({
      name: "cc.JsonAsset",
      extends: cc.Asset,
      properties: {
        json: null
      }
    });
    a.exports = cc.JsonAsset = b;
  }, {}],
  63: [function (d, a) {
    "use strict";

    var b = cc.Class({
      name: "cc.LabelAtlas",
      extends: cc.BitmapFont,
      onLoad: function () {
        if (this.spriteFrame && this._fntConfig) {
          this._super();
        }
      }
    });
    cc.LabelAtlas = b;
    a.exports = b;
  }, {}],
  64: [function (e, a) {
    "use strict";

    var b = cc.Enum({
      AUTO: 0,
      SINGLE_INSTANCE: 1,
      MULTI_INSTANCE: 2
    });
    var c = cc.Class({
      name: "cc.Prefab",
      extends: cc.Asset,
      ctor: function () {
        this._createFunction = null;
        this._instantiatedTimes = 0;
      },
      properties: {
        data: null,
        optimizationPolicy: b.AUTO,
        asyncLoadAssets: false,
        readonly: {
          default: false,
          editorOnly: true
        }
      },
      statics: {
        OptimizationPolicy: b,
        OptimizationPolicyThreshold: 3
      },
      createNode: false,
      compileCreateFunction: function () {
        var a = e("../platform/instantiate-jit");
        this._createFunction = a.compile(this.data);
      },
      _doInstantiate: function (b) {
        this.data._prefab;
        if (!this._createFunction) {
          this.compileCreateFunction();
        }
        return this._createFunction(b);
      },
      _instantiate: function () {
        var d;
        if (this.optimizationPolicy !== b.SINGLE_INSTANCE && (this.optimizationPolicy === b.MULTI_INSTANCE || this._instantiatedTimes + 1 >= c.OptimizationPolicyThreshold)) {
          d = this._doInstantiate();
          this.data._instantiate(d);
        } else {
          d = this.data._instantiate();
        }
        ++this._instantiatedTimes;
        return d;
      },
      destroy: function () {
        if (this.data) {
          this.data.destroy();
        }
        this._super();
      }
    });
    cc.Prefab = a.exports = c;
    cc.js.obsolete(cc, "cc._Prefab", "Prefab");
  }, {
    "../platform/instantiate-jit": 181
  }],
  65: [function (i, b) {
    "use strict";

    var c;
    var j = (c = i("../../renderer/gfx")) && c.__esModule ? c : {
      default: c
    };
    var f = i("../renderer");
    var g = i("./CCTexture2D");
    var e = cc.Enum({
      RB_FMT_D24S8: j.default.RB_FMT_D24S8,
      RB_FMT_S8: j.default.RB_FMT_S8,
      RB_FMT_D16: j.default.RB_FMT_D16
    });
    var h = cc.Class({
      name: "cc.RenderTexture",
      extends: g,
      statics: {
        DepthStencilFormat: e
      },
      ctor: function () {
        this._framebuffer = null;
      },
      initWithSize: function (a, b, c) {
        this.width = Math.floor(a || cc.visibleRect.width);
        this.height = Math.floor(b || cc.visibleRect.height);
        this._resetUnderlyingMipmaps();
        var d;
        var g = {
          colors: [this._texture]
        };
        if (this._depthStencilBuffer) {
          this._depthStencilBuffer.destroy();
        }
        if (c) {
          d = new j.default.RenderBuffer(f.device, c, a, b);
          if (c === j.default.RB_FMT_D24S8) {
            g.depthStencil = d;
          } else if (c === j.default.RB_FMT_S8) {
            g.stencil = d;
          } else if (c === j.default.RB_FMT_D16) {
            g.depth = d;
          }
        }
        this._depthStencilBuffer = d;
        if (this._framebuffer) {
          this._framebuffer.destroy();
        }
        this._framebuffer = new j.default.FrameBuffer(f.device, a, b, g);
        this._packable = false;
        this.loaded = true;
        this.emit("load");
      },
      updateSize: function (d, a) {
        this.width = Math.floor(d || cc.visibleRect.width);
        this.height = Math.floor(a || cc.visibleRect.height);
        this._resetUnderlyingMipmaps();
        var b = this._depthStencilBuffer;
        if (b) {
          b.update(this.width, this.height);
        }
        this._framebuffer._width = d;
        this._framebuffer._height = a;
      },
      drawTextureAt: function (d, a, b) {
        if (d._image && d._image.width !== 0) {
          this._texture.updateSubImage({
            x: a,
            y: b,
            image: d._image,
            width: d.width,
            height: d.height,
            level: 0,
            flipY: false,
            premultiplyAlpha: d._premultiplyAlpha
          });
        }
      },
      readPixels: function (c, e, i, m, g) {
        if (!this._framebuffer || !this._texture) {
          return c;
        }
        e = e || 0;
        i = i || 0;
        var h = m || this.width;
        var j = g || this.height;
        c = c || new Uint8Array(h * j * 4);
        var k = cc.game._renderContext;
        var a = k.getParameter(k.FRAMEBUFFER_BINDING);
        k.bindFramebuffer(k.FRAMEBUFFER, this._framebuffer.getHandle());
        k.readPixels(e, i, h, j, k.RGBA, k.UNSIGNED_BYTE, c);
        k.bindFramebuffer(k.FRAMEBUFFER, a);
        return c;
      },
      destroy: function () {
        this._super();
        if (this._framebuffer) {
          this._framebuffer.destroy();
          this._framebuffer = null;
        }
      }
    });
    cc.RenderTexture = b.exports = h;
  }, {
    "../../renderer/gfx": 282,
    "../renderer": 193,
    "./CCTexture2D": 72
  }],
  66: [function (d, a) {
    "use strict";

    var b = cc.Class({
      name: "cc.SceneAsset",
      extends: cc.Asset,
      properties: {
        scene: null,
        asyncLoadAssets: undefined
      }
    });
    cc.SceneAsset = b;
    a.exports = b;
  }, {}],
  67: [function () {
    "use strict";

    var d = cc.Class({
      name: "cc.Script",
      extends: cc.Asset
    });
    cc._Script = d;
    var a = cc.Class({
      name: "cc.JavaScript",
      extends: d
    });
    cc._JavaScript = a;
    var b = cc.Class({
      name: "cc.TypeScript",
      extends: d
    });
    cc._TypeScript = b;
  }, {}],
  68: [function (d, a) {
    "use strict";

    var b = cc.Class({
      name: "cc.SpriteAtlas",
      extends: cc.Asset,
      properties: {
        _spriteFrames: {
          default: {}
        }
      },
      getTexture: function () {
        var c = Object.keys(this._spriteFrames);
        if (c.length > 0) {
          var a = this._spriteFrames[c[0]];
          if (a) {
            return a.getTexture();
          } else {
            return null;
          }
        }
        return null;
      },
      getSpriteFrame: function (c) {
        var a = this._spriteFrames[c];
        if (a) {
          if (!a.name) {
            a.name = c;
          }
          return a;
        } else {
          return null;
        }
      },
      getSpriteFrames: function () {
        var d = [];
        var a = this._spriteFrames;
        for (var b in a) {
          d.push(this.getSpriteFrame(b));
        }
        return d;
      }
    });
    cc.SpriteAtlas = b;
    a.exports = b;
  }, {}],
  69: [function (f, a) {
    "use strict";

    var g = f("../event/event-target");
    var m = [{
      u: 0,
      v: 0
    }, {
      u: 0,
      v: 0
    }, {
      u: 0,
      v: 0
    }, {
      u: 0,
      v: 0
    }];
    var b = cc.Class({
      name: "cc.SpriteFrame",
      extends: f("../assets/CCAsset"),
      mixins: [g],
      properties: {
        _textureSetter: {
          set: function (b) {
            if (b && this._texture !== b) {
              this._refreshTexture(b);
            }
          }
        },
        insetTop: {
          get: function () {
            return this._capInsets[1];
          },
          set: function (b) {
            this._capInsets[1] = b;
            if (this._texture) {
              this._calculateSlicedUV();
            }
          }
        },
        insetBottom: {
          get: function () {
            return this._capInsets[3];
          },
          set: function (b) {
            this._capInsets[3] = b;
            if (this._texture) {
              this._calculateSlicedUV();
            }
          }
        },
        insetLeft: {
          get: function () {
            return this._capInsets[0];
          },
          set: function (b) {
            this._capInsets[0] = b;
            if (this._texture) {
              this._calculateSlicedUV();
            }
          }
        },
        insetRight: {
          get: function () {
            return this._capInsets[2];
          },
          set: function (b) {
            this._capInsets[2] = b;
            if (this._texture) {
              this._calculateSlicedUV();
            }
          }
        }
      },
      ctor: function () {
        g.call(this);
        var c = arguments[0];
        var a = arguments[1];
        var b = arguments[2];
        var d = arguments[3];
        var e = arguments[4];
        this._rect = null;
        this.uv = [];
        this._texture = null;
        this._original = null;
        this._offset = null;
        this._originalSize = null;
        this._rotated = false;
        this._flipX = false;
        this._flipY = false;
        this.vertices = null;
        this._capInsets = [0, 0, 0, 0];
        this.uvSliced = [];
        if (c !== undefined) {
          this.setTexture(c, a, b, d, e);
        }
      },
      textureLoaded: function () {
        return this._texture && this._texture.loaded;
      },
      onTextureLoaded: function (c, a) {
        if (this.textureLoaded()) {
          c.call(a);
          return true;
        } else {
          this.once("load", c, a);
          this.ensureLoadTexture();
          return false;
        }
      },
      isRotated: function () {
        return this._rotated;
      },
      setRotated: function (b) {
        this._rotated = b;
        if (this._texture) {
          this._calculateUV();
        }
      },
      isFlipX: function () {
        return this._flipX;
      },
      isFlipY: function () {
        return this._flipY;
      },
      setFlipX: function (b) {
        this._flipX = b;
        if (this._texture) {
          this._calculateUV();
        }
      },
      setFlipY: function (b) {
        this._flipY = b;
        if (this._texture) {
          this._calculateUV();
        }
      },
      getRect: function () {
        return cc.rect(this._rect);
      },
      setRect: function (b) {
        this._rect = b;
        if (this._texture) {
          this._calculateUV();
        }
      },
      getOriginalSize: function () {
        return cc.size(this._originalSize);
      },
      setOriginalSize: function (b) {
        if (this._originalSize) {
          this._originalSize.width = b.width;
          this._originalSize.height = b.height;
        } else {
          this._originalSize = cc.size(b);
        }
      },
      getTexture: function () {
        return this._texture;
      },
      _textureLoadedCallback: function () {
        var d = this._texture;
        if (d) {
          var a = d.width;
          var b = d.height;
          if (this._rect) {
            this._checkRect(this._texture);
          } else {
            this._rect = cc.rect(0, 0, a, b);
          }
          if (!this._originalSize) {
            this._originalSize = cc.size(a, b);
          }
          if (!this._offset) {
            this._offset = cc.v2(0, 0);
          }
          this._calculateUV();
          this.emit("load");
        }
      },
      _refreshTexture: function (b) {
        this._texture = b;
        if (b.loaded) {
          this._textureLoadedCallback();
        } else {
          b.once("load", this._textureLoadedCallback, this);
        }
      },
      getOffset: function () {
        return cc.v2(this._offset);
      },
      setOffset: function (b) {
        this._offset = cc.v2(b);
      },
      clone: function () {
        return new b(this._texture, this.getRect(), this._rotated, this.getOffset(), this.getOriginalSize());
      },
      setTexture: function (f, a, b, c, d) {
        if ((arguments.length !== 1 || f !== this._texture) && (this._rect = a || null, c ? this.setOffset(c) : this._offset = null, d ? this.setOriginalSize(d) : this._originalSize = null, this._rotated = b || false, typeof f != "string")) {
          if (f instanceof cc.Texture2D) {
            this._refreshTexture(f);
          }
          return true;
        }
      },
      ensureLoadTexture: function () {
        if (this._texture) {
          if (!this._texture.loaded) {
            this._refreshTexture(this._texture);
            cc.assetManager.postLoadNative(this._texture);
          }
        }
      },
      _checkRect: function (c) {
        var a = this._rect;
        a.x;
        a.y;
        if (this._rotated) {
          a.height;
          a.width;
        } else {
          a.width;
          a.height;
        }
        c.width;
        c.height;
      },
      _flipXY: function (d) {
        if (this._flipX) {
          var a = d[0];
          d[0] = d[1];
          d[1] = a;
          a = d[2];
          d[2] = d[3];
          d[3] = a;
        }
        if (this._flipY) {
          var e = d[0];
          d[0] = d[2];
          d[2] = e;
          e = d[1];
          d[1] = d[3];
          d[3] = e;
        }
      },
      _calculateSlicedUV: function () {
        var d = this._rect;
        var b = this._texture.width;
        var f = this._texture.height;
        var e = this._capInsets[0];
        var g = this._capInsets[2];
        var i = d.width - e - g;
        var j = this._capInsets[1];
        var a = this._capInsets[3];
        var k = d.height - j - a;
        var c = this.uvSliced;
        c.length = 0;
        if (this._rotated) {
          m[0].u = d.x / b;
          m[1].u = (d.x + a) / b;
          m[2].u = (d.x + a + k) / b;
          m[3].u = (d.x + d.height) / b;
          m[3].v = d.y / f;
          m[2].v = (d.y + e) / f;
          m[1].v = (d.y + e + i) / f;
          m[0].v = (d.y + d.width) / f;
          this._flipXY(m);
          for (var l = 0; l < 4; ++l) {
            for (var n = m[l], o = 0; o < 4; ++o) {
              var p = m[3 - o];
              c.push({
                u: n.u,
                v: p.v
              });
            }
          }
        } else {
          m[0].u = d.x / b;
          m[1].u = (d.x + e) / b;
          m[2].u = (d.x + e + i) / b;
          m[3].u = (d.x + d.width) / b;
          m[3].v = d.y / f;
          m[2].v = (d.y + j) / f;
          m[1].v = (d.y + j + k) / f;
          m[0].v = (d.y + d.height) / f;
          this._flipXY(m);
          for (var q = 0; q < 4; ++q) {
            for (var u = m[q], v = 0; v < 4; ++v) {
              var A = m[v];
              c.push({
                u: A.u,
                v: u.v
              });
            }
          }
        }
      },
      _setDynamicAtlasFrame: function (b) {
        if (b) {
          this._original = {
            _texture: this._texture,
            _x: this._rect.x,
            _y: this._rect.y
          };
          this._texture = b.texture;
          this._rect.x = b.x;
          this._rect.y = b.y;
          this._calculateUV();
        }
      },
      _resetDynamicAtlasFrame: function () {
        if (this._original) {
          this._rect.x = this._original._x;
          this._rect.y = this._original._y;
          this._texture = this._original._texture;
          this._original = null;
          if (this._texture.loaded) {
            this._calculateUV();
          } else {
            this.ensureLoadTexture();
          }
        }
      },
      _calculateUV: function () {
        var d = this._rect;
        var b = this._texture;
        var g = this.uv;
        var e = b.width;
        var i = b.height;
        if (this._rotated) {
          var j = e === 0 ? 0 : d.x / e;
          var k = e === 0 ? 0 : (d.x + d.height) / e;
          var m = i === 0 ? 0 : (d.y + d.width) / i;
          var a = i === 0 ? 0 : d.y / i;
          g[0] = j;
          g[1] = a;
          g[2] = j;
          g[3] = m;
          g[4] = k;
          g[5] = a;
          g[6] = k;
          g[7] = m;
        } else {
          var n = e === 0 ? 0 : d.x / e;
          var c = e === 0 ? 0 : (d.x + d.width) / e;
          var l = i === 0 ? 0 : (d.y + d.height) / i;
          var h = i === 0 ? 0 : d.y / i;
          g[0] = n;
          g[1] = l;
          g[2] = c;
          g[3] = l;
          g[4] = n;
          g[5] = h;
          g[6] = c;
          g[7] = h;
        }
        if (this._flipX) {
          var o = g[0];
          g[0] = g[2];
          g[2] = o;
          o = g[1];
          g[1] = g[3];
          g[3] = o;
          o = g[4];
          g[4] = g[6];
          g[6] = o;
          o = g[5];
          g[5] = g[7];
          g[7] = o;
        }
        if (this._flipY) {
          var s = g[0];
          g[0] = g[4];
          g[4] = s;
          s = g[1];
          g[1] = g[5];
          g[5] = s;
          s = g[2];
          g[2] = g[6];
          g[6] = s;
          s = g[3];
          g[3] = g[7];
          g[7] = s;
        }
        var t = this.vertices;
        if (t) {
          t.nu.length = 0;
          t.nv.length = 0;
          for (var r = 0; r < t.u.length; r++) {
            t.nu[r] = t.u[r] / e;
            t.nv[r] = t.v[r] / i;
          }
        }
        this._calculateSlicedUV();
      },
      _serialize: false,
      _deserialize: function (d) {
        var a = d.rect;
        if (a) {
          this._rect = new cc.Rect(a[0], a[1], a[2], a[3]);
        }
        if (d.offset) {
          this.setOffset(new cc.Vec2(d.offset[0], d.offset[1]));
        }
        if (d.originalSize) {
          this.setOriginalSize(new cc.Size(d.originalSize[0], d.originalSize[1]));
        }
        this._rotated = d.rotated === 1;
        this._name = d.name;
        var b = d.capInsets;
        if (b) {
          this._capInsets[0] = b[0];
          this._capInsets[1] = b[1];
          this._capInsets[2] = b[2];
          this._capInsets[3] = b[3];
        }
        this.vertices = d.vertices;
        if (this.vertices) {
          this.vertices.nu = [];
          this.vertices.nv = [];
        }
      }
    });
    var c = b.prototype;
    c.copyWithZone = c.clone;
    c.copy = c.clone;
    c.initWithTexture = c.setTexture;
    cc.SpriteFrame = b;
    a.exports = b;
  }, {
    "../assets/CCAsset": 57,
    "../event/event-target": 134
  }],
  70: [function (e, a) {
    "use strict";

    var b = e("./CCFont");
    var c = cc.Class({
      name: "cc.TTFFont",
      extends: b,
      properties: {
        _fontFamily: null,
        _nativeAsset: {
          type: cc.String,
          get: function () {
            return this._fontFamily;
          },
          set: function (b) {
            this._fontFamily = b || "Arial";
          },
          override: true
        },
        _nativeDep: {
          get: function () {
            return {
              uuid: this._uuid,
              __nativeName__: this._native,
              ext: cc.path.extname(this._native),
              __isNative__: true
            };
          },
          override: true
        }
      }
    });
    cc.TTFFont = a.exports = c;
  }, {
    "./CCFont": 61
  }],
  71: [function (d, a) {
    "use strict";

    var b = cc.Class({
      name: "cc.TextAsset",
      extends: cc.Asset,
      properties: {
        text: ""
      },
      toString: function () {
        return this.text;
      }
    });
    a.exports = cc.TextAsset = b;
  }, {}],
  72: [function (i, b) {
    "use strict";

    var g;
    var o = (g = i("../../renderer/gfx")) && g.__esModule ? g : {
      default: g
    };
    var j = i("../event/event-target");
    var k = i("../renderer");
    i("../platform/CCClass");
    var m = new (i("../platform/id-generater"))("Tex");
    var n = 1024;
    var u = cc.Enum({
      RGB565: o.default.TEXTURE_FMT_R5_G6_B5,
      RGB5A1: o.default.TEXTURE_FMT_R5_G5_B5_A1,
      RGBA4444: o.default.TEXTURE_FMT_R4_G4_B4_A4,
      RGB888: o.default.TEXTURE_FMT_RGB8,
      RGBA8888: o.default.TEXTURE_FMT_RGBA8,
      RGBA32F: o.default.TEXTURE_FMT_RGBA32F,
      A8: o.default.TEXTURE_FMT_A8,
      I8: o.default.TEXTURE_FMT_L8,
      AI8: o.default.TEXTURE_FMT_L8_A8,
      RGB_PVRTC_2BPPV1: o.default.TEXTURE_FMT_RGB_PVRTC_2BPPV1,
      RGBA_PVRTC_2BPPV1: o.default.TEXTURE_FMT_RGBA_PVRTC_2BPPV1,
      RGB_A_PVRTC_2BPPV1: n++,
      RGB_PVRTC_4BPPV1: o.default.TEXTURE_FMT_RGB_PVRTC_4BPPV1,
      RGBA_PVRTC_4BPPV1: o.default.TEXTURE_FMT_RGBA_PVRTC_4BPPV1,
      RGB_A_PVRTC_4BPPV1: n++,
      RGB_ETC1: o.default.TEXTURE_FMT_RGB_ETC1,
      RGBA_ETC1: n++,
      RGB_ETC2: o.default.TEXTURE_FMT_RGB_ETC2,
      RGBA_ETC2: o.default.TEXTURE_FMT_RGBA_ETC2,
      RGBA_ASTC_4x4: o.default.TEXTURE_FMT_RGBA_ASTC_4X4,
      RGBA_ASTC_5x4: o.default.TEXTURE_FMT_RGBA_ASTC_5X4,
      RGBA_ASTC_5x5: o.default.TEXTURE_FMT_RGBA_ASTC_5X5,
      RGBA_ASTC_6x5: o.default.TEXTURE_FMT_RGBA_ASTC_6X5,
      RGBA_ASTC_6x6: o.default.TEXTURE_FMT_RGBA_ASTC_6X6,
      RGBA_ASTC_8x5: o.default.TEXTURE_FMT_RGBA_ASTC_8X5,
      RGBA_ASTC_8x6: o.default.TEXTURE_FMT_RGBA_ASTC_8X6,
      RGBA_ASTC_8x8: o.default.TEXTURE_FMT_RGBA_ASTC_8X8,
      RGBA_ASTC_10x5: o.default.TEXTURE_FMT_RGBA_ASTC_10X5,
      RGBA_ASTC_10x6: o.default.TEXTURE_FMT_RGBA_ASTC_10X6,
      RGBA_ASTC_10x8: o.default.TEXTURE_FMT_RGBA_ASTC_10X8,
      RGBA_ASTC_10x10: o.default.TEXTURE_FMT_RGBA_ASTC_10X10,
      RGBA_ASTC_12x10: o.default.TEXTURE_FMT_RGBA_ASTC_12X10,
      RGBA_ASTC_12x12: o.default.TEXTURE_FMT_RGBA_ASTC_12X12
    });
    var p = cc.Enum({
      REPEAT: 10497,
      CLAMP_TO_EDGE: 33071,
      MIRRORED_REPEAT: 33648
    });
    var c = cc.Enum({
      LINEAR: 9729,
      NEAREST: 9728
    });
    var l = {
      9728: 0,
      9729: 1
    };
    var h = [];
    var q = {
      width: undefined,
      height: undefined,
      minFilter: undefined,
      magFilter: undefined,
      wrapS: undefined,
      wrapT: undefined,
      format: undefined,
      genMipmaps: undefined,
      images: undefined,
      image: undefined,
      flipY: undefined,
      premultiplyAlpha: undefined
    };
    function r() {
      for (var b in q) {
        q[b] = undefined;
      }
      h.length = 0;
      q.images = h;
      return q;
    }
    var f = cc.Class({
      name: "cc.Texture2D",
      extends: i("../assets/CCAsset"),
      mixins: [j],
      properties: {
        _nativeAsset: {
          get: function () {
            return this._image;
          },
          set: function (b) {
            if (b._compressed && b._data) {
              this.initWithData(b._data, this._format, b.width, b.height);
            } else {
              this.initWithElement(b);
            }
          },
          override: true
        },
        _format: u.RGBA8888,
        _premultiplyAlpha: false,
        _flipY: false,
        _minFilter: c.LINEAR,
        _magFilter: c.LINEAR,
        _mipFilter: c.LINEAR,
        _wrapS: p.CLAMP_TO_EDGE,
        _wrapT: p.CLAMP_TO_EDGE,
        _isAlphaAtlas: false,
        _genMipmaps: false,
        genMipmaps: {
          get: function () {
            return this._genMipmaps;
          },
          set: function (c) {
            if (this._genMipmaps !== c) {
              var a = r();
              a.genMipmaps = c;
              this.update(a);
            }
          }
        },
        _packable: true,
        packable: {
          get: function () {
            return this._packable;
          },
          set: function (b) {
            this._packable = b;
          }
        },
        _nativeDep: {
          get: function () {
            return {
              __isNative__: true,
              uuid: this._uuid,
              ext: this._native,
              __flipY__: this._flipY,
              __premultiplyAlpha__: this._premultiplyAlpha
            };
          },
          override: true
        }
      },
      statics: {
        PixelFormat: u,
        WrapMode: p,
        Filter: c,
        _FilterIndex: l,
        extnames: [".png", ".jpg", ".jpeg", ".bmp", ".webp", ".pvr", ".pkm", ".astc"],
        _parseExt: function (a, b) {
          for (var c = cc.renderer.device, d = a.split("_"), e = "", g = "", h = 999, o = b, q = cc.macro.SUPPORT_TEXTURE_FORMATS, n = 0; n < d.length; n++) {
            var r = d[n].split("@");
            var s = r[0];
            s = f.extnames[s.charCodeAt(0) - 48] || s;
            var x = q.indexOf(s);
            if (x !== -1 && x < h) {
              var y = r[1] ? parseInt(r[1]) : b;
              if (s === ".astc" && !c.ext("WEBGL_compressed_texture_astc")) {
                continue;
              }
              if (s === ".pvr" && !c.ext("WEBGL_compressed_texture_pvrtc")) {
                continue;
              }
              if (!(y !== u.RGB_ETC1 && y !== u.RGBA_ETC1 || c.ext("WEBGL_compressed_texture_etc1"))) {
                continue;
              }
              if (!(y !== u.RGB_ETC2 && y !== u.RGBA_ETC2 || c.ext("WEBGL_compressed_texture_etc"))) {
                continue;
              }
              if (s === ".webp" && !cc.sys.capabilities.webp) {
                continue;
              }
              h = x;
              g = s;
              o = y;
            } else if (!e) {
              e = s;
            }
          }
          return {
            bestExt: g,
            bestFormat: o,
            defaultExt: e
          };
        }
      },
      ctor: function () {
        this._id = m.getNewId();
        this.loaded = false;
        this.width = 0;
        this.height = 0;
        this._hashDirty = true;
        this._hash = 0;
        this._texture = null;
      },
      getImpl: function () {
        if (!this._texture) {
          this._texture = new k.Texture2D(k.device, {});
        }
        return this._texture;
      },
      getId: function () {
        return this._id;
      },
      toString: function () {
        return this.nativeUrl || "";
      },
      update: function (c) {
        if (c) {
          var a = false;
          if (c.width !== undefined) {
            this.width = c.width;
          }
          if (c.height !== undefined) {
            this.height = c.height;
          }
          if (c.minFilter !== undefined) {
            this._minFilter = c.minFilter;
            c.minFilter = l[c.minFilter];
          }
          if (c.magFilter !== undefined) {
            this._magFilter = c.magFilter;
            c.magFilter = l[c.magFilter];
          }
          if (c.mipFilter !== undefined) {
            this._mipFilter = c.mipFilter;
            c.mipFilter = l[c.mipFilter];
          }
          if (c.wrapS !== undefined) {
            this._wrapS = c.wrapS;
          }
          if (c.wrapT !== undefined) {
            this._wrapT = c.wrapT;
          }
          if (c.format !== undefined) {
            this._format = c.format;
          }
          if (c.flipY !== undefined) {
            this._flipY = c.flipY;
            a = true;
          }
          if (c.premultiplyAlpha !== undefined) {
            this._premultiplyAlpha = c.premultiplyAlpha;
            a = true;
          }
          if (c.genMipmaps !== undefined) {
            this._genMipmaps = c.genMipmaps;
          }
          if (cc.sys.capabilities.imageBitmap && this._image instanceof ImageBitmap) {
            this._checkImageBitmap(this._upload.bind(this, c, a));
          } else {
            this._upload(c, a);
          }
        }
      },
      _upload: function (c, a) {
        if (a && this._image) {
          c.image = this._image;
        }
        if (c.images && c.images.length > 0) {
          this._image = c.images[0];
        } else if (c.image !== undefined) {
          this._image = c.image;
          if (!c.images) {
            h.length = 0;
            c.images = h;
          }
          c.images.push(c.image);
        }
        if (this._texture) {
          this._texture.update(c);
        }
        this._hashDirty = true;
      },
      initWithElement: function (c) {
        if (c) {
          this._image = c;
          if (c.complete || c instanceof HTMLCanvasElement) {
            this.handleLoadedTexture();
          } else if (cc.sys.capabilities.imageBitmap && c instanceof ImageBitmap) {
            this._checkImageBitmap(this.handleLoadedTexture.bind(this));
          } else {
            var a = this;
            c.addEventListener("load", function () {
              a.handleLoadedTexture();
            });
            c.addEventListener("error", function () {});
          }
        }
      },
      initWithData: function (d, a, b, c) {
        var e = r();
        e.image = d;
        e.images = [e.image];
        e.genMipmaps = this._genMipmaps;
        e.premultiplyAlpha = this._premultiplyAlpha;
        e.flipY = this._flipY;
        e.minFilter = l[this._minFilter];
        e.magFilter = l[this._magFilter];
        e.wrapS = this._wrapS;
        e.wrapT = this._wrapT;
        e.format = this._getGFXPixelFormat(a);
        e.width = b;
        e.height = c;
        if (this._texture) {
          this._texture.update(e);
        } else {
          this._texture = new k.Texture2D(k.device, e);
        }
        this.width = b;
        this.height = c;
        this._updateFormat();
        this._checkPackable();
        this.loaded = true;
        this.emit("load");
        return true;
      },
      getHtmlElementObj: function () {
        return this._image;
      },
      destroy: function () {
        if (cc.sys.capabilities.imageBitmap && this._image instanceof ImageBitmap && this._image.close) {
          this._image.close();
        }
        if (this._packable && cc.dynamicAtlasManager) {
          cc.dynamicAtlasManager.deleteAtlasTexture(this);
        }
        this._image = null;
        if (this._texture) {
          this._texture.destroy();
        }
        this._super();
      },
      getPixelFormat: function () {
        return this._format;
      },
      hasPremultipliedAlpha: function () {
        return this._premultiplyAlpha || false;
      },
      isAlphaAtlas: function () {
        return this._isAlphaAtlas;
      },
      handleLoadedTexture: function () {
        if (this._image && this._image.width && this._image.height) {
          this.width = this._image.width;
          this.height = this._image.height;
          var b = r();
          b.image = this._image;
          b.images = [b.image];
          b.width = this.width;
          b.height = this.height;
          b.genMipmaps = this._genMipmaps;
          b.format = this._getGFXPixelFormat(this._format);
          b.premultiplyAlpha = this._premultiplyAlpha;
          b.flipY = this._flipY;
          b.minFilter = l[this._minFilter];
          b.magFilter = l[this._magFilter];
          b.wrapS = this._wrapS;
          b.wrapT = this._wrapT;
          if (this._texture) {
            this._texture.update(b);
          } else {
            this._texture = new k.Texture2D(k.device, b);
          }
          this._updateFormat();
          this._checkPackable();
          this.loaded = true;
          this.emit("load");
          if (cc.macro.CLEANUP_IMAGE_CACHE) {
            this._cleanupImageCache();
          }
        }
      },
      _cleanupImageCache: function () {
        if (this._image instanceof HTMLImageElement) {
          this._clearImage();
        } else if (cc.sys.capabilities.imageBitmap && this._image instanceof ImageBitmap && this._image.close) {
          this._image.close();
        }
      },
      description: function () {
        return "<cc.Texture2D | Name = " + this.nativeUrl + " | Dimensions = " + this.width + " x " + this.height + ">";
      },
      releaseTexture: function () {
        this._image = null;
        if (this._texture) {
          this._texture.destroy();
        }
      },
      setWrapMode: function (d, a) {
        if (this._wrapS !== d || this._wrapT !== a) {
          var b = r();
          b.wrapS = d;
          b.wrapT = a;
          this.update(b);
        }
      },
      setFilters: function (d, a) {
        if (this._minFilter !== d || this._magFilter !== a) {
          var b = r();
          b.minFilter = d;
          b.magFilter = a;
          this.update(b);
        }
      },
      setFlipY: function (c) {
        if (this._flipY !== c) {
          var a = r();
          a.flipY = c;
          a.premultiplyAlpha = this._premultiplyAlpha;
          this.update(a);
        }
      },
      setPremultiplyAlpha: function (c) {
        if (this._premultiplyAlpha !== c) {
          var a = r();
          a.flipY = this._flipY;
          a.premultiplyAlpha = c;
          this.update(a);
        }
      },
      _updateFormat: function () {
        this._isAlphaAtlas = this._format === u.RGBA_ETC1 || this._format === u.RGB_A_PVRTC_4BPPV1 || this._format === u.RGB_A_PVRTC_2BPPV1;
      },
      _checkPackable: function () {
        var d = cc.dynamicAtlasManager;
        if (d) {
          if (this._isCompressed()) {
            this._packable = false;
          } else {
            var a = this.width;
            var b = this.height;
            if (!this._image || a > d.maxFrameSize || b > d.maxFrameSize || this._getHash() !== d.Atlas.DEFAULT_HASH) {
              this._packable = false;
            } else if (this._image && this._image instanceof HTMLCanvasElement) {
              this._packable = true;
            }
          }
        }
      },
      _getOpts: function () {
        var b = r();
        b.width = this.width;
        b.height = this.height;
        b.genMipmaps = this._genMipmaps;
        b.format = this._format;
        b.premultiplyAlpha = this._premultiplyAlpha;
        b.anisotropy = this._anisotropy;
        b.flipY = this._flipY;
        b.minFilter = l[this._minFilter];
        b.magFilter = l[this._magFilter];
        b.mipFilter = l[this._mipFilter];
        b.wrapS = this._wrapS;
        b.wrapT = this._wrapT;
        return b;
      },
      _getGFXPixelFormat: function (b) {
        if (b === u.RGBA_ETC1) {
          b = u.RGB_ETC1;
        } else if (b === u.RGB_A_PVRTC_4BPPV1) {
          b = u.RGB_PVRTC_4BPPV1;
        } else if (b === u.RGB_A_PVRTC_2BPPV1) {
          b = u.RGB_PVRTC_2BPPV1;
        }
        return b;
      },
      _resetUnderlyingMipmaps: function (c) {
        var a = this._getOpts();
        a.images = c || [null];
        if (this._texture) {
          this._texture.update(a);
        } else {
          this._texture = new k.Texture2D(k.device, a);
        }
      },
      _serialize: false,
      _deserialize: function (e) {
        var a = e.split(",");
        var b = a[0];
        if (b) {
          var c = f._parseExt(b, this._format);
          if (c.bestExt) {
            this._setRawAsset(c.bestExt);
            this._format = c.bestFormat;
          } else {
            if (!c.defaultExt) {
              throw Error(cc.debug.getError(3121));
            }
            this._setRawAsset(c.defaultExt);
          }
        }
        if (a.length === 8) {
          this._minFilter = parseInt(a[1]);
          this._magFilter = parseInt(a[2]);
          this._wrapS = parseInt(a[3]);
          this._wrapT = parseInt(a[4]);
          this._premultiplyAlpha = a[5].charCodeAt(0) === 49;
          this._genMipmaps = a[6].charCodeAt(0) === 49;
          this._packable = a[7].charCodeAt(0) === 49;
        }
      },
      _getHash: function () {
        if (!this._hashDirty) {
          return this._hash;
        }
        var j = this._genMipmaps ? 1 : 0;
        var b = this._premultiplyAlpha ? 1 : 0;
        var d = this._flipY ? 1 : 0;
        var e = this._minFilter === c.LINEAR ? 1 : 2;
        var f = this._magFilter === c.LINEAR ? 1 : 2;
        var g = this._wrapS === p.REPEAT ? 1 : this._wrapS === p.CLAMP_TO_EDGE ? 2 : 3;
        var h = this._wrapT === p.REPEAT ? 1 : this._wrapT === p.CLAMP_TO_EDGE ? 2 : 3;
        var i = this._format;
        this._image;
        this._hash = +("" + e + f + i + g + h + j + b + d);
        this._hashDirty = false;
        return this._hash;
      },
      _isCompressed: function () {
        return this._format < u.A8 || this._format > u.RGBA32F;
      },
      _clearImage: function () {
        this._image.src = "";
      },
      _checkImageBitmap: function (g) {
        var a = this;
        var b = this._image;
        var c = this._flipY;
        var d = this._premultiplyAlpha;
        if (this._flipY !== b.flipY || this._premultiplyAlpha !== b.premultiplyAlpha) {
          createImageBitmap(b, {
            imageOrientation: c !== b.flipY ? "flipY" : "none",
            premultiplyAlpha: d ? "premultiply" : "none"
          }).then(function (e) {
            if (b.close) {
              b.close();
            }
            e.flipY = c;
            e.premultiplyAlpha = d;
            a._image = e;
            g();
          }, function () {});
        } else {
          g();
        }
      }
    });
    cc.Texture2D = b.exports = f;
  }, {
    "../../renderer/gfx": 282,
    "../assets/CCAsset": 57,
    "../event/event-target": 134,
    "../platform/CCClass": 162,
    "../platform/id-generater": 179,
    "../renderer": 193
  }],
  73: [function (f, a) {
    "use strict";

    var b = f("./CCAsset");
    var c = f("../event/event-target");
    var d = cc.Class({
      name: "cc.VideoClip",
      extends: b,
      mixins: [c]
    });
    cc.VideoClip = d;
    a.exports = d;
  }, {
    "../event/event-target": 134,
    "./CCAsset": 57
  }],
  74: [function (b) {
    "use strict";

    b("./CCAsset");
    b("./CCFont");
    b("./CCPrefab");
    b("./CCAudioClip");
    b("./CCVideoClip");
    b("./CCScripts");
    b("./CCSceneAsset");
    b("./CCSpriteFrame");
    b("./CCTexture2D");
    b("./CCRenderTexture");
    b("./CCTTFFont");
    b("./CCSpriteAtlas");
    b("./CCBitmapFont");
    b("./CCLabelAtlas");
    b("./CCTextAsset");
    b("./CCJsonAsset");
    b("./CCBufferAsset");
    b("./material");
  }, {
    "./CCAsset": 57,
    "./CCAudioClip": 58,
    "./CCBitmapFont": 59,
    "./CCBufferAsset": 60,
    "./CCFont": 61,
    "./CCJsonAsset": 62,
    "./CCLabelAtlas": 63,
    "./CCPrefab": 64,
    "./CCRenderTexture": 65,
    "./CCSceneAsset": 66,
    "./CCScripts": 67,
    "./CCSpriteAtlas": 68,
    "./CCSpriteFrame": 69,
    "./CCTTFFont": 70,
    "./CCTextAsset": 71,
    "./CCTexture2D": 72,
    "./CCVideoClip": 73,
    "./material": 81
  }],
  75: [function (g, a) {
    "use strict";

    var b;
    var h = (b = g("../CCAsset")) && b.__esModule ? b : {
      default: b
    };
    var d = g("./effect-parser");
    var e = cc.Class({
      name: "cc.EffectAsset",
      extends: h.default,
      ctor: function () {
        this._effect = null;
      },
      properties: {
        properties: Object,
        techniques: [],
        shaders: []
      },
      onLoad: function () {
        if (cc.game.renderType !== cc.game.RENDER_TYPE_CANVAS) {
          for (var c = cc.renderer._forward._programLib, a = 0; a < this.shaders.length; a++) {
            c.define(this.shaders[a]);
          }
          this._initEffect();
        }
      },
      _initEffect: function () {
        if (!this._effect) {
          this._effect = (0, d.parseEffect)(this);
          Object.freeze(this._effect);
        }
      },
      getInstantiatedEffect: function () {
        this._initEffect();
        return this._effect.clone();
      },
      getEffect: function () {
        this._initEffect();
        return this._effect;
      }
    });
    a.exports = cc.EffectAsset = e;
  }, {
    "../CCAsset": 57,
    "./effect-parser": 78
  }],
  76: [function (k, b, d) {
    "use strict";

    d.__esModule = true;
    d.default = undefined;
    var e = k("../CCAsset");
    var l = k("../CCTexture2D");
    l.PixelFormat;
    var f = k("./CCEffectAsset");
    k("../../utils/texture-util");
    var g = cc.gfx;
    var h = cc.Enum({
      SPRITE: "2d-sprite",
      GRAY_SPRITE: "2d-gray-sprite",
      UNLIT: "unlit"
    });
    var i = cc.Class({
      name: "cc.Material",
      extends: e,
      ctor: function () {
        this.loaded = false;
        this._manualHash = false;
        this._dirty = true;
        this._effect = null;
      },
      properties: {
        _defines: {
          default: undefined,
          type: Object
        },
        _props: {
          default: undefined,
          type: Object
        },
        _effectAsset: {
          type: f,
          default: null
        },
        _techniqueIndex: 0,
        _techniqueData: Object,
        effectName: undefined,
        effectAsset: {
          get: function () {
            return this._effectAsset;
          },
          set: function (b) {
            if (cc.game.renderType !== cc.game.RENDER_TYPE_CANVAS) {
              this._effectAsset = b;
              if (b) {
                this._effect = this._effectAsset.getInstantiatedEffect();
              }
            }
          }
        },
        effect: {
          get: function () {
            return this._effect;
          }
        },
        techniqueIndex: {
          get: function () {
            return this._techniqueIndex;
          },
          set: function (b) {
            this._techniqueIndex = b;
            this._effect.switchTechnique(b);
          }
        }
      },
      statics: {
        getBuiltinMaterial: function (b) {
          if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {
            return new cc.Material();
          } else {
            return cc.assetManager.builtins.getBuiltin("material", "builtin-" + b);
          }
        },
        BUILTIN_NAME: h,
        createWithBuiltin: function (d, a) {
          if (a === undefined) {
            a = 0;
          }
          var e = cc.assetManager.builtins.getBuiltin("effect", "builtin-" + d);
          return i.create(e, a);
        },
        create: function (d, a) {
          if (a === undefined) {
            a = 0;
          }
          if (!d) {
            return null;
          }
          var e = new i();
          e.effectAsset = d;
          e.techniqueIndex = a;
          return e;
        }
      },
      setProperty: function (g, b, c, i) {
        if (cc.game.renderType !== cc.game.RENDER_TYPE_CANVAS) {
          if (typeof c == "string") {
            c = parseInt(c);
          }
          if (b instanceof l) {
            var e = b.isAlphaAtlas();
            var f = "CC_USE_ALPHA_ATLAS_" + g;
            var h = this.getDefine(f, c);
            if (e || h) {
              this.define(f, e);
            }
            if (!b.loaded) {
              cc.assetManager.postLoadNative(b);
            }
          }
          this._effect.setProperty(g, b, c, i);
        }
      },
      getProperty: function (c, a) {
        if (typeof a == "string") {
          a = parseInt(a);
        }
        return this._effect.getProperty(c, a);
      },
      define: function (e, a, b, f) {
        if (cc.game.renderType !== cc.game.RENDER_TYPE_CANVAS) {
          if (typeof b == "string") {
            b = parseInt(b);
          }
          this._effect.define(e, a, b, f);
        }
      },
      getDefine: function (c, a) {
        if (typeof a == "string") {
          a = parseInt(a);
        }
        return this._effect.getDefine(c, a);
      },
      setCullMode: function (c, d) {
        if (c === undefined) {
          c = g.CULL_BACK;
        }
        this._effect.setCullMode(c, d);
      },
      setDepth: function (e, f, h, i) {
        if (e === undefined) {
          e = false;
        }
        if (f === undefined) {
          f = false;
        }
        if (h === undefined) {
          h = g.DS_FUNC_LESS;
        }
        this._effect.setDepth(e, f, h, i);
      },
      setBlend: function (c, e, i, l, n, o, p, q, r) {
        if (c === undefined) {
          c = false;
        }
        if (e === undefined) {
          e = g.BLEND_FUNC_ADD;
        }
        if (i === undefined) {
          i = g.BLEND_SRC_ALPHA;
        }
        if (l === undefined) {
          l = g.BLEND_ONE_MINUS_SRC_ALPHA;
        }
        if (n === undefined) {
          n = g.BLEND_FUNC_ADD;
        }
        if (o === undefined) {
          o = g.BLEND_SRC_ALPHA;
        }
        if (p === undefined) {
          p = g.BLEND_ONE_MINUS_SRC_ALPHA;
        }
        if (q === undefined) {
          q = 4294967295;
        }
        this._effect.setBlend(c, e, i, l, n, o, p, q, r);
      },
      setStencilEnabled: function (c, d) {
        if (c === undefined) {
          c = g.STENCIL_INHERIT;
        }
        this._effect.setStencilEnabled(c, d);
      },
      setStencil: function (c, e, i, l, n, o, p, q, r) {
        if (c === undefined) {
          c = g.STENCIL_INHERIT;
        }
        if (e === undefined) {
          e = g.DS_FUNC_ALWAYS;
        }
        if (i === undefined) {
          i = 0;
        }
        if (l === undefined) {
          l = 255;
        }
        if (n === undefined) {
          n = g.STENCIL_OP_KEEP;
        }
        if (o === undefined) {
          o = g.STENCIL_OP_KEEP;
        }
        if (p === undefined) {
          p = g.STENCIL_OP_KEEP;
        }
        if (q === undefined) {
          q = 255;
        }
        this._effect.setStencil(c, e, i, l, n, o, p, q, r);
      },
      updateHash: function (b) {
        this._manualHash = b;
        if (this._effect) {
          this._effect.updateHash(b);
        }
      },
      getHash: function () {
        return this._manualHash || this._effect && this._effect.getHash();
      },
      onLoad: function () {
        this.effectAsset = this._effectAsset;
        if (this._effect) {
          if (this._techniqueIndex) {
            this._effect.switchTechnique(this._techniqueIndex);
          }
          this._techniqueData = this._techniqueData || {};
          var e = this._techniqueData;
          for (var a in e) {
            var g = e[a = parseInt(a)];
            if (g) {
              for (var h in g.defines) {
                this.define(h, g.defines[h], a);
              }
              for (var i in g.props) {
                this.setProperty(i, g.props[i], a);
              }
            }
          }
        }
      }
    });
    var a = i;
    d.default = a;
    cc.Material = i;
    b.exports = d.default;
  }, {
    "../../utils/texture-util": 244,
    "../CCAsset": 57,
    "../CCTexture2D": 72,
    "./CCEffectAsset": 75
  }],
  77: [function (c, b, d) {
    "use strict";

    d.__esModule = true;
    d.default = undefined;
    var k = e(c("../../../renderer/core/pass"));
    var f = e(c("../../../renderer/enums"));
    function e(b) {
      if (b && b.__esModule) {
        return b;
      } else {
        return {
          default: b
        };
      }
    }
    function g(e, a) {
      for (var b = 0; b < a.length; b++) {
        var f = a[b];
        f.enumerable = f.enumerable || false;
        f.configurable = true;
        if ("value" in f) {
          f.writable = true;
        }
        Object.defineProperty(e, f.key, f);
      }
    }
    var h = cc.gfx;
    var a = function () {
      function a() {
        this._dirty = true;
        this._name = "";
        this._technique = null;
      }
      var b;
      var e;
      var i = a.prototype;
      i._createPassProp = function (e, a) {
        var b = a._properties[e];
        if (b) {
          var c = Object.create(null);
          c.name = e;
          c.type = b.type;
          if (b.value instanceof Float32Array) {
            c.value = new Float32Array(b.value);
          } else if (b.value instanceof Float64Array) {
            c.value = new Float64Array(b.value);
          } else {
            c.value = b.value;
          }
          a._properties[e] = c;
          return c;
        }
      };
      i._setPassProperty = function (c, b, d, e) {
        var g = d._properties;
        if (!g.hasOwnProperty(c)) {
          this._createPassProp(c, d);
        }
        var h = g[c];
        var a = b;
        if (h.type === f.default.PARAM_TEXTURE_2D) {
          a = b && b.getImpl();
        }
        return h.value === a || (this._dirty = true, k.default.prototype.setProperty.call(d, c, b, e));
      };
      i.setProperty = function (a, b, c, d) {
        var e = this.passes;
        var f = 0;
        var j = e.length;
        if (c !== undefined) {
          f = c;
          j = c + 1;
        }
        for (var k = f; k < j; k++) {
          this._setPassProperty(a, b, e[k], d);
        }
      };
      i.getProperty = function (a, b) {
        var c = this.passes;
        if (!(b >= c.length)) {
          var d = 0;
          var i = c.length;
          if (b !== undefined) {
            d = b;
            i = b + 1;
          }
          for (var j = d; j < i; j++) {
            var k = c[j].getProperty(a);
            if (k !== undefined) {
              return k;
            }
          }
        }
      };
      i.define = function (a, b, c, d) {
        var e = this.passes;
        var f = 0;
        var j = e.length;
        if (c !== undefined) {
          f = c;
          j = c + 1;
        }
        for (var k = f; k < j; k++) {
          e[k].define(a, b, d);
        }
      };
      i.getDefine = function (a, b) {
        var c = this.passes;
        if (!(b >= c.length)) {
          var d = 0;
          var i = c.length;
          if (b !== undefined) {
            d = b;
            i = b + 1;
          }
          for (var j = d; j < i; j++) {
            var k = c[j].getDefine(a);
            if (k !== undefined) {
              return k;
            }
          }
        }
      };
      i.setCullMode = function (a, i) {
        if (a === undefined) {
          a = h.CULL_BACK;
        }
        var c = this.passes;
        var d = 0;
        var j = c.length;
        if (i !== undefined) {
          d = i;
          j = i + 1;
        }
        for (var k = d; k < j; k++) {
          c[k].setCullMode(a);
        }
        this._dirty = true;
      };
      i.setDepth = function (a, b, c, d) {
        var e = this.passes;
        var f = 0;
        var j = e.length;
        if (d !== undefined) {
          f = d;
          j = d + 1;
        }
        for (var k = f; k < j; k++) {
          e[k].setDepth(a, b, c);
        }
        this._dirty = true;
      };
      i.setBlend = function (f, b, d, e, g, h, i, j, a) {
        var k = this.passes;
        var c = 0;
        var m = k.length;
        if (a !== undefined) {
          c = a;
          m = a + 1;
        }
        for (var p = c; p < m; p++) {
          k[p].setBlend(f, b, d, e, g, h, i, j);
        }
        this._dirty = true;
      };
      i.setStencilEnabled = function (a, i) {
        if (a === undefined) {
          a = h.STENCIL_INHERIT;
        }
        var c = this.passes;
        var d = 0;
        var j = c.length;
        if (i !== undefined) {
          d = i;
          j = i + 1;
        }
        for (var k = d; k < j; k++) {
          c[k].setStencilEnabled(a);
        }
        this._dirty = true;
      };
      i.setStencil = function (d, b, f, e, g, h, i, j, a) {
        var k = this.passes;
        var c = 0;
        var m = k.length;
        if (a !== undefined) {
          c = a;
          m = a + 1;
        }
        for (var n = c; n < m; n++) {
          var r = k[n];
          r.setStencilFront(d, b, f, e, g, h, i, j);
          r.setStencilBack(d, b, f, e, g, h, i, j);
        }
        this._dirty = true;
      };
      b = a;
      if (e = [{
        key: "name",
        get: function () {
          return this._name;
        }
      }, {
        key: "technique",
        get: function () {
          return this._technique;
        }
      }, {
        key: "passes",
        get: function () {
          return [];
        }
      }]) {
        g(b.prototype, e);
      }
      Object.defineProperty(b, "prototype", {
        writable: false
      });
      return a;
    }();
    d.default = a;
    cc.EffectBase = a;
    b.exports = d.default;
  }, {
    "../../../renderer/core/pass": 273,
    "../../../renderer/enums": 277
  }],
  78: [function (f, b, d) {
    "use strict";

    d.__esModule = true;
    d.parseEffect = function (c) {
      var a = h(c);
      return new i.default(c.name, a, 0, c);
    };
    var e = k(f("../../../renderer/core/pass"));
    var o = f("../../../renderer/types");
    var g = k(f("../../../renderer/enums"));
    var i = k(f("./effect"));
    var j = k(f("../../../renderer/core/technique"));
    function k(b) {
      if (b && b.__esModule) {
        return b;
      } else {
        return {
          default: b
        };
      }
    }
    function n(b) {
      return cc.renderer._forward._programLib.getTemplate(b);
    }
    function a(c, b) {
      var j = b.properties || {};
      var d = n(b.program);
      function e(c) {
        if (!d.uniforms.find(function (a) {
          return a.name === c;
        })) {
          return "continue";
        }
      }
      for (var f in j) {
        e(f);
      }
      var k = {};
      d.uniforms.forEach(function (e) {
        var b;
        var f = e.name;
        var d = k[f] = Object.assign({}, e);
        var h = j[f];
        if ((b = h ? h.type === g.default.PARAM_TEXTURE_2D ? null : h.type === g.default.PARAM_INT || h.type === g.default.PARAM_FLOAT ? Array.isArray(h.value) ? h.value[0] : h.value : new Float32Array(h.value) : o.enums2default[e.type]) === undefined) {
          b = null;
        }
        d.value = b;
      });
      return k;
    }
    function c(c) {
      var d = {};
      n(c.program).defines.forEach(function (b) {
        d[b.name] = o.enums2default[b.type];
      });
      return d;
    }
    function h(d) {
      for (var b = d.techniques.length, f = Array(b), g = 0; g < b; ++g) {
        for (var h = d.techniques[g], i = h.name || g, l = h.passes.length, m = Array(l), n = 0; n < l; ++n) {
          var p = h.passes[n];
          var r = p.name || n;
          var s = d.name + "-" + i + "-" + r;
          var v = p.stage || "opaque";
          var y = a(0, p);
          var E = c(p);
          var I = m[n] = new e.default(r, s, p.program, v, y, E);
          if (p.rasterizerState) {
            I.setCullMode(p.rasterizerState.cullMode);
          }
          var J = p.blendState && p.blendState.targets[0];
          if (J) {
            I.setBlend(J.blend, J.blendEq, J.blendSrc, J.blendDst, J.blendAlphaEq, J.blendSrcAlpha, J.blendDstAlpha, J.blendColor);
          }
          var K = p.depthStencilState;
          if (K) {
            I.setDepth(K.depthTest, K.depthWrite, K.depthFunc);
            I.setStencilFront(K.stencilTest, K.stencilFuncFront, K.stencilRefFront, K.stencilMaskFront, K.stencilFailOpFront, K.stencilZFailOpFront, K.stencilZPassOpFront, K.stencilWriteMaskFront);
            I.setStencilBack(K.stencilTest, K.stencilFuncBack, K.stencilRefBack, K.stencilMaskBack, K.stencilFailOpBack, K.stencilZFailOpBack, K.stencilZPassOpBack, K.stencilWriteMaskBack);
          }
        }
        f[g] = new j.default(i, m);
      }
      return f;
    }
  }, {
    "../../../renderer/core/pass": 273,
    "../../../renderer/core/technique": 275,
    "../../../renderer/enums": 277,
    "../../../renderer/types": 305,
    "./effect": 80
  }],
  79: [function (c, b, d) {
    "use strict";

    d.__esModule = true;
    d.default = undefined;
    var e = h(c("../../../renderer/murmurhash2_gc"));
    var f = h(c("./utils"));
    var g = h(c("./effect-base"));
    function h(b) {
      if (b && b.__esModule) {
        return b;
      } else {
        return {
          default: b
        };
      }
    }
    function i(e, a) {
      for (var b = 0; b < a.length; b++) {
        var f = a[b];
        f.enumerable = f.enumerable || false;
        f.configurable = true;
        if ("value" in f) {
          f.writable = true;
        }
        Object.defineProperty(e, f.key, f);
      }
    }
    function j(c, a) {
      return (j = Object.setPrototypeOf || function (c, a) {
        c.__proto__ = a;
        return c;
      })(c, a);
    }
    cc.gfx;
    var l = function (g) {
      var a;
      var b;
      function h(b) {
        var a;
        (a = g.call(this) || this)._effect = undefined;
        a._passes = [];
        a._stagePasses = {};
        a._hash = 0;
        a.init(b);
        return a;
      }
      b = g;
      (a = h).prototype = Object.create(b.prototype);
      a.prototype.constructor = a;
      j(a, b);
      var k;
      var l;
      var m = h.prototype;
      m._onEffectChanged = function () {};
      m.init = function (a) {
        if (a instanceof h) {
          a = a.effect;
        }
        this._effect = a;
        this._dirty = true;
        if (a) {
          var i = a.passes;
          var c = this._passes;
          c.length = 0;
          for (var d = this._stagePasses = {}, e = 0; e < i.length; e++) {
            var j = c[e] = Object.setPrototypeOf({}, i[e]);
            j._properties = Object.setPrototypeOf({}, i[e]._properties);
            j._defines = Object.setPrototypeOf({}, i[e]._defines);
            if (!d[j._stage]) {
              d[j._stage] = [];
            }
            d[j._stage].push(j);
          }
        }
      };
      m.updateHash = function () {};
      m.getHash = function () {
        if (!this._dirty) {
          return this._hash;
        }
        this._dirty = false;
        var c = "";
        c += f.default.serializePasses(this._passes);
        var d = this._effect;
        if (d) {
          c += f.default.serializePasses(d.passes);
        }
        this._hash = (0, e.default)(c, 666);
        this.updateHash(this._hash);
        return this._hash;
      };
      k = h;
      if (l = [{
        key: "effect",
        get: function () {
          return this._effect;
        }
      }, {
        key: "name",
        get: function () {
          return this._effect && this._effect.name + " (variant)";
        }
      }, {
        key: "passes",
        get: function () {
          return this._passes;
        }
      }, {
        key: "stagePasses",
        get: function () {
          return this._stagePasses;
        }
      }]) {
        i(k.prototype, l);
      }
      Object.defineProperty(k, "prototype", {
        writable: false
      });
      return h;
    }(g.default);
    d.default = l;
    cc.EffectVariant = l;
    b.exports = d.default;
  }, {
    "../../../renderer/murmurhash2_gc": 300,
    "./effect-base": 77,
    "./utils": 84
  }],
  80: [function (a, b, c) {
    "use strict";

    var d;
    function i(e, a) {
      for (var b = 0; b < a.length; b++) {
        var f = a[b];
        f.enumerable = f.enumerable || false;
        f.configurable = true;
        if ("value" in f) {
          f.writable = true;
        }
        Object.defineProperty(e, f.key, f);
      }
    }
    function f(c, a) {
      return (f = Object.setPrototypeOf || function (c, a) {
        c.__proto__ = a;
        return c;
      })(c, a);
    }
    c.__esModule = true;
    c.default = undefined;
    var j = function (g) {
      var a;
      var b;
      function e(b, a, c, d) {
        var e;
        (e = g.call(this) || this)._techniques = [];
        e._asset = null;
        e.init(b, a, c, d, true);
        return e;
      }
      b = g;
      (a = e).prototype = Object.create(b.prototype);
      a.prototype.constructor = a;
      f(a, b);
      var c;
      var j;
      var n = e.prototype;
      n.init = function (e, a, b, c) {
        this._name = e;
        this._techniques = a;
        this._technique = a[b];
        this._asset = c;
      };
      n.switchTechnique = function (b) {
        if (!(b >= this._techniques.length)) {
          this._technique = this._techniques[b];
        }
      };
      n.clear = function () {
        this._techniques = [];
      };
      n.clone = function () {
        for (var d = [], a = 0; a < this._techniques.length; a++) {
          d.push(this._techniques[a].clone());
        }
        var f = this._techniques.indexOf(this._technique);
        return new e(this._name, d, f, this._asset);
      };
      c = e;
      if (j = [{
        key: "technique",
        get: function () {
          return this._technique;
        }
      }, {
        key: "passes",
        get: function () {
          return this._technique.passes;
        }
      }]) {
        i(c.prototype, j);
      }
      Object.defineProperty(c, "prototype", {
        writable: false
      });
      return e;
    }(((d = a("./effect-base")) && d.__esModule ? d : {
      default: d
    }).default);
    c.default = j;
    cc.Effect = j;
    b.exports = c.default;
  }, {
    "./effect-base": 77
  }],
  81: [function (b) {
    "use strict";

    b("./CCEffectAsset");
    b("./CCMaterial");
    b("./material-variant");
  }, {
    "./CCEffectAsset": 75,
    "./CCMaterial": 76,
    "./material-variant": 83
  }],
  82: [function (a, b, c) {
    "use strict";

    c.__esModule = true;
    c.default = undefined;
    var l = e(a("./utils"));
    var d = e(a("../../utils/pool"));
    function e(b) {
      if (b && b.__esModule) {
        return b;
      } else {
        return {
          default: b
        };
      }
    }
    function f(c, a) {
      return (f = Object.setPrototypeOf || function (c, a) {
        c.__proto__ = a;
        return c;
      })(c, a);
    }
    var g = new (function (e) {
      var a;
      var h;
      function i() {
        for (var a, g = arguments.length, c = Array(g), d = 0; d < g; d++) {
          c[d] = arguments[d];
        }
        (a = e.call.apply(e, [this].concat(c)) || this).enabled = false;
        a._pool = {};
        return a;
      }
      h = e;
      (a = i).prototype = Object.create(h.prototype);
      a.prototype.constructor = a;
      f(a, h);
      var d = i.prototype;
      d.get = function (a, f) {
        var c;
        var i = this._pool;
        if (a instanceof cc.MaterialVariant) {
          if (!a._owner) {
            a._owner = f;
            return a;
          }
          if (a._owner === f) {
            return a;
          }
          a = a.material;
        }
        if (this.enabled) {
          var e = a.effectAsset._uuid;
          if (i[e]) {
            var g = l.default.serializeDefines(a._effect._defines) + l.default.serializeTechniques(a._effect._techniques);
            c = i[e][g] && i[e][g].pop();
          }
        }
        if (c) {
          this.count--;
        } else {
          (c = new cc.MaterialVariant(a))._name = a._name + " (Instance)";
          c._uuid = a._uuid;
        }
        c._owner = f;
        return c;
      };
      d.put = function (e) {
        if (this.enabled && e._owner) {
          var a = this._pool;
          var b = e.effectAsset._uuid;
          if (!a[b]) {
            a[b] = {};
          }
          var c = l.default.serializeDefines(e._effect._defines) + l.default.serializeTechniques(e._effect._techniques);
          if (!a[b][c]) {
            a[b][c] = [];
          }
          if (!(this.count > this.maxSize)) {
            this._clean(e);
            a[b][c].push(e);
            this.count++;
          }
        }
      };
      d.clear = function () {
        this._pool = {};
        this.count = 0;
      };
      d._clean = function (b) {
        b._owner = null;
      };
      return i;
    }(d.default))();
    d.default.register("material", g);
    var h = g;
    c.default = h;
    b.exports = c.default;
  }, {
    "../../utils/pool": 238,
    "./utils": 84
  }],
  83: [function (h, b, d) {
    "use strict";

    d.__esModule = true;
    d.default = undefined;
    var e;
    var l = j(h("./CCMaterial"));
    var g = j(h("./effect-variant"));
    var i = j(h("./material-pool"));
    function j(b) {
      if (b && b.__esModule) {
        return b;
      } else {
        return {
          default: b
        };
      }
    }
    function a(e, a) {
      for (var b = 0; b < a.length; b++) {
        var f = a[b];
        f.enumerable = f.enumerable || false;
        f.configurable = true;
        if ("value" in f) {
          f.writable = true;
        }
        Object.defineProperty(e, f.key, f);
      }
    }
    function k(c, a) {
      return (k = Object.setPrototypeOf || function (c, a) {
        c.__proto__ = a;
        return c;
      })(c, a);
    }
    var n = (0, cc._decorator.ccclass)("cc.MaterialVariant")(e = function (e) {
      var c;
      var h;
      var j;
      var n;
      function o(a) {
        var b;
        (b = e.call(this) || this)._owner = null;
        b._material = null;
        b.init(a);
        return b;
      }
      h = e;
      (c = o).prototype = Object.create(h.prototype);
      c.prototype.constructor = c;
      k(c, h);
      o.createWithBuiltin = function (c, a) {
        return o.create(l.default.getBuiltinMaterial(c), a);
      };
      o.create = function (c, a) {
        if (c) {
          return i.default.get(c, a);
        } else {
          return null;
        }
      };
      o.prototype.init = function (b) {
        this._effect = new g.default(b.effect);
        this._effectAsset = b._effectAsset;
        this._material = b;
      };
      j = o;
      if (n = [{
        key: "uuid",
        get: function () {
          return this._material._uuid;
        }
      }, {
        key: "owner",
        get: function () {
          return this._owner;
        }
      }, {
        key: "material",
        get: function () {
          return this._material;
        }
      }]) {
        a(j.prototype, n);
      }
      Object.defineProperty(j, "prototype", {
        writable: false
      });
      return o;
    }(l.default)) || e;
    d.default = n;
    cc.MaterialVariant = n;
    b.exports = d.default;
  }, {
    "./CCMaterial": 76,
    "./effect-variant": 79,
    "./material-pool": 82
  }],
  84: [function (c, b, d) {
    "use strict";

    d.__esModule = true;
    d.default = undefined;
    var e;
    var l = (e = c("../../../renderer/enums")) && e.__esModule ? e : {
      default: e
    };
    var g = [];
    function h(f, a) {
      for (var b = a.length, c = 0; c < b; c++) {
        var h = a[c];
        g[c] = h + f[h];
      }
      g.length = b;
      return g.join("");
    }
    function i(c, b) {
      for (var d = 0, h = 0, i = b.length; h < i; h++) {
        var j = c[b[h]];
        var m = j.value;
        if (m) {
          if (j.type === l.default.PARAM_TEXTURE_2D || j.type === l.default.PARAM_TEXTURE_CUBE) {
            g[d] = m._id;
          } else {
            g[d] = m.toString();
          }
          d++;
        }
      }
      g.length = d;
      return g.join(";");
    }
    var a = {
      serializeDefines: h,
      serializePasses: function (a) {
        for (var b, e, j = "", k = 0; k < a.length; k++) {
          undefined;
          e = undefined;
          e = (b = a[k])._programName + b._cullMode;
          if (b._blend) {
            e += b._blendEq + b._blendAlphaEq + b._blendSrc + b._blendDst + b._blendSrcAlpha + b._blendDstAlpha + b._blendColor;
          }
          if (b._depthTest) {
            e += b._depthWrite + b._depthFunc;
          }
          if (b._stencilTest) {
            e += b._stencilFuncFront + b._stencilRefFront + b._stencilMaskFront + b._stencilFailOpFront + b._stencilZFailOpFront + b._stencilZPassOpFront + b._stencilWriteMaskFront + b._stencilFuncBack + b._stencilRefBack + b._stencilMaskBack + b._stencilFailOpBack + b._stencilZFailOpBack + b._stencilZPassOpBack + b._stencilWriteMaskBack;
          }
          e += i(b._properties, b._propertyNames);
          j += e += h(b._defines, b._defineNames);
        }
        return j;
      },
      serializeUniforms: i
    };
    d.default = a;
    b.exports = d.default;
  }, {
    "../../../renderer/enums": 277
  }],
  85: [function (f, b) {
    "use strict";

    f("../CCNode").EventType;
    var p = 56;
    var j = 7;
    var i = cc.Enum({
      ONCE: 0,
      ON_WINDOW_RESIZE: 1,
      ALWAYS: 2
    });
    function d(a, b, c, d) {
      var e = a._parent.scaleX;
      var f = a._parent.scaleY;
      var h = 0;
      var l = 0;
      var o = a._parent;
      for (;;) {
        h += o.x;
        l += o.y;
        if (!(o = o._parent)) {
          c.x = c.y = 0;
          d.x = d.y = 1;
          return;
        }
        if (o === b) {
          break;
        }
        var q = o.scaleX;
        var r = o.scaleY;
        h *= q;
        l *= r;
        e *= q;
        f *= r;
      }
      d.x = e !== 0 ? 1 / e : 1;
      d.y = f !== 0 ? 1 / f : 1;
      c.x = -h;
      c.y = -l;
    }
    var e = cc.Vec2.ZERO;
    var g = cc.Vec2.ONE;
    function k(a, b) {
      var c;
      var i;
      var k;
      var l = b._target;
      if (l) {
        d(a, c = l, i = e, k = g);
      } else {
        c = a._parent;
      }
      var m;
      var n = (m = c) instanceof cc.Scene ? cc.visibleRect : m._contentSize;
      var o = c._anchorPoint;
      var f = c instanceof cc.Scene;
      var r = a.x;
      var u = a.y;
      var v = a._anchorPoint;
      if (b._alignFlags & p) {
        var w;
        var x;
        var y = n.width;
        if (f) {
          w = cc.visibleRect.left.x;
          x = cc.visibleRect.right.x;
        } else {
          x = (w = -o.x * y) + y;
        }
        w += b._isAbsLeft ? b._left : b._left * y;
        x -= b._isAbsRight ? b._right : b._right * y;
        if (l) {
          w += i.x;
          w *= k.x;
          x += i.x;
          x *= k.x;
        }
        var z;
        var A = v.x;
        var B = a.scaleX;
        if (B < 0) {
          A = 1 - A;
          B = -B;
        }
        if (b.isStretchWidth) {
          z = x - w;
          if (B !== 0) {
            a.width = z / B;
          }
          r = w + A * z;
        } else {
          z = a.width * B;
          if (b.isAlignHorizontalCenter) {
            var C = b._isAbsHorizontalCenter ? b._horizontalCenter : b._horizontalCenter * y;
            var E = (0.5 - o.x) * n.width;
            if (l) {
              C *= k.x;
              E += i.x;
              E *= k.x;
            }
            r = E + (A - 0.5) * z + C;
          } else {
            r = b.isAlignLeft ? w + A * z : x + (A - 1) * z;
          }
        }
      }
      if (b._alignFlags & j) {
        var G;
        var I;
        var J = n.height;
        if (f) {
          I = cc.visibleRect.bottom.y;
          G = cc.visibleRect.top.y;
        } else {
          G = (I = -o.y * J) + J;
        }
        I += b._isAbsBottom ? b._bottom : b._bottom * J;
        G -= b._isAbsTop ? b._top : b._top * J;
        if (l) {
          I += i.y;
          I *= k.y;
          G += i.y;
          G *= k.y;
        }
        var L;
        var O = v.y;
        var P = a.scaleY;
        if (P < 0) {
          O = 1 - O;
          P = -P;
        }
        if (b.isStretchHeight) {
          L = G - I;
          if (P !== 0) {
            a.height = L / P;
          }
          u = I + O * L;
        } else {
          L = a.height * P;
          if (b.isAlignVerticalCenter) {
            var R = b._isAbsVerticalCenter ? b._verticalCenter : b._verticalCenter * J;
            var S = (0.5 - o.y) * n.height;
            if (l) {
              R *= k.y;
              S += i.y;
              S *= k.y;
            }
            u = S + (O - 0.5) * L + R;
          } else {
            u = b.isAlignBottom ? I + O * L : G + (O - 1) * L;
          }
        }
      }
      a.setPosition(r, u);
    }
    function m(c) {
      var a = c._widget;
      if (a) {
        k(c, a);
        if (a.alignMode !== i.ALWAYS) {
          h.remove(a);
        } else {
          l.push(a);
        }
      }
      for (var b = c._children, d = 0; d < b.length; d++) {
        var g = b[d];
        if (g._active) {
          m(g);
        }
      }
    }
    function c() {
      var c = cc.director.getScene();
      if (c) {
        h.isAligning = true;
        if (h._nodesOrderDirty) {
          l.length = 0;
          m(c);
          h._nodesOrderDirty = false;
        } else {
          var a;
          var e = h._activeWidgetsIterator;
          for (e.i = 0; e.i < l.length; ++e.i) {
            k((a = l[e.i]).node, a);
          }
        }
        h.isAligning = false;
      }
    }
    var l = [];
    var h = cc._widgetManager = b.exports = {
      _AlignFlags: {
        TOP: 1,
        MID: 2,
        BOT: 4,
        LEFT: 8,
        CENTER: 16,
        RIGHT: 32
      },
      isAligning: false,
      _nodesOrderDirty: false,
      _activeWidgetsIterator: new cc.js.array.MutableForwardIterator(l),
      init: function (d) {
        d.on(cc.Director.EVENT_AFTER_UPDATE, c);
        var a = this.onResized.bind(this);
        cc.view.on("canvas-resize", a);
        window.addEventListener("orientationchange", a);
      },
      add: function (b) {
        b.node._widget = b;
        this._nodesOrderDirty = true;
      },
      remove: function (b) {
        b.node._widget = null;
        this._activeWidgetsIterator.remove(b);
      },
      onResized: function () {
        var b = cc.director.getScene();
        if (b) {
          this.refreshWidgetOnResized(b);
        }
      },
      refreshWidgetOnResized: function (f) {
        var a = cc.Node.isNode(f) && f.getComponent(cc.Widget);
        if (a && a.enabled && a.alignMode === i.ON_WINDOW_RESIZE) {
          this.add(a);
        }
        for (var b = f._children, c = 0; c < b.length; c++) {
          var g = b[c];
          this.refreshWidgetOnResized(g);
        }
      },
      updateAlignment: function a(e) {
        var b = e._parent;
        if (cc.Node.isNode(b)) {
          a(b);
        }
        var c = e._widget || e.getComponent(cc.Widget);
        if (c && b) {
          k(e, c);
        }
      },
      AlignMode: i
    };
  }, {
    "../CCNode": 26
  }],
  86: [function (c, b) {
    "use strict";

    var j = c("../value-types");
    var k = c("../geom-utils");
    var e = c("../utils/affine-transform");
    var i = c("../renderer/index");
    var n = c("../renderer/render-flow");
    var q = c("../CCGame");
    var a = null;
    a = c("../../renderer/scene/camera");
    var t = cc.mat4();
    var v = cc.mat4();
    var l = cc.v3();
    var h = cc.v3();
    var r = cc.v3();
    var w = [];
    function d() {
      for (var d = 0, e = Number.MAX_VALUE; d < w.length; d++) {
        var f = w[d];
        if (f._depth < e) {
          m.main = f;
          e = f._depth;
        }
      }
    }
    var f = null;
    function s() {
      if (f) {
        var c = f.getNode();
        var a = cc.game.canvas;
        c.z = a.height / 1.1566;
        c.x = a.width / 2;
        c.y = a.height / 2;
      }
    }
    var u = cc.Enum({
      COLOR: 1,
      DEPTH: 2,
      STENCIL: 4
    });
    var g = cc.Enum({
      OPAQUE: 1,
      TRANSPARENT: 2
    });
    var m = cc.Class({
      name: "cc.Camera",
      extends: cc.Component,
      ctor: function () {
        if (q.renderType !== q.RENDER_TYPE_CANVAS) {
          var c = new a();
          c.setStages(["opaque"]);
          c.dirty = true;
          this._inited = false;
          this._camera = c;
        } else {
          this._inited = true;
        }
      },
      editor: false,
      properties: {
        _cullingMask: 4294967295,
        _clearFlags: u.DEPTH | u.STENCIL,
        _backgroundColor: cc.color(0, 0, 0, 255),
        _depth: 0,
        _zoomRatio: 1,
        _targetTexture: null,
        _fov: 60,
        _orthoSize: 10,
        _nearClip: 1,
        _farClip: 4096,
        _ortho: true,
        _rect: cc.rect(0, 0, 1, 1),
        _renderStages: 1,
        _alignWithScreen: true,
        zoomRatio: {
          get: function () {
            return this._zoomRatio;
          },
          set: function (b) {
            this._zoomRatio = b;
          },
          tooltip: false
        },
        fov: {
          get: function () {
            return this._fov;
          },
          set: function (b) {
            this._fov = b;
          },
          tooltip: false
        },
        orthoSize: {
          get: function () {
            return this._orthoSize;
          },
          set: function (b) {
            this._orthoSize = b;
          },
          tooltip: false
        },
        nearClip: {
          get: function () {
            return this._nearClip;
          },
          set: function (b) {
            this._nearClip = b;
            this._updateClippingpPlanes();
          },
          tooltip: false
        },
        farClip: {
          get: function () {
            return this._farClip;
          },
          set: function (b) {
            this._farClip = b;
            this._updateClippingpPlanes();
          },
          tooltip: false
        },
        ortho: {
          get: function () {
            return this._ortho;
          },
          set: function (b) {
            this._ortho = b;
            this._updateProjection();
          },
          tooltip: false
        },
        rect: {
          get: function () {
            return this._rect;
          },
          set: function (b) {
            this._rect = b;
            this._updateRect();
          },
          tooltip: false
        },
        cullingMask: {
          get: function () {
            return this._cullingMask;
          },
          set: function (b) {
            this._cullingMask = b;
            this._updateCameraMask();
          },
          tooltip: false
        },
        clearFlags: {
          get: function () {
            return this._clearFlags;
          },
          set: function (b) {
            this._clearFlags = b;
            if (this._camera) {
              this._camera.setClearFlags(b);
            }
          },
          tooltip: false
        },
        backgroundColor: {
          get: function () {
            return this._backgroundColor;
          },
          set: function (b) {
            if (!this._backgroundColor.equals(b)) {
              this._backgroundColor.set(b);
              this._updateBackgroundColor();
            }
          },
          tooltip: false
        },
        depth: {
          get: function () {
            return this._depth;
          },
          set: function (b) {
            if (m.main === this) {
              if (this._depth < b) {
                d();
              }
            } else if (m.main && b < m.main._depth && w.includes(this)) {
              m.main = this;
            }
            this._depth = b;
            if (this._camera) {
              this._camera.setPriority(b);
            }
          },
          tooltip: false
        },
        targetTexture: {
          get: function () {
            return this._targetTexture;
          },
          set: function (b) {
            this._targetTexture = b;
            this._updateTargetTexture();
          },
          tooltip: false
        },
        renderStages: {
          get: function () {
            return this._renderStages;
          },
          set: function (b) {
            this._renderStages = b;
            this._updateStages();
          },
          tooltip: false
        },
        alignWithScreen: {
          get: function () {
            return this._alignWithScreen;
          },
          set: function (b) {
            this._alignWithScreen = b;
          }
        },
        _is3D: {
          get: function () {
            return this.node && this.node._is3DNode;
          }
        }
      },
      statics: {
        main: null,
        cameras: w,
        ClearFlags: u,
        findCamera: function (d) {
          for (var a = 0, e = w.length; a < e; a++) {
            var c = w[a];
            if (c.containsNode(d)) {
              return c;
            }
          }
          return null;
        },
        _findRendererCamera: function (d) {
          for (var a = i.scene._cameras, b = 0; b < a._count; b++) {
            if (a._data[b]._cullingMask & d._cullingMask) {
              return a._data[b];
            }
          }
          return null;
        },
        _setupDebugCamera: function () {
          if (!f && q.renderType !== q.RENDER_TYPE_CANVAS) {
            var d = new a();
            f = d;
            d.setStages(["opaque"]);
            d.setFov(Math.PI * 60 / 180);
            d.setNear(0.1);
            d.setFar(4096);
            d.dirty = true;
            d.cullingMask = 1 << cc.Node.BuiltinGroupIndex.DEBUG;
            d.setPriority(cc.macro.MAX_ZINDEX);
            d.setClearFlags(0);
            d.setColor(0, 0, 0, 0);
            var b = new cc.Node();
            d.setNode(b);
            s();
            cc.view.on("design-resolution-changed", s);
            i.scene.addCamera(d);
          }
        }
      },
      _updateCameraMask: function () {
        if (this._camera) {
          var b = this._cullingMask & ~(1 << cc.Node.BuiltinGroupIndex.DEBUG);
          this._camera.cullingMask = b;
        }
      },
      _updateBackgroundColor: function () {
        if (this._camera) {
          var b = this._backgroundColor;
          this._camera.setColor(b.r / 255, b.g / 255, b.b / 255, b.a / 255);
        }
      },
      _updateTargetTexture: function () {
        if (this._camera) {
          var b = this._targetTexture;
          this._camera.setFrameBuffer(b ? b._framebuffer : null);
        }
      },
      _updateClippingpPlanes: function () {
        if (this._camera) {
          this._camera.setNear(this._nearClip);
          this._camera.setFar(this._farClip);
        }
      },
      _updateProjection: function () {
        if (this._camera) {
          var b = this._ortho ? 1 : 0;
          this._camera.setType(b);
        }
      },
      _updateRect: function () {
        if (this._camera) {
          var b = this._rect;
          this._camera.setRect(b.x, b.y, b.width, b.height);
        }
      },
      _updateStages: function () {
        var c = this._renderStages;
        var a = [];
        if (c & g.OPAQUE) {
          a.push("opaque");
        }
        if (c & g.TRANSPARENT) {
          a.push("transparent");
        }
        this._camera.setStages(a);
      },
      _init: function () {
        if (!this._inited) {
          this._inited = true;
          var b = this._camera;
          if (b) {
            b.setNode(this.node);
            b.setClearFlags(this._clearFlags);
            b.setPriority(this._depth);
            this._updateBackgroundColor();
            this._updateCameraMask();
            this._updateTargetTexture();
            this._updateClippingpPlanes();
            this._updateProjection();
            this._updateStages();
            this._updateRect();
            this.beforeDraw();
          }
        }
      },
      __preload: function () {
        this._init();
      },
      onEnable: function () {
        if (q.renderType !== q.RENDER_TYPE_CANVAS) {
          cc.director.on(cc.Director.EVENT_BEFORE_DRAW, this.beforeDraw, this);
          i.scene.addCamera(this._camera);
        }
        w.push(this);
        if (!m.main || this._depth < m.main._depth) {
          m.main = this;
        }
      },
      onDisable: function () {
        if (q.renderType !== q.RENDER_TYPE_CANVAS) {
          cc.director.off(cc.Director.EVENT_BEFORE_DRAW, this.beforeDraw, this);
          i.scene.removeCamera(this._camera);
        }
        cc.js.array.fastRemove(w, this);
        if (m.main === this) {
          m.main = null;
          d();
        }
      },
      getScreenToWorldMatrix2D: function (b) {
        this.getWorldToScreenMatrix2D(b);
        j.Mat4.invert(b, b);
        return b;
      },
      getWorldToScreenMatrix2D: function (a) {
        this.node.getWorldRT(t);
        var b = this.zoomRatio;
        var c = t.m;
        c[0] *= b;
        c[1] *= b;
        c[4] *= b;
        c[5] *= b;
        var d = c[12];
        var e = c[13];
        var f = cc.visibleRect.center;
        c[12] = f.x - (c[0] * d + c[4] * e);
        c[13] = f.y - (c[1] * d + c[5] * e);
        if (a !== t) {
          j.Mat4.copy(a, t);
        }
        return a;
      },
      getScreenToWorldPoint: function (c, a) {
        if (this.node.is3DNode) {
          a = a || new cc.Vec3();
          this._camera.screenToWorld(a, c, cc.visibleRect.width, cc.visibleRect.height);
        } else {
          a = a || new cc.Vec2();
          this.getScreenToWorldMatrix2D(t);
          j.Vec2.transformMat4(a, c, t);
        }
        return a;
      },
      getWorldToScreenPoint: function (c, a) {
        if (this.node.is3DNode) {
          a = a || new cc.Vec3();
          this._camera.worldToScreen(a, c, cc.visibleRect.width, cc.visibleRect.height);
        } else {
          a = a || new cc.Vec2();
          this.getWorldToScreenMatrix2D(t);
          j.Vec2.transformMat4(a, c, t);
        }
        return a;
      },
      getRay: function (b) {
        if (cc.geomUtils) {
          j.Vec3.set(r, b.x, b.y, 1);
          this._camera.screenToWorld(h, r, cc.visibleRect.width, cc.visibleRect.height);
          if (this.ortho) {
            j.Vec3.set(r, b.x, b.y, -1);
            this._camera.screenToWorld(l, r, cc.visibleRect.width, cc.visibleRect.height);
          } else {
            this.node.getWorldPosition(l);
          }
          return k.Ray.fromPoints(new k.Ray(), l, h);
        } else {
          return b;
        }
      },
      containsNode: function (b) {
        return (b._cullingMask & this.cullingMask) > 0;
      },
      render: function (b) {
        if (!(b = b || cc.director.getScene())) {
          return null;
        }
        this.node.getWorldMatrix(t);
        this.beforeDraw();
        n.renderCamera(this._camera, b);
      },
      _onAlignWithScreen: function () {
        var c = cc.game.canvas.height / cc.view._scaleY;
        if (this._targetTexture) {
          c = cc.visibleRect.height;
        }
        var d = this._fov * cc.macro.RAD;
        this.node.z = c / (Math.tan(d / 2) * 2);
        d = Math.atan(Math.tan(d / 2) / this.zoomRatio) * 2;
        this._camera.setFov(d);
        this._camera.setOrthoHeight(c / 2 / this.zoomRatio);
        this.node.setRotation(0, 0, 0, 1);
      },
      beforeDraw: function () {
        if (this._camera) {
          if (this._alignWithScreen) {
            this._onAlignWithScreen();
          } else {
            var b = this._fov * cc.macro.RAD;
            b = Math.atan(Math.tan(b / 2) / this.zoomRatio) * 2;
            this._camera.setFov(b);
            this._camera.setOrthoHeight(this._orthoSize / this.zoomRatio);
          }
          this._camera.dirty = true;
        }
      }
    });
    cc.js.mixin(m.prototype, {
      getNodeToCameraTransform: function (c) {
        var a = e.identity();
        c.getWorldMatrix(v);
        if (this.containsNode(c)) {
          this.getWorldToCameraMatrix(t);
          j.Mat4.mul(v, v, t);
        }
        e.fromMat4(a, v);
        return a;
      },
      getCameraToWorldPoint: function (c, a) {
        return this.getScreenToWorldPoint(c, a);
      },
      getWorldToCameraPoint: function (c, a) {
        return this.getWorldToScreenPoint(c, a);
      },
      getCameraToWorldMatrix: function (b) {
        return this.getScreenToWorldMatrix2D(b);
      },
      getWorldToCameraMatrix: function (b) {
        return this.getWorldToScreenMatrix2D(b);
      }
    });
    b.exports = cc.Camera = m;
  }, {
    "../../renderer/scene/camera": 302,
    "../CCGame": 25,
    "../geom-utils": 142,
    "../renderer/index": 193,
    "../renderer/render-flow": 194,
    "../utils/affine-transform": 227,
    "../value-types": 251
  }],
  87: [function (d, a) {
    "use strict";

    cc.Collider.Box = cc.Class({
      properties: {
        _offset: cc.v2(0, 0),
        _size: cc.size(100, 100),
        offset: {
          tooltip: false,
          get: function () {
            return this._offset;
          },
          set: function (b) {
            this._offset = b;
          },
          type: cc.Vec2
        },
        size: {
          tooltip: false,
          get: function () {
            return this._size;
          },
          set: function (b) {
            this._size.width = b.width < 0 ? 0 : b.width;
            this._size.height = b.height < 0 ? 0 : b.height;
          },
          type: cc.Size
        }
      },
      resetInEditor: false
    });
    var b = cc.Class({
      name: "cc.BoxCollider",
      extends: cc.Collider,
      mixins: [cc.Collider.Box],
      editor: false
    });
    cc.BoxCollider = a.exports = b;
  }, {}],
  88: [function (d, a) {
    "use strict";

    cc.Collider.Circle = cc.Class({
      properties: {
        _offset: cc.v2(0, 0),
        _radius: 50,
        offset: {
          tooltip: false,
          get: function () {
            return this._offset;
          },
          set: function (b) {
            this._offset = b;
          },
          type: cc.Vec2
        },
        radius: {
          tooltip: false,
          get: function () {
            return this._radius;
          },
          set: function (b) {
            this._radius = b < 0 ? 0 : b;
          }
        }
      },
      resetInEditor: false
    });
    var b = cc.Class({
      name: "cc.CircleCollider",
      extends: cc.Collider,
      mixins: [cc.Collider.Circle],
      editor: false
    });
    cc.CircleCollider = a.exports = b;
  }, {}],
  89: [function (d, a) {
    "use strict";

    var b = cc.Class({
      name: "cc.Collider",
      extends: cc.Component,
      properties: {
        editing: {
          default: false,
          serializable: false,
          tooltip: false
        },
        tag: {
          tooltip: false,
          default: 0,
          range: [0, 10000000],
          type: cc.Integer
        }
      },
      onDisable: function () {
        cc.director.getCollisionManager().removeCollider(this);
      },
      onEnable: function () {
        cc.director.getCollisionManager().addCollider(this);
      }
    });
    cc.Collider = a.exports = b;
  }, {}],
  90: [function (i, b) {
    "use strict";

    var d;
    var l = (d = i("../value-types/vec2")) && d.__esModule ? d : {
      default: d
    };
    var m = i("./CCContact");
    var n = m.CollisionType;
    var g = i("../CCNode").EventType;
    var f = new l.default();
    function a(v, b, j, e, i, k) {
      var n = v.x;
      var q = v.y;
      var a = v.width;
      var o = v.height;
      var c = b.m;
      var l = c[0];
      var h = c[1];
      var r = c[4];
      var f = c[5];
      var d = l * n + r * q + c[12];
      var s = h * n + f * q + c[13];
      var p = l * a;
      var t = h * a;
      var g = r * o;
      var m = f * o;
      e.x = d;
      e.y = s;
      i.x = p + d;
      i.y = t + s;
      j.x = g + d;
      j.y = m + s;
      k.x = p + g + d;
      k.y = t + m + s;
    }
    var h = cc.Class({
      mixins: [cc.EventTarget],
      properties: {
        enabled: false,
        enabledDrawBoundingBox: false
      },
      ctor: function () {
        this._contacts = [];
        this._colliders = [];
        this._debugDrawer = null;
        this._enabledDebugDraw = false;
        if (cc.director._scheduler) {
          cc.director._scheduler.enableForTarget(this);
        }
      },
      update: function () {
        if (this.enabled) {
          var a;
          var e;
          var h = this._colliders;
          a = 0;
          e = h.length;
          for (; a < e; a++) {
            this.updateCollider(h[a]);
          }
          var d = this._contacts;
          var f = [];
          a = 0;
          e = d.length;
          for (; a < e; a++) {
            var g = d[a].updateState();
            if (g !== n.None) {
              f.push([g, d[a]]);
            }
          }
          a = 0;
          e = f.length;
          for (; a < e; a++) {
            var k = f[a];
            this._doCollide(k[0], k[1]);
          }
          this.drawColliders();
        }
      },
      _doCollide: function (a, b) {
        var d;
        switch (a) {
          case n.CollisionEnter:
            d = "onCollisionEnter";
            break;
          case n.CollisionStay:
            d = "onCollisionStay";
            break;
          case n.CollisionExit:
            d = "onCollisionExit";
        }
        var h;
        var i;
        var o;
        var p = b.collider1;
        var k = b.collider2;
        var m = p.node._components;
        var c = k.node._components;
        h = 0;
        i = m.length;
        for (; h < i; h++) {
          if ((o = m[h])[d]) {
            o[d](k, p);
          }
        }
        h = 0;
        i = c.length;
        for (; h < i; h++) {
          if ((o = c[h])[d]) {
            o[d](p, k);
          }
        }
      },
      shouldCollide: function (f, a) {
        var b = f.node;
        var c = a.node;
        var d = cc.game.collisionMatrix;
        return b !== c && d[b.groupIndex][c.groupIndex];
      },
      initCollider: function (c) {
        if (!c.world) {
          var a = c.world = {};
          a.aabb = cc.rect();
          a.preAabb = cc.rect();
          a.matrix = cc.mat4();
          a.radius = 0;
          if (c instanceof cc.BoxCollider) {
            a.position = null;
            a.points = [cc.v2(), cc.v2(), cc.v2(), cc.v2()];
          } else if (c instanceof cc.PolygonCollider) {
            a.position = null;
            a.points = c.points.map(function (b) {
              return cc.v2(b.x, b.y);
            });
          } else if (c instanceof cc.CircleCollider) {
            a.position = cc.v2();
            a.points = null;
          }
        }
      },
      updateCollider: function (b) {
        var c = b.offset;
        var j = b.world;
        var e = j.aabb;
        var i = j.matrix;
        b.node.getWorldMatrix(i);
        var k = j.preAabb;
        k.x = e.x;
        k.y = e.y;
        k.width = e.width;
        k.height = e.height;
        if (b instanceof cc.BoxCollider) {
          var n = b.size;
          e.x = c.x - n.width / 2;
          e.y = c.y - n.height / 2;
          e.width = n.width;
          e.height = n.height;
          var o = j.points;
          var q = o[0];
          var h = o[1];
          var r = o[2];
          var s = o[3];
          a(e, i, q, h, r, s);
          var d = Math.min(q.x, h.x, r.x, s.x);
          var t = Math.min(q.y, h.y, r.y, s.y);
          var p = Math.max(q.x, h.x, r.x, s.x);
          var u = Math.max(q.y, h.y, r.y, s.y);
          e.x = d;
          e.y = t;
          e.width = p - d;
          e.height = u - t;
        } else if (b instanceof cc.CircleCollider) {
          l.default.transformMat4(f, b.offset, i);
          j.position.x = f.x;
          j.position.y = f.y;
          var g = i.m;
          var m = g[12];
          var v = g[13];
          g[12] = g[13] = 0;
          f.x = b.radius;
          f.y = 0;
          l.default.transformMat4(f, f, i);
          var w = Math.sqrt(f.x * f.x + f.y * f.y);
          j.radius = w;
          e.x = j.position.x - w;
          e.y = j.position.y - w;
          e.width = w * 2;
          e.height = w * 2;
          g[12] = m;
          g[13] = v;
        } else if (b instanceof cc.PolygonCollider) {
          var y = b.points;
          var z = j.points;
          z.length = y.length;
          for (var x = 1000000, A = 1000000, J = -1000000, K = -1000000, L = 0, M = y.length; L < M; L++) {
            if (!z[L]) {
              z[L] = cc.v2();
            }
            f.x = y[L].x + c.x;
            f.y = y[L].y + c.y;
            l.default.transformMat4(f, f, i);
            var G = f.x;
            var N = f.y;
            z[L].x = G;
            z[L].y = N;
            if (G > J) {
              J = G;
            }
            if (G < x) {
              x = G;
            }
            if (N > K) {
              K = N;
            }
            if (N < A) {
              A = N;
            }
          }
          e.x = x;
          e.y = A;
          e.width = J - x;
          e.height = K - A;
        }
      },
      addCollider: function (h) {
        var a = this._colliders;
        if (a.indexOf(h) === -1) {
          for (var b = 0, i = a.length; b < i; b++) {
            var d = a[b];
            if (this.shouldCollide(h, d)) {
              var j = new m(h, d);
              this._contacts.push(j);
            }
          }
          a.push(h);
          this.initCollider(h);
        }
        h.node.on(g.GROUP_CHANGED, this.onNodeGroupChanged, this);
      },
      removeCollider: function (h) {
        var a = this._colliders;
        var b = a.indexOf(h);
        if (b >= 0) {
          a.splice(b, 1);
          for (var c = this._contacts, d = c.length - 1; d >= 0; d--) {
            var i = c[d];
            if (!(i.collider1 !== h && i.collider2 !== h)) {
              if (i.touching) {
                this._doCollide(n.CollisionExit, i);
              }
              c.splice(d, 1);
            }
          }
          h.node.off(g.GROUP_CHANGED, this.onNodeGroupChanged, this);
        }
      },
      onNodeGroupChanged: function (f) {
        for (var a = f.getComponents(cc.Collider), b = 0, g = a.length; b < g; b++) {
          var d = a[b];
          if (!(cc.PhysicsCollider && d instanceof cc.PhysicsCollider)) {
            this.removeCollider(d);
            this.addCollider(d);
          }
        }
      },
      drawColliders: function () {
        if (this._enabledDebugDraw) {
          this._checkDebugDrawValid();
          var a = this._debugDrawer;
          a.clear();
          for (var b = this._colliders, c = 0, i = b.length; c < i; c++) {
            var e = b[c];
            a.strokeColor = cc.Color.WHITE;
            if (e instanceof cc.BoxCollider || e instanceof cc.PolygonCollider) {
              var k = e.world.points;
              if (k.length > 0) {
                a.moveTo(k[0].x, k[0].y);
                for (var l = 1; l < k.length; l++) {
                  a.lineTo(k[l].x, k[l].y);
                }
                a.close();
                a.stroke();
              }
            } else if (e instanceof cc.CircleCollider) {
              a.circle(e.world.position.x, e.world.position.y, e.world.radius);
              a.stroke();
            }
            if (this.enabledDrawBoundingBox) {
              var m = e.world.aabb;
              a.strokeColor = cc.Color.BLUE;
              a.moveTo(m.xMin, m.yMin);
              a.lineTo(m.xMin, m.yMax);
              a.lineTo(m.xMax, m.yMax);
              a.lineTo(m.xMax, m.yMin);
              a.close();
              a.stroke();
            }
          }
        }
      },
      _checkDebugDrawValid: function () {
        if (!this._debugDrawer || !this._debugDrawer.isValid) {
          var b = new cc.Node("COLLISION_MANAGER_DEBUG_DRAW");
          b.zIndex = cc.macro.MAX_ZINDEX;
          cc.game.addPersistRootNode(b);
          this._debugDrawer = b.addComponent(cc.Graphics);
        }
      }
    });
    cc.js.getset(h.prototype, "enabledDebugDraw", function () {
      return this._enabledDebugDraw;
    }, function (b) {
      if (b && !this._enabledDebugDraw) {
        this._checkDebugDrawValid();
        this._debugDrawer.node.active = true;
      } else if (!b && this._enabledDebugDraw) {
        this._debugDrawer.clear(true);
        this._debugDrawer.node.active = false;
      }
      this._enabledDebugDraw = b;
    });
    cc.CollisionManager = b.exports = h;
  }, {
    "../CCNode": 26,
    "../value-types/vec2": 260,
    "./CCContact": 91
  }],
  91: [function (f, a) {
    "use strict";

    var g = f("./CCIntersection");
    var c = cc.Enum({
      None: 0,
      CollisionEnter: 1,
      CollisionStay: 2,
      CollisionExit: 3
    });
    function b(a, b) {
      this.collider1 = a;
      this.collider2 = b;
      this.touching = false;
      var c = a instanceof cc.BoxCollider || a instanceof cc.PolygonCollider;
      var d = b instanceof cc.BoxCollider || b instanceof cc.PolygonCollider;
      var e = a instanceof cc.CircleCollider;
      var f = b instanceof cc.CircleCollider;
      if (c && d) {
        this.testFunc = g.polygonPolygon;
      } else if (e && f) {
        this.testFunc = g.circleCircle;
      } else if (c && f) {
        this.testFunc = g.polygonCircle;
      } else if (e && d) {
        this.testFunc = g.polygonCircle;
        this.collider1 = b;
        this.collider2 = a;
      }
    }
    b.prototype.test = function () {
      var c = this.collider1.world;
      var a = this.collider2.world;
      return !!c.aabb.intersects(a.aabb) && (this.testFunc === g.polygonPolygon ? this.testFunc(c.points, a.points) : this.testFunc === g.circleCircle ? this.testFunc(c, a) : this.testFunc === g.polygonCircle && this.testFunc(c.points, a));
    };
    b.prototype.updateState = function () {
      var d = this.test();
      var a = c.None;
      if (d && !this.touching) {
        this.touching = true;
        a = c.CollisionEnter;
      } else if (d && this.touching) {
        a = c.CollisionStay;
      } else if (!d && this.touching) {
        this.touching = false;
        a = c.CollisionExit;
      }
      return a;
    };
    b.CollisionType = c;
    a.exports = b;
  }, {
    "./CCIntersection": 92
  }],
  92: [function (a, b) {
    "use strict";

    var c = {};
    function i(c, b, d, e) {
      var f = (e.x - d.x) * (c.y - d.y) - (e.y - d.y) * (c.x - d.x);
      var g = (b.x - c.x) * (c.y - d.y) - (b.y - c.y) * (c.x - d.x);
      var h = (e.y - d.y) * (b.x - c.x) - (e.x - d.x) * (b.y - c.y);
      if (h !== 0) {
        var i = f / h;
        var a = g / h;
        if (i >= 0 && i <= 1 && a >= 0 && a <= 1) {
          return true;
        }
      }
      return false;
    }
    function l(f, a, b) {
      for (var c = b.length, d = 0; d < c; ++d) {
        if (i(f, a, b[d], b[(d + 1) % c])) {
          return true;
        }
      }
      return false;
    }
    function g(a, b) {
      for (var c = false, d = a.x, f = a.y, g = b.length, h = 0, i = g - 1; h < g; i = h++) {
        var j = b[h].x;
        var l = b[h].y;
        var o = b[i].x;
        var s = b[i].y;
        if (l > f != s > f && d < (o - j) * (f - l) / (s - l) + j) {
          c = !c;
        }
      }
      return c;
    }
    function e(a, b, c, d) {
      var e;
      var f = c.x - b.x;
      var l = c.y - b.y;
      var m = f * f + l * l;
      var j = ((a.x - b.x) * f + (a.y - b.y) * l) / m;
      e = d ? m ? j < 0 ? b : j > 1 ? c : cc.v2(b.x + j * f, b.y + j * l) : b : cc.v2(b.x + j * f, b.y + j * l);
      f = a.x - e.x;
      l = a.y - e.y;
      return Math.sqrt(f * f + l * l);
    }
    c.lineLine = i;
    c.lineRect = function (f, b, c) {
      var d = new cc.Vec2(c.x, c.y);
      var e = new cc.Vec2(c.x, c.yMax);
      var g = new cc.Vec2(c.xMax, c.yMax);
      var h = new cc.Vec2(c.xMax, c.y);
      return !!(i(f, b, d, e) || i(f, b, e, g) || i(f, b, g, h) || i(f, b, h, d));
    };
    c.linePolygon = l;
    c.rectRect = function (k, b) {
      var d = k.x;
      var e = k.y;
      var f = k.x + k.width;
      var g = k.y + k.height;
      var h = b.x;
      var i = b.y;
      var a = b.x + b.width;
      var j = b.y + b.height;
      return d <= a && f >= h && e <= j && g >= i;
    };
    c.rectPolygon = function (h, b) {
      var d;
      var i;
      var m = new cc.Vec2(h.x, h.y);
      var j = new cc.Vec2(h.x, h.yMax);
      var a = new cc.Vec2(h.xMax, h.yMax);
      var k = new cc.Vec2(h.xMax, h.y);
      if (l(m, j, b)) {
        return true;
      }
      if (l(j, a, b)) {
        return true;
      }
      if (l(a, k, b)) {
        return true;
      }
      if (l(k, m, b)) {
        return true;
      }
      d = 0;
      i = b.length;
      for (; d < i; ++d) {
        if (g(b[d], h)) {
          return true;
        }
      }
      return !!(g(m, b) || g(j, b) || g(a, b) || g(k, b));
    };
    c.polygonPolygon = function (e, a) {
      var b;
      var f;
      b = 0;
      f = e.length;
      for (; b < f; ++b) {
        if (l(e[b], e[(b + 1) % f], a)) {
          return true;
        }
      }
      b = 0;
      f = a.length;
      for (; b < f; ++b) {
        if (g(a[b], e)) {
          return true;
        }
      }
      b = 0;
      f = e.length;
      for (; b < f; ++b) {
        if (g(e[b], a)) {
          return true;
        }
      }
      return false;
    };
    c.circleCircle = function (c, a) {
      return c.position.sub(a.position).mag() < c.radius + a.radius;
    };
    c.polygonCircle = function (f, a) {
      var b = a.position;
      if (g(b, f)) {
        return true;
      }
      for (var c = 0, h = f.length; c < h; c++) {
        if (e(b, c === 0 ? f[f.length - 1] : f[c - 1], f[c], true) < a.radius) {
          return true;
        }
      }
      return false;
    };
    c.pointInPolygon = g;
    c.pointLineDistance = e;
    cc.Intersection = b.exports = c;
  }, {}],
  93: [function (d, a) {
    "use strict";

    cc.Collider.Polygon = cc.Class({
      properties: {
        threshold: {
          default: 1,
          serializable: false,
          visible: false
        },
        _offset: cc.v2(0, 0),
        offset: {
          get: function () {
            return this._offset;
          },
          set: function (b) {
            this._offset = b;
          },
          type: cc.Vec2
        },
        points: {
          tooltip: false,
          default: function () {
            return [cc.v2(-50, -50), cc.v2(50, -50), cc.v2(50, 50), cc.v2(-50, 50)];
          },
          type: [cc.Vec2]
        }
      },
      resetPointsByContour: false
    });
    var b = cc.Class({
      name: "cc.PolygonCollider",
      extends: cc.Collider,
      mixins: [cc.Collider.Polygon],
      editor: false
    });
    cc.PolygonCollider = a.exports = b;
  }, {}],
  94: [function (b) {
    "use strict";

    b("./CCCollisionManager");
    b("./CCCollider");
    b("./CCBoxCollider");
    b("./CCCircleCollider");
    b("./CCPolygonCollider");
  }, {
    "./CCBoxCollider": 87,
    "./CCCircleCollider": 88,
    "./CCCollider": 89,
    "./CCCollisionManager": 90,
    "./CCPolygonCollider": 93
  }],
  95: [function (g, b) {
    "use strict";

    g("./platform/CCClass");
    var j = g("./platform/CCObject").Flags;
    var e = g("./platform/js").array;
    var i = j.IsStartCalled;
    var k = j.IsOnEnableCalled;
    function m(a, b) {
      for (var c = b.constructor._executionOrder, d = b._id, e = 0, f = a.length - 1, l = f >>> 1; e <= f; l = e + f >>> 1) {
        var n = a[l];
        var o = n.constructor._executionOrder;
        if (o > c) {
          f = l - 1;
        } else if (o < c) {
          e = l + 1;
        } else {
          var p = n._id;
          if (p > d) {
            f = l - 1;
          } else {
            if (!(p < d)) {
              return l;
            }
            e = l + 1;
          }
        }
      }
      return ~e;
    }
    function q(f, a) {
      for (var b = f.array, c = f.i + 1; c < b.length;) {
        var g = b[c];
        if (g._enabled && g.node && g.node._activeInHierarchy) {
          ++c;
        } else {
          f.removeAt(c);
          if (a) {
            g._objFlags &= ~a;
          }
        }
      }
    }
    j.IsEditorOnEnableCalled;
    var a = cc.Class({
      __ctor__: function (c) {
        var a = e.MutableForwardIterator;
        this._zero = new a([]);
        this._neg = new a([]);
        this._pos = new a([]);
        this._invoke = c;
      },
      statics: {
        stableRemoveInactive: q
      },
      add: null,
      remove: null,
      invoke: null
    });
    function n(c, a) {
      return c.constructor._executionOrder - a.constructor._executionOrder;
    }
    var c = cc.Class({
      extends: a,
      add: function (c) {
        var a = c.constructor._executionOrder;
        (a === 0 ? this._zero : a < 0 ? this._neg : this._pos).array.push(c);
      },
      remove: function (c) {
        var a = c.constructor._executionOrder;
        (a === 0 ? this._zero : a < 0 ? this._neg : this._pos).fastRemove(c);
      },
      cancelInactive: function (a) {
        q(this._zero, a);
        q(this._neg, a);
        q(this._pos, a);
      },
      invoke: function () {
        var c = this._neg;
        if (c.array.length > 0) {
          c.array.sort(n);
          this._invoke(c);
          c.array.length = 0;
        }
        this._invoke(this._zero);
        this._zero.array.length = 0;
        var a = this._pos;
        if (a.array.length > 0) {
          a.array.sort(n);
          this._invoke(a);
          a.array.length = 0;
        }
      }
    });
    var l = cc.Class({
      extends: a,
      add: function (e) {
        var a = e.constructor._executionOrder;
        if (a === 0) {
          this._zero.array.push(e);
        } else {
          var b = a < 0 ? this._neg.array : this._pos.array;
          var c = m(b, e);
          if (c < 0) {
            b.splice(~c, 0, e);
          }
        }
      },
      remove: function (e) {
        var a = e.constructor._executionOrder;
        if (a === 0) {
          this._zero.fastRemove(e);
        } else {
          var b = a < 0 ? this._neg : this._pos;
          var c = m(b.array, e);
          if (c >= 0) {
            b.removeAt(c);
          }
        }
      },
      invoke: function (b) {
        if (this._neg.array.length > 0) {
          this._invoke(this._neg, b);
        }
        this._invoke(this._zero, b);
        if (this._pos.array.length > 0) {
          this._invoke(this._pos, b);
        }
      }
    });
    function h(g, f, h, c) {
      var b = "var a=it.array;for(it.i=0;it.i<a.length;++it.i){var c=a[it.i];" + g + "}";
      c = f ? Function("it", "dt", b) : Function("it", b);
      g = Function("c", "dt", g);
      return function (a, b) {
        try {
          c(a, b);
        } catch (c) {
          cc._throw(c);
          var d = a.array;
          if (h) {
            d[a.i]._objFlags |= h;
          }
          ++a.i;
          for (; a.i < d.length; ++a.i) {
            try {
              g(d[a.i], b);
            } catch (b) {
              cc._throw(b);
              if (h) {
                d[a.i]._objFlags |= h;
              }
            }
          }
        }
      };
    }
    var o = h("c.start();c._objFlags|=" + i, false, i);
    var f = h("c.update(dt)", true);
    var d = h("c.lateUpdate(dt)", true);
    function r() {
      this.startInvoker = new c(o);
      this.updateInvoker = new l(f);
      this.lateUpdateInvoker = new l(d);
      this._deferredComps = [];
      this._updating = false;
    }
    var p = cc.Class({
      ctor: r,
      unscheduleAll: r,
      statics: {
        LifeCycleInvoker: a,
        OneOffInvoker: c,
        createInvokeImpl: h,
        invokeOnEnable: function (e) {
          var a = cc.director._compScheduler;
          var b = e.array;
          for (e.i = 0; e.i < b.length; ++e.i) {
            var c = b[e.i];
            if (c._enabled) {
              c.onEnable();
              if (!!c.node._activeInHierarchy) {
                a._onEnabled(c);
              }
            }
          }
        }
      },
      _onEnabled: function (b) {
        cc.director.getScheduler().resumeTarget(b);
        b._objFlags |= k;
        if (this._updating) {
          this._deferredComps.push(b);
        } else {
          this._scheduleImmediate(b);
        }
      },
      _onDisabled: function (c) {
        cc.director.getScheduler().pauseTarget(c);
        c._objFlags &= ~k;
        var a = this._deferredComps.indexOf(c);
        if (a >= 0) {
          e.fastRemoveAt(this._deferredComps, a);
        } else {
          if (!(!c.start || c._objFlags & i)) {
            this.startInvoker.remove(c);
          }
          if (c.update) {
            this.updateInvoker.remove(c);
          }
          if (c.lateUpdate) {
            this.lateUpdateInvoker.remove(c);
          }
        }
      },
      enableComp: function (c, a) {
        if (!(c._objFlags & k)) {
          if (c.onEnable) {
            if (a) {
              a.add(c);
              return;
            }
            c.onEnable();
            if (!c.node._activeInHierarchy) {
              return;
            }
          }
          this._onEnabled(c);
        }
      },
      disableComp: function (b) {
        if (b._objFlags & k) {
          if (b.onDisable) {
            b.onDisable();
          }
          this._onDisabled(b);
        }
      },
      _scheduleImmediate: function (b) {
        if (!(typeof b.start != "function" || b._objFlags & i)) {
          this.startInvoker.add(b);
        }
        if (typeof b.update == "function") {
          this.updateInvoker.add(b);
        }
        if (typeof b.lateUpdate == "function") {
          this.lateUpdateInvoker.add(b);
        }
      },
      _deferredSchedule: function () {
        for (var d = this._deferredComps, a = 0, e = d.length; a < e; a++) {
          this._scheduleImmediate(d[a]);
        }
        d.length = 0;
      },
      _startForNewComps: function () {
        if (this._deferredComps.length > 0) {
          this._deferredSchedule();
          this.startInvoker.invoke();
        }
      },
      startPhase: function () {
        this._updating = true;
        this.startInvoker.invoke();
        this._startForNewComps();
      },
      updatePhase: function (b) {
        this.updateInvoker.invoke(b);
      },
      lateUpdatePhase: function (b) {
        this.lateUpdateInvoker.invoke(b);
        this._updating = false;
        this._startForNewComps();
      }
    });
    b.exports = p;
  }, {
    "./platform/CCClass": 162,
    "./platform/CCObject": 168,
    "./platform/js": 183,
    "./utils/misc": 236
  }],
  96: [function (c, b) {
    "use strict";

    var d = c("../../animation/animation-animator");
    var e = c("../../animation/animation-clip");
    var f = c("../event/event-target");
    var g = c("../platform/js");
    function h(c, a) {
      return c === a;
    }
    var j = cc.Enum({
      PLAY: "play",
      STOP: "stop",
      PAUSE: "pause",
      RESUME: "resume",
      LASTFRAME: "lastframe",
      FINISHED: "finished"
    });
    var a = cc.Class({
      name: "cc.Animation",
      extends: c("./CCComponent"),
      mixins: [f],
      editor: false,
      statics: {
        EventType: j
      },
      ctor: function () {
        cc.EventTarget.call(this);
        this._animator = null;
        this._nameToState = g.createMap(true);
        this._didInit = false;
        this._currentClip = null;
      },
      properties: {
        _defaultClip: {
          default: null,
          type: e
        },
        defaultClip: {
          type: e,
          get: function () {
            return this._defaultClip;
          },
          set: function () {},
          tooltip: false
        },
        currentClip: {
          get: function () {
            return this._currentClip;
          },
          set: function (b) {
            this._currentClip = b;
          },
          type: e,
          visible: false
        },
        _writableClips: {
          get: function () {
            return this._clips;
          },
          set: function (b) {
            this._didInit = false;
            this._clips = b;
            this._init();
          },
          type: [e]
        },
        _clips: {
          default: [],
          type: [e],
          tooltip: false,
          visible: true
        },
        playOnLoad: {
          default: false,
          tooltip: false
        }
      },
      start: function () {
        if (this.playOnLoad && this._defaultClip && (!this._animator || !this._animator.isPlaying)) {
          var b = this.getAnimationState(this._defaultClip.name);
          this._animator.playState(b);
        }
      },
      onEnable: function () {
        if (this._animator) {
          this._animator.resume();
        }
      },
      onDisable: function () {
        if (this._animator) {
          this._animator.pause();
        }
      },
      onDestroy: function () {
        this.stop();
      },
      getClips: function () {
        return this._clips;
      },
      play: function (d, a) {
        var b = this.playAdditive(d, a);
        this._animator.stopStatesExcept(b);
        return b;
      },
      playAdditive: function (e, a) {
        this._init();
        var b = this.getAnimationState(e || this._defaultClip && this._defaultClip.name);
        if (b) {
          this.enabled = true;
          var c = this._animator;
          if (c.isPlaying && b.isPlaying) {
            if (b.isPaused) {
              c.resumeState(b);
            } else {
              c.stopState(b);
              c.playState(b, a);
            }
          } else {
            c.playState(b, a);
          }
          if (!this.enabledInHierarchy) {
            c.pause();
          }
          this.currentClip = b.clip;
        }
        return b;
      },
      stop: function (c) {
        if (this._didInit) {
          if (c) {
            var a = this._nameToState[c];
            if (a) {
              this._animator.stopState(a);
            }
          } else {
            this._animator.stop();
          }
        }
      },
      pause: function (c) {
        if (this._didInit) {
          if (c) {
            var a = this._nameToState[c];
            if (a) {
              this._animator.pauseState(a);
            }
          } else {
            this.enabled = false;
          }
        }
      },
      resume: function (c) {
        if (this._didInit) {
          if (c) {
            var a = this.getAnimationState(c);
            if (a) {
              this._animator.resumeState(a);
            }
          } else {
            this.enabled = true;
          }
        }
      },
      setCurrentTime: function (d, a) {
        this._init();
        if (a) {
          var b = this.getAnimationState(a);
          if (b) {
            this._animator.setStateTime(b, d);
          }
        } else {
          this._animator.setStateTime(d);
        }
      },
      getAnimationState: function (c) {
        this._init();
        var a = this._nameToState[c];
        if (a && !a.curveLoaded) {
          this._animator._reloadClip(a);
        }
        return a || null;
      },
      hasAnimationState: function (b) {
        this._init();
        return !!this._nameToState[b];
      },
      addClip: function (e, a) {
        if (e) {
          this._init();
          if (!cc.js.array.contains(this._clips, e)) {
            this._clips.push(e);
          }
          a = a || e.name;
          var g = this._nameToState[a];
          if (g) {
            if (g.clip === e) {
              return g;
            }
            var c = this._clips.indexOf(g.clip);
            if (c !== -1) {
              this._clips.splice(c, 1);
            }
          }
          var d = new cc.AnimationState(e, a);
          this._nameToState[a] = d;
          return d;
        }
      },
      removeClip: function (e, a) {
        if (e) {
          var b;
          this._init();
          for (var f in this._nameToState) {
            b = this._nameToState[f];
            if (h(b.clip, e)) {
              break;
            }
          }
          if (e === this._defaultClip) {
            if (!a) {
              return;
            }
            this._defaultClip = null;
          }
          if (b && b.isPlaying) {
            if (!a) {
              return;
            }
            this.stop(b.name);
          }
          this._clips = this._clips.filter(function (a) {
            return !h(a, e);
          });
          if (b) {
            delete this._nameToState[b.name];
          }
        }
      },
      sample: function (c) {
        this._init();
        if (c) {
          var a = this.getAnimationState(c);
          if (a) {
            a.sample();
          }
        } else {
          this._animator.sample();
        }
      },
      on: function (a, b, c, d) {
        this._init();
        var e = this._EventTargetOn(a, b, c, d);
        if (a === "lastframe") {
          var f = this._nameToState;
          for (var g in f) {
            f[g]._lastframeEventOn = true;
          }
        }
        return e;
      },
      off: function (f, a, b) {
        this._init();
        if (f === "lastframe") {
          var c = this._nameToState;
          for (var d in c) {
            c[d]._lastframeEventOn = false;
          }
        }
        this._EventTargetOff(f, a, b);
      },
      _init: function () {
        if (!this._didInit) {
          this._didInit = true;
          this._animator = new d(this.node, this);
          this._createStates();
        }
      },
      _createStates: function () {
        this._nameToState = g.createMap(true);
        for (var e = null, f = false, i = 0; i < this._clips.length; ++i) {
          var j = this._clips[i];
          if (j) {
            e = new cc.AnimationState(j);
            this._nameToState[e.name] = e;
            if (h(this._defaultClip, j)) {
              f = e;
            }
          }
        }
        if (this._defaultClip && !f) {
          e = new cc.AnimationState(this._defaultClip);
          this._nameToState[e.name] = e;
        }
      }
    });
    a.prototype._EventTargetOn = f.prototype.on;
    a.prototype._EventTargetOff = f.prototype.off;
    cc.Animation = b.exports = a;
  }, {
    "../../animation/animation-animator": 9,
    "../../animation/animation-clip": 10,
    "../event/event-target": 134,
    "../platform/js": 183,
    "./CCComponent": 100
  }],
  97: [function (f, a) {
    "use strict";

    var b = ["touchstart", "touchmove", "touchend", "mousedown", "mousemove", "mouseup", "mouseenter", "mouseleave", "mousewheel"];
    function c(b) {
      b.stopPropagation();
    }
    var d = cc.Class({
      name: "cc.BlockInputEvents",
      extends: f("./CCComponent"),
      editor: {
        menu: "i18n:MAIN_MENU.component.ui/Block Input Events",
        inspector: "packages://inspector/inspectors/comps/block-input-events.js",
        help: "i18n:COMPONENT.help_url.block_input_events"
      },
      onEnable: function () {
        for (var d = 0; d < b.length; d++) {
          this.node.on(b[d], c, this);
        }
      },
      onDisable: function () {
        for (var d = 0; d < b.length; d++) {
          this.node.off(b[d], c, this);
        }
      }
    });
    cc.BlockInputEvents = a.exports = d;
  }, {
    "./CCComponent": 100
  }],
  98: [function (a, b) {
    "use strict";

    var c = a("./CCComponent");
    var d = a("../utils/gray-sprite-state");
    var e = cc.Enum({
      NONE: 0,
      COLOR: 1,
      SPRITE: 2,
      SCALE: 3
    });
    var f = cc.Enum({
      NORMAL: 0,
      HOVER: 1,
      PRESSED: 2,
      DISABLED: 3
    });
    var g = cc.Class({
      name: "cc.Button",
      extends: c,
      mixins: [d],
      ctor: function () {
        this._pressed = false;
        this._hovered = false;
        this._fromColor = null;
        this._toColor = null;
        this._time = 0;
        this._transitionFinished = true;
        this._fromScale = cc.Vec2.ZERO;
        this._toScale = cc.Vec2.ZERO;
        this._originalScale = null;
        this._graySpriteMaterial = null;
        this._spriteMaterial = null;
        this._sprite = null;
      },
      editor: false,
      properties: {
        interactable: {
          default: true,
          tooltip: false,
          notify: function () {
            this._updateState();
            if (!this.interactable) {
              this._resetState();
            }
          },
          animatable: false
        },
        _resizeToTarget: {
          animatable: false,
          set: function (b) {
            if (b) {
              this._resizeNodeToTargetNode();
            }
          }
        },
        enableAutoGrayEffect: {
          default: false,
          tooltip: false,
          notify: function () {
            this._updateDisabledState(true);
          }
        },
        transition: {
          default: e.NONE,
          tooltip: false,
          type: e,
          animatable: false,
          notify: function (b) {
            this._updateTransition(b);
          },
          formerlySerializedAs: "transition"
        },
        normalColor: {
          default: cc.Color.WHITE,
          displayName: "Normal",
          tooltip: false,
          notify: function () {
            if (this.transition === e.Color && this._getButtonState() === f.NORMAL) {
              this._getTarget().opacity = this.normalColor.a;
            }
            this._updateState();
          }
        },
        pressedColor: {
          default: cc.color(211, 211, 211),
          displayName: "Pressed",
          tooltip: false,
          notify: function () {
            if (this.transition === e.Color && this._getButtonState() === f.PRESSED) {
              this._getTarget().opacity = this.pressedColor.a;
            }
            this._updateState();
          },
          formerlySerializedAs: "pressedColor"
        },
        hoverColor: {
          default: cc.Color.WHITE,
          displayName: "Hover",
          tooltip: false,
          notify: function () {
            if (this.transition === e.Color && this._getButtonState() === f.HOVER) {
              this._getTarget().opacity = this.hoverColor.a;
            }
            this._updateState();
          },
          formerlySerializedAs: "hoverColor"
        },
        disabledColor: {
          default: cc.color(124, 124, 124),
          displayName: "Disabled",
          tooltip: false,
          notify: function () {
            if (this.transition === e.Color && this._getButtonState() === f.DISABLED) {
              this._getTarget().opacity = this.disabledColor.a;
            }
            this._updateState();
          }
        },
        duration: {
          default: 0.1,
          range: [0, 10],
          tooltip: false
        },
        zoomScale: {
          default: 1.2,
          tooltip: false
        },
        normalSprite: {
          default: null,
          type: cc.SpriteFrame,
          displayName: "Normal",
          tooltip: false,
          notify: function () {
            this._updateState();
          }
        },
        pressedSprite: {
          default: null,
          type: cc.SpriteFrame,
          displayName: "Pressed",
          tooltip: false,
          formerlySerializedAs: "pressedSprite",
          notify: function () {
            this._updateState();
          }
        },
        hoverSprite: {
          default: null,
          type: cc.SpriteFrame,
          displayName: "Hover",
          tooltip: false,
          formerlySerializedAs: "hoverSprite",
          notify: function () {
            this._updateState();
          }
        },
        disabledSprite: {
          default: null,
          type: cc.SpriteFrame,
          displayName: "Disabled",
          tooltip: false,
          notify: function () {
            this._updateState();
          }
        },
        target: {
          default: null,
          type: cc.Node,
          tooltip: false,
          notify: function (b) {
            this._applyTarget();
            if (b && this.target !== b) {
              this._unregisterTargetEvent(b);
            }
          }
        },
        clickEvents: {
          default: [],
          type: cc.Component.EventHandler,
          tooltip: false
        }
      },
      statics: {
        Transition: e
      },
      __preload: function () {
        this._applyTarget();
        this._resetState();
      },
      _resetState: function () {
        this._pressed = false;
        this._hovered = false;
        var d = this._getTarget();
        var a = this.transition;
        var b = this._originalScale;
        if (a === e.COLOR && this.interactable) {
          this._setTargetColor(this.normalColor);
        } else if (a === e.SCALE && b) {
          d.setScale(b.x, b.y);
        }
        this._transitionFinished = true;
      },
      onEnable: function () {
        if (this.normalSprite) {
          this.normalSprite.ensureLoadTexture();
        }
        if (this.hoverSprite) {
          this.hoverSprite.ensureLoadTexture();
        }
        if (this.pressedSprite) {
          this.pressedSprite.ensureLoadTexture();
        }
        if (this.disabledSprite) {
          this.disabledSprite.ensureLoadTexture();
        }
        this._registerNodeEvent();
        this._updateState();
      },
      onDisable: function () {
        this._resetState();
        this._unregisterNodeEvent();
      },
      _getTarget: function () {
        if (this.target) {
          return this.target;
        } else {
          return this.node;
        }
      },
      _onTargetSpriteFrameChanged: function (b) {
        if (this.transition === e.SPRITE) {
          this._setCurrentStateSprite(b.spriteFrame);
        }
      },
      _onTargetColorChanged: function (b) {
        if (this.transition === e.COLOR) {
          this._setCurrentStateColor(b);
        }
      },
      _onTargetScaleChanged: function () {
        var b = this._getTarget();
        if (this._originalScale && (this.transition !== e.SCALE || this._transitionFinished)) {
          this._originalScale.x = b.scaleX;
          this._originalScale.y = b.scaleY;
        }
      },
      _setTargetColor: function (d) {
        var a = this._getTarget();
        var b = d.clone();
        a.opacity = b.a;
        b.a = 255;
        a.color = b;
      },
      _getStateColor: function (b) {
        switch (b) {
          case f.NORMAL:
            return this.normalColor;
          case f.HOVER:
            return this.hoverColor;
          case f.PRESSED:
            return this.pressedColor;
          case f.DISABLED:
            return this.disabledColor;
        }
      },
      _getStateSprite: function (b) {
        switch (b) {
          case f.NORMAL:
            return this.normalSprite;
          case f.HOVER:
            return this.hoverSprite;
          case f.PRESSED:
            return this.pressedSprite;
          case f.DISABLED:
            return this.disabledSprite;
        }
      },
      _setCurrentStateColor: function (b) {
        switch (this._getButtonState()) {
          case f.NORMAL:
            this.normalColor = b;
            break;
          case f.HOVER:
            this.hoverColor = b;
            break;
          case f.PRESSED:
            this.pressedColor = b;
            break;
          case f.DISABLED:
            this.disabledColor = b;
        }
      },
      _setCurrentStateSprite: function (b) {
        switch (this._getButtonState()) {
          case f.NORMAL:
            this.normalSprite = b;
            break;
          case f.HOVER:
            this.hoverSprite = b;
            break;
          case f.PRESSED:
            this.pressedSprite = b;
            break;
          case f.DISABLED:
            this.disabledSprite = b;
        }
      },
      update: function (f) {
        var a = this._getTarget();
        if (!this._transitionFinished && (this.transition === e.COLOR || this.transition === e.SCALE)) {
          this.time += f;
          var b = 1;
          if (this.duration > 0) {
            b = this.time / this.duration;
          }
          if (b >= 1) {
            b = 1;
          }
          if (this.transition === e.COLOR) {
            var g = this._fromColor.lerp(this._toColor, b);
            this._setTargetColor(g);
          } else if (this.transition === e.SCALE && this._originalScale) {
            a.scale = this._fromScale.lerp(this._toScale, b);
          }
          if (b === 1) {
            this._transitionFinished = true;
          }
        }
      },
      _registerNodeEvent: function () {
        this.node.on(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this);
        this.node.on(cc.Node.EventType.TOUCH_MOVE, this._onTouchMove, this);
        this.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancel, this);
        this.node.on(cc.Node.EventType.MOUSE_ENTER, this._onMouseMoveIn, this);
        this.node.on(cc.Node.EventType.MOUSE_LEAVE, this._onMouseMoveOut, this);
      },
      _unregisterNodeEvent: function () {
        this.node.off(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this);
        this.node.off(cc.Node.EventType.TOUCH_MOVE, this._onTouchMove, this);
        this.node.off(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
        this.node.off(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancel, this);
        this.node.off(cc.Node.EventType.MOUSE_ENTER, this._onMouseMoveIn, this);
        this.node.off(cc.Node.EventType.MOUSE_LEAVE, this._onMouseMoveOut, this);
      },
      _registerTargetEvent: function (b) {
        b.on(cc.Node.EventType.SCALE_CHANGED, this._onTargetScaleChanged, this);
      },
      _unregisterTargetEvent: function (b) {
        b.off(cc.Node.EventType.SCALE_CHANGED, this._onTargetScaleChanged, this);
      },
      _getTargetSprite: function (c) {
        var a = null;
        if (c) {
          a = c.getComponent(cc.Sprite);
        }
        return a;
      },
      _applyTarget: function () {
        var b = this._getTarget();
        this._sprite = this._getTargetSprite(b);
        if (!this._originalScale) {
          this._originalScale = cc.Vec2.ZERO;
        }
        this._originalScale.x = b.scaleX;
        this._originalScale.y = b.scaleY;
        this._registerTargetEvent(b);
      },
      _onTouchBegan: function (b) {
        if (this.interactable && this.enabledInHierarchy) {
          this._pressed = true;
          this._updateState();
          b.stopPropagation();
        }
      },
      _onTouchMove: function (g) {
        if (this.interactable && this.enabledInHierarchy && this._pressed) {
          var b;
          var j = g.touch;
          var d = this.node._hitTest(j.getLocation());
          var h = this._getTarget();
          var i = this._originalScale;
          if (this.transition === e.SCALE && i) {
            if (d) {
              this._fromScale.x = i.x;
              this._fromScale.y = i.y;
              this._toScale.x = i.x * this.zoomScale;
              this._toScale.y = i.y * this.zoomScale;
              this._transitionFinished = false;
            } else {
              this.time = 0;
              this._transitionFinished = true;
              h.setScale(i.x, i.y);
            }
          } else {
            b = d ? f.PRESSED : f.NORMAL;
            this._applyTransition(b);
          }
          g.stopPropagation();
        }
      },
      _onTouchEnded: function (b) {
        if (this.interactable && this.enabledInHierarchy) {
          if (this._pressed) {
            cc.Component.EventHandler.emitEvents(this.clickEvents, b);
            this.node.emit("click", this);
          }
          this._pressed = false;
          this._updateState();
          b.stopPropagation();
        }
      },
      _onTouchCancel: function () {
        if (this.interactable && this.enabledInHierarchy) {
          this._pressed = false;
          this._updateState();
        }
      },
      _onMouseMoveIn: function () {
        if (!this._pressed && this.interactable && this.enabledInHierarchy && (this.transition !== e.SPRITE || this.hoverSprite)) {
          if (!this._hovered) {
            this._hovered = true;
            this._updateState();
          }
        }
      },
      _onMouseMoveOut: function () {
        if (this._hovered) {
          this._hovered = false;
          this._updateState();
        }
      },
      _updateState: function () {
        var b = this._getButtonState();
        this._applyTransition(b);
        this._updateDisabledState();
      },
      _getButtonState: function () {
        if (this.interactable) {
          if (this._pressed) {
            return f.PRESSED;
          } else if (this._hovered) {
            return f.HOVER;
          } else {
            return f.NORMAL;
          }
        } else {
          return f.DISABLED;
        }
      },
      _updateColorTransitionImmediately: function (c) {
        var a = this._getStateColor(c);
        this._setTargetColor(a);
        this._fromColor = a.clone();
        this._toColor = a;
      },
      _updateColorTransition: function (d) {
        if (d === f.DISABLED) {
          this._updateColorTransitionImmediately(d);
        } else {
          var a = this._getTarget();
          var b = this._getStateColor(d);
          this._fromColor = a.color.clone();
          this._toColor = b;
          this.time = 0;
          this._transitionFinished = false;
        }
      },
      _updateSpriteTransition: function (c) {
        var a = this._getStateSprite(c);
        if (this._sprite && a) {
          this._sprite.spriteFrame = a;
        }
      },
      _updateScaleTransition: function (b) {
        if (b === f.PRESSED) {
          this._zoomUp();
        } else {
          this._zoomBack();
        }
      },
      _zoomUp: function () {
        if (this._originalScale) {
          this._fromScale.x = this._originalScale.x;
          this._fromScale.y = this._originalScale.y;
          this._toScale.x = this._originalScale.x * this.zoomScale;
          this._toScale.y = this._originalScale.y * this.zoomScale;
          this.time = 0;
          this._transitionFinished = false;
        }
      },
      _zoomBack: function () {
        if (this._originalScale) {
          var b = this._getTarget();
          this._fromScale.x = b.scaleX;
          this._fromScale.y = b.scaleY;
          this._toScale.x = this._originalScale.x;
          this._toScale.y = this._originalScale.y;
          this.time = 0;
          this._transitionFinished = false;
        }
      },
      _updateTransition: function (b) {
        if (b === e.COLOR) {
          this._updateColorTransitionImmediately(f.NORMAL);
        } else if (b === e.SPRITE) {
          this._updateSpriteTransition(f.NORMAL);
        }
        this._updateState();
      },
      _applyTransition: function (c) {
        var a = this.transition;
        if (a === e.COLOR) {
          this._updateColorTransition(c);
        } else if (a === e.SPRITE) {
          this._updateSpriteTransition(c);
        } else if (a === e.SCALE) {
          this._updateScaleTransition(c);
        }
      },
      _resizeNodeToTargetNode: false,
      _updateDisabledState: function (c) {
        if (this._sprite && (this.enableAutoGrayEffect || c)) {
          var a = false;
          if (!(this.transition === e.SPRITE && this.disabledSprite)) {
            a = this.enableAutoGrayEffect && !this.interactable;
          }
          this._switchGrayMaterial(a, this._sprite);
        }
      }
    });
    cc.Button = b.exports = g;
  }, {
    "../utils/gray-sprite-state": 233,
    "./CCComponent": 100
  }],
  99: [function (f, a) {
    "use strict";

    var g = f("../camera/CCCamera");
    var b = f("./CCComponent");
    var c = cc.Class({
      name: "cc.Canvas",
      extends: b,
      editor: false,
      resetInEditor: false,
      statics: {
        instance: null
      },
      properties: {
        _designResolution: cc.size(960, 640),
        designResolution: {
          get: function () {
            return cc.size(this._designResolution);
          },
          set: function (b) {
            this._designResolution.width = b.width;
            this._designResolution.height = b.height;
            this.applySettings();
          },
          tooltip: false
        },
        _fitWidth: false,
        _fitHeight: true,
        fitHeight: {
          get: function () {
            return this._fitHeight;
          },
          set: function (b) {
            if (this._fitHeight !== b) {
              this._fitHeight = b;
              this.applySettings();
            }
          },
          tooltip: false
        },
        fitWidth: {
          get: function () {
            return this._fitWidth;
          },
          set: function (b) {
            if (this._fitWidth !== b) {
              this._fitWidth = b;
              this.applySettings();
            }
          },
          tooltip: false
        }
      },
      _fitDesignResolution: false,
      __preload: function () {
        if (!c.instance) {
          c.instance = this;
          this.applySettings();
          var b = this.getComponent(cc.Widget);
          if (b) {
            b.updateAlignment();
          }
        }
      },
      start: function () {
        if (!g.main && cc.game.renderType !== cc.game.RENDER_TYPE_CANVAS) {
          var c = new cc.Node("Main Camera");
          c.parent = this.node;
          c.setSiblingIndex(0);
          var a = c.addComponent(g);
          var b = g.ClearFlags;
          a.clearFlags = b.COLOR | b.DEPTH | b.STENCIL;
          a.depth = -1;
        }
      },
      onDestroy: function () {
        if (c.instance === this) {
          c.instance = null;
        }
      },
      applySettings: function () {
        var d;
        var e = cc.ResolutionPolicy;
        d = this.fitHeight && this.fitWidth ? e.SHOW_ALL : this.fitHeight || this.fitWidth ? this.fitWidth ? e.FIXED_WIDTH : e.FIXED_HEIGHT : e.NO_BORDER;
        var b = this._designResolution;
        cc.view.setDesignResolutionSize(b.width, b.height, d);
      }
    });
    cc.Canvas = a.exports = c;
  }, {
    "../camera/CCCamera": 86,
    "./CCComponent": 100
  }],
  100: [function (i, b) {
    "use strict";

    var c = i("../platform/CCObject");
    var d = i("../platform/js");
    var e = new (i("../platform/id-generater"))("Comp");
    c.Flags.IsOnEnableCalled;
    var f = c.Flags.IsOnLoadCalled;
    var g = !!cc.ActionManager;
    var h = cc.Class({
      name: "cc.Component",
      extends: c,
      ctor: function () {
        this._id = e.getNewId();
        this.__eventTargets = [];
      },
      properties: {
        node: {
          default: null,
          visible: false
        },
        name: {
          get: function () {
            if (this._name) {
              return this._name;
            }
            var c = cc.js.getClassName(this);
            var d = c.lastIndexOf(".");
            if (d >= 0) {
              c = c.slice(d + 1);
            }
            return this.node.name + "<" + c + ">";
          },
          set: function (b) {
            this._name = b;
          },
          visible: false
        },
        uuid: {
          get: function () {
            return this._id;
          },
          visible: false
        },
        __scriptAsset: false,
        _enabled: true,
        enabled: {
          get: function () {
            return this._enabled;
          },
          set: function (c) {
            if (this._enabled !== c && (this._enabled = c, this.node._activeInHierarchy)) {
              var a = cc.director._compScheduler;
              if (c) {
                a.enableComp(this);
              } else {
                a.disableComp(this);
              }
            }
          },
          visible: false,
          animatable: true
        },
        enabledInHierarchy: {
          get: function () {
            return this._enabled && this.node && this.node._activeInHierarchy;
          },
          visible: false
        },
        _isOnLoadCalled: {
          get: function () {
            return this._objFlags & f;
          }
        }
      },
      update: null,
      lateUpdate: null,
      __preload: null,
      onLoad: null,
      start: null,
      onEnable: null,
      onDisable: null,
      onDestroy: null,
      onFocusInEditor: null,
      onLostFocusInEditor: null,
      resetInEditor: null,
      addComponent: function (b) {
        return this.node.addComponent(b);
      },
      getComponent: function (b) {
        return this.node.getComponent(b);
      },
      getComponents: function (b) {
        return this.node.getComponents(b);
      },
      getComponentInChildren: function (b) {
        return this.node.getComponentInChildren(b);
      },
      getComponentsInChildren: function (b) {
        return this.node.getComponentsInChildren(b);
      },
      _getLocalBounds: null,
      onRestore: null,
      destroy: function () {
        if (this._super() && this._enabled && this.node._activeInHierarchy) {
          cc.director._compScheduler.disableComp(this);
        }
      },
      _onPreDestroy: function () {
        if (g) {
          cc.director.getActionManager().removeAllActionsFromTarget(this);
        }
        this.unscheduleAllCallbacks();
        for (var c = this.__eventTargets; c.length;) {
          var a = c.pop();
          if (a) {
            a.targetOff(this);
          }
        }
        cc.director._nodeActivator.destroyComp(this);
        this.node._removeComponent(this);
      },
      _instantiate: function (b) {
        if (!b) {
          b = cc.instantiate._clone(this, this);
        }
        b.node = null;
        return b;
      },
      schedule: function (e, a, h, i) {
        a = a || 0;
        h = isNaN(h) ? cc.macro.REPEAT_FOREVER : h;
        i = i || 0;
        var j = cc.director.getScheduler();
        var f = j.isTargetPaused(this);
        j.schedule(e, this, a, h, i, f);
      },
      scheduleOnce: function (c, a) {
        this.schedule(c, 0, 0, a);
      },
      unschedule: function (b) {
        if (b) {
          cc.director.getScheduler().unschedule(b, this);
        }
      },
      unscheduleAllCallbacks: function () {
        cc.director.getScheduler().unscheduleAllForTarget(this);
      }
    });
    h._requireComponent = null;
    h._executionOrder = 0;
    d.value(h, "_registerEditorProps", function (e, a) {
      var b = a.requireComponent;
      if (b) {
        e._requireComponent = b;
      }
      var c = a.executionOrder;
      if (c && typeof c == "number") {
        e._executionOrder = c;
      }
    });
    h.prototype.__scriptUuid = "";
    cc.Component = b.exports = h;
  }, {
    "../platform/CCObject": 168,
    "../platform/id-generater": 179,
    "../platform/js": 183
  }],
  101: [function () {
    "use strict";

    cc.Component.EventHandler = cc.Class({
      name: "cc.ClickEvent",
      properties: {
        target: {
          default: null,
          type: cc.Node
        },
        component: "",
        _componentId: "",
        _componentName: {
          get: function () {
            this._genCompIdIfNeeded();
            return this._compId2Name(this._componentId);
          },
          set: function (b) {
            this._componentId = this._compName2Id(b);
          }
        },
        handler: {
          default: ""
        },
        customEventData: {
          default: ""
        }
      },
      statics: {
        emitEvents: function (a) {
          var b;
          if (arguments.length > 0) {
            for (var e = 0, i = (b = Array(arguments.length - 1)).length; e < i; e++) {
              b[e] = arguments[e + 1];
            }
          }
          for (var f = 0, k = a.length; f < k; f++) {
            var h = a[f];
            if (h instanceof cc.Component.EventHandler) {
              h.emit(b);
            }
          }
        }
      },
      emit: function (f) {
        var g = this.target;
        if (cc.isValid(g)) {
          this._genCompIdIfNeeded();
          var b = cc.js._getClassById(this._componentId);
          var c = g.getComponent(b);
          if (cc.isValid(c)) {
            var d = c[this.handler];
            if (typeof d == "function") {
              if (this.customEventData != null && this.customEventData !== "") {
                (f = f.slice()).push(this.customEventData);
              }
              d.apply(c, f);
            }
          }
        }
      },
      _compName2Id: function (c) {
        var a = cc.js.getClassByName(c);
        return cc.js._getClassId(a);
      },
      _compId2Name: function (c) {
        var a = cc.js._getClassById(c);
        return cc.js.getClassName(a);
      },
      _genCompIdIfNeeded: function () {
        if (!this._componentId) {
          this._componentName = this.component;
          this.component = "";
        }
      }
    });
  }, {}],
  102: [function (m, b) {
    "use strict";

    var d = m("../platform/CCMacro");
    var e = m("./CCRenderComponent");
    m("../assets/material/CCMaterial");
    var f = m("../renderer/utils/label/label-frame");
    var g = m("../utils/blend-func");
    var i = m("../renderer/utils/utils").deleteFromDynamicAtlas;
    var j = d.TextAlignment;
    var a = d.VerticalTextAlignment;
    var k = cc.Enum({
      NONE: 0,
      CLAMP: 1,
      SHRINK: 2,
      RESIZE_HEIGHT: 3
    });
    var c = cc.Enum({
      NONE: 0,
      BITMAP: 1,
      CHAR: 2
    });
    var l = cc.Class({
      name: "cc.Label",
      extends: e,
      mixins: [g],
      ctor: function () {
        this._actualFontSize = 0;
        this._assemblerData = null;
        this._frame = null;
        this._ttfTexture = null;
        this._letterTexture = null;
        if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {
          this._updateMaterial = this._updateMaterialCanvas;
        } else {
          this._updateMaterial = this._updateMaterialWebgl;
        }
        this._customOffsetX = 0;
        this._customOffsetY = 0;
        this._actualLineHeight = undefined;
      },
      editor: false,
      properties: {
        _string: {
          default: "",
          formerlySerializedAs: "_N$string"
        },
        string: {
          get: function () {
            return this._string;
          },
          set: function (c) {
            var a = this._string;
            this._string = "" + c;
            if (this.string !== a) {
              this.setVertsDirty();
            }
            this._checkStringEmpty();
          },
          multiline: true,
          tooltip: false
        },
        horizontalAlign: {
          default: j.LEFT,
          type: j,
          tooltip: false,
          notify: function (b) {
            if (this.horizontalAlign !== b) {
              this.setVertsDirty();
            }
          },
          animatable: false
        },
        verticalAlign: {
          default: a.TOP,
          type: a,
          tooltip: false,
          notify: function (b) {
            if (this.verticalAlign !== b) {
              this.setVertsDirty();
            }
          },
          animatable: false
        },
        actualFontSize: {
          displayName: "Actual Font Size",
          animatable: false,
          readonly: true,
          get: function () {
            return this._actualFontSize;
          },
          tooltip: false
        },
        _fontSize: 40,
        fontSize: {
          get: function () {
            return this._fontSize;
          },
          set: function (b) {
            if (this._fontSize !== b) {
              this._fontSize = b;
              this.setVertsDirty();
            }
          },
          range: [0, 512],
          tooltip: false
        },
        fontFamily: {
          default: "Arial",
          tooltip: false,
          notify: function (b) {
            if (this.fontFamily !== b) {
              this.setVertsDirty();
            }
          },
          animatable: false
        },
        _lineHeight: 40,
        lineHeight: {
          get: function () {
            return this._lineHeight;
          },
          set: function (b) {
            if (this._lineHeight !== b) {
              this._lineHeight = b;
              this.setVertsDirty();
            }
          },
          tooltip: false
        },
        overflow: {
          default: k.NONE,
          type: k,
          tooltip: false,
          notify: function (b) {
            if (this.overflow !== b) {
              this.setVertsDirty();
            }
          },
          animatable: false
        },
        _enableWrapText: true,
        enableWrapText: {
          get: function () {
            return this._enableWrapText;
          },
          set: function (b) {
            if (this._enableWrapText !== b) {
              this._enableWrapText = b;
              this.setVertsDirty();
            }
          },
          animatable: false,
          tooltip: false
        },
        _N$file: null,
        font: {
          get: function () {
            return this._N$file;
          },
          set: function (b) {
            if (this.font !== b) {
              if (!b) {
                this._isSystemFontUsed = true;
              }
              this._N$file = b;
              if (b && this._isSystemFontUsed) {
                this._isSystemFontUsed = false;
              }
              if (this.enabledInHierarchy) {
                this._forceUpdateRenderData();
              }
            }
          },
          type: cc.Font,
          tooltip: false,
          animatable: false
        },
        _isSystemFontUsed: true,
        useSystemFont: {
          get: function () {
            return this._isSystemFontUsed;
          },
          set: function (b) {
            if (this._isSystemFontUsed !== b) {
              this._isSystemFontUsed = !!b;
              if (b) {
                this.font = null;
                if (!this.enabledInHierarchy) {
                  return;
                }
                this._forceUpdateRenderData();
              }
              this.markForValidate();
            }
          },
          animatable: false,
          tooltip: false
        },
        _bmFontOriginalSize: {
          displayName: "BMFont Original Size",
          get: function () {
            if (this._N$file instanceof cc.BitmapFont) {
              return this._N$file.fontSize;
            } else {
              return -1;
            }
          },
          visible: true,
          animatable: false
        },
        _spacingX: 0,
        spacingX: {
          get: function () {
            return this._spacingX;
          },
          set: function (b) {
            this._spacingX = b;
            this.setVertsDirty();
          },
          tooltip: false
        },
        _batchAsBitmap: false,
        cacheMode: {
          default: c.NONE,
          type: c,
          tooltip: false,
          notify: function (b) {
            if (this.cacheMode !== b) {
              if (!(b !== c.BITMAP || this.font instanceof cc.BitmapFont)) {
                if (this._frame) {
                  this._frame._resetDynamicAtlasFrame();
                }
              }
              if (b === c.CHAR) {
                this._ttfTexture = null;
              }
              if (this.enabledInHierarchy) {
                this._forceUpdateRenderData();
              }
            }
          },
          animatable: false
        },
        _styleFlags: 0,
        enableBold: {
          get: function () {
            return !!(this._styleFlags & 1);
          },
          set: function (b) {
            if (b) {
              this._styleFlags |= 1;
            } else {
              this._styleFlags &= -2;
            }
            this.setVertsDirty();
          },
          animatable: false,
          tooltip: false
        },
        enableItalic: {
          get: function () {
            return !!(this._styleFlags & 2);
          },
          set: function (b) {
            if (b) {
              this._styleFlags |= 2;
            } else {
              this._styleFlags &= -3;
            }
            this.setVertsDirty();
          },
          animatable: false,
          tooltip: false
        },
        enableUnderline: {
          get: function () {
            return !!(this._styleFlags & 4);
          },
          set: function (b) {
            if (b) {
              this._styleFlags |= 4;
            } else {
              this._styleFlags &= -5;
            }
            this.setVertsDirty();
          },
          animatable: false,
          tooltip: false
        },
        _underlineHeight: 0,
        underlineHeight: {
          get: function () {
            return this._underlineHeight;
          },
          set: function (b) {
            if (this._underlineHeight !== b) {
              this._underlineHeight = b;
              this.setVertsDirty();
            }
          },
          tooltip: false
        },
        customOffsetX: {
          get: function () {
            return this._customOffsetX;
          },
          set: function (b) {
            if (this._customOffsetX !== b) {
              this._customOffsetX = b;
              this.setVertsDirty();
            }
          }
        },
        customOffsetY: {
          get: function () {
            return this._customOffsetY;
          },
          set: function (b) {
            if (this._customOffsetY !== b) {
              this._customOffsetY = b;
              this.setVertsDirty();
            }
          }
        },
        actualLineHeight: {
          get: function () {
            return this._actualLineHeight || this._lineHeight;
          },
          set: function (b) {
            if (this._actualLineHeight !== b) {
              this._actualLineHeight = b;
              this.setVertsDirty();
            }
          }
        }
      },
      statics: {
        HorizontalAlign: j,
        VerticalAlign: a,
        Overflow: k,
        CacheMode: c,
        _shareAtlas: null,
        clearCharCache: function () {
          if (l._shareAtlas) {
            l._shareAtlas.clearAllCache();
          }
        }
      },
      onLoad: function () {
        if (this._batchAsBitmap && this.cacheMode === c.NONE) {
          this.cacheMode = c.BITMAP;
          this._batchAsBitmap = false;
        }
        if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {
          this.cacheMode = c.NONE;
        }
      },
      onEnable: function () {
        this._super();
        this.node.on(cc.Node.EventType.SIZE_CHANGED, this._nodeSizeChanged, this);
        this.node.on(cc.Node.EventType.ANCHOR_CHANGED, this.setVertsDirty, this);
        this.node.on(cc.Node.EventType.COLOR_CHANGED, this._nodeColorChanged, this);
        this._forceUpdateRenderData();
      },
      onDisable: function () {
        this._super();
        this.node.off(cc.Node.EventType.SIZE_CHANGED, this._nodeSizeChanged, this);
        this.node.off(cc.Node.EventType.ANCHOR_CHANGED, this.setVertsDirty, this);
        this.node.off(cc.Node.EventType.COLOR_CHANGED, this._nodeColorChanged, this);
      },
      onDestroy: function () {
        if (this._assembler && this._assembler._resetAssemblerData) {
          this._assembler._resetAssemblerData(this._assemblerData);
        }
        this._assemblerData = null;
        this._letterTexture = null;
        if (this._ttfTexture) {
          this._ttfTexture.destroy();
          this._ttfTexture = null;
        }
        this._super();
      },
      onRestore: false,
      _nodeSizeChanged: function () {
        if (this.overflow !== k.NONE) {
          this.setVertsDirty();
        }
      },
      _nodeColorChanged: function () {
        if (!(this.font instanceof cc.BitmapFont)) {
          this.setVertsDirty();
        }
      },
      setVertsDirty: function () {
        this._super();
      },
      _updateColor: function () {
        if (!(this.font instanceof cc.BitmapFont || this._srcBlendFactor === cc.macro.BlendFactor.SRC_ALPHA && this.node._renderFlag & cc.RenderFlow.FLAG_OPACITY)) {
          this.setVertsDirty();
        }
        e.prototype._updateColor.call(this);
      },
      _validateRender: function () {
        if (this.string) {
          if (this._materials[0]) {
            var c = this.font;
            if (!(c instanceof cc.BitmapFont)) {
              return;
            }
            var a = c.spriteFrame;
            if (a && a.textureLoaded() && c._fntConfig) {
              return;
            }
          }
          this.disableRender();
        } else {
          this.disableRender();
        }
      },
      _resetAssembler: function () {
        this._resetFrame();
        e.prototype._resetAssembler.call(this);
      },
      _resetFrame: function () {
        if (!(!this._frame || this.font instanceof cc.BitmapFont)) {
          i(this, this._frame);
          this._frame = null;
        }
      },
      _checkStringEmpty: function () {
        this.markForRender(!!this.string);
      },
      _on3DNodeChanged: function () {
        this._resetAssembler();
        this._applyFontTexture();
      },
      _onBMFontTextureLoaded: function () {
        this._frame._texture = this.font.spriteFrame._texture;
        this.markForRender(true);
        this._updateMaterial();
        if (this._assembler) {
          this._assembler.updateRenderData(this);
        }
      },
      _onBlendChanged: function () {
        if (this.useSystemFont && this.enabledInHierarchy) {
          this._forceUpdateRenderData();
        }
      },
      _applyFontTexture: function () {
        var d = this.font;
        if (d instanceof cc.BitmapFont) {
          var a = d.spriteFrame;
          this._frame = a;
          if (a) {
            a.onTextureLoaded(this._onBMFontTextureLoaded, this);
          }
        } else {
          if (!this._nativeTTF()) {
            if (!this._frame) {
              this._frame = new f();
            }
            if (this.cacheMode === c.CHAR) {
              this._letterTexture = this._assembler._getAssemblerData();
              this._frame._refreshTexture(this._letterTexture);
            } else if (!this._ttfTexture) {
              this._ttfTexture = new cc.Texture2D();
              this._assemblerData = this._assembler._getAssemblerData();
              this._ttfTexture.initWithElement(this._assemblerData.canvas);
            }
            if (this.cacheMode !== c.CHAR) {
              this._frame._resetDynamicAtlasFrame();
              this._frame._refreshTexture(this._ttfTexture);
              if (this._srcBlendFactor === cc.macro.BlendFactor.ONE) {
                this._ttfTexture.setPremultiplyAlpha(true);
              }
            }
            this._updateMaterial();
          }
          if (this._assembler) {
            this._assembler.updateRenderData(this);
          }
        }
        this.markForValidate();
      },
      _updateMaterialCanvas: function () {
        if (this._frame) {
          this._frame._texture._nativeUrl = this.uuid + "_texture";
        }
      },
      _updateMaterialWebgl: function () {
        var b = this.getMaterial(0);
        if (this._nativeTTF()) {
          if (b) {
            this._assembler._updateTTFMaterial(this);
          }
        } else if (this._frame) {
          if (b) {
            b.setProperty("texture", this._frame._texture);
          }
          g.prototype._updateMaterial.call(this);
        }
      },
      _forceUseCanvas: false,
      _useNativeTTF: function () {
        return cc.macro.ENABLE_NATIVE_TTF_RENDERER && !this._forceUseCanvas;
      },
      _nativeTTF: function () {
        return this._useNativeTTF() && !!this._assembler && !!this._assembler._updateTTFMaterial;
      },
      _forceUpdateRenderData: function () {
        this.setVertsDirty();
        this._resetAssembler();
        this._applyFontTexture();
      },
      _enableBold: function (b) {
        this.enableBold = !!b;
      },
      _enableItalics: function (b) {
        this.enableItalic = !!b;
      },
      _enableUnderline: function (b) {
        this.enableUnderline = !!b;
      }
    });
    cc.Label = b.exports = l;
  }, {
    "../assets/material/CCMaterial": 76,
    "../platform/CCMacro": 167,
    "../renderer/utils/label/label-frame": 198,
    "../renderer/utils/utils": 201,
    "../utils/blend-func": 230,
    "./CCRenderComponent": 109
  }],
  103: [function (d, a) {
    "use strict";

    var b = cc.Class({
      name: "cc.LabelOutline",
      extends: d("./CCComponent"),
      editor: false,
      properties: {
        _color: cc.Color.WHITE,
        _width: 1,
        color: {
          tooltip: false,
          get: function () {
            return this._color.clone();
          },
          set: function (b) {
            if (!this._color.equals(b)) {
              this._color.set(b);
            }
            this._updateRenderData();
          }
        },
        width: {
          tooltip: false,
          get: function () {
            return this._width;
          },
          set: function (b) {
            if (this._width !== b) {
              this._width = b;
              this._updateRenderData();
            }
          },
          range: [0, 512]
        }
      },
      onEnable: function () {
        this._updateRenderData();
      },
      onDisable: function () {
        this._updateRenderData();
      },
      _updateRenderData: function () {
        var b = this.node.getComponent(cc.Label);
        if (b) {
          b.setVertsDirty();
        }
      }
    });
    cc.LabelOutline = a.exports = b;
  }, {
    "./CCComponent": 100
  }],
  104: [function (d, a) {
    "use strict";

    var b = cc.Class({
      name: "cc.LabelShadow",
      extends: d("./CCComponent"),
      editor: false,
      properties: {
        _color: cc.Color.WHITE,
        _offset: cc.v2(2, 2),
        _blur: 2,
        color: {
          tooltip: false,
          get: function () {
            return this._color.clone();
          },
          set: function (b) {
            if (!this._color.equals(b)) {
              this._color.set(b);
            }
            this._updateRenderData();
          }
        },
        offset: {
          tooltip: false,
          get: function () {
            return this._offset;
          },
          set: function (b) {
            this._offset = b;
            this._updateRenderData();
          }
        },
        blur: {
          tooltip: false,
          get: function () {
            return this._blur;
          },
          set: function (b) {
            this._blur = b;
            this._updateRenderData();
          },
          range: [0, 1024]
        }
      },
      onEnable: function () {
        this._updateRenderData();
      },
      onDisable: function () {
        this._updateRenderData();
      },
      _updateRenderData: function () {
        var b = this.node.getComponent(cc.Label);
        if (b) {
          b.setVertsDirty();
        }
      }
    });
    cc.LabelShadow = a.exports = b;
  }, {
    "./CCComponent": 100
  }],
  105: [function (c, b) {
    "use strict";

    var d = c("../CCNode").EventType;
    var f = cc.Enum({
      NONE: 0,
      HORIZONTAL: 1,
      VERTICAL: 2,
      GRID: 3
    });
    var h = cc.Enum({
      NONE: 0,
      CONTAINER: 1,
      CHILDREN: 2
    });
    var e = cc.Enum({
      HORIZONTAL: 0,
      VERTICAL: 1
    });
    var k = cc.Enum({
      BOTTOM_TO_TOP: 0,
      TOP_TO_BOTTOM: 1
    });
    var p = cc.Enum({
      LEFT_TO_RIGHT: 0,
      RIGHT_TO_LEFT: 1
    });
    var g = cc.Class({
      name: "cc.Layout",
      extends: c("./CCComponent"),
      editor: false,
      properties: {
        _layoutSize: cc.size(300, 200),
        _layoutDirty: {
          default: true,
          serializable: false
        },
        _resize: h.NONE,
        _N$layoutType: f.NONE,
        type: {
          type: f,
          get: function () {
            return this._N$layoutType;
          },
          set: function (b) {
            this._N$layoutType = b;
            this._doLayoutDirty();
          },
          tooltip: false,
          animatable: false
        },
        resizeMode: {
          type: h,
          tooltip: false,
          animatable: false,
          get: function () {
            return this._resize;
          },
          set: function (b) {
            if (!(this.type === f.NONE && b === h.CHILDREN)) {
              this._resize = b;
              this._doLayoutDirty();
            }
          }
        },
        cellSize: {
          default: cc.size(40, 40),
          tooltip: false,
          type: cc.Size,
          notify: function () {
            this._doLayoutDirty();
          }
        },
        startAxis: {
          default: e.HORIZONTAL,
          tooltip: false,
          type: e,
          notify: function () {
            this._doLayoutDirty();
          },
          animatable: false
        },
        paddingLeft: {
          default: 0,
          tooltip: false,
          notify: function () {
            this._doLayoutDirty();
          }
        },
        paddingRight: {
          default: 0,
          tooltip: false,
          notify: function () {
            this._doLayoutDirty();
          }
        },
        paddingTop: {
          default: 0,
          tooltip: false,
          notify: function () {
            this._doLayoutDirty();
          }
        },
        paddingBottom: {
          default: 0,
          tooltip: false,
          notify: function () {
            this._doLayoutDirty();
          }
        },
        spacingX: {
          default: 0,
          notify: function () {
            this._doLayoutDirty();
          },
          tooltip: false
        },
        spacingY: {
          default: 0,
          notify: function () {
            this._doLayoutDirty();
          },
          tooltip: false
        },
        verticalDirection: {
          default: k.TOP_TO_BOTTOM,
          type: k,
          notify: function () {
            this._doLayoutDirty();
          },
          tooltip: false,
          animatable: false
        },
        horizontalDirection: {
          default: p.LEFT_TO_RIGHT,
          type: p,
          notify: function () {
            this._doLayoutDirty();
          },
          tooltip: false,
          animatable: false
        },
        affectedByScale: {
          default: false,
          notify: function () {
            this._doLayoutDirty();
          },
          animatable: false,
          tooltip: false
        }
      },
      statics: {
        Type: f,
        VerticalDirection: k,
        HorizontalDirection: p,
        ResizeMode: h,
        AxisDirection: e
      },
      onEnable: function () {
        this._addEventListeners();
        if (this.node.getContentSize().equals(cc.size(0, 0))) {
          this.node.setContentSize(this._layoutSize);
        }
        this._doLayoutDirty();
      },
      onDisable: function () {
        this._removeEventListeners();
      },
      _doLayoutDirty: function () {
        this._layoutDirty = true;
      },
      _doScaleDirty: function () {
        this._layoutDirty = this._layoutDirty || this.affectedByScale;
      },
      _addEventListeners: function () {
        cc.director.on(cc.Director.EVENT_AFTER_UPDATE, this.updateLayout, this);
        this.node.on(d.SIZE_CHANGED, this._resized, this);
        this.node.on(d.ANCHOR_CHANGED, this._doLayoutDirty, this);
        this.node.on(d.CHILD_ADDED, this._childAdded, this);
        this.node.on(d.CHILD_REMOVED, this._childRemoved, this);
        this.node.on(d.CHILD_REORDER, this._doLayoutDirty, this);
        this._addChildrenEventListeners();
      },
      _removeEventListeners: function () {
        cc.director.off(cc.Director.EVENT_AFTER_UPDATE, this.updateLayout, this);
        this.node.off(d.SIZE_CHANGED, this._resized, this);
        this.node.off(d.ANCHOR_CHANGED, this._doLayoutDirty, this);
        this.node.off(d.CHILD_ADDED, this._childAdded, this);
        this.node.off(d.CHILD_REMOVED, this._childRemoved, this);
        this.node.off(d.CHILD_REORDER, this._doLayoutDirty, this);
        this._removeChildrenEventListeners();
      },
      _addChildrenEventListeners: function () {
        for (var e = this.node.children, a = 0; a < e.length; ++a) {
          var f = e[a];
          f.on(d.SCALE_CHANGED, this._doScaleDirty, this);
          f.on(d.SIZE_CHANGED, this._doLayoutDirty, this);
          f.on(d.POSITION_CHANGED, this._doLayoutDirty, this);
          f.on(d.ANCHOR_CHANGED, this._doLayoutDirty, this);
          f.on("active-in-hierarchy-changed", this._doLayoutDirty, this);
        }
      },
      _removeChildrenEventListeners: function () {
        for (var e = this.node.children, a = 0; a < e.length; ++a) {
          var f = e[a];
          f.off(d.SCALE_CHANGED, this._doScaleDirty, this);
          f.off(d.SIZE_CHANGED, this._doLayoutDirty, this);
          f.off(d.POSITION_CHANGED, this._doLayoutDirty, this);
          f.off(d.ANCHOR_CHANGED, this._doLayoutDirty, this);
          f.off("active-in-hierarchy-changed", this._doLayoutDirty, this);
        }
      },
      _childAdded: function (b) {
        b.on(d.SCALE_CHANGED, this._doScaleDirty, this);
        b.on(d.SIZE_CHANGED, this._doLayoutDirty, this);
        b.on(d.POSITION_CHANGED, this._doLayoutDirty, this);
        b.on(d.ANCHOR_CHANGED, this._doLayoutDirty, this);
        b.on("active-in-hierarchy-changed", this._doLayoutDirty, this);
        this._doLayoutDirty();
      },
      _childRemoved: function (b) {
        b.off(d.SCALE_CHANGED, this._doScaleDirty, this);
        b.off(d.SIZE_CHANGED, this._doLayoutDirty, this);
        b.off(d.POSITION_CHANGED, this._doLayoutDirty, this);
        b.off(d.ANCHOR_CHANGED, this._doLayoutDirty, this);
        b.off("active-in-hierarchy-changed", this._doLayoutDirty, this);
        this._doLayoutDirty();
      },
      _resized: function () {
        this._layoutSize = this.node.getContentSize();
        this._doLayoutDirty();
      },
      _doLayoutHorizontally: function (b, a, d, e) {
        var g = this.node.getAnchorPoint();
        var i = this.node.children;
        var c = 1;
        var j = this.paddingLeft;
        var m = -g.x * b;
        if (this.horizontalDirection === p.RIGHT_TO_LEFT) {
          c = -1;
          m = (1 - g.x) * b;
          j = this.paddingRight;
        }
        for (var n = m + c * j - c * this.spacingX, o = 0, q = 0, r = 0, u = 0, v = 0, w = 0, x = 0, y = 0; y < i.length; ++y) {
          if ((C = i[y]).activeInHierarchy) {
            x++;
          }
        }
        var A = this.cellSize.width;
        if (this.type !== f.GRID && this.resizeMode === h.CHILDREN) {
          A = (b - (this.paddingLeft + this.paddingRight) - (x - 1) * this.spacingX) / x;
        }
        y = 0;
        for (; y < i.length; ++y) {
          var C = i[y];
          var D = this._getUsedScaleValue(C.scaleX);
          var E = this._getUsedScaleValue(C.scaleY);
          if (C.activeInHierarchy) {
            if (this._resize === h.CHILDREN) {
              C.width = A / D;
              if (this.type === f.GRID) {
                C.height = this.cellSize.height / E;
              }
            }
            var F = C.anchorX;
            var I = C.width * D;
            var L = C.height * E;
            if (r > q) {
              q = r;
            }
            if (L >= q) {
              r = q;
              q = L;
              w = C.getAnchorPoint().y;
            }
            if (this.horizontalDirection === p.RIGHT_TO_LEFT) {
              F = 1 - C.anchorX;
            }
            n = n + c * F * I + c * this.spacingX;
            var M = c * (1 - F) * I;
            if (a) {
              var N = n + M + c * (c > 0 ? this.paddingRight : this.paddingLeft);
              var O = this.horizontalDirection === p.LEFT_TO_RIGHT && N > (1 - g.x) * b;
              var P = this.horizontalDirection === p.RIGHT_TO_LEFT && N < -g.x * b;
              if (O || P) {
                if (L >= q) {
                  if (r === 0) {
                    r = q;
                  }
                  o += r;
                  r = q;
                } else {
                  o += q;
                  r = L;
                  q = 0;
                }
                n = m + c * (j + F * I);
                u++;
              }
            }
            var R = d(C, o, u);
            if (b >= I + this.paddingLeft + this.paddingRight && e) {
              C.setPosition(cc.v2(n, R));
            }
            var S;
            var T = 1;
            var _ = q === 0 ? L : q;
            if (this.verticalDirection === k.TOP_TO_BOTTOM) {
              v = v || this.node._contentSize.height;
              if ((S = R + (T = -1) * (_ * w + this.paddingBottom)) < v) {
                v = S;
              }
            } else {
              v = v || -this.node._contentSize.height;
              if ((S = R + T * (_ * w + this.paddingTop)) > v) {
                v = S;
              }
            }
            n += M;
          }
        }
        return v;
      },
      _getVerticalBaseHeight: function (e) {
        var a = 0;
        var g = 0;
        if (this.resizeMode === h.CONTAINER) {
          for (var i = 0; i < e.length; ++i) {
            var j = e[i];
            if (j.activeInHierarchy) {
              g++;
              a += j.height * this._getUsedScaleValue(j.scaleY);
            }
          }
          a += (g - 1) * this.spacingY + this.paddingBottom + this.paddingTop;
        } else {
          a = this.node.getContentSize().height;
        }
        return a;
      },
      _doLayoutVertically: function (b, a, d, e) {
        var g = this.node.getAnchorPoint();
        var i = this.node.children;
        var c = 1;
        var j = this.paddingBottom;
        var m = -g.y * b;
        if (this.verticalDirection === k.TOP_TO_BOTTOM) {
          c = -1;
          m = (1 - g.y) * b;
          j = this.paddingTop;
        }
        for (var n = m + c * j - c * this.spacingY, o = 0, q = 0, r = 0, u = 0, v = 0, w = 0, x = 0, y = 0; y < i.length; ++y) {
          if ((C = i[y]).activeInHierarchy) {
            x++;
          }
        }
        var A = this.cellSize.height;
        if (this.type !== f.GRID && this.resizeMode === h.CHILDREN) {
          A = (b - (this.paddingTop + this.paddingBottom) - (x - 1) * this.spacingY) / x;
        }
        y = 0;
        for (; y < i.length; ++y) {
          var C = i[y];
          var D = this._getUsedScaleValue(C.scaleX);
          var E = this._getUsedScaleValue(C.scaleY);
          if (C.activeInHierarchy) {
            if (this.resizeMode === h.CHILDREN) {
              C.height = A / E;
              if (this.type === f.GRID) {
                C.width = this.cellSize.width / D;
              }
            }
            var F = C.anchorY;
            var I = C.width * D;
            var L = C.height * E;
            if (r > q) {
              q = r;
            }
            if (I >= q) {
              r = q;
              q = I;
              w = C.getAnchorPoint().x;
            }
            if (this.verticalDirection === k.TOP_TO_BOTTOM) {
              F = 1 - C.anchorY;
            }
            n = n + c * F * L + c * this.spacingY;
            var M = c * (1 - F) * L;
            if (a) {
              var N = n + M + c * (c > 0 ? this.paddingTop : this.paddingBottom);
              var O = this.verticalDirection === k.BOTTOM_TO_TOP && N > (1 - g.y) * b;
              var P = this.verticalDirection === k.TOP_TO_BOTTOM && N < -g.y * b;
              if (O || P) {
                if (I >= q) {
                  if (r === 0) {
                    r = q;
                  }
                  o += r;
                  r = q;
                } else {
                  o += q;
                  r = I;
                  q = 0;
                }
                n = m + c * (j + F * L);
                u++;
              }
            }
            var R = d(C, o, u);
            if (b >= L + (this.paddingTop + this.paddingBottom) && e) {
              C.setPosition(cc.v2(R, n));
            }
            var S;
            var T = 1;
            var _ = q === 0 ? I : q;
            if (this.horizontalDirection === p.RIGHT_TO_LEFT) {
              T = -1;
              v = v || this.node._contentSize.width;
              if ((S = R + T * (_ * w + this.paddingLeft)) < v) {
                v = S;
              }
            } else {
              v = v || -this.node._contentSize.width;
              if ((S = R + T * (_ * w + this.paddingRight)) > v) {
                v = S;
              }
            }
            n += M;
          }
        }
        return v;
      },
      _doLayoutBasic: function () {
        for (var a = this.node.children, b = null, c = 0; c < a.length; ++c) {
          var e = a[c];
          if (e.activeInHierarchy) {
            if (b) {
              b.union(b, e.getBoundingBoxToWorld());
            } else {
              b = e.getBoundingBoxToWorld();
            }
          }
        }
        if (b) {
          var i = this.node.convertToNodeSpaceAR(cc.v2(b.x, b.y));
          i = cc.v2(i.x - this.paddingLeft, i.y - this.paddingBottom);
          var n = this.node.convertToNodeSpaceAR(cc.v2(b.xMax, b.yMax));
          var o = (n = cc.v2(n.x + this.paddingRight, n.y + this.paddingTop)).sub(i);
          if ((o = cc.size(parseFloat(o.x.toFixed(2)), parseFloat(o.y.toFixed(2)))).width !== 0) {
            var p = -i.x / o.width;
            this.node.anchorX = parseFloat(p.toFixed(2));
          }
          if (o.height !== 0) {
            var l = -i.y / o.height;
            this.node.anchorY = parseFloat(l.toFixed(2));
          }
          this.node.setContentSize(o);
        }
      },
      _doLayoutGridAxisHorizontal: function (l, a) {
        var b = a.width;
        var d = 1;
        var m = -l.y * a.height;
        var n = this.paddingBottom;
        if (this.verticalDirection === k.TOP_TO_BOTTOM) {
          d = -1;
          m = (1 - l.y) * a.height;
          n = this.paddingTop;
        }
        var o = function (e, a, b) {
          return m + d * (a + e.anchorY * e.height * this._getUsedScaleValue(e.scaleY) + n + b * this.spacingY);
        }.bind(this);
        var e = 0;
        if (this.resizeMode === h.CONTAINER) {
          var p = this._doLayoutHorizontally(b, true, o, false);
          if ((e = m - p) < 0) {
            e *= -1;
          }
          m = -l.y * e;
          if (this.verticalDirection === k.TOP_TO_BOTTOM) {
            d = -1;
            m = (1 - l.y) * e;
          }
        }
        this._doLayoutHorizontally(b, true, o, true);
        if (this.resizeMode === h.CONTAINER) {
          this.node.setContentSize(b, e);
        }
      },
      _doLayoutGridAxisVertical: function (a, b) {
        var d = b.height;
        var e = 1;
        var k = -a.x * b.width;
        var l = this.paddingLeft;
        if (this.horizontalDirection === p.RIGHT_TO_LEFT) {
          e = -1;
          k = (1 - a.x) * b.width;
          l = this.paddingRight;
        }
        var n = function (d, a, b) {
          return k + e * (a + d.anchorX * d.width * this._getUsedScaleValue(d.scaleX) + l + b * this.spacingX);
        }.bind(this);
        var i = 0;
        if (this.resizeMode === h.CONTAINER) {
          var o = this._doLayoutVertically(d, true, n, false);
          if ((i = k - o) < 0) {
            i *= -1;
          }
          k = -a.x * i;
          if (this.horizontalDirection === p.RIGHT_TO_LEFT) {
            e = -1;
            k = (1 - a.x) * i;
          }
        }
        this._doLayoutVertically(d, true, n, true);
        if (this.resizeMode === h.CONTAINER) {
          this.node.setContentSize(i, d);
        }
      },
      _doLayoutGrid: function () {
        var c = this.node.getAnchorPoint();
        var a = this.node.getContentSize();
        if (this.startAxis === e.HORIZONTAL) {
          this._doLayoutGridAxisHorizontal(c, a);
        } else if (this.startAxis === e.VERTICAL) {
          this._doLayoutGridAxisVertical(c, a);
        }
      },
      _getHorizontalBaseWidth: function (e) {
        var a = 0;
        var g = 0;
        if (this.resizeMode === h.CONTAINER) {
          for (var i = 0; i < e.length; ++i) {
            var j = e[i];
            if (j.activeInHierarchy) {
              g++;
              a += j.width * this._getUsedScaleValue(j.scaleX);
            }
          }
          a += (g - 1) * this.spacingX + this.paddingLeft + this.paddingRight;
        } else {
          a = this.node.getContentSize().width;
        }
        return a;
      },
      _doLayout: function () {
        if (this.type === f.HORIZONTAL) {
          var c = this._getHorizontalBaseWidth(this.node.children);
          this._doLayoutHorizontally(c, false, function (b) {
            return b.y;
          }, true);
          this.node.width = c;
        } else if (this.type === f.VERTICAL) {
          var a = this._getVerticalBaseHeight(this.node.children);
          this._doLayoutVertically(a, false, function (b) {
            return b.x;
          }, true);
          this.node.height = a;
        } else if (this.type === f.NONE) {
          if (this.resizeMode === h.CONTAINER) {
            this._doLayoutBasic();
          }
        } else if (this.type === f.GRID) {
          this._doLayoutGrid();
        }
      },
      _getUsedScaleValue: function (b) {
        if (this.affectedByScale) {
          return Math.abs(b);
        } else {
          return 1;
        }
      },
      updateLayout: function () {
        if (this._layoutDirty && this.node.children.length > 0 && this.node.children.find(function (b) {
          return b.activeInHierarchy;
        })) {
          this._doLayout();
          this._layoutDirty = false;
        }
      }
    });
    cc.Layout = b.exports = g;
  }, {
    "../CCNode": 26,
    "./CCComponent": 100
  }],
  106: [function (o, b) {
    "use strict";

    var g = i(o("../../renderer/gfx"));
    var p = i(o("../value-types/mat4"));
    var j = i(o("../value-types/vec2"));
    var e = i(o("../assets/material/material-variant"));
    function i(b) {
      if (b && b.__esModule) {
        return b;
      } else {
        return {
          default: b
        };
      }
    }
    var k = o("../utils/misc");
    var a = o("./CCRenderComponent");
    var m = o("../renderer/render-flow");
    var c = o("../graphics/graphics");
    var s = new j.default();
    var q = new p.default();
    var l = [];
    function n(f, a, b) {
      l.length = 0;
      for (var c = Math.PI * 2 / b, d = 0; d < b; ++d) {
        l.push(cc.v2(a.x * Math.cos(c * d) + f.x, a.y * Math.sin(c * d) + f.y));
      }
      return l;
    }
    var r = cc.Enum({
      RECT: 0,
      ELLIPSE: 1,
      IMAGE_STENCIL: 2
    });
    var d = cc.Class({
      name: "cc.Mask",
      extends: a,
      editor: false,
      ctor: function () {
        this._graphics = null;
        this._enableMaterial = null;
        this._exitMaterial = null;
        this._clearMaterial = null;
      },
      properties: {
        _spriteFrame: {
          default: null,
          type: cc.SpriteFrame
        },
        _type: r.RECT,
        type: {
          get: function () {
            return this._type;
          },
          set: function (b) {
            if (this._type !== b) {
              this._resetAssembler();
            }
            this._type = b;
            if (this._type !== r.IMAGE_STENCIL) {
              this.spriteFrame = null;
              this.alphaThreshold = 0;
              this._updateGraphics();
            }
            this._activateMaterial();
          },
          type: r,
          tooltip: false
        },
        spriteFrame: {
          type: cc.SpriteFrame,
          tooltip: false,
          get: function () {
            return this._spriteFrame;
          },
          set: function (c) {
            var a = this._spriteFrame;
            if (a !== c) {
              if (a) {
                a.off("load", this.setVertsDirty, this);
              }
              this._spriteFrame = c;
              this.setVertsDirty();
              this._updateMaterial();
            }
          }
        },
        alphaThreshold: {
          default: 0.1,
          type: cc.Float,
          range: [0, 1, 0.1],
          slide: true,
          tooltip: false,
          notify: function () {
            if (cc.game.renderType !== cc.game.RENDER_TYPE_CANVAS) {
              this._updateMaterial();
            }
          }
        },
        inverted: {
          default: false,
          type: cc.Boolean,
          tooltip: false,
          notify: function () {
            cc.game.renderType;
            cc.game.RENDER_TYPE_CANVAS;
          }
        },
        _segments: 64,
        segements: {
          get: function () {
            return this._segments;
          },
          set: function (a) {
            this._segments = k.clampf(a, 3, 10000);
            this._updateGraphics();
          },
          type: cc.Integer,
          tooltip: false
        },
        _resizeToTarget: {
          animatable: false,
          set: function (b) {
            if (b) {
              this._resizeNodeToTargetNode();
            }
          }
        }
      },
      statics: {
        Type: r
      },
      onRestore: function () {
        this._activateMaterial();
      },
      onEnable: function () {
        this._super();
        if (this._type !== r.IMAGE_STENCIL) {
          this._updateGraphics();
        } else if (this._spriteFrame) {
          this._spriteFrame.once("load", this.setVertsDirty, this);
        }
        this.node.on(cc.Node.EventType.POSITION_CHANGED, this._updateGraphics, this);
        this.node.on(cc.Node.EventType.ROTATION_CHANGED, this._updateGraphics, this);
        this.node.on(cc.Node.EventType.SCALE_CHANGED, this._updateGraphics, this);
        this.node.on(cc.Node.EventType.SIZE_CHANGED, this._updateGraphics, this);
        this.node.on(cc.Node.EventType.ANCHOR_CHANGED, this._updateGraphics, this);
      },
      onDisable: function () {
        this._super();
        this.node.off(cc.Node.EventType.POSITION_CHANGED, this._updateGraphics, this);
        this.node.off(cc.Node.EventType.ROTATION_CHANGED, this._updateGraphics, this);
        this.node.off(cc.Node.EventType.SCALE_CHANGED, this._updateGraphics, this);
        this.node.off(cc.Node.EventType.SIZE_CHANGED, this._updateGraphics, this);
        this.node.off(cc.Node.EventType.ANCHOR_CHANGED, this._updateGraphics, this);
        this.node._renderFlag &= ~m.FLAG_POST_RENDER;
      },
      onDestroy: function () {
        this._super();
        this._removeGraphics();
        if (this._spriteFrame) {
          this._spriteFrame.off("load", this.setVertsDirty, this);
        }
      },
      _resizeNodeToTargetNode: false,
      _validateRender: function () {
        if (this._type === r.IMAGE_STENCIL) {
          var b = this._spriteFrame;
          if (!(b && b.textureLoaded())) {
            this.disableRender();
          }
        }
      },
      _activateMaterial: function () {
        this._createGraphics();
        var b = this._materials[0];
        (b = b ? e.default.create(b, this) : e.default.createWithBuiltin("2d-sprite", this)).define("USE_ALPHA_TEST", true);
        if (this._type === r.IMAGE_STENCIL) {
          b.define("CC_USE_MODEL", false);
          b.define("USE_TEXTURE", true);
        } else {
          b.define("CC_USE_MODEL", true);
          b.define("USE_TEXTURE", false);
        }
        if (!this._enableMaterial) {
          this._enableMaterial = e.default.createWithBuiltin("2d-sprite", this);
        }
        if (!this._exitMaterial) {
          this._exitMaterial = e.default.createWithBuiltin("2d-sprite", this);
          this._exitMaterial.setStencilEnabled(g.default.STENCIL_DISABLE);
        }
        if (!this._clearMaterial) {
          this._clearMaterial = e.default.createWithBuiltin("clear-stencil", this);
        }
        this.setMaterial(0, b);
        this._graphics._materials[0] = b;
        this._updateMaterial();
      },
      _updateMaterial: function () {
        var c = this._materials[0];
        if (c) {
          if (this._type === r.IMAGE_STENCIL && this.spriteFrame) {
            var a = this.spriteFrame.getTexture();
            c.setProperty("texture", a);
          }
          c.setProperty("alphaThreshold", this.alphaThreshold);
        }
      },
      _createGraphics: function () {
        if (!this._graphics) {
          this._graphics = new c();
          cc.Assembler.init(this._graphics);
          this._graphics.node = this.node;
          this._graphics.lineWidth = 0;
          this._graphics.strokeColor = cc.color(0, 0, 0, 0);
        }
      },
      _updateGraphics: function () {
        if (this.enabledInHierarchy) {
          var c = this.node;
          var b = this._graphics;
          b.clear(false);
          var d = c._contentSize.width;
          var e = c._contentSize.height;
          var f = -d * c._anchorPoint.x;
          var g = -e * c._anchorPoint.y;
          if (this._type === r.RECT) {
            b.rect(f, g, d, e);
          } else if (this._type === r.ELLIPSE) {
            for (var h = n(cc.v2(f + d / 2, g + e / 2), {
                x: d / 2,
                y: e / 2
              }, this._segments), i = 0; i < h.length; ++i) {
              var j = h[i];
              if (i === 0) {
                b.moveTo(j.x, j.y);
              } else {
                b.lineTo(j.x, j.y);
              }
            }
            b.close();
          }
          if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {
            b.stroke();
          } else {
            b.fill();
          }
          this.setVertsDirty();
        }
      },
      _removeGraphics: function () {
        if (this._graphics) {
          this._graphics.destroy();
          this._graphics._destroyImmediate();
          this._graphics = null;
        }
      },
      _hitTest: function (c) {
        var b = this.node;
        var f = b.getContentSize();
        var e = f.width;
        var g = f.height;
        var i = s;
        b._updateWorldMatrix();
        if (!p.default.invert(q, b._worldMatrix)) {
          return false;
        }
        j.default.transformMat4(i, c, q);
        i.x += b._anchorPoint.x * e;
        i.y += b._anchorPoint.y * g;
        var a = false;
        if (this.type === r.RECT || this.type === r.IMAGE_STENCIL) {
          a = i.x >= 0 && i.y >= 0 && i.x <= e && i.y <= g;
        } else if (this.type === r.ELLIPSE) {
          var k = e / 2;
          var n = g / 2;
          var l = i.x - e * 0.5;
          var h = i.y - g * 0.5;
          a = l * l / (k * k) + h * h / (n * n) < 1;
        }
        if (this.inverted) {
          a = !a;
        }
        return a;
      },
      markForRender: function (c) {
        var a = m.FLAG_RENDER | m.FLAG_UPDATE_RENDER_DATA | m.FLAG_POST_RENDER;
        if (c) {
          this.node._renderFlag |= a;
          this.markForValidate();
        } else if (!c) {
          this.node._renderFlag &= ~a;
        }
      },
      disableRender: function () {
        this.node._renderFlag &= ~(m.FLAG_RENDER | m.FLAG_UPDATE_RENDER_DATA | m.FLAG_POST_RENDER);
      }
    });
    cc.Mask = b.exports = d;
  }, {
    "../../renderer/gfx": 282,
    "../assets/material/material-variant": 83,
    "../graphics/graphics": 151,
    "../renderer/render-flow": 194,
    "../utils/misc": 236,
    "../value-types/mat4": 253,
    "../value-types/vec2": 260,
    "./CCRenderComponent": 109
  }],
  107: [function (e, a) {
    "use strict";

    var l = e("../utils/misc");
    var b = e("./CCComponent");
    var n = cc.Enum({
      HORIZONTAL: 0,
      VERTICAL: 1,
      FILLED: 2
    });
    var c = cc.Class({
      name: "cc.ProgressBar",
      extends: b,
      editor: false,
      _initBarSprite: function () {
        if (this.barSprite) {
          var a = this.barSprite.node;
          if (!a) {
            return;
          }
          var b = this.node.getContentSize();
          var c = this.node.getAnchorPoint();
          var d = a.getContentSize();
          if (a.parent === this.node) {
            this.node.setContentSize(d);
          }
          if (this.barSprite.fillType === cc.Sprite.FillType.RADIAL) {
            this.mode = n.FILLED;
          }
          var e = a.getContentSize();
          if (this.mode === n.HORIZONTAL) {
            this.totalLength = e.width;
          } else if (this.mode === n.VERTICAL) {
            this.totalLength = e.height;
          } else {
            this.totalLength = this.barSprite.fillRange;
          }
          if (a.parent === this.node) {
            var f = -b.width * c.x;
            a.setPosition(cc.v2(f, 0));
          }
        }
      },
      _updateBarStatus: function () {
        if (this.barSprite) {
          var e = this.barSprite.node;
          if (!e) {
            return;
          }
          var b;
          var g;
          var j;
          var s = e.getAnchorPoint();
          var p = e.getContentSize();
          var a = e.getPosition();
          var o = cc.v2(0, 0.5);
          var t = l.clamp01(this.progress);
          var q = this.totalLength * t;
          switch (this.mode) {
            case n.HORIZONTAL:
              if (this.reverse) {
                o = cc.v2(1, 0.5);
              }
              b = cc.size(q, p.height);
              g = this.totalLength;
              j = p.height;
              break;
            case n.VERTICAL:
              o = this.reverse ? cc.v2(0.5, 1) : cc.v2(0.5, 0);
              b = cc.size(p.width, q);
              g = p.width;
              j = this.totalLength;
          }
          if (this.mode === n.FILLED) {
            if (!(this.barSprite.type !== cc.Sprite.Type.FILLED)) {
              if (this.reverse) {
                q *= -1;
              }
              this.barSprite.fillRange = q;
            }
          } else if (this.barSprite.type !== cc.Sprite.Type.FILLED) {
            var u = o.x - s.x;
            var r = o.y - s.y;
            var f = cc.v2(g * u, j * r);
            e.setPosition(a.x + f.x, a.y + f.y);
            e.setAnchorPoint(o);
            e.setContentSize(b);
          }
        }
      },
      properties: {
        barSprite: {
          default: null,
          type: cc.Sprite,
          tooltip: false,
          notify: function () {
            this._initBarSprite();
          },
          animatable: false
        },
        mode: {
          default: n.HORIZONTAL,
          type: n,
          tooltip: false,
          notify: function () {
            if (this.barSprite) {
              var c = this.barSprite.node;
              if (!c) {
                return;
              }
              var a = c.getContentSize();
              if (this.mode === n.HORIZONTAL) {
                this.totalLength = a.width;
              } else if (this.mode === n.VERTICAL) {
                this.totalLength = a.height;
              } else if (this.mode === n.FILLED) {
                this.totalLength = this.barSprite.fillRange;
              }
            }
          },
          animatable: false
        },
        _N$totalLength: 1,
        totalLength: {
          range: [0, Number.MAX_VALUE],
          tooltip: false,
          get: function () {
            return this._N$totalLength;
          },
          set: function (b) {
            if (this.mode === n.FILLED) {
              b = l.clamp01(b);
            }
            this._N$totalLength = b;
            this._updateBarStatus();
          }
        },
        progress: {
          default: 1,
          type: cc.Float,
          range: [0, 1, 0.1],
          slide: true,
          tooltip: false,
          notify: function () {
            this._updateBarStatus();
          }
        },
        reverse: {
          default: false,
          tooltip: false,
          notify: function () {
            if (this.barSprite) {
              this.barSprite.fillStart = 1 - this.barSprite.fillStart;
            }
            this._updateBarStatus();
          },
          animatable: false
        }
      },
      statics: {
        Mode: n
      }
    });
    cc.ProgressBar = a.exports = c;
  }, {
    "../utils/misc": 236,
    "./CCComponent": 100
  }],
  108: [function (d, a) {
    "use strict";

    var b = cc.Class({
      name: "cc.PropagateTouchEvents",
      extends: d("./CCComponent"),
      editor: {
        menu: "i18n:MAIN_MENU.component.ui/Propagate Touch Events",
        inspector: "unpack://engine/inspectors/comps/propagate-touch-events.js"
      },
      onEnable: function () {
        this._swallowTouches = this.node.swallowTouches;
        this.node.swallowTouches = false;
      },
      onDisable: function () {
        this.node.swallowTouches = this._swallowTouches;
      }
    });
    cc.PropagateTouchEvents = a.exports = b;
  }, {
    "./CCComponent": 100
  }],
  109: [function (h, b) {
    "use strict";

    var d = g(h("../renderer/assembler"));
    var e = g(h("../assets/material/material-variant"));
    var f = h("../value-types");
    function g(b) {
      if (b && b.__esModule) {
        return b;
      } else {
        return {
          default: b
        };
      }
    }
    var i = h("./CCComponent");
    var j = h("../renderer/render-flow");
    var a = h("../assets/material/CCMaterial");
    var k = new f.Color();
    var c = cc.Class({
      name: "RenderComponent",
      extends: i,
      editor: false,
      properties: {
        _materials: {
          default: [],
          type: a
        },
        materials: {
          get: function () {
            return this._materials;
          },
          set: function (b) {
            this._materials = b;
            this._activateMaterial();
          },
          type: [a],
          displayName: "Materials",
          animatable: false
        }
      },
      ctor: function () {
        this._vertsDirty = true;
        this._assembler = null;
      },
      _resetAssembler: function () {
        d.default.init(this);
        this._updateColor();
        this.setVertsDirty();
      },
      __preload: function () {
        this._resetAssembler();
        this._activateMaterial();
      },
      onEnable: function () {
        if (this.node._renderComponent) {
          this.node._renderComponent.enabled = false;
        }
        this.node._renderComponent = this;
        this.node._renderFlag |= j.FLAG_OPACITY_COLOR;
        this.setVertsDirty();
      },
      onDisable: function () {
        this.node._renderComponent = null;
        this.disableRender();
      },
      onDestroy: function () {
        for (var c = this._materials, a = 0; a < c.length; a++) {
          cc.pool.material.put(c[a]);
        }
        c.length = 0;
        cc.pool.assembler.put(this._assembler);
        this.disableRender();
      },
      setVertsDirty: function () {
        this._vertsDirty = true;
        this.markForRender(true);
      },
      _on3DNodeChanged: function () {
        this._resetAssembler();
      },
      _validateRender: function () {},
      markForValidate: function () {
        cc.RenderFlow.registerValidate(this);
      },
      markForRender: function (a) {
        var b = j.FLAG_RENDER | j.FLAG_UPDATE_RENDER_DATA;
        if (a) {
          this.node._renderFlag |= b;
          this.markForValidate();
        } else {
          this.node._renderFlag &= ~b;
        }
      },
      disableRender: function () {
        this.node._renderFlag &= ~(j.FLAG_RENDER | j.FLAG_UPDATE_RENDER_DATA);
      },
      getMaterial: function (d) {
        if (d < 0 || d >= this._materials.length) {
          return null;
        }
        var a = this._materials[d];
        if (!a) {
          return null;
        }
        var b = e.default.create(a, this);
        if (b !== a) {
          this.setMaterial(d, b);
        }
        return b;
      },
      getMaterials: function () {
        for (var c = this._materials, a = 0; a < c.length; a++) {
          c[a] = e.default.create(c[a], this);
        }
        return c;
      },
      setMaterial: function (c, a) {
        if (a !== this._materials[c]) {
          a = e.default.create(a, this);
          this._materials[c] = a;
        }
        this._updateMaterial();
        this.markForRender(true);
        return a;
      },
      _getDefaultMaterial: function () {
        return a.getBuiltinMaterial("2d-sprite");
      },
      _activateMaterial: function () {
        var d = this._materials;
        if (!d[0]) {
          var a = this._getDefaultMaterial();
          d[0] = a;
        }
        for (var b = 0; b < d.length; b++) {
          d[b] = e.default.create(d[b], this);
        }
        this._updateMaterial();
      },
      _updateMaterial: function () {},
      _updateColor: function () {
        if (this._assembler.updateColor) {
          var c = this.srcBlendFactor === cc.macro.BlendFactor.ONE;
          if (c) {
            f.Color.premultiplyAlpha(k, this.node._color);
          }
          var a = c ? k._val : null;
          this._assembler.updateColor(this, a);
        }
      },
      _checkBacth: function (d, a) {
        var b = this._materials[0];
        if (b && b.getHash() !== d.material.getHash() || d.cullingMask !== a) {
          d._flush();
          d.node = b.getDefine("CC_USE_MODEL") ? this.node : d._dummyNode;
          d.material = b;
          d.cullingMask = a;
        }
      }
    });
    cc.RenderComponent = b.exports = c;
  }, {
    "../assets/material/CCMaterial": 76,
    "../assets/material/material-variant": 83,
    "../renderer/assembler": 190,
    "../renderer/render-flow": 194,
    "../value-types": 251,
    "./CCComponent": 100
  }],
  110: [function (h, b) {
    "use strict";

    var d = h("../platform/js");
    var e = h("../platform/CCMacro");
    var l = h("../utils/text-utils");
    var g = new (h("../utils/html-text-parser"))();
    var f = e.TextAlignment;
    var j = e.VerticalTextAlignment;
    var k = cc.Label.CacheMode;
    var m = new d.Pool(function (c) {
      if (!cc.isValid(c)) {
        return false;
      }
      var a = c.getComponent(cc.LabelOutline);
      if (a) {
        a.width = 0;
      }
      return true;
    }, 20);
    m.get = function (a, b) {
      var c = this._get();
      if (!c) {
        (c = new cc.PrivateNode("RICHTEXT_CHILD"))._objFlags |= cc.Object.Flags.DontSave;
      }
      c.setPosition(0, 0);
      c.setAnchorPoint(0.5, 0.5);
      c.skewX = 0;
      var g = c.getComponent(cc.Label);
      if (!g) {
        g = c.addComponent(cc.Label);
      }
      g.string = "";
      g.horizontalAlign = f.LEFT;
      g.verticalAlign = j.CENTER;
      g._forceUseCanvas = true;
      g.customOffsetX = b.customOffsetX;
      g.customOffsetY = b.customOffsetY;
      g.actualLineHeight = b.actualLineHeight;
      return c;
    };
    var a = cc.Class({
      name: "cc.RichText",
      extends: cc.Component,
      ctor: function () {
        this._textArray = null;
        this._labelSegments = [];
        this._labelSegmentsCache = [];
        this._linesWidth = [];
        this._customOffsetX = 0;
        this._customOffsetY = 0;
        this._actualLineHeight = undefined;
        this._updateRichTextStatus = this._updateRichText;
      },
      editor: false,
      properties: {
        string: {
          default: "<color=#00ff00>Rich</c><color=#0fffff>Text</color>",
          multiline: true,
          tooltip: false,
          notify: function () {
            this._updateRichTextStatus();
          }
        },
        horizontalAlign: {
          default: f.LEFT,
          type: f,
          tooltip: false,
          animatable: false,
          notify: function (b) {
            if (this.horizontalAlign !== b) {
              this._layoutDirty = true;
              this._updateRichTextStatus();
            }
          }
        },
        fontSize: {
          default: 40,
          tooltip: false,
          notify: function (b) {
            if (this.fontSize !== b) {
              this._layoutDirty = true;
              this._updateRichTextStatus();
            }
          }
        },
        _fontFamily: "Arial",
        fontFamily: {
          tooltip: false,
          get: function () {
            return this._fontFamily;
          },
          set: function (b) {
            if (this._fontFamily !== b) {
              this._fontFamily = b;
              this._layoutDirty = true;
              this._updateRichTextStatus();
            }
          },
          animatable: false
        },
        font: {
          default: null,
          type: cc.TTFFont,
          tooltip: false,
          notify: function (b) {
            if (this.font !== b) {
              this._layoutDirty = true;
              if (this.font) {
                this.useSystemFont = false;
                this._onTTFLoaded();
              } else {
                this.useSystemFont = true;
              }
              this._updateRichTextStatus();
            }
          }
        },
        _isSystemFontUsed: true,
        useSystemFont: {
          get: function () {
            return this._isSystemFontUsed;
          },
          set: function (b) {
            if (this._isSystemFontUsed !== b) {
              this._isSystemFontUsed = b;
              this._layoutDirty = true;
              this._updateRichTextStatus();
            }
          },
          animatable: false,
          tooltip: false
        },
        cacheMode: {
          default: k.NONE,
          type: k,
          tooltip: false,
          notify: function (b) {
            if (this.cacheMode !== b) {
              this._updateRichTextStatus();
            }
          },
          animatable: false
        },
        maxWidth: {
          default: 0,
          tooltip: false,
          notify: function (b) {
            if (this.maxWidth !== b) {
              this._layoutDirty = true;
              this._updateRichTextStatus();
            }
          }
        },
        lineHeight: {
          default: 40,
          tooltip: false,
          notify: function (b) {
            if (this.lineHeight !== b) {
              this._layoutDirty = true;
              this._updateRichTextStatus();
            }
          }
        },
        imageAtlas: {
          default: null,
          type: cc.SpriteAtlas,
          tooltip: false,
          notify: function (b) {
            if (this.imageAtlas !== b) {
              this._layoutDirty = true;
              this._updateRichTextStatus();
            }
          }
        },
        handleTouchEvent: {
          default: true,
          tooltip: false,
          notify: function (b) {
            if (this.handleTouchEvent !== b && this.enabledInHierarchy) {
              if (this.handleTouchEvent) {
                this._addEventListeners();
              } else {
                this._removeEventListeners();
              }
            }
          }
        },
        customOffsetX: {
          get: function () {
            return this._customOffsetX;
          },
          set: function (b) {
            if (this._customOffsetX !== b) {
              this._customOffsetX = b;
              this._layoutDirty = true;
              this._updateRichTextStatus();
            }
          }
        },
        customOffsetY: {
          get: function () {
            return this._customOffsetY;
          },
          set: function (b) {
            if (this._customOffsetY !== b) {
              this._customOffsetY = b;
              this._layoutDirty = true;
              this._updateRichTextStatus();
            }
          }
        },
        actualLineHeight: {
          get: function () {
            return this._actualLineHeight || this.lineHeight;
          },
          set: function (b) {
            if (this._actualLineHeight !== b) {
              this._actualLineHeight = b;
              this._updateRichTextStatus();
            }
          }
        }
      },
      statics: {
        HorizontalAlign: f,
        VerticalAlign: j
      },
      onEnable: function () {
        if (this.handleTouchEvent) {
          this._addEventListeners();
        }
        this._onTTFLoaded();
        this._activateChildren(true);
      },
      onDisable: function () {
        if (this.handleTouchEvent) {
          this._removeEventListeners();
        }
        this._activateChildren(false);
      },
      _onColorChanged: function (c) {
        this.node.children.forEach(function (a) {
          a.color = c;
        });
      },
      _addEventListeners: function () {
        this.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
        this.node.on(cc.Node.EventType.COLOR_CHANGED, this._onColorChanged, this);
      },
      _removeEventListeners: function () {
        this.node.off(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
        this.node.off(cc.Node.EventType.COLOR_CHANGED, this._onColorChanged, this);
      },
      _updateLabelSegmentTextAttributes: function () {
        this._labelSegments.forEach(function (b) {
          this._applyTextAttribute(b, null, true);
        }.bind(this));
      },
      _createFontLabel: function (b) {
        return m.get(b, this);
      },
      _onTTFLoaded: function () {
        if (this.font instanceof cc.TTFFont) {
          if (this.font._nativeAsset) {
            this._layoutDirty = true;
            this._updateRichTextStatus();
          } else {
            var b = this;
            cc.assetManager.postLoadNative(this.font, function () {
              b._layoutDirty = true;
              b._updateRichTextStatus();
            });
          }
        } else {
          this._layoutDirty = true;
          this._updateRichTextStatus();
        }
      },
      _measureText: function (e, a) {
        var f = this;
        function b(a) {
          var b;
          if (f._labelSegmentsCache.length === 0) {
            b = f._createFontLabel(a);
            f._labelSegmentsCache.push(b);
          } else {
            b = f._labelSegmentsCache[0];
          }
          b._styleIndex = e;
          f._applyTextAttribute(b, a, true);
          return b.getContentSize().width;
        }
        if (a) {
          return b(a);
        } else {
          return b;
        }
      },
      _onTouchEnded: function (i) {
        for (var b = this, c = this.node.getComponents(cc.Component), d = function (a) {
            var d = b._labelSegments[a];
            var e = d._clickHandler;
            var f = d._clickParam;
            if (e && b._containsTouchLocation(d, i.touch.getLocation())) {
              c.forEach(function (b) {
                if (b.enabledInHierarchy && b[e]) {
                  b[e](i, f);
                }
              });
              i.stopPropagation();
            }
          }, a = 0; a < this._labelSegments.length; ++a) {
          d(a);
        }
      },
      _containsTouchLocation: function (c, a) {
        return c._hitTest(a);
      },
      _resetState: function () {
        for (var c = this.node.children, a = c.length - 1; a >= 0; a--) {
          var e = c[a];
          if (!(e.name !== "RICHTEXT_CHILD" && e.name !== "RICHTEXT_Image_CHILD")) {
            if (e.parent === this.node) {
              e.parent = null;
            } else {
              c.splice(a, 1);
            }
            if (e.name === "RICHTEXT_CHILD") {
              m.put(e);
            }
          }
        }
        this._labelSegments.length = 0;
        this._labelSegmentsCache.length = 0;
        this._linesWidth.length = 0;
        this._lineOffsetX = 0;
        this._lineCount = 1;
        this._labelWidth = 0;
        this._labelHeight = 0;
        this._layoutDirty = true;
      },
      onRestore: false,
      _activateChildren: function (d) {
        for (var a = this.node.children.length - 1; a >= 0; a--) {
          var e = this.node.children[a];
          if (!(e.name !== "RICHTEXT_CHILD" && e.name !== "RICHTEXT_Image_CHILD")) {
            e.active = d;
          }
        }
      },
      _addLabelSegment: function (d, a) {
        var b;
        (b = this._labelSegmentsCache.length === 0 ? this._createFontLabel(d) : this._labelSegmentsCache.pop())._styleIndex = a;
        b._lineCount = this._lineCount;
        b.active = this.node.active;
        b.setAnchorPoint(0, 0);
        this._applyTextAttribute(b, d, false);
        this.node.addChild(b);
        this._labelSegments.push(b);
        return b;
      },
      _updateRichTextWithMaxWidth: function (a, c, d) {
        var e = c;
        if (this._lineOffsetX > 0 && e + this._lineOffsetX > this.maxWidth) {
          for (var f = 0; this._lineOffsetX <= this.maxWidth;) {
            var g = this._getFirstWordLen(a, f, a.length);
            var j = a.substr(f, g);
            var n = this._measureText(d, j);
            if (!(this._lineOffsetX + n <= this.maxWidth)) {
              if (f > 0) {
                var o = a.substr(0, f);
                this._addLabelSegment(o, d);
                a = a.substr(f, a.length);
                e = this._measureText(d, a);
              }
              this._updateLineInfo();
              break;
            }
            this._lineOffsetX += n;
            f += g;
          }
        }
        if (e > this.maxWidth) {
          for (var s = l.fragmentText(a, e, this.maxWidth, this._measureText(d)), t = 0; t < s.length; ++t) {
            var u = s[t];
            var v = this._addLabelSegment(u, d).getContentSize();
            this._lineOffsetX += v.width;
            if (s.length > 1 && t < s.length - 1) {
              this._updateLineInfo();
            }
          }
        } else {
          this._lineOffsetX += e;
          this._addLabelSegment(a, d);
        }
      },
      _isLastComponentCR: function (b) {
        return b.length - 1 === b.lastIndexOf("\n");
      },
      _updateLineInfo: function () {
        this._linesWidth.push(this._lineOffsetX);
        this._lineOffsetX = 0;
        this._lineCount++;
      },
      _needsUpdateTextLayout: function (e) {
        if (this._layoutDirty || !this._textArray || !e) {
          return true;
        }
        if (this._textArray.length !== e.length) {
          return true;
        }
        for (var a = 0; a < this._textArray.length; ++a) {
          var h = this._textArray[a];
          var i = e[a];
          if (h.text !== i.text) {
            return true;
          }
          var j = h.style;
          var k = i.style;
          if (j) {
            if (k) {
              if (!j.outline != !k.outline) {
                return true;
              }
              if (j.size !== k.size || !j.italic != !k.italic || j.isImage !== k.isImage) {
                return true;
              }
              if (j.src !== k.src || j.imageAlign !== k.imageAlign || j.imageHeight !== k.imageHeight || j.imageWidth !== k.imageWidth || j.imageOffset !== k.imageOffset) {
                return true;
              }
            } else if (j.size || j.italic || j.isImage || j.outline) {
              return true;
            }
          } else if (k && (k.size || k.italic || k.isImage || k.outline)) {
            return true;
          }
        }
        return false;
      },
      _addRichTextImageElement: function (a) {
        var b = a.style.src;
        var c = this.imageAtlas.getSpriteFrame(b);
        if (c) {
          var d = new cc.PrivateNode("RICHTEXT_Image_CHILD");
          d._objFlags |= cc.Object.Flags.DontSave;
          var e = d.addComponent(cc.Sprite);
          switch (a.style.imageAlign) {
            case "top":
              d.setAnchorPoint(0, 1);
              break;
            case "center":
              d.setAnchorPoint(0, 0.5);
              break;
            default:
              d.setAnchorPoint(0, 0);
          }
          if (a.style.imageOffset) {
            d._imageOffset = a.style.imageOffset;
          }
          e.type = cc.Sprite.Type.SLICED;
          e.sizeMode = cc.Sprite.SizeMode.CUSTOM;
          this.node.addChild(d);
          this._labelSegments.push(d);
          var f = c.getRect();
          var g = 1;
          var h = f.width;
          var i = f.height;
          var o = a.style.imageWidth;
          var n = a.style.imageHeight;
          if (n > 0) {
            h *= g = n / i;
            i *= g;
          } else {
            h *= g = this.lineHeight / i;
            i *= g;
          }
          if (o > 0) {
            h = o;
          }
          if (this.maxWidth > 0) {
            if (this._lineOffsetX + h > this.maxWidth) {
              this._updateLineInfo();
            }
            this._lineOffsetX += h;
          } else {
            this._lineOffsetX += h;
            if (this._lineOffsetX > this._labelWidth) {
              this._labelWidth = this._lineOffsetX;
            }
          }
          e.spriteFrame = c;
          d.setContentSize(h, i);
          d._lineCount = this._lineCount;
          if (a.style.event) {
            if (a.style.event.click) {
              d._clickHandler = a.style.event.click;
            }
            if (a.style.event.param) {
              d._clickParam = a.style.event.param;
            } else {
              d._clickParam = "";
            }
          } else {
            d._clickHandler = null;
          }
        }
      },
      _updateRichText: function () {
        if (this.enabledInHierarchy) {
          var a = g.parse(this.string);
          if (!this._needsUpdateTextLayout(a)) {
            this._textArray = a;
            this._updateLabelSegmentTextAttributes();
            this._updateRichTextPosition();
            return;
          }
          this._textArray = a;
          this._resetState();
          for (var b, c = false, e = 0; e < this._textArray.length; ++e) {
            var h = this._textArray[e];
            var i = h.text;
            if (i === "") {
              if (h.style && h.style.newline) {
                this._updateLineInfo();
                continue;
              }
              if (h.style && h.style.isImage && this.imageAtlas) {
                this._addRichTextImageElement(h);
                continue;
              }
            }
            for (var j = i.split("\n"), n = 0; n < j.length; ++n) {
              var o = j[n];
              if (o !== "") {
                c = false;
                if (this.maxWidth > 0) {
                  var u = this._measureText(e, o);
                  this._updateRichTextWithMaxWidth(o, u, e);
                  if (j.length > 1 && n < j.length - 1) {
                    this._updateLineInfo();
                  }
                } else {
                  b = this._addLabelSegment(o, e).getContentSize();
                  this._lineOffsetX += b.width;
                  if (this._lineOffsetX > this._labelWidth) {
                    this._labelWidth = this._lineOffsetX;
                  }
                  if (j.length > 1 && n < j.length - 1) {
                    this._updateLineInfo();
                  }
                }
              } else {
                if (this._isLastComponentCR(i) && n === j.length - 1) {
                  continue;
                }
                this._updateLineInfo();
                c = true;
              }
            }
          }
          if (!c) {
            this._linesWidth.push(this._lineOffsetX);
          }
          if (this.maxWidth > 0) {
            this._labelWidth = this.maxWidth;
          }
          this._labelHeight = (this._lineCount + l.BASELINE_RATIO) * this.lineHeight;
          this.node.setContentSize(this._labelWidth, this._labelHeight);
          this._updateRichTextPosition();
          this._layoutDirty = false;
        }
      },
      _getFirstWordLen: function (a, b, c) {
        var d = a.charAt(b);
        if (l.isUnicodeCJK(d) || l.isUnicodeSpace(d)) {
          return 1;
        }
        for (var g = 1, i = b + 1; i < c && (d = a.charAt(i), !l.isUnicodeSpace(d) && !l.isUnicodeCJK(d)); ++i) {
          g++;
        }
        return g;
      },
      _updateRichTextPosition: function () {
        for (var d = 0, e = 1, g = this._lineCount, c = 0; c < this._labelSegments.length; ++c) {
          var h = this._labelSegments[c];
          var m = h._lineCount;
          if (m > e) {
            d = 0;
            e = m;
          }
          var n = 0;
          switch (this.horizontalAlign) {
            case f.LEFT:
              n = -this._labelWidth / 2;
              break;
            case f.CENTER:
              n = -this._linesWidth[m - 1] / 2;
              break;
            case f.RIGHT:
              n = this._labelWidth / 2 - this._linesWidth[m - 1];
          }
          h.x = d + n;
          var o = h.getContentSize();
          h.y = this.lineHeight * (g - m) - this._labelHeight / 2;
          if (m === e) {
            d += o.width;
          }
          if (h.getComponent(cc.Sprite)) {
            var p = this.lineHeight;
            var q = this.lineHeight * (1 + l.BASELINE_RATIO);
            switch (h.anchorY) {
              case 1:
                h.y += p + (q - p) / 2;
                break;
              case 0.5:
                h.y += q / 2;
                break;
              default:
                h.y += (q - p) / 2;
            }
            if (h._imageOffset) {
              var s = h._imageOffset.split(",");
              if (s.length === 1 && s[0]) {
                var t = parseFloat(s[0]);
                if (Number.isInteger(t)) {
                  h.y += t;
                }
              } else if (s.length === 2) {
                var u = parseFloat(s[0]);
                var v = parseFloat(s[1]);
                if (Number.isInteger(u)) {
                  h.x += u;
                }
                if (Number.isInteger(v)) {
                  h.y += v;
                }
              }
            }
          } else {
            h.anchorY = 0;
          }
          var G = h.getComponent(cc.LabelOutline);
          if (G && G.width) {
            h.y = h.y - G.width;
          }
          if (h.getComponent(cc.Label) && this.cacheMode === k.CHAR) {
            var H = G ? G.width : 0;
            h.y = ((g - 1) / 2 - (m - 1)) * (this.lineHeight + H / 2);
            h.anchorY = 0.5;
          }
        }
      },
      _convertLiteralColorValue: function (c) {
        var a = c.toUpperCase();
        if (cc.Color[a]) {
          return cc.Color[a];
        } else {
          return cc.color().fromHEX(c);
        }
      },
      _applyTextAttribute: function (a, b, e) {
        var d = a.getComponent(cc.Label);
        if (d) {
          var f = a._styleIndex;
          var g = null;
          if (this._textArray[f]) {
            g = this._textArray[f].style;
          }
          if (g && g.color) {
            a.color = this._convertLiteralColorValue(g.color);
          } else {
            a.color = this.node.color;
          }
          d.cacheMode = this.cacheMode;
          if (this.font instanceof cc.Font && !this._isSystemFontUsed) {
            d.font = this.font;
          } else {
            d.fontFamily = this.fontFamily;
          }
          d.useSystemFont = this._isSystemFontUsed;
          d.lineHeight = this.lineHeight;
          d.enableBold = g && g.bold;
          d.enableItalics = g && g.italic;
          if (g && g.italic) {
            a.skewX = 12;
          }
          d.enableUnderline = g && g.underline;
          if (g && g.outline) {
            var j = a.getComponent(cc.LabelOutline);
            if (!j) {
              j = a.addComponent(cc.LabelOutline);
            }
            j.color = this._convertLiteralColorValue(g.outline.color);
            j.width = g.outline.width;
          }
          if (g && g.size) {
            d.fontSize = g.size;
          } else {
            d.fontSize = this.fontSize;
          }
          if (b !== null) {
            if (typeof b != "string") {
              b = "" + b;
            }
            d.string = b;
          }
          if (e) {
            d._forceUpdateRenderData();
          }
          if (g && g.event) {
            if (g.event.click) {
              a._clickHandler = g.event.click;
            }
            if (g.event.param) {
              a._clickParam = g.event.param;
            } else {
              a._clickParam = "";
            }
          } else {
            a._clickHandler = null;
          }
        }
      },
      onDestroy: function () {
        for (var b = 0; b < this._labelSegments.length; ++b) {
          this._labelSegments[b].removeFromParent();
          m.put(this._labelSegments[b]);
        }
      }
    });
    cc.RichText = b.exports = a;
  }, {
    "../platform/CCMacro": 167,
    "../platform/js": 183,
    "../utils/html-text-parser": 234,
    "../utils/text-utils": 243
  }],
  111: [function (e, a) {
    "use strict";

    var h = e("./CCWidget");
    var d = e("../base-ui/CCWidgetManager");
    var b = cc.Class({
      name: "cc.SafeArea",
      extends: e("./CCComponent"),
      editor: false,
      onEnable: function () {
        this.updateArea();
        cc.view.on("canvas-resize", this.updateArea, this);
      },
      onDisable: function () {
        cc.view.off("canvas-resize", this.updateArea, this);
      },
      updateArea: function () {
        var f = this.node.getComponent(h);
        if (f) {
          f.updateAlignment();
          var b = this.node.position;
          var g = this.node.getAnchorPoint();
          f.isAlignTop = f.isAlignBottom = f.isAlignLeft = f.isAlignRight = true;
          var e = cc.winSize.width;
          var i = cc.winSize.height;
          var j = cc.sys.getSafeAreaRect();
          f.top = i - j.y - j.height;
          f.bottom = j.y;
          f.left = j.x;
          f.right = e - j.x - j.width;
          f.updateAlignment();
          var a = this.node.position;
          var k = g.x - (a.x - b.x) / this.node.width;
          var c = g.y - (a.y - b.y) / this.node.height;
          this.node.setAnchorPoint(k, c);
          d.add(f);
        }
      }
    });
    cc.SafeArea = a.exports = b;
  }, {
    "../base-ui/CCWidgetManager": 85,
    "./CCComponent": 100,
    "./CCWidget": 120
  }],
  112: [function (e, a) {
    "use strict";

    var b = e("../utils/misc");
    e("./CCComponent");
    var l = cc.Enum({
      HORIZONTAL: 0,
      VERTICAL: 1
    });
    var d = cc.Class({
      name: "cc.Scrollbar",
      extends: e("./CCComponent"),
      editor: false,
      properties: {
        _scrollView: null,
        _touching: false,
        _autoHideRemainingTime: {
          default: 0,
          serializable: false
        },
        _opacity: 255,
        handle: {
          default: null,
          type: cc.Sprite,
          tooltip: false,
          notify: function () {
            this._onScroll(cc.v2(0, 0));
          },
          animatable: false
        },
        direction: {
          default: l.HORIZONTAL,
          type: l,
          tooltip: false,
          notify: function () {
            this._onScroll(cc.v2(0, 0));
          },
          animatable: false
        },
        enableAutoHide: {
          default: true,
          animatable: false,
          tooltip: false
        },
        autoHideTime: {
          default: 1,
          animatable: false,
          tooltip: false
        }
      },
      statics: {
        Direction: l
      },
      setTargetScrollView: function (b) {
        this._scrollView = b;
      },
      _convertToScrollViewSpace: function (e) {
        var a = this._scrollView.node;
        var b = e.convertToWorldSpaceAR(cc.v2(-e.anchorX * e.width, -e.anchorY * e.height));
        var c = a.convertToNodeSpaceAR(b);
        c.x += a.anchorX * a.width;
        c.y += a.anchorY * a.height;
        return c;
      },
      _setOpacity: function (b) {
        if (this.handle) {
          this.node.opacity = b;
          this.handle.node.opacity = b;
        }
      },
      _onScroll: function (a) {
        if (this._scrollView) {
          var b = this._scrollView.content;
          if (b) {
            var c = b.getContentSize();
            var d = this._scrollView.node.getContentSize();
            var e = this.node.getContentSize();
            if (this._conditionalDisableScrollBar(c, d)) {
              return;
            }
            if (this.enableAutoHide) {
              this._autoHideRemainingTime = this.autoHideTime;
              this._setOpacity(this._opacity);
            }
            var f = 0;
            var g = 0;
            var h = 0;
            var i = 0;
            var j = 0;
            if (this.direction === l.HORIZONTAL) {
              f = c.width;
              g = d.width;
              j = e.width;
              h = a.x;
              i = -this._convertToScrollViewSpace(b).x;
            } else if (this.direction === l.VERTICAL) {
              f = c.height;
              g = d.height;
              j = e.height;
              h = a.y;
              i = -this._convertToScrollViewSpace(b).y;
            }
            var o = this._calculateLength(f, g, j, h);
            var r = this._calculatePosition(f, g, j, i, h, o);
            this._updateLength(o);
            this._updateHanlderPosition(r);
          }
        }
      },
      _updateHanlderPosition: function (c) {
        if (this.handle) {
          var a = this._fixupHandlerPosition();
          this.handle.node.setPosition(c.x + a.x, c.y + a.y);
        }
      },
      _fixupHandlerPosition: function () {
        var a = this.node.getContentSize();
        var b = this.node.getAnchorPoint();
        var c = this.handle.node.getContentSize();
        var d = this.handle.node.parent;
        var e = this.node.convertToWorldSpaceAR(cc.v2(-a.width * b.x, -a.height * b.y));
        var f = d.convertToNodeSpaceAR(e);
        if (this.direction === l.HORIZONTAL) {
          f = cc.v2(f.x, f.y + (a.height - c.height) / 2);
        } else if (this.direction === l.VERTICAL) {
          f = cc.v2(f.x + (a.width - c.width) / 2, f.y);
        }
        this.handle.node.setPosition(f);
        return f;
      },
      _onTouchBegan: function () {
        if (this.enableAutoHide) {
          this._touching = true;
        }
      },
      _conditionalDisableScrollBar: function (c, a) {
        return c.width <= a.width && this.direction === l.HORIZONTAL || c.height <= a.height && this.direction === l.VERTICAL;
      },
      _onTouchEnded: function () {
        if (this.enableAutoHide && (this._touching = false, !(this.autoHideTime <= 0))) {
          if (this._scrollView) {
            var d = this._scrollView.content;
            if (d) {
              var a = d.getContentSize();
              var b = this._scrollView.node.getContentSize();
              if (this._conditionalDisableScrollBar(a, b)) {
                return;
              }
            }
          }
          this._autoHideRemainingTime = this.autoHideTime;
        }
      },
      _calculateLength: function (f, a, b, c) {
        var d = f;
        if (c) {
          d += (c > 0 ? c : -c) * 20;
        }
        return b * (a / d);
      },
      _calculatePosition: function (c, d, f, e, g, h) {
        var a = c - d;
        if (g) {
          a += Math.abs(g);
        }
        var i = 0;
        if (a) {
          i = e / a;
          i = b.clamp01(i);
        }
        var j = (f - h) * i;
        if (this.direction === l.VERTICAL) {
          return cc.v2(0, j);
        } else {
          return cc.v2(j, 0);
        }
      },
      _updateLength: function (d) {
        if (this.handle) {
          var a = this.handle.node;
          var b = a.getContentSize();
          a.setAnchorPoint(cc.v2(0, 0));
          if (this.direction === l.HORIZONTAL) {
            a.setContentSize(d, b.height);
          } else {
            a.setContentSize(b.width, d);
          }
        }
      },
      _processAutoHide: function (c) {
        if (this.enableAutoHide && !(this._autoHideRemainingTime <= 0) && !this._touching && (this._autoHideRemainingTime -= c, this._autoHideRemainingTime <= this.autoHideTime)) {
          this._autoHideRemainingTime = Math.max(0, this._autoHideRemainingTime);
          var a = this._opacity * (this._autoHideRemainingTime / this.autoHideTime);
          this._setOpacity(a);
        }
      },
      start: function () {
        if (this.enableAutoHide) {
          this._setOpacity(0);
        }
      },
      hide: function () {
        this._autoHideRemainingTime = 0;
        this._setOpacity(0);
      },
      show: function () {
        this._autoHideRemainingTime = this.autoHideTime;
        this._setOpacity(this._opacity);
      },
      update: function (b) {
        this._processAutoHide(b);
      }
    });
    cc.Scrollbar = a.exports = d;
  }, {
    "../utils/misc": 236,
    "./CCComponent": 100
  }],
  113: [function (c, b) {
    "use strict";

    var d = c("../CCNode").EventType;
    var e = cc.v2();
    var f = cc.v2();
    function g() {
      return new Date().getMilliseconds();
    }
    var h = cc.Enum({
      SCROLL_TO_TOP: 0,
      SCROLL_TO_BOTTOM: 1,
      SCROLL_TO_LEFT: 2,
      SCROLL_TO_RIGHT: 3,
      SCROLLING: 4,
      BOUNCE_TOP: 5,
      BOUNCE_BOTTOM: 6,
      BOUNCE_LEFT: 7,
      BOUNCE_RIGHT: 8,
      SCROLL_ENDED: 9,
      TOUCH_UP: 10,
      AUTOSCROLL_ENDED_WITH_THRESHOLD: 11,
      SCROLL_BEGAN: 12
    });
    var i = {
      "scroll-to-top": h.SCROLL_TO_TOP,
      "scroll-to-bottom": h.SCROLL_TO_BOTTOM,
      "scroll-to-left": h.SCROLL_TO_LEFT,
      "scroll-to-right": h.SCROLL_TO_RIGHT,
      scrolling: h.SCROLLING,
      "bounce-bottom": h.BOUNCE_BOTTOM,
      "bounce-left": h.BOUNCE_LEFT,
      "bounce-right": h.BOUNCE_RIGHT,
      "bounce-top": h.BOUNCE_TOP,
      "scroll-ended": h.SCROLL_ENDED,
      "touch-up": h.TOUCH_UP,
      "scroll-ended-with-threshold": h.AUTOSCROLL_ENDED_WITH_THRESHOLD,
      "scroll-began": h.SCROLL_BEGAN
    };
    var a = cc.Class({
      name: "cc.ScrollView",
      extends: c("./CCViewGroup"),
      editor: false,
      ctor: function () {
        this._topBoundary = 0;
        this._bottomBoundary = 0;
        this._leftBoundary = 0;
        this._rightBoundary = 0;
        this._touchMoveDisplacements = [];
        this._touchMoveTimeDeltas = [];
        this._touchMovePreviousTimestamp = 0;
        this._touchMoved = false;
        this._autoScrolling = false;
        this._autoScrollAttenuate = false;
        this._autoScrollStartPosition = cc.v2(0, 0);
        this._autoScrollTargetDelta = cc.v2(0, 0);
        this._autoScrollTotalTime = 0;
        this._autoScrollAccumulatedTime = 0;
        this._autoScrollCurrentlyOutOfBoundary = false;
        this._autoScrollBraking = false;
        this._autoScrollBrakingStartPosition = cc.v2(0, 0);
        this._outOfBoundaryAmount = cc.v2(0, 0);
        this._outOfBoundaryAmountDirty = true;
        this._stopMouseWheel = false;
        this._mouseWheelEventElapsedTime = 0;
        this._isScrollEndedWithThresholdEventFired = false;
        this._scrollEventEmitMask = 0;
        this._isBouncing = false;
        this._scrolling = false;
      },
      properties: {
        content: {
          default: undefined,
          type: cc.Node,
          tooltip: false,
          formerlySerializedAs: "content",
          notify: function () {
            this._calculateBoundary();
          }
        },
        horizontal: {
          default: true,
          animatable: false,
          tooltip: false
        },
        vertical: {
          default: true,
          animatable: false,
          tooltip: false
        },
        inertia: {
          default: true,
          tooltip: false
        },
        brake: {
          default: 0.5,
          type: cc.Float,
          range: [0, 1, 0.1],
          tooltip: false
        },
        elastic: {
          default: true,
          animatable: false,
          tooltip: false
        },
        bounceDuration: {
          default: 1,
          range: [0, 10],
          tooltip: false
        },
        horizontalScrollBar: {
          default: undefined,
          type: cc.Scrollbar,
          tooltip: false,
          notify: function () {
            if (this.horizontalScrollBar) {
              this.horizontalScrollBar.setTargetScrollView(this);
              this._updateScrollBar(0);
            }
          },
          animatable: false
        },
        verticalScrollBar: {
          default: undefined,
          type: cc.Scrollbar,
          tooltip: false,
          notify: function () {
            if (this.verticalScrollBar) {
              this.verticalScrollBar.setTargetScrollView(this);
              this._updateScrollBar(0);
            }
          },
          animatable: false
        },
        scrollEvents: {
          default: [],
          type: cc.Component.EventHandler,
          tooltip: false
        },
        cancelInnerEvents: {
          default: true,
          animatable: false,
          tooltip: false
        },
        _view: {
          get: function () {
            if (this.content) {
              return this.content.parent;
            }
          }
        }
      },
      statics: {
        EventType: h
      },
      scrollToBottom: function (d, a) {
        var b = this._calculateMovePercentDelta({
          anchor: cc.v2(0, 0),
          applyToHorizontal: false,
          applyToVertical: true
        });
        if (d) {
          this._startAutoScroll(b, d, a !== false);
        } else {
          this._moveContent(b, true);
        }
      },
      scrollToTop: function (d, a) {
        var b = this._calculateMovePercentDelta({
          anchor: cc.v2(0, 1),
          applyToHorizontal: false,
          applyToVertical: true
        });
        if (d) {
          this._startAutoScroll(b, d, a !== false);
        } else {
          this._moveContent(b);
        }
      },
      scrollToLeft: function (d, a) {
        var b = this._calculateMovePercentDelta({
          anchor: cc.v2(0, 0),
          applyToHorizontal: true,
          applyToVertical: false
        });
        if (d) {
          this._startAutoScroll(b, d, a !== false);
        } else {
          this._moveContent(b);
        }
      },
      scrollToRight: function (d, a) {
        var b = this._calculateMovePercentDelta({
          anchor: cc.v2(1, 0),
          applyToHorizontal: true,
          applyToVertical: false
        });
        if (d) {
          this._startAutoScroll(b, d, a !== false);
        } else {
          this._moveContent(b);
        }
      },
      scrollToTopLeft: function (d, a) {
        var b = this._calculateMovePercentDelta({
          anchor: cc.v2(0, 1),
          applyToHorizontal: true,
          applyToVertical: true
        });
        if (d) {
          this._startAutoScroll(b, d, a !== false);
        } else {
          this._moveContent(b);
        }
      },
      scrollToTopRight: function (d, a) {
        var b = this._calculateMovePercentDelta({
          anchor: cc.v2(1, 1),
          applyToHorizontal: true,
          applyToVertical: true
        });
        if (d) {
          this._startAutoScroll(b, d, a !== false);
        } else {
          this._moveContent(b);
        }
      },
      scrollToBottomLeft: function (d, a) {
        var b = this._calculateMovePercentDelta({
          anchor: cc.v2(0, 0),
          applyToHorizontal: true,
          applyToVertical: true
        });
        if (d) {
          this._startAutoScroll(b, d, a !== false);
        } else {
          this._moveContent(b);
        }
      },
      scrollToBottomRight: function (d, a) {
        var b = this._calculateMovePercentDelta({
          anchor: cc.v2(1, 0),
          applyToHorizontal: true,
          applyToVertical: true
        });
        if (d) {
          this._startAutoScroll(b, d, a !== false);
        } else {
          this._moveContent(b);
        }
      },
      scrollToOffset: function (f, a, b) {
        var c = this.getMaxScrollOffset();
        var d = cc.v2(0, 0);
        if (c.x === 0) {
          d.x = 0;
        } else {
          d.x = f.x / c.x;
        }
        if (c.y === 0) {
          d.y = 1;
        } else {
          d.y = (c.y - f.y) / c.y;
        }
        this.scrollTo(d, a, b);
      },
      getScrollOffset: function () {
        var c = this._getContentTopBoundary() - this._topBoundary;
        var a = this._getContentLeftBoundary() - this._leftBoundary;
        return cc.v2(a, c);
      },
      getMaxScrollOffset: function () {
        var e = this._view.getContentSize();
        var a = this.content.getContentSize();
        var b = a.width - e.width;
        var f = a.height - e.height;
        b = b >= 0 ? b : 0;
        f = f >= 0 ? f : 0;
        return cc.v2(b, f);
      },
      scrollToPercentHorizontal: function (e, a, b) {
        var c = this._calculateMovePercentDelta({
          anchor: cc.v2(e, 0),
          applyToHorizontal: true,
          applyToVertical: false
        });
        if (a) {
          this._startAutoScroll(c, a, b !== false);
        } else {
          this._moveContent(c);
        }
      },
      scrollTo: function (e, a, b) {
        var c = this._calculateMovePercentDelta({
          anchor: cc.v2(e),
          applyToHorizontal: true,
          applyToVertical: true
        });
        if (a) {
          this._startAutoScroll(c, a, b !== false);
        } else {
          this._moveContent(c);
        }
      },
      scrollToPercentVertical: function (e, a, b) {
        var c = this._calculateMovePercentDelta({
          anchor: cc.v2(0, e),
          applyToHorizontal: false,
          applyToVertical: true
        });
        if (a) {
          this._startAutoScroll(c, a, b !== false);
        } else {
          this._moveContent(c);
        }
      },
      stopAutoScroll: function () {
        this._autoScrolling = false;
        this._autoScrollAccumulatedTime = this._autoScrollTotalTime;
      },
      setContentPosition: function (b) {
        if (!b.fuzzyEquals(this.getContentPosition(), 0.0001)) {
          this.content.setPosition(b);
          this._outOfBoundaryAmountDirty = true;
        }
      },
      getContentPosition: function () {
        return this.content.getPosition();
      },
      isScrolling: function () {
        return this._scrolling;
      },
      isAutoScrolling: function () {
        return this._autoScrolling;
      },
      _registerEvent: function () {
        this.node.on(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this, true);
        this.node.on(cc.Node.EventType.TOUCH_MOVE, this._onTouchMoved, this, true);
        this.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this, true);
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancelled, this, true);
        this.node.on(cc.Node.EventType.MOUSE_WHEEL, this._onMouseWheel, this, true);
      },
      _unregisterEvent: function () {
        this.node.off(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this, true);
        this.node.off(cc.Node.EventType.TOUCH_MOVE, this._onTouchMoved, this, true);
        this.node.off(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this, true);
        this.node.off(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancelled, this, true);
        this.node.off(cc.Node.EventType.MOUSE_WHEEL, this._onMouseWheel, this, true);
      },
      _onMouseWheel: function (e, a) {
        if (this.enabledInHierarchy && !this.hasNestedViewGroup(e, a)) {
          var b = cc.v2(0, 0);
          var f = -cc.view._scaleY;
          if (this.vertical) {
            b = cc.v2(0, e.getScrollY() * f);
          } else if (this.horizontal) {
            b = cc.v2(e.getScrollY() * f, 0);
          }
          this._mouseWheelEventElapsedTime = 0;
          this._processDeltaMove(b);
          if (!this._stopMouseWheel) {
            this._handlePressLogic();
            this.schedule(this._checkMouseWheel, 1 / 60);
            this._stopMouseWheel = true;
          }
          this._stopPropagationIfTargetIsMe(e);
        }
      },
      _checkMouseWheel: function (b) {
        if (!this._getHowMuchOutOfBoundary().fuzzyEquals(cc.v2(0, 0), 0.0001)) {
          this._processInertiaScroll();
          this.unschedule(this._checkMouseWheel);
          this._dispatchEvent("scroll-ended");
          this._stopMouseWheel = false;
          return;
        }
        this._mouseWheelEventElapsedTime += b;
        if (this._mouseWheelEventElapsedTime > 0.1) {
          this._onScrollBarTouchEnded();
          this.unschedule(this._checkMouseWheel);
          this._dispatchEvent("scroll-ended");
          this._stopMouseWheel = false;
        }
      },
      _calculateMovePercentDelta: function (a) {
        var b = a.anchor;
        var e = a.applyToHorizontal;
        var f = a.applyToVertical;
        this._calculateBoundary();
        b = b.clampf(cc.v2(0, 0), cc.v2(1, 1));
        var g = this._view.getContentSize();
        var h = this.content.getContentSize();
        var i = this._getContentBottomBoundary() - this._bottomBoundary;
        i = -i;
        var l = this._getContentLeftBoundary() - this._leftBoundary;
        l = -l;
        var n = cc.v2(0, 0);
        var m = 0;
        if (e) {
          m = h.width - g.width;
          n.x = l - m * b.x;
        }
        if (f) {
          m = h.height - g.height;
          n.y = i - m * b.y;
        }
        return n;
      },
      _moveContentToTopLeft: function (g) {
        var a = this.content.getContentSize();
        var b = this._getContentBottomBoundary() - this._bottomBoundary;
        b = -b;
        var h = cc.v2(0, 0);
        var d = 0;
        var i = this._getContentLeftBoundary() - this._leftBoundary;
        i = -i;
        if (a.height < g.height) {
          d = a.height - g.height;
          h.y = b - d;
        }
        if (a.width < g.width) {
          d = a.width - g.width;
          h.x = i;
        }
        this._updateScrollBarState();
        this._moveContent(h);
        this._adjustContentOutOfBoundary();
      },
      _calculateBoundary: function () {
        if (this.content) {
          var e = this.content.getComponent(cc.Layout);
          if (e && e.enabledInHierarchy) {
            e.updateLayout();
          }
          var a = this._view.getContentSize();
          var b = a.width * this._view.anchorX;
          var c = a.height * this._view.anchorY;
          this._leftBoundary = -b;
          this._bottomBoundary = -c;
          this._rightBoundary = this._leftBoundary + a.width;
          this._topBoundary = this._bottomBoundary + a.height;
          this._moveContentToTopLeft(a);
        }
      },
      hasNestedViewGroup: function (e, a) {
        if (e.eventPhase === cc.Event.CAPTURING_PHASE) {
          if (a) {
            for (var b = 0; b < a.length; ++b) {
              var f = a[b];
              if (this.node === f) {
                return !!e.target.getComponent(cc.ViewGroup);
              }
              if (f.getComponent(cc.ViewGroup)) {
                return true;
              }
            }
          }
          return false;
        }
      },
      _stopPropagationIfTargetIsMe: function (b) {
        if (b.eventPhase === cc.Event.AT_TARGET && b.target === this.node) {
          b.stopPropagation();
        }
      },
      _onTouchBegan: function (d, a) {
        if (this.enabledInHierarchy && !this.hasNestedViewGroup(d, a)) {
          var b = d.touch;
          if (this.content) {
            this._handlePressLogic(b);
          }
          this._touchMoved = false;
          this._stopPropagationIfTargetIsMe(d);
        }
      },
      _onTouchMoved: function (e, a) {
        if (this.enabledInHierarchy && !this.hasNestedViewGroup(e, a)) {
          var b = e.touch;
          if (this.content) {
            this._handleMoveLogic(b);
          }
          if (this.cancelInnerEvents) {
            if (b.getLocation().sub(b.getStartLocation()).mag() > 7 && !this._touchMoved && e.target !== this.node) {
              var c = new cc.Event.EventTouch(e.getTouches(), e.bubbles);
              c.type = cc.Node.EventType.TOUCH_CANCEL;
              c.touch = e.touch;
              c.simulate = true;
              e.target.dispatchEvent(c);
              this._touchMoved = true;
            }
            this._stopPropagationIfTargetIsMe(e);
          }
        }
      },
      _onTouchEnded: function (d, a) {
        if (this.enabledInHierarchy && !this.hasNestedViewGroup(d, a)) {
          this._dispatchEvent("touch-up");
          var b = d.touch;
          if (this.content) {
            this._handleReleaseLogic(b);
          }
          if (this._touchMoved) {
            d.stopPropagation();
          } else {
            this._stopPropagationIfTargetIsMe(d);
          }
        }
      },
      _onTouchCancelled: function (d, a) {
        if (this.enabledInHierarchy && !this.hasNestedViewGroup(d, a)) {
          if (!d.simulate) {
            var b = d.touch;
            if (this.content) {
              this._handleReleaseLogic(b);
            }
          }
          this._stopPropagationIfTargetIsMe(d);
        }
      },
      _processDeltaMove: function (b) {
        this._scrollChildren(b);
        this._gatherTouchMove(b);
      },
      _getLocalAxisAlignDelta: function (b) {
        this.node.convertToNodeSpaceAR(b.getLocation(), e);
        this.node.convertToNodeSpaceAR(b.getPreviousLocation(), f);
        return e.sub(f);
      },
      _handleMoveLogic: function (c) {
        var a = this._getLocalAxisAlignDelta(c);
        this._processDeltaMove(a);
      },
      _scrollChildren: function (e) {
        var g;
        var h = e = this._clampDelta(e);
        if (this.elastic) {
          g = this._getHowMuchOutOfBoundary();
          h.x *= g.x === 0 ? 1 : 0.5;
          h.y *= g.y === 0 ? 1 : 0.5;
        }
        if (!this.elastic) {
          g = this._getHowMuchOutOfBoundary(h);
          h = h.add(g);
        }
        var i = "";
        var j = "";
        if (this.vertical) {
          if (h.y > 0) {
            if (this.content.y - this.content.anchorY * this.content.height + h.y >= this._bottomBoundary) {
              i = "scroll-to-bottom";
            }
          } else if (h.y < 0 && this.content.y - this.content.anchorY * this.content.height + this.content.height + h.y <= this._topBoundary) {
            i = "scroll-to-top";
          }
        }
        if (this.horizontal) {
          if (h.x < 0) {
            if (this.content.x - this.content.anchorX * this.content.width + this.content.width + h.x <= this._rightBoundary) {
              j = "scroll-to-right";
            }
          } else if (h.x > 0 && this.content.x - this.content.anchorX * this.content.width + h.x >= this._leftBoundary) {
            j = "scroll-to-left";
          }
        }
        this._moveContent(h, false);
        if (this.horizontal && h.x !== 0 || this.vertical && h.y !== 0) {
          if (!this._scrolling) {
            this._scrolling = true;
            this._dispatchEvent("scroll-began");
          }
          this._dispatchEvent("scrolling");
        }
        if (i !== "") {
          this._dispatchEvent(i);
        }
        if (j !== "") {
          this._dispatchEvent(j);
        }
      },
      _handlePressLogic: function () {
        if (this._autoScrolling) {
          this._dispatchEvent("scroll-ended");
        }
        this._autoScrolling = false;
        this._isBouncing = false;
        this._touchMovePreviousTimestamp = g();
        this._touchMoveDisplacements.length = 0;
        this._touchMoveTimeDeltas.length = 0;
        this._onScrollBarTouchBegan();
      },
      _clampDelta: function (d) {
        var a = this.content.getContentSize();
        var b = this._view.getContentSize();
        if (a.width < b.width) {
          d.x = 0;
        }
        if (a.height < b.height) {
          d.y = 0;
        }
        return d;
      },
      _gatherTouchMove: function (c) {
        for (c = this._clampDelta(c); this._touchMoveDisplacements.length >= 5;) {
          this._touchMoveDisplacements.shift();
          this._touchMoveTimeDeltas.shift();
        }
        this._touchMoveDisplacements.push(c);
        var d = g();
        this._touchMoveTimeDeltas.push((d - this._touchMovePreviousTimestamp) / 1000);
        this._touchMovePreviousTimestamp = d;
      },
      _startBounceBackIfNeeded: function () {
        if (!this.elastic) {
          return false;
        }
        var c = this._getHowMuchOutOfBoundary();
        if ((c = this._clampDelta(c)).fuzzyEquals(cc.v2(0, 0), 0.0001)) {
          return false;
        }
        var d = Math.max(this.bounceDuration, 0);
        this._startAutoScroll(c, d, true);
        if (!this._isBouncing) {
          if (c.y > 0) {
            this._dispatchEvent("bounce-top");
          }
          if (c.y < 0) {
            this._dispatchEvent("bounce-bottom");
          }
          if (c.x > 0) {
            this._dispatchEvent("bounce-right");
          }
          if (c.x < 0) {
            this._dispatchEvent("bounce-left");
          }
          this._isBouncing = true;
        }
        return true;
      },
      _processInertiaScroll: function () {
        if (!this._startBounceBackIfNeeded() && this.inertia) {
          var b = this._calculateTouchMoveVelocity();
          if (!b.fuzzyEquals(cc.v2(0, 0), 0.0001) && this.brake < 1) {
            this._startInertiaScroll(b);
          }
        }
        this._onScrollBarTouchEnded();
      },
      _handleReleaseLogic: function (c) {
        var a = this._getLocalAxisAlignDelta(c);
        this._gatherTouchMove(a);
        this._processInertiaScroll();
        if (this._scrolling) {
          this._scrolling = false;
          if (!this._autoScrolling) {
            this._dispatchEvent("scroll-ended");
          }
        }
      },
      _isOutOfBoundary: function () {
        return !this._getHowMuchOutOfBoundary().fuzzyEquals(cc.v2(0, 0), 0.0001);
      },
      _isNecessaryAutoScrollBrake: function () {
        if (this._autoScrollBraking) {
          return true;
        }
        if (this._isOutOfBoundary()) {
          if (!this._autoScrollCurrentlyOutOfBoundary) {
            this._autoScrollCurrentlyOutOfBoundary = true;
            this._autoScrollBraking = true;
            this._autoScrollBrakingStartPosition = this.getContentPosition();
            return true;
          }
        } else {
          this._autoScrollCurrentlyOutOfBoundary = false;
        }
        return false;
      },
      getScrollEndedEventTiming: function () {
        return 0.0001;
      },
      _processAutoScrolling: function (a) {
        var b = this._isNecessaryAutoScrollBrake();
        var d = b ? 0.05 : 1;
        this._autoScrollAccumulatedTime += a * (1 / d);
        var e;
        var h = Math.min(1, this._autoScrollAccumulatedTime / this._autoScrollTotalTime);
        if (this._autoScrollAttenuate) {
          e = h;
          h = (e -= 1) * e * e * e * e + 1;
        }
        var n = this._autoScrollStartPosition.add(this._autoScrollTargetDelta.mul(h));
        var o = Math.abs(h - 1) <= 0.0001;
        if (Math.abs(h - 1) <= this.getScrollEndedEventTiming() && !this._isScrollEndedWithThresholdEventFired) {
          this._dispatchEvent("scroll-ended-with-threshold");
          this._isScrollEndedWithThresholdEventFired = true;
        }
        if (this.elastic) {
          var p = n.sub(this._autoScrollBrakingStartPosition);
          if (b) {
            p = p.mul(d);
          }
          n = this._autoScrollBrakingStartPosition.add(p);
        } else {
          var q = n.sub(this.getContentPosition());
          var m = this._getHowMuchOutOfBoundary(q);
          if (!m.fuzzyEquals(cc.v2(0, 0), 0.0001)) {
            n = n.add(m);
            o = true;
          }
        }
        if (o) {
          this._autoScrolling = false;
        }
        var c = n.sub(this.getContentPosition());
        this._moveContent(this._clampDelta(c), o);
        this._dispatchEvent("scrolling");
        if (!this._autoScrolling) {
          this._isBouncing = false;
          this._scrolling = false;
          this._dispatchEvent("scroll-ended");
        }
      },
      _startInertiaScroll: function (c) {
        var a = c.mul(0.7);
        this._startAttenuatingAutoScroll(a, c);
      },
      _calculateAttenuatedFactor: function (b) {
        if (this.brake <= 0) {
          return 1 - this.brake;
        } else {
          return (1 - this.brake) * (1 / (1 + b * 0.000014 + b * b * 8e-9));
        }
      },
      _startAttenuatingAutoScroll: function (i, b) {
        var d = this._calculateAutoScrollTimeByInitalSpeed(b.mag());
        var n = i.normalize();
        var o = this.content.getContentSize();
        var g = this._view.getContentSize();
        var j = o.width - g.width;
        var k = o.height - g.height;
        var a = this._calculateAttenuatedFactor(j);
        var m = this._calculateAttenuatedFactor(k);
        n = cc.v2(n.x * j * (1 - this.brake) * a, n.y * k * m * (1 - this.brake));
        var c = i.mag();
        var l = n.mag() / c;
        n = n.add(i);
        if (this.brake > 0 && l > 7) {
          l = Math.sqrt(l);
          n = i.mul(l).add(i);
        }
        if (this.brake > 0 && l > 3) {
          d *= l = 3;
        }
        if (this.brake === 0 && l > 1) {
          d *= l;
        }
        this._startAutoScroll(n, d, true);
      },
      _calculateAutoScrollTimeByInitalSpeed: function (b) {
        return Math.sqrt(Math.sqrt(b / 5));
      },
      _startAutoScroll: function (e, a, b) {
        var c = this._flattenVectorByDirection(e);
        this._autoScrolling = true;
        this._autoScrollTargetDelta = c;
        this._autoScrollAttenuate = b;
        this._autoScrollStartPosition = this.getContentPosition();
        this._autoScrollTotalTime = a;
        this._autoScrollAccumulatedTime = 0;
        this._autoScrollBraking = false;
        this._isScrollEndedWithThresholdEventFired = false;
        this._autoScrollBrakingStartPosition = cc.v2(0, 0);
        if (!this._getHowMuchOutOfBoundary().fuzzyEquals(cc.v2(0, 0), 0.0001)) {
          this._autoScrollCurrentlyOutOfBoundary = true;
        }
      },
      _calculateTouchMoveVelocity: function () {
        var c = 0;
        if ((c = this._touchMoveTimeDeltas.reduce(function (c, a) {
          return c + a;
        }, c)) <= 0 || c >= 0.5) {
          return cc.v2(0, 0);
        }
        var d = cc.v2(0, 0);
        d = this._touchMoveDisplacements.reduce(function (c, a) {
          return c.add(a);
        }, d);
        return cc.v2(d.x * (1 - this.brake) / c, d.y * (1 - this.brake) / c);
      },
      _flattenVectorByDirection: function (c) {
        var a = c;
        a.x = this.horizontal ? a.x : 0;
        a.y = this.vertical ? a.y : 0;
        return a;
      },
      _moveContent: function (f, a) {
        var b = this._flattenVectorByDirection(f);
        var c = this.getContentPosition().add(b);
        this.setContentPosition(c);
        var d = this._getHowMuchOutOfBoundary();
        this._updateScrollBar(d);
        if (this.elastic && a) {
          this._startBounceBackIfNeeded();
        }
      },
      _getContentLeftBoundary: function () {
        return this.getContentPosition().x - this.content.getAnchorPoint().x * this.content.getContentSize().width;
      },
      _getContentRightBoundary: function () {
        var b = this.content.getContentSize();
        return this._getContentLeftBoundary() + b.width;
      },
      _getContentTopBoundary: function () {
        var b = this.content.getContentSize();
        return this._getContentBottomBoundary() + b.height;
      },
      _getContentBottomBoundary: function () {
        return this.getContentPosition().y - this.content.getAnchorPoint().y * this.content.getContentSize().height;
      },
      _getHowMuchOutOfBoundary: function (c) {
        if ((c = c || cc.v2(0, 0)).fuzzyEquals(cc.v2(0, 0), 0.0001) && !this._outOfBoundaryAmountDirty) {
          return this._outOfBoundaryAmount;
        }
        var d = cc.v2(0, 0);
        if (this._getContentLeftBoundary() + c.x > this._leftBoundary) {
          d.x = this._leftBoundary - (this._getContentLeftBoundary() + c.x);
        } else if (this._getContentRightBoundary() + c.x < this._rightBoundary) {
          d.x = this._rightBoundary - (this._getContentRightBoundary() + c.x);
        }
        if (this._getContentTopBoundary() + c.y < this._topBoundary) {
          d.y = this._topBoundary - (this._getContentTopBoundary() + c.y);
        } else if (this._getContentBottomBoundary() + c.y > this._bottomBoundary) {
          d.y = this._bottomBoundary - (this._getContentBottomBoundary() + c.y);
        }
        if (c.fuzzyEquals(cc.v2(0, 0), 0.0001)) {
          this._outOfBoundaryAmount = d;
          this._outOfBoundaryAmountDirty = false;
        }
        return this._clampDelta(d);
      },
      _updateScrollBarState: function () {
        if (this.content) {
          var c = this.content.getContentSize();
          var a = this._view.getContentSize();
          if (this.verticalScrollBar) {
            if (c.height < a.height) {
              this.verticalScrollBar.hide();
            } else {
              this.verticalScrollBar.show();
            }
          }
          if (this.horizontalScrollBar) {
            if (c.width < a.width) {
              this.horizontalScrollBar.hide();
            } else {
              this.horizontalScrollBar.show();
            }
          }
        }
      },
      _updateScrollBar: function (b) {
        if (this.horizontalScrollBar) {
          this.horizontalScrollBar._onScroll(b);
        }
        if (this.verticalScrollBar) {
          this.verticalScrollBar._onScroll(b);
        }
      },
      _onScrollBarTouchBegan: function () {
        if (this.horizontalScrollBar) {
          this.horizontalScrollBar._onTouchBegan();
        }
        if (this.verticalScrollBar) {
          this.verticalScrollBar._onTouchBegan();
        }
      },
      _onScrollBarTouchEnded: function () {
        if (this.horizontalScrollBar) {
          this.horizontalScrollBar._onTouchEnded();
        }
        if (this.verticalScrollBar) {
          this.verticalScrollBar._onTouchEnded();
        }
      },
      _dispatchEvent: function (a) {
        if (a === "scroll-ended") {
          this._scrollEventEmitMask = 0;
        } else if (a === "scroll-to-top" || a === "scroll-to-bottom" || a === "scroll-to-left" || a === "scroll-to-right") {
          var b = 1 << i[a];
          if (this._scrollEventEmitMask & b) {
            return;
          }
          this._scrollEventEmitMask |= b;
        }
        cc.Component.EventHandler.emitEvents(this.scrollEvents, this, i[a]);
        this.node.emit(a, this);
      },
      _adjustContentOutOfBoundary: function () {
        this._outOfBoundaryAmountDirty = true;
        if (this._isOutOfBoundary()) {
          var c = this._getHowMuchOutOfBoundary(cc.v2(0, 0));
          var a = this.getContentPosition().add(c);
          if (this.content) {
            this.content.setPosition(a);
            this._updateScrollBar(0);
          }
        }
      },
      start: function () {
        this._calculateBoundary();
        if (this.content) {
          cc.director.once(cc.Director.EVENT_BEFORE_DRAW, this._adjustContentOutOfBoundary, this);
        }
      },
      _hideScrollbar: function () {
        if (this.horizontalScrollBar) {
          this.horizontalScrollBar.hide();
        }
        if (this.verticalScrollBar) {
          this.verticalScrollBar.hide();
        }
      },
      onDisable: function () {
        this._unregisterEvent();
        if (this.content) {
          this.content.off(d.SIZE_CHANGED, this._calculateBoundary, this);
          this.content.off(d.SCALE_CHANGED, this._calculateBoundary, this);
          if (this._view) {
            this._view.off(d.POSITION_CHANGED, this._calculateBoundary, this);
            this._view.off(d.SCALE_CHANGED, this._calculateBoundary, this);
            this._view.off(d.SIZE_CHANGED, this._calculateBoundary, this);
          }
        }
        this._hideScrollbar();
        this.stopAutoScroll();
      },
      onEnable: function () {
        this._registerEvent();
        if (this.content) {
          this.content.on(d.SIZE_CHANGED, this._calculateBoundary, this);
          this.content.on(d.SCALE_CHANGED, this._calculateBoundary, this);
          if (this._view) {
            this._view.on(d.POSITION_CHANGED, this._calculateBoundary, this);
            this._view.on(d.SCALE_CHANGED, this._calculateBoundary, this);
            this._view.on(d.SIZE_CHANGED, this._calculateBoundary, this);
          }
        }
        this._updateScrollBarState();
      },
      update: function (b) {
        if (this._autoScrolling) {
          this._processAutoScrolling(b);
        }
      }
    });
    cc.ScrollView = b.exports = a;
  }, {
    "../CCNode": 26,
    "./CCViewGroup": 119
  }],
  114: [function (g, a) {
    "use strict";

    var h = g("../utils/misc");
    var b = g("./CCComponent");
    var c = cc.Enum({
      Horizontal: 0,
      Vertical: 1
    });
    var d = cc.Class({
      name: "cc.Slider",
      extends: b,
      editor: false,
      ctor: function () {
        this._offset = cc.v2();
        this._touchHandle = false;
        this._dragging = false;
      },
      properties: {
        handle: {
          default: null,
          type: cc.Button,
          tooltip: false,
          notify: function () {}
        },
        direction: {
          default: c.Horizontal,
          type: c,
          tooltip: false
        },
        progress: {
          default: 0.5,
          type: cc.Float,
          range: [0, 1, 0.1],
          slide: true,
          tooltip: false,
          notify: function () {
            this._updateHandlePosition();
          }
        },
        slideEvents: {
          default: [],
          type: cc.Component.EventHandler,
          tooltip: false
        }
      },
      statics: {
        Direction: c
      },
      __preload: function () {
        this._updateHandlePosition();
      },
      onEnable: function () {
        this.node.on(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this);
        this.node.on(cc.Node.EventType.TOUCH_MOVE, this._onTouchMoved, this);
        this.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancelled, this);
        if (this.handle && this.handle.isValid) {
          this.handle.node.on(cc.Node.EventType.TOUCH_START, this._onHandleDragStart, this);
          this.handle.node.on(cc.Node.EventType.TOUCH_MOVE, this._onTouchMoved, this);
          this.handle.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
        }
      },
      onDisable: function () {
        this.node.off(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this);
        this.node.off(cc.Node.EventType.TOUCH_MOVE, this._onTouchMoved, this);
        this.node.off(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
        this.node.off(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancelled, this);
        if (this.handle && this.handle.isValid) {
          this.handle.node.off(cc.Node.EventType.TOUCH_START, this._onHandleDragStart, this);
          this.handle.node.off(cc.Node.EventType.TOUCH_MOVE, this._onTouchMoved, this);
          this.handle.node.off(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
        }
      },
      _onHandleDragStart: function (b) {
        this._dragging = true;
        this._touchHandle = true;
        this._offset = this.handle.node.convertToNodeSpaceAR(b.touch.getLocation());
        b.stopPropagation();
      },
      _onTouchBegan: function (b) {
        if (this.handle) {
          this._dragging = true;
          if (!this._touchHandle) {
            this._handleSliderLogic(b.touch);
          }
          b.stopPropagation();
        }
      },
      _onTouchMoved: function (b) {
        if (this._dragging) {
          this._handleSliderLogic(b.touch);
          b.stopPropagation();
        }
      },
      _onTouchEnded: function (b) {
        this._dragging = false;
        this._touchHandle = false;
        this._offset = cc.v2();
        b.stopPropagation();
      },
      _onTouchCancelled: function (b) {
        this._dragging = false;
        b.stopPropagation();
      },
      _handleSliderLogic: function (b) {
        this._updateProgress(b);
        this._emitSlideEvent();
      },
      _emitSlideEvent: function () {
        cc.Component.EventHandler.emitEvents(this.slideEvents, this);
        this.node.emit("slide", this);
      },
      _updateProgress: function (e) {
        if (this.handle) {
          var a = this.node;
          var b = a.convertToNodeSpaceAR(e.getLocation());
          if (this.direction === c.Horizontal) {
            this.progress = h.clamp01((b.x - this._offset.x + a.anchorX * a.width) / a.width);
          } else {
            this.progress = h.clamp01((b.y - this._offset.y + a.anchorY * a.height) / a.height);
          }
        }
      },
      _updateHandlePosition: function () {
        if (this.handle) {
          var d;
          d = this.direction === c.Horizontal ? cc.v2(-this.node.width * this.node.anchorX + this.progress * this.node.width, 0) : cc.v2(0, -this.node.height * this.node.anchorY + this.progress * this.node.height);
          var e = this.node.convertToWorldSpaceAR(d);
          this.handle.node.position = this.handle.node.parent.convertToNodeSpaceAR(e);
        }
      }
    });
    cc.Slider = a.exports = d;
  }, {
    "../utils/misc": 236,
    "./CCComponent": 100
  }],
  115: [function (k, b) {
    "use strict";

    var d = k("../utils/misc");
    k("../CCNode").EventType;
    var e = k("./CCRenderComponent");
    var f = k("../utils/blend-func");
    var g = cc.Enum({
      SIMPLE: 0,
      SLICED: 1,
      TILED: 2,
      FILLED: 3,
      MESH: 4
    });
    var h = cc.Enum({
      HORIZONTAL: 0,
      VERTICAL: 1,
      RADIAL: 2
    });
    var i = cc.Enum({
      CUSTOM: 0,
      TRIMMED: 1,
      RAW: 2
    });
    var a = cc.Enum({
      NORMAL: 0,
      GRAY: 1
    });
    var j = cc.Class({
      name: "cc.Sprite",
      extends: e,
      mixins: [f],
      editor: false,
      properties: {
        _spriteFrame: {
          default: null,
          type: cc.SpriteFrame
        },
        _type: g.SIMPLE,
        _sizeMode: i.TRIMMED,
        _fillType: 0,
        _fillCenter: cc.v2(0, 0),
        _fillStart: 0,
        _fillRange: 0,
        _isTrimmedMode: true,
        _atlas: {
          default: null,
          type: cc.SpriteAtlas,
          tooltip: false,
          editorOnly: true,
          visible: true,
          animatable: false
        },
        spriteFrame: {
          get: function () {
            return this._spriteFrame;
          },
          set: function (c) {
            var a = this._spriteFrame;
            if (a !== c) {
              this._spriteFrame = c;
              this._applySpriteFrame(a);
            }
          },
          type: cc.SpriteFrame
        },
        type: {
          get: function () {
            return this._type;
          },
          set: function (b) {
            if (this._type !== b) {
              this._type = b;
              this.setVertsDirty();
              this._resetAssembler();
            }
          },
          type: g,
          animatable: false,
          tooltip: false
        },
        fillType: {
          get: function () {
            return this._fillType;
          },
          set: function (b) {
            if (b !== this._fillType) {
              this._fillType = b;
              this.setVertsDirty();
              this._resetAssembler();
            }
          },
          type: h,
          tooltip: false
        },
        fillCenter: {
          get: function () {
            return this._fillCenter;
          },
          set: function (b) {
            this._fillCenter.x = b.x;
            this._fillCenter.y = b.y;
            if (this._type === g.FILLED) {
              this.setVertsDirty();
            }
          },
          tooltip: false
        },
        fillStart: {
          get: function () {
            return this._fillStart;
          },
          set: function (b) {
            this._fillStart = d.clampf(b, -1, 1);
            if (this._type === g.FILLED) {
              this.setVertsDirty();
            }
          },
          tooltip: false
        },
        fillRange: {
          get: function () {
            return this._fillRange;
          },
          set: function (b) {
            this._fillRange = d.clampf(b, -1, 1);
            if (this._type === g.FILLED) {
              this.setVertsDirty();
            }
          },
          tooltip: false
        },
        trim: {
          get: function () {
            return this._isTrimmedMode;
          },
          set: function (b) {
            if (this._isTrimmedMode !== b) {
              this._isTrimmedMode = b;
              if (!(this._type !== g.SIMPLE && this._type !== g.MESH)) {
                this.setVertsDirty();
              }
            }
          },
          animatable: false,
          tooltip: false
        },
        sizeMode: {
          get: function () {
            return this._sizeMode;
          },
          set: function (a) {
            this._sizeMode = a;
            if (a !== i.CUSTOM) {
              this._applySpriteSize();
            }
          },
          animatable: false,
          type: i,
          tooltip: false
        }
      },
      statics: {
        FillType: h,
        Type: g,
        SizeMode: i,
        State: a
      },
      setVisible: function (b) {
        this.enabled = b;
      },
      setState: function () {},
      getState: function () {},
      __preload: function () {
        this._super();
        this._applySpriteFrame();
      },
      onEnable: function () {
        this._super();
        this._validateRender();
        if (this._spriteFrame && this._spriteFrame.isValid) {
          this._spriteFrame.ensureLoadTexture();
        }
        this.node.on(cc.Node.EventType.SIZE_CHANGED, this.setVertsDirty, this);
        this.node.on(cc.Node.EventType.ANCHOR_CHANGED, this.setVertsDirty, this);
      },
      onDisable: function () {
        this._super();
        this.node.off(cc.Node.EventType.SIZE_CHANGED, this.setVertsDirty, this);
        this.node.off(cc.Node.EventType.ANCHOR_CHANGED, this.setVertsDirty, this);
      },
      onRestore: false,
      _updateMaterial: function () {
        var e = null;
        if (this._spriteFrame) {
          e = this._spriteFrame.getTexture();
        }
        var g = this.getMaterial(0);
        if (g) {
          var b = g.getDefine("USE_TEXTURE");
          if (!(b === undefined || b)) {
            g.define("USE_TEXTURE", true);
          }
          var c = e && e.getImpl();
          if (g.getProperty("texture") !== c) {
            g.setProperty("texture", e);
          }
        }
        f.prototype._updateMaterial.call(this);
      },
      _applyAtlas: false,
      _validateRender: function () {
        var b = this._spriteFrame;
        if (!(this._materials[0] && b && b.textureLoaded())) {
          this.disableRender();
        }
      },
      _applySpriteSize: function () {
        if (this.isValid && this._spriteFrame && this._spriteFrame.isValid) {
          if (i.RAW === this._sizeMode) {
            var a = this._spriteFrame._originalSize;
            this.node.setContentSize(a);
          } else if (i.TRIMMED === this._sizeMode) {
            var b = this._spriteFrame._rect;
            this.node.setContentSize(b.width, b.height);
          }
          this.setVertsDirty();
        }
      },
      _applySpriteFrame: function (f) {
        if (this.isValid) {
          var a = f && f.isValid && f.getTexture();
          if (a && !a.loaded) {
            f.off("load", this._applySpriteSize, this);
          }
          var b = this._spriteFrame;
          var c = b && b.isValid;
          var d = c && b.getTexture();
          if (a !== d) {
            this._updateMaterial();
          }
          if (d && d.loaded) {
            this._applySpriteSize();
          } else {
            this.disableRender();
            if (c) {
              b.once("load", this._applySpriteSize, this);
            }
          }
        }
      }
    });
    cc.Sprite = b.exports = j;
  }, {
    "../CCNode": 26,
    "../utils/blend-func": 230,
    "../utils/misc": 236,
    "./CCRenderComponent": 109
  }],
  116: [function (e, a) {
    "use strict";

    var b = e("../utils/gray-sprite-state");
    var c = cc.Class({
      name: "cc.Toggle",
      extends: e("./CCButton"),
      mixins: [b],
      editor: false,
      properties: {
        _N$isChecked: true,
        isChecked: {
          get: function () {
            return this._N$isChecked;
          },
          set: function (c) {
            if (c !== this._N$isChecked) {
              var a = this.toggleGroup || this._toggleContainer;
              if (!(a && a.enabled && this._N$isChecked && !a.allowSwitchOff)) {
                this._N$isChecked = c;
                this._updateCheckMark();
                if (a && a.enabled) {
                  a.updateToggles(this);
                }
                if (cc.Toggle._triggerEventInScript_isChecked) {
                  this._emitToggleEvents();
                }
              }
            }
          },
          tooltip: false
        },
        toggleGroup: {
          default: null,
          tooltip: false,
          type: e("./CCToggleGroup")
        },
        checkMark: {
          default: null,
          type: cc.Sprite,
          tooltip: false
        },
        checkEvents: {
          default: [],
          type: cc.Component.EventHandler
        },
        _resizeToTarget: {
          animatable: false,
          set: function (b) {
            if (b) {
              this._resizeNodeToTargetNode();
            }
          }
        }
      },
      statics: {
        _triggerEventInScript_check: false,
        _triggerEventInScript_isChecked: false
      },
      onEnable: function () {
        this._super();
        this._registerToggleEvent();
        if (this.toggleGroup && this.toggleGroup.enabledInHierarchy) {
          this.toggleGroup.addToggle(this);
        }
      },
      onDisable: function () {
        this._super();
        this._unregisterToggleEvent();
        if (this.toggleGroup && this.toggleGroup.enabledInHierarchy) {
          this.toggleGroup.removeToggle(this);
        }
      },
      _hideCheckMark: function () {
        this._N$isChecked = false;
        this._updateCheckMark();
      },
      toggle: function (b) {
        this.isChecked = !this.isChecked;
        if (!(cc.Toggle._triggerEventInScript_isChecked || !cc.Toggle._triggerEventInScript_check && !b)) {
          this._emitToggleEvents();
        }
      },
      check: function () {
        this.isChecked = true;
        if (!cc.Toggle._triggerEventInScript_isChecked && cc.Toggle._triggerEventInScript_check) {
          this._emitToggleEvents();
        }
      },
      uncheck: function () {
        this.isChecked = false;
        if (!cc.Toggle._triggerEventInScript_isChecked && cc.Toggle._triggerEventInScript_check) {
          this._emitToggleEvents();
        }
      },
      _updateCheckMark: function () {
        if (this.checkMark) {
          this.checkMark.node.active = !!this.isChecked;
        }
      },
      _updateDisabledState: function () {
        this._super();
        if (this.enableAutoGrayEffect && this.checkMark) {
          var b = !this.interactable;
          this._switchGrayMaterial(b, this.checkMark);
        }
      },
      _registerToggleEvent: function () {
        this.node.on("click", this.toggle, this);
      },
      _unregisterToggleEvent: function () {
        this.node.off("click", this.toggle, this);
      },
      _emitToggleEvents: function () {
        this.node.emit("toggle", this);
        if (this.checkEvents) {
          cc.Component.EventHandler.emitEvents(this.checkEvents, this);
        }
      }
    });
    cc.Toggle = a.exports = c;
    e("../platform/js").get(c.prototype, "_toggleContainer", function () {
      var b = this.node.parent;
      if (cc.Node.isNode(b)) {
        return b.getComponent(cc.ToggleContainer);
      } else {
        return null;
      }
    });
  }, {
    "../platform/js": 183,
    "../utils/gray-sprite-state": 233,
    "./CCButton": 98,
    "./CCToggleGroup": 118
  }],
  117: [function (d, a) {
    "use strict";

    var b = cc.Class({
      name: "cc.ToggleContainer",
      extends: cc.Component,
      editor: false,
      properties: {
        allowSwitchOff: {
          tooltip: false,
          default: false
        },
        checkEvents: {
          default: [],
          type: cc.Component.EventHandler
        }
      },
      updateToggles: function (c) {
        if (this.enabledInHierarchy && c.isChecked) {
          this.toggleItems.forEach(function (a) {
            if (a !== c && a.isChecked && a.enabled) {
              a._hideCheckMark();
            }
          });
          if (this.checkEvents) {
            cc.Component.EventHandler.emitEvents(this.checkEvents, c);
          }
        }
      },
      _allowOnlyOneToggleChecked: function () {
        var c = false;
        this.toggleItems.forEach(function (a) {
          if (c) {
            a._hideCheckMark();
          } else if (a.isChecked) {
            c = true;
          }
        });
        return c;
      },
      _makeAtLeastOneToggleChecked: function () {
        if (!this._allowOnlyOneToggleChecked() && !this.allowSwitchOff) {
          var b = this.toggleItems;
          if (b.length > 0) {
            b[0].check();
          }
        }
      },
      onEnable: function () {
        this._makeAtLeastOneToggleChecked();
        this.node.on("child-added", this._allowOnlyOneToggleChecked, this);
        this.node.on("child-removed", this._makeAtLeastOneToggleChecked, this);
      },
      onDisable: function () {
        this.node.off("child-added", this._allowOnlyOneToggleChecked, this);
        this.node.off("child-removed", this._makeAtLeastOneToggleChecked, this);
      }
    });
    d("../platform/js").get(b.prototype, "toggleItems", function () {
      return this.node._children.map(function (b) {
        return b.getComponent(cc.Toggle);
      }).filter(Boolean);
    });
    cc.ToggleContainer = a.exports = b;
  }, {
    "../platform/js": 183
  }],
  118: [function (f, a) {
    "use strict";

    var b = cc.Class({
      name: "cc.ToggleGroup",
      extends: cc.Component,
      ctor: function () {
        this._toggleItems = [];
      },
      editor: false,
      properties: {
        allowSwitchOff: {
          tooltip: false,
          default: false
        },
        toggleItems: {
          get: function () {
            return this._toggleItems;
          }
        }
      },
      updateToggles: function (c) {
        if (this.enabledInHierarchy) {
          this._toggleItems.forEach(function (a) {
            if (c.isChecked && a !== c && a.isChecked && a.enabled) {
              a._hideCheckMark();
            }
          });
        }
      },
      addToggle: function (b) {
        if (this._toggleItems.indexOf(b) === -1) {
          this._toggleItems.push(b);
        }
        this._allowOnlyOneToggleChecked();
      },
      removeToggle: function (c) {
        var a = this._toggleItems.indexOf(c);
        if (a > -1) {
          this._toggleItems.splice(a, 1);
        }
        this._makeAtLeastOneToggleChecked();
      },
      _allowOnlyOneToggleChecked: function () {
        var c = false;
        this._toggleItems.forEach(function (a) {
          if (c && a.enabled) {
            a._hideCheckMark();
          }
          if (a.isChecked && a.enabled) {
            c = true;
          }
        });
        return c;
      },
      _makeAtLeastOneToggleChecked: function () {
        if (!(this._allowOnlyOneToggleChecked() || this.allowSwitchOff)) {
          if (this._toggleItems.length > 0) {
            this._toggleItems[0].isChecked = true;
          }
        }
      },
      start: function () {
        this._makeAtLeastOneToggleChecked();
      }
    });
    var c = f("../platform/js");
    var d = false;
    c.get(cc, "ToggleGroup", function () {
      if (!d) {
        d = true;
      }
      return b;
    });
    a.exports = b;
  }, {
    "../platform/js": 183
  }],
  119: [function (d, a) {
    "use strict";

    var b = cc.Class({
      name: "cc.ViewGroup",
      extends: d("./CCComponent")
    });
    cc.ViewGroup = a.exports = b;
  }, {
    "./CCComponent": 100
  }],
  120: [function (d, b) {
    "use strict";

    var g = d("../base-ui/CCWidgetManager");
    var e = g.AlignMode;
    var i = g._AlignFlags;
    var j = i.TOP;
    var k = i.MID;
    var m = i.BOT;
    var p = i.LEFT;
    var a = i.CENTER;
    var c = i.RIGHT;
    var l = j | m;
    var h = p | c;
    var n = cc.Class({
      name: "cc.Widget",
      extends: d("./CCComponent"),
      editor: false,
      properties: {
        target: {
          get: function () {
            return this._target;
          },
          set: function (b) {
            this._target = b;
          },
          type: cc.Node,
          tooltip: false
        },
        isAlignTop: {
          get: function () {
            return (this._alignFlags & j) > 0;
          },
          set: function (b) {
            this._setAlign(j, b);
          },
          animatable: false,
          tooltip: false
        },
        isAlignVerticalCenter: {
          get: function () {
            return (this._alignFlags & k) > 0;
          },
          set: function (b) {
            if (b) {
              this.isAlignTop = false;
              this.isAlignBottom = false;
              this._alignFlags |= k;
            } else {
              this._alignFlags &= ~k;
            }
          },
          animatable: false,
          tooltip: false
        },
        isAlignBottom: {
          get: function () {
            return (this._alignFlags & m) > 0;
          },
          set: function (a) {
            this._setAlign(m, a);
          },
          animatable: false,
          tooltip: false
        },
        isAlignLeft: {
          get: function () {
            return (this._alignFlags & p) > 0;
          },
          set: function (b) {
            this._setAlign(p, b);
          },
          animatable: false,
          tooltip: false
        },
        isAlignHorizontalCenter: {
          get: function () {
            return (this._alignFlags & a) > 0;
          },
          set: function (b) {
            if (b) {
              this.isAlignLeft = false;
              this.isAlignRight = false;
              this._alignFlags |= a;
            } else {
              this._alignFlags &= ~a;
            }
          },
          animatable: false,
          tooltip: false
        },
        isAlignRight: {
          get: function () {
            return (this._alignFlags & c) > 0;
          },
          set: function (b) {
            this._setAlign(c, b);
          },
          animatable: false,
          tooltip: false
        },
        isStretchWidth: {
          get: function () {
            return (this._alignFlags & h) === h;
          },
          visible: false
        },
        isStretchHeight: {
          get: function () {
            return (this._alignFlags & l) === l;
          },
          visible: false
        },
        top: {
          get: function () {
            return this._top;
          },
          set: function (b) {
            this._top = b;
          },
          tooltip: false
        },
        bottom: {
          get: function () {
            return this._bottom;
          },
          set: function (b) {
            this._bottom = b;
          },
          tooltip: false
        },
        left: {
          get: function () {
            return this._left;
          },
          set: function (b) {
            this._left = b;
          },
          tooltip: false
        },
        right: {
          get: function () {
            return this._right;
          },
          set: function (b) {
            this._right = b;
          },
          tooltip: false
        },
        horizontalCenter: {
          get: function () {
            return this._horizontalCenter;
          },
          set: function (b) {
            this._horizontalCenter = b;
          },
          tooltip: false
        },
        verticalCenter: {
          get: function () {
            return this._verticalCenter;
          },
          set: function (b) {
            this._verticalCenter = b;
          },
          tooltip: false
        },
        isAbsoluteHorizontalCenter: {
          get: function () {
            return this._isAbsHorizontalCenter;
          },
          set: function (b) {
            this._isAbsHorizontalCenter = b;
          },
          animatable: false
        },
        isAbsoluteVerticalCenter: {
          get: function () {
            return this._isAbsVerticalCenter;
          },
          set: function (b) {
            this._isAbsVerticalCenter = b;
          },
          animatable: false
        },
        isAbsoluteTop: {
          get: function () {
            return this._isAbsTop;
          },
          set: function (b) {
            this._isAbsTop = b;
          },
          animatable: false
        },
        isAbsoluteBottom: {
          get: function () {
            return this._isAbsBottom;
          },
          set: function (b) {
            this._isAbsBottom = b;
          },
          animatable: false
        },
        isAbsoluteLeft: {
          get: function () {
            return this._isAbsLeft;
          },
          set: function (b) {
            this._isAbsLeft = b;
          },
          animatable: false
        },
        isAbsoluteRight: {
          get: function () {
            return this._isAbsRight;
          },
          set: function (b) {
            this._isAbsRight = b;
          },
          animatable: false
        },
        alignMode: {
          default: e.ON_WINDOW_RESIZE,
          type: e,
          tooltip: false
        },
        _wasAlignOnce: {
          default: undefined,
          formerlySerializedAs: "isAlignOnce"
        },
        _target: null,
        _alignFlags: 0,
        _left: 0,
        _right: 0,
        _top: 0,
        _bottom: 0,
        _verticalCenter: 0,
        _horizontalCenter: 0,
        _isAbsLeft: true,
        _isAbsRight: true,
        _isAbsTop: true,
        _isAbsBottom: true,
        _isAbsHorizontalCenter: true,
        _isAbsVerticalCenter: true,
        _originalWidth: 0,
        _originalHeight: 0
      },
      statics: {
        AlignMode: e
      },
      onLoad: function () {
        if (this._wasAlignOnce !== undefined) {
          this.alignMode = this._wasAlignOnce ? e.ONCE : e.ALWAYS;
          this._wasAlignOnce = undefined;
        }
      },
      onEnable: function () {
        g.add(this);
      },
      onDisable: function () {
        g.remove(this);
      },
      _validateTargetInDEV: false,
      _setAlign: function (d, a) {
        if (a !== (this._alignFlags & d) > 0) {
          var b = (d & h) > 0;
          if (a) {
            this._alignFlags |= d;
            if (b) {
              this.isAlignHorizontalCenter = false;
              if (this.isStretchWidth) {
                this._originalWidth = this.node.width;
              }
            } else {
              this.isAlignVerticalCenter = false;
              if (this.isStretchHeight) {
                this._originalHeight = this.node.height;
              }
            }
          } else {
            if (b) {
              if (this.isStretchWidth) {
                this.node.width = this._originalWidth;
              }
            } else if (this.isStretchHeight) {
              this.node.height = this._originalHeight;
            }
            this._alignFlags &= ~d;
          }
        }
      },
      updateAlignment: function () {
        g.updateAlignment(this.node);
      }
    });
    Object.defineProperty(n.prototype, "isAlignOnce", {
      get: function () {
        return this.alignMode === e.ONCE;
      },
      set: function (b) {
        this.alignMode = b ? e.ONCE : e.ALWAYS;
      }
    });
    cc.Widget = b.exports = n;
  }, {
    "../base-ui/CCWidgetManager": 85,
    "./CCComponent": 100
  }],
  121: [function (e, a) {
    "use strict";

    var b = e("./CCComponent");
    var c = cc.Class({
      name: "cc.SubContextView",
      extends: b,
      editor: false,
      properties: {
        _firstlyEnabled: true,
        _fps: 60,
        fps: {
          get: function () {
            return this._fps;
          },
          set: function (b) {
            if (this._fps !== b) {
              this._fps = b;
              this._updateInterval = 1 / b;
              this._updateSubContextFrameRate();
            }
          },
          tooltip: false
        }
      },
      ctor: function () {
        this._sprite = null;
        this._tex = new cc.Texture2D();
        this._tex._packable = false;
        this._context = null;
        this._updatedTime = performance.now();
        this._updateInterval = 0;
      },
      onLoad: function () {
        if (window.__globalAdapter && __globalAdapter.getOpenDataContext) {
          this._updateInterval = 1000 / this._fps;
          this._context = __globalAdapter.getOpenDataContext();
          this.reset();
          var b = this._context.canvas;
          this._tex.setPremultiplyAlpha(true);
          this._tex.initWithElement(b);
          this._tex._packable = false;
          this._sprite = this.node.getComponent(cc.Sprite);
          if (!this._sprite) {
            this._sprite = this.node.addComponent(cc.Sprite);
            this._sprite.srcBlendFactor = cc.macro.BlendFactor.ONE;
          }
          this._sprite.spriteFrame = new cc.SpriteFrame(this._tex);
        } else {
          this.enabled = false;
        }
      },
      reset: function () {
        if (this._context) {
          this.updateSubContextViewport();
          var b = this._context.canvas;
          if (b) {
            b.width = this.node.width;
            b.height = this.node.height;
          }
        }
      },
      onEnable: function () {
        if (this._firstlyEnabled && this._context) {
          this._context.postMessage({
            fromEngine: true,
            event: "boot"
          });
          this._firstlyEnabled = false;
        } else {
          this._runSubContextMainLoop();
        }
        this._registerNodeEvent();
        this._updateSubContextFrameRate();
        this.updateSubContextViewport();
      },
      onDisable: function () {
        this._unregisterNodeEvent();
        this._stopSubContextMainLoop();
      },
      update: function (b) {
        if (b === undefined) {
          if (this._context) {
            this._context.postMessage({
              fromEngine: true,
              event: "step"
            });
          }
          this._updateSubContextTexture();
          return;
        }
        if (performance.now() - this._updatedTime >= this._updateInterval) {
          this._updatedTime += this._updateInterval;
          this._updateSubContextTexture();
        }
      },
      _updateSubContextTexture: function () {
        if (this._tex && this._context) {
          this._tex.initWithElement(this._context.canvas);
          this._tex._packable = false;
          this._sprite._activateMaterial();
        }
      },
      updateSubContextViewport: function () {
        if (this._context) {
          var d = this.node.getBoundingBoxToWorld();
          var a = cc.view._scaleX;
          var b = cc.view._scaleY;
          this._context.postMessage({
            fromEngine: true,
            event: "viewport",
            x: d.x * a + cc.view._viewportRect.x,
            y: d.y * b + cc.view._viewportRect.y,
            width: d.width * a,
            height: d.height * b
          });
        }
      },
      _registerNodeEvent: function () {
        this.node.on("position-changed", this.updateSubContextViewport, this);
        this.node.on("scale-changed", this.updateSubContextViewport, this);
        this.node.on("size-changed", this.updateSubContextViewport, this);
      },
      _unregisterNodeEvent: function () {
        this.node.off("position-changed", this.updateSubContextViewport, this);
        this.node.off("scale-changed", this.updateSubContextViewport, this);
        this.node.off("size-changed", this.updateSubContextViewport, this);
      },
      _runSubContextMainLoop: function () {
        if (this._context) {
          this._context.postMessage({
            fromEngine: true,
            event: "mainLoop",
            value: true
          });
        }
      },
      _stopSubContextMainLoop: function () {
        if (this._context) {
          this._context.postMessage({
            fromEngine: true,
            event: "mainLoop",
            value: false
          });
        }
      },
      _updateSubContextFrameRate: function () {
        if (this._context) {
          this._context.postMessage({
            fromEngine: true,
            event: "frameRate",
            value: this._fps
          });
        }
      }
    });
    cc.SubContextView = a.exports = c;
    cc.WXSubContextView = c;
    cc.SwanSubContextView = c;
  }, {
    "./CCComponent": 100
  }],
  122: [function (h, b) {
    "use strict";

    var d = h("../../platform/CCMacro");
    var e = h("../editbox/EditBoxImplBase");
    var f = h("../CCLabel");
    var g = h("./types");
    var i = g.InputMode;
    var j = g.InputFlag;
    var a = g.KeyboardReturnType;
    function k(b) {
      return b.charAt(0).toUpperCase() + b.slice(1);
    }
    var c = cc.Class({
      name: "cc.EditBox",
      extends: cc.Component,
      editor: false,
      properties: {
        _string: "",
        string: {
          tooltip: false,
          get: function () {
            return this._string;
          },
          set: function (b) {
            b = "" + b;
            if (this.maxLength >= 0 && b.length >= this.maxLength) {
              b = b.slice(0, this.maxLength);
            }
            this._string = b;
            this._updateString(b);
          }
        },
        textLabel: {
          tooltip: false,
          default: null,
          type: f,
          notify: function (b) {
            if (this.textLabel && this.textLabel !== b) {
              this._updateTextLabel();
              this._updateLabels();
            }
          }
        },
        placeholderLabel: {
          tooltip: false,
          default: null,
          type: f,
          notify: function (b) {
            if (this.placeholderLabel && this.placeholderLabel !== b) {
              this._updatePlaceholderLabel();
              this._updateLabels();
            }
          }
        },
        background: {
          tooltip: false,
          default: null,
          type: cc.Sprite,
          notify: function (b) {
            if (this.background && this.background !== b) {
              this._updateBackgroundSprite();
            }
          }
        },
        _N$backgroundImage: {
          default: undefined,
          type: cc.SpriteFrame
        },
        backgroundImage: {
          get: function () {
            if (this.background) {
              return this.background.spriteFrame;
            } else {
              return null;
            }
          },
          set: function (b) {
            if (this.background) {
              this.background.spriteFrame = b;
            }
          }
        },
        returnType: {
          default: a.DEFAULT,
          tooltip: false,
          displayName: "KeyboardReturnType",
          type: a
        },
        _N$returnType: {
          default: undefined,
          type: cc.Float
        },
        inputFlag: {
          tooltip: false,
          default: j.DEFAULT,
          type: j,
          notify: function () {
            this._updateString(this._string);
          }
        },
        inputMode: {
          tooltip: false,
          default: i.ANY,
          type: i,
          notify: function (b) {
            if (this.inputMode !== b) {
              this._updateTextLabel();
              this._updatePlaceholderLabel();
            }
          }
        },
        fontSize: {
          get: function () {
            if (this.textLabel) {
              return this.textLabel.fontSize;
            } else {
              return 0;
            }
          },
          set: function (b) {
            if (this.textLabel) {
              this.textLabel.fontSize = b;
            }
          }
        },
        _N$fontSize: {
          default: undefined,
          type: cc.Float
        },
        lineHeight: {
          get: function () {
            if (this.textLabel) {
              return this.textLabel.lineHeight;
            } else {
              return 0;
            }
          },
          set: function (b) {
            if (this.textLabel) {
              this.textLabel.lineHeight = b;
            }
          }
        },
        _N$lineHeight: {
          default: undefined,
          type: cc.Float
        },
        fontColor: {
          get: function () {
            if (this.textLabel) {
              return this.textLabel.node.color;
            } else {
              return cc.Color.BLACK;
            }
          },
          set: function (b) {
            if (this.textLabel) {
              this.textLabel.node.color = b;
              this.textLabel.node.opacity = b.a;
            }
          }
        },
        _N$fontColor: undefined,
        placeholder: {
          tooltip: false,
          get: function () {
            if (this.placeholderLabel) {
              return this.placeholderLabel.string;
            } else {
              return "";
            }
          },
          set: function (b) {
            if (this.placeholderLabel) {
              this.placeholderLabel.string = b;
            }
          }
        },
        _N$placeholder: {
          default: undefined,
          type: cc.String
        },
        placeholderFontSize: {
          get: function () {
            if (this.placeholderLabel) {
              return this.placeholderLabel.fontSize;
            } else {
              return 0;
            }
          },
          set: function (b) {
            if (this.placeholderLabel) {
              this.placeholderLabel.fontSize = b;
            }
          }
        },
        _N$placeholderFontSize: {
          default: undefined,
          type: cc.Float
        },
        placeholderFontColor: {
          get: function () {
            if (this.placeholderLabel) {
              return this.placeholderLabel.node.color;
            } else {
              return cc.Color.BLACK;
            }
          },
          set: function (b) {
            if (this.placeholderLabel) {
              this.placeholderLabel.node.color = b;
              this.placeholderLabel.node.opacity = b.a;
            }
          }
        },
        _N$placeholderFontColor: undefined,
        maxLength: {
          tooltip: false,
          default: 20
        },
        _N$maxLength: {
          default: undefined,
          type: cc.Float
        },
        stayOnTop: {
          default: false,
          notify: function () {}
        },
        _tabIndex: 0,
        tabIndex: {
          tooltip: false,
          get: function () {
            return this._tabIndex;
          },
          set: function (b) {
            if (this._tabIndex !== b) {
              this._tabIndex = b;
              if (this._impl) {
                this._impl.setTabIndex(b);
              }
            }
          }
        },
        editingDidBegan: {
          default: [],
          type: cc.Component.EventHandler
        },
        textChanged: {
          default: [],
          type: cc.Component.EventHandler
        },
        editingDidEnded: {
          default: [],
          type: cc.Component.EventHandler
        },
        editingReturn: {
          default: [],
          type: cc.Component.EventHandler
        }
      },
      statics: {
        _ImplClass: e,
        KeyboardReturnType: a,
        InputFlag: j,
        InputMode: i
      },
      _init: function () {
        this._upgradeComp();
        this._isLabelVisible = true;
        this.node.on(cc.Node.EventType.SIZE_CHANGED, this._syncSize, this);
        (this._impl = new c._ImplClass()).init(this);
        this._updateString(this._string);
        this._syncSize();
      },
      _updateBackgroundSprite: function () {
        var c = this.background;
        if (!c) {
          var d = this.node.getChildByName("BACKGROUND_SPRITE");
          if (!d) {
            d = new cc.Node("BACKGROUND_SPRITE");
          }
          if (!(c = d.getComponent(cc.Sprite))) {
            c = d.addComponent(cc.Sprite);
          }
          d.parent = this.node;
          this.background = c;
        }
        c.type = cc.Sprite.Type.SLICED;
        if (this._N$backgroundImage !== undefined) {
          c.spriteFrame = this._N$backgroundImage;
          this._N$backgroundImage = undefined;
        }
      },
      _updateTextLabel: function () {
        var c = this.textLabel;
        if (!c) {
          var e = this.node.getChildByName("TEXT_LABEL");
          if (!e) {
            e = new cc.Node("TEXT_LABEL");
          }
          if (!(c = e.getComponent(f))) {
            c = e.addComponent(f);
          }
          e.parent = this.node;
          this.textLabel = c;
        }
        c.node.setAnchorPoint(0, 1);
        c.overflow = f.Overflow.CLAMP;
        if (this.inputMode === i.ANY) {
          c.verticalAlign = d.VerticalTextAlignment.TOP;
          c.enableWrapText = true;
        } else {
          c.verticalAlign = d.VerticalTextAlignment.CENTER;
          c.enableWrapText = false;
        }
        c.string = this._updateLabelStringStyle(this._string);
        if (this._N$fontColor !== undefined) {
          c.node.color = this._N$fontColor;
          c.node.opacity = this._N$fontColor.a;
          this._N$fontColor = undefined;
        }
        if (this._N$fontSize !== undefined) {
          c.fontSize = this._N$fontSize;
          this._N$fontSize = undefined;
        }
        if (this._N$lineHeight !== undefined) {
          c.lineHeight = this._N$lineHeight;
          this._N$lineHeight = undefined;
        }
      },
      _updatePlaceholderLabel: function () {
        var c = this.placeholderLabel;
        if (!c) {
          var e = this.node.getChildByName("PLACEHOLDER_LABEL");
          if (!e) {
            e = new cc.Node("PLACEHOLDER_LABEL");
          }
          if (!(c = e.getComponent(f))) {
            c = e.addComponent(f);
          }
          e.parent = this.node;
          this.placeholderLabel = c;
        }
        c.node.setAnchorPoint(0, 1);
        c.overflow = f.Overflow.CLAMP;
        if (this.inputMode === i.ANY) {
          c.verticalAlign = d.VerticalTextAlignment.TOP;
          c.enableWrapText = true;
        } else {
          c.verticalAlign = d.VerticalTextAlignment.CENTER;
          c.enableWrapText = false;
        }
        c.string = this.placeholder;
        if (this._N$placeholderFontColor !== undefined) {
          c.node.color = this._N$placeholderFontColor;
          c.node.opacity = this._N$placeholderFontColor.a;
          this._N$placeholderFontColor = undefined;
        }
        if (this._N$placeholderFontSize !== undefined) {
          c.fontSize = this._N$placeholderFontSize;
          this._N$placeholderFontSize = undefined;
        }
      },
      _upgradeComp: function () {
        if (this._N$returnType !== undefined) {
          this.returnType = this._N$returnType;
          this._N$returnType = undefined;
        }
        if (this._N$maxLength !== undefined) {
          this.maxLength = this._N$maxLength;
          this._N$maxLength = undefined;
        }
        if (this._N$backgroundImage !== undefined) {
          this._updateBackgroundSprite();
        }
        if (!(this._N$fontColor === undefined && this._N$fontSize === undefined && this._N$lineHeight === undefined)) {
          this._updateTextLabel();
        }
        if (!(this._N$placeholderFontColor === undefined && this._N$placeholderFontSize === undefined)) {
          this._updatePlaceholderLabel();
        }
        if (this._N$placeholder !== undefined) {
          this.placeholder = this._N$placeholder;
          this._N$placeholder = undefined;
        }
      },
      _syncSize: function () {
        if (this._impl) {
          var b = this.node.getContentSize();
          this._impl.setSize(b.width, b.height);
        }
      },
      _showLabels: function () {
        this._isLabelVisible = true;
        this._updateLabels();
      },
      _hideLabels: function () {
        this._isLabelVisible = false;
        if (this.textLabel) {
          this.textLabel.node.active = false;
        }
        if (this.placeholderLabel) {
          this.placeholderLabel.node.active = false;
        }
      },
      _updateLabels: function () {
        if (this._isLabelVisible) {
          var b = this._string;
          if (this.textLabel) {
            this.textLabel.node.active = b !== "";
          }
          if (this.placeholderLabel) {
            this.placeholderLabel.node.active = b === "";
          }
        }
      },
      _updateString: function (d) {
        var a = this.textLabel;
        if (a) {
          var b = d;
          if (b) {
            b = this._updateLabelStringStyle(b);
          }
          a.string = b;
          this._updateLabels();
        }
      },
      _updateLabelStringStyle: function (a, c) {
        var d = this.inputFlag;
        if (c || d !== j.PASSWORD) {
          if (d === j.INITIAL_CAPS_ALL_CHARACTERS) {
            a = a.toUpperCase();
          } else if (d === j.INITIAL_CAPS_WORD) {
            a = a.replace(/(?:^|\s)\S/g, function (b) {
              return b.toUpperCase();
            });
          } else if (d === j.INITIAL_CAPS_SENTENCE) {
            a = k(a);
          }
        } else {
          for (var e = "", i = a.length, g = 0; g < i; ++g) {
            e += "●";
          }
          a = e;
        }
        return a;
      },
      editBoxEditingDidBegan: function () {
        cc.Component.EventHandler.emitEvents(this.editingDidBegan, this);
        this.node.emit("editing-did-began", this);
      },
      editBoxEditingDidEnded: function () {
        cc.Component.EventHandler.emitEvents(this.editingDidEnded, this);
        this.node.emit("editing-did-ended", this);
      },
      editBoxTextChanged: function (b) {
        b = this._updateLabelStringStyle(b, true);
        this.string = b;
        cc.Component.EventHandler.emitEvents(this.textChanged, b, this);
        this.node.emit("text-changed", this);
      },
      editBoxEditingReturn: function () {
        cc.Component.EventHandler.emitEvents(this.editingReturn, this);
        this.node.emit("editing-return", this);
      },
      onEnable: function () {
        this._registerEvent();
        if (this._impl) {
          this._impl.enable();
        }
      },
      onDisable: function () {
        this._unregisterEvent();
        if (this._impl) {
          this._impl.disable();
        }
      },
      onDestroy: function () {
        if (this._impl) {
          this._impl.clear();
        }
      },
      __preload: function () {
        this._init();
      },
      _registerEvent: function () {
        this.node.on(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this);
        this.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
      },
      _unregisterEvent: function () {
        this.node.off(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this);
        this.node.off(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
      },
      _onTouchBegan: function (b) {
        b.stopPropagation();
      },
      _onTouchCancel: function (b) {
        b.stopPropagation();
      },
      _onTouchEnded: function (b) {
        if (this._impl) {
          this._impl.beginEditing();
        }
        b.stopPropagation();
      },
      setFocus: function () {
        if (this._impl) {
          this._impl.setFocus(true);
        }
      },
      focus: function () {
        if (this._impl) {
          this._impl.setFocus(true);
        }
      },
      blur: function () {
        if (this._impl) {
          this._impl.setFocus(false);
        }
      },
      isFocused: function () {
        return !!this._impl && this._impl.isFocused();
      },
      update: function () {
        if (this._impl) {
          this._impl.update();
        }
      }
    });
    cc.EditBox = b.exports = c;
    if (cc.sys.isBrowser) {
      h("./WebEditBoxImpl");
    }
  }, {
    "../../platform/CCMacro": 167,
    "../CCLabel": 102,
    "../editbox/EditBoxImplBase": 123,
    "./WebEditBoxImpl": 124,
    "./types": 126
  }],
  123: [function (d, a) {
    "use strict";

    var b = cc.Class({
      ctor: function () {
        this._delegate = null;
        this._editing = false;
      },
      init: function () {},
      enable: function () {},
      disable: function () {
        if (this._editing) {
          this.endEditing();
        }
      },
      clear: function () {},
      update: function () {},
      setTabIndex: function () {},
      setSize: function () {},
      setFocus: function (b) {
        if (b) {
          this.beginEditing();
        } else {
          this.endEditing();
        }
      },
      isFocused: function () {
        return this._editing;
      },
      beginEditing: function () {},
      endEditing: function () {}
    });
    a.exports = b;
  }, {}],
  124: [function (e) {
    "use strict";

    var b;
    var g = (b = e("../../value-types/mat4")) && b.__esModule ? b : {
      default: b
    };
    var k = e("../../platform/utils");
    var i = e("../../platform/CCMacro");
    var m = e("./types");
    var n = e("../CCLabel");
    var q = e("./tabIndexUtil");
    var a = cc.EditBox;
    var o = cc.js;
    var r = m.InputMode;
    var l = m.InputFlag;
    var c = m.KeyboardReturnType;
    var z = {
      zoomInvalid: false
    };
    if (!(cc.sys.OS_ANDROID !== cc.sys.os || cc.sys.browserType !== cc.sys.BROWSER_TYPE_SOUGOU && cc.sys.browserType !== cc.sys.BROWSER_TYPE_360)) {
      z.zoomInvalid = true;
    }
    var h = 0;
    var s = cc.v3();
    var f = null;
    var v = false;
    var w = false;
    var A = a._ImplClass;
    function t() {
      A.call(this);
      this._domId = "EditBoxId_" + ++h;
      this._placeholderStyleSheet = null;
      this._elem = null;
      this._isTextArea = false;
      this._worldMat = new g.default();
      this._cameraMat = new g.default();
      this._m00 = 0;
      this._m01 = 0;
      this._m04 = 0;
      this._m05 = 0;
      this._m12 = 0;
      this._m13 = 0;
      this._w = 0;
      this._h = 0;
      this._cacheViewportRect = cc.rect(0, 0, 0, 0);
      this._inputMode = null;
      this._inputFlag = null;
      this._returnType = null;
      this._eventListeners = {};
      this._textLabelFont = null;
      this._textLabelFontSize = null;
      this._textLabelFontColor = null;
      this._textLabelAlign = null;
      this._placeholderLabelFont = null;
      this._placeholderLabelFontSize = null;
      this._placeholderLabelFontColor = null;
      this._placeholderLabelAlign = null;
      this._placeholderLineHeight = null;
    }
    o.extend(t, A);
    a._ImplClass = t;
    Object.assign(t.prototype, {
      init: function (a) {
        if (a) {
          this._delegate = a;
          if (a.inputMode === r.ANY) {
            this._createTextArea();
          } else {
            this._createInput();
          }
          q.add(this);
          this.setTabIndex(a.tabIndex);
          this._initStyleSheet();
          this._registerEventListeners();
          this._addDomToGameContainer();
          v = cc.view.isAutoFullScreenEnabled();
          w = cc.view._resizeWithBrowserSize;
        }
      },
      clear: function () {
        this._removeEventListeners();
        this._removeDomFromGameContainer();
        q.remove(this);
        if (f === this) {
          f = null;
        }
      },
      update: function () {
        this._updateMatrix();
      },
      setTabIndex: function (a) {
        this._elem.tabIndex = a;
        q.resort();
      },
      setSize: function (d, a) {
        var b = this._elem;
        b.style.width = d + "px";
        b.style.height = a + "px";
      },
      beginEditing: function () {
        if (f && f !== this) {
          f.setFocus(false);
        }
        this._editing = true;
        f = this;
        this._delegate.editBoxEditingDidBegan();
        this._showDom();
        this._elem.focus();
      },
      endEditing: function () {
        if (this._elem) {
          this._elem.blur();
        }
      },
      _createInput: function () {
        this._isTextArea = false;
        this._elem = document.createElement("input");
      },
      _createTextArea: function () {
        this._isTextArea = true;
        this._elem = document.createElement("textarea");
      },
      _addDomToGameContainer: function () {
        cc.game.container.appendChild(this._elem);
        document.head.appendChild(this._placeholderStyleSheet);
      },
      _removeDomFromGameContainer: function () {
        if (k.contains(cc.game.container, this._elem)) {
          cc.game.container.removeChild(this._elem);
        }
        if (k.contains(document.head, this._placeholderStyleSheet)) {
          document.head.removeChild(this._placeholderStyleSheet);
        }
        delete this._elem;
        delete this._placeholderStyleSheet;
      },
      _showDom: function () {
        this._updateMaxLength();
        this._updateInputType();
        this._updateStyleSheet();
        this._elem.style.display = "";
        this._delegate._hideLabels();
        if (cc.sys.isMobile) {
          this._showDomOnMobile();
        }
      },
      _hideDom: function () {
        this._elem.style.display = "none";
        this._delegate._showLabels();
        if (cc.sys.isMobile) {
          this._hideDomOnMobile();
        }
      },
      _showDomOnMobile: function () {
        if (cc.sys.os === cc.sys.OS_ANDROID) {
          if (v) {
            cc.view.enableAutoFullScreen(false);
            cc.screen.exitFullScreen();
          }
          if (w) {
            cc.view.resizeWithBrowserSize(false);
          }
          this._adjustWindowScroll();
        }
      },
      _hideDomOnMobile: function () {
        if (cc.sys.os === cc.sys.OS_ANDROID) {
          if (w) {
            cc.view.resizeWithBrowserSize(true);
          }
          // TOLOOK
          // TOLOOK
          setTimeout(function () {
            if (!f) {
              if (v) {
                cc.view.enableAutoFullScreen(true);
              }
            }
          }, 800);
        }
      },
      _adjustWindowScroll: function () {
        var b = this;
        // TOLOOK
        // TOLOOK
        setTimeout(function () {
          if (window.scrollY < 100) {
            b._elem.scrollIntoView({
              block: "start",
              inline: "nearest",
              behavior: "smooth"
            });
          }
        }, 800);
      },
      _scrollBackWindow: function () {
        // TOLOOK
        // TOLOOK
        setTimeout(function () {
          var b = cc.sys;
          if (b.browserType !== b.BROWSER_TYPE_WECHAT || b.os !== b.OS_IOS) {
            window.scrollTo(0, 0);
          } else if (window.top) {
            window.top.scrollTo(0, 0);
          }
        }, 800);
      },
      _updateCameraMatrix: function () {
        var f = this._delegate.node;
        f.getWorldMatrix(this._worldMat);
        var a = this._worldMat;
        var b = f._contentSize;
        var c = f._anchorPoint;
        s.x = -c.x * b.width;
        s.y = -c.y * b.height;
        g.default.transform(a, a, s);
        var d = cc.Camera.findCamera(f);
        return !!d && (d.getWorldToScreenMatrix2D(this._cameraMat), g.default.mul(this._cameraMat, this._cameraMat, a), true);
      },
      _updateMatrix: function () {
        if (this._updateCameraMatrix()) {
          var c = this._cameraMat.m;
          var b = this._delegate.node;
          var d = cc.view;
          if (this._m00 !== c[0] || this._m01 !== c[1] || this._m04 !== c[4] || this._m05 !== c[5] || this._m12 !== c[12] || this._m13 !== c[13] || this._w !== b._contentSize.width || this._h !== b._contentSize.height || !this._cacheViewportRect.equals(d._viewportRect)) {
            this._m00 = c[0];
            this._m01 = c[1];
            this._m04 = c[4];
            this._m05 = c[5];
            this._m12 = c[12];
            this._m13 = c[13];
            this._w = b._contentSize.width;
            this._h = b._contentSize.height;
            this._cacheViewportRect.set(d._viewportRect);
            var e = d._scaleX;
            var f = d._scaleY;
            var m = d._viewportRect;
            var k = d._devicePixelRatio;
            e /= k;
            f /= k;
            var n = cc.game.container;
            var a = c[0] * e;
            var q = c[1];
            var r = c[4];
            var l = c[5] * f;
            var s = n && n.style.paddingLeft && parseInt(n.style.paddingLeft);
            s += m.x / k;
            var u = n && n.style.paddingBottom && parseInt(n.style.paddingBottom);
            u += m.y / k;
            var w = c[12] * e + s;
            var y = c[13] * f + u;
            if (z.zoomInvalid) {
              this.setSize(b.width * a, b.height * l);
              a = 1;
              l = 1;
            }
            var p = this._elem;
            var v = "matrix(" + a + "," + -q + "," + -r + "," + l + "," + w + "," + -y + ")";
            p.style.transform = v;
            p.style["-webkit-transform"] = v;
            p.style["transform-origin"] = "0px 100% 0px";
            p.style["-webkit-transform-origin"] = "0px 100% 0px";
          }
        }
      },
      _updateInputType: function () {
        var a = this._delegate;
        var b = a.inputMode;
        var h = a.inputFlag;
        var d = a.returnType;
        var e = this._elem;
        if (this._inputMode !== b || this._inputFlag !== h || this._returnType !== d) {
          this._inputMode = b;
          this._inputFlag = h;
          this._returnType = d;
          if (this._isTextArea) {
            var f = "none";
            if (h === l.INITIAL_CAPS_ALL_CHARACTERS) {
              f = "uppercase";
            } else if (h === l.INITIAL_CAPS_WORD) {
              f = "capitalize";
            }
            e.style.textTransform = f;
            return;
          }
          if (h === l.PASSWORD) {
            e.type = "password";
            e.style.textTransform = "none";
            return;
          }
          var k = e.type;
          if (b === r.EMAIL_ADDR) {
            k = "email";
          } else if (b === r.NUMERIC) {
            k = "number";
          } else if (b === r.DECIMAL) {
            k = "digit";
          } else if (b === r.PHONE_NUMBER) {
            k = "tel";
            e.onmousewheel = function () {
              return false;
            };
          } else if (b === r.URL) {
            k = "url";
          } else {
            k = "text";
            if (d === c.SEARCH) {
              k = "search";
            }
          }
          e.type = k;
          var m = "none";
          if (h === l.INITIAL_CAPS_ALL_CHARACTERS) {
            m = "uppercase";
          } else if (h === l.INITIAL_CAPS_WORD) {
            m = "capitalize";
          }
          e.style.textTransform = m;
        }
      },
      _updateMaxLength: function () {
        var b = this._delegate.maxLength;
        if (b < 0) {
          b = 65535;
        }
        this._elem.maxLength = b;
      },
      _initStyleSheet: function () {
        var b = this._elem;
        b.style.display = "none";
        b.style.border = 0;
        b.style.background = "transparent";
        b.style.width = "100%";
        b.style.height = "100%";
        b.style.active = 0;
        b.style.outline = "medium";
        b.style.padding = "0";
        b.style.textTransform = "none";
        b.style.position = "absolute";
        b.style.bottom = "0px";
        b.style.left = "2px";
        b.className = "cocosEditBox";
        b.id = this._domId;
        if (this._isTextArea) {
          b.style.resize = "none";
          b.style.overflow_y = "scroll";
        } else {
          b.type = "text";
          b.style["-moz-appearance"] = "textfield";
        }
        this._placeholderStyleSheet = document.createElement("style");
      },
      _updateStyleSheet: function () {
        var c = this._delegate;
        var a = this._elem;
        a.value = c.string;
        a.placeholder = c.placeholder;
        this._updateTextLabel(c.textLabel);
        this._updatePlaceholderLabel(c.placeholderLabel);
      },
      _updateTextLabel: function (e) {
        if (e) {
          var a = e.font;
          a = !a || a instanceof cc.BitmapFont ? e.fontFamily : a._fontFamily;
          var f = e.fontSize * e.node.scaleY;
          if (this._textLabelFont !== a || this._textLabelFontSize !== f || this._textLabelFontColor !== e.fontColor || this._textLabelAlign !== e.horizontalAlign) {
            this._textLabelFont = a;
            this._textLabelFontSize = f;
            this._textLabelFontColor = e.fontColor;
            this._textLabelAlign = e.horizontalAlign;
            var c = this._elem;
            c.style.fontSize = f + "px";
            c.style.color = e.node.color.toCSS();
            c.style.fontFamily = a;
            switch (e.horizontalAlign) {
              case n.HorizontalAlign.LEFT:
                c.style.textAlign = "left";
                break;
              case n.HorizontalAlign.CENTER:
                c.style.textAlign = "center";
                break;
              case n.HorizontalAlign.RIGHT:
                c.style.textAlign = "right";
            }
          }
        }
      },
      _updatePlaceholderLabel: function (e) {
        if (e) {
          var a = e.font;
          a = !a || a instanceof cc.BitmapFont ? e.fontFamily : e.font._fontFamily;
          var i = e.fontSize * e.node.scaleY;
          if (this._placeholderLabelFont !== a || this._placeholderLabelFontSize !== i || this._placeholderLabelFontColor !== e.fontColor || this._placeholderLabelAlign !== e.horizontalAlign || this._placeholderLineHeight !== e.fontSize) {
            this._placeholderLabelFont = a;
            this._placeholderLabelFontSize = i;
            this._placeholderLabelFontColor = e.fontColor;
            this._placeholderLabelAlign = e.horizontalAlign;
            this._placeholderLineHeight = e.fontSize;
            var c;
            var j = this._placeholderStyleSheet;
            var f = e.node.color.toCSS();
            var g = e.fontSize;
            switch (e.horizontalAlign) {
              case n.HorizontalAlign.LEFT:
                c = "left";
                break;
              case n.HorizontalAlign.CENTER:
                c = "center";
                break;
              case n.HorizontalAlign.RIGHT:
                c = "right";
            }
            j.innerHTML = "#" + this._domId + "::-webkit-input-placeholder,#" + this._domId + "::-moz-placeholder,#" + this._domId + ":-ms-input-placeholder{text-transform: initial; font-family: " + a + "; font-size: " + i + "px; color: " + f + "; line-height: " + g + "px; text-align: " + c + ";}";
            if (cc.sys.browserType === cc.sys.BROWSER_TYPE_EDGE) {
              j.innerHTML += "#" + this._domId + "::-ms-clear{display: none;}";
            }
          }
        }
      },
      _registerEventListeners: function () {
        var g = this;
        var b = this._elem;
        var c = false;
        var a = this._eventListeners;
        a.compositionStart = function () {
          c = true;
        };
        a.compositionEnd = function () {
          c = false;
          g._delegate.editBoxTextChanged(b.value);
        };
        a.onInput = function () {
          if (!c) {
            var d = g._delegate.maxLength;
            if (d >= 0) {
              b.value = b.value.slice(0, d);
            }
            g._delegate.editBoxTextChanged(b.value);
          }
        };
        a.onClick = function () {
          if (g._editing && cc.sys.isMobile) {
            g._adjustWindowScroll();
          }
        };
        a.onKeydown = function (a) {
          if (a.keyCode === i.KEY.enter) {
            a.stopPropagation();
            g._delegate.editBoxEditingReturn();
            if (!g._isTextArea) {
              b.blur();
            }
          } else if (a.keyCode === i.KEY.tab) {
            a.stopPropagation();
            a.preventDefault();
            q.next(g);
          }
        };
        a.onBlur = function () {
          if (cc.sys.isMobile && c) {
            a.compositionEnd();
          }
          g._editing = false;
          f = null;
          g._hideDom();
          g._delegate.editBoxEditingDidEnded();
        };
        b.addEventListener("compositionstart", a.compositionStart);
        b.addEventListener("compositionend", a.compositionEnd);
        b.addEventListener("input", a.onInput);
        b.addEventListener("keydown", a.onKeydown);
        b.addEventListener("blur", a.onBlur);
        b.addEventListener("touchstart", a.onClick);
      },
      _removeEventListeners: function () {
        var c = this._elem;
        var a = this._eventListeners;
        c.removeEventListener("compositionstart", a.compositionStart);
        c.removeEventListener("compositionend", a.compositionEnd);
        c.removeEventListener("input", a.onInput);
        c.removeEventListener("keydown", a.onKeydown);
        c.removeEventListener("blur", a.onBlur);
        c.removeEventListener("touchstart", a.onClick);
        a.compositionStart = null;
        a.compositionEnd = null;
        a.onInput = null;
        a.onKeydown = null;
        a.onBlur = null;
        a.onClick = null;
      }
    });
  }, {
    "../../platform/CCMacro": 167,
    "../../platform/utils": 186,
    "../../value-types/mat4": 253,
    "../CCLabel": 102,
    "./tabIndexUtil": 125,
    "./types": 126
  }],
  125: [function (c, a) {
    "use strict";

    a.exports = {
      _tabIndexList: [],
      add: function (c) {
        var a = this._tabIndexList;
        if (a.indexOf(c) === -1) {
          a.push(c);
        }
      },
      remove: function (d) {
        var a = this._tabIndexList;
        var b = a.indexOf(d);
        if (b !== -1) {
          a.splice(b, 1);
        }
      },
      resort: function () {
        this._tabIndexList.sort(function (c, a) {
          return c._delegate._tabIndex - a._delegate._tabIndex;
        });
      },
      next: function (e) {
        var a = this._tabIndexList;
        var b = a.indexOf(e);
        e.setFocus(false);
        if (b !== -1) {
          var c = a[b + 1];
          if (c && c._delegate._tabIndex >= 0) {
            c.setFocus(true);
          }
        }
      }
    };
  }, {}],
  126: [function (f, a) {
    "use strict";

    var b = cc.Enum({
      DEFAULT: 0,
      DONE: 1,
      SEND: 2,
      SEARCH: 3,
      GO: 4,
      NEXT: 5
    });
    var c = cc.Enum({
      ANY: 0,
      EMAIL_ADDR: 1,
      NUMERIC: 2,
      PHONE_NUMBER: 3,
      URL: 4,
      DECIMAL: 5,
      SINGLE_LINE: 6
    });
    var d = cc.Enum({
      PASSWORD: 0,
      SENSITIVE: 1,
      INITIAL_CAPS_WORD: 2,
      INITIAL_CAPS_SENTENCE: 3,
      INITIAL_CAPS_ALL_CHARACTERS: 4,
      DEFAULT: 5
    });
    a.exports = {
      KeyboardReturnType: b,
      InputMode: c,
      InputFlag: d
    };
  }, {}],
  127: [function (e, a) {
    "use strict";

    e("./CCComponent");
    e("./CCComponentEventHandler");
    e("./missing-script");
    var b = e("./SubContextView");
    if (!b) {
      b = cc.Class({
        name: "cc.SubContextView",
        extends: cc.Component
      });
      cc.SubContextView = cc.WXSubContextView = cc.SwanSubContextView = b;
    }
    var f = [e("./CCSprite"), e("./CCWidget"), e("./CCCanvas"), e("./CCAudioSource"), e("./CCAnimation"), e("./CCButton"), e("./CCLabel"), e("./CCProgressBar"), e("./CCMask"), e("./CCScrollBar"), e("./CCScrollView"), e("./CCPageViewIndicator"), e("./CCPageView"), e("./CCSlider"), e("./CCLayout"), e("./editbox/CCEditBox"), e("./CCLabelOutline"), e("./CCLabelShadow"), e("./CCRichText"), e("./CCToggleContainer"), e("./CCToggleGroup"), e("./CCToggle"), e("./CCBlockInputEvents"), e("./CCPropagateTouchEvents"), e("./CCMotionStreak"), e("./CCSafeArea"), b];
    a.exports = f;
  }, {
    "./CCAnimation": 96,
    "./CCAudioSource": undefined,
    "./CCBlockInputEvents": 97,
    "./CCButton": 98,
    "./CCCanvas": 99,
    "./CCComponent": 100,
    "./CCComponentEventHandler": 101,
    "./CCLabel": 102,
    "./CCLabelOutline": 103,
    "./CCLabelShadow": 104,
    "./CCLayout": 105,
    "./CCMask": 106,
    "./CCMotionStreak": undefined,
    "./CCPageView": undefined,
    "./CCPageViewIndicator": undefined,
    "./CCProgressBar": 107,
    "./CCPropagateTouchEvents": 108,
    "./CCRichText": 110,
    "./CCSafeArea": 111,
    "./CCScrollBar": 112,
    "./CCScrollView": 113,
    "./CCSlider": 114,
    "./CCSprite": 115,
    "./CCToggle": 116,
    "./CCToggleContainer": 117,
    "./CCToggleGroup": 118,
    "./CCWidget": 120,
    "./SubContextView": 121,
    "./editbox/CCEditBox": 122,
    "./missing-script": 128
  }],
  128: [function (e, a) {
    "use strict";

    var b = cc.js;
    var c = cc.Class({
      name: "cc.MissingScript",
      extends: cc.Component,
      editor: {
        inspector: "packages://inspector/inspectors/comps/missing-script.js"
      },
      properties: {
        compiled: {
          default: false,
          serializable: false
        },
        _$erialized: {
          default: null,
          visible: false,
          editorOnly: true
        }
      },
      ctor: false,
      statics: {
        safeFindClass: function (d) {
          return b._getClassById(d) || (cc.deserialize.reportMissingClass(d), c);
        }
      },
      onLoad: function () {}
    });
    cc._MissingScript = a.exports = c;
  }, {}],
  129: [function (i, b) {
    "use strict";

    var c = cc.js;
    i("../event/event");
    function d(c, a) {
      cc.Event.call(this, cc.Event.MOUSE, a);
      this._eventType = c;
      this._button = 0;
      this._x = 0;
      this._y = 0;
      this._prevX = 0;
      this._prevY = 0;
      this._scrollX = 0;
      this._scrollY = 0;
    }
    c.extend(d, cc.Event);
    var e = d.prototype;
    e.setScrollData = function (c, a) {
      this._scrollX = c;
      this._scrollY = a;
    };
    e.getScrollX = function () {
      return this._scrollX;
    };
    e.getScrollY = function () {
      return this._scrollY;
    };
    e.setLocation = function (c, a) {
      this._x = c;
      this._y = a;
    };
    e.getLocation = function () {
      return cc.v2(this._x, this._y);
    };
    e.getLocationInView = function () {
      return cc.v2(this._x, cc.view._designResolutionSize.height - this._y);
    };
    e._setPrevCursor = function (c, a) {
      this._prevX = c;
      this._prevY = a;
    };
    e.getPreviousLocation = function () {
      return cc.v2(this._prevX, this._prevY);
    };
    e.getDelta = function () {
      return cc.v2(this._x - this._prevX, this._y - this._prevY);
    };
    e.getDeltaX = function () {
      return this._x - this._prevX;
    };
    e.getDeltaY = function () {
      return this._y - this._prevY;
    };
    e.setButton = function (b) {
      this._button = b;
    };
    e.getButton = function () {
      return this._button;
    };
    e.getLocationX = function () {
      return this._x;
    };
    e.getLocationY = function () {
      return this._y;
    };
    d.NONE = 0;
    d.DOWN = 1;
    d.UP = 2;
    d.MOVE = 3;
    d.SCROLL = 4;
    d.BUTTON_LEFT = 0;
    d.BUTTON_RIGHT = 2;
    d.BUTTON_MIDDLE = 1;
    d.BUTTON_4 = 3;
    d.BUTTON_5 = 4;
    d.BUTTON_6 = 5;
    d.BUTTON_7 = 6;
    d.BUTTON_8 = 7;
    function j(c, a) {
      cc.Event.call(this, cc.Event.TOUCH, a);
      this._eventCode = 0;
      this._touches = c || [];
      this.touch = null;
      this.currentTouch = null;
    }
    c.extend(j, cc.Event);
    (e = j.prototype).getEventCode = function () {
      return this._eventCode;
    };
    e.getTouches = function () {
      return this._touches;
    };
    e._setEventCode = function (b) {
      this._eventCode = b;
    };
    e._setTouches = function (b) {
      this._touches = b;
    };
    e.setLocation = function (c, a) {
      if (this.touch) {
        this.touch.setTouchInfo(this.touch.getID(), c, a);
      }
    };
    e.getLocation = function () {
      if (this.touch) {
        return this.touch.getLocation();
      } else {
        return cc.v2();
      }
    };
    e.getLocationInView = function () {
      if (this.touch) {
        return this.touch.getLocationInView();
      } else {
        return cc.v2();
      }
    };
    e.getPreviousLocation = function () {
      if (this.touch) {
        return this.touch.getPreviousLocation();
      } else {
        return cc.v2();
      }
    };
    e.getStartLocation = function () {
      if (this.touch) {
        return this.touch.getStartLocation();
      } else {
        return cc.v2();
      }
    };
    e.getID = function () {
      if (this.touch) {
        return this.touch.getID();
      } else {
        return null;
      }
    };
    e.getDelta = function () {
      if (this.touch) {
        return this.touch.getDelta();
      } else {
        return cc.v2();
      }
    };
    e.getDeltaX = function () {
      if (this.touch) {
        return this.touch.getDelta().x;
      } else {
        return 0;
      }
    };
    e.getDeltaY = function () {
      if (this.touch) {
        return this.touch.getDelta().y;
      } else {
        return 0;
      }
    };
    e.getLocationX = function () {
      if (this.touch) {
        return this.touch.getLocationX();
      } else {
        return 0;
      }
    };
    e.getLocationY = function () {
      if (this.touch) {
        return this.touch.getLocationY();
      } else {
        return 0;
      }
    };
    j.MAX_TOUCHES = 5;
    j.BEGAN = 0;
    j.MOVED = 1;
    j.ENDED = 2;
    j.CANCELED = 3;
    function g(c, a) {
      cc.Event.call(this, cc.Event.ACCELERATION, a);
      this.acc = c;
    }
    c.extend(g, cc.Event);
    function h(d, a, b) {
      cc.Event.call(this, cc.Event.KEYBOARD, b);
      this.keyCode = d;
      this.isPressed = a;
    }
    c.extend(h, cc.Event);
    cc.Event.EventMouse = d;
    cc.Event.EventTouch = j;
    cc.Event.EventAcceleration = g;
    cc.Event.EventKeyboard = h;
    b.exports = cc.Event;
  }, {
    "../event/event": 135
  }],
  130: [function (k, b) {
    "use strict";

    var d = k("../platform/js");
    cc.EventListener = function (d, a, b) {
      this._onEvent = b;
      this._type = d || 0;
      this._listenerID = a || "";
      this._registered = false;
      this._fixedPriority = 0;
      this._node = null;
      this._target = null;
      this._paused = true;
      this._isEnabled = true;
    };
    cc.EventListener.prototype = {
      constructor: cc.EventListener,
      _setPaused: function (b) {
        this._paused = b;
      },
      _isPaused: function () {
        return this._paused;
      },
      _setRegistered: function (b) {
        this._registered = b;
      },
      _isRegistered: function () {
        return this._registered;
      },
      _getType: function () {
        return this._type;
      },
      _getListenerID: function () {
        return this._listenerID;
      },
      _setFixedPriority: function (b) {
        this._fixedPriority = b;
      },
      _getFixedPriority: function () {
        return this._fixedPriority;
      },
      _setSceneGraphPriority: function (b) {
        this._target = b;
        this._node = b;
      },
      _getSceneGraphPriority: function () {
        return this._node;
      },
      checkAvailable: function () {
        return this._onEvent !== null;
      },
      clone: function () {
        return null;
      },
      setEnabled: function (b) {
        this._isEnabled = b;
      },
      isEnabled: function () {
        return this._isEnabled;
      },
      retain: function () {},
      release: function () {}
    };
    cc.EventListener.UNKNOWN = 0;
    cc.EventListener.TOUCH_ONE_BY_ONE = 1;
    cc.EventListener.TOUCH_ALL_AT_ONCE = 2;
    cc.EventListener.KEYBOARD = 3;
    cc.EventListener.MOUSE = 4;
    cc.EventListener.ACCELERATION = 6;
    cc.EventListener.CUSTOM = 8;
    var e = cc.EventListener.ListenerID = {
      MOUSE: "__cc_mouse",
      TOUCH_ONE_BY_ONE: "__cc_touch_one_by_one",
      TOUCH_ALL_AT_ONCE: "__cc_touch_all_at_once",
      KEYBOARD: "__cc_keyboard",
      ACCELERATION: "__cc_acceleration"
    };
    function f(c, a) {
      this._onCustomEvent = a;
      cc.EventListener.call(this, cc.EventListener.CUSTOM, c, this._callback);
    }
    d.extend(f, cc.EventListener);
    d.mixin(f.prototype, {
      _onCustomEvent: null,
      _callback: function (b) {
        if (this._onCustomEvent !== null) {
          this._onCustomEvent(b);
        }
      },
      checkAvailable: function () {
        return cc.EventListener.prototype.checkAvailable.call(this) && this._onCustomEvent !== null;
      },
      clone: function () {
        return new f(this._listenerID, this._onCustomEvent);
      }
    });
    function g() {
      cc.EventListener.call(this, cc.EventListener.MOUSE, e.MOUSE, this._callback);
    }
    d.extend(g, cc.EventListener);
    d.mixin(g.prototype, {
      onMouseDown: null,
      onMouseUp: null,
      onMouseMove: null,
      onMouseScroll: null,
      _callback: function (c) {
        var a = cc.Event.EventMouse;
        switch (c._eventType) {
          case a.DOWN:
            if (this.onMouseDown) {
              this.onMouseDown(c);
            }
            break;
          case a.UP:
            if (this.onMouseUp) {
              this.onMouseUp(c);
            }
            break;
          case a.MOVE:
            if (this.onMouseMove) {
              this.onMouseMove(c);
            }
            break;
          case a.SCROLL:
            if (this.onMouseScroll) {
              this.onMouseScroll(c);
            }
        }
      },
      clone: function () {
        var b = new g();
        b.onMouseDown = this.onMouseDown;
        b.onMouseUp = this.onMouseUp;
        b.onMouseMove = this.onMouseMove;
        b.onMouseScroll = this.onMouseScroll;
        return b;
      },
      checkAvailable: function () {
        return true;
      }
    });
    function h() {
      cc.EventListener.call(this, cc.EventListener.TOUCH_ONE_BY_ONE, e.TOUCH_ONE_BY_ONE, null);
      this._claimedTouches = [];
    }
    d.extend(h, cc.EventListener);
    d.mixin(h.prototype, {
      constructor: h,
      _claimedTouches: null,
      swallowTouches: false,
      onTouchBegan: null,
      onTouchMoved: null,
      onTouchEnded: null,
      onTouchCancelled: null,
      setSwallowTouches: function (b) {
        this.swallowTouches = b;
      },
      isSwallowTouches: function () {
        return this.swallowTouches;
      },
      clone: function () {
        var b = new h();
        b.onTouchBegan = this.onTouchBegan;
        b.onTouchMoved = this.onTouchMoved;
        b.onTouchEnded = this.onTouchEnded;
        b.onTouchCancelled = this.onTouchCancelled;
        b.swallowTouches = this.swallowTouches;
        return b;
      },
      checkAvailable: function () {
        return !!this.onTouchBegan;
      }
    });
    function i() {
      cc.EventListener.call(this, cc.EventListener.TOUCH_ALL_AT_ONCE, e.TOUCH_ALL_AT_ONCE, null);
    }
    d.extend(i, cc.EventListener);
    d.mixin(i.prototype, {
      constructor: i,
      onTouchesBegan: null,
      onTouchesMoved: null,
      onTouchesEnded: null,
      onTouchesCancelled: null,
      clone: function () {
        var a = new i();
        a.onTouchesBegan = this.onTouchesBegan;
        a.onTouchesMoved = this.onTouchesMoved;
        a.onTouchesEnded = this.onTouchesEnded;
        a.onTouchesCancelled = this.onTouchesCancelled;
        return a;
      },
      checkAvailable: function () {
        return this.onTouchesBegan !== null || this.onTouchesMoved !== null || this.onTouchesEnded !== null || this.onTouchesCancelled !== null;
      }
    });
    function a(b) {
      this._onAccelerationEvent = b;
      cc.EventListener.call(this, cc.EventListener.ACCELERATION, e.ACCELERATION, this._callback);
    }
    d.extend(a, cc.EventListener);
    d.mixin(a.prototype, {
      constructor: a,
      _onAccelerationEvent: null,
      _callback: function (b) {
        this._onAccelerationEvent(b.acc, b);
      },
      checkAvailable: function () {
        return true;
      },
      clone: function () {
        return new a(this._onAccelerationEvent);
      }
    });
    function j() {
      cc.EventListener.call(this, cc.EventListener.KEYBOARD, e.KEYBOARD, this._callback);
    }
    d.extend(j, cc.EventListener);
    d.mixin(j.prototype, {
      constructor: j,
      onKeyPressed: null,
      onKeyReleased: null,
      _callback: function (b) {
        if (b.isPressed) {
          if (this.onKeyPressed) {
            this.onKeyPressed(b.keyCode, b);
          }
        } else if (this.onKeyReleased) {
          this.onKeyReleased(b.keyCode, b);
        }
      },
      clone: function () {
        var b = new j();
        b.onKeyPressed = this.onKeyPressed;
        b.onKeyReleased = this.onKeyReleased;
        return b;
      },
      checkAvailable: function () {
        return this.onKeyPressed !== null || this.onKeyReleased !== null;
      }
    });
    cc.EventListener.create = function (c) {
      var b = c.event;
      delete c.event;
      var d = null;
      if (b === cc.EventListener.TOUCH_ONE_BY_ONE) {
        d = new h();
      } else if (b === cc.EventListener.TOUCH_ALL_AT_ONCE) {
        d = new i();
      } else if (b === cc.EventListener.MOUSE) {
        d = new g();
      } else if (b === cc.EventListener.CUSTOM) {
        d = new f(c.eventName, c.callback);
        delete c.eventName;
        delete c.callback;
      } else if (b === cc.EventListener.KEYBOARD) {
        d = new j();
      } else if (b === cc.EventListener.ACCELERATION) {
        d = new a(c.callback);
        delete c.callback;
      }
      for (var k in c) {
        d[k] = c[k];
      }
      return d;
    };
    b.exports = cc.EventListener;
  }, {
    "../platform/js": 183
  }],
  131: [function (a, b) {
    "use strict";

    var c = a("../platform/js");
    a("./CCEventListener");
    var i = cc.EventListener.ListenerID;
    function d() {
      this._fixedListeners = [];
      this._sceneGraphListeners = [];
      this.gt0Index = 0;
    }
    d.prototype = {
      constructor: d,
      size: function () {
        return this._fixedListeners.length + this._sceneGraphListeners.length;
      },
      empty: function () {
        return this._fixedListeners.length === 0 && this._sceneGraphListeners.length === 0;
      },
      push: function (b) {
        if (b._getFixedPriority() === 0) {
          this._sceneGraphListeners.push(b);
        } else {
          this._fixedListeners.push(b);
        }
      },
      clearSceneGraphListeners: function () {
        this._sceneGraphListeners.length = 0;
      },
      clearFixedListeners: function () {
        this._fixedListeners.length = 0;
      },
      clear: function () {
        this._sceneGraphListeners.length = 0;
        this._fixedListeners.length = 0;
      },
      getFixedPriorityListeners: function () {
        return this._fixedListeners;
      },
      getSceneGraphPriorityListeners: function () {
        return this._sceneGraphListeners;
      }
    };
    function e(d) {
      var a = cc.Event;
      var b = d.type;
      if (b === a.ACCELERATION) {
        return i.ACCELERATION;
      } else if (b === a.KEYBOARD) {
        return i.KEYBOARD;
      } else if (b.startsWith(a.MOUSE)) {
        return i.MOUSE;
      } else {
        b.startsWith(a.TOUCH);
        return "";
      }
    }
    var g = {
      DIRTY_NONE: 0,
      DIRTY_FIXED_PRIORITY: 1,
      DIRTY_SCENE_GRAPH_PRIORITY: 2,
      DIRTY_ALL: 3,
      _listenersMap: {},
      _priorityDirtyFlagMap: {},
      _nodeListenersMap: {},
      _toAddedListeners: [],
      _toRemovedListeners: [],
      _dirtyListeners: {},
      _inDispatch: 0,
      _isEnabled: false,
      _currentTouch: null,
      _currentTouchListener: null,
      _internalCustomListenerIDs: [],
      _setDirtyForNode: function (a) {
        var b = this._nodeListenersMap[a._id];
        if (b) {
          for (var c = 0, i = b.length; c < i; c++) {
            var e = b[c]._getListenerID();
            if (this._dirtyListeners[e] == null) {
              this._dirtyListeners[e] = true;
            }
          }
        }
        if (a.childrenCount > 0) {
          for (var k = a._children, g = 0, l = k.length; g < l; g++) {
            this._setDirtyForNode(k[g]);
          }
        }
      },
      pauseTarget: function (a, b) {
        if (a instanceof cc._BaseNode) {
          var c;
          var i;
          var j = this._nodeListenersMap[a._id];
          if (j) {
            c = 0;
            i = j.length;
            c = 0;
            i = j.length;
            for (; c < i; c++) {
              var f = j[c];
              f._setPaused(true);
              if (f._claimedTouches && f._claimedTouches.includes(this._currentTouch)) {
                this._clearCurTouch();
              }
            }
          }
          if (b === true) {
            var k = a._children;
            c = 0;
            i = k ? k.length : 0;
            for (; c < i; c++) {
              this.pauseTarget(k[c], true);
            }
          }
        }
      },
      resumeTarget: function (g, a) {
        if (g instanceof cc._BaseNode) {
          var b;
          var h;
          var i = this._nodeListenersMap[g._id];
          if (i) {
            b = 0;
            h = i.length;
            b = 0;
            h = i.length;
            for (; b < h; b++) {
              i[b]._setPaused(false);
            }
          }
          this._setDirtyForNode(g);
          if (a === true) {
            var e = g._children;
            b = 0;
            h = e ? e.length : 0;
            for (; b < h; b++) {
              this.resumeTarget(e[b], true);
            }
          }
        }
      },
      _addListener: function (b) {
        if (this._inDispatch === 0) {
          this._forceAddEventListener(b);
        } else {
          this._toAddedListeners.push(b);
        }
      },
      _forceAddEventListener: function (e) {
        var a = e._getListenerID();
        var b = this._listenersMap[a];
        if (!b) {
          b = new d();
          this._listenersMap[a] = b;
        }
        b.push(e);
        if (e._getFixedPriority() === 0) {
          this._setDirty(a, this.DIRTY_SCENE_GRAPH_PRIORITY);
          var f = e._getSceneGraphPriority();
          this._associateNodeAndEventListener(f, e);
          if (f.activeInHierarchy) {
            this.resumeTarget(f);
          }
        } else {
          this._setDirty(a, this.DIRTY_FIXED_PRIORITY);
        }
      },
      _getListeners: function (b) {
        return this._listenersMap[b];
      },
      _updateDirtyFlagForSceneGraph: function () {
        var c = this._dirtyListeners;
        for (var a in c) {
          this._setDirty(a, this.DIRTY_SCENE_GRAPH_PRIORITY);
        }
        this._dirtyListeners = {};
      },
      _removeAllListenersInVector: function (d) {
        if (d) {
          for (var a, e = d.length - 1; e >= 0; e--) {
            (a = d[e])._setRegistered(false);
            if (a._getSceneGraphPriority() != null) {
              this._dissociateNodeAndEventListener(a._getSceneGraphPriority(), a);
              a._setSceneGraphPriority(null);
            }
            if (this._inDispatch === 0) {
              cc.js.array.removeAt(d, e);
            }
          }
        }
      },
      _removeListenersForListenerID: function (a) {
        var b;
        var e = this._listenersMap[a];
        if (e) {
          var d = e.getFixedPriorityListeners();
          var f = e.getSceneGraphPriorityListeners();
          this._removeAllListenersInVector(f);
          this._removeAllListenersInVector(d);
          delete this._priorityDirtyFlagMap[a];
          if (!this._inDispatch) {
            e.clear();
            delete this._listenersMap[a];
          }
        }
        var g;
        var j = this._toAddedListeners;
        for (b = j.length - 1; b >= 0; b--) {
          if ((g = j[b]) && g._getListenerID() === a) {
            cc.js.array.removeAt(j, b);
          }
        }
      },
      _sortEventListeners: function (d) {
        var a = this.DIRTY_NONE;
        var e = this._priorityDirtyFlagMap;
        if (e[d]) {
          a = e[d];
        }
        if (a !== this.DIRTY_NONE) {
          e[d] = this.DIRTY_NONE;
          if (a & this.DIRTY_FIXED_PRIORITY) {
            this._sortListenersOfFixedPriority(d);
          }
          if (a & this.DIRTY_SCENE_GRAPH_PRIORITY && cc.director.getScene()) {
            this._sortListenersOfSceneGraphPriority(d);
          }
        }
      },
      _sortListenersOfSceneGraphPriority: function (d) {
        var a = this._getListeners(d);
        if (a) {
          var b = a.getSceneGraphPriorityListeners();
          if (b && b.length !== 0) {
            a.getSceneGraphPriorityListeners().sort(this._sortEventListenersOfSceneGraphPriorityDes);
          }
        }
      },
      _sortEventListenersOfSceneGraphPriorityDes: function (a, b) {
        var c = a._getSceneGraphPriority();
        var d = b._getSceneGraphPriority();
        if (!d || !d._activeInHierarchy || d._parent === null) {
          return -1;
        }
        if (!c || !c._activeInHierarchy || c._parent === null) {
          return 1;
        }
        for (var e = c, i = d, j = false; e._parent._id !== i._parent._id;) {
          e = e._parent._parent === null ? (j = true) && d : e._parent;
          i = i._parent._parent === null ? (j = true) && c : i._parent;
        }
        if (e._id === i._id) {
          if (e._id === d._id) {
            return -1;
          }
          if (e._id === c._id) {
            return 1;
          }
        }
        if (j) {
          return e._localZOrder - i._localZOrder;
        } else {
          return i._localZOrder - e._localZOrder;
        }
      },
      _sortListenersOfFixedPriority: function (f) {
        var a = this._listenersMap[f];
        if (a) {
          var b = a.getFixedPriorityListeners();
          if (b && b.length !== 0) {
            b.sort(this._sortListenersOfFixedPriorityAsc);
            for (var c = 0, g = b.length; c < g && !(b[c]._getFixedPriority() >= 0);) {
              ++c;
            }
            a.gt0Index = c;
          }
        }
      },
      _sortListenersOfFixedPriorityAsc: function (c, a) {
        return c._getFixedPriority() - a._getFixedPriority();
      },
      _onUpdateListeners: function (a) {
        var b;
        var e;
        var i;
        var k = a.getFixedPriorityListeners();
        var g = a.getSceneGraphPriorityListeners();
        var h = this._toRemovedListeners;
        if (g) {
          for (b = g.length - 1; b >= 0; b--) {
            if (!(e = g[b])._isRegistered()) {
              cc.js.array.removeAt(g, b);
              if ((i = h.indexOf(e)) !== -1) {
                h.splice(i, 1);
              }
            }
          }
        }
        if (k) {
          for (b = k.length - 1; b >= 0; b--) {
            if (!(e = k[b])._isRegistered()) {
              cc.js.array.removeAt(k, b);
              if ((i = h.indexOf(e)) !== -1) {
                h.splice(i, 1);
              }
            }
          }
        }
        if (g && g.length === 0) {
          a.clearSceneGraphListeners();
        }
        if (k && k.length === 0) {
          a.clearFixedListeners();
        }
      },
      frameUpdateListeners: function () {
        var g = this._listenersMap;
        var a = this._priorityDirtyFlagMap;
        for (var b in g) {
          if (g[b].empty()) {
            delete a[b];
            delete g[b];
          }
        }
        var h = this._toAddedListeners;
        if (h.length !== 0) {
          for (var d = 0, i = h.length; d < i; d++) {
            this._forceAddEventListener(h[d]);
          }
          h.length = 0;
        }
        if (this._toRemovedListeners.length !== 0) {
          this._cleanToRemovedListeners();
        }
      },
      _updateTouchListeners: function () {
        if (!(this._inDispatch > 1)) {
          var e;
          if (e = this._listenersMap[i.TOUCH_ONE_BY_ONE]) {
            this._onUpdateListeners(e);
          }
          if (e = this._listenersMap[i.TOUCH_ALL_AT_ONCE]) {
            this._onUpdateListeners(e);
          }
          var f = this._toAddedListeners;
          if (f.length !== 0) {
            for (var b = 0, g = f.length; b < g; b++) {
              this._forceAddEventListener(f[b]);
            }
            this._toAddedListeners.length = 0;
          }
          if (this._toRemovedListeners.length !== 0) {
            this._cleanToRemovedListeners();
          }
        }
      },
      _cleanToRemovedListeners: function () {
        for (var a = this._toRemovedListeners, b = 0; b < a.length; b++) {
          var e = a[b];
          var i = this._listenersMap[e._getListenerID()];
          if (i) {
            var k;
            var l = i.getFixedPriorityListeners();
            var m = i.getSceneGraphPriorityListeners();
            if (m && (k = m.indexOf(e)) !== -1) {
              m.splice(k, 1);
            }
            if (l && (k = l.indexOf(e)) !== -1) {
              l.splice(k, 1);
            }
          }
        }
        a.length = 0;
      },
      _onTouchEventCallback: function (j, a) {
        if (!j._isRegistered()) {
          return false;
        }
        var b = a.event;
        var d = b.currentTouch;
        b.currentTarget = j._node;
        var e;
        var k = false;
        var l = b.getEventCode();
        var h = cc.Event.EventTouch;
        if (l === h.BEGAN) {
          if (!cc.macro.ENABLE_MULTI_TOUCH && g._currentTouch) {
            var i = g._currentTouchListener._node;
            if (i && i.activeInHierarchy) {
              return false;
            }
          }
          if (j.onTouchBegan && (k = j.onTouchBegan(d, b)) && j._registered) {
            j._claimedTouches.push(d);
            g._currentTouchListener = j;
            g._currentTouch = d;
          }
        } else if (j._claimedTouches.length > 0 && (e = j._claimedTouches.indexOf(d)) !== -1) {
          k = true;
          if (!cc.macro.ENABLE_MULTI_TOUCH && g._currentTouch && g._currentTouch !== d) {
            return false;
          }
          if (l === h.MOVED && j.onTouchMoved) {
            j.onTouchMoved(d, b);
          } else if (l === h.ENDED) {
            if (j.onTouchEnded) {
              j.onTouchEnded(d, b);
            }
            if (j._registered) {
              j._claimedTouches.splice(e, 1);
            }
            g._clearCurTouch();
          } else if (l === h.CANCELED) {
            if (j.onTouchCancelled) {
              j.onTouchCancelled(d, b);
            }
            if (j._registered) {
              j._claimedTouches.splice(e, 1);
            }
            g._clearCurTouch();
          }
        }
        if (b.isStopped()) {
          g._updateTouchListeners(b);
          return true;
        } else {
          return !(!k || !j.swallowTouches || (a.needsMutableSet && a.touches.splice(d, 1), 0));
        }
      },
      _dispatchTouchEvent: function (f) {
        this._sortEventListeners(i.TOUCH_ONE_BY_ONE);
        this._sortEventListeners(i.TOUCH_ALL_AT_ONCE);
        var b = this._getListeners(i.TOUCH_ONE_BY_ONE);
        var c = this._getListeners(i.TOUCH_ALL_AT_ONCE);
        if (b !== null || c !== null) {
          var d = f.getTouches();
          var e = cc.js.array.copy(d);
          var g = {
            event: f,
            needsMutableSet: b && c,
            touches: e,
            selTouch: null
          };
          if (b) {
            for (var h = 0; h < d.length; h++) {
              f.currentTouch = d[h];
              f._propagationStopped = f._propagationImmediateStopped = false;
              this._dispatchEventToListeners(b, this._onTouchEventCallback, g);
            }
          }
          if (!(c && e.length > 0 && (this._dispatchEventToListeners(c, this._onTouchesEventCallback, {
            event: f,
            touches: e
          }), f.isStopped()))) {
            this._updateTouchListeners(f);
          }
        }
      },
      _onTouchesEventCallback: function (h, a) {
        if (!h._registered) {
          return false;
        }
        var b = cc.Event.EventTouch;
        var c = a.event;
        var d = a.touches;
        var e = c.getEventCode();
        c.currentTarget = h._node;
        if (e === b.BEGAN && h.onTouchesBegan) {
          h.onTouchesBegan(d, c);
        } else if (e === b.MOVED && h.onTouchesMoved) {
          h.onTouchesMoved(d, c);
        } else if (e === b.ENDED && h.onTouchesEnded) {
          h.onTouchesEnded(d, c);
        } else if (e === b.CANCELED && h.onTouchesCancelled) {
          h.onTouchesCancelled(d, c);
        }
        return !!c.isStopped() && (g._updateTouchListeners(c), true);
      },
      _associateNodeAndEventListener: function (d, a) {
        var b = this._nodeListenersMap[d._id];
        if (!b) {
          b = [];
          this._nodeListenersMap[d._id] = b;
        }
        b.push(a);
      },
      _dissociateNodeAndEventListener: function (d, a) {
        var b = this._nodeListenersMap[d._id];
        if (b) {
          cc.js.array.remove(b, a);
          if (b.length === 0) {
            delete this._nodeListenersMap[d._id];
          }
        }
      },
      _dispatchEventToListeners: function (c, b, d) {
        var e;
        var k;
        var l = false;
        var m = c.getFixedPriorityListeners();
        var i = c.getSceneGraphPriorityListeners();
        var a = 0;
        if (m && m.length !== 0) {
          for (; a < c.gt0Index; ++a) {
            if ((k = m[a]).isEnabled() && !k._isPaused() && k._isRegistered() && b(k, d)) {
              l = true;
              break;
            }
          }
        }
        if (i && !l) {
          for (e = 0; e < i.length; e++) {
            if ((k = i[e]).isEnabled() && !k._isPaused() && k._isRegistered() && b(k, d)) {
              l = true;
              break;
            }
          }
        }
        if (m && !l) {
          for (; a < m.length; ++a) {
            if ((k = m[a]).isEnabled() && !k._isPaused() && k._isRegistered() && b(k, d)) {
              l = true;
              break;
            }
          }
        }
      },
      _setDirty: function (d, a) {
        var b = this._priorityDirtyFlagMap;
        if (b[d] == null) {
          b[d] = a;
        } else {
          b[d] = a | b[d];
        }
      },
      _sortNumberAsc: function (c, a) {
        return c - a;
      },
      hasEventListener: function (b) {
        return !!this._getListeners(b);
      },
      addListener: function (c, d) {
        if (cc.js.isNumber(d) || d instanceof cc._BaseNode) {
          if (c instanceof cc.EventListener) {
            if (c._isRegistered()) {
              return;
            }
          } else {
            c = cc.EventListener.create(c);
          }
          if (c.checkAvailable()) {
            if (cc.js.isNumber(d)) {
              if (d === 0) {
                return;
              }
              c._setSceneGraphPriority(null);
              c._setFixedPriority(d);
              c._setRegistered(true);
              c._setPaused(false);
              this._addListener(c);
            } else {
              c._setSceneGraphPriority(d);
              c._setFixedPriority(0);
              c._setRegistered(true);
              this._addListener(c);
            }
            return c;
          }
        }
      },
      addCustomListener: function (d, a) {
        var b = new cc.EventListener.create({
          event: cc.EventListener.CUSTOM,
          eventName: d,
          callback: a
        });
        this.addListener(b, 1);
        return b;
      },
      removeListener: function (a) {
        if (a != null) {
          var b;
          var c = this._listenersMap;
          for (var e in c) {
            var f = c[e];
            var l = f.getFixedPriorityListeners();
            var n = f.getSceneGraphPriorityListeners();
            if (b = this._removeListenerInVector(n, a)) {
              this._setDirty(a._getListenerID(), this.DIRTY_SCENE_GRAPH_PRIORITY);
            } else if (b = this._removeListenerInVector(l, a)) {
              this._setDirty(a._getListenerID(), this.DIRTY_FIXED_PRIORITY);
            }
            if (f.empty()) {
              delete this._priorityDirtyFlagMap[a._getListenerID()];
              delete c[e];
            }
            if (b) {
              break;
            }
          }
          if (!b) {
            for (var p = this._toAddedListeners, k = p.length - 1; k >= 0; k--) {
              var q = p[k];
              if (q === a) {
                cc.js.array.removeAt(p, k);
                q._setRegistered(false);
                break;
              }
            }
          }
          if (this._currentTouchListener === a) {
            this._clearCurTouch();
          }
        }
      },
      _clearCurTouch: function () {
        this._currentTouchListener = null;
        this._currentTouch = null;
      },
      _removeListenerInCallback: function (e, a) {
        if (e == null) {
          return false;
        }
        for (var b = e.length - 1; b >= 0; b--) {
          var f = e[b];
          if (f._onCustomEvent === a || f._onEvent === a) {
            f._setRegistered(false);
            if (f._getSceneGraphPriority() != null) {
              this._dissociateNodeAndEventListener(f._getSceneGraphPriority(), f);
              f._setSceneGraphPriority(null);
            }
            if (this._inDispatch === 0) {
              cc.js.array.removeAt(e, b);
            } else {
              this._toRemovedListeners.push(f);
            }
            return true;
          }
        }
        return false;
      },
      _removeListenerInVector: function (e, a) {
        if (e == null) {
          return false;
        }
        for (var b = e.length - 1; b >= 0; b--) {
          var f = e[b];
          if (f === a) {
            f._setRegistered(false);
            if (f._getSceneGraphPriority() != null) {
              this._dissociateNodeAndEventListener(f._getSceneGraphPriority(), f);
              f._setSceneGraphPriority(null);
            }
            if (this._inDispatch === 0) {
              cc.js.array.removeAt(e, b);
            } else {
              this._toRemovedListeners.push(f);
            }
            return true;
          }
        }
        return false;
      },
      removeListeners: function (c, b) {
        var d = this;
        if (cc.js.isNumber(c) || c instanceof cc._BaseNode) {
          if (c._id !== undefined) {
            var e;
            var f = d._nodeListenersMap[c._id];
            if (f) {
              var h = cc.js.array.copy(f);
              for (e = 0; e < h.length; e++) {
                d.removeListener(h[e]);
              }
              delete d._nodeListenersMap[c._id];
            }
            var j = d._toAddedListeners;
            for (e = 0; e < j.length;) {
              var a = j[e];
              if (a._getSceneGraphPriority() === c) {
                a._setSceneGraphPriority(null);
                a._setRegistered(false);
                j.splice(e, 1);
              } else {
                ++e;
              }
            }
            if (b === true) {
              var l;
              var o = c.children;
              e = 0;
              l = o.length;
              for (; e < l; e++) {
                d.removeListeners(o[e], true);
              }
            }
          } else if (c === cc.EventListener.TOUCH_ONE_BY_ONE) {
            d._removeListenersForListenerID(i.TOUCH_ONE_BY_ONE);
          } else if (c === cc.EventListener.TOUCH_ALL_AT_ONCE) {
            d._removeListenersForListenerID(i.TOUCH_ALL_AT_ONCE);
          } else if (c === cc.EventListener.MOUSE) {
            d._removeListenersForListenerID(i.MOUSE);
          } else if (c === cc.EventListener.ACCELERATION) {
            d._removeListenersForListenerID(i.ACCELERATION);
          } else if (c === cc.EventListener.KEYBOARD) {
            d._removeListenersForListenerID(i.KEYBOARD);
          }
        }
      },
      removeCustomListeners: function (b) {
        this._removeListenersForListenerID(b);
      },
      removeAllListeners: function () {
        var d = this._listenersMap;
        var a = this._internalCustomListenerIDs;
        for (var b in d) {
          if (a.indexOf(b) === -1) {
            this._removeListenersForListenerID(b);
          }
        }
      },
      setPriority: function (f, a) {
        if (f != null) {
          var b = this._listenersMap;
          for (var c in b) {
            var g = b[c].getFixedPriorityListeners();
            if (g && g.indexOf(f) !== -1) {
              f._getSceneGraphPriority();
              if (f._getFixedPriority() !== a) {
                f._setFixedPriority(a);
                this._setDirty(f._getListenerID(), this.DIRTY_FIXED_PRIORITY);
              }
              return;
            }
          }
        }
      },
      setEnabled: function (b) {
        this._isEnabled = b;
      },
      isEnabled: function () {
        return this._isEnabled;
      },
      dispatchEvent: function (d) {
        if (this._isEnabled && (this._updateDirtyFlagForSceneGraph(), this._inDispatch++, d && d.getType)) {
          if (d.getType().startsWith(cc.Event.TOUCH)) {
            this._dispatchTouchEvent(d);
            this._inDispatch--;
            return;
          }
          var a = e(d);
          this._sortEventListeners(a);
          var b = this._listenersMap[a];
          if (b != null) {
            this._dispatchEventToListeners(b, this._onListenerCallback, d);
            this._onUpdateListeners(b);
          }
          this._inDispatch--;
        }
      },
      _onListenerCallback: function (c, a) {
        a.currentTarget = c._target;
        c._onEvent(a);
        return a.isStopped();
      },
      dispatchCustomEvent: function (d, a) {
        var b = new cc.Event.EventCustom(d);
        b.setUserData(a);
        this.dispatchEvent(b);
      }
    };
    c.get(cc, "eventManager", function () {
      return g;
    });
    b.exports = cc.internal.eventManager = g;
  }, {
    "../platform/js": 183,
    "./CCEventListener": 130
  }],
  132: [function () {
    "use strict";

    cc.Touch = function (d, a, b) {
      this._lastModified = 0;
      this.setTouchInfo(b, d, a);
    };
    cc.Touch.prototype = {
      constructor: cc.Touch,
      getLocation: function () {
        return cc.v2(this._point.x, this._point.y);
      },
      getLocationX: function () {
        return this._point.x;
      },
      getLocationY: function () {
        return this._point.y;
      },
      getPreviousLocation: function () {
        return cc.v2(this._prevPoint.x, this._prevPoint.y);
      },
      getStartLocation: function () {
        return cc.v2(this._startPoint.x, this._startPoint.y);
      },
      getDelta: function () {
        return this._point.sub(this._prevPoint);
      },
      getLocationInView: function () {
        return cc.v2(this._point.x, cc.view._designResolutionSize.height - this._point.y);
      },
      getPreviousLocationInView: function () {
        return cc.v2(this._prevPoint.x, cc.view._designResolutionSize.height - this._prevPoint.y);
      },
      getStartLocationInView: function () {
        return cc.v2(this._startPoint.x, cc.view._designResolutionSize.height - this._startPoint.y);
      },
      getID: function () {
        return this._id;
      },
      setTouchInfo: function (d, a, b) {
        this._prevPoint = this._point;
        this._point = cc.v2(a || 0, b || 0);
        this._id = d;
        if (!this._startPointCaptured) {
          this._startPoint = cc.v2(this._point);
          cc.view._convertPointWithScale(this._startPoint);
          this._startPointCaptured = true;
        }
      },
      _setPoint: function (c, a) {
        if (a === undefined) {
          this._point.x = c.x;
          this._point.y = c.y;
        } else {
          this._point.x = c;
          this._point.y = a;
        }
      },
      _setPrevPoint: function (c, a) {
        this._prevPoint = a === undefined ? cc.v2(c.x, c.y) : cc.v2(c || 0, a || 0);
      }
    };
  }, {}],
  133: [function (d, a) {
    "use strict";

    d("./CCEvent");
    d("./CCTouch");
    d("./CCEventListener");
    var b = d("./CCEventManager");
    a.exports = b;
  }, {
    "./CCEvent": 129,
    "./CCEventListener": 130,
    "./CCEventManager": 131,
    "./CCTouch": 132
  }],
  134: [function (c, b) {
    "use strict";

    var d = c("../platform/js");
    var e = c("../platform/callbacks-invoker");
    var f = d.array;
    var g = f.fastRemove;
    var h = f.fastRemoveAll;
    function i() {
      e.call(this);
    }
    d.extend(i, e);
    var a = i.prototype;
    a.__on = a.on;
    a.on = function (e, a, b, c) {
      if (a) {
        if (!this.hasEventListener(e, a, b)) {
          this.__on(e, a, b, c);
          if (b && b.__eventTargets) {
            b.__eventTargets.push(this);
          }
        }
        return a;
      }
    };
    a.__off = a.off;
    a.off = function (c, b, d) {
      if (b) {
        var e = this.__off(c, b, d);
        if (e && d && d.__eventTargets) {
          g(d.__eventTargets, this);
        }
        return e;
      }
      var f = this._callbackTable[c];
      if (!f) {
        return false;
      }
      for (var h = f.callbackInfos, i = h.length, a = 0; a < i; ++a) {
        var l = h[a] && h[a].target;
        if (l && l.__eventTargets) {
          g(l.__eventTargets, this);
        }
      }
      this.removeAll(c);
      return h.length < i;
    };
    a.targetOff = function (b) {
      this.removeAll(b);
      if (b && b.__eventTargets) {
        h(b.__eventTargets, this);
      }
    };
    a.once = function (d, a, b) {
      this.on(d, a, b, true);
    };
    a.dispatchEvent = function (b) {
      this.emit(b.type, b);
    };
    a.clear = function () {
      for (var b in this._callbackTable) {
        this.off(b);
      }
    };
    cc.EventTarget = b.exports = i;
  }, {
    "../platform/callbacks-invoker": 175,
    "../platform/js": 183
  }],
  135: [function (e, a) {
    "use strict";

    var b = e("../platform/js");
    cc.Event = function (c, a) {
      this.type = c;
      this.bubbles = !!a;
      this.target = null;
      this.currentTarget = null;
      this.eventPhase = 0;
      this._propagationStopped = false;
      this._propagationImmediateStopped = false;
    };
    cc.Event.prototype = {
      constructor: cc.Event,
      unuse: function () {
        this.type = cc.Event.NO_TYPE;
        this.target = null;
        this.currentTarget = null;
        this.eventPhase = cc.Event.NONE;
        this._propagationStopped = false;
        this._propagationImmediateStopped = false;
      },
      reuse: function (c, a) {
        this.type = c;
        this.bubbles = a || false;
      },
      stopPropagation: function () {
        this._propagationStopped = true;
      },
      stopPropagationImmediate: function () {
        this._propagationImmediateStopped = true;
      },
      isStopped: function () {
        return this._propagationStopped || this._propagationImmediateStopped;
      },
      getCurrentTarget: function () {
        return this.currentTarget;
      },
      getType: function () {
        return this.type;
      }
    };
    cc.Event.NO_TYPE = "no_type";
    cc.Event.TOUCH = "touch";
    cc.Event.MOUSE = "mouse";
    cc.Event.KEYBOARD = "keyboard";
    cc.Event.ACCELERATION = "acceleration";
    cc.Event.NONE = 0;
    cc.Event.CAPTURING_PHASE = 1;
    cc.Event.AT_TARGET = 2;
    cc.Event.BUBBLING_PHASE = 3;
    function c(c, a) {
      cc.Event.call(this, c, a);
      this.detail = null;
    }
    b.extend(c, cc.Event);
    c.prototype.reset = c;
    c.prototype.setUserData = function (b) {
      this.detail = b;
    };
    c.prototype.getUserData = function () {
      return this.detail;
    };
    c.prototype.getEventName = cc.Event.prototype.getType;
    var d = new b.Pool(10);
    c.put = function (b) {
      d.put(b);
    };
    c.get = function (e, a) {
      var b = d._get();
      if (b) {
        b.reset(e, a);
      } else {
        b = new c(e, a);
      }
      return b;
    };
    cc.Event.EventCustom = c;
    a.exports = cc.Event;
  }, {
    "../platform/js": 183
  }],
  136: [function (b) {
    "use strict";

    b("./event");
    b("./event-target");
    b("./system-event");
  }, {
    "./event": 135,
    "./event-target": 134,
    "./system-event": 137
  }],
  137: [function (a, b) {
    "use strict";

    var c = a("../event/event-target");
    var d = a("../event-manager");
    var e = a("../platform/CCInputManager");
    var f = cc.Enum({
      KEY_DOWN: "keydown",
      KEY_UP: "keyup",
      DEVICEMOTION: "devicemotion"
    });
    var h = null;
    var l = null;
    var g = cc.Class({
      name: "SystemEvent",
      extends: c,
      statics: {
        EventType: f
      },
      setAccelerometerEnabled: function (b) {
        if (b && window.DeviceMotionEvent && typeof DeviceMotionEvent.requestPermission == "function") {
          DeviceMotionEvent.requestPermission().then(function (b) {
            e.setAccelerometerEnabled(b === "granted");
          });
        } else {
          e.setAccelerometerEnabled(b);
        }
      },
      setAccelerometerInterval: function (b) {
        e.setAccelerometerInterval(b);
      },
      on: function (e, a, b, c) {
        this._super(e, a, b, c);
        if (!(e !== f.KEY_DOWN && e !== f.KEY_UP)) {
          if (!h) {
            h = cc.EventListener.create({
              event: cc.EventListener.KEYBOARD,
              onKeyPressed: function (c, a) {
                a.type = f.KEY_DOWN;
                cc.systemEvent.dispatchEvent(a);
              },
              onKeyReleased: function (c, a) {
                a.type = f.KEY_UP;
                cc.systemEvent.dispatchEvent(a);
              }
            });
          }
          if (!d.hasEventListener(cc.EventListener.ListenerID.KEYBOARD)) {
            d.addListener(h, 1);
          }
        }
        if (e === f.DEVICEMOTION) {
          if (!l) {
            l = cc.EventListener.create({
              event: cc.EventListener.ACCELERATION,
              callback: function (c, a) {
                a.type = f.DEVICEMOTION;
                cc.systemEvent.dispatchEvent(a);
              }
            });
          }
          if (!d.hasEventListener(cc.EventListener.ListenerID.ACCELERATION)) {
            d.addListener(l, 1);
          }
        }
      },
      off: function (c, a, b) {
        this._super(c, a, b);
        if (h && (c === f.KEY_DOWN || c === f.KEY_UP)) {
          var i = this.hasEventListener(f.KEY_DOWN);
          var e = this.hasEventListener(f.KEY_UP);
          if (!(i || e)) {
            d.removeListener(h);
          }
        }
        if (l && c === f.DEVICEMOTION) {
          if (!this.hasEventListener(f.DEVICEMOTION)) {
            d.removeListener(l);
          }
        }
      }
    });
    cc.SystemEvent = b.exports = g;
    cc.systemEvent = new cc.SystemEvent();
  }, {
    "../event-manager": 133,
    "../event/event-target": 134,
    "../platform/CCInputManager": 166
  }],
  138: [function (m, b, d) {
    "use strict";

    d.__esModule = true;
    d.default = undefined;
    var n = g(m("../value-types/vec3"));
    var e = g(m("../value-types/mat3"));
    var f = g(m("./enums"));
    function g(b) {
      if (b && b.__esModule) {
        return b;
      } else {
        return {
          default: b
        };
      }
    }
    var i = new n.default();
    var a = new n.default();
    var j = new e.default();
    function k(c, a, b) {
      var d = j.m;
      var e = b.m;
      d[0] = Math.abs(e[0]);
      d[1] = Math.abs(e[1]);
      d[2] = Math.abs(e[2]);
      d[3] = Math.abs(e[4]);
      d[4] = Math.abs(e[5]);
      d[5] = Math.abs(e[6]);
      d[6] = Math.abs(e[8]);
      d[7] = Math.abs(e[9]);
      d[8] = Math.abs(e[10]);
      n.default.transformMat3(c, a, j);
    }
    var c = function () {
      function j(h, b, c, d, e, g) {
        this.center = undefined;
        this.halfExtents = undefined;
        this._type = undefined;
        this._type = f.default.SHAPE_AABB;
        this.center = new n.default(h, b, c);
        this.halfExtents = new n.default(d, e, g);
      }
      j.create = function (a, b, c, d, e, f) {
        return new j(a, b, c, d, e, f);
      };
      j.clone = function (b) {
        return new j(b.center.x, b.center.y, b.center.z, b.halfExtents.x, b.halfExtents.y, b.halfExtents.z);
      };
      j.copy = function (c, a) {
        n.default.copy(c.center, a.center);
        n.default.copy(c.halfExtents, a.halfExtents);
        return c;
      };
      j.fromPoints = function (e, b, c) {
        n.default.scale(e.center, n.default.add(i, b, c), 0.5);
        n.default.scale(e.halfExtents, n.default.sub(a, c, b), 0.5);
        return e;
      };
      j.set = function (f, b, c, d, e, g, h) {
        n.default.set(f.center, b, c, d);
        n.default.set(f.halfExtents, e, g, h);
        return f;
      };
      var b = j.prototype;
      b.getBoundary = function (c, a) {
        n.default.sub(c, this.center, this.halfExtents);
        n.default.add(a, this.center, this.halfExtents);
      };
      b.transform = function (f, a, b, c, d) {
        if (!d) {
          d = this;
        }
        n.default.transformMat4(d.center, this.center, f);
        k(d.halfExtents, this.halfExtents, f);
      };
      return j;
    }();
    d.default = c;
    b.exports = d.default;
  }, {
    "../value-types/mat3": 252,
    "../value-types/vec3": 261,
    "./enums": 140
  }],
  139: [function (f, b, d) {
    "use strict";

    d.__esModule = true;
    d.point_plane = h;
    d.pt_point_aabb = function (c, a, b) {
      p.Vec3.copy(c, a);
      p.Vec3.subtract(e, b.center, b.halfExtents);
      p.Vec3.add(i, b.center, b.halfExtents);
      c.x = c.x < e.x ? e.x : c.x;
      c.y = c.y < e.x ? e.y : c.y;
      c.z = c.z < e.x ? e.z : c.z;
      c.x = c.x > i.x ? i.x : c.x;
      c.y = c.y > i.x ? i.y : c.y;
      c.z = c.z > i.x ? i.z : c.z;
      return c;
    };
    d.pt_point_obb = function (f, b, d) {
      var e = d.orientation.m;
      p.Vec3.set(g, e[0], e[1], e[2]);
      p.Vec3.set(j, e[3], e[4], e[5]);
      p.Vec3.set(k, e[6], e[7], e[8]);
      a[0] = g;
      a[1] = j;
      a[2] = k;
      o[0] = d.halfExtents.x;
      o[1] = d.halfExtents.y;
      o[2] = d.halfExtents.z;
      p.Vec3.subtract(m, b, d.center);
      p.Vec3.set(f, d.center.x, d.center.y, d.center.z);
      for (var h = 0; h < 3; h++) {
        var i = p.Vec3.dot(m, a[h]);
        if (i > o[h]) {
          i = o[h];
        }
        if (i < -o[h]) {
          i = -o[h];
        }
        f.x += i * a[h].x;
        f.y += i * a[h].y;
        f.z += i * a[h].z;
      }
      return f;
    };
    d.pt_point_plane = function (e, a, b) {
      var c = h(a, b);
      return p.Vec3.subtract(e, a, p.Vec3.multiplyScalar(e, b.n, c));
    };
    var p = f("../value-types");
    var g = new p.Vec3();
    var j = new p.Vec3();
    var k = new p.Vec3();
    var m = new p.Vec3();
    var e = new p.Vec3();
    var i = new p.Vec3();
    var a = [,,,];
    var o = [,,,];
    function h(c, a) {
      return p.Vec3.dot(a.n, c) - a.d;
    }
  }, {
    "../value-types": 251
  }],
  140: [function (d, a, b) {
    "use strict";

    b.__esModule = true;
    b.default = undefined;
    b.default = {
      SHAPE_RAY: 1,
      SHAPE_LINE: 2,
      SHAPE_SPHERE: 4,
      SHAPE_AABB: 8,
      SHAPE_OBB: 16,
      SHAPE_PLANE: 32,
      SHAPE_TRIANGLE: 64,
      SHAPE_FRUSTUM: 128,
      SHAPE_FRUSTUM_ACCURATE: 256
    };
    a.exports = b.default;
  }, {}],
  141: [function (h, b, d) {
    "use strict";

    d.__esModule = true;
    d.default = undefined;
    var l = h("../value-types");
    var f = e(h("./enums"));
    var n = e(h("./plane"));
    function e(b) {
      if (b && b.__esModule) {
        return b;
      } else {
        return {
          default: b
        };
      }
    }
    function g(e, a) {
      for (var b = 0; b < a.length; b++) {
        var f = a[b];
        f.enumerable = f.enumerable || false;
        f.configurable = true;
        if ("value" in f) {
          f.writable = true;
        }
        Object.defineProperty(e, f.key, f);
      }
    }
    var a = [,,,,,,,,];
    a[0] = new l.Vec3(1, 1, 1);
    a[1] = new l.Vec3(-1, 1, 1);
    a[2] = new l.Vec3(-1, -1, 1);
    a[3] = new l.Vec3(1, -1, 1);
    a[4] = new l.Vec3(1, 1, -1);
    a[5] = new l.Vec3(-1, 1, -1);
    a[6] = new l.Vec3(-1, -1, -1);
    a[7] = new l.Vec3(1, -1, -1);
    var j;
    var i = function () {
      function e() {
        this.planes = undefined;
        this.vertices = undefined;
        this._type = undefined;
        this._type = f.default.SHAPE_FRUSTUM;
        this.planes = [,,,,,,];
        for (var c = 0; c < 6; ++c) {
          this.planes[c] = n.default.create(0, 0, 0, 0);
        }
        this.vertices = [,,,,,,,,];
        for (var d = 0; d < 8; ++d) {
          this.vertices[d] = new l.Vec3();
        }
      }
      e.create = function () {
        return new e();
      };
      e.clone = function (b) {
        return e.copy(new e(), b);
      };
      e.copy = function (e, a) {
        e._type = a._type;
        for (var b = 0; b < 6; ++b) {
          n.default.copy(e.planes[b], a.planes[b]);
        }
        for (var f = 0; f < 8; ++f) {
          l.Vec3.copy(e.vertices[f], a.vertices[f]);
        }
        return e;
      };
      var b;
      var i;
      var j = e.prototype;
      j.update = function (g, b) {
        var c = g.m;
        l.Vec3.set(this.planes[0].n, c[3] + c[0], c[7] + c[4], c[11] + c[8]);
        this.planes[0].d = -(c[15] + c[12]);
        l.Vec3.set(this.planes[1].n, c[3] - c[0], c[7] - c[4], c[11] - c[8]);
        this.planes[1].d = -(c[15] - c[12]);
        l.Vec3.set(this.planes[2].n, c[3] + c[1], c[7] + c[5], c[11] + c[9]);
        this.planes[2].d = -(c[15] + c[13]);
        l.Vec3.set(this.planes[3].n, c[3] - c[1], c[7] - c[5], c[11] - c[9]);
        this.planes[3].d = -(c[15] - c[13]);
        l.Vec3.set(this.planes[4].n, c[3] + c[2], c[7] + c[6], c[11] + c[10]);
        this.planes[4].d = -(c[15] + c[14]);
        l.Vec3.set(this.planes[5].n, c[3] - c[2], c[7] - c[6], c[11] - c[10]);
        this.planes[5].d = -(c[15] - c[14]);
        if (this._type === f.default.SHAPE_FRUSTUM_ACCURATE) {
          for (var d = 0; d < 6; d++) {
            var k = this.planes[d];
            var m = 1 / k.n.length();
            l.Vec3.multiplyScalar(k.n, k.n, m);
            k.d *= m;
          }
          for (var n = 0; n < 8; n++) {
            l.Vec3.transformMat4(this.vertices[n], a[n], b);
          }
        }
      };
      j.transform = function (c) {
        if (this._type === f.default.SHAPE_FRUSTUM_ACCURATE) {
          for (var a = 0; a < 8; a++) {
            l.Vec3.transformMat4(this.vertices[a], this.vertices[a], c);
          }
          n.default.fromPoints(this.planes[0], this.vertices[1], this.vertices[5], this.vertices[6]);
          n.default.fromPoints(this.planes[1], this.vertices[3], this.vertices[7], this.vertices[4]);
          n.default.fromPoints(this.planes[2], this.vertices[6], this.vertices[7], this.vertices[3]);
          n.default.fromPoints(this.planes[3], this.vertices[0], this.vertices[4], this.vertices[5]);
          n.default.fromPoints(this.planes[4], this.vertices[2], this.vertices[3], this.vertices[0]);
          n.default.fromPoints(this.planes[0], this.vertices[7], this.vertices[6], this.vertices[5]);
        }
      };
      b = e;
      if (i = [{
        key: "accurate",
        set: function (b) {
          this._type = b ? f.default.SHAPE_FRUSTUM_ACCURATE : f.default.SHAPE_FRUSTUM;
        }
      }]) {
        g(b.prototype, i);
      }
      Object.defineProperty(b, "prototype", {
        writable: false
      });
      return e;
    }();
    d.default = i;
    j = new l.Vec3();
    i.createOrtho = function (f, b, d, e, g, h) {
      var a = b / 2;
      var i = d / 2;
      l.Vec3.set(j, a, i, e);
      l.Vec3.transformMat4(f.vertices[0], j, h);
      l.Vec3.set(j, -a, i, e);
      l.Vec3.transformMat4(f.vertices[1], j, h);
      l.Vec3.set(j, -a, -i, e);
      l.Vec3.transformMat4(f.vertices[2], j, h);
      l.Vec3.set(j, a, -i, e);
      l.Vec3.transformMat4(f.vertices[3], j, h);
      l.Vec3.set(j, a, i, g);
      l.Vec3.transformMat4(f.vertices[4], j, h);
      l.Vec3.set(j, -a, i, g);
      l.Vec3.transformMat4(f.vertices[5], j, h);
      l.Vec3.set(j, -a, -i, g);
      l.Vec3.transformMat4(f.vertices[6], j, h);
      l.Vec3.set(j, a, -i, g);
      l.Vec3.transformMat4(f.vertices[7], j, h);
      n.default.fromPoints(f.planes[0], f.vertices[1], f.vertices[6], f.vertices[5]);
      n.default.fromPoints(f.planes[1], f.vertices[3], f.vertices[4], f.vertices[7]);
      n.default.fromPoints(f.planes[2], f.vertices[6], f.vertices[3], f.vertices[7]);
      n.default.fromPoints(f.planes[3], f.vertices[0], f.vertices[5], f.vertices[4]);
      n.default.fromPoints(f.planes[4], f.vertices[2], f.vertices[0], f.vertices[3]);
      n.default.fromPoints(f.planes[0], f.vertices[7], f.vertices[5], f.vertices[6]);
    };
    b.exports = d.default;
  }, {
    "../value-types": 251,
    "./enums": 140,
    "./plane": 146
  }],
  142: [function (p, b, g) {
    "use strict";

    g.__esModule = true;
    var e = {
      enums: true,
      Triangle: true,
      Aabb: true,
      Ray: true,
      intersect: true,
      Sphere: true,
      Obb: true,
      Frustum: true,
      Line: true,
      Plane: true
    };
    g.intersect = g.enums = g.Triangle = g.Sphere = g.Ray = g.Plane = g.Obb = g.Line = g.Frustum = g.Aabb = undefined;
    var i = d(p("./enums"));
    g.enums = i.default;
    var j = d(p("./triangle"));
    g.Triangle = j.default;
    var k = d(p("./aabb"));
    g.Aabb = k.default;
    var m = d(p("./ray"));
    g.Ray = m.default;
    var a = d(p("./intersect"));
    g.intersect = a.default;
    var n = d(p("./sphere"));
    g.Sphere = n.default;
    var c = d(p("./obb"));
    g.Obb = c.default;
    var l = d(p("./frustum"));
    g.Frustum = l.default;
    var h = d(p("./line"));
    g.Line = h.default;
    var o = d(p("./plane"));
    g.Plane = o.default;
    var f = p("./distance");
    function d(b) {
      if (b && b.__esModule) {
        return b;
      } else {
        return {
          default: b
        };
      }
    }
    Object.keys(f).forEach(function (b) {
      if (b !== "default" && b !== "__esModule") {
        if (!(Object.prototype.hasOwnProperty.call(e, b) || b in g && g[b] === f[b])) {
          g[b] = f[b];
        }
      }
    });
    cc.geomUtils = b.exports;
  }, {
    "./aabb": 138,
    "./distance": 139,
    "./enums": 140,
    "./frustum": 141,
    "./intersect": 143,
    "./line": 144,
    "./obb": 145,
    "./plane": 146,
    "./ray": 147,
    "./sphere": 148,
    "./triangle": 149
  }],
  143: [function (b, d, g) {
    "use strict";

    g.__esModule = true;
    g.default = undefined;
    var t = c(b("../../renderer/gfx"));
    var p = c(b("../../renderer/memop/recycle-pool"));
    var u = b("../value-types");
    var v = c(b("./aabb"));
    var e = function (g) {
      if (g && g.__esModule) {
        return g;
      }
      if (g === null || typeof g != "object" && typeof g != "function") {
        return {
          default: g
        };
      }
      var a = m(undefined);
      if (a && a.has(g)) {
        return a.get(g);
      }
      var b = {};
      var c = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var d in g) {
        if (d !== "default" && Object.prototype.hasOwnProperty.call(g, d)) {
          var h = c ? Object.getOwnPropertyDescriptor(g, d) : null;
          if (h && (h.get || h.set)) {
            Object.defineProperty(b, d, h);
          } else {
            b[d] = g[d];
          }
        }
      }
      b.default = g;
      if (a) {
        a.set(g, b);
      }
      return b;
    }(b("./distance"));
    var a = c(b("./enums"));
    var r = c(b("./ray"));
    var i = c(b("./triangle"));
    function m(d) {
      if (typeof WeakMap != "function") {
        return null;
      }
      var a = new WeakMap();
      var b = new WeakMap();
      return (m = function (c) {
        if (c) {
          return b;
        } else {
          return a;
        }
      })(d);
    }
    function c(b) {
      if (b && b.__esModule) {
        return b;
      } else {
        return {
          default: b
        };
      }
    }
    var l;
    var s;
    var x;
    var y;
    var A;
    var C;
    var E;
    var R;
    var S;
    var T;
    var W;
    var _;
    var aa;
    var ba;
    var ca;
    var da = function () {
      var c = i.default.create();
      var a = Infinity;
      function d(e, a, b, c) {
        u.Vec3.set(e, a[b * c], a[b * c + 1], a[b * c + 2]);
      }
      return function (b, e) {
        a = Infinity;
        for (var f = e._subMeshes, g = 0; g < f.length; g++) {
          if (f[g]._primitiveType === t.default.PT_TRIANGLES) {
            for (var h = e._subDatas[g] || e._subDatas[0], i = e._getAttrMeshData(g, t.default.ATTR_POSITION), j = h.getIData(Uint16Array), l = h.vfm.element(t.default.ATTR_POSITION).num, o = 0; o < j.length; o += 3) {
              d(c.a, i, j[o], l);
              d(c.b, i, j[o + 1], l);
              d(c.c, i, j[o + 2], l);
              var u = I(b, c);
              if (u > 0 && u < a) {
                a = u;
              }
            }
          }
        }
        return a;
      };
    }();
    var qa = function () {
      function s(a, b) {
        for (var c = a.children, d = c.length - 1; d >= 0; d--) {
          s(c[d], b);
        }
        b(a);
      }
      function a(c, a) {
        return c.distance - a.distance;
      }
      function q(i, b, c) {
        var d = c.m;
        var e = b.x;
        var f = b.y;
        var g = b.z;
        var h = d[3] * e + d[7] * f + d[11] * g;
        h = h ? 1 / h : 1;
        i.x = (d[0] * e + d[4] * f + d[8] * g) * h;
        i.y = (d[1] * e + d[5] * f + d[9] * g) * h;
        i.z = (d[2] * e + d[6] * f + d[10] * g) * h;
        return i;
      }
      var j = new p.default(function () {
        return {
          distance: 0,
          node: null
        };
      }, 1);
      var i = [];
      var b = v.default.create();
      var e = new u.Vec3();
      var c = new u.Vec3();
      var g = new r.default();
      var h = cc.mat4();
      var f = cc.mat4();
      var d = new u.Vec3();
      function k(b) {
        return b > 0 && b < Infinity;
      }
      return function (l, m, o, p) {
        j.reset();
        i.length = 0;
        s(l = l || cc.director.getScene(), function (l) {
          if (!p || p(l)) {
            u.Mat4.invert(f, l.getWorldMatrix(h));
            u.Vec3.transformMat4(g.o, m.o, f);
            u.Vec3.normalize(g.d, q(g.d, m.d, f));
            var a = Infinity;
            var r = l._renderComponent;
            if (r instanceof cc.MeshRenderer) {
              a = N(g, r._boundingBox);
            } else if (l.width && l.height) {
              u.Vec3.set(e, -l.width * l.anchorX, -l.height * l.anchorY, l.z);
              u.Vec3.set(c, l.width * (1 - l.anchorX), l.height * (1 - l.anchorY), l.z);
              v.default.fromPoints(b, e, c);
              a = N(g, b);
            }
            if (k(a) && (o && (a = o(g, l, a)), k(a))) {
              u.Vec3.scale(d, g.d, a);
              q(d, d, h);
              var n = j.add();
              n.node = l;
              n.distance = u.Vec3.mag(d);
              i.push(n);
            }
          }
        });
        i.sort(a);
        return i;
      };
    }();
    l = new u.Vec3(0, 0, 0);
    function M(e, a) {
      var b = u.Vec3.dot(e.d, a.n);
      if (Math.abs(b) < Number.EPSILON) {
        return 0;
      }
      u.Vec3.multiplyScalar(l, a.n, a.d);
      var c = u.Vec3.dot(u.Vec3.subtract(l, l, e.o), a.n) / b;
      if (c < 0) {
        return 0;
      } else {
        return c;
      }
    }
    s = new u.Vec3(0, 0, 0);
    function w(d, a) {
      u.Vec3.subtract(s, d.e, d.s);
      var b = (a.d - u.Vec3.dot(d.s, a.n)) / u.Vec3.dot(s, a.n);
      if (b < 0 || b > 1) {
        return 0;
      } else {
        return b;
      }
    }
    var I = function () {
      var d = new u.Vec3(0, 0, 0);
      var b = new u.Vec3(0, 0, 0);
      var g = new u.Vec3(0, 0, 0);
      var e = new u.Vec3(0, 0, 0);
      var i = new u.Vec3(0, 0, 0);
      return function (j, k, a) {
        u.Vec3.subtract(d, k.b, k.a);
        u.Vec3.subtract(b, k.c, k.a);
        u.Vec3.cross(g, j.d, b);
        var m = u.Vec3.dot(d, g);
        if (m < Number.EPSILON && (!a || m > -Number.EPSILON)) {
          return 0;
        }
        var c = 1 / m;
        u.Vec3.subtract(e, j.o, k.a);
        var l = u.Vec3.dot(e, g) * c;
        if (l < 0 || l > 1) {
          return 0;
        }
        u.Vec3.cross(i, e, d);
        var h = u.Vec3.dot(j.d, i) * c;
        if (h < 0 || l + h > 1) {
          return 0;
        }
        var n = u.Vec3.dot(b, i) * c;
        if (n < 0) {
          return 0;
        } else {
          return n;
        }
      };
    }();
    var O = I;
    var L = function () {
      var d = new u.Vec3(0, 0, 0);
      var b = new u.Vec3(0, 0, 0);
      var f = new u.Vec3(0, 0, 0);
      var e = new u.Vec3(0, 0, 0);
      var g = new u.Vec3(0, 0, 0);
      var i = new u.Vec3(0, 0, 0);
      return function (j, a, k) {
        u.Vec3.subtract(d, a.b, a.a);
        u.Vec3.subtract(b, a.c, a.a);
        u.Vec3.subtract(f, j.s, j.e);
        u.Vec3.cross(g, d, b);
        var c = u.Vec3.dot(f, g);
        if (c <= 0) {
          return 0;
        }
        u.Vec3.subtract(e, j.s, a.a);
        var l = u.Vec3.dot(e, g);
        if (l < 0 || l > c) {
          return 0;
        }
        u.Vec3.cross(i, f, e);
        var h = u.Vec3.dot(b, i);
        if (h < 0 || h > c) {
          return 0;
        }
        var m = -u.Vec3.dot(d, i);
        if (m < 0 || h + m > c) {
          return 0;
        }
        if (k) {
          var p = 1 / c;
          var q = 1 - (h *= p) - (m *= p);
          u.Vec3.set(k, a.a.x * q + a.b.x * h + a.c.x * m, a.a.y * q + a.b.y * h + a.c.y * m, a.a.z * q + a.b.z * h + a.c.z * m);
        }
        return 1;
      };
    }();
    x = new u.Vec3(0, 0, 0);
    y = new u.Vec3(0, 0, 0);
    A = new u.Vec3(0, 0, 0);
    C = new u.Vec3(0, 0, 0);
    E = new u.Vec3(0, 0, 0);
    R = new u.Vec3(0, 0, 0);
    S = new u.Vec3(0, 0, 0);
    function P(c, b, d, e, f, g, h) {
      u.Vec3.subtract(x, b, c);
      u.Vec3.subtract(y, d, c);
      u.Vec3.subtract(A, e, c);
      u.Vec3.subtract(C, f, c);
      u.Vec3.cross(R, C, x);
      var a = u.Vec3.dot(y, R);
      if (a >= 0) {
        var i = -u.Vec3.dot(A, R);
        if (i < 0) {
          return 0;
        }
        var j = u.Vec3.dot(u.Vec3.cross(S, x, A), y);
        if (j < 0) {
          return 0;
        }
        if (h) {
          var k = 1 / (i + a + j);
          i *= k;
          a *= k;
          j *= k;
          u.Vec3.set(h, d.x * i + e.x * a + f.x * j, d.y * i + e.y * a + f.y * j, d.z * i + e.z * a + f.z * j);
        }
      } else {
        u.Vec3.subtract(E, g, c);
        var l = u.Vec3.dot(E, R);
        if (l < 0) {
          return 0;
        }
        var p = u.Vec3.dot(u.Vec3.cross(S, x, y), E);
        if (p < 0) {
          return 0;
        }
        if (h) {
          var t = 1 / (l + (a = -a) + p);
          l *= t;
          a *= t;
          p *= t;
          u.Vec3.set(h, d.x * l + g.x * a + f.x * p, d.y * l + g.y * a + f.y * p, d.z * l + g.z * a + f.z * p);
        }
      }
      return 1;
    }
    var D = function () {
      var d = new u.Vec3(0, 0, 0);
      return function (b, g) {
        var e = g.radius;
        var i = g.center;
        var j = b.o;
        var k = b.d;
        var a = e * e;
        u.Vec3.subtract(d, i, j);
        var m = d.lengthSqr();
        var c = u.Vec3.dot(d, k);
        var l = a - (m - c * c);
        if (l < 0) {
          return 0;
        }
        var h = Math.sqrt(l);
        var n = m < a ? c + h : c - h;
        if (n < 0) {
          return 0;
        } else {
          return n;
        }
      };
    }();
    T = new u.Vec3();
    W = new u.Vec3();
    function N(p, b) {
      var g = p.o;
      var e = p.d;
      var i = 1 / e.x;
      var j = 1 / e.y;
      var k = 1 / e.z;
      u.Vec3.subtract(T, b.center, b.halfExtents);
      u.Vec3.add(W, b.center, b.halfExtents);
      var a = (T.x - g.x) * i;
      var m = (W.x - g.x) * i;
      var c = (T.y - g.y) * j;
      var l = (W.y - g.y) * j;
      var h = (T.z - g.z) * k;
      var n = (W.z - g.z) * k;
      var f = Math.max(Math.max(Math.min(a, m), Math.min(c, l)), Math.min(h, n));
      var d = Math.min(Math.min(Math.max(a, m), Math.max(c, l)), Math.max(h, n));
      if (d < 0 || f > d) {
        return 0;
      } else {
        return f;
      }
    }
    var F = N;
    var B = function () {
      var g = new u.Vec3();
      var p = new u.Vec3();
      var t = new u.Vec3();
      var v = new u.Vec3();
      var m = new u.Vec3();
      var n = new u.Vec3();
      var q = new u.Vec3();
      var a = [,,,];
      var o = [,,,];
      var c = [,,,];
      var l = [,,,,,,];
      return function (b, e) {
        a[0] = e.halfExtents.x;
        a[1] = e.halfExtents.y;
        a[2] = e.halfExtents.z;
        g = e.center;
        p = b.o;
        t = b.d;
        var f = e.orientation.m;
        u.Vec3.set(v, f[0], f[1], f[2]);
        u.Vec3.set(m, f[3], f[4], f[5]);
        u.Vec3.set(n, f[6], f[7], f[8]);
        u.Vec3.subtract(q, g, p);
        o[0] = u.Vec3.dot(v, t);
        o[1] = u.Vec3.dot(m, t);
        o[2] = u.Vec3.dot(n, t);
        c[0] = u.Vec3.dot(v, q);
        c[1] = u.Vec3.dot(m, q);
        c[2] = u.Vec3.dot(n, q);
        for (var d = 0; d < 3; ++d) {
          if (o[d] === 0) {
            if (-c[d] - a[d] > 0 || -c[d] + a[d] < 0) {
              return 0;
            }
            o[d] = 1e-7;
          }
          l[d * 2 + 0] = (c[d] + a[d]) / o[d];
          l[d * 2 + 1] = (c[d] - a[d]) / o[d];
        }
        var h = Math.max(Math.max(Math.min(l[0], l[1]), Math.min(l[2], l[3])), Math.min(l[4], l[5]));
        var j = Math.min(Math.min(Math.max(l[0], l[1]), Math.max(l[2], l[3])), Math.max(l[4], l[5]));
        if (j < 0 || h > j || h < 0) {
          return 0;
        } else {
          return h;
        }
      };
    }();
    _ = new u.Vec3();
    aa = new u.Vec3();
    ba = new u.Vec3();
    ca = new u.Vec3();
    function V(c, a) {
      u.Vec3.subtract(_, c.center, c.halfExtents);
      u.Vec3.add(aa, c.center, c.halfExtents);
      u.Vec3.subtract(ba, a.center, a.halfExtents);
      u.Vec3.add(ca, a.center, a.halfExtents);
      return _.x <= ca.x && aa.x >= ba.x && _.y <= ca.y && aa.y >= ba.y && _.z <= ca.z && aa.z >= ba.z;
    }
    function za(d, a, b) {
      u.Vec3.set(b[0], d.x, a.y, a.z);
      u.Vec3.set(b[1], d.x, a.y, d.z);
      u.Vec3.set(b[2], d.x, d.y, a.z);
      u.Vec3.set(b[3], d.x, d.y, d.z);
      u.Vec3.set(b[4], a.x, a.y, a.z);
      u.Vec3.set(b[5], a.x, a.y, d.z);
      u.Vec3.set(b[6], a.x, d.y, a.z);
      u.Vec3.set(b[7], a.x, d.y, d.z);
    }
    function U(a, b, c, d, e, f) {
      u.Vec3.set(f[0], a.x + c.x * b.x + d.x * b.y + e.x * b.z, a.y + c.y * b.x + d.y * b.y + e.y * b.z, a.z + c.z * b.x + d.z * b.y + e.z * b.z);
      u.Vec3.set(f[1], a.x - c.x * b.x + d.x * b.y + e.x * b.z, a.y - c.y * b.x + d.y * b.y + e.y * b.z, a.z - c.z * b.x + d.z * b.y + e.z * b.z);
      u.Vec3.set(f[2], a.x + c.x * b.x - d.x * b.y + e.x * b.z, a.y + c.y * b.x - d.y * b.y + e.y * b.z, a.z + c.z * b.x - d.z * b.y + e.z * b.z);
      u.Vec3.set(f[3], a.x + c.x * b.x + d.x * b.y - e.x * b.z, a.y + c.y * b.x + d.y * b.y - e.y * b.z, a.z + c.z * b.x + d.z * b.y - e.z * b.z);
      u.Vec3.set(f[4], a.x - c.x * b.x - d.x * b.y - e.x * b.z, a.y - c.y * b.x - d.y * b.y - e.y * b.z, a.z - c.z * b.x - d.z * b.y - e.z * b.z);
      u.Vec3.set(f[5], a.x + c.x * b.x - d.x * b.y - e.x * b.z, a.y + c.y * b.x - d.y * b.y - e.y * b.z, a.z + c.z * b.x - d.z * b.y - e.z * b.z);
      u.Vec3.set(f[6], a.x - c.x * b.x + d.x * b.y - e.x * b.z, a.y - c.y * b.x + d.y * b.y - e.y * b.z, a.z - c.z * b.x + d.z * b.y - e.z * b.z);
      u.Vec3.set(f[7], a.x - c.x * b.x - d.x * b.y + e.x * b.z, a.y - c.y * b.x - d.y * b.y + e.y * b.z, a.z - c.z * b.x - d.z * b.y + e.z * b.z);
    }
    function z(a, b) {
      for (var c = u.Vec3.dot(b, a[0]), h = c, i = 1; i < 8; ++i) {
        var j = u.Vec3.dot(b, a[i]);
        c = j < c ? j : c;
        h = j > h ? j : h;
      }
      return [c, h];
    }
    var k;
    var G = function () {
      for (var h = Array(15), b = 0; b < 15; b++) {
        h[b] = new u.Vec3(0, 0, 0);
      }
      for (var l = [,,,,,,,,], d = [,,,,,,,,], e = 0; e < 8; e++) {
        l[e] = new u.Vec3(0, 0, 0);
        d[e] = new u.Vec3(0, 0, 0);
      }
      var g = new u.Vec3();
      var i = new u.Vec3();
      return function (a, b) {
        var e = b.orientation.m;
        u.Vec3.set(h[0], 1, 0, 0);
        u.Vec3.set(h[1], 0, 1, 0);
        u.Vec3.set(h[2], 0, 0, 1);
        u.Vec3.set(h[3], e[0], e[1], e[2]);
        u.Vec3.set(h[4], e[3], e[4], e[5]);
        u.Vec3.set(h[5], e[6], e[7], e[8]);
        for (var f = 0; f < 3; ++f) {
          u.Vec3.cross(h[6 + f * 3], h[f], h[0]);
          u.Vec3.cross(h[7 + f * 3], h[f], h[1]);
          u.Vec3.cross(h[7 + f * 3], h[f], h[2]);
        }
        u.Vec3.subtract(g, a.center, a.halfExtents);
        u.Vec3.add(i, a.center, a.halfExtents);
        za(g, i, l);
        U(b.center, b.halfExtents, h[3], h[4], h[5], d);
        for (var j = 0; j < 15; ++j) {
          var k = z(l, h[j]);
          var p = z(d, h[j]);
          if (p[0] > k[1] || k[0] > p[1]) {
            return 0;
          }
        }
        return 1;
      };
    }();
    function ra(e, a) {
      var b = e.halfExtents.x * Math.abs(a.n.x) + e.halfExtents.y * Math.abs(a.n.y) + e.halfExtents.z * Math.abs(a.n.z);
      var c = u.Vec3.dot(a.n, e.center);
      if (c + b < a.d) {
        return -1;
      } else if (c - b > a.d) {
        return 0;
      } else {
        return 1;
      }
    }
    function X(d, a) {
      for (var b = 0; b < a.planes.length; b++) {
        if (ra(d, a.planes[b]) === -1) {
          return 0;
        }
      }
      return 1;
    }
    var Y = function () {
      for (var f = [,,,,,,,,], a = 0, h = 0, e = 0; e < f.length; e++) {
        f[e] = new u.Vec3(0, 0, 0);
      }
      return function (b, c) {
        for (var d = 0, e = false, g = 0; g < c.planes.length; g++) {
          if ((d = ra(b, c.planes[g])) === -1) {
            return 0;
          }
          if (d === 1) {
            e = true;
          }
        }
        if (!e) {
          return 1;
        }
        for (var l = 0; l < c.vertices.length; l++) {
          u.Vec3.subtract(f[l], c.vertices[l], b.center);
        }
        a = 0;
        h = 0;
        for (var o = 0; o < c.vertices.length; o++) {
          if (f[o].x > b.halfExtents.x) {
            a++;
          } else if (f[o].x < -b.halfExtents.x) {
            h++;
          }
        }
        if (a === c.vertices.length || h === c.vertices.length) {
          return 0;
        }
        a = 0;
        h = 0;
        for (var r = 0; r < c.vertices.length; r++) {
          if (f[r].y > b.halfExtents.y) {
            a++;
          } else if (f[r].y < -b.halfExtents.y) {
            h++;
          }
        }
        if (a === c.vertices.length || h === c.vertices.length) {
          return 0;
        }
        a = 0;
        h = 0;
        for (var s = 0; s < c.vertices.length; s++) {
          if (f[s].z > b.halfExtents.z) {
            a++;
          } else if (f[s].z < -b.halfExtents.z) {
            h++;
          }
        }
        if (a === c.vertices.length || h === c.vertices.length) {
          return 0;
        } else {
          return 1;
        }
      };
    }();
    var j = function () {
      var a = new u.Vec3(0, 0, 0);
      var b = new u.Mat3();
      return function (c, d) {
        u.Vec3.subtract(a, d, c.center);
        u.Vec3.transformMat3(a, a, u.Mat3.transpose(b, c.orientation));
        e = a;
        h = c.halfExtents;
        return Math.abs(e.x) < h.x && Math.abs(e.y) < h.y && Math.abs(e.z) < h.z;
        var e;
        var h;
      };
    }();
    k = function (e, a, b, c) {
      return Math.abs(e.x * a + e.y * b + e.z * c);
    };
    function q(f, a) {
      var b = f.orientation.m;
      var c = f.halfExtents.x * k(a.n, b[0], b[1], b[2]) + f.halfExtents.y * k(a.n, b[3], b[4], b[5]) + f.halfExtents.z * k(a.n, b[6], b[7], b[8]);
      var d = u.Vec3.dot(a.n, f.center);
      if (d + c < a.d) {
        return -1;
      } else if (d - c > a.d) {
        return 0;
      } else {
        return 1;
      }
    }
    function Z(d, a) {
      for (var b = 0; b < a.planes.length; b++) {
        if (q(d, a.planes[b]) === -1) {
          return 0;
        }
      }
      return 1;
    }
    var K = function () {
      for (var i = [,,,,,,,,], b = 0, l = 0, p = 0, a = 0; a < i.length; a++) {
        i[a] = new u.Vec3(0, 0, 0);
      }
      function e(e, a, b, c) {
        return e.x * a + e.y * b + e.z * c;
      }
      return function (c, a) {
        for (var d = 0, g = false, h = 0; h < a.planes.length; h++) {
          if ((d = q(c, a.planes[h])) === -1) {
            return 0;
          }
          if (d === 1) {
            g = true;
          }
        }
        if (!g) {
          return 1;
        }
        for (var j = 0; j < a.vertices.length; j++) {
          u.Vec3.subtract(i[j], a.vertices[j], c.center);
        }
        l = 0;
        p = 0;
        for (var s = c.orientation.m, o = 0; o < a.vertices.length; o++) {
          if ((b = e(i[o], s[0], s[1], s[2])) > c.halfExtents.x) {
            l++;
          } else if (b < -c.halfExtents.x) {
            p++;
          }
        }
        if (l === a.vertices.length || p === a.vertices.length) {
          return 0;
        }
        l = 0;
        p = 0;
        for (var t = 0; t < a.vertices.length; t++) {
          if ((b = e(i[t], s[3], s[4], s[5])) > c.halfExtents.y) {
            l++;
          } else if (b < -c.halfExtents.y) {
            p++;
          }
        }
        if (l === a.vertices.length || p === a.vertices.length) {
          return 0;
        }
        l = 0;
        p = 0;
        for (var v = 0; v < a.vertices.length; v++) {
          if ((b = e(i[v], s[6], s[7], s[8])) > c.halfExtents.z) {
            l++;
          } else if (b < -c.halfExtents.z) {
            p++;
          }
        }
        if (l === a.vertices.length || p === a.vertices.length) {
          return 0;
        } else {
          return 1;
        }
      };
    }();
    var Q = function () {
      for (var h = Array(15), b = 0; b < 15; b++) {
        h[b] = new u.Vec3(0, 0, 0);
      }
      for (var l = [,,,,,,,,], d = [,,,,,,,,], e = 0; e < 8; e++) {
        l[e] = new u.Vec3(0, 0, 0);
        d[e] = new u.Vec3(0, 0, 0);
      }
      return function (b, c) {
        var e = b.orientation.m;
        var f = c.orientation.m;
        u.Vec3.set(h[0], e[0], e[1], e[2]);
        u.Vec3.set(h[1], e[3], e[4], e[5]);
        u.Vec3.set(h[2], e[6], e[7], e[8]);
        u.Vec3.set(h[3], f[0], f[1], f[2]);
        u.Vec3.set(h[4], f[3], f[4], f[5]);
        u.Vec3.set(h[5], f[6], f[7], f[8]);
        for (var a = 0; a < 3; ++a) {
          u.Vec3.cross(h[6 + a * 3], h[a], h[0]);
          u.Vec3.cross(h[7 + a * 3], h[a], h[1]);
          u.Vec3.cross(h[7 + a * 3], h[a], h[2]);
        }
        U(b.center, b.halfExtents, h[0], h[1], h[2], l);
        U(c.center, c.halfExtents, h[3], h[4], h[5], d);
        for (var g = 0; g < 15; ++g) {
          var i = z(l, h[g]);
          var o = z(d, h[g]);
          if (o[0] > i[1] || i[0] > o[1]) {
            return 0;
          }
        }
        return 1;
      };
    }();
    function J(e, a) {
      var b = u.Vec3.dot(a.n, e.center);
      var c = e.radius * a.n.length();
      if (b + c < a.d) {
        return -1;
      } else if (b - c > a.d) {
        return 0;
      } else {
        return 1;
      }
    }
    function $(d, a) {
      for (var b = 0; b < a.planes.length; b++) {
        if (J(d, a.planes[b]) === -1) {
          return 0;
        }
      }
      return 1;
    }
    var sa = function () {
      var c = new u.Vec3(0, 0, 0);
      var a = [1, -1, 1, -1, 1, -1];
      return function (b, d) {
        for (var e = 0; e < 6; e++) {
          var f = d.planes[e];
          var g = b.radius;
          var h = b.center;
          var l = f.n;
          var o = f.d;
          var r = u.Vec3.dot(l, h);
          if (r + g < o) {
            return 0;
          }
          if (!(r - g > o)) {
            u.Vec3.add(c, h, u.Vec3.multiplyScalar(c, l, g));
            for (var v = 0; v < 6; v++) {
              if (v !== e && v !== e + a[e]) {
                var w = d.planes[v];
                if (u.Vec3.dot(w.n, c) < w.d) {
                  return 0;
                }
              }
            }
          }
        }
        return 1;
      };
    }();
    function ta(d, a) {
      var b = d.radius + a.radius;
      return u.Vec3.squaredDistance(d.center, a.center) < b * b;
    }
    var ua = function () {
      var a = new u.Vec3();
      return function (b, c) {
        e.pt_point_aabb(a, b.center, c);
        return u.Vec3.squaredDistance(b.center, a) < b.radius * b.radius;
      };
    }();
    var va = function () {
      var a = new u.Vec3();
      return function (b, c) {
        e.pt_point_obb(a, b.center, c);
        return u.Vec3.squaredDistance(b.center, a) < b.radius * b.radius;
      };
    }();
    var wa = {
      rayAabb: F,
      rayMesh: da,
      raycast: qa,
      rayTriangle: O,
      ray_sphere: D,
      ray_aabb: N,
      ray_obb: B,
      ray_plane: M,
      ray_triangle: I,
      line_plane: w,
      line_triangle: L,
      line_quad: P,
      sphere_sphere: ta,
      sphere_aabb: ua,
      sphere_obb: va,
      sphere_plane: J,
      sphere_frustum: $,
      sphere_frustum_accurate: sa,
      aabb_aabb: V,
      aabb_obb: G,
      aabb_plane: ra,
      aabb_frustum: X,
      aabb_frustum_accurate: Y,
      obb_obb: Q,
      obb_plane: q,
      obb_frustum: Z,
      obb_frustum_accurate: K,
      obb_point: j,
      resolve: function (g, a, b) {
        if (b === undefined) {
          b = null;
        }
        var h = g._type;
        var d = a._type;
        var e = this[h | d];
        if (h < d) {
          return e(g, a, b);
        } else {
          return e(a, g, b);
        }
      }
    };
    wa[a.default.SHAPE_RAY | a.default.SHAPE_SPHERE] = D;
    wa[a.default.SHAPE_RAY | a.default.SHAPE_AABB] = N;
    wa[a.default.SHAPE_RAY | a.default.SHAPE_OBB] = B;
    wa[a.default.SHAPE_RAY | a.default.SHAPE_PLANE] = M;
    wa[a.default.SHAPE_RAY | a.default.SHAPE_TRIANGLE] = I;
    wa[a.default.SHAPE_LINE | a.default.SHAPE_PLANE] = w;
    wa[a.default.SHAPE_LINE | a.default.SHAPE_TRIANGLE] = L;
    wa[a.default.SHAPE_SPHERE] = ta;
    wa[a.default.SHAPE_SPHERE | a.default.SHAPE_AABB] = ua;
    wa[a.default.SHAPE_SPHERE | a.default.SHAPE_OBB] = va;
    wa[a.default.SHAPE_SPHERE | a.default.SHAPE_PLANE] = J;
    wa[a.default.SHAPE_SPHERE | a.default.SHAPE_FRUSTUM] = $;
    wa[a.default.SHAPE_SPHERE | a.default.SHAPE_FRUSTUM_ACCURATE] = sa;
    wa[a.default.SHAPE_AABB] = V;
    wa[a.default.SHAPE_AABB | a.default.SHAPE_OBB] = G;
    wa[a.default.SHAPE_AABB | a.default.SHAPE_PLANE] = ra;
    wa[a.default.SHAPE_AABB | a.default.SHAPE_FRUSTUM] = X;
    wa[a.default.SHAPE_AABB | a.default.SHAPE_FRUSTUM_ACCURATE] = Y;
    wa[a.default.SHAPE_OBB] = Q;
    wa[a.default.SHAPE_OBB | a.default.SHAPE_PLANE] = q;
    wa[a.default.SHAPE_OBB | a.default.SHAPE_FRUSTUM] = Z;
    wa[a.default.SHAPE_OBB | a.default.SHAPE_FRUSTUM_ACCURATE] = K;
    var xa = wa;
    g.default = xa;
    d.exports = g.default;
  }, {
    "../../renderer/gfx": 282,
    "../../renderer/memop/recycle-pool": 297,
    "../value-types": 251,
    "./aabb": 138,
    "./distance": 139,
    "./enums": 140,
    "./ray": 147,
    "./triangle": 149
  }],
  144: [function (a, b, c) {
    "use strict";

    c.__esModule = true;
    c.default = undefined;
    var d;
    var i = a("../value-types");
    var f = (d = a("./enums")) && d.__esModule ? d : {
      default: d
    };
    var g = function () {
      function j(a, e, g, l, m, n) {
        if (a === undefined) {
          a = 0;
        }
        if (e === undefined) {
          e = 0;
        }
        if (g === undefined) {
          g = 0;
        }
        if (l === undefined) {
          l = 0;
        }
        if (m === undefined) {
          m = 0;
        }
        if (n === undefined) {
          n = -1;
        }
        this.s = undefined;
        this.e = undefined;
        this._type = undefined;
        this._type = f.default.SHAPE_LINE;
        this.s = new i.Vec3(a, e, g);
        this.e = new i.Vec3(l, m, n);
      }
      j.create = function (a, b, c, d, e, f) {
        return new j(a, b, c, d, e, f);
      };
      j.clone = function (b) {
        return new j(b.s.x, b.s.y, b.s.z, b.e.x, b.e.y, b.e.z);
      };
      j.copy = function (c, a) {
        i.Vec3.copy(c.s, a.s);
        i.Vec3.copy(c.e, a.e);
        return c;
      };
      j.fromPoints = function (d, a, b) {
        i.Vec3.copy(d.s, a);
        i.Vec3.copy(d.e, b);
        return d;
      };
      j.set = function (a, b, c, d, e, f, g) {
        a.s.x = b;
        a.s.y = c;
        a.s.z = d;
        a.e.x = e;
        a.e.y = f;
        a.e.z = g;
        return a;
      };
      j.len = function (b) {
        return i.Vec3.distance(b.s, b.e);
      };
      j.prototype.length = function () {
        return i.Vec3.distance(this.s, this.e);
      };
      return j;
    }();
    c.default = g;
    b.exports = c.default;
  }, {
    "../value-types": 251,
    "./enums": 140
  }],
  145: [function (h, b, d) {
    "use strict";

    d.__esModule = true;
    d.default = undefined;
    var e;
    var t = h("../value-types");
    var g = (e = h("./enums")) && e.__esModule ? e : {
      default: e
    };
    function i(e, a) {
      for (var b = 0; b < a.length; b++) {
        var f = a[b];
        f.enumerable = f.enumerable || false;
        f.configurable = true;
        if ("value" in f) {
          f.writable = true;
        }
        Object.defineProperty(e, f.key, f);
      }
    }
    var l = new t.Vec3();
    var j = new t.Vec3();
    var a = new t.Mat3();
    var k = function () {
      function p(a, c, d, e, f, h, i, j, l, n, o, p, u, v, F) {
        if (a === undefined) {
          a = 0;
        }
        if (c === undefined) {
          c = 0;
        }
        if (d === undefined) {
          d = 0;
        }
        if (e === undefined) {
          e = 1;
        }
        if (f === undefined) {
          f = 1;
        }
        if (h === undefined) {
          h = 1;
        }
        if (i === undefined) {
          i = 1;
        }
        if (j === undefined) {
          j = 0;
        }
        if (l === undefined) {
          l = 0;
        }
        if (n === undefined) {
          n = 0;
        }
        if (o === undefined) {
          o = 1;
        }
        if (p === undefined) {
          p = 0;
        }
        if (u === undefined) {
          u = 0;
        }
        if (v === undefined) {
          v = 0;
        }
        if (F === undefined) {
          F = 1;
        }
        this.center = undefined;
        this.halfExtents = undefined;
        this.orientation = undefined;
        this._type = undefined;
        this._type = g.default.SHAPE_OBB;
        this.center = new t.Vec3(a, c, d);
        this.halfExtents = new t.Vec3(e, f, h);
        this.orientation = new t.Mat3(i, j, l, n, o, p, u, v, F);
      }
      p.create = function (b, g, e, i, j, k, m, a, n, c, l, h, o, f, d) {
        return new p(b, g, e, i, j, k, m, a, n, c, l, h, o, f, d);
      };
      p.clone = function (b) {
        var a = b.orientation.m;
        return new p(b.center.x, b.center.y, b.center.z, b.halfExtents.x, b.halfExtents.y, b.halfExtents.z, a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);
      };
      p.copy = function (c, a) {
        t.Vec3.copy(c.center, a.center);
        t.Vec3.copy(c.halfExtents, a.halfExtents);
        t.Mat3.copy(c.orientation, a.orientation);
        return c;
      };
      p.fromPoints = function (a, b, c) {
        t.Vec3.multiplyScalar(a.center, t.Vec3.add(l, b, c), 0.5);
        t.Vec3.multiplyScalar(a.halfExtents, t.Vec3.subtract(j, c, b), 0.5);
        t.Mat3.identity(a.orientation);
        return a;
      };
      p.set = function (g, b, j, e, i, k, m, a, n, c, l, h, o, f, d, q) {
        t.Vec3.set(g.center, b, j, e);
        t.Vec3.set(g.halfExtents, i, k, m);
        t.Mat3.set(g.orientation, a, n, c, l, h, o, f, d, q);
        return g;
      };
      var b;
      var e;
      var h = p.prototype;
      h.getBoundary = function (c, b) {
        var d;
        var g;
        var i;
        var m;
        var n;
        d = l;
        g = this.halfExtents;
        i = this.orientation;
        m = a.m;
        n = i.m;
        m[0] = Math.abs(n[0]);
        m[1] = Math.abs(n[1]);
        m[2] = Math.abs(n[2]);
        m[3] = Math.abs(n[3]);
        m[4] = Math.abs(n[4]);
        m[5] = Math.abs(n[5]);
        m[6] = Math.abs(n[6]);
        m[7] = Math.abs(n[7]);
        m[8] = Math.abs(n[8]);
        t.Vec3.transformMat3(d, g, a);
        t.Vec3.subtract(c, this.center, l);
        t.Vec3.add(b, this.center, l);
      };
      h.transform = function (f, a, b, c, d) {
        t.Vec3.transformMat4(d.center, this.center, f);
        t.Mat3.fromQuat(d.orientation, b);
        t.Vec3.multiply(d.halfExtents, this.halfExtents, c);
      };
      h.translateAndRotate = function (d, a, b) {
        t.Vec3.transformMat4(b.center, this.center, d);
        t.Mat3.fromQuat(b.orientation, a);
      };
      h.setScale = function (c, a) {
        t.Vec3.multiply(a.halfExtents, this.halfExtents, c);
      };
      b = p;
      if (e = [{
        key: "type",
        get: function () {
          return this._type;
        }
      }]) {
        i(b.prototype, e);
      }
      Object.defineProperty(b, "prototype", {
        writable: false
      });
      return p;
    }();
    d.default = k;
    b.exports = d.default;
  }, {
    "../value-types": 251,
    "./enums": 140
  }],
  146: [function (h, b, d) {
    "use strict";

    d.__esModule = true;
    d.default = undefined;
    var e;
    var m = h("../value-types");
    var g = (e = h("./enums")) && e.__esModule ? e : {
      default: e
    };
    var j = new m.Vec3(0, 0, 0);
    var k = new m.Vec3(0, 0, 0);
    var n = cc.mat4();
    var i = cc.v4();
    var a = function () {
      function f(e, f, h, i) {
        if (e === undefined) {
          e = 0;
        }
        if (f === undefined) {
          f = 1;
        }
        if (h === undefined) {
          h = 0;
        }
        if (i === undefined) {
          i = 0;
        }
        this.n = undefined;
        this.d = undefined;
        this._type = undefined;
        this._type = g.default.SHAPE_PLANE;
        this.n = new m.Vec3(e, f, h);
        this.d = i;
      }
      f.create = function (b, a, c, d) {
        return new f(b, a, c, d);
      };
      f.clone = function (b) {
        return new f(b.n.x, b.n.y, b.n.z, b.d);
      };
      f.copy = function (c, a) {
        m.Vec3.copy(c.n, a.n);
        c.d = a.d;
        return c;
      };
      f.fromPoints = function (a, b, c, d) {
        m.Vec3.subtract(j, c, b);
        m.Vec3.subtract(k, d, b);
        m.Vec3.normalize(a.n, m.Vec3.cross(a.n, j, k));
        a.d = m.Vec3.dot(a.n, b);
        return a;
      };
      f.set = function (f, a, b, c, d) {
        f.n.x = a;
        f.n.y = b;
        f.n.z = c;
        f.d = d;
        return f;
      };
      f.fromNormalAndPoint = function (d, a, b) {
        m.Vec3.copy(d.n, a);
        d.d = m.Vec3.dot(a, b);
        return d;
      };
      f.normalize = function (d, a) {
        var b = a.n.len();
        m.Vec3.normalize(d.n, a.n);
        if (b > 0) {
          d.d = a.d / b;
        }
        return d;
      };
      f.prototype.transform = function (b) {
        m.Mat4.invert(n, b);
        m.Mat4.transpose(n, n);
        m.Vec4.set(i, this.n.x, this.n.y, this.n.z, this.d);
        m.Vec4.transformMat4(i, i, n);
        m.Vec3.set(this.n, i.x, i.y, i.z);
        this.d = i.w;
      };
      return f;
    }();
    d.default = a;
    b.exports = d.default;
  }, {
    "../value-types": 251,
    "./enums": 140
  }],
  147: [function (a, b, c) {
    "use strict";

    c.__esModule = true;
    c.default = undefined;
    var d;
    var i = a("../value-types");
    var f = (d = a("./enums")) && d.__esModule ? d : {
      default: d
    };
    var g = function () {
      function e(a, e, g, l, m, n) {
        if (a === undefined) {
          a = 0;
        }
        if (e === undefined) {
          e = 0;
        }
        if (g === undefined) {
          g = 0;
        }
        if (l === undefined) {
          l = 0;
        }
        if (m === undefined) {
          m = 0;
        }
        if (n === undefined) {
          n = -1;
        }
        this.o = undefined;
        this.d = undefined;
        this._type = undefined;
        this._type = f.default.SHAPE_RAY;
        this.o = new i.Vec3(a, e, g);
        this.d = new i.Vec3(l, m, n);
      }
      e.create = function (a, b, i, k, l, m) {
        if (a === undefined) {
          a = 0;
        }
        if (b === undefined) {
          b = 0;
        }
        if (i === undefined) {
          i = 0;
        }
        if (k === undefined) {
          k = 0;
        }
        if (l === undefined) {
          l = 0;
        }
        if (m === undefined) {
          m = 1;
        }
        return new e(a, b, i, k, l, m);
      };
      e.clone = function (b) {
        return new e(b.o.x, b.o.y, b.o.z, b.d.x, b.d.y, b.d.z);
      };
      e.copy = function (c, a) {
        i.Vec3.copy(c.o, a.o);
        i.Vec3.copy(c.d, a.d);
        return c;
      };
      e.fromPoints = function (d, a, b) {
        i.Vec3.copy(d.o, a);
        i.Vec3.normalize(d.d, i.Vec3.subtract(d.d, b, a));
        return d;
      };
      e.set = function (a, b, c, d, e, f, g) {
        a.o.x = b;
        a.o.y = c;
        a.o.z = d;
        a.d.x = e;
        a.d.y = f;
        a.d.z = g;
        return a;
      };
      e.prototype.computeHit = function (c, a) {
        i.Vec3.normalize(c, this.d);
        i.Vec3.scaleAndAdd(c, this.o, c, a);
      };
      return e;
    }();
    c.default = g;
    b.exports = c.default;
  }, {
    "../value-types": 251,
    "./enums": 140
  }],
  148: [function (i, b, c) {
    "use strict";

    c.__esModule = true;
    c.default = undefined;
    var d;
    var j = i("../value-types");
    var f = (d = i("./enums")) && d.__esModule ? d : {
      default: d
    };
    var g = new j.Vec3();
    var h = function () {
      function h(e, g, h, i) {
        if (e === undefined) {
          e = 0;
        }
        if (g === undefined) {
          g = 0;
        }
        if (h === undefined) {
          h = 0;
        }
        if (i === undefined) {
          i = 1;
        }
        this.center = undefined;
        this.radius = undefined;
        this._type = undefined;
        this._type = f.default.SHAPE_SPHERE;
        this.center = new j.Vec3(e, g, h);
        this.radius = i;
      }
      h.create = function (a, b, c, d) {
        return new h(a, b, c, d);
      };
      h.clone = function (a) {
        return new h(a.center.x, a.center.y, a.center.z, a.radius);
      };
      h.copy = function (c, a) {
        j.Vec3.copy(c.center, a.center);
        c.radius = a.radius;
        return c;
      };
      h.fromPoints = function (d, a, b) {
        j.Vec3.multiplyScalar(d.center, j.Vec3.add(g, a, b), 0.5);
        d.radius = j.Vec3.subtract(g, b, a).len() * 0.5;
        return d;
      };
      h.set = function (f, a, b, c, d) {
        f.center.x = a;
        f.center.y = b;
        f.center.z = c;
        f.radius = d;
        return f;
      };
      var a = h.prototype;
      a.clone = function () {
        return h.clone(this);
      };
      a.copy = function (a) {
        return h.copy(this, a);
      };
      a.getBoundary = function (c, a) {
        j.Vec3.set(c, this.center.x - this.radius, this.center.y - this.radius, this.center.z - this.radius);
        j.Vec3.set(a, this.center.x + this.radius, this.center.y + this.radius, this.center.z + this.radius);
      };
      a.transform = function (f, a, b, c, d) {
        j.Vec3.transformMat4(d.center, this.center, f);
        d.radius = this.radius * c.maxAxis();
      };
      a.translateAndRotate = function (d, a, b) {
        j.Vec3.transformMat4(b.center, this.center, d);
      };
      a.setScale = function (c, a) {
        a.radius = this.radius * c.maxAxis();
      };
      return h;
    }();
    c.default = h;
    b.exports = c.default;
  }, {
    "../value-types": 251,
    "./enums": 140
  }],
  149: [function (a, b, c) {
    "use strict";

    c.__esModule = true;
    c.default = undefined;
    var m = d(a("../value-types/vec3"));
    var f = d(a("./enums"));
    function d(b) {
      if (b && b.__esModule) {
        return b;
      } else {
        return {
          default: b
        };
      }
    }
    var e = function () {
      function k(g, b, d, e, h, i, a, j, c) {
        this.a = undefined;
        this.b = undefined;
        this.c = undefined;
        this._type = undefined;
        this.a = new m.default(g, b, d);
        this.b = new m.default(e, h, i);
        this.c = new m.default(a, j, c);
        this._type = f.default.SHAPE_TRIANGLE;
      }
      k.create = function (b, d, e, f, g, h, i, a, j) {
        return new k(b, d, e, f, g, h, i, a, j);
      };
      k.clone = function (b) {
        return new k(b.a.x, b.a.y, b.a.z, b.b.x, b.b.y, b.b.z, b.c.x, b.c.y, b.c.z);
      };
      k.copy = function (c, a) {
        m.default.copy(c.a, a.a);
        m.default.copy(c.b, a.b);
        m.default.copy(c.c, a.c);
        return c;
      };
      k.fromPoints = function (e, a, b, c) {
        m.default.copy(e.a, a);
        m.default.copy(e.b, b);
        m.default.copy(e.c, c);
        return e;
      };
      k.set = function (k, b, d, e, f, g, h, i, a, j) {
        k.a.x = b;
        k.a.y = d;
        k.a.z = e;
        k.b.x = f;
        k.b.y = g;
        k.b.z = h;
        k.c.x = i;
        k.c.y = a;
        k.c.z = j;
        return k;
      };
      return k;
    }();
    c.default = e;
    b.exports = c.default;
  }, {
    "../value-types/vec3": 261,
    "./enums": 140
  }],
  150: [function (d, a) {
    "use strict";

    var b = cc.Class({
      name: "cc.GraphicsPoint",
      extends: cc.Vec2,
      ctor: function () {
        this.reset();
      },
      reset: function () {
        this.dx = 0;
        this.dy = 0;
        this.dmx = 0;
        this.dmy = 0;
        this.flags = 0;
        this.len = 0;
      }
    });
    cc.GraphicsPoint = a.exports = b;
  }, {}],
  151: [function (c, b) {
    "use strict";

    var d = c("../components/CCRenderComponent");
    var e = c("../assets/material/CCMaterial");
    var f = c("./types");
    var g = f.PointFlags;
    var h = f.LineCap;
    var i = f.LineJoin;
    var a = cc.Class({
      name: "cc.Graphics",
      extends: d,
      editor: false,
      ctor: function () {
        this._impl = new a._Impl(this);
      },
      properties: {
        _lineWidth: 2,
        _strokeColor: cc.Color.BLACK,
        _lineJoin: i.MITER,
        _lineCap: h.BUTT,
        _fillColor: cc.Color.WHITE,
        _miterLimit: 10,
        lineWidth: {
          get: function () {
            return this._lineWidth;
          },
          set: function (b) {
            this._lineWidth = b;
            this._impl.lineWidth = b;
          }
        },
        lineJoin: {
          get: function () {
            return this._lineJoin;
          },
          set: function (b) {
            this._lineJoin = b;
            this._impl.lineJoin = b;
          },
          type: i
        },
        lineCap: {
          get: function () {
            return this._lineCap;
          },
          set: function (b) {
            this._lineCap = b;
            this._impl.lineCap = b;
          },
          type: h
        },
        strokeColor: {
          get: function () {
            return this._strokeColor;
          },
          set: function (b) {
            this._impl.strokeColor = this._strokeColor = cc.color(b);
          }
        },
        fillColor: {
          get: function () {
            return this._fillColor;
          },
          set: function (b) {
            this._impl.fillColor = this._fillColor = cc.color(b);
          }
        },
        miterLimit: {
          get: function () {
            return this._miterLimit;
          },
          set: function (b) {
            this._miterLimit = b;
            this._impl.miterLimit = b;
          }
        }
      },
      statics: {
        LineJoin: i,
        LineCap: h,
        PointFlags: g
      },
      onRestore: function () {
        if (!this._impl) {
          this._impl = new a._Impl(this);
        }
      },
      onDestroy: function () {
        this.clear(true);
        this._super();
        this._impl = null;
      },
      _getDefaultMaterial: function () {
        return e.getBuiltinMaterial("2d-graphics");
      },
      _updateMaterial: function () {
        var b = this._materials[0];
        if (b) {
          if (b.getDefine("CC_USE_MODEL") !== undefined) {
            b.define("CC_USE_MODEL", true);
          }
          if (b.getDefine("CC_SUPPORT_standard_derivatives") !== undefined && cc.sys.glExtension("OES_standard_derivatives")) {
            b.define("CC_SUPPORT_standard_derivatives", true);
          }
        }
      },
      moveTo: function (c, a) {
        this._impl.moveTo(c, a);
      },
      lineTo: function (c, a) {
        this._impl.lineTo(c, a);
      },
      bezierCurveTo: function (g, a, b, c, d, e) {
        this._impl.bezierCurveTo(g, a, b, c, d, e);
      },
      quadraticCurveTo: function (e, a, b, c) {
        this._impl.quadraticCurveTo(e, a, b, c);
      },
      arc: function (g, a, b, c, d, e) {
        this._impl.arc(g, a, b, c, d, e);
      },
      ellipse: function (e, a, b, c) {
        this._impl.ellipse(e, a, b, c);
      },
      circle: function (d, a, b) {
        this._impl.circle(d, a, b);
      },
      rect: function (e, a, b, c) {
        this._impl.rect(e, a, b, c);
      },
      roundRect: function (f, a, b, c, d) {
        this._impl.roundRect(f, a, b, c, d);
      },
      fillRect: function (e, a, b, c) {
        this.rect(e, a, b, c);
        this.fill();
      },
      clear: function (b) {
        this._impl.clear(b);
        if (this._assembler) {
          this._assembler.clear(b);
        }
      },
      close: function () {
        this._impl.close();
      },
      stroke: function () {
        if (!this._assembler) {
          this._resetAssembler();
        }
        this._assembler.stroke(this);
      },
      fill: function () {
        if (!this._assembler) {
          this._resetAssembler();
        }
        this._assembler.fill(this);
      }
    });
    cc.Graphics = b.exports = a;
    cc.Graphics.Types = f;
    cc.Graphics.Helper = c("./helper");
  }, {
    "../assets/material/CCMaterial": 76,
    "../components/CCRenderComponent": 109,
    "./helper": 152,
    "./types": 154
  }],
  152: [function (e, b) {
    "use strict";

    var d = e("./types").PointFlags;
    var f = Math.PI;
    var m = Math.min;
    var j = Math.max;
    var k = Math.cos;
    var n = Math.sin;
    var p = Math.abs;
    var l = Math.sign;
    var o = 0.5522847493;
    cc.GraphicsHelper = b.exports = {
      arc: function (a, b, c, d, e, g, h) {
        var i;
        var l;
        var o;
        var q = 0;
        var v = 0;
        var x = 0;
        var y = 0;
        var z = 0;
        var A = 0;
        var C = 0;
        var E = 0;
        var M = 0;
        var Q = 0;
        var R = 0;
        var S = 0;
        var T = 0;
        v = g - e;
        if (h = h || false) {
          if (p(v) >= f * 2) {
            v = f * 2;
          } else {
            for (; v < 0;) {
              v += f * 2;
            }
          }
        } else if (p(v) >= f * 2) {
          v = -f * 2;
        } else {
          for (; v > 0;) {
            v -= f * 2;
          }
        }
        o = j(1, m(p(v) / (f * 0.5) + 0.5, 5)) | 0;
        x = p(4 / 3 * (1 - k(i = v / o / 2)) / n(i));
        if (!h) {
          x = -x;
        }
        l = 0;
        for (; l <= o; l++) {
          A = b + (y = k(q = e + v * (l / o))) * d;
          C = c + (z = n(q)) * d;
          E = -z * d * x;
          M = y * d * x;
          if (l === 0) {
            a.moveTo(A, C);
          } else {
            a.bezierCurveTo(Q + S, R + T, A - E, C - M, A, C);
          }
          Q = A;
          R = C;
          S = E;
          T = M;
        }
      },
      ellipse: function (f, a, b, c, d) {
        f.moveTo(a - c, b);
        f.bezierCurveTo(a - c, b + d * o, a - c * o, b + d, a, b + d);
        f.bezierCurveTo(a + c * o, b + d, a + c, b + d * o, a + c, b);
        f.bezierCurveTo(a + c, b - d * o, a + c * o, b - d, a, b - d);
        f.bezierCurveTo(a - c * o, b - d, a - c, b - d * o, a - c, b);
        f.close();
      },
      roundRect: function (c, b, d, e, f, g) {
        if (g < 0.1) {
          c.rect(b, d, e, f);
        } else {
          var h = m(g, p(e) * 0.5) * l(e);
          var a = m(g, p(f) * 0.5) * l(f);
          c.moveTo(b, d + a);
          c.lineTo(b, d + f - a);
          c.bezierCurveTo(b, d + f - a * (1 - o), b + h * (1 - o), d + f, b + h, d + f);
          c.lineTo(b + e - h, d + f);
          c.bezierCurveTo(b + e - h * (1 - o), d + f, b + e, d + f - a * (1 - o), b + e, d + f - a);
          c.lineTo(b + e, d + a);
          c.bezierCurveTo(b + e, d + a * (1 - o), b + e - h * (1 - o), d, b + e - h, d);
          c.lineTo(b + h, d);
          c.bezierCurveTo(b + h * (1 - o), d, b, d + a * (1 - o), b, d + a);
          c.close();
        }
      },
      tesselateBezier: function m(b, c, e, f, g, i, a, j, k, h, l) {
        var n;
        var o;
        var q;
        var v;
        var w;
        var x;
        var y;
        var z;
        var A;
        var C;
        var E;
        var M;
        var Q;
        var R;
        var S;
        var T;
        if (!(h > 10)) {
          w = (i + j) * 0.5;
          x = (a + k) * 0.5;
          y = ((n = (c + f) * 0.5) + (q = (f + i) * 0.5)) * 0.5;
          z = ((o = (e + g) * 0.5) + (v = (g + a) * 0.5)) * 0.5;
          if (((S = p((f - j) * (R = k - e) - (g - k) * (Q = j - c))) + (T = p((i - j) * R - (a - k) * Q))) * (S + T) < b._tessTol * (Q * Q + R * R)) {
            b._addPoint(j, k, l === 0 ? l | d.PT_BEVEL : l);
          } else {
            m(b, c, e, n, o, y, z, E = (y + (A = (q + w) * 0.5)) * 0.5, M = (z + (C = (v + x) * 0.5)) * 0.5, h + 1, 0);
            m(b, E, M, A, C, w, x, j, k, h + 1, l);
          }
        }
      }
    };
  }, {
    "./types": 154
  }],
  153: [function (b) {
    "use strict";

    b("./graphics");
    b("./graphics-point");
    b("./helper");
  }, {
    "./graphics": 151,
    "./graphics-point": 150,
    "./helper": 152
  }],
  154: [function (f, a) {
    "use strict";

    var b = cc.Enum({
      BUTT: 0,
      ROUND: 1,
      SQUARE: 2
    });
    var c = cc.Enum({
      BEVEL: 0,
      ROUND: 1,
      MITER: 2
    });
    var d = cc.Enum({
      PT_CORNER: 1,
      PT_LEFT: 2,
      PT_BEVEL: 4,
      PT_INNERBEVEL: 8
    });
    a.exports = {
      LineCap: b,
      LineJoin: c,
      PointFlags: d
    };
  }, {}],
  155: [function (b) {
    "use strict";

    b("./platform");
    b("./assets");
    b("./CCNode");
    b("./CCPrivateNode");
    b("./CCScene");
    b("./components");
    b("./graphics");
    b("./collider");
    b("./collider/CCIntersection");
    b("./physics");
    b("./camera/CCCamera");
    b("./geom-utils");
    b("./mesh");
    b("./3d");
    b("./base-ui/CCWidgetManager");
  }, {
    "./3d": undefined,
    "./CCNode": 26,
    "./CCPrivateNode": 27,
    "./CCScene": 28,
    "./assets": 74,
    "./base-ui/CCWidgetManager": 85,
    "./camera/CCCamera": 86,
    "./collider": 94,
    "./collider/CCIntersection": 92,
    "./components": 127,
    "./geom-utils": 142,
    "./graphics": 153,
    "./mesh": 158,
    "./physics": undefined,
    "./platform": 180
  }],
  156: [function (f, b) {
    "use strict";

    var p = g(f("../../renderer/core/input-assembler"));
    var v = g(f("../../renderer/gfx"));
    var j = f("./mesh-data");
    function g(b) {
      if (b && b.__esModule) {
        return b;
      } else {
        return {
          default: b
        };
      }
    }
    var k = f("../renderer");
    var e = f("../event/event-target");
    function a(d, a, b) {
      d[a] = b._val;
    }
    function i(d, a, b) {
      d[a] = b.x;
      d[a + 1] = b.y;
    }
    function c(d, a, b) {
      d[a] = b.x;
      d[a + 1] = b.y;
      d[a + 2] = b.z;
    }
    var l;
    var m = {
      5120: "getInt8",
      5121: "getUint8",
      5122: "getInt16",
      5123: "getUint16",
      5124: "getInt32",
      5125: "getUint32",
      5126: "getFloat32"
    };
    var s = {
      5120: "setInt8",
      5121: "setUint8",
      5122: "setInt16",
      5123: "setUint16",
      5124: "setInt32",
      5125: "setUint32",
      5126: "setFloat32"
    };
    l = new ArrayBuffer(2);
    new DataView(l).setInt16(0, 256, true);
    var q = new Int16Array(l)[0] === 256;
    var n = cc.Class({
      name: "cc.Mesh",
      extends: cc.Asset,
      mixins: [e],
      properties: {
        _nativeAsset: {
          override: true,
          get: function () {
            return this._buffer;
          },
          set: function (b) {
            this._buffer = ArrayBuffer.isView(b) ? b.buffer : b;
            this.initWithBuffer();
          }
        },
        _vertexBundles: {
          default: null,
          type: j.VertexBundle
        },
        _primitives: {
          default: null,
          Primitive: j.Primitive
        },
        _minPos: cc.v3(),
        _maxPos: cc.v3(),
        subMeshes: {
          get: function () {
            return this._subMeshes;
          },
          set: function (b) {
            this._subMeshes = b;
          }
        },
        subDatas: {
          get: function () {
            return this._subDatas;
          }
        }
      },
      ctor: function () {
        this._subMeshes = [];
        this._subDatas = [];
        this.loaded = false;
      },
      initWithBuffer: function () {
        this._subMeshes.length = 0;
        for (var c = this._primitives, a = 0; a < c.length; a++) {
          var d = c[a];
          var e = d.data;
          var f = new Uint8Array(this._buffer, e.offset, e.length);
          var h = this._vertexBundles[d.vertexBundleIndices[0]];
          var i = h.data;
          var l = new v.default.VertexFormat(h.formats);
          var m = new Uint8Array(this._buffer, i.offset, i.length);
          var o = this._canVertexFormatBatch(l);
          var s = new j.MeshData();
          s.vData = m;
          s.iData = f;
          s.vfm = l;
          s.offset = i.offset;
          s.canBatch = o;
          this._subDatas.push(s);
          var u = new v.default.VertexBuffer(k.device, l, v.default.USAGE_STATIC, m);
          var C = new v.default.IndexBuffer(k.device, d.indexUnit, v.default.USAGE_STATIC, f);
          this._subMeshes.push(new p.default(u, C));
        }
        this.loaded = true;
        this.emit("load");
      },
      _canVertexFormatBatch: function (c) {
        var a = c._attr2el[v.default.ATTR_POSITION];
        return !a || a.type === v.default.ATTR_TYPE_FLOAT32 && c._bytes % 4 == 0;
      },
      init: function (i, a, b, l) {
        if (b === undefined) {
          b = false;
        }
        if (l === undefined) {
          l = 0;
        }
        var m = new Uint8Array(i._bytes * a);
        var f = new j.MeshData();
        f.vData = m;
        f.vfm = i;
        f.vDirty = true;
        f.canBatch = this._canVertexFormatBatch(i);
        var c = new v.default.VertexBuffer(k.device, i, b ? v.default.USAGE_DYNAMIC : v.default.USAGE_STATIC, m);
        f.vb = c;
        this._subMeshes[l] = new p.default(f.vb);
        var g = this._subDatas[l];
        if (g) {
          if (g.vb) {
            g.vb.destroy();
          }
          if (g.ib) {
            g.ib.destroy();
          }
        }
        this._subDatas[l] = f;
        this.loaded = true;
        this.emit("load");
        this.emit("init-format");
      },
      setVertices: function (d, b, h) {
        h = h || 0;
        var k = this._subDatas[h];
        var j = k.vfm.element(d);
        if (j) {
          var l;
          var m = typeof b[0] == "number";
          var n = j.num;
          var o = m ? b.length / n | 0 : b.length;
          if (k.vData.byteLength < o * j.stride) {
            k.setVData(new Uint8Array(o * k.vfm._bytes));
          }
          var q = 4;
          if (d === v.default.ATTR_COLOR) {
            if (m) {
              l = k.getVData();
              q = 1;
            } else {
              l = k.getVData(Uint32Array);
            }
          } else {
            l = k.getVData(Float32Array);
          }
          var s = j.stride / q;
          var t = j.offset / q;
          if (m) {
            for (var u = 0, w = b.length / n; u < w; u++) {
              for (var x = u * n, y = u * s + t, z = 0; z < n; z++) {
                l[y + z] = b[x + z];
              }
            }
          } else {
            var A;
            A = d === v.default.ATTR_COLOR ? a : n === 2 ? i : c;
            for (var E = 0, H = b.length; E < H; E++) {
              A(l, E * s + t, b[E]);
            }
          }
          k.vDirty = true;
        }
      },
      setIndices: function (c, a, e) {
        a = a || 0;
        var d = c;
        if (c instanceof Uint16Array) {
          d = new Uint8Array(c.buffer, c.byteOffset, c.byteLength);
        } else if (Array.isArray(c)) {
          d = new Uint16Array(c);
          d = new Uint8Array(d.buffer, d.byteOffset, d.byteLength);
        }
        var j = e ? v.default.USAGE_DYNAMIC : v.default.USAGE_STATIC;
        var g = this._subDatas[a];
        if (g.ib) {
          g.iData = d;
          g.iDirty = true;
        } else {
          g.iData = d;
          var h = new v.default.IndexBuffer(k.device, v.default.INDEX_FMT_UINT16, j, d, d.byteLength / v.default.IndexBuffer.BYTES_PER_INDEX[v.default.INDEX_FMT_UINT16]);
          g.ib = h;
          this._subMeshes[a]._indexBuffer = g.ib;
        }
      },
      setPrimitiveType: function (c, a) {
        a = a || 0;
        if (this._subMeshes[a]) {
          this._subMeshes[a]._primitiveType = c;
        }
      },
      clear: function () {
        this._subMeshes.length = 0;
        for (var e = this._subDatas, a = 0, g = e.length; a < g; a++) {
          var c = e[a].vb;
          if (c) {
            c.destroy();
          }
          var h = e[a].ib;
          if (h) {
            h.destroy();
          }
        }
        e.length = 0;
      },
      setBoundingBox: function (c, a) {
        this._minPos = c;
        this._maxPos = a;
      },
      destroy: function () {
        this.clear();
      },
      _uploadData: function () {
        for (var a = this._subDatas, b = 0, e = a.length; b < e; b++) {
          var d = a[b];
          if (d.vDirty) {
            var k = d.vb;
            var l = d.vData;
            k.update(0, l);
            d.vDirty = false;
          }
          if (d.iDirty) {
            var m = d.ib;
            var n = d.iData;
            m.update(0, n);
            d.iDirty = false;
          }
        }
      },
      _getAttrMeshData: function (a, b) {
        var f = this._subDatas[a];
        if (!f) {
          return [];
        }
        var e = f.vfm;
        var g = e.element(b);
        if (!g) {
          return [];
        }
        if (!f.attrDatas) {
          f.attrDatas = {};
        }
        var i = f.attrDatas;
        var j = i[b];
        if (j) {
          return j;
        }
        j = i[b] = [];
        for (var k = f.vData, o = new DataView(k.buffer, k.byteOffset, k.byteLength), r = g.stride, c = g.offset, l = g.num, h = g.bytes / l, s = m[g.type], d = k.byteLength / e._bytes, p = 0; p < d; p++) {
          for (var t = p * r + c, y = 0; y < l; y++) {
            var z = o[s](t + y * h, q);
            j.push(z);
          }
        }
        return j;
      },
      copyAttribute: function (m, b, d, e, i) {
        var j = false;
        var o = this._subDatas[m];
        if (!o) {
          return j;
        }
        var n = o.vfm;
        var a = n.element(b);
        if (!a) {
          return j;
        }
        var w = s[a.type];
        if (!w) {
          return j;
        }
        var c = this._getAttrMeshData(m, b);
        var l = o.vData.byteLength / n._bytes;
        var h = a.bytes / a.num;
        if (c.length > 0) {
          for (var r = new DataView(d, i), f = e, p = a.num, t = 0; t < l; ++t) {
            for (var y = t * p, A = 0; A < p; ++A) {
              var B = y + A;
              var C = f * t + h * A;
              r[w](C, c[B], q);
            }
          }
          j = true;
        }
        return j;
      },
      copyIndices: function (c, b) {
        var d = this._subDatas[c];
        if (!d) {
          return false;
        }
        for (var e = d.iData, f = e.length / 2, g = new DataView(e.buffer, e.byteOffset, e.byteLength), h = m[v.default.INDEX_FMT_UINT8], a = 0; a < f; ++a) {
          b[a] = g[h](a * 2);
        }
        return true;
      }
    });
    cc.Mesh = b.exports = n;
  }, {
    "../../renderer/core/input-assembler": 272,
    "../../renderer/gfx": 282,
    "../event/event-target": 134,
    "../renderer": 193,
    "./mesh-data": 159
  }],
  157: [function (m, b) {
    "use strict";

    var n = f(m("../../renderer/gfx"));
    f(m("../../renderer/core/input-assembler"));
    var d = f(m("../geom-utils/aabb"));
    f(m("../value-types/vec3"));
    f(m("../value-types/mat4"));
    var e = f(m("../assets/material/material-variant"));
    function f(b) {
      if (b && b.__esModule) {
        return b;
      } else {
        return {
          default: b
        };
      }
    }
    var g = m("../components/CCRenderComponent");
    var i = m("./CCMesh");
    var a = m("../renderer/render-flow");
    m("../renderer");
    var j = m("../assets/material/CCMaterial");
    var c = cc.Enum({
      OFF: 0,
      ON: 1
    });
    var k = cc.Class({
      name: "cc.MeshRenderer",
      extends: g,
      editor: false,
      properties: {
        _mesh: {
          default: null,
          type: i
        },
        _receiveShadows: false,
        _shadowCastingMode: c.OFF,
        _enableAutoBatch: false,
        mesh: {
          get: function () {
            return this._mesh;
          },
          set: function (b) {
            if (this._mesh !== b) {
              this._setMesh(b);
              if (b) {
                this.markForRender(true);
                this.node._renderFlag |= a.FLAG_TRANSFORM;
              } else {
                this.disableRender();
              }
            }
          },
          type: i,
          animatable: false
        },
        textures: {
          default: [],
          type: cc.Texture2D,
          visible: false
        },
        receiveShadows: {
          get: function () {
            return this._receiveShadows;
          },
          set: function (b) {
            this._receiveShadows = b;
            this._updateReceiveShadow();
          },
          animatable: false
        },
        shadowCastingMode: {
          get: function () {
            return this._shadowCastingMode;
          },
          set: function (b) {
            this._shadowCastingMode = b;
            this._updateCastShadow();
          },
          type: c,
          animatable: false
        },
        enableAutoBatch: {
          get: function () {
            return this._enableAutoBatch;
          },
          set: function (b) {
            this._enableAutoBatch = b;
          }
        }
      },
      statics: {
        ShadowCastingMode: c
      },
      ctor: function () {
        this._boundingBox = cc.geomUtils && new d.default();
      },
      onEnable: function () {
        var b = this;
        this._super();
        if (this._mesh && !this._mesh.loaded) {
          this.disableRender();
          this._mesh.once("load", function () {
            if (b.isValid) {
              b._setMesh(b._mesh);
              b.markForRender(true);
            }
          });
          cc.assetManager.postLoadNative(this._mesh);
        } else {
          this._setMesh(this._mesh);
        }
        this._updateRenderNode();
        this._updateMaterial();
      },
      onDestroy: function () {
        this._setMesh(null);
        cc.pool.assembler.put(this._assembler);
      },
      _updateRenderNode: function () {
        this._assembler.setRenderNode(this.node);
      },
      _setMesh: function (b) {
        if (cc.geomUtils && b) {
          d.default.fromPoints(this._boundingBox, b._minPos, b._maxPos);
        }
        if (this._mesh) {
          this._mesh.off("init-format", this._updateMeshAttribute, this);
        }
        if (b) {
          b.on("init-format", this._updateMeshAttribute, this);
        }
        this._mesh = b;
        if (this._assembler) {
          this._assembler._worldDatas = {};
        }
        this._updateMeshAttribute();
      },
      _getDefaultMaterial: function () {
        return j.getBuiltinMaterial("unlit");
      },
      _validateRender: function () {
        var b = this._mesh;
        if (!(b && b._subDatas.length > 0)) {
          this.disableRender();
        }
      },
      _updateMaterial: function () {
        var f = this.textures;
        if (f && f.length > 0) {
          for (var a = this._getDefaultMaterial(), b = 0; b < f.length; b++) {
            var g = this._materials[b];
            if (!(g && g._uuid !== a._uuid)) {
              if (!g) {
                g = e.default.create(a, this);
                this.setMaterial(b, g);
              }
              g.setProperty("diffuseTexture", f[b]);
            }
          }
        }
        this._updateReceiveShadow();
        this._updateCastShadow();
        this._updateMeshAttribute();
      },
      _updateReceiveShadow: function () {
        for (var c = this.getMaterials(), a = 0; a < c.length; a++) {
          c[a].define("CC_USE_SHADOW_MAP", this._receiveShadows, undefined, true);
        }
      },
      _updateCastShadow: function () {
        for (var d = this.getMaterials(), a = 0; a < d.length; a++) {
          d[a].define("CC_CASTING_SHADOW", this._shadowCastingMode === c.ON, undefined, true);
        }
      },
      _updateMeshAttribute: function () {
        var f = this._mesh && this._mesh.subDatas;
        if (f) {
          for (var a = this.getMaterials(), b = 0; b < a.length && f[b]; b++) {
            var g = f[b].vfm;
            var h = a[b];
            h.define("CC_USE_ATTRIBUTE_COLOR", !!g.element(n.default.ATTR_COLOR), undefined, true);
            h.define("CC_USE_ATTRIBUTE_UV0", !!g.element(n.default.ATTR_UV0), undefined, true);
            h.define("CC_USE_ATTRIBUTE_NORMAL", !!g.element(n.default.ATTR_NORMAL), undefined, true);
            h.define("CC_USE_ATTRIBUTE_TANGENT", !!g.element(n.default.ATTR_TANGENT), undefined, true);
          }
        }
      },
      _checkBacth: function () {}
    });
    cc.MeshRenderer = b.exports = k;
  }, {
    "../../renderer/core/input-assembler": 272,
    "../../renderer/gfx": 282,
    "../assets/material/CCMaterial": 76,
    "../assets/material/material-variant": 83,
    "../components/CCRenderComponent": 109,
    "../geom-utils/aabb": 138,
    "../renderer": 193,
    "../renderer/render-flow": 194,
    "../value-types/mat4": 253,
    "../value-types/vec3": 261,
    "./CCMesh": 156
  }],
  158: [function (b) {
    "use strict";

    b("./CCMesh");
    b("./CCMeshRenderer");
    b("./mesh-renderer");
  }, {
    "./CCMesh": 156,
    "./CCMeshRenderer": 157,
    "./mesh-renderer": 160
  }],
  159: [function (k, b, d) {
    "use strict";

    d.__esModule = true;
    d.BufferRange = undefined;
    d.MeshData = j;
    d.VertexFormat = d.VertexBundle = d.Primitive = undefined;
    var e;
    var l = (e = k("../../renderer/gfx")) && e.__esModule ? e : {
      default: e
    };
    var g = cc.Class({
      name: "cc.BufferRange",
      properties: {
        offset: 0,
        length: 0
      }
    });
    d.BufferRange = g;
    var h = cc.Class({
      name: "cc.mesh.VertexFormat",
      properties: {
        name: "",
        type: -1,
        num: -1,
        normalize: false
      }
    });
    d.VertexFormat = h;
    var i = cc.Class({
      name: "cc.mesh.VertexBundle",
      properties: {
        data: {
          default: null,
          type: g
        },
        formats: {
          default: [],
          type: h
        },
        verticesCount: 0
      }
    });
    d.VertexBundle = i;
    var a = cc.Class({
      name: "cc.mesh.Primitive",
      properties: {
        vertexBundleIndices: {
          default: [],
          type: cc.Float
        },
        data: {
          default: null,
          type: g
        },
        indexUnit: l.default.INDEX_FMT_UINT16,
        topology: l.default.PT_TRIANGLES
      }
    });
    function j() {
      this.vData = null;
      this.float32VData = null;
      this.uint32VData = null;
      this.iData = null;
      this.uint16IData = null;
      this.vfm = null;
      this.offset = 0;
      this.vb = null;
      this.ib = null;
      this.vDirty = false;
      this.iDirty = false;
      this.enable = true;
    }
    d.Primitive = a;
    j.prototype.setVData = function (b) {
      this.vData = b;
      this.float32VData = null;
      this.uint32VData = null;
    };
    j.prototype.getVData = function (b) {
      if (b === Float32Array) {
        if (!this.float32VData) {
          this.float32VData = new Float32Array(this.vData.buffer, this.vData.byteOffset, this.vData.byteLength / 4);
        }
        return this.float32VData;
      } else if (b === Uint32Array) {
        if (!this.uint32VData) {
          this.uint32VData = new Uint32Array(this.vData.buffer, this.vData.byteOffset, this.vData.byteLength / 4);
        }
        return this.uint32VData;
      } else {
        return this.vData;
      }
    };
    j.prototype.getIData = function (b) {
      if (b === Uint16Array) {
        if (!this.uint16IData) {
          this.uint16IData = new Uint16Array(this.iData.buffer, this.iData.byteOffset, this.iData.byteLength / 2);
        }
        return this.uint16IData;
      } else {
        return this.iData;
      }
    };
  }, {
    "../../renderer/gfx": 282
  }],
  160: [function (h, b, d) {
    "use strict";

    d.__esModule = true;
    d.default = undefined;
    var e = f(h("../renderer/assembler"));
    var p = f(h("../../renderer/gfx"));
    var i = f(h("../value-types/vec3"));
    function f(b) {
      if (b && b.__esModule) {
        return b;
      } else {
        return {
          default: b
        };
      }
    }
    function j(c, a) {
      return (j = Object.setPrototypeOf || function (c, a) {
        c.__proto__ = a;
        return c;
      })(c, a);
    }
    var g = h("./CCMeshRenderer");
    var k = new i.default();
    var a = function (e) {
      var a;
      var b;
      function h() {
        return e.apply(this, arguments) || this;
      }
      b = e;
      (a = h).prototype = Object.create(b.prototype);
      a.prototype.constructor = a;
      j(a, b);
      var f = h.prototype;
      f.init = function (b) {
        e.prototype.init.call(this, b);
        this._worldDatas = {};
        this._renderNode = null;
      };
      f.setRenderNode = function (b) {
        this._renderNode = b;
      };
      f.fillBuffers = function (c, b) {
        if (c.mesh) {
          c.mesh._uploadData();
          for (var d = b.cullingMask === c.node._cullingMask, e = c.enableAutoBatch, f = c._materials, g = c.mesh._subMeshes, h = c.mesh.subDatas, a = 0; a < g.length; a++) {
            var i = g[a];
            var j = h[a];
            var l = f[a] || f[0];
            if (e && j.canBatch && i._primitiveType === p.default.PT_TRIANGLES) {
              if (!(d && l.getHash() === b.material.getHash())) {
                b._flush();
              }
              b.material = l;
              b.cullingMask = c.node._cullingMask;
              b.node = b._dummyNode;
              this._fillBuffer(c, j, b, a);
            } else {
              b._flush();
              b.material = l;
              b.cullingMask = c.node._cullingMask;
              b.node = this._renderNode;
              b._flushIA(i);
            }
          }
        }
      };
      f._fillBuffer = function (r, b, g, e) {
        var i = b.getVData(Float32Array);
        var j = b.vfm;
        var k = i.byteLength / j._bytes | 0;
        var m = b.getIData(Uint16Array);
        var a = m.length;
        var n = g.getBuffer("mesh", j);
        var c = n.request(k, a);
        var l = c.indiceOffset;
        var h = c.byteOffset >> 2;
        var o = c.vertexOffset;
        var f = n._vData;
        var d = n._iData;
        if (!(!g.worldMatDirty && this._worldDatas[e])) {
          this._updateWorldVertices(e, k, i, j, r.node._worldMatrix);
        }
        f.set(this._worldDatas[e], h);
        for (var q = 0; q < a; q++) {
          d[l + q] = o + m[q];
        }
      };
      f._updateWorldVertices = function (d, b, g, e, j) {
        var l = this._worldDatas[d];
        if (!l) {
          (l = this._worldDatas[d] = new Float32Array(g.length)).set(g);
        }
        for (var m = e._bytes / 4, n = e._elements, c = 0, o = n.length; c < o; c++) {
          var q = n[c];
          var r = q.offset / 4;
          if (q.name === p.default.ATTR_POSITION || q.name === p.default.ATTR_NORMAL) {
            for (var u = q.name === p.default.ATTR_NORMAL ? i.default.transformMat4Normal : i.default.transformMat4, v = 0; v < b; v++) {
              var y = v * m + r;
              k.x = g[y];
              k.y = g[y + 1];
              k.z = g[y + 2];
              u(k, k, j);
              l[y] = k.x;
              l[y + 1] = k.y;
              l[y + 2] = k.z;
            }
          }
        }
      };
      f._drawDebugDatas = function (a, b, c) {
        var d = a._debugDatas[c];
        if (d) {
          for (var e = 0; e < d.length; e++) {
            var i = d[e];
            if (i) {
              var j = i.material;
              b.material = j;
              b._flushIA(i.ia);
            }
          }
        }
      };
      return h;
    }(e.default);
    d.default = a;
    e.default.register(g, a);
    b.exports = d.default;
  }, {
    "../../renderer/gfx": 282,
    "../renderer/assembler": 190,
    "../value-types/vec3": 261,
    "./CCMeshRenderer": 157
  }],
  161: [function (o, b) {
    "use strict";

    var g = o("./component-scheduler");
    var j = o("./platform/CCObject").Flags;
    var e = o("./platform/js");
    var k = j.IsPreloadStarted;
    var m = j.IsOnLoadStarted;
    var p = j.IsOnLoadCalled;
    var a = j.Deactivating;
    var q = cc.Class({
      extends: g.LifeCycleInvoker,
      add: function (b) {
        this._zero.array.push(b);
      },
      remove: function (b) {
        this._zero.fastRemove(b);
      },
      cancelInactive: function (b) {
        g.LifeCycleInvoker.stableRemoveInactive(this._zero, b);
      },
      invoke: function () {
        this._invoke(this._zero);
        this._zero.array.length = 0;
      }
    });
    var c = g.createInvokeImpl("c.__preload();");
    var i = g.createInvokeImpl("c.onLoad();c._objFlags|=" + p, false, p);
    var h = new e.Pool(4);
    function l(d, a, b) {
      if (a) {
        d._removeComponent(a);
      } else {
        e.array.removeAt(d._components, b);
      }
    }
    function f() {
      this._activatingStack = [];
    }
    h.get = function () {
      var d = this._get() || {
        preload: new q(c),
        onLoad: new g.OneOffInvoker(i),
        onEnable: new g.OneOffInvoker(g.invokeOnEnable)
      };
      d.preload._zero.i = -1;
      var a = d.onLoad;
      a._zero.i = -1;
      a._neg.i = -1;
      a._pos.i = -1;
      (a = d.onEnable)._zero.i = -1;
      a._neg.i = -1;
      a._pos.i = -1;
      return d;
    };
    var d = cc.Class({
      ctor: f,
      reset: f,
      _activateNodeRecursively: function (f, b, c, d) {
        if (!(f._objFlags & a)) {
          f._activeInHierarchy = true;
          for (var e = f._components.length, h = 0; h < e; ++h) {
            var n = f._components[h];
            if (n instanceof cc.Component) {
              this.activateComp(n, b, c, d);
            } else {
              l(f, n, h);
              --h;
              --e;
            }
          }
          f._childArrivalOrder = f._children.length;
          for (var o = 0, p = f._children.length; o < p; ++o) {
            var m = f._children[o];
            m._localZOrder = m._localZOrder & 4294901760 | o + 1;
            if (m._active) {
              this._activateNodeRecursively(m, b, c, d);
            }
          }
          f._onPostActivated(true);
        }
      },
      _deactivateNodeRecursively: function (i) {
        i._objFlags |= a;
        i._activeInHierarchy = false;
        for (var b = i._components.length, c = 0; c < b; ++c) {
          var j = i._components[c];
          if (j._enabled && (cc.director._compScheduler.disableComp(j), i._activeInHierarchy)) {
            i._objFlags &= ~a;
            return;
          }
        }
        for (var k = 0, l = i._children.length; k < l; ++k) {
          var g = i._children[k];
          if (g._activeInHierarchy && (this._deactivateNodeRecursively(g), i._activeInHierarchy)) {
            i._objFlags &= ~a;
            return;
          }
        }
        i._onPostActivated(false);
        i._objFlags &= ~a;
      },
      activateNode: function (g, a) {
        if (a) {
          var b = h.get();
          this._activatingStack.push(b);
          this._activateNodeRecursively(g, b.preload, b.onLoad, b.onEnable);
          b.preload.invoke();
          b.onLoad.invoke();
          b.onEnable.invoke();
          this._activatingStack.pop();
          h.put(b);
        } else {
          this._deactivateNodeRecursively(g);
          for (var c = this._activatingStack, d = 0; d < c.length; d++) {
            var i = c[d];
            i.preload.cancelInactive(k);
            i.onLoad.cancelInactive(m);
            i.onEnable.cancelInactive();
          }
        }
        g.emit("active-in-hierarchy-changed", g);
      },
      activateComp: function (a, b, c, d) {
        if (cc.isValid(a, true) && (a._objFlags & k || (a._objFlags |= k, a.__preload && (b ? b.add(a) : a.__preload())), a._objFlags & m || (a._objFlags |= m, a.onLoad ? c ? c.add(a) : (a.onLoad(), a._objFlags |= p) : a._objFlags |= p), a._enabled)) {
          if (!a.node._activeInHierarchy) {
            return;
          }
          cc.director._compScheduler.enableComp(a, d);
        }
      },
      destroyComp: function (a) {
        cc.director._compScheduler.disableComp(a);
        if (a.onDestroy && a._objFlags & p) {
          a.onDestroy();
        }
      },
      resetComp: false
    });
    b.exports = d;
  }, {
    "./component-scheduler": 95,
    "./platform/CCObject": 168,
    "./platform/js": 183,
    "./utils/misc": 236
  }],
  162: [function (F, j) {
    "use strict";

    var G = F("./js");
    var q = F("./CCEnum");
    var e = F("./utils");
    e.isPlainEmptyObj_DEV;
    e.cloneable_DEV;
    var H = F("./attribute");
    var z = H.DELIMETER;
    var i = F("./preprocess-class");
    F("./requiring-frame");
    var a = ["name", "extends", "mixins", "ctor", "__ctor__", "properties", "statics", "editor", "__ES6__"];
    function k(c, a) {
      if (c.indexOf(a) < 0) {
        c.push(a);
      }
    }
    var n = {
      datas: null,
      push: function (c) {
        if (this.datas) {
          this.datas.push(c);
        } else {
          this.datas = [c];
          var a = this;
          // TOLOOK
          // TOLOOK
          setTimeout(function () {
            a.init();
          }, 0);
        }
      },
      init: function () {
        var a = this.datas;
        if (a) {
          for (var b = 0; b < a.length; ++b) {
            var e = a[b];
            var i = e.cls;
            var j = e.props;
            if (typeof j == "function") {
              j = j();
            }
            var k = G.getClassName(i);
            if (j) {
              x(i, k, j, i.$super, e.mixins);
            }
          }
          this.datas = null;
        }
      }
    };
    function B(c, a) {
      k(c.__props__, a);
    }
    function c(f, a, b, c) {
      var d = c.default;
      H.setClassAttr(f, b, "default", d);
      B(f, b);
      A(f, c, 0, b);
    }
    function h(h, b, d, e, f) {
      var g = e.get;
      var a = e.set;
      var i = h.prototype;
      var c = !Object.getOwnPropertyDescriptor(i, d);
      if (g) {
        A(h, e, 0, d);
        H.setClassAttr(h, d, "serializable", false);
        if (!f) {
          G.get(i, d, g, c, c);
        }
      }
      if (a) {
        if (!f) {
          G.set(i, d, a, c, c);
        }
      }
    }
    function f(b) {
      if (typeof b == "function") {
        return b();
      } else {
        return b;
      }
    }
    function d(e, a, b) {
      for (var c in a) {
        if (!(e.hasOwnProperty(c) || b && !b(c))) {
          Object.defineProperty(e, c, G.getPropertyDescriptor(a, c));
        }
      }
    }
    function l(a, f, g, e) {
      var i;
      var o;
      var q = e.__ctor__;
      var m = e.ctor;
      var c = e.__ES6__;
      if (c) {
        i = [m];
        o = m;
      } else {
        i = q ? [q] : t(f, g, e);
        o = s(i, f, a, e);
        G.value(o, "extend", function (c) {
          c.extends = this;
          return b(c);
        }, true);
      }
      G.value(o, "__ctors__", i.length > 0 ? i : null, true);
      var l = o.prototype;
      if (f) {
        if (!c) {
          G.extend(o, f);
          l = o.prototype;
        }
        o.$super = f;
      }
      if (g) {
        for (var r = g.length - 1; r >= 0; r--) {
          var u = g[r];
          d(l, u.prototype);
          d(o, u, function (b) {
            return u.hasOwnProperty(b) && true;
          });
          if (b._isCCClass(u)) {
            d(H.getClassAttrs(o), H.getClassAttrs(u));
          }
        }
        l.constructor = o;
      }
      if (!c) {
        l.__initProps__ = p;
      }
      G.setClassName(a, o);
      return o;
    }
    function D(c, j, d, e) {
      var f = cc.Component;
      var g = cc._RF.peek();
      if (g && G.isChildClassOf(j, f)) {
        if (G.isChildClassOf(g.cls, f)) {
          return null;
        }
        c = c || g.script;
      }
      var h = l(c, j, d, e);
      if (g) {
        if (G.isChildClassOf(j, f)) {
          var a = g.uuid;
          if (a) {
            G._setClassId(a, h);
          }
          g.cls = h;
        } else if (!G.isChildClassOf(g.cls, f)) {
          g.cls = h;
        }
      }
      return h;
    }
    function o(f) {
      for (var a = G.getClassName(f), b = f.constructor, c = "new " + a + "(", g = 0; g < b.__props__.length; g++) {
        c += f[b.__props__[g]];
        if (g < b.__props__.length - 1) {
          c += ",";
        }
      }
      return c + ")";
    }
    function g(b) {
      return JSON.stringify(b).replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029");
    }
    function m(c, a) {
      for (var b = [], d = "", h = 0; h < a.length; h++) {
        var l = a[h];
        var m = l + z + "default";
        if (m in c) {
          var n;
          var s;
          n = r.test(l) ? "this." + l + "=" : "this[" + g(l) + "]=";
          var u = c[m];
          if (typeof u == "object" && u) {
            s = u instanceof cc.ValueType ? o(u) : Array.isArray(u) ? "[]" : "{}";
          } else if (typeof u == "function") {
            var v = b.length;
            b.push(u);
            s = "F[" + v + "]()";
          } else {
            s = typeof u == "string" ? g(u) : u;
          }
          d += n = n + s + ";";
        }
      }
      if (b.length === 0) {
        return Function(d);
      } else {
        return Function("F", "return (function(){" + d + "})")(b);
      }
    }
    var r = /^[A-Za-z_$][0-9A-Za-z_$]*$/;
    function p(c) {
      var a = H.getClassAttrs(c);
      var b = c.__props__;
      if (b === null) {
        n.init();
        b = c.__props__;
      }
      var f = m(a, b);
      c.prototype.__initProps__ = f;
      f.call(this);
    }
    function s(b, c, d, e) {
      var f = "return function CCClass(){";
      if (c && v(c, e)) {
        f += "this._super=null;";
      }
      f += "this.__initProps__(CCClass);";
      var j = b.length;
      if (j > 0) {
        var h = "].apply(this,arguments);";
        if (j === 1) {
          f += "CCClass.__ctors__[0" + h;
        } else {
          f += "var cs=CCClass.__ctors__;";
          for (var i = 0; i < j; i++) {
            f += "cs[" + i + h;
          }
        }
      }
      return Function(f += "}")();
    }
    function t(a, c, d) {
      for (var e, h = [], g = [a].concat(c), i = 0; i < g.length; i++) {
        var n = g[i];
        if (n) {
          for (var o = (e = n, b._isCCClass(e) ? e.__ctors__ || [] : [e]), q = 0; q < o.length; q++) {
            k(h, o[q]);
          }
        }
      }
      var r = d.ctor;
      if (r) {
        h.push(r);
      }
      return h;
    }
    var u = /\b\._super\b/;
    function v(i, b) {
      var c = false;
      for (var j in b) {
        if (!(a.indexOf(j) >= 0)) {
          var k = b[j];
          if (typeof k == "function") {
            var l = G.getPropertyDescriptor(i.prototype, j);
            if (l) {
              var m = l.value;
              if (typeof m == "function") {
                if (u.test(k)) {
                  c = true;
                  b[j] = function (e, a) {
                    return function () {
                      var b = this._super;
                      this._super = e;
                      var c = a.apply(this, arguments);
                      this._super = b;
                      return c;
                    };
                  }(m, k);
                }
                continue;
              }
            }
          }
        }
      }
      return c;
    }
    function x(f, a, b, d, e, g) {
      f.__props__ = [];
      if (d && d.__props__) {
        f.__props__ = d.__props__.slice();
      }
      if (e) {
        for (var j = 0; j < e.length; ++j) {
          var l = e[j];
          if (l.__props__) {
            f.__props__ = f.__props__.concat(l.__props__.filter(function (b) {
              return f.__props__.indexOf(b) < 0;
            }));
          }
        }
      }
      if (b) {
        i.preprocessAttrs(b, a, f, g);
        for (var p in b) {
          var q = b[p];
          if ("default" in q) {
            c(f, 0, p, q);
          } else {
            h(f, 0, p, q, g);
          }
        }
      }
      var r = H.getClassAttrs(f);
      f.__values__ = f.__props__.filter(function (b) {
        return r[b + z + "serializable"] !== false;
      });
    }
    function b(c) {
      var d = (c = c || {}).name;
      var e = c.extends;
      var f = c.mixins;
      var h = D(d, e, f, c);
      if (!d) {
        d = cc.js.getClassName(h);
      }
      h._sealed = true;
      if (e) {
        e._sealed = false;
      }
      var j = c.properties;
      if (typeof j == "function" || e && e.__props__ === null || f && f.some(function (b) {
        return b.__props__ === null;
      })) {
        n.push({
          cls: h,
          props: j,
          mixins: f
        });
        h.__props__ = h.__values__ = null;
      } else {
        x(h, d, j, e, c.mixins, c.__ES6__);
      }
      var k;
      var l = c.statics;
      if (l) {
        for (k in l) {
          h[k] = l[k];
        }
      }
      for (var o in c) {
        if (!(a.indexOf(o) >= 0)) {
          var q = c[o];
          if (i.validateMethodWithProps(q, o, d, h, e)) {
            G.value(h.prototype, o, q, true, true);
          }
        }
      }
      var t = c.editor;
      if (t) {
        cc.Component._registerEditorProps(h, t);
      }
      return h;
    }
    b._isCCClass = function (b) {
      return b && b.hasOwnProperty("__ctors__");
    };
    b._fastDefine = function (c, a, b) {
      G.setClassName(c, a);
      for (var d = a.__props__ = a.__values__ = Object.keys(b), e = H.getClassAttrs(a), f = 0; f < d.length; f++) {
        var i = d[f];
        e[i + z + "visible"] = false;
        e[i + z + "default"] = b[i];
      }
    };
    b.Attr = H;
    b.attr = H.attr;
    b.getInheritanceChain = function (c) {
      for (var d = []; c = G.getSuper(c);) {
        if (c !== Object) {
          d.push(c);
        }
      }
      return d;
    };
    var y = {
      Integer: "Number",
      Float: "Number",
      Boolean: "Boolean",
      String: "String"
    };
    function A(c, e, a, b) {
      var f = null;
      var g = "";
      function n() {
        g = b + z;
        return f = H.getClassAttrs(c);
      }
      var d = e.type;
      if (d) {
        if (y[d]) {
          (f || n())[g + "type"] = d;
        } else if (!(d === "Object")) {
          if (d === H.ScriptUuid) {
            (f || n())[g + "type"] = "Script";
            f[g + "ctor"] = cc.ScriptAsset;
          } else if (typeof d == "object") {
            if (q.isEnum(d)) {
              (f || n())[g + "type"] = "Enum";
              f[g + "enumList"] = q.getList(d);
            }
          } else if (typeof d == "function") {
            (f || n())[g + "type"] = "Object";
            f[g + "ctor"] = d;
          }
        }
      }
      function k(b, a) {
        if (b in e) {
          var c = e[b];
          if (typeof c === a) {
            (f || n())[g + b] = c;
          }
        }
      }
      if (e.editorOnly) {
        (f || n())[g + "editorOnly"] = true;
      }
      if (e.serializable === false) {
        (f || n())[g + "serializable"] = false;
      }
      k("formerlySerializedAs", "string");
      var h = e.range;
      if (h && Array.isArray(h) && h.length >= 2) {
        (f || n())[g + "min"] = h[0];
        f[g + "max"] = h[1];
        if (h.length > 2) {
          f[g + "step"] = h[2];
        }
      }
      k("min", "number");
      k("max", "number");
      k("step", "number");
      k("userData", "object");
    }
    cc.Class = b;
    j.exports = {
      isArray: function (b) {
        b = f(b);
        return Array.isArray(b);
      },
      fastDefine: b._fastDefine,
      getNewValueTypeCode: o,
      IDENTIFIER_RE: r,
      escapeForJS: g,
      getDefault: f
    };
  }, {
    "./CCEnum": 164,
    "./attribute": 174,
    "./js": 183,
    "./preprocess-class": 184,
    "./requiring-frame": 185,
    "./utils": 186
  }],
  163: [function (D, j) {
    "use strict";

    D("./CCClass");
    var k = D("./preprocess-class");
    var E = D("./js");
    var q = "__ccclassCache__";
    function e(b) {
      return b;
    }
    function i(c, a) {
      return c[a] || (c[a] = {});
    }
    function n(d) {
      return function (a) {
        if (typeof a == "function") {
          return d(a);
        } else {
          return function (b) {
            return d(b, a);
          };
        }
      };
    }
    function a(c, d) {
      return function (b) {
        return function (a) {
          return d(a, b);
        };
      };
    }
    var o = a.bind(null, false);
    function c() {
      return a.bind(null, false);
    }
    var l = c();
    var h = c();
    function r(b) {
      return i(b, q);
    }
    function f(c) {
      var a;
      try {
        a = c();
      } catch (a) {
        return c;
      }
      if (typeof a != "object" || a === null) {
        return a;
      } else {
        return c;
      }
    }
    function d(c) {
      var a;
      try {
        a = new c();
      } catch (b) {
        return {};
      }
      return a;
    }
    function s(c, b, e, g, i, j) {
      var a;
      var q = i && (i.get || i.set);
      if (g) {
        a = k.getFullFormOfProperty(g, q);
      }
      var n = b[e];
      var l = E.mixin(n || {}, a || g || {});
      if (q) {
        if (i.get) {
          l.get = i.get;
        }
        if (i.set) {
          l.set = i.set;
        }
      } else {
        var h = undefined;
        if (i) {
          if (i.initializer) {
            h = f(i.initializer);
          }
        } else {
          var r = j.default || (j.default = d(c));
          if (r.hasOwnProperty(e)) {
            h = r[e];
          }
        }
        l.default = h;
      }
      b[e] = l;
    }
    var p = n(function (g, b) {
      var c = E.getSuper(g);
      if (c === Object) {
        c = null;
      }
      var h = {
        name: b,
        extends: c,
        ctor: g,
        __ES6__: true
      };
      var e = g[q];
      if (e) {
        var f = e.proto;
        if (f) {
          E.mixin(h, f);
        }
        g[q] = undefined;
      }
      return cc.Class(h);
    });
    function t(d, a, b) {
      return d(function (c, f) {
        var d = r(c);
        if (d) {
          var e = b !== undefined ? b : f;
          var g = i(d, "proto");
          i(g, "editor")[a] = e;
        }
      }, a);
    }
    function g(b) {
      return b(e);
    }
    var m = g(n);
    var u = t(o, "requireComponent");
    var v = g(l);
    var w = t(h, "executionOrder");
    var y = g(n);
    var x = g(n);
    var z = g(l);
    var b = g(l);
    var A = g(l);
    cc._decorator = j.exports = {
      ccclass: p,
      property: function (f, a, b) {
        var j = null;
        function c(d, a, b) {
          var c = r(d.constructor);
          if (c) {
            var e = i(c, "proto");
            var f = i(e, "properties");
            s(d.constructor, f, a, j, b, c);
          }
        }
        if (a === undefined) {
          j = f;
          return c;
        }
        c(f, a, b);
      },
      executeInEditMode: m,
      requireComponent: u,
      menu: v,
      executionOrder: w,
      disallowMultiple: y,
      playOnFocus: x,
      inspector: z,
      icon: b,
      help: A,
      mixins: function () {
        for (var d = [], a = 0; a < arguments.length; a++) {
          d[a] = arguments[a];
        }
        return function (a) {
          var b = r(a);
          if (b) {
            i(b, "proto").mixins = d;
          }
        };
      }
    };
  }, {
    "./CCClass": 162,
    "./js": 183,
    "./preprocess-class": 184,
    "./utils": 186
  }],
  164: [function (e, a) {
    "use strict";

    var k = e("./js");
    function b(a) {
      if ("__enums__" in a) {
        return a;
      }
      k.value(a, "__enums__", null, true);
      for (var b = -1, c = Object.keys(a), e = 0; e < c.length; e++) {
        var f = c[e];
        var l = a[f];
        if (l === -1) {
          l = ++b;
          a[f] = l;
        } else if (typeof l == "number") {
          b = l;
        } else if (typeof l == "string" && Number.isInteger(parseFloat(f))) {
          continue;
        }
        var m = "" + l;
        if (f !== m) {
          k.value(a, m, f);
        }
      }
      return a;
    }
    b.isEnum = function (b) {
      return b && b.hasOwnProperty("__enums__");
    };
    b.getList = function (e) {
      if (e.__enums__) {
        return e.__enums__;
      }
      var a = e.__enums__ = [];
      for (var b in e) {
        var f = e[b];
        if (Number.isInteger(f)) {
          a.push({
            name: b,
            value: f
          });
        }
      }
      a.sort(function (c, a) {
        return c.value - a.value;
      });
      return a;
    };
    a.exports = cc.Enum = b;
  }, {
    "./js": 183
  }],
  165: [function (e) {
    "use strict";

    var f;
    var g = e("../event-manager");
    var a = e("./CCInputManager");
    cc.Acceleration = function (e, a, b, c) {
      this.x = e || 0;
      this.y = a || 0;
      this.z = b || 0;
      this.timestamp = c || 0;
    };
    a.setAccelerometerEnabled = function (d) {
      var a = this;
      if (a._accelEnabled !== d) {
        a._accelEnabled = d;
        var b = cc.director.getScheduler();
        b.enableForTarget(a);
        if (a._accelEnabled) {
          a._registerAccelerometerEvent();
          a._accelCurTime = 0;
          b.scheduleUpdate(a);
        } else {
          a._unregisterAccelerometerEvent();
          a._accelCurTime = 0;
          b.unscheduleUpdate(a);
        }
      }
    };
    a.setAccelerometerInterval = function (b) {
      if (this._accelInterval !== b) {
        this._accelInterval = b;
      }
    };
    a._registerKeyboardEvent = function () {
      cc.game.canvas.addEventListener("keydown", function (b) {
        g.dispatchEvent(new cc.Event.EventKeyboard(b.keyCode, true));
        b.stopPropagation();
        b.preventDefault();
      }, false);
      cc.game.canvas.addEventListener("keyup", function (b) {
        g.dispatchEvent(new cc.Event.EventKeyboard(b.keyCode, false));
        b.stopPropagation();
        b.preventDefault();
      }, false);
    };
    a._registerAccelerometerEvent = function () {
      var b = window;
      var a = this;
      a._acceleration = new cc.Acceleration();
      a._accelDeviceEvent = b.DeviceMotionEvent || b.DeviceOrientationEvent;
      if (cc.sys.browserType === cc.sys.BROWSER_TYPE_MOBILE_QQ) {
        a._accelDeviceEvent = window.DeviceOrientationEvent;
      }
      var c = a._accelDeviceEvent === b.DeviceMotionEvent ? "devicemotion" : "deviceorientation";
      var d = navigator.userAgent;
      if (/Android/.test(d) || /Adr/.test(d) && cc.sys.browserType === cc.BROWSER_TYPE_UC) {
        a._minus = -1;
      }
      f = a.didAccelerate.bind(a);
      b.addEventListener(c, f, false);
    };
    a._unregisterAccelerometerEvent = function () {
      var b = window;
      var a = this._accelDeviceEvent === b.DeviceMotionEvent ? "devicemotion" : "deviceorientation";
      if (f) {
        b.removeEventListener(a, f, false);
      }
    };
    a.didAccelerate = function (k) {
      var b = this;
      var d = window;
      if (b._accelEnabled) {
        var e;
        var l;
        var m;
        var n = b._acceleration;
        if (b._accelDeviceEvent === window.DeviceMotionEvent) {
          var i = k.accelerationIncludingGravity;
          e = b._accelMinus * i.x * 0.1;
          l = b._accelMinus * i.y * 0.1;
          m = i.z * 0.1;
        } else {
          e = k.gamma / 90 * 0.981;
          l = -k.beta / 90 * 0.981;
          m = k.alpha / 90 * 0.981;
        }
        if (cc.view._isRotated) {
          var a = e;
          e = -l;
          l = a;
        }
        n.x = e;
        n.y = l;
        n.z = m;
        n.timestamp = k.timeStamp || Date.now();
        var j = n.x;
        if (d.orientation === 90) {
          n.x = -n.y;
          n.y = j;
        } else if (d.orientation === -90) {
          n.x = n.y;
          n.y = -j;
        } else if (d.orientation === 180) {
          n.x = -n.x;
          n.y = -n.y;
        }
        if (!(cc.sys.os !== cc.sys.OS_ANDROID && cc.sys.os !== cc.sys.OS_OPENHARMONY || cc.sys.browserType === cc.sys.BROWSER_TYPE_MOBILE_QQ)) {
          n.x = -n.x;
          n.y = -n.y;
        }
      }
    };
  }, {
    "../event-manager": 133,
    "./CCInputManager": 166
  }],
  166: [function (a, b) {
    "use strict";

    var c = a("./CCMacro");
    var s = a("./CCSys");
    var k = a("../event-manager");
    var f = cc.v2();
    var d = {
      _mousePressed: false,
      _isRegisterEvent: false,
      _preTouchPoint: cc.v2(0, 0),
      _prevMousePoint: cc.v2(0, 0),
      _preTouchPool: [],
      _preTouchPoolPointer: 0,
      _touches: [],
      _maxTouches: 10,
      _touchesIntegerDict: {},
      _touchPropagationAllowed: false,
      _indexBitsUsed: 0,
      _touchesCache: {},
      _touchCount: 0,
      _accelEnabled: false,
      _accelInterval: 0.2,
      _accelMinus: 1,
      _accelCurTime: 0,
      _acceleration: null,
      _accelDeviceEvent: null,
      _canvasBoundingRect: {
        left: 0,
        top: 0,
        adjustedLeft: 0,
        adjustedTop: 0,
        width: 0,
        height: 0
      },
      _getUnUsedIndex: function () {
        for (var d = cc.sys.now(), b = c.TOUCH_TIMEOUT, f = this._indexBitsUsed, h = -1, l = this._touches, i = this._touchesIntegerDict, j = this._touchesCache, a = 0; a < this._maxTouches; a++) {
          if (f & 1) {
            var n = l[a];
            if (n && d - n._lastModified > b) {
              var p = n.getID();
              delete i[p];
              delete j[p];
              this._touchCount--;
              if (h === -1) {
                h = a;
                this._indexBitsUsed |= 1 << a;
              } else {
                this._indexBitsUsed &= ~(1 << a);
              }
            }
          } else if (h === -1) {
            h = a;
            this._indexBitsUsed |= 1 << a;
          }
          f >>= 1;
        }
        return h;
      },
      _glView: null,
      _updateCanvasBoundingRect: function () {
        var g = cc.game.canvas;
        var a = this._canvasBoundingRect;
        var b = document.documentElement;
        var c = window.pageXOffset - b.clientLeft;
        var d = window.pageYOffset - b.clientTop;
        if (g.getBoundingClientRect) {
          var e = g.getBoundingClientRect();
          a.left = e.left + c;
          a.top = e.top + d;
          a.width = e.width;
          a.height = e.height;
        } else if (g instanceof HTMLCanvasElement) {
          a.left = c;
          a.top = d;
          a.width = g.width;
          a.height = g.height;
        } else {
          a.left = c;
          a.top = d;
          a.width = parseInt(g.style.width);
          a.height = parseInt(g.style.height);
        }
      },
      handleTouchesBegin: function (d) {
        for (var b, e, f = s.now(), g = [], h = this._touches, a = this._touchesIntegerDict, i = this._touchesCache, c = 0, m = d.length; c < m; c++) {
          if (a[e = (b = d[c]).getID()] === undefined) {
            var n = this._getUnUsedIndex();
            if (n === -1) {
              continue;
            }
            var o = new cc.Touch(b._point.x, b._point.y, e);
            o._setPrevPoint(b._prevPoint);
            o._lastModified = f;
            h[n] = o;
            a[e] = n;
            i[e] = o;
            this._touchCount++;
            g.push(o);
          }
        }
        if (g.length > 0) {
          this._glView._convertTouchesWithScale(g);
          var p = new cc.Event.EventTouch(g);
          p._eventCode = cc.Event.EventTouch.BEGAN;
          k.dispatchEvent(p);
        }
      },
      handleTouchesMove: function (e) {
        for (var b, f, g = s.now(), h = [], i = this._touches, a = this._touchesIntegerDict, l = 0, m = e.length; l < m; l++) {
          if ((f = a[(b = e[l]).getID()]) !== undefined) {
            var n = i[f];
            if (n) {
              n._setPoint(b._point);
              n._setPrevPoint(b._prevPoint);
              n._lastModified = g;
              h.push(n);
            }
          }
        }
        if (h.length > 0) {
          this._glView._convertTouchesWithScale(h);
          var o = new cc.Event.EventTouch(h);
          o._eventCode = cc.Event.EventTouch.MOVED;
          k.dispatchEvent(o);
        }
      },
      handleTouchesEnd: function (d) {
        var a = this.getSetOfTouchesEndOrCancel(d);
        if (a.length > 0) {
          this._glView._convertTouchesWithScale(a);
          var b = new cc.Event.EventTouch(a);
          b._eventCode = cc.Event.EventTouch.ENDED;
          k.dispatchEvent(b);
        }
        this._preTouchPool.length = 0;
      },
      handleTouchesCancel: function (d) {
        var a = this.getSetOfTouchesEndOrCancel(d);
        if (a.length > 0) {
          this._glView._convertTouchesWithScale(a);
          var b = new cc.Event.EventTouch(a);
          b._eventCode = cc.Event.EventTouch.CANCELED;
          k.dispatchEvent(b);
        }
        this._preTouchPool.length = 0;
      },
      getSetOfTouchesEndOrCancel: function (c) {
        for (var b, e, h, i = [], j = this._touches, k = this._touchesIntegerDict, m = this._touchesCache, a = 0, n = c.length; a < n; a++) {
          if ((e = k[h = (b = c[a]).getID()]) !== undefined) {
            var p = j[e];
            if (p) {
              p._setPoint(b._point);
              p._setPrevPoint(b._prevPoint);
              i.push(p);
              delete k[h];
              delete m[h];
              this._touchCount--;
              this._indexBitsUsed &= ~(1 << e);
            }
          }
        }
        return i;
      },
      getGlobalTouchCount: function () {
        return this._touchCount;
      },
      getGlobalTouches: function () {
        return this._touchesCache;
      },
      getPreTouch: function (e) {
        for (var a = null, g = this._preTouchPool, c = e.getID(), d = g.length - 1; d >= 0; d--) {
          if (g[d].getID() === c) {
            a = g[d];
            break;
          }
        }
        if (!a) {
          a = e;
        }
        return a;
      },
      setPreTouch: function (e) {
        for (var a = false, g = this._preTouchPool, c = e.getID(), d = g.length - 1; d >= 0; d--) {
          if (g[d].getID() === c) {
            g[d] = e;
            a = true;
            break;
          }
        }
        if (!a) {
          if (g.length <= 50) {
            g.push(e);
          } else {
            g[this._preTouchPoolPointer] = e;
            this._preTouchPoolPointer = (this._preTouchPoolPointer + 1) % 50;
          }
        }
      },
      getTouchByXY: function (g, a, b) {
        var c = this._preTouchPoint;
        var d = this._glView.convertToLocationInView(g, a, b);
        var e = new cc.Touch(d.x, d.y, 0);
        e._setPrevPoint(c.x, c.y);
        c.x = d.x;
        c.y = d.y;
        return e;
      },
      getMouseEvent: function (f, a, b) {
        var c = this._prevMousePoint;
        var d = new cc.Event.EventMouse(b);
        d._setPrevCursor(c.x, c.y);
        c.x = f.x;
        c.y = f.y;
        this._glView._convertMouseToLocationInView(c, a);
        d.setLocation(c.x, c.y);
        return d;
      },
      getPointByEvent: function (c, a) {
        if (!(cc.sys.browserType !== cc.sys.BROWSER_TYPE_QQ && cc.sys.browserType !== cc.sys.BROWSER_TYPE_UC && cc.sys.browserType !== cc.sys.BROWSER_TYPE_SAFARI)) {
          this._updateCanvasBoundingRect();
        }
        if (c.pageX != null) {
          return {
            x: c.pageX,
            y: c.pageY
          };
        } else {
          a.left -= document.body.scrollLeft;
          a.top -= document.body.scrollTop;
          return {
            x: c.clientX,
            y: c.clientY
          };
        }
      },
      getTouchesByEvent: function (a, b) {
        for (var d, g, i, j = [], n = this._glView, o = this._preTouchPoint, c = a.changedTouches.length, l = 0; l < c; l++) {
          if (d = a.changedTouches[l]) {
            var q;
            q = s.BROWSER_TYPE_FIREFOX === s.browserType ? n.convertToLocationInView(d.pageX, d.pageY, b, f) : n.convertToLocationInView(d.clientX, d.clientY, b, f);
            if (d.identifier != null) {
              g = new cc.Touch(q.x, q.y, d.identifier);
              i = this.getPreTouch(g).getLocation();
              g._setPrevPoint(i.x, i.y);
              this.setPreTouch(g);
            } else {
              (g = new cc.Touch(q.x, q.y))._setPrevPoint(o.x, o.y);
            }
            o.x = q.x;
            o.y = q.y;
            j.push(g);
          }
        }
        return j;
      },
      allowTouchPropagation: function (b) {
        this._touchPropagationAllowed = b;
      },
      registerSystemEvent: function (h) {
        if (!this._isRegisterEvent) {
          this._glView = cc.view;
          var n = this;
          var f = this._canvasBoundingRect;
          window.addEventListener("resize", this._updateCanvasBoundingRect.bind(this));
          var b = s.isMobile;
          var d = ("mouse" in s.capabilities);
          var e = ("touches" in s.capabilities);
          if (d) {
            (function () {
              if (!b) {
                window.addEventListener("mousedown", function () {
                  n._mousePressed = true;
                }, false);
                window.addEventListener("mouseup", function (d) {
                  if (n._mousePressed) {
                    n._mousePressed = false;
                    var a = n.getPointByEvent(d, f);
                    if (!cc.rect(f.left, f.top, f.width, f.height).contains(a)) {
                      n.handleTouchesEnd([n.getTouchByXY(a.x, a.y, f)]);
                      var b = n.getMouseEvent(a, f, cc.Event.EventMouse.UP);
                      b.setButton(d.button);
                      k.dispatchEvent(b);
                    }
                  }
                }, false);
              }
              for (var e = cc.Event.EventMouse, c = [!b && ["mousedown", e.DOWN, function (b, a, c, d) {
                  n._mousePressed = true;
                  n.handleTouchesBegin([n.getTouchByXY(c.x, c.y, d)]);
                  h.focus();
                }], !b && ["mouseup", e.UP, function (e, a, b, c) {
                  n._mousePressed = false;
                  n.handleTouchesEnd([n.getTouchByXY(b.x, b.y, c)]);
                }], !b && ["mousemove", e.MOVE, function (e, a, b, c) {
                  n.handleTouchesMove([n.getTouchByXY(b.x, b.y, c)]);
                  if (!n._mousePressed) {
                    a.setButton(null);
                  }
                }], ["mousewheel", e.SCROLL, function (c, a) {
                  a.setScrollData(0, c.wheelDelta);
                }], ["DOMMouseScroll", e.SCROLL, function (c, a) {
                  a.setScrollData(0, c.detail * -120);
                }]], d = 0; d < c.length; ++d) {
                var i = c[d];
                if (i) {
                  (function () {
                    var b = i[0];
                    var d = i[1];
                    var g = i[2];
                    h.addEventListener(b, function (a) {
                      var b = n.getPointByEvent(a, f);
                      var h = n.getMouseEvent(b, f, d);
                      var i = a.button;
                      if (d === e.MOVE) {
                        if (a.buttons & 1) {
                          i = e.BUTTON_LEFT;
                        } else if (a.buttons & 2) {
                          i = e.BUTTON_RIGHT;
                        } else if (a.buttons & 4) {
                          i = e.BUTTON_MIDDLE;
                        }
                      }
                      h.setButton(i);
                      g(a, h, b, f);
                      k.dispatchEvent(h);
                      a.stopPropagation();
                      a.preventDefault();
                    }, false);
                  })();
                }
              }
            })();
          }
          if (window.navigator.msPointerEnabled) {
            var g = {
              MSPointerDown: n.handleTouchesBegin,
              MSPointerMove: n.handleTouchesMove,
              MSPointerUp: n.handleTouchesEnd,
              MSPointerCancel: n.handleTouchesCancel
            };
            function b(b) {
              var d = g[b];
              h.addEventListener(b, function (c) {
                var a = document.documentElement;
                f.adjustedLeft = f.left - a.scrollLeft;
                f.adjustedTop = f.top - a.scrollTop;
                d.call(n, [n.getTouchByXY(c.clientX, c.clientY, f)]);
                c.stopPropagation();
              }, false);
            }
            for (var i in g) {
              b(i);
            }
          }
          if (e) {
            var j = {
              touchstart: function (b) {
                n.handleTouchesBegin(b);
                h.focus();
              },
              touchmove: function (b) {
                n.handleTouchesMove(b);
              },
              touchend: function (b) {
                n.handleTouchesEnd(b);
              },
              touchcancel: function (b) {
                n.handleTouchesCancel(b);
              }
            };
            function b(b) {
              var d = j[b];
              h.addEventListener(b, function (c) {
                if (c.changedTouches) {
                  var a = document.body;
                  f.adjustedLeft = f.left - (a.scrollLeft || window.scrollX || 0);
                  f.adjustedTop = f.top - (a.scrollTop || window.scrollY || 0);
                  d(n.getTouchesByEvent(c, f));
                  if (!n._touchPropagationAllowed) {
                    c.stopPropagation();
                    c.preventDefault();
                  }
                }
              }, false);
            }
            for (var l in j) {
              b(l);
            }
          }
          this._registerKeyboardEvent();
          this._isRegisterEvent = true;
        }
      },
      _registerKeyboardEvent: function () {},
      _registerAccelerometerEvent: function () {},
      update: function (b) {
        if (this._accelCurTime > this._accelInterval) {
          this._accelCurTime -= this._accelInterval;
          k.dispatchEvent(new cc.Event.EventAcceleration(this._acceleration));
        }
        this._accelCurTime += b;
      }
    };
    b.exports = cc.internal.inputManager = d;
  }, {
    "../event-manager": 133,
    "./CCMacro": 167,
    "./CCSys": 171
  }],
  167: [function (c, a) {
    "use strict";

    cc.macro = {
      RAD: Math.PI / 180,
      DEG: 180 / Math.PI,
      REPEAT_FOREVER: Number.MAX_VALUE - 1,
      FLT_EPSILON: 1.192092896e-7,
      MIN_ZINDEX: -32768,
      MAX_ZINDEX: 32767,
      ONE: 1,
      ZERO: 0,
      SRC_ALPHA: 770,
      SRC_ALPHA_SATURATE: 776,
      SRC_COLOR: 768,
      DST_ALPHA: 772,
      DST_COLOR: 774,
      ONE_MINUS_SRC_ALPHA: 771,
      ONE_MINUS_SRC_COLOR: 769,
      ONE_MINUS_DST_ALPHA: 773,
      ONE_MINUS_DST_COLOR: 775,
      ONE_MINUS_CONSTANT_ALPHA: 32772,
      ONE_MINUS_CONSTANT_COLOR: 32770,
      ORIENTATION_PORTRAIT: 1,
      ORIENTATION_LANDSCAPE: 2,
      ORIENTATION_AUTO: 3,
      DENSITYDPI_DEVICE: "device-dpi",
      DENSITYDPI_HIGH: "high-dpi",
      DENSITYDPI_MEDIUM: "medium-dpi",
      DENSITYDPI_LOW: "low-dpi",
      FIX_ARTIFACTS_BY_STRECHING_TEXEL_TMX: true,
      DIRECTOR_STATS_POSITION: cc.v2(0, 0),
      ENABLE_STACKABLE_ACTIONS: true,
      TOUCH_TIMEOUT: 5000,
      BATCH_VERTEX_COUNT: 20000,
      ENABLE_TILEDMAP_CULLING: true,
      ENABLE_TRANSPARENT_CANVAS: false,
      ENABLE_WEBGL_ANTIALIAS: false,
      ENABLE_CULLING: false,
      CLEANUP_IMAGE_CACHE: false,
      SHOW_MESH_WIREFRAME: false,
      SHOW_MESH_NORMAL: false,
      ENABLE_MULTI_TOUCH: true,
      ALLOW_IMAGE_BITMAP: !cc.sys.isMobile,
      ENABLE_NATIVE_TTF_RENDERER: true
    };
    Object.defineProperty(cc.macro, "ROTATE_ACTION_CCW", {
      set: function (b) {
        if (cc.RotateTo && cc.RotateBy) {
          cc.RotateTo._reverse = cc.RotateBy._reverse = b;
        }
      }
    });
    cc.macro.SUPPORT_TEXTURE_FORMATS = [".astc", ".pkm", ".pvr", ".webp", ".jpg", ".jpeg", ".bmp", ".png"];
    cc.macro.KEY = {
      none: 0,
      back: 6,
      menu: 18,
      backspace: 8,
      tab: 9,
      enter: 13,
      shift: 16,
      ctrl: 17,
      alt: 18,
      pause: 19,
      capslock: 20,
      escape: 27,
      space: 32,
      pageup: 33,
      pagedown: 34,
      end: 35,
      home: 36,
      left: 37,
      up: 38,
      right: 39,
      down: 40,
      select: 41,
      insert: 45,
      Delete: 46,
      0: 48,
      1: 49,
      2: 50,
      3: 51,
      4: 52,
      5: 53,
      6: 54,
      7: 55,
      8: 56,
      9: 57,
      a: 65,
      b: 66,
      c: 67,
      d: 68,
      e: 69,
      f: 70,
      g: 71,
      h: 72,
      i: 73,
      j: 74,
      k: 75,
      l: 76,
      m: 77,
      n: 78,
      o: 79,
      p: 80,
      q: 81,
      r: 82,
      s: 83,
      t: 84,
      u: 85,
      v: 86,
      w: 87,
      x: 88,
      y: 89,
      z: 90,
      num0: 96,
      num1: 97,
      num2: 98,
      num3: 99,
      num4: 100,
      num5: 101,
      num6: 102,
      num7: 103,
      num8: 104,
      num9: 105,
      "*": 106,
      "+": 107,
      "-": 109,
      numdel: 110,
      "/": 111,
      f1: 112,
      f2: 113,
      f3: 114,
      f4: 115,
      f5: 116,
      f6: 117,
      f7: 118,
      f8: 119,
      f9: 120,
      f10: 121,
      f11: 122,
      f12: 123,
      numlock: 144,
      scrolllock: 145,
      ";": 186,
      semicolon: 186,
      equal: 187,
      "=": 187,
      ",": 188,
      comma: 188,
      dash: 189,
      ".": 190,
      period: 190,
      forwardslash: 191,
      grave: 192,
      "[": 219,
      openbracket: 219,
      backslash: 220,
      "]": 221,
      closebracket: 221,
      quote: 222,
      dpadLeft: 1000,
      dpadRight: 1001,
      dpadUp: 1003,
      dpadDown: 1004,
      dpadCenter: 1005
    };
    cc.macro.ImageFormat = cc.Enum({
      JPG: 0,
      PNG: 1,
      TIFF: 2,
      WEBP: 3,
      PVR: 4,
      ETC: 5,
      S3TC: 6,
      ATITC: 7,
      TGA: 8,
      RAWDATA: 9,
      UNKNOWN: 10
    });
    cc.macro.BlendFactor = cc.Enum({
      ONE: 1,
      ZERO: 0,
      SRC_ALPHA: 770,
      SRC_COLOR: 768,
      DST_ALPHA: 772,
      DST_COLOR: 774,
      ONE_MINUS_SRC_ALPHA: 771,
      ONE_MINUS_SRC_COLOR: 769,
      ONE_MINUS_DST_ALPHA: 773,
      ONE_MINUS_DST_COLOR: 775
    });
    cc.macro.TextAlignment = cc.Enum({
      LEFT: 0,
      CENTER: 1,
      RIGHT: 2
    });
    cc.macro.VerticalTextAlignment = cc.Enum({
      TOP: 0,
      CENTER: 1,
      BOTTOM: 2
    });
    a.exports = cc.macro;
  }, {}],
  168: [function (c, b) {
    "use strict";

    var d = c("./js");
    var f = c("./CCClass");
    var e = 1;
    function g() {
      this._name = "";
      this._objFlags = 0;
    }
    f.fastDefine("cc.Object", g, {
      _name: "",
      _objFlags: 0
    });
    d.value(g, "Flags", {
      Destroyed: e,
      DontSave: 8,
      EditorOnly: 16,
      Dirty: 32,
      DontDestroy: 64,
      PersistentMask: -4192741,
      Destroying: 128,
      Deactivating: 256,
      LockedInEditor: 512,
      HideInHierarchy: 1024,
      IsPreloadStarted: 8192,
      IsOnLoadStarted: 32768,
      IsOnLoadCalled: 16384,
      IsOnEnableCalled: 2048,
      IsStartCalled: 65536,
      IsEditorOnEnableCalled: 4096,
      IsPositionLocked: 1 << 21,
      IsRotationLocked: 1 << 17,
      IsScaleLocked: 1 << 18,
      IsAnchorLocked: 1 << 19,
      IsSizeLocked: 1 << 20
    });
    var h = [];
    d.value(g, "_deferredDestroy", function () {
      for (var d = h.length, a = 0; a < d; ++a) {
        var f = h[a];
        if (!(f._objFlags & e)) {
          f._destroyImmediate();
        }
      }
      if (d === h.length) {
        h.length = 0;
      } else {
        h.splice(0, d);
      }
    });
    var j = g.prototype;
    function k(d, b) {
      var e;
      var g = d instanceof cc._BaseNode || d instanceof cc.Component;
      var h = g ? "_id" : null;
      var i = {};
      for (e in d) {
        if (d.hasOwnProperty(e)) {
          if (e === h) {
            continue;
          }
          switch (typeof d[e]) {
            case "string":
              i[e] = "";
              break;
            case "object":
            case "function":
              i[e] = null;
          }
        }
      }
      if (cc.Class._isCCClass(b)) {
        for (var k = cc.Class.Attr.getClassAttrs(b), a = b.__props__, l = 0; l < a.length; l++) {
          var m = (e = a[l]) + cc.Class.Attr.DELIMETER + "default";
          if (m in k) {
            if (g && e === "_id") {
              continue;
            }
            switch (typeof k[m]) {
              case "string":
                i[e] = "";
                break;
              case "object":
              case "function":
                i[e] = null;
                break;
              case "undefined":
                i[e] = undefined;
            }
          }
        }
      }
      var n = "";
      for (e in i) {
        var o;
        o = f.IDENTIFIER_RE.test(e) ? "o." + e + "=" : "o[" + f.escapeForJS(e) + "]=";
        var t = i[e];
        if (t === "") {
          t = "\"\"";
        }
        n += o + t + ";";
      }
      return Function("o", n);
    }
    d.getset(j, "name", function () {
      return this._name;
    }, function (b) {
      this._name = b;
    }, true);
    d.get(j, "isValid", function () {
      return !(this._objFlags & e);
    }, true);
    j.destroy = function () {
      return !(this._objFlags & e || this._objFlags & 4 || (this._objFlags |= 4, h.push(this), 0));
    };
    j._destruct = function () {
      var c = this.constructor;
      var a = c.__destruct__;
      if (!a) {
        a = k(this, c);
        d.value(c, "__destruct__", a, true);
      }
      a(this);
    };
    j._onPreDestroy = null;
    j._destroyImmediate = function () {
      if (!(this._objFlags & e)) {
        if (this._onPreDestroy) {
          this._objFlags |= 128;
          this._onPreDestroy();
        }
        this._destruct();
        this._objFlags |= e;
      }
    };
    j._deserialize = null;
    cc.isValid = function (c, a) {
      if (typeof c == "object") {
        return !(!c || c._objFlags & (a ? e | 4 : e));
      } else {
        return c !== undefined;
      }
    };
    cc.Object = b.exports = g;
  }, {
    "./CCClass": 162,
    "./js": 183
  }],
  169: [function (d, a) {
    "use strict";

    var b = d("../platform/js");
    cc.SAXParser = function () {
      if (window.DOMParser) {
        this._isSupportDOMParser = true;
        this._parser = new DOMParser();
      } else {
        this._isSupportDOMParser = false;
        this._parser = null;
      }
    };
    cc.SAXParser.prototype = {
      constructor: cc.SAXParser,
      parse: function (b) {
        return this._parseXML(b);
      },
      _parseXML: function (c) {
        var a;
        if (this._isSupportDOMParser) {
          a = this._parser.parseFromString(c, "text/xml");
        } else {
          (a = new ActiveXObject("Microsoft.XMLDOM")).async = "false";
          a.loadXML(c);
        }
        return a;
      }
    };
    cc.PlistParser = function () {
      cc.SAXParser.call(this);
    };
    b.extend(cc.PlistParser, cc.SAXParser);
    b.mixin(cc.PlistParser.prototype, {
      parse: function (e) {
        var a = this._parseXML(e);
        var h = a.documentElement;
        if (h.tagName !== "plist") {
          return {};
        }
        for (var c = null, i = 0, j = h.childNodes.length; i < j && (c = h.childNodes[i]).nodeType !== 1; i++);
        a = null;
        return this._parseNode(c);
      },
      _parseNode: function (e) {
        var a = null;
        var f = e.tagName;
        if (f === "dict") {
          a = this._parseDict(e);
        } else if (f === "array") {
          a = this._parseArray(e);
        } else if (f === "string") {
          if (e.childNodes.length === 1) {
            a = e.firstChild.nodeValue;
          } else {
            a = "";
            for (var c = 0; c < e.childNodes.length; c++) {
              a += e.childNodes[c].nodeValue;
            }
          }
        } else if (f === "false") {
          a = false;
        } else if (f === "true") {
          a = true;
        } else if (f === "real") {
          a = parseFloat(e.firstChild.nodeValue);
        } else if (f === "integer") {
          a = parseInt(e.firstChild.nodeValue, 10);
        }
        return a;
      },
      _parseArray: function (f) {
        for (var a = [], b = 0, g = f.childNodes.length; b < g; b++) {
          var d = f.childNodes[b];
          if (d.nodeType === 1) {
            a.push(this._parseNode(d));
          }
        }
        return a;
      },
      _parseDict: function (g) {
        for (var a = {}, b = null, h = 0, i = g.childNodes.length; h < i; h++) {
          var e = g.childNodes[h];
          if (e.nodeType === 1) {
            if (e.tagName === "key") {
              b = e.firstChild.nodeValue;
            } else {
              a[b] = this._parseNode(e);
            }
          }
        }
        return a;
      }
    });
    cc.saxParser = new cc.SAXParser();
    cc.plistParser = new cc.PlistParser();
    a.exports = {
      saxParser: cc.saxParser,
      plistParser: cc.plistParser
    };
  }, {
    "../platform/js": 183
  }],
  170: [function () {
    "use strict";

    cc.screen = {
      _supportsFullScreen: false,
      _onfullscreenchange: null,
      _onfullscreenerror: null,
      _preOnFullScreenChange: null,
      _preOnFullScreenError: null,
      _preOnTouch: null,
      _touchEvent: "",
      _fn: null,
      _fnMap: [["requestFullscreen", "exitFullscreen", "fullscreenchange", "fullscreenEnabled", "fullscreenElement", "fullscreenerror"], ["requestFullScreen", "exitFullScreen", "fullScreenchange", "fullScreenEnabled", "fullScreenElement", "fullscreenerror"], ["webkitRequestFullScreen", "webkitCancelFullScreen", "webkitfullscreenchange", "webkitIsFullScreen", "webkitCurrentFullScreenElement", "webkitfullscreenerror"], ["mozRequestFullScreen", "mozCancelFullScreen", "mozfullscreenchange", "mozFullScreen", "mozFullScreenElement", "mozfullscreenerror"], ["msRequestFullscreen", "msExitFullscreen", "MSFullscreenChange", "msFullscreenEnabled", "msFullscreenElement", "msfullscreenerror"]],
      init: function () {
        this._fn = {};
        var e;
        var g;
        var h;
        var i;
        var j = this._fnMap;
        e = 0;
        g = j.length;
        for (; e < g; e++) {
          if ((h = j[e]) && document[h[1]] !== undefined) {
            e = 0;
            i = h.length;
            for (; e < i; e++) {
              this._fn[j[0][e]] = h[e];
            }
            break;
          }
        }
        this._supportsFullScreen = this._fn.requestFullscreen !== undefined;
        this._touchEvent = "ontouchend" in window ? "touchend" : "mousedown";
      },
      fullScreen: function () {
        return !!this._supportsFullScreen && !!(document[this._fn.fullscreenElement] || document[this._fn.webkitFullscreenElement] || document[this._fn.mozFullScreenElement]);
      },
      requestFullScreen: function (g, h, b) {
        if (g && g.tagName.toLowerCase() === "video") {
          if (cc.sys.os === cc.sys.OS_IOS && cc.sys.isBrowser && g.readyState > 0) {
            if (g.webkitEnterFullscreen) {
              g.webkitEnterFullscreen();
            }
            return;
          }
          g.setAttribute("x5-video-player-fullscreen", "true");
        }
        if (this._supportsFullScreen) {
          g = g || document.documentElement;
          if (h) {
            var c = this._fn.fullscreenchange;
            if (this._onfullscreenchange) {
              document.removeEventListener(c, this._onfullscreenchange);
            }
            this._onfullscreenchange = h;
            document.addEventListener(c, h, false);
          }
          if (b) {
            var d = this._fn.fullscreenerror;
            if (this._onfullscreenerror) {
              document.removeEventListener(d, this._onfullscreenerror);
            }
            this._onfullscreenerror = b;
            document.addEventListener(d, b, {
              once: true
            });
          }
          var e = g[this._fn.requestFullscreen]();
          if (document[this._fn.fullscreenerror] === undefined && window.Promise && e instanceof Promise) {
            e.catch(function () {});
          }
        }
      },
      exitFullScreen: function (b) {
        if (b && b.tagName.toLowerCase() === "video") {
          if (cc.sys.os === cc.sys.OS_IOS && cc.sys.isBrowser) {
            if (b.webkitExitFullscreen) {
              b.webkitExitFullscreen();
            }
            return;
          }
          b.setAttribute("x5-video-player-fullscreen", "false");
        }
        return !this._supportsFullScreen || document[this._fn.exitFullscreen]();
      },
      autoFullScreen: function (c, d) {
        c = c || document.body;
        this._ensureFullScreen(c, d);
        this.requestFullScreen(c, d);
      },
      disableAutoFullScreen: function (d) {
        var a = cc.game.canvas || d;
        var b = this._touchEvent;
        if (this._preOnTouch) {
          a.removeEventListener(b, this._preOnTouch);
          this._preOnTouch = null;
        }
      },
      _ensureFullScreen: function (a, b) {
        var c = this;
        var d = cc.game.canvas || a;
        var e = this._fn.fullscreenerror;
        var f = this._touchEvent;
        function g() {
          c._preOnFullScreenError = null;
          if (c._preOnTouch) {
            d.removeEventListener(f, c._preOnTouch);
          }
          c._preOnTouch = function () {
            c._preOnTouch = null;
            c.requestFullScreen(a, b);
          };
          d.addEventListener(f, c._preOnTouch, {
            once: true
          });
        }
        if (this._preOnFullScreenError) {
          a.removeEventListener(e, this._preOnFullScreenError);
        }
        this._preOnFullScreenError = g;
        a.addEventListener(e, g, {
          once: true
        });
      }
    };
    cc.screen.init();
  }, {}],
  171: [function (f, a) {
    "use strict";

    f("../CCDebug");
    var b;
    var g;
    var h = typeof window == "undefined" ? global : window;
    var i = cc && cc.sys ? cc.sys : function () {
      cc.sys = {};
      var c;
      var d = cc.sys;
      d.LANGUAGE_ENGLISH = "en";
      d.LANGUAGE_CHINESE = "zh";
      d.LANGUAGE_FRENCH = "fr";
      d.LANGUAGE_ITALIAN = "it";
      d.LANGUAGE_GERMAN = "de";
      d.LANGUAGE_SPANISH = "es";
      d.LANGUAGE_DUTCH = "du";
      d.LANGUAGE_RUSSIAN = "ru";
      d.LANGUAGE_KOREAN = "ko";
      d.LANGUAGE_JAPANESE = "ja";
      d.LANGUAGE_HUNGARIAN = "hu";
      d.LANGUAGE_PORTUGUESE = "pt";
      d.LANGUAGE_ARABIC = "ar";
      d.LANGUAGE_NORWEGIAN = "no";
      d.LANGUAGE_POLISH = "pl";
      d.LANGUAGE_TURKISH = "tr";
      d.LANGUAGE_UKRAINIAN = "uk";
      d.LANGUAGE_ROMANIAN = "ro";
      d.LANGUAGE_BULGARIAN = "bg";
      d.LANGUAGE_UNKNOWN = "unknown";
      d.OS_OPENHARMONY = "OpenHarmony";
      d.OS_IOS = "iOS";
      d.OS_ANDROID = "Android";
      d.OS_WINDOWS = "Windows";
      d.OS_LINUX = "Linux";
      d.OS_OSX = "OS X";
      d.OS_WINRT = "WINRT";
      d.OS_UNKNOWN = "Unknown";
      d.UNKNOWN = -1;
      d.WIN32 = 0;
      d.LINUX = 1;
      d.MACOS = 2;
      d.ANDROID = 3;
      d.IPHONE = 4;
      d.IPAD = 5;
      d.BLACKBERRY = 6;
      d.NACL = 7;
      d.EMSCRIPTEN = 8;
      d.TIZEN = 9;
      d.WINRT = 10;
      d.WP8 = 11;
      d.OPENHARMONY = 12;
      d.MOBILE_BROWSER = 100;
      d.DESKTOP_BROWSER = 101;
      d.EDITOR_PAGE = 102;
      d.EDITOR_CORE = 103;
      d.WECHAT_GAME = 104;
      d.QQ_PLAY = 105;
      d.FB_PLAYABLE_ADS = 106;
      d.BAIDU_GAME = 107;
      d.VIVO_GAME = 108;
      d.OPPO_GAME = 109;
      d.HUAWEI_GAME = 110;
      d.XIAOMI_GAME = 111;
      d.JKW_GAME = 112;
      d.ALIPAY_GAME = 113;
      d.WECHAT_GAME_SUB = 114;
      d.BAIDU_GAME_SUB = 115;
      d.QTT_GAME = 116;
      d.BYTEDANCE_GAME = 117;
      d.BYTEDANCE_GAME_SUB = 118;
      d.LINKSURE = 119;
      d.TAOBAO = 120;
      d.TAOBAO_MINIGAME = 121;
      d.BROWSER_TYPE_WECHAT = "wechat";
      d.BROWSER_TYPE_ANDROID = "androidbrowser";
      d.BROWSER_TYPE_IE = "ie";
      d.BROWSER_TYPE_EDGE = "edge";
      d.BROWSER_TYPE_QQ = "qqbrowser";
      d.BROWSER_TYPE_MOBILE_QQ = "mqqbrowser";
      d.BROWSER_TYPE_UC = "ucbrowser";
      d.BROWSER_TYPE_UCBS = "ucbs";
      d.BROWSER_TYPE_360 = "360browser";
      d.BROWSER_TYPE_BAIDU_APP = "baiduboxapp";
      d.BROWSER_TYPE_BAIDU = "baidubrowser";
      d.BROWSER_TYPE_MAXTHON = "maxthon";
      d.BROWSER_TYPE_OPERA = "opera";
      d.BROWSER_TYPE_OUPENG = "oupeng";
      d.BROWSER_TYPE_MIUI = "miuibrowser";
      d.BROWSER_TYPE_FIREFOX = "firefox";
      d.BROWSER_TYPE_SAFARI = "safari";
      d.BROWSER_TYPE_CHROME = "chrome";
      d.BROWSER_TYPE_LIEBAO = "liebao";
      d.BROWSER_TYPE_QZONE = "qzone";
      d.BROWSER_TYPE_SOUGOU = "sogou";
      d.BROWSER_TYPE_HUAWEI = "huawei";
      d.BROWSER_TYPE_UNKNOWN = "unknown";
      d.isNative = false;
      d.isBrowser = typeof window == "object" && typeof document == "object" && true;
      d.glExtension = function (b) {
        return !!cc.renderer.device.ext(b);
      };
      d.getMaxJointMatrixSize = function () {
        if (!d._maxJointMatrixSize) {
          var c = cc.game._renderContext;
          var a = Math.floor(c.getParameter(c.MAX_VERTEX_UNIFORM_VECTORS) / 4) - 10;
          d._maxJointMatrixSize = a < 50 ? 0 : 50;
        }
        return d._maxJointMatrixSize;
      };
      d.getSafeAreaRect = function () {
        var b = cc.view.getVisibleSize();
        return cc.rect(0, 0, b.width, b.height);
      };
      if (h.__globalAdapter && h.__globalAdapter.adaptSys) {
        h.__globalAdapter.adaptSys(d);
      } else {
        var f = window;
        var e = f.navigator;
        var j = document;
        var a = j.documentElement;
        var k = e.userAgent.toLowerCase();
        var n = e.language || e.browserLanguage;
        if (n) {
          n = n.toLowerCase();
          d.languageCode = n;
          d.language = n.split("-")[0];
        } else {
          d.languageCode = undefined;
          d.language = d.LANGUAGE_ENGLISH;
        }
        var o = false;
        var p = false;
        var q = "";
        var t = 0;
        var u = /\([^)]*android +(\d+(?:\.\d+){0,2})/.exec(k) || /android +(\d+(?:\.\d+){0,2})/.exec(e.platform);
        if (u) {
          o = true;
          q = u[1] || "";
          t = parseInt(q) || 0;
        }
        if (u = /\((ipad|iphone|ipod)[^)]+os (\d+(?:_\d+){0,2})/.exec(k)) {
          p = true;
          q = u[2] || "";
          t = parseInt(q) || 0;
        } else if (/(iPhone|iPad|iPod)/.exec(e.platform) || /iphone|ipad|ipod/.test(k) || (e.platform === "MacIntel" || /mac os/.test(k)) && e.maxTouchPoints && e.maxTouchPoints > 2) {
          p = true;
          q = "";
          t = 0;
        }
        var v = d.OS_UNKNOWN;
        if (p) {
          v = d.OS_IOS;
        } else if (o) {
          v = d.OS_ANDROID;
        } else if (k.indexOf("Win") !== -1) {
          v = d.OS_WINDOWS;
        } else if (k.indexOf("Mac") !== -1) {
          v = d.OS_OSX;
        } else if (k.indexOf("Linux") !== -1) {
          v = d.OS_LINUX;
        }
        d.os = v;
        d.osVersion = q;
        d.osMainVersion = t;
        var w = false;
        if (v === d.OS_IOS && typeof BigInt == "function") {
          w = true;
        } else if (v === d.OS_OSX) {
          w = (u = /Version\/(\d+)/.exec(k)) && parseInt(u[1]) >= 14;
        }
        d.isSafari14 = w;
        d.isMobile = p || /mobile|android|iphone|ipad/.test(k);
        if (typeof FbPlayableAd != "undefined") {
          d.platform = d.FB_PLAYABLE_ADS;
        } else {
          d.platform = d.isMobile ? d.MOBILE_BROWSER : d.DESKTOP_BROWSER;
        }
        d.browserType = d.BROWSER_TYPE_UNKNOWN;
        (function () {
          var e = /mqqbrowser|micromessenger|qqbrowser|sogou|qzone|liebao|maxthon|ucbs|360 aphone|360browser|baiduboxapp|baidubrowser|maxthon|mxbrowser|miuibrowser/i.exec(k) || /qq|ucbrowser|ubrowser|edge|HuaweiBrowser/i.exec(k) || /chrome|safari|firefox|trident|opera|opr\/|oupeng/i.exec(k);
          var a = e ? e[0].toLowerCase() : d.BROWSER_TYPE_UNKNOWN;
          if (a === "safari" && o) {
            a = d.BROWSER_TYPE_ANDROID;
          } else if (a === "qq" && k.match(/android.*applewebkit/i)) {
            a = d.BROWSER_TYPE_ANDROID;
          }
          var f = {
            micromessenger: d.BROWSER_TYPE_WECHAT,
            trident: d.BROWSER_TYPE_IE,
            edge: d.BROWSER_TYPE_EDGE,
            "360 aphone": d.BROWSER_TYPE_360,
            mxbrowser: d.BROWSER_TYPE_MAXTHON,
            "opr/": d.BROWSER_TYPE_OPERA,
            ubrowser: d.BROWSER_TYPE_UC,
            huaweibrowser: d.BROWSER_TYPE_HUAWEI
          };
          if (!(a !== "qqbrowser" && a !== "mqqbrowser")) {
            if (k.match(/wechat|micromessenger/i)) {
              a = d.BROWSER_TYPE_WECHAT;
            }
          }
          d.browserType = f[a] || a;
        })();
        d.browserVersion = "";
        if (!(c = k.match(/(mqqbrowser|micromessenger|qqbrowser|sogou|qzone|liebao|maxthon|uc|ucbs|360 aphone|360|baiduboxapp|baidu|maxthon|mxbrowser|miui(?:.hybrid)?)(mobile)?(browser)?\/?([\d.]+)/i))) {
          c = k.match(/(qq|chrome|safari|firefox|trident|opera|opr\/|oupeng)(mobile)?(browser)?\/?([\d.]+)/i);
        }
        d.browserVersion = c ? c[4] : "";
        var x = window.innerWidth || document.documentElement.clientWidth;
        var E = window.innerHeight || document.documentElement.clientHeight;
        var m = window.devicePixelRatio || 1;
        d.windowPixelResolution = {
          width: m * x,
          height: m * E
        };
        d._checkWebGLRenderMode = function () {
          if (cc.game.renderType !== cc.game.RENDER_TYPE_WEBGL) {
            throw Error(cc.debug.getError(5202));
          }
        };
        var y;
        var G = document.createElement("canvas");
        try {
          var I = d.localStorage = f.localStorage;
          I.setItem("storage", "");
          I.removeItem("storage");
          I = null;
        } catch (c) {
          function a() {}
          d.localStorage = {
            getItem: a,
            setItem: a,
            removeItem: a,
            clear: a
          };
        }
        y = !(!h.Editor || !h.Editor.isBuilder) || !!(h.shell && h.shell.environment && h.shell.environment.webpSupported);
        var N = !!G.getContext("2d");
        var J = false;
        if (f.WebGLRenderingContext) {
          J = true;
        }
        var O;
        var P = d.capabilities = {
          canvas: N,
          opengl: J,
          webp: y,
          imageBitmap: false
        };
        if (typeof createImageBitmap != "undefined" && typeof Blob != "undefined") {
          G.width = G.height = 2;
          createImageBitmap(G, {}).then(function (b) {
            P.imageBitmap = true;
            if (b.close) {
              b.close();
            }
          }).catch(function () {});
        }
        if (a.ontouchstart !== undefined || j.ontouchstart !== undefined || e.msPointerEnabled || typeof __wxjs_environment == "string" && __wxjs_environment === "miniprogram") {
          P.touches = true;
        }
        if (a.onmouseup !== undefined) {
          P.mouse = true;
        }
        if (a.onkeyup !== undefined) {
          P.keyboard = true;
        }
        if (f.DeviceMotionEvent || f.DeviceOrientationEvent) {
          P.accelerometer = true;
        }
        d.browserVersion;
        O = {
          ONLY_ONE: false,
          get WEB_AUDIO() {
            if (g !== undefined) {
              return g;
            } else {
              if ((g = h.shell && h.shell.environment && h.shell.environment.audioSupported) === undefined) {
                g = !!(window.AudioContext || window.webkitAudioContext || window.mozAudioContext);
              }
              return g;
            }
          },
          DELAY_CREATE_CTX: false,
          get context() {
            if (g !== undefined && g !== false) {
              if (b !== undefined) {
                return b;
              }
              try {
                b = h.shell && h.shell.environment && h.shell.environment.audioContext ? h.shell.environment.audioContext : new (window.AudioContext || window.webkitAudioContext || window.mozAudioContext)();
              } catch (b) {
                g = false;
              }
              return b;
            }
          }
        };
        if (d.os === d.OS_IOS) {
          O.USE_LOADER_EVENT = "loadedmetadata";
        }
        if (d.browserType === d.BROWSER_TYPE_FIREFOX) {
          O.USE_LOADER_EVENT = "canplay";
        }
        if (d.os === d.OS_ANDROID && d.browserType === d.BROWSER_TYPE_UC) {
          O.ONE_SOURCE = true;
        }
        var L = [];
        (function () {
          var c = document.createElement("audio");
          if (c.canPlayType) {
            if (c.canPlayType("audio/ogg; codecs=\"vorbis\"")) {
              L.push(".ogg");
            }
            var a = c.canPlayType("audio/mpeg");
            if (a) {
              L.push(".mpeg");
            }
            if (a || c.canPlayType("audio/mp3")) {
              L.push(".mp3");
            }
            if (c.canPlayType("audio/wav; codecs=\"1\"")) {
              L.push(".wav");
            }
            if (c.canPlayType("audio/mp4")) {
              L.push(".mp4");
            }
            if (c.canPlayType("audio/x-m4a")) {
              L.push(".m4a");
            }
          }
        })();
        O.format = L;
        d.__audioSupport = O;
      }
      d.NetworkType = {
        NONE: 0,
        LAN: 1,
        WWAN: 2
      };
      d.getNetworkType = function () {
        return d.NetworkType.LAN;
      };
      d.getBatteryLevel = function () {
        return 1;
      };
      d.garbageCollect = function () {};
      d.restartVM = function () {};
      d.isObjectValid = function (b) {
        return !!b;
      };
      d.dump = function () {
        this.isMobile;
        this.language;
        this.browserType;
        this.browserVersion;
        JSON.stringify(this.capabilities);
        this.os;
        this.osVersion;
        this.platform;
        cc.game.renderType;
        cc.game.RENDER_TYPE_WEBGL;
      };
      d.openURL = function (b) {
        window.open(b);
      };
      d.now = function () {
        if (Date.now) {
          return Date.now();
        } else {
          return +new Date();
        }
      };
      return d;
    }();
    a.exports = i;
  }, {
    "../CCDebug": 23
  }],
  172: [function (a, b) {
    "use strict";

    var i = a("../event/event-target");
    var c = a("../platform/js");
    var e = a("../renderer");
    a("../platform/CCClass");
    var f = {
      init: function () {
        this.html = document.getElementsByTagName("html")[0];
      },
      availWidth: function (b) {
        if (b && b !== this.html) {
          return b.clientWidth;
        } else {
          return window.innerWidth;
        }
      },
      availHeight: function (b) {
        if (b && b !== this.html) {
          return b.clientHeight;
        } else {
          return window.innerHeight;
        }
      },
      meta: {
        width: "device-width"
      },
      adaptationType: cc.sys.browserType
    };
    if (cc.sys.os === cc.sys.OS_IOS) {
      f.adaptationType = cc.sys.BROWSER_TYPE_SAFARI;
    }
    switch (f.adaptationType) {
      case cc.sys.BROWSER_TYPE_SAFARI:
      case cc.sys.BROWSER_TYPE_SOUGOU:
      case cc.sys.BROWSER_TYPE_UC:
        f.meta["minimal-ui"] = "true";
        f.availWidth = function (b) {
          return b.clientWidth;
        };
        f.availHeight = function (b) {
          return b.clientHeight;
        };
    }
    var o = null;
    function d() {
      i.call(this);
      var d = this;
      var a = cc.ContainerStrategy;
      var b = cc.ContentStrategy;
      f.init(this);
      d._frameSize = cc.size(0, 0);
      d._designResolutionSize = cc.size(0, 0);
      d._originalDesignResolutionSize = cc.size(0, 0);
      d._scaleX = 1;
      d._scaleY = 1;
      d._viewportRect = cc.rect(0, 0, 0, 0);
      d._visibleRect = cc.rect(0, 0, 0, 0);
      d._autoFullScreen = false;
      d._devicePixelRatio = 1;
      d._maxPixelRatio = 2;
      d._retinaEnabled = false;
      d._resizeCallback = null;
      d._resizing = false;
      d._resizeWithBrowserSize = false;
      d._orientationChanging = true;
      d._isRotated = false;
      d._orientation = cc.macro.ORIENTATION_AUTO;
      d._isAdjustViewport = true;
      d._antiAliasEnabled = false;
      d._resolutionPolicy = null;
      d._rpExactFit = new cc.ResolutionPolicy(a.EQUAL_TO_FRAME, b.EXACT_FIT);
      d._rpShowAll = new cc.ResolutionPolicy(a.PROPORTION_TO_FRAME, b.NO_BORDER);
      d._rpNoBorder = new cc.ResolutionPolicy(a.EQUAL_TO_FRAME, b.NO_BORDER);
      d._rpFixedHeight = new cc.ResolutionPolicy(a.EQUAL_TO_FRAME, b.FIXED_HEIGHT);
      d._rpFixedWidth = new cc.ResolutionPolicy(a.EQUAL_TO_FRAME, b.FIXED_WIDTH);
      cc.game.once(cc.game.EVENT_ENGINE_INITED, this.init, this);
    }
    cc.js.extend(d, i);
    cc.js.mixin(d.prototype, {
      init: function () {
        this._initFrameSize();
        var c = cc.game.canvas.width;
        var a = cc.game.canvas.height;
        this._designResolutionSize.width = c;
        this._designResolutionSize.height = a;
        this._originalDesignResolutionSize.width = c;
        this._originalDesignResolutionSize.height = a;
        this._viewportRect.width = c;
        this._viewportRect.height = a;
        this._visibleRect.width = c;
        this._visibleRect.height = a;
        cc.winSize.width = this._visibleRect.width;
        cc.winSize.height = this._visibleRect.height;
        if (cc.visibleRect) {
          cc.visibleRect.init(this._visibleRect);
        }
      },
      _resizeEvent: function (e) {
        var b;
        b = this.setDesignResolutionSize ? this : cc.view;
        var l = cc.sys;
        if (l.browserType !== l.BROWSER_TYPE_UC || l.os !== l.OS_IOS) {
          var f = b._frameSize.width;
          var g = b._frameSize.height;
          var h = b._isRotated;
          if (cc.sys.isMobile) {
            var i = cc.game.container.style;
            var j = i.margin;
            i.margin = "0";
            i.display = "none";
            b._initFrameSize();
            i.margin = j;
            i.display = "block";
          } else {
            b._initFrameSize();
          }
          if (e === true || b._isRotated !== h || b._frameSize.width !== f || b._frameSize.height !== g) {
            var a = b._originalDesignResolutionSize.width;
            var k = b._originalDesignResolutionSize.height;
            b._resizing = true;
            if (a > 0) {
              b.setDesignResolutionSize(a, k, b._resolutionPolicy);
            }
            b._resizing = false;
            b.emit("canvas-resize");
            if (b._resizeCallback) {
              b._resizeCallback.call();
            }
          }
        } else {
          // TOLOOK
          // TOLOOK
          setTimeout(function () {
            b._resizeEvent(e);
          }, 0);
        }
      },
      _orientationChange: function () {
        cc.view._orientationChanging = true;
        cc.view._resizeEvent(true);
        if (cc.sys.browserType === cc.sys.BROWSER_TYPE_SAFARI && cc.sys.isMobile) {
          // TOLOOK
          // TOLOOK
          setTimeout(function () {
            if (window.innerHeight > window.innerWidth) {
              window.scrollTo(0, 1);
            }
          }, 500);
        }
      },
      _resize: function () {
        cc.view._resizeEvent(false);
      },
      resizeWithBrowserSize: function (b) {
        if (b) {
          if (!this._resizeWithBrowserSize) {
            this._resizeWithBrowserSize = true;
            window.addEventListener("resize", this._resize);
            window.addEventListener("orientationchange", this._orientationChange);
          }
        } else if (this._resizeWithBrowserSize) {
          this._resizeWithBrowserSize = false;
          window.removeEventListener("resize", this._resize);
          window.removeEventListener("orientationchange", this._orientationChange);
        }
      },
      setResizeCallback: function (b) {
        if (!(typeof b != "function" && b != null)) {
          this._resizeCallback = b;
        }
      },
      setOrientation: function (d) {
        if ((d &= cc.macro.ORIENTATION_AUTO) && this._orientation !== d) {
          this._orientation = d;
          var e = this._originalDesignResolutionSize.width;
          var b = this._originalDesignResolutionSize.height;
          this.setDesignResolutionSize(e, b, this._resolutionPolicy);
        }
      },
      _initFrameSize: function () {
        var e = this._frameSize;
        var a = f.availWidth(cc.game.frame);
        var b = f.availHeight(cc.game.frame);
        var c = a >= b;
        if (!cc.sys.isMobile || c && this._orientation & cc.macro.ORIENTATION_LANDSCAPE || !c && this._orientation & cc.macro.ORIENTATION_PORTRAIT) {
          e.width = a;
          e.height = b;
          cc.game.container.style["-webkit-transform"] = "rotate(0deg)";
          cc.game.container.style.transform = "rotate(0deg)";
          this._isRotated = false;
        } else {
          e.width = b;
          e.height = a;
          cc.game.container.style["-webkit-transform"] = "rotate(90deg)";
          cc.game.container.style.transform = "rotate(90deg)";
          cc.game.container.style["-webkit-transform-origin"] = "0px 0px 0px";
          cc.game.container.style.transformOrigin = "0px 0px 0px";
          this._isRotated = true;
        }
        if (this._orientationChanging) {
          // TOLOOK
          // TOLOOK
          setTimeout(function () {
            cc.view._orientationChanging = false;
          }, 1000);
        }
      },
      _setViewportMeta: function (i, b) {
        var c = document.getElementById("cocosMetaElement");
        if (c && b) {
          document.head.removeChild(c);
        }
        var j;
        var k;
        var l;
        var m = document.getElementsByName("viewport");
        var h = m ? m[0] : null;
        j = h ? h.content : "";
        (c = c || document.createElement("meta")).id = "cocosMetaElement";
        c.name = "viewport";
        c.content = "";
        for (k in i) {
          if (j.indexOf(k) == -1) {
            j += "," + k + "=" + i[k];
          } else if (b) {
            l = RegExp(k + "s*=s*[^,]+");
            j = j.replace(l, k + "=" + i[k]);
          }
        }
        if (/^,/.test(j)) {
          j = j.substr(1);
        }
        c.content = j;
        if (h) {
          h.content = j;
        }
        document.head.appendChild(c);
      },
      _adjustViewportMeta: function () {
        if (this._isAdjustViewport) {
          this._setViewportMeta(f.meta, false);
          this._isAdjustViewport = false;
        }
      },
      adjustViewportMeta: function (b) {
        this._isAdjustViewport = b;
      },
      enableRetina: function (b) {
        this._retinaEnabled = !!b;
      },
      isRetinaEnabled: function () {
        return this._retinaEnabled;
      },
      enableAntiAlias: function (d) {
        if (this._antiAliasEnabled !== d) {
          this._antiAliasEnabled = d;
          if (cc.game.renderType === cc.game.RENDER_TYPE_WEBGL) {
            cc.assetManager.assets.forEach(function (a) {
              if (a instanceof cc.Texture2D) {
                var b = cc.Texture2D.Filter;
                if (d) {
                  a.setFilters(b.LINEAR, b.LINEAR);
                } else {
                  a.setFilters(b.NEAREST, b.NEAREST);
                }
              }
            });
          } else if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {
            var a = cc.game.canvas.getContext("2d");
            a.imageSmoothingEnabled = d;
            a.mozImageSmoothingEnabled = d;
          }
        }
      },
      isAntiAliasEnabled: function () {
        return this._antiAliasEnabled;
      },
      enableAutoFullScreen: function (b) {
        if (b && b !== this._autoFullScreen && cc.sys.isMobile) {
          this._autoFullScreen = true;
          cc.screen.autoFullScreen(cc.game.frame);
        } else {
          this._autoFullScreen = false;
          cc.screen.disableAutoFullScreen(cc.game.frame);
        }
      },
      isAutoFullScreenEnabled: function () {
        return this._autoFullScreen;
      },
      setCanvasSize: function (e, a) {
        var b = cc.game.canvas;
        var c = cc.game.container;
        b.width = e * this._devicePixelRatio;
        b.height = a * this._devicePixelRatio;
        b.style.width = e + "px";
        b.style.height = a + "px";
        c.style.width = e + "px";
        c.style.height = a + "px";
        this._resizeEvent();
      },
      getCanvasSize: function () {
        return cc.size(cc.game.canvas.width, cc.game.canvas.height);
      },
      getFrameSize: function () {
        return cc.size(this._frameSize.width, this._frameSize.height);
      },
      setFrameSize: function (c, a) {
        this._frameSize.width = c;
        this._frameSize.height = a;
        cc.game.frame.style.width = c + "px";
        cc.game.frame.style.height = a + "px";
        this._resizeEvent(true);
      },
      getVisibleSize: function () {
        return cc.size(this._visibleRect.width, this._visibleRect.height);
      },
      getVisibleSizeInPixel: function () {
        return cc.size(this._visibleRect.width * this._scaleX, this._visibleRect.height * this._scaleY);
      },
      getVisibleOrigin: function () {
        return cc.v2(this._visibleRect.x, this._visibleRect.y);
      },
      getVisibleOriginInPixel: function () {
        return cc.v2(this._visibleRect.x * this._scaleX, this._visibleRect.y * this._scaleY);
      },
      getResolutionPolicy: function () {
        return this._resolutionPolicy;
      },
      setResolutionPolicy: function (d) {
        var a = this;
        if (d instanceof cc.ResolutionPolicy) {
          a._resolutionPolicy = d;
        } else {
          var b = cc.ResolutionPolicy;
          if (d === b.EXACT_FIT) {
            a._resolutionPolicy = a._rpExactFit;
          }
          if (d === b.SHOW_ALL) {
            a._resolutionPolicy = a._rpShowAll;
          }
          if (d === b.NO_BORDER) {
            a._resolutionPolicy = a._rpNoBorder;
          }
          if (d === b.FIXED_HEIGHT) {
            a._resolutionPolicy = a._rpFixedHeight;
          }
          if (d === b.FIXED_WIDTH) {
            a._resolutionPolicy = a._rpFixedWidth;
          }
        }
      },
      setDesignResolutionSize: function (c, b, d) {
        if (c > 0 && b > 0) {
          this.setResolutionPolicy(d);
          var f = this._resolutionPolicy;
          if (f) {
            f.preApply(this);
          }
          if (cc.sys.isMobile) {
            this._adjustViewportMeta();
          }
          this._orientationChanging = true;
          if (!this._resizing) {
            this._initFrameSize();
          }
          if (f) {
            this._originalDesignResolutionSize.width = this._designResolutionSize.width = c;
            this._originalDesignResolutionSize.height = this._designResolutionSize.height = b;
            var g = f.apply(this, this._designResolutionSize);
            if (g.scale && g.scale.length === 2) {
              this._scaleX = g.scale[0];
              this._scaleY = g.scale[1];
            }
            if (g.viewport) {
              var h = this._viewportRect;
              var i = this._visibleRect;
              var a = g.viewport;
              h.x = a.x;
              h.y = a.y;
              h.width = a.width;
              h.height = a.height;
              i.x = 0;
              i.y = 0;
              i.width = a.width / this._scaleX;
              i.height = a.height / this._scaleY;
            }
            f.postApply(this);
            cc.winSize.width = this._visibleRect.width;
            cc.winSize.height = this._visibleRect.height;
            if (cc.visibleRect) {
              cc.visibleRect.init(this._visibleRect);
            }
            e.updateCameraViewport();
            cc.internal.inputManager._updateCanvasBoundingRect();
            this.emit("design-resolution-changed");
          }
        }
      },
      getDesignResolutionSize: function () {
        return cc.size(this._designResolutionSize.width, this._designResolutionSize.height);
      },
      setRealPixelResolution: function (d, a, b) {
        this._setViewportMeta({
          width: d
        }, true);
        document.documentElement.style.width = d + "px";
        document.body.style.width = d + "px";
        document.body.style.left = "0px";
        document.body.style.top = "0px";
        this.setDesignResolutionSize(d, a, b);
      },
      setViewportInPoints: function (g, a, b, c) {
        var d = this._scaleX;
        var e = this._scaleY;
        cc.game._renderContext.viewport(g * d + this._viewportRect.x, a * e + this._viewportRect.y, b * d, c * e);
      },
      setScissorInPoints: function (f, a, b, d) {
        var e = this._scaleX;
        var g = this._scaleY;
        var i = Math.ceil(f * e + this._viewportRect.x);
        var j = Math.ceil(a * g + this._viewportRect.y);
        var k = Math.ceil(b * e);
        var c = Math.ceil(d * g);
        var l = cc.game._renderContext;
        if (!o) {
          var h = l.getParameter(l.SCISSOR_BOX);
          o = cc.rect(h[0], h[1], h[2], h[3]);
        }
        if (!(o.x === i && o.y === j && o.width === k && o.height === c)) {
          o.x = i;
          o.y = j;
          o.width = k;
          o.height = c;
          l.scissor(i, j, k, c);
        }
      },
      isScissorEnabled: function () {
        return cc.game._renderContext.isEnabled(gl.SCISSOR_TEST);
      },
      getScissorRect: function () {
        if (!o) {
          var d = gl.getParameter(gl.SCISSOR_BOX);
          o = cc.rect(d[0], d[1], d[2], d[3]);
        }
        var a = 1 / this._scaleX;
        var b = 1 / this._scaleY;
        return cc.rect((o.x - this._viewportRect.x) * a, (o.y - this._viewportRect.y) * b, o.width * a, o.height * b);
      },
      getViewportRect: function () {
        return this._viewportRect;
      },
      getScaleX: function () {
        return this._scaleX;
      },
      getScaleY: function () {
        return this._scaleY;
      },
      getDevicePixelRatio: function () {
        return this._devicePixelRatio;
      },
      convertToLocationInView: function (c, b, d, e) {
        var f = e || cc.v2();
        var g = d.adjustedLeft ? d.adjustedLeft : d.left;
        var h = d.adjustedTop ? d.adjustedTop : d.top;
        var i = this._devicePixelRatio * (c - g);
        var a = this._devicePixelRatio * (h + d.height - b);
        if (this._isRotated) {
          f.x = cc.game.canvas.width - a;
          f.y = i;
        } else {
          f.x = i;
          f.y = a;
        }
        return f;
      },
      _convertMouseToLocationInView: function (d, a) {
        var b = this._viewportRect;
        d.x = (this._devicePixelRatio * (d.x - a.left) - b.x) / this._scaleX;
        d.y = (this._devicePixelRatio * (a.top + a.height - d.y) - b.y) / this._scaleY;
      },
      _convertPointWithScale: function (c) {
        var a = this._viewportRect;
        c.x = (c.x - a.x) / this._scaleX;
        c.y = (c.y - a.y) / this._scaleY;
      },
      _convertTouchesWithScale: function (e) {
        for (var b, i, k, l = this._viewportRect, g = this._scaleX, h = this._scaleY, j = 0; j < e.length; j++) {
          i = (b = e[j])._point;
          k = b._prevPoint;
          i.x = (i.x - l.x) / g;
          i.y = (i.y - l.y) / h;
          k.x = (k.x - l.x) / g;
          k.y = (k.y - l.y) / h;
        }
      }
    });
    cc.ContainerStrategy = cc.Class({
      name: "ContainerStrategy",
      preApply: function () {},
      apply: function () {},
      postApply: function () {},
      _setupContainer: function (f, a, b) {
        var c = cc.game.canvas;
        this._setupStyle(f, a, b);
        var d = f._devicePixelRatio = 1;
        if (f.isRetinaEnabled()) {
          d = f._devicePixelRatio = Math.min(f._maxPixelRatio, window.devicePixelRatio || 1);
        }
        c.width = a * d;
        c.height = b * d;
      },
      _setupStyle: function (f, a, b) {
        var c = cc.game.canvas;
        var d = cc.game.container;
        d.style.width = c.style.width = a + "px";
        d.style.height = c.style.height = b + "px";
      },
      _fixContainer: function () {
        document.body.insertBefore(cc.game.container, document.body.firstChild);
        var c = document.body.style;
        c.width = window.innerWidth + "px";
        c.height = window.innerHeight + "px";
        c.overflow = "hidden";
        var a = cc.game.container.style;
        a.position = "fixed";
        a.left = a.top = "0px";
        document.body.scrollTop = 0;
      }
    });
    cc.ContentStrategy = cc.Class({
      name: "ContentStrategy",
      ctor: function () {
        this._result = {
          scale: [1, 1],
          viewport: null
        };
      },
      _buildResult: function (a, b, c, i, j, f) {
        if (Math.abs(a - c) < 2) {
          c = a;
        }
        if (Math.abs(b - i) < 2) {
          i = b;
        }
        var g = cc.rect((a - c) / 2, (b - i) / 2, c, i);
        cc.game.renderType;
        cc.game.RENDER_TYPE_CANVAS;
        this._result.scale = [j, f];
        this._result.viewport = g;
        return this._result;
      },
      preApply: function () {},
      apply: function () {
        return {
          scale: [1, 1]
        };
      },
      postApply: function () {}
    });
    (function () {
      var h = cc.Class({
        name: "EqualToFrame",
        extends: cc.ContainerStrategy,
        apply: function (d) {
          var a = d._frameSize.height;
          var b = cc.game.container.style;
          this._setupContainer(d, d._frameSize.width, d._frameSize.height);
          if (d._isRotated) {
            b.margin = "0 0 0 " + a + "px";
          } else {
            b.margin = "0px";
          }
          b.padding = "0px";
        }
      });
      var b = cc.Class({
        name: "ProportionalToFrame",
        extends: cc.ContainerStrategy,
        apply: function (f, b) {
          var d;
          var i;
          var n = f._frameSize.width;
          var j = f._frameSize.height;
          var k = cc.game.container.style;
          var m = b.width;
          var a = b.height;
          var o = n / m;
          var c = j / a;
          if (o < c) {
            d = n;
            i = a * o;
          } else {
            d = m * c;
            i = j;
          }
          var l = Math.round((n - d) / 2);
          var h = Math.round((j - i) / 2);
          d = n - l * 2;
          i = j - h * 2;
          this._setupContainer(f, d, i);
          if (f._isRotated) {
            k.margin = "0 0 0 " + j + "px";
          } else {
            k.margin = "0px";
          }
          k.paddingLeft = l + "px";
          k.paddingRight = l + "px";
          k.paddingTop = h + "px";
          k.paddingBottom = h + "px";
        }
      });
      cc.Class({
        name: "EqualToWindow",
        extends: h,
        preApply: function (b) {
          this._super(b);
          cc.game.frame = document.documentElement;
        },
        apply: function (b) {
          this._super(b);
          this._fixContainer();
        }
      });
      cc.Class({
        name: "ProportionalToWindow",
        extends: b,
        preApply: function (b) {
          this._super(b);
          cc.game.frame = document.documentElement;
        },
        apply: function (c, a) {
          this._super(c, a);
          this._fixContainer();
        }
      });
      var k = cc.Class({
        name: "OriginalContainer",
        extends: cc.ContainerStrategy,
        apply: function (b) {
          this._setupContainer(b, cc.game.canvas.width, cc.game.canvas.height);
        }
      });
      var e = (typeof window == "undefined" ? global : window).__globalAdapter;
      if (e) {
        if (e.adaptContainerStrategy) {
          e.adaptContainerStrategy(cc.ContainerStrategy.prototype);
        }
        if (e.adaptView) {
          e.adaptView(d.prototype);
        }
      }
      cc.ContainerStrategy.EQUAL_TO_FRAME = new h();
      cc.ContainerStrategy.PROPORTION_TO_FRAME = new b();
      cc.ContainerStrategy.ORIGINAL_CONTAINER = new k();
      var f = cc.Class({
        name: "ExactFit",
        extends: cc.ContentStrategy,
        apply: function (g, a) {
          var b = cc.game.canvas.width;
          var c = cc.game.canvas.height;
          var d = b / a.width;
          var e = c / a.height;
          return this._buildResult(b, c, b, c, d, e);
        }
      });
      var g = cc.Class({
        name: "ShowAll",
        extends: cc.ContentStrategy,
        apply: function (h, b) {
          var d;
          var i;
          var n = cc.game.canvas.width;
          var g = cc.game.canvas.height;
          var j = b.width;
          var k = b.height;
          var a = n / j;
          var m = g / k;
          var c = 0;
          if (a < m) {
            d = n;
            i = k * (c = a);
          } else {
            d = j * (c = m);
            i = g;
          }
          return this._buildResult(n, g, d, i, c, c);
        }
      });
      var i = cc.Class({
        name: "NoBorder",
        extends: cc.ContentStrategy,
        apply: function (h, b) {
          var d;
          var i;
          var n;
          var o = cc.game.canvas.width;
          var j = cc.game.canvas.height;
          var k = b.width;
          var a = b.height;
          var m = o / k;
          var c = j / a;
          if (m < c) {
            i = k * (d = c);
            n = j;
          } else {
            i = o;
            n = a * (d = m);
          }
          return this._buildResult(o, j, i, n, d, d);
        }
      });
      var j = cc.Class({
        name: "FixedHeight",
        extends: cc.ContentStrategy,
        apply: function (a, b) {
          var c = cc.game.canvas.width;
          var d = cc.game.canvas.height;
          var e = d / b.height;
          var f = c;
          var g = d;
          return this._buildResult(c, d, f, g, e, e);
        }
      });
      var a = cc.Class({
        name: "FixedWidth",
        extends: cc.ContentStrategy,
        apply: function (a, b) {
          var c = cc.game.canvas.width;
          var d = cc.game.canvas.height;
          var e = c / b.width;
          var f = c;
          var g = d;
          return this._buildResult(c, d, f, g, e, e);
        }
      });
      cc.ContentStrategy.EXACT_FIT = new f();
      cc.ContentStrategy.SHOW_ALL = new g();
      cc.ContentStrategy.NO_BORDER = new i();
      cc.ContentStrategy.FIXED_HEIGHT = new j();
      cc.ContentStrategy.FIXED_WIDTH = new a();
    })();
    cc.ResolutionPolicy = cc.Class({
      name: "cc.ResolutionPolicy",
      ctor: function (c, a) {
        this._containerStrategy = null;
        this._contentStrategy = null;
        this.setContainerStrategy(c);
        this.setContentStrategy(a);
      },
      preApply: function (b) {
        this._containerStrategy.preApply(b);
        this._contentStrategy.preApply(b);
      },
      apply: function (c, a) {
        this._containerStrategy.apply(c, a);
        return this._contentStrategy.apply(c, a);
      },
      postApply: function (b) {
        this._containerStrategy.postApply(b);
        this._contentStrategy.postApply(b);
      },
      setContainerStrategy: function (b) {
        if (b instanceof cc.ContainerStrategy) {
          this._containerStrategy = b;
        }
      },
      setContentStrategy: function (b) {
        if (b instanceof cc.ContentStrategy) {
          this._contentStrategy = b;
        }
      }
    });
    c.get(cc.ResolutionPolicy.prototype, "canvasSize", function () {
      return cc.v2(cc.game.canvas.width, cc.game.canvas.height);
    });
    cc.ResolutionPolicy.EXACT_FIT = 0;
    cc.ResolutionPolicy.NO_BORDER = 1;
    cc.ResolutionPolicy.SHOW_ALL = 2;
    cc.ResolutionPolicy.FIXED_HEIGHT = 3;
    cc.ResolutionPolicy.FIXED_WIDTH = 4;
    cc.ResolutionPolicy.UNKNOWN = 5;
    cc.view = new d();
    cc.winSize = cc.size();
    b.exports = cc.view;
  }, {
    "../event/event-target": 134,
    "../platform/CCClass": 162,
    "../platform/js": 183,
    "../renderer": 193
  }],
  173: [function () {
    "use strict";

    cc.visibleRect = {
      topLeft: cc.v2(0, 0),
      topRight: cc.v2(0, 0),
      top: cc.v2(0, 0),
      bottomLeft: cc.v2(0, 0),
      bottomRight: cc.v2(0, 0),
      bottom: cc.v2(0, 0),
      center: cc.v2(0, 0),
      left: cc.v2(0, 0),
      right: cc.v2(0, 0),
      width: 0,
      height: 0,
      init: function (a) {
        var b = this.width = a.width;
        var c = this.height = a.height;
        var d = a.x;
        var e = a.y;
        var f = e + c;
        var g = d + b;
        this.topLeft.x = d;
        this.topLeft.y = f;
        this.topRight.x = g;
        this.topRight.y = f;
        this.top.x = d + b / 2;
        this.top.y = f;
        this.bottomLeft.x = d;
        this.bottomLeft.y = e;
        this.bottomRight.x = g;
        this.bottomRight.y = e;
        this.bottom.x = d + b / 2;
        this.bottom.y = e;
        this.center.x = d + b / 2;
        this.center.y = e + c / 2;
        this.left.x = d;
        this.left.y = e + c / 2;
        this.right.x = g;
        this.right.y = e + c / 2;
      }
    };
  }, {}],
  174: [function (i, b) {
    "use strict";

    var j = i("./js");
    i("./utils").isPlainEmptyObj_DEV;
    var k = "$_$";
    function l(d, a) {
      var b = a ? Object.create(a) : {};
      j.value(d, "__attrs__", b);
      return b;
    }
    function c(e) {
      if (typeof e != "function") {
        return l(e, f(e.constructor));
      }
      for (var a, g = cc.Class.getInheritanceChain(e), c = g.length - 1; c >= 0; c--) {
        var h = g[c];
        if (!(h.hasOwnProperty("__attrs__") && h.__attrs__)) {
          l(h, (a = g[c + 1]) && a.__attrs__);
        }
      }
      l(e, (a = g[0]) && a.__attrs__);
      return e.__attrs__;
    }
    function f(b) {
      return b.hasOwnProperty("__attrs__") && b.__attrs__ || c(b);
    }
    function d(c, a) {
      this.name = c;
      this.default = a;
    }
    d.prototype.toString = function () {
      return this.name;
    };
    cc.Integer = new d("Integer", 0);
    cc.Float = new d("Float", 0);
    cc.Boolean = new d("Boolean", false);
    cc.String = new d("String", "");
    b.exports = {
      PrimitiveType: d,
      attr: function (h, a) {
        var b = f(h);
        var c = a + k;
        var d = {};
        for (var e in b) {
          if (e.startsWith(c)) {
            d[e.slice(c.length)] = b[e];
          }
        }
        return d;
      },
      getClassAttrs: f,
      setClassAttr: function (e, a, b, c) {
        f(e)[a + k + b] = c;
      },
      DELIMETER: k,
      getTypeChecker_ET: false,
      getObjTypeChecker_ET: false,
      ScriptUuid: {}
    };
  }, {
    "./CCClass": 162,
    "./js": 183,
    "./utils": 186
  }],
  175: [function (c, b) {
    "use strict";

    var d = c("./js");
    var e = d.array.fastRemoveAt;
    function f() {}
    function g() {
      this.callback = f;
      this.target = undefined;
      this.once = false;
    }
    g.prototype.set = function (d, a, b) {
      this.callback = d;
      this.target = a;
      this.once = !!b;
    };
    var n = new d.Pool(function (b) {
      b.callback = f;
      b.target = undefined;
      b.once = false;
      return true;
    }, 32);
    function h() {
      this.callbackInfos = [];
      this.isInvoking = false;
      this.containCanceled = false;
    }
    n.get = function () {
      return this._get() || new g();
    };
    var a = h.prototype;
    a.removeByCallback = function (d) {
      for (var a = 0; a < this.callbackInfos.length; ++a) {
        var f = this.callbackInfos[a];
        if (f && f.callback === d) {
          n.put(f);
          e(this.callbackInfos, a);
          --a;
        }
      }
    };
    a.removeByTarget = function (d) {
      for (var a = 0; a < this.callbackInfos.length; ++a) {
        var f = this.callbackInfos[a];
        if (f && f.target === d) {
          n.put(f);
          e(this.callbackInfos, a);
          --a;
        }
      }
    };
    a.cancel = function (c) {
      var a = this.callbackInfos[c];
      if (a) {
        n.put(a);
        this.callbackInfos[c] = null;
      }
      this.containCanceled = true;
    };
    a.cancelAll = function () {
      for (var c = 0; c < this.callbackInfos.length; c++) {
        var d = this.callbackInfos[c];
        if (d) {
          n.put(d);
          this.callbackInfos[c] = null;
        }
      }
      this.containCanceled = true;
    };
    a.purgeCanceled = function () {
      for (var b = this.callbackInfos.length - 1; b >= 0; --b) {
        if (!this.callbackInfos[b]) {
          e(this.callbackInfos, b);
        }
      }
      this.containCanceled = false;
    };
    a.clear = function () {
      this.cancelAll();
      this.callbackInfos.length = 0;
      this.isInvoking = false;
      this.containCanceled = false;
    };
    var i = new d.Pool(function (b) {
      b.callbackInfos.length = 0;
      b.isInvoking = false;
      b.containCanceled = false;
      return true;
    }, 16);
    function j() {
      this._callbackTable = d.createMap(true);
    }
    i.get = function () {
      return this._get() || new h();
    };
    (a = j.prototype).on = function (g, a, b, c) {
      var d = this._callbackTable[g];
      if (!d) {
        d = this._callbackTable[g] = i.get();
      }
      var h = n.get();
      h.set(a, b, c);
      d.callbackInfos.push(h);
    };
    a.add = a.on;
    a.hasEventListener = function (a, b, c) {
      var d = this._callbackTable[a];
      if (!d) {
        return false;
      }
      var e = d.callbackInfos;
      if (!b) {
        if (d.isInvoking) {
          for (var f = 0; f < e.length; ++f) {
            if (e[f]) {
              return true;
            }
          }
          return false;
        }
        return e.length > 0;
      }
      for (var j = 0; j < e.length; ++j) {
        var k = e[j];
        if (k && k.callback === b && k.target === c) {
          return true;
        }
      }
      return false;
    };
    a.removeAll = function (a) {
      if (typeof a == "string") {
        var b = this._callbackTable[a];
        if (b) {
          if (b.isInvoking) {
            b.cancelAll();
          } else {
            b.clear();
            i.put(b);
            delete this._callbackTable[a];
          }
        }
      } else if (a) {
        for (var c in this._callbackTable) {
          var j = this._callbackTable[c];
          if (j.isInvoking) {
            for (var k = j.callbackInfos, l = 0; l < k.length; ++l) {
              var m = k[l];
              if (m && m.target === a) {
                j.cancel(l);
              }
            }
          } else {
            j.removeByTarget(a);
          }
        }
      }
    };
    a.off = function (c, a, b) {
      var d = this._callbackTable[c];
      if (d) {
        for (var f = d.callbackInfos, g = 0; g < f.length; ++g) {
          var j = f[g];
          if (j && j.callback === a && j.target === b) {
            if (d.isInvoking) {
              d.cancel(g);
            } else {
              e(f, g);
              n.put(j);
            }
            return true;
          }
        }
      }
      return false;
    };
    a.remove = a.off;
    a.emit = function (d, b, f, e, g, i) {
      var j = this._callbackTable[d];
      if (j) {
        var k = !j.isInvoking;
        j.isInvoking = true;
        for (var a = j.callbackInfos, l = 0, m = a.length; l < m; ++l) {
          var n = a[l];
          if (n) {
            var o = n.target;
            var r = n.callback;
            if (n.once) {
              this.off(d, r, o);
            }
            if (o) {
              r.call(o, b, f, e, g, i);
            } else {
              r(b, f, e, g, i);
            }
          }
        }
        if (k) {
          j.isInvoking = false;
          if (j.containCanceled) {
            j.purgeCanceled();
          }
        }
      }
    };
    a.invoke = a.emit;
    b.exports = j;
  }, {
    "./js": 183
  }],
  176: [function (d, a) {
    "use strict";

    function f(c, a) {
      for (var b = 0; b < a.length; b++) {
        var g = a[b];
        if (Array.isArray(g)) {
          f(c, g);
        } else {
          c.push(g);
        }
      }
    }
    a.exports = {
      flattenCodeArray: function (c) {
        var a = [];
        f(a, c);
        return a.join("");
      }
    };
  }, {}],
  177: [function (K, j, k) {
    "use strict";

    k.__esModule = true;
    k.default = H;
    k.getDependUuidList = function (c) {
      var d = c[1];
      return c[10].map(function (b) {
        return d[b];
      });
    };
    k.hasNativeDep = function (d) {
      var a = d[5];
      var b = a[a.length - 1];
      return typeof b == "number" && b < 0;
    };
    k.packCustomObjData = function (d, a, b) {
      return [1, r, r, [d], r, b ? [a, -1] : [a], [0], r, [], [], []];
    };
    k.unpackJSONs = function (c, b) {
      if (c[0] < 1) {
        throw Error(cc.debug.getError(5304, c[0]));
      }
      w(c, true, b);
      F(c);
      for (var d = new I(c[0]), e = c[1], f = c[2], g = c[3], h = c[4], i = c[p], a = 0; a < i.length; ++a) {
        i[a].unshift(d, e, f, g, h);
      }
      return i;
    };
    var L = h(K("./js"));
    var e = h(K("../value-types/vec2"));
    var i = h(K("../value-types/vec3"));
    var n = h(K("../value-types/vec4"));
    var q = h(K("../value-types/color"));
    var a = h(K("../value-types/size"));
    var o = h(K("../value-types/rect"));
    var c = h(K("../value-types/quat"));
    var l = h(K("../value-types/mat4"));
    function h(b) {
      if (b && b.__esModule) {
        return b;
      } else {
        return {
          default: b
        };
      }
    }
    var r = 0;
    var s = [e.default, i.default, n.default, c.default, q.default, a.default, o.default, l.default];
    function d(c, a) {
      c.x = a[1];
      c.y = a[2];
      c.z = a[3];
      c.w = a[4];
    }
    var t = [function (c, a) {
      c.x = a[1];
      c.y = a[2];
    }, function (c, a) {
      c.x = a[1];
      c.y = a[2];
      c.z = a[3];
    }, d, d, function (c, a) {
      c._val = a[1];
    }, function (c, a) {
      c.width = a[1];
      c.height = a[2];
    }, function (c, a) {
      c.x = a[1];
      c.y = a[2];
      c.width = a[3];
      c.height = a[4];
    }, function (c, a) {
      l.default.fromArray(c, a, 1);
    }];
    var f = 0;
    var p = 5;
    var u = function () {
      function c() {
        this.uuidObjList = null;
        this.uuidPropList = null;
        this.uuidList = null;
      }
      var a = c.prototype;
      a.init = function (b) {
        this.uuidObjList = b[8];
        this.uuidPropList = b[9];
        this.uuidList = b[10];
      };
      a.reset = function () {
        this.uuidList = null;
        this.uuidObjList = null;
        this.uuidPropList = null;
      };
      a.push = function (d, a, b) {
        this.uuidObjList.push(d);
        this.uuidPropList.push(a);
        this.uuidList.push(b);
      };
      return c;
    }();
    function g(a, b, c) {
      for (var d = a.length - 1, e = 0, f = a[d] * 3; e < f; e += 3) {
        var h = a[e];
        var i = b[a[e + 2]];
        var l = a[e + 1];
        if (l >= 0) {
          h[c[l]] = i;
        } else {
          h[~l] = i;
        }
      }
      for (; e < d; e += 3) {
        var o = b[a[e]];
        var r = b[a[e + 2]];
        var s = a[e + 1];
        if (s >= 0) {
          o[c[s]] = r;
        } else {
          o[~s] = r;
        }
      }
    }
    function m(c, b) {
      for (var d = c[4][b[0]], e = d[0], f = new (0, e[0])(), g = e[1], h = e[2], i = d[d.length - 1], a = 1; a < i; ++a) {
        f[g[d[a]]] = b[a];
      }
      for (; a < b.length; ++a) {
        var j = g[d[a]];
        var l = e[d[a] + h];
        (0, B[l])(c, f, j, b[a]);
      }
      return f;
    }
    function v(e, a, b) {
      var c = new a();
      if (c._deserialize) {
        c._deserialize(b, e[0]);
      }
      return c;
    }
    function y(e, a, b, c) {
      if (c >= 0) {
        a[b] = e[5][c];
      } else {
        e[7][~c * 3] = a;
      }
    }
    function z(c) {
      return function (a, b, g, d) {
        b[g] = d;
        for (var e = 0; e < d.length; ++e) {
          c(a, d, e, d[e]);
        }
      };
    }
    function x(e, a, b, c) {
      a[b] = null;
      e[8][c] = a;
    }
    function A(e, a, b, c) {
      a[b] = m(e, c);
    }
    u.pool = new L.default.Pool(function (b) {
      b.reset();
    }, 5);
    u.pool.get = function () {
      return this._get() || new u();
    };
    var B = Array(13);
    function C(a) {
      var b = a[5];
      var c = a[6];
      var d = c === 0 ? 0 : c.length;
      var e = b[b.length - 1];
      var f = b.length - d;
      if (typeof e != "number") {
        e = 0;
      } else {
        if (e < 0) {
          e = ~e;
        }
        --f;
      }
      for (var h = 0; h < f; ++h) {
        b[h] = m(a, b[h]);
      }
      for (var l = a[3], k = 0; k < d; ++k, ++h) {
        var q = c[k];
        var r = b[h];
        if (q >= 0) {
          var s = l[q];
          b[h] = v(a, s, r);
        } else {
          (0, B[q = ~q])(a, b, h, r);
        }
      }
      return e;
    }
    function E(c, a) {
      if (!c) {
        H.reportMissingClass(a);
      }
      return Object;
    }
    function b(i, a, b, c, d, f) {
      var e = i(a);
      if (!e) {
        if (d) {
          b[c] = function (b, a, c) {
            return function () {
              var d = i(c) || E(f, c);
              b[a] = d;
              return new d();
            };
          }(b, c, a);
          return;
        }
        e = E(f, a);
      }
      b[c] = e;
    }
    function w(a, i, c) {
      for (var d = c || L.default._getClassById, e = a[3], j = 0; j < e.length; ++j) {
        var k = e[j];
        if (typeof k != "string") {
          b(d, k[0], k, f, i, c);
        } else {
          b(d, k, e, j, i, c);
        }
      }
    }
    function F(f) {
      var a = f[4];
      if (a) {
        for (var b = f[3], c = 0; c < a.length; ++c) {
          var g = a[c];
          g[0] = b[g[0]];
        }
      }
    }
    function G(c) {
      for (var b = c[5], d = c[2], e = c[1], f = c[8], g = c[9], h = c[10], i = 0; i < f.length; ++i) {
        var j = f[i];
        if (typeof j == "number") {
          f[i] = b[j];
        }
        var l = g[i];
        if (typeof l == "number") {
          l = l >= 0 ? d[l] : ~l;
          g[i] = l;
        }
        var o = h[i];
        if (typeof o == "number") {
          h[i] = e[o];
        }
      }
    }
    function H(e, i, k) {
      if (typeof e == "string") {
        e = JSON.parse(e);
      }
      var l = !i;
      (i = i || u.pool.get()).init(e);
      k = k || {};
      var f = e[0];
      var m = false;
      if (typeof f == "object") {
        m = f.preprocessed;
        f = f.version;
      }
      if (f < 1) {
        throw Error(cc.debug.getError(5304, f));
      }
      k._version = f;
      k.result = i;
      e[0] = k;
      if (!m) {
        w(e, false, k.classFinder);
        F(e);
      }
      cc.game._isCloning = true;
      var n = e[5];
      var j = C(e);
      cc.game._isCloning = false;
      if (e[7]) {
        g(e[7], n, e[2]);
      }
      G(e);
      if (l) {
        u.pool.put(i);
      }
      return n[j];
    }
    B[0] = function (e, a, b, c) {
      a[b] = c;
    };
    B[1] = y;
    B[2] = z(y);
    B[3] = z(x);
    B[4] = A;
    B[5] = function (e, a, b, c) {
      t[c[0]](a[b], c);
    };
    B[6] = x;
    B[7] = function (e, a, b, c) {
      a[b].set(c);
    };
    B[8] = function (d, a, b, c) {
      var e = new s[c[0]]();
      t[c[0]](e, c);
      a[b] = e;
    };
    B[9] = z(A);
    B[10] = function (f, a, b, c) {
      var d = f[3][c[0]];
      a[b] = v(f, d, c[1]);
    };
    B[11] = function (a, b, c, d) {
      var e = d[0];
      b[c] = e;
      for (var f = 1; f < d.length; f += 3) {
        var g = d[f];
        var l = d[f + 1];
        var m = d[f + 2];
        (0, B[l])(a, e, g, m);
      }
    };
    B[12] = function (a, b, c, d) {
      var e = d[0];
      b[c] = e;
      for (var f = 0; f < e.length; ++f) {
        var j = e[f];
        var k = d[f + 1];
        if (k !== 0) {
          (0, B[k])(a, e, f, j);
        }
      }
    };
    H.Details = u;
    function I(b) {
      this.preprocessed = true;
      this.version = b;
    }
  }, {
    "../value-types/color": 250,
    "../value-types/mat4": 253,
    "../value-types/quat": 254,
    "../value-types/rect": 255,
    "../value-types/size": 256,
    "../value-types/vec2": 260,
    "../value-types/vec3": 261,
    "../value-types/vec4": 262,
    "./js": 183
  }],
  178: [function (d) {
    "use strict";

    var a;
    var e = (a = d("./deserialize-compiled")) && a.__esModule ? a : {
      default: a
    };
    e.default.reportMissingClass = function () {};
    cc.deserialize = e.default;
  }, {
    "./deserialize-compiled": 177,
    "./deserialize-editor": undefined
  }],
  179: [function (e, a) {
    "use strict";

    var b = ".";
    function c(c) {
      this.id = Math.random() * 998 | 0;
      this.prefix = c ? c + b : "";
    }
    c.prototype.getNewId = function () {
      return this.prefix + ++this.id;
    };
    c.global = new c("global");
    a.exports = c;
  }, {}],
  180: [function (b) {
    "use strict";

    b("./js");
    b("./CCClass");
    b("./CCClassDecorator");
    b("./CCEnum");
    b("./CCObject");
    b("./callbacks-invoker");
    b("./deserialize");
    b("./instantiate");
    b("./instantiate-jit");
    b("./requiring-frame");
    b("./CCSys");
    b("./CCMacro");
    b("./CCVisibleRect");
  }, {
    "./CCClass": 162,
    "./CCClassDecorator": 163,
    "./CCEnum": 164,
    "./CCMacro": 167,
    "./CCObject": 168,
    "./CCSys": 171,
    "./CCVisibleRect": 173,
    "./callbacks-invoker": 175,
    "./deserialize": 178,
    "./instantiate": 182,
    "./instantiate-jit": 181,
    "./js": 183,
    "./requiring-frame": 185
  }],
  181: [function (x, b) {
    "use strict";

    var j = x("./CCObject");
    var k = j.Flags.Destroyed;
    var q = j.Flags.PersistentMask;
    var y = x("./attribute");
    var w = x("./js");
    var e = x("./CCClass");
    var z = x("./compiler");
    var a = y.DELIMETER + "default";
    var i = e.IDENTIFIER_RE;
    var c = e.escapeForJS;
    var o = "var ";
    var A = "o";
    var l = "t";
    var d = {
      "cc.Node": "cc.Node",
      "cc.Sprite": "cc.Sprite",
      "cc.Label": "cc.Label",
      "cc.Button": "cc.Button",
      "cc.Widget": "cc.Widget",
      "cc.Animation": "cc.Animation",
      "cc.ClickEvent": false,
      "cc.PrefabInfo": false
    };
    try {
      if (!Float32Array.name) {
        Float32Array.name = "Float32Array";
      }
      if (!Float64Array.name) {
        Float64Array.name = "Float64Array";
      }
      if (!Int8Array.name) {
        Int8Array.name = "Int8Array";
      }
      if (!Int16Array.name) {
        Int16Array.name = "Int16Array";
      }
      if (!Int32Array.name) {
        Int32Array.name = "Int32Array";
      }
      if (!Uint8Array.name) {
        Uint8Array.name = "Uint8Array";
      }
      if (!Uint16Array.name) {
        Uint16Array.name = "Uint16Array";
      }
      if (!Uint32Array.name) {
        Uint32Array.name = "Uint32Array";
      }
      if (!Uint8ClampedArray.name) {
        Uint8ClampedArray.name = "Uint8ClampedArray";
      }
    } catch (b) {}
    function f(b) {
      if (b === Float32Array) {
        return "Float32Array";
      }
      if (b === Float64Array) {
        return "Float64Array";
      }
      if (b === Int8Array) {
        return "Int8Array";
      }
      if (b === Int16Array) {
        return "Int16Array";
      }
      if (b === Int32Array) {
        return "Int32Array";
      }
      if (b === Uint8Array) {
        return "Uint8Array";
      }
      if (b === Uint16Array) {
        return "Uint16Array";
      }
      if (b === Uint32Array) {
        return "Uint32Array";
      }
      if (b === Uint8ClampedArray) {
        return "Uint8ClampedArray";
      }
      throw Error("Unknown TypedArray to instantiate: " + b);
    }
    function h(c, a) {
      this.varName = c;
      this.expression = a;
    }
    function p(c, a) {
      if (a instanceof h) {
        return new h(a.varName, c + a.expression);
      } else {
        return c + a;
      }
    }
    function g(d, a, b) {
      if (Array.isArray(b)) {
        b[0] = p(a, b[0]);
        d.push(b);
      } else {
        d.push(p(a, b) + ";");
      }
    }
    function s(b) {
      this._exps = [];
      this._targetExp = b;
    }
    function u(c, d) {
      if (typeof c == "function") {
        try {
          c = c();
        } catch (b) {
          return false;
        }
      }
      if (c === d) {
        return true;
      }
      if (c && d && typeof c == "object" && typeof d == "object" && c.constructor === d.constructor) {
        if (c instanceof cc.ValueType) {
          if (c.equals(d)) {
            return true;
          }
        } else {
          if (Array.isArray(c)) {
            return c.length === 0 && d.length === 0;
          }
          if (c.constructor === Object) {
            return w.isEmptyObject(c) && w.isEmptyObject(d);
          }
        }
      }
      return false;
    }
    function v(b) {
      if (i.test(b)) {
        return "." + b;
      } else {
        return "[" + c(b) + "]";
      }
    }
    function m(f, a) {
      var b;
      this.parent = a;
      this.objsToClear_iN$t = [];
      this.codeArray = [];
      this.objs = [];
      this.funcs = [];
      this.funcModuleCache = w.createMap();
      w.mixin(this.funcModuleCache, d);
      this.globalVariables = [];
      this.globalVariableId = 0;
      this.localVariableId = 0;
      this.codeArray.push(o + A + "," + l + ";", "if(R){", A + "=R;", "}else{", A + "=R=new " + this.getFuncModule(f.constructor, true) + "();", "}");
      w.value(f, "_iN$t", {
        globalVar: "R"
      }, true);
      this.objsToClear_iN$t.push(f);
      this.enumerateObject(this.codeArray, f);
      if (this.globalVariables.length > 0) {
        b = o + this.globalVariables.join(",") + ";";
      }
      var i = z.flattenCodeArray(["return (function(R){", b || [], this.codeArray, "return o;", "})"]);
      this.result = Function("O", "F", i)(this.objs, this.funcs);
      for (var e = 0, j = this.objsToClear_iN$t.length; e < j; ++e) {
        this.objsToClear_iN$t[e]._iN$t = null;
      }
      this.objsToClear_iN$t.length = 0;
    }
    h.prototype.toString = function () {
      return o + this.varName + "=" + this.expression + ";";
    };
    s.prototype.append = function (c, a) {
      this._exps.push([c, a]);
    };
    s.prototype.writeCode = function (d) {
      var a;
      if (this._exps.length > 1) {
        d.push(l + "=" + this._targetExp + ";");
        a = l;
      } else {
        if (this._exps.length !== 1) {
          return;
        }
        a = this._targetExp;
      }
      for (var e = 0; e < this._exps.length; e++) {
        var h = this._exps[e];
        g(d, a + v(h[0]) + "=", h[1]);
      }
    };
    s.pool = new w.Pool(function (b) {
      b._exps.length = 0;
      b._targetExp = null;
    }, 1);
    s.pool.get = function (c) {
      var a = this._get() || new s();
      a._targetExp = c;
      return a;
    };
    var n = m.prototype;
    n.getFuncModule = function (h, a) {
      var b = w.getClassName(h);
      if (b) {
        var c = this.funcModuleCache[b];
        if (c) {
          return c;
        }
        if (c === undefined) {
          var d = b.indexOf(".") !== -1;
          if (d) {
            try {
              if (d = h === Function("return " + b)()) {
                this.funcModuleCache[b] = b;
                return b;
              }
            } catch (b) {}
          }
        }
      }
      var i = this.funcs.indexOf(h);
      if (i < 0) {
        i = this.funcs.length;
        this.funcs.push(h);
      }
      var j = "F[" + i + "]";
      if (a) {
        j = "(" + j + ")";
      }
      this.funcModuleCache[b] = j;
      return j;
    };
    n.getObjRef = function (c) {
      var a = this.objs.indexOf(c);
      if (a < 0) {
        a = this.objs.length;
        this.objs.push(c);
      }
      return "O[" + a + "]";
    };
    n.setValueType = function (a, b, c, d) {
      var e = s.pool.get(d);
      var f = b.constructor.__props__;
      if (!f) {
        f = Object.keys(b);
      }
      for (var g = 0; g < f.length; g++) {
        var l = f[g];
        var n = c[l];
        if (b[l] !== n) {
          var o = this.enumerateField(c, l, n);
          e.append(l, o);
        }
      }
      e.writeCode(a);
      s.pool.put(e);
    };
    n.enumerateCCClass = function (c, b, d) {
      for (var f = d.__values__, g = y.getClassAttrs(d), h = 0; h < f.length; h++) {
        var i = f[h];
        var j = b[i];
        var p = g[i + a];
        if (!u(p, j)) {
          if (typeof j == "object" && j instanceof cc.ValueType && (p = e.getDefault(p)) && p.constructor === j.constructor) {
            var q = A + v(i);
            this.setValueType(c, p, j, q);
          } else {
            this.setObjProp(c, b, i, j);
          }
        }
      }
    };
    n.instantiateArray = function (e) {
      if (e.length === 0) {
        return "[]";
      }
      var a = "a" + ++this.localVariableId;
      var b = [new h(a, "new Array(" + e.length + ")")];
      w.value(e, "_iN$t", {
        globalVar: "",
        source: b
      }, true);
      this.objsToClear_iN$t.push(e);
      for (var c = 0; c < e.length; ++c) {
        g(b, a + "[" + c + "]=", this.enumerateField(e, c, e[c]));
      }
      return b;
    };
    n.instantiateTypedArray = function (i) {
      var a = i.constructor.name || f(i.constructor);
      if (i.length === 0) {
        return "new " + a;
      }
      var b = "a" + ++this.localVariableId;
      var c = [new h(b, "new " + a + "(" + i.length + ")")];
      i._iN$t = {
        globalVar: "",
        source: c
      };
      this.objsToClear_iN$t.push(i);
      for (var d = 0; d < i.length; ++d) {
        if (i[d] !== 0) {
          g(c, b + "[" + d + "]=", i[d]);
        }
      }
      return c;
    };
    n.enumerateField = function (a, b, e) {
      if (typeof e == "object" && e) {
        var g = e._iN$t;
        if (g) {
          var f = g.globalVar;
          if (!f) {
            f = g.globalVar = "v" + ++this.globalVariableId;
            this.globalVariables.push(f);
            var h = g.source[0];
            g.source[0] = p(f + "=", h);
          }
          return f;
        }
        if (ArrayBuffer.isView(e)) {
          return this.instantiateTypedArray(e);
        } else if (Array.isArray(e)) {
          return this.instantiateArray(e);
        } else {
          return this.instantiateObj(e);
        }
      }
      if (typeof e == "function") {
        return this.getFuncModule(e);
      } else if (typeof e == "string") {
        return c(e);
      } else {
        if (b === "_objFlags" && a instanceof j) {
          e &= q;
        }
        return e;
      }
    };
    n.setObjProp = function (e, a, b, c) {
      g(e, A + v(b) + "=", this.enumerateField(a, b, c));
    };
    n.enumerateObject = function (f, a) {
      var b = a.constructor;
      if (cc.Class._isCCClass(b)) {
        this.enumerateCCClass(f, a, b);
      } else {
        for (var c in a) {
          if (a.hasOwnProperty(c) && (c.charCodeAt(0) !== 95 || c.charCodeAt(1) !== 95 || c === "__type__")) {
            var g = a[c];
            if (!(typeof g == "object" && g && g === a._iN$t)) {
              this.setObjProp(f, a, c, g);
            }
          }
        }
      }
    };
    n.instantiateObj = function (a) {
      if (a instanceof cc.ValueType) {
        return e.getNewValueTypeCode(a);
      }
      if (a instanceof cc.Asset) {
        return this.getObjRef(a);
      }
      if (a._objFlags & k) {
        return null;
      }
      var b;
      var i = a.constructor;
      if (cc.Class._isCCClass(i)) {
        if (this.parent) {
          if (this.parent instanceof cc.Component) {
            if (a instanceof cc._BaseNode || a instanceof cc.Component) {
              return this.getObjRef(a);
            }
          } else if (this.parent instanceof cc._BaseNode) {
            if (a instanceof cc._BaseNode) {
              if (!a.isChildOf(this.parent)) {
                return this.getObjRef(a);
              }
            } else if (a instanceof cc.Component) {
              var d;
              if ((d = a.node) == null || !d.isChildOf(this.parent)) {
                return this.getObjRef(a);
              }
            }
          }
        }
        b = new h(A, "new " + this.getFuncModule(i, true) + "()");
      } else if (i === Object) {
        b = new h(A, "{}");
      } else {
        if (i) {
          return this.getObjRef(a);
        }
        b = new h(A, "Object.create(null)");
      }
      var j = [b];
      w.value(a, "_iN$t", {
        globalVar: "",
        source: j
      }, true);
      this.objsToClear_iN$t.push(a);
      this.enumerateObject(j, a);
      return ["(function(){", j, "return o;})();"];
    };
    b.exports = {
      compile: function (b) {
        return new m(b, b instanceof cc._BaseNode && b).result;
      },
      equalsToDefault: u
    };
  }, {
    "./CCClass": 162,
    "./CCObject": 168,
    "./attribute": 174,
    "./compiler": 176,
    "./js": 183
  }],
  182: [function (d, b) {
    "use strict";

    var n = d("./CCObject");
    var u = d("../value-types/value-type");
    var k = n.Flags.Destroyed;
    var e = n.Flags.PersistentMask;
    var g = d("./utils").isDomNode;
    var i = d("./js");
    function j(c, a) {
      if (!a) {
        if (typeof c != "object" || Array.isArray(c)) {
          return null;
        }
        if (!c) {
          return null;
        }
        if (!cc.isValid(c)) {
          return null;
        }
      }
      var b;
      if (c instanceof n) {
        if (c._instantiate) {
          cc.game._isCloning = true;
          b = c._instantiate(null, true);
          cc.game._isCloning = false;
          return b;
        }
        if (c instanceof cc.Asset) {
          return null;
        }
      }
      cc.game._isCloning = true;
      b = o(c);
      cc.game._isCloning = false;
      return b;
    }
    var m = [];
    function o(f, a) {
      if (Array.isArray(f)) {
        return null;
      }
      if (g && g(f)) {
        return null;
      }
      var b;
      h(f, b = f._iN$t ? f._iN$t : f.constructor ? new (0, f.constructor)() : Object.create(null), a);
      for (var i = 0, j = m.length; i < j; ++i) {
        m[i]._iN$t = null;
      }
      m.length = 0;
      return b;
    }
    function a(a, b, c, d) {
      for (var e = a.__values__, f = 0; f < e.length; f++) {
        var g = e[f];
        var h = b[g];
        if (typeof h == "object" && h) {
          var k = c[g];
          if (k instanceof u && k.constructor === h.constructor) {
            k.set(h);
          } else {
            c[g] = h._iN$t || p(h, d);
          }
        } else {
          c[g] = h;
        }
      }
    }
    function h(c, b, d) {
      i.value(c, "_iN$t", b, true);
      m.push(c);
      var f = c.constructor;
      if (cc.Class._isCCClass(f)) {
        a(f, c, b, d);
      } else {
        for (var g in c) {
          if (c.hasOwnProperty(g) && (g.charCodeAt(0) !== 95 || g.charCodeAt(1) !== 95 || g === "__type__")) {
            var h = c[g];
            if (typeof h == "object" && h) {
              if (h === b) {
                continue;
              }
              b[g] = h._iN$t || p(h, d);
            } else {
              b[g] = h;
            }
          }
        }
      }
      if (c instanceof n) {
        b._objFlags &= e;
      }
    }
    function p(a, b) {
      if (a instanceof u) {
        return a.clone();
      }
      if (a instanceof cc.Asset) {
        return a;
      }
      var d;
      if (ArrayBuffer.isView(a)) {
        var f = a.length;
        d = new a.constructor(f);
        a._iN$t = d;
        m.push(a);
        for (var g = 0; g < f; ++g) {
          d[g] = a[g];
        }
        return d;
      }
      if (Array.isArray(a)) {
        var l = a.length;
        d = Array(l);
        i.value(a, "_iN$t", d, true);
        m.push(a);
        for (var n = 0; n < l; ++n) {
          var o = a[n];
          d[n] = typeof o == "object" && o ? o._iN$t || p(o, b) : o;
        }
        return d;
      }
      if (a._objFlags & k) {
        return null;
      }
      var q = a.constructor;
      if (cc.Class._isCCClass(q)) {
        if (b) {
          if (b instanceof cc.Component) {
            if (a instanceof cc._BaseNode || a instanceof cc.Component) {
              return a;
            }
          } else if (b instanceof cc._BaseNode) {
            if (a instanceof cc._BaseNode) {
              if (!a.isChildOf(b)) {
                return a;
              }
            } else if (a instanceof cc.Component) {
              var s;
              if ((s = a.node) == null || !s.isChildOf(b)) {
                return a;
              }
            }
          }
        }
        d = new q();
      } else if (q === Object) {
        d = {};
      } else {
        if (q) {
          return a;
        }
        d = Object.create(null);
      }
      h(a, d, b);
      return d;
    }
    j._clone = o;
    cc.instantiate = j;
    b.exports = j;
  }, {
    "../value-types/value-type": 259,
    "./CCObject": 168,
    "./js": 183,
    "./utils": 186
  }],
  183: [function (i, b) {
    "use strict";

    var g = new (i("./id-generater"))("TmpCId.");
    function j(d, e) {
      for (; d;) {
        var b = Object.getOwnPropertyDescriptor(d, e);
        if (b) {
          return b;
        }
        d = Object.getPrototypeOf(d);
      }
      return null;
    }
    function k(e, a, b) {
      var c = j(a, e);
      Object.defineProperty(b, e, c);
    }
    var q = {
      isNumber: function (b) {
        return typeof b == "number" || b instanceof Number;
      },
      isString: function (b) {
        return typeof b == "string" || b instanceof String;
      },
      addon: function (e) {
        e = e || {};
        for (var g = 1, h = arguments.length; g < h; g++) {
          var c = arguments[g];
          if (c) {
            if (typeof c != "object") {
              continue;
            }
            for (var i in c) {
              if (!(i in e)) {
                k(i, c, e);
              }
            }
          }
        }
        return e;
      },
      mixin: function (e) {
        e = e || {};
        for (var g = 1, h = arguments.length; g < h; g++) {
          var c = arguments[g];
          if (c) {
            if (typeof c != "object") {
              continue;
            }
            for (var i in c) {
              k(i, c, e);
            }
          }
        }
        return e;
      },
      extend: function (d, a) {
        for (var b in a) {
          if (a.hasOwnProperty(b)) {
            d[b] = a[b];
          }
        }
        d.prototype = Object.create(a.prototype, {
          constructor: {
            value: d,
            writable: true,
            configurable: true
          }
        });
        return d;
      },
      getSuper: function (d) {
        var a = d.prototype;
        var b = a && Object.getPrototypeOf(a);
        return b && b.constructor;
      },
      isChildClassOf: function (c, d) {
        if (c && d) {
          if (typeof c != "function") {
            return false;
          }
          if (typeof d != "function") {
            return false;
          }
          if (c === d) {
            return true;
          }
          for (;;) {
            if (!(c = q.getSuper(c))) {
              return false;
            }
            if (c === d) {
              return true;
            }
          }
        }
        return false;
      },
      clear: function (d) {
        for (var a = Object.keys(d), b = 0; b < a.length; b++) {
          delete d[a[b]];
        }
      },
      isEmptyObject: function (c) {
        for (var a in c) {
          return false;
        }
        return true;
      },
      getPropertyDescriptor: j
    };
    var m = {
      value: undefined,
      enumerable: false,
      writable: false,
      configurable: true
    };
    q.value = function (f, a, b, c, d) {
      m.value = b;
      m.writable = c;
      m.enumerable = d;
      Object.defineProperty(f, a, m);
      m.value = undefined;
    };
    var p = {
      get: null,
      set: null,
      enumerable: false
    };
    q.getset = function (a, b, c, d, h, i) {
      if (typeof d != "function") {
        h = d;
        d = undefined;
      }
      p.get = c;
      p.set = d;
      p.enumerable = h;
      p.configurable = i;
      Object.defineProperty(a, b, p);
      p.get = null;
      p.set = null;
    };
    var r = {
      get: null,
      enumerable: false,
      configurable: false
    };
    q.get = function (f, a, b, c, d) {
      r.get = b;
      r.enumerable = c;
      r.configurable = d;
      Object.defineProperty(f, a, r);
      r.get = null;
    };
    var o = {
      set: null,
      enumerable: false,
      configurable: false
    };
    q.set = function (c, a, b, d, e) {
      o.set = b;
      o.enumerable = d;
      o.configurable = e;
      Object.defineProperty(c, a, o);
      o.set = null;
    };
    q.getClassName = function (f) {
      if (typeof f == "function") {
        var a = f.prototype;
        if (a && a.hasOwnProperty("__classname__") && a.__classname__) {
          return a.__classname__;
        }
        var b = "";
        if (f.name) {
          b = f.name;
        }
        if (f.toString) {
          var g;
          var h = f.toString();
          if ((g = h.charAt(0) === "[" ? h.match(/\[\w+\s*(\w+)\]/) : h.match(/function\s*(\w+)/)) && g.length === 2) {
            b = g[1];
          }
        }
        if (b !== "Object") {
          return b;
        } else {
          return "";
        }
      }
      if (f && f.constructor) {
        return q.getClassName(f.constructor);
      } else {
        return "";
      }
    };
    (function () {
      var f = {};
      var e = {};
      function a(f, a, g) {
        q.getset(q, a, function () {
          return Object.assign({}, g);
        }, function (b) {
          q.clear(g);
          Object.assign(g, b);
        });
        return function (a, b) {
          if (b.prototype.hasOwnProperty(f)) {
            delete g[b.prototype[f]];
          }
          q.value(b.prototype, f, a);
          if (a) {
            var c = g[a];
            if (!(c && c !== b)) {
              g[a] = b;
            }
          }
        };
      }
      q._setClassId = a("__cid__", "_registeredClassIds", f);
      var h = a("__classname__", "_registeredClassNames", e);
      q.setClassName = function (d, a) {
        h(d, a);
        if (!a.prototype.hasOwnProperty("__cid__")) {
          var b = d || g.getNewId();
          if (b) {
            q._setClassId(b, a);
          }
        }
      };
      q.unregisterClass = function () {
        for (var a = 0; a < arguments.length; a++) {
          var b = arguments[a].prototype;
          var g = b.__cid__;
          if (g) {
            delete f[g];
          }
          var h = b.__classname__;
          if (h) {
            delete e[h];
          }
        }
      };
      q._getClassById = function (a) {
        return f[a];
      };
      q.getClassByName = function (b) {
        return e[b];
      };
      q._getClassId = function (d, a) {
        a = a === undefined || a;
        if (typeof d == "function" && d.prototype.hasOwnProperty("__cid__")) {
          return d.prototype.__cid__;
        }
        if (d && d.constructor) {
          var e = d.constructor.prototype;
          if (e && e.hasOwnProperty("__cid__")) {
            return d.__cid__;
          }
        }
        return "";
      };
    })();
    q.obsolete = function (c, b, d, e) {
      var f = /([^.]+)$/;
      var g = f.exec(b)[0];
      var h = f.exec(d)[0];
      function a() {
        return this[h];
      }
      if (e) {
        q.getset(c, g, a, function (a) {
          this[h] = a;
        });
      } else {
        q.get(c, g, a);
      }
    };
    q.obsoletes = function (a, b, c, d) {
      for (var e in c) {
        var h = c[e];
        q.obsolete(a, b + "." + e, h, d);
      }
    };
    var a = /(%d)|(%s)/;
    var e = /%s/;
    function h(c, a) {
      c.splice(a, 1);
    }
    function l(d, a) {
      var b = d.indexOf(a);
      return b >= 0 && (h(d, b), true);
    }
    function c(c, d) {
      if (d === undefined) {
        d = c;
        c = null;
      }
      this.get = null;
      this.count = 0;
      this._pool = Array(d);
      this._cleanup = c;
    }
    q.formatStr = function () {
      var h = arguments.length;
      if (h === 0) {
        return "";
      }
      var b = arguments[0];
      if (h === 1) {
        return "" + b;
      }
      var l = typeof b == "string" && a.test(b);
      if (l) {
        for (var d = 1; d < h; ++d) {
          var m = arguments[d];
          var n = typeof m == "number" ? a : e;
          if (n.test(b)) {
            var o = "" + m;
            b = b.replace(n, o);
          } else {
            b += " " + m;
          }
        }
      } else {
        for (var p = 1; p < h; ++p) {
          b += " " + arguments[p];
        }
      }
      return b;
    };
    q.shiftArguments = function () {
      for (var d = arguments.length - 1, a = Array(d), b = 0; b < d; ++b) {
        a[b] = arguments[b + 1];
      }
      return a;
    };
    q.createMap = function (c) {
      var a = Object.create(null);
      if (c) {
        a["."] = true;
        a["/"] = true;
        delete a["."];
        delete a["/"];
      }
      return a;
    };
    q.array = {
      remove: l,
      fastRemove: function (d, a) {
        var b = d.indexOf(a);
        if (b >= 0) {
          d[b] = d[d.length - 1];
          --d.length;
        }
      },
      removeAt: h,
      fastRemoveAt: function (d, a) {
        var b = d.length;
        if (!(a < 0 || a >= b)) {
          d[a] = d[b - 1];
          d.length = b - 1;
        }
      },
      fastRemoveAll: function (d, a) {
        for (var b; (b = d.indexOf(a, b)) !== -1;) {
          d[b] = d[d.length - 1];
          --d.length;
        }
      },
      contains: function (c, a) {
        return c.indexOf(a) >= 0;
      },
      verifyType: function (d, a) {
        if (d && d.length > 0) {
          for (var b = 0; b < d.length; b++) {
            if (!(d[b] instanceof a)) {
              return false;
            }
          }
        }
        return true;
      },
      removeArray: function (e, a) {
        for (var b = 0, f = a.length; b < f; b++) {
          l(e, a[b]);
        }
      },
      appendObjectsAt: function (d, a, b) {
        d.splice.apply(d, [b, 0].concat(a));
        return d;
      },
      copy: function (e) {
        var a;
        var f = e.length;
        var c = Array(f);
        for (a = 0; a < f; a += 1) {
          c[a] = e[a];
        }
        return c;
      },
      MutableForwardIterator: i("../utils/mutable-forward-iterator")
    };
    c.prototype._get = function () {
      if (this.count > 0) {
        --this.count;
        var b = this._pool[this.count];
        this._pool[this.count] = null;
        return b;
      }
      return null;
    };
    c.prototype.put = function (c) {
      var a = this._pool;
      if (this.count < a.length) {
        if (this._cleanup && this._cleanup(c) === false) {
          return;
        }
        a[this.count] = c;
        ++this.count;
      }
    };
    c.prototype.resize = function (b) {
      if (b >= 0) {
        this._pool.length = b;
        if (this.count > b) {
          this.count = b;
        }
      }
    };
    q.Pool = c;
    cc.js = q;
    b.exports = q;
  }, {
    "../utils/mutable-forward-iterator": 237,
    "./id-generater": 179
  }],
  184: [function (c, b, k) {
    "use strict";

    var d = c("./js");
    var f = c("./attribute");
    var g = {
      default: {},
      serializable: {},
      editorOnly: {},
      formerlySerializedAs: {}
    };
    function e(c, b, d, e) {
      if (!c.get && !c.set && c.hasOwnProperty("default")) {
        var f = "_N$" + b;
        c.get = function () {
          return this[f];
        };
        c.set = function (c) {
          var a = this[f];
          this[f] = c;
          d.call(this, a);
        };
        var h = {};
        e[f] = h;
        for (var i in g) {
          var k = g[i];
          if (c.hasOwnProperty(i)) {
            h[i] = c[i];
            if (!k.canUsedInGet) {
              delete c[i];
            }
          }
        }
      }
    }
    function h(c, a) {
      if (Array.isArray(a)) {
        if (!(a.length > 0)) {
          return;
        }
        c.type = a = a[0];
      }
      if (typeof a == "function") {
        if (a === String) {
          c.type = cc.String;
        } else if (a === Boolean) {
          c.type = cc.Boolean;
        } else if (a === Number) {
          c.type = cc.Float;
        }
      }
    }
    function i(e, a, b) {
      var c = e ? {
        _short: true
      } : {
        _short: true,
        default: a
      };
      if (b) {
        c.type = b;
      }
      return c;
    }
    k.getFullFormOfProperty = function (c, a) {
      if (c && c.constructor === Object) {
        return null;
      } else if (Array.isArray(c) && c.length > 0) {
        return i(a, [], c);
      } else if (typeof c == "function") {
        return i(a, d.isChildClassOf(c, cc.ValueType) ? new c() : null, c);
      } else if (c instanceof f.PrimitiveType) {
        return i(a, c.default);
      } else {
        return i(a, c);
      }
    };
    k.preprocessAttrs = function (a) {
      for (var b in a) {
        var f = a[b];
        var i = k.getFullFormOfProperty(f, false);
        if (i) {
          f = a[b] = i;
        }
        if (f) {
          var j = f.notify;
          if (j) {
            e(f, b, j, a);
          }
          if ("type" in f) {
            h(f, f.type);
          }
        }
      }
    };
    k.validateMethodWithProps = function (b) {
      return typeof b == "function" || b === null;
    };
  }, {
    "./CCClass": 162,
    "./attribute": 174,
    "./js": 183
  }],
  185: [function () {
    "use strict";

    var g = [];
    var a = Object.create(null);
    cc._RF = {
      push: function (b, c, h) {
        if (h === undefined) {
          h = c;
          c = "";
        }
        if (c) {
          var i = a[c];
          if (i) {
            b.exports = i.exports;
            return true;
          }
        }
        g.push({
          uuid: c,
          script: h,
          module: b,
          exports: b.exports,
          cls: null
        });
      },
      pop: function () {
        var b = g.pop();
        var c = b.module;
        var d = c.exports;
        if (b.uuid) {
          a[b.uuid] = c;
        }
        if (d === b.exports) {
          for (var h in d) {
            return;
          }
          c.exports = d = b.cls;
        }
      },
      peek: function () {
        return g[g.length - 1];
      }
    };
  }, {}],
  186: [function (c, a) {
    "use strict";

    c("./js");
    a.exports = {
      contains: function (d, a) {
        if (typeof d.contains == "function") {
          return d.contains(a);
        }
        if (typeof d.compareDocumentPosition == "function") {
          return !!(d.compareDocumentPosition(a) & 16);
        }
        var b = a.parentNode;
        if (b) {
          do {
            if (b === d) {
              return true;
            }
            b = b.parentNode;
          } while (b !== null);
        }
        return false;
      },
      isDomNode: typeof window == "object" && (typeof Node == "function" ? function (b) {
        return b instanceof Node;
      } : function (b) {
        return b && typeof b == "object" && typeof b.nodeType == "number" && typeof b.nodeName == "string";
      }),
      callInNextTick: function (d, a, b) {
        if (d) {
          // TOLOOK
          // TOLOOK
          setTimeout(function () {
            d(a, b);
          }, 0);
        }
      }
    };
  }, {
    "./js": 183
  }],
  187: [function (b) {
    "use strict";

    b("./platform/js");
    b("./value-types");
    b("./utils");
    b("./platform/CCInputManager");
    b("./platform/CCInputExtension");
    b("./event");
    b("./platform/CCSys");
    b("./platform/CCMacro");
    b("./CCDirector");
    b("./asset-manager");
    b("./renderer");
    b("./platform/CCView");
    b("./platform/CCScreen");
    b("./CCScheduler");
    b("./event-manager");
  }, {
    "./CCDirector": 24,
    "./CCScheduler": 29,
    "./asset-manager": 45,
    "./event": 136,
    "./event-manager": 133,
    "./platform/CCInputExtension": 165,
    "./platform/CCInputManager": 166,
    "./platform/CCMacro": 167,
    "./platform/CCScreen": 170,
    "./platform/CCSys": 171,
    "./platform/CCView": 172,
    "./platform/js": 183,
    "./renderer": 193,
    "./utils": 235,
    "./value-types": 251
  }],
  188: [function (h, b, d) {
    "use strict";

    d.__esModule = true;
    d.default = undefined;
    var e = i(h("./assembler"));
    var f = i(h("./utils/dynamic-atlas/manager"));
    var g = i(h("./webgl/render-data"));
    function i(b) {
      if (b && b.__esModule) {
        return b;
      } else {
        return {
          default: b
        };
      }
    }
    function j(e, a) {
      for (var b = 0; b < a.length; b++) {
        var f = a[b];
        f.enumerable = f.enumerable || false;
        f.configurable = true;
        if ("value" in f) {
          f.writable = true;
        }
        Object.defineProperty(e, f.key, f);
      }
    }
    function k(b) {
      if (b === undefined) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return b;
    }
    function o(c, a) {
      return (o = Object.setPrototypeOf || function (c, a) {
        c.__proto__ = a;
        return c;
      })(c, a);
    }
    var a = function (a) {
      var b;
      var c;
      function e() {
        var b;
        (b = a.call(this) || this)._renderData = new g.default();
        b._renderData.init(k(b));
        b.initData();
        b.initLocal();
        return b;
      }
      c = a;
      (b = e).prototype = Object.create(c.prototype);
      b.prototype.constructor = b;
      o(b, c);
      var h;
      var i;
      var p = e.prototype;
      p.initData = function () {
        this._renderData.createQuadData(0, this.verticesFloats, this.indicesCount);
      };
      p.initLocal = function () {
        this._local = [];
        this._local.length = 4;
      };
      p.updateColor = function (e, a) {
        var h = this._renderData.uintVDatas[0];
        if (h) {
          a = a != null ? a : e.node.color._val;
          for (var c = this.floatsPerVert, d = this.colorOffset, i = h.length; d < i; d += c) {
            h[d] = a;
          }
        }
      };
      p.getBuffer = function () {
        return cc.renderer._handle._meshBuffer;
      };
      p.updateWorldVerts = function (p) {
        var b = this._local;
        var j = this._renderData.vDatas[0];
        var e = p.node._worldMatrix.m;
        var i = e[0];
        var k = e[1];
        var n = e[4];
        var q = e[5];
        var a = e[12];
        var o = e[13];
        var c = b[0];
        var l = b[2];
        var h = b[1];
        var r = b[3];
        var f = this.floatsPerVert;
        var d = 0;
        if (i === 1 && k === 0 && n === 0 && q === 1) {
          j[d] = c + a;
          j[d + 1] = h + o;
          j[d += f] = l + a;
          j[d + 1] = h + o;
          j[d += f] = c + a;
          j[d + 1] = r + o;
          j[d += f] = l + a;
          j[d + 1] = r + o;
        } else {
          var x = i * c;
          var t = i * l;
          var u = k * c;
          var g = k * l;
          var m = n * h;
          var v = n * r;
          var w = q * h;
          var y = q * r;
          j[d] = x + m + a;
          j[d + 1] = u + w + o;
          j[d += f] = t + m + a;
          j[d + 1] = g + w + o;
          j[d += f] = x + v + a;
          j[d + 1] = u + y + o;
          j[d += f] = t + v + a;
          j[d + 1] = g + y + o;
        }
      };
      p.fillBuffers = function (d, b) {
        if (b.worldMatDirty) {
          this.updateWorldVerts(d);
        }
        var f = this._renderData;
        var e = f.vDatas[0];
        var g = f.iDatas[0];
        var h = this.getBuffer(b);
        var i = h.request(this.verticesCount, this.indicesCount);
        var j = i.byteOffset >> 2;
        var a = h._vData;
        if (e.length + j > a.length) {
          a.set(e.subarray(0, a.length - j), j);
        } else {
          a.set(e, j);
        }
        for (var k = h._iData, c = i.indiceOffset, m = i.vertexOffset, n = 0, o = g.length; n < o; n++) {
          k[c++] = m + g[n];
        }
      };
      p.packToDynamicAtlas = function (e, a) {
        if (!a._original && f.default && a._texture.packable && a._texture.loaded) {
          var b = f.default.insertSpriteFrame(a);
          if (b) {
            a._setDynamicAtlasFrame(b);
          }
        }
        var c = e._materials[0];
        if (c && c.getProperty("texture") !== a._texture._texture) {
          e._vertsDirty = true;
          e._updateMaterial();
        }
      };
      h = e;
      if (i = [{
        key: "verticesFloats",
        get: function () {
          return this.verticesCount * this.floatsPerVert;
        }
      }]) {
        j(h.prototype, i);
      }
      Object.defineProperty(h, "prototype", {
        writable: false
      });
      return e;
    }(e.default);
    d.default = a;
    cc.js.addon(a.prototype, {
      floatsPerVert: 5,
      verticesCount: 4,
      indicesCount: 6,
      uvOffset: 2,
      colorOffset: 4
    });
    cc.Assembler2D = a;
    b.exports = d.default;
  }, {
    "./assembler": 190,
    "./utils/dynamic-atlas/manager": 196,
    "./webgl/render-data": 223
  }],
  189: [function (a, b, d) {
    "use strict";

    d.__esModule = true;
    d.default = undefined;
    var e;
    var l = (e = a("../utils/pool")) && e.__esModule ? e : {
      default: e
    };
    function g(c, a) {
      return (g = Object.setPrototypeOf || function (c, a) {
        c.__proto__ = a;
        return c;
      })(c, a);
    }
    var m = 0;
    function n(b) {
      if (!Object.getOwnPropertyDescriptor(b, "__assemblerId__")) {
        b.__assemblerId__ = ++m;
      }
      return b.__assemblerId__;
    }
    var j = new (function (e) {
      var a;
      var h;
      function i() {
        for (var a, g = arguments.length, c = Array(g), d = 0; d < g; d++) {
          c[d] = arguments[d];
        }
        (a = e.call.apply(e, [this].concat(c)) || this)._pool = {};
        return a;
      }
      h = e;
      (a = i).prototype = Object.create(h.prototype);
      a.prototype.constructor = a;
      g(a, h);
      var d = i.prototype;
      d.put = function (d) {
        if (d && this.enabled) {
          var a = n(d.constructor);
          var b = this._pool;
          if (!b[a]) {
            b[a] = [];
          }
          if (!(this.count > this.maxSize)) {
            this._clean(d);
            b[a].push(d);
            this.count++;
          }
        }
      };
      d.get = function (e) {
        var a;
        if (this.enabled) {
          var f = this._pool;
          var c = n(e);
          a = f[c] && f[c].pop();
        }
        if (a) {
          this.count--;
        } else {
          a = new e();
        }
        return a;
      };
      d.clear = function () {
        this._pool = {};
        this.count = 0;
      };
      d._clean = function (b) {
        b._renderComp = null;
      };
      return i;
    }(l.default))();
    l.default.register("assembler", j);
    var k = j;
    d.default = k;
    b.exports = d.default;
  }, {
    "../utils/pool": 238
  }],
  190: [function (a, b, c) {
    "use strict";

    c.__esModule = true;
    c.default = undefined;
    var d;
    var i = a("./webgl/vertex-format");
    var f = (d = a("./assembler-pool")) && d.__esModule ? d : {
      default: d
    };
    var g = function () {
      function c() {
        if (this._extendNative) {
          this._extendNative();
        }
      }
      var a = c.prototype;
      a.init = function (b) {
        this._renderComp = b;
      };
      a.updateRenderData = function () {};
      a.fillBuffers = function () {};
      a.getVfmt = function () {
        return i.vfmtPosUvColor;
      };
      return c;
    }();
    c.default = g;
    g.register = function (c, a) {
      c.__assembler__ = a;
    };
    g.init = function (e) {
      for (var a = e.constructor, g = a.__assembler__; !g;) {
        if (!(a = a.$super)) {
          return;
        }
        g = a.__assembler__;
      }
      if (g.getConstructor) {
        g = g.getConstructor(e);
      }
      if (!e._assembler || e._assembler.constructor !== g) {
        var h = f.default.get(g);
        h.init(e);
        e._assembler = h;
      }
    };
    cc.Assembler = g;
    b.exports = c.default;
  }, {
    "./assembler-pool": 189,
    "./webgl/vertex-format": 225
  }],
  191: [function (d, a) {
    "use strict";

    function b(c) {
      var a;
      try {
        a = c.getContext("2d");
      } catch (b) {
        return;
      }
      this._canvas = c;
      this._ctx = a;
      this._caps = {};
      this._stats = {
        drawcalls: 0
      };
      this._vx = this._vy = this._vw = this._vh = 0;
      this._sx = this._sy = this._sw = this._sh = 0;
    }
    b.prototype._restoreTexture = function () {};
    b.prototype.setViewport = function (e, a, b, c) {
      if (!(this._vx === e && this._vy === a && this._vw === b && this._vh === c)) {
        this._vx = e;
        this._vy = a;
        this._vw = b;
        this._vh = c;
      }
    };
    b.prototype.setScissor = function (e, a, b, c) {
      if (!(this._sx === e && this._sy === a && this._sw === b && this._sh === c)) {
        this._sx = e;
        this._sy = a;
        this._sw = b;
        this._sh = c;
      }
    };
    b.prototype.clear = function (c) {
      var a = this._ctx;
      a.clearRect(this._vx, this._vy, this._vw, this._vh);
      if (!(!c || c[0] === 0 && c[1] === 0 && c[2] === 0)) {
        a.fillStyle = "rgb(" + c[0] + "," + c[1] + "," + c[2] + ")";
        a.globalAlpha = c[3];
        a.fillRect(this._vx, this._vy, this._vw, this._vh);
      }
    };
    b.prototype.resetDrawCalls = function () {
      this._stats.drawcalls = 0;
    };
    b.prototype.getDrawCalls = function () {
      return this._stats.drawcalls;
    };
    a.exports = b;
  }, {}],
  192: [function (d, a) {
    "use strict";

    function b(c, a) {
      this._device = c;
      this._width = 4;
      this._height = 4;
      this._image = null;
      if (a) {
        if (a.width !== undefined) {
          this._width = a.width;
        }
        if (a.height !== undefined) {
          this._height = a.height;
        }
        this.updateImage(a);
      }
    }
    b.prototype.update = function (b) {
      this.updateImage(b);
    };
    b.prototype.updateImage = function (c) {
      if (c.images && c.images[0]) {
        var a = c.images[0];
        if (a && a !== this._image) {
          this._image = a;
        }
      }
    };
    b.prototype.destroy = function () {
      this._image = null;
    };
    a.exports = b;
  }, {}],
  193: [function (k, b, c) {
    "use strict";

    c.__esModule = true;
    c.default = undefined;
    var l = f(k("../../renderer/gfx"));
    var d = f(k("../../renderer/core/input-assembler"));
    var e = f(k("../../renderer/core/pass"));
    function f(b) {
      if (b && b.__esModule) {
        return b;
      } else {
        return {
          default: b
        };
      }
    }
    var g = cc.renderer = {
      Texture2D: null,
      InputAssembler: d.default,
      Pass: e.default,
      renderEngine: null,
      canvas: null,
      device: null,
      scene: null,
      drawCalls: 0,
      _handle: null,
      _cameraNode: null,
      _camera: null,
      _forward: null,
      _flow: null,
      initWebGL: function (b, c) {
        k("./webgl/assemblers");
        var d = k("./webgl/model-batcher");
        this.Texture2D = l.default.Texture2D;
        this.canvas = b;
        this._flow = cc.RenderFlow;
        var e = k("../../renderer/scene/scene");
        var f = k("../../renderer/renderers/forward-renderer");
        this.device = new l.default.Device(b, c);
        this.scene = new e();
        var g;
        g = this.device;
        var h = {
          defaultTexture: new l.default.Texture2D(g, {
            images: [],
            width: 128,
            height: 128,
            wrapS: l.default.WRAP_REPEAT,
            wrapT: l.default.WRAP_REPEAT,
            format: l.default.TEXTURE_FMT_RGB8,
            genMipmaps: false
          }),
          programTemplates: [],
          programChunks: {}
        };
        this._forward = new f(this.device, h);
        this._handle = new d(this.device, this.scene);
        this._flow.init(this._handle, this._forward);
      },
      initCanvas: function () {
        throw Error(cc.debug.getError(2400, "not support"));
      },
      updateCameraViewport: function () {
        if (cc.director) {
          var c = cc.director.getScene();
          if (c) {
            c.setScale(1, 1, 1);
          }
        }
        if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {
          var a = cc.view.getViewportRect();
          this.device.setViewport(a.x, a.y, a.width, a.height);
          this._camera.a = cc.view.getScaleX();
          this._camera.d = cc.view.getScaleY();
          this._camera.tx = a.x;
          this._camera.ty = a.y + a.height;
        }
      },
      render: function (c, a) {
        this.device.resetDrawCalls();
        if (c) {
          this._flow.render(c, a);
          this.drawCalls = this.device.getDrawCalls();
        }
      },
      clear: function () {
        this._handle.reset();
        this._forward.clear();
      }
    };
    c.default = g;
    b.exports = c.default;
  }, {
    "../../renderer/core/input-assembler": 272,
    "../../renderer/core/pass": 273,
    "../../renderer/gfx": 282,
    "../../renderer/renderers/forward-renderer": 301,
    "../../renderer/scene/scene": 304,
    "./canvas": undefined,
    "./canvas/Device": 191,
    "./canvas/Texture2D": 192,
    "./webgl/assemblers": 205,
    "./webgl/model-batcher": 221
  }],
  194: [function (i, j) {
    "use strict";

    var r;
    var k;
    var m = 0;
    var n = 1 << m++;
    var z = 1 << m++;
    var s = 1 << m++;
    var F = 1 << m++;
    var a = s | F;
    var c = 1 << m++;
    var l = 1 << m++;
    var h = 1 << m++;
    var o = l | h;
    var B = 1 << m++;
    var d = 1 << m++;
    var f = 1 << m++;
    var p = 1 << m++;
    var u = 0;
    function D() {
      this._func = x;
      this._next = null;
    }
    var v = D.prototype;
    v._doNothing = function () {};
    v._localTransform = function (a) {
      a._updateLocalMatrix();
      a._renderFlag &= ~s;
      this._next._func(a);
    };
    v._worldTransform = function (e) {
      r.worldMatDirty++;
      var a = e._matrix;
      var b = e._trs;
      var c = a.m;
      c[12] = b[0];
      c[13] = b[1];
      c[14] = b[2];
      e._mulMat(e._worldMatrix, e._parent._worldMatrix, a);
      e._renderFlag &= ~F;
      this._next._func(e);
      r.worldMatDirty--;
    };
    v._updateRenderData = function (d) {
      var a = d._renderComponent;
      a._assembler.updateRenderData(a);
      d._renderFlag &= ~c;
      this._next._func(d);
    };
    v._opacity = function (b) {
      r.parentOpacityDirty++;
      this._next._func(b);
      b._renderFlag &= ~l;
      r.parentOpacityDirty--;
    };
    v._color = function (c) {
      var a = c._renderComponent;
      if (a) {
        a._updateColor();
      }
      c._renderFlag &= ~h;
      this._next._func(c);
    };
    v._render = function (c) {
      var a = c._renderComponent;
      a._checkBacth(r, c._cullingMask);
      a._assembler.fillBuffers(a, r);
      this._next._func(c);
    };
    v._children = function (f) {
      for (var b = u, c = r, d = c.parentOpacity, e = c.parentOpacity *= f._opacity / 255, g = (c.worldMatDirty ? F : 0) | (c.parentOpacityDirty ? o : 0), i = f._children, a = 0, j = i.length; a < j; a++) {
        var l = i[a];
        l._renderFlag |= g;
        if (l._activeInHierarchy && l._opacity !== 0) {
          u = l._cullingMask = l.groupIndex === 0 ? b : 1 << l.groupIndex;
          var m = l._color._val;
          l._color._fastSetA(l._opacity * e);
          y[l._renderFlag]._func(l);
          l._color._val = m;
        }
      }
      c.parentOpacity = d;
      this._next._func(f);
    };
    v._postRender = function (c) {
      var a = c._renderComponent;
      a._checkBacth(r, c._cullingMask);
      a._assembler.postFillBuffers(a, r);
      this._next._func(c);
    };
    var t = new D();
    t._func = t._doNothing;
    t._next = t;
    var y = {};
    function E(a, b) {
      if (a === n || a === z) {
        return t;
      }
      var g = new D();
      g._next = b || t;
      switch (a) {
        case s:
          g._func = g._localTransform;
          break;
        case F:
          g._func = g._worldTransform;
          break;
        case c:
          g._func = g._updateRenderData;
          break;
        case l:
          g._func = g._opacity;
          break;
        case h:
          g._func = g._color;
          break;
        case B:
          g._func = g._render;
          break;
        case d:
          g._func = g._children;
          break;
        case f:
          g._func = g._postRender;
      }
      return g;
    }
    function A(d) {
      for (var a = null, e = p; e > 0;) {
        if (e & d) {
          a = E(e, a);
        }
        e >>= 1;
      }
      return a;
    }
    function x(c) {
      var a = c._renderFlag;
      (y[a] = A(a))._func(c);
    }
    D.flows = y;
    D.createFlow = E;
    var C = [];
    D.registerValidate = function (b) {
      if (!b._inValidateList) {
        C.push(b);
        b._inValidateList = true;
      }
    };
    D.validateRenderers = function () {
      for (var b = 0, e = C.length; b < e; b++) {
        var c = C[b];
        if (c.isValid) {
          if (c.enabledInHierarchy) {
            c._validateRender();
          } else {
            c.disableRender();
          }
          c._inValidateList = false;
        }
      }
      C.length = 0;
    };
    D.visitRootNode = function (c) {
      D.validateRenderers();
      var a = u;
      u = c._cullingMask;
      if (c._renderFlag & F) {
        r.worldMatDirty++;
        c._calculWorldMatrix();
        c._renderFlag &= ~F;
        y[c._renderFlag]._func(c);
        r.worldMatDirty--;
      } else {
        y[c._renderFlag]._func(c);
      }
      u = a;
    };
    D.render = function (c, a) {
      r.reset();
      r.walking = true;
      D.visitRootNode(c);
      r.terminate();
      r.walking = false;
      k.render(r._renderScene, a);
    };
    D.renderCamera = function (c, a) {
      r.reset();
      r.walking = true;
      D.visitRootNode(a);
      r.terminate();
      r.walking = false;
      k.renderCamera(c, r._renderScene);
    };
    D.init = function (d, a) {
      r = d;
      k = a;
      y[0] = t;
      for (var b = 1; b < p; b++) {
        y[b] = new D();
      }
    };
    D.getBachther = function () {
      return r;
    };
    D.FLAG_DONOTHING = n;
    D.FLAG_BREAK_FLOW = z;
    D.FLAG_LOCAL_TRANSFORM = s;
    D.FLAG_WORLD_TRANSFORM = F;
    D.FLAG_TRANSFORM = a;
    D.FLAG_UPDATE_RENDER_DATA = c;
    D.FLAG_OPACITY = l;
    D.FLAG_COLOR = h;
    D.FLAG_OPACITY_COLOR = o;
    D.FLAG_RENDER = B;
    D.FLAG_CHILDREN = d;
    D.FLAG_POST_RENDER = f;
    D.FLAG_FINAL = p;
    j.exports = cc.RenderFlow = D;
  }, {}],
  195: [function (f, a) {
    "use strict";

    var g = f("../../../assets/CCRenderTexture");
    var h = 2;
    function b(c, a) {
      var b = new g();
      b.initWithSize(c, a);
      b.update();
      this._texture = b;
      this._x = h;
      this._y = h;
      this._nexty = h;
      this._width = c;
      this._height = a;
      this._innerTextureInfos = {};
      this._innerSpriteFrames = [];
      this._count = 0;
    }
    b.DEFAULT_HASH = new g()._getHash();
    cc.js.mixin(b.prototype, {
      insertSpriteFrame: function (a) {
        var b = a._rect;
        var d = a._texture;
        var e = this._innerTextureInfos[d._id];
        var f = b.x;
        var g = b.y;
        if (e) {
          f += e.x;
          g += e.y;
        } else {
          var l = d.width;
          var j = d.height;
          if (this._x + l + h > this._width) {
            this._x = h;
            this._y = this._nexty;
          }
          if (this._y + j + h > this._nexty) {
            this._nexty = this._y + j + h;
          }
          if (this._nexty > this._height) {
            return null;
          }
          if (cc.dynamicAtlasManager.textureBleeding) {
            if (l <= 8 || j <= 8) {
              this._texture.drawTextureAt(d, this._x - 1, this._y - 1);
              this._texture.drawTextureAt(d, this._x - 1, this._y + 1);
              this._texture.drawTextureAt(d, this._x + 1, this._y - 1);
              this._texture.drawTextureAt(d, this._x + 1, this._y + 1);
            }
            this._texture.drawTextureAt(d, this._x - 1, this._y);
            this._texture.drawTextureAt(d, this._x + 1, this._y);
            this._texture.drawTextureAt(d, this._x, this._y - 1);
            this._texture.drawTextureAt(d, this._x, this._y + 1);
          }
          this._texture.drawTextureAt(d, this._x, this._y);
          this._innerTextureInfos[d._id] = {
            x: this._x,
            y: this._y,
            texture: d
          };
          this._count++;
          f += this._x;
          g += this._y;
          this._x += l + h;
          this._dirty = true;
        }
        var k = {
          x: f,
          y: g,
          texture: this._texture
        };
        this._innerSpriteFrames.push(a);
        return k;
      },
      update: function () {
        if (this._dirty) {
          this._texture.update();
          this._dirty = false;
        }
      },
      deleteInnerTexture: function (b) {
        if (b && this._innerTextureInfos[b._id]) {
          delete this._innerTextureInfos[b._id];
          this._count--;
        }
      },
      isEmpty: function () {
        return this._count <= 0;
      },
      reset: function () {
        this._x = h;
        this._y = h;
        this._nexty = h;
        for (var d = this._innerSpriteFrames, a = 0, e = d.length; a < e; a++) {
          var c = d[a];
          if (c.isValid) {
            c._resetDynamicAtlasFrame();
          }
        }
        this._innerSpriteFrames.length = 0;
        this._innerTextureInfos = {};
      },
      destroy: function () {
        this.reset();
        this._texture.destroy();
      }
    });
    a.exports = b;
  }, {
    "../../../assets/CCRenderTexture": 65
  }],
  196: [function (a, b) {
    "use strict";

    var c = a("./atlas");
    var d = [];
    var e = -1;
    var f = 5;
    var j = 2048;
    var g = 512;
    var l = true;
    var o = null;
    function r() {
      var b = d[++e];
      if (!b) {
        b = new c(j, j);
        d.push(b);
      }
      return b;
    }
    function s() {
      v.reset();
    }
    var h = false;
    var v = {
      Atlas: c,
      get enabled() {
        return h;
      },
      set enabled(b) {
        if (h !== b) {
          if (b) {
            this.reset();
            cc.director.on(cc.Director.EVENT_BEFORE_SCENE_LAUNCH, s);
          } else {
            cc.director.off(cc.Director.EVENT_BEFORE_SCENE_LAUNCH, s);
          }
          h = b;
        }
      },
      get maxAtlasCount() {
        return f;
      },
      set maxAtlasCount(b) {
        f = b;
      },
      get atlasCount() {
        return d.length;
      },
      get textureBleeding() {
        return l;
      },
      set textureBleeding(b) {
        l = b;
      },
      get textureSize() {
        return j;
      },
      set textureSize(b) {
        j = b;
      },
      get maxFrameSize() {
        return g;
      },
      set maxFrameSize(b) {
        g = b;
      },
      insertSpriteFrame: function (g) {
        if (!h || e === f || !g || g._original) {
          return null;
        }
        if (!g._texture.packable) {
          return null;
        }
        var a = d[e];
        if (!a) {
          a = r();
        }
        var i = a.insertSpriteFrame(g);
        if (i || e === f) {
          return i;
        } else {
          return (a = r()).insertSpriteFrame(g);
        }
      },
      reset: function () {
        for (var c = 0, f = d.length; c < f; c++) {
          d[c].destroy();
        }
        d.length = 0;
        e = -1;
      },
      deleteAtlasSpriteFrame: function (c) {
        if (c._original) {
          var a = c._original._texture;
          this.deleteAtlasTexture(a);
        }
      },
      deleteAtlasTexture: function (c) {
        if (c) {
          for (var a = d.length - 1; a >= 0; a--) {
            d[a].deleteInnerTexture(c);
            if (d[a].isEmpty()) {
              d[a].destroy();
              d.splice(a, 1);
              e--;
            }
          }
        }
      },
      showDebug: function (f) {
        if (f) {
          if (!o || !o.isValid) {
            var a = cc.visibleRect.width;
            var b = cc.visibleRect.height;
            (o = new cc.Node("DYNAMIC_ATLAS_DEBUG_NODE")).width = a;
            o.height = b;
            o.x = a / 2;
            o.y = b / 2;
            o.zIndex = cc.macro.MAX_ZINDEX;
            o.parent = cc.director.getScene();
            o.groupIndex = cc.Node.BuiltinGroupIndex.DEBUG;
            cc.Camera._setupDebugCamera();
            var h = o.addComponent(cc.ScrollView);
            var k = new cc.Node("CONTENT");
            var g = k.addComponent(cc.Layout);
            g.type = cc.Layout.Type.VERTICAL;
            g.resizeMode = cc.Layout.ResizeMode.CONTAINER;
            k.parent = o;
            k.width = j;
            k.anchorY = 1;
            k.x = j;
            h.content = k;
            for (var i = 0; i <= e; i++) {
              var n = new cc.Node("ATLAS");
              d[i]._texture;
              var p = new cc.SpriteFrame();
              p.setTexture(d[i]._texture);
              n.addComponent(cc.Sprite).spriteFrame = p;
              n.parent = k;
            }
          }
          return o;
        }
        if (o) {
          o.parent = null;
          o = null;
        }
      },
      update: function () {
        if (this.enabled) {
          for (var b = 0; b <= e; b++) {
            d[b].update();
          }
        }
      }
    };
    b.exports = cc.dynamicAtlasManager = v;
  }, {
    "./atlas": 195
  }],
  197: [function (f, g, j) {
    "use strict";

    j.__esModule = true;
    j.default = undefined;
    var e;
    var k = (e = f("../../assembler-2d")) && e.__esModule ? e : {
      default: e
    };
    function n(c, a) {
      return (n = Object.setPrototypeOf || function (c, a) {
        c.__proto__ = a;
        return c;
      })(c, a);
    }
    var q = f("../../../utils/text-utils");
    var m = f("../../../platform/CCMacro");
    var s = f("../../../components/CCLabel").Overflow;
    var D = f("../utils").shareLabelInfo;
    function a() {
      this.char = "";
      this.valid = true;
      this.x = 0;
      this.y = 0;
      this.line = 0;
      this.hash = "";
    }
    var y = cc.rect();
    var l = null;
    var t = [];
    var E = [];
    var o = [];
    var d = [];
    var h = null;
    var w = 0;
    var z = 0;
    var F = 0;
    var C = 0;
    var H = 0;
    var I = 1;
    var J = null;
    var K = cc.size();
    var M = "";
    var x = 0;
    var A = 0;
    var B = 0;
    var L = 0;
    var N = 0;
    var R = 0;
    var S = 0;
    var O = false;
    var T = 0;
    var U = 0;
    var V = 0;
    var P = 0;
    var Q = 0;
    var c = 0;
    var aa = function (b) {
      var e;
      var f;
      function i() {
        return b.apply(this, arguments) || this;
      }
      f = b;
      (e = i).prototype = Object.create(f.prototype);
      e.prototype.constructor = e;
      n(e, f);
      var k = i.prototype;
      k.updateRenderData = function (b) {
        if (b._vertsDirty && l !== b) {
          l = b;
          this._reserveQuads(b, b.string.toString().length);
          this._updateFontFamily(b);
          this._updateProperties(b);
          this._updateLabelInfo(b);
          this._updateContent();
          this.updateWorldVerts(b);
          l._actualFontSize = x;
          l.node.setContentSize(K);
          l._vertsDirty = false;
          l = null;
          this._resetProperties();
        }
      };
      k._updateFontScale = function () {
        I = x / A;
      };
      k._updateFontFamily = function (c) {
        var a = c.font;
        J = a.spriteFrame;
        h = a._fntConfig;
        D.fontAtlas = a._fontDefDictionary;
        this.packToDynamicAtlas(c, J);
      };
      k._updateLabelInfo = function () {
        D.hash = "";
        D.margin = 0;
      };
      k._updateProperties = function (b) {
        M = b.string.toString();
        x = b.fontSize;
        A = h ? h.fontSize : b.fontSize;
        B = b.horizontalAlign;
        L = b.verticalAlign;
        N = b.spacingX;
        S = b.overflow;
        R = b._lineHeight;
        K.width = b.node.width;
        K.height = b.node.height;
        P = l._customOffsetX;
        Q = l._customOffsetY;
        c = l.actualLineHeight;
        if (S === s.NONE) {
          O = false;
          K.width += D.margin * 2;
          K.height += D.margin * 2;
        } else if (S === s.RESIZE_HEIGHT) {
          O = true;
          K.height += D.margin * 2;
        } else {
          O = b.enableWrapText;
        }
        D.lineHeight = R;
        D.fontSize = x;
        D.actualLineHeight = c;
        this._setupBMFontOverflowMetrics();
      };
      k._resetProperties = function () {
        h = null;
        J = null;
        D.hash = "";
        D.margin = 0;
      };
      k._updateContent = function () {
        this._updateFontScale();
        this._computeHorizontalKerningForText();
        this._alignText();
      };
      k._computeHorizontalKerningForText = function () {
        var a;
        var b = M;
        var d = b.length;
        var e = t;
        if (h) {
          a = h.kerningDict;
        }
        if (a && !cc.js.isEmptyObject(a)) {
          for (var f = -1, l = 0; l < d; ++l) {
            var m = b.charCodeAt(l);
            var n = a[f << 16 | m & 65535] || 0;
            e[l] = l < d - 1 ? n : 0;
            f = m;
          }
        } else {
          e.length = 0;
        }
      };
      k._multilineTextWrap = function (b) {
        for (var a = M.length, c = 0, d = 0, f = 0, i = 0, k = 0, n = 0, p = 0, r = null, u = cc.v2(0, 0), v = 0; v < a;) {
          var y = M.charAt(v);
          if (y !== "\n") {
            for (var J = b(M, v, a), W = n, X = p, Y = k, Z = d, $ = false, _ = 0; _ < J; ++_) {
              var aa = v + _;
              if ((y = M.charAt(aa)) !== "\r") {
                if (r = D.fontAtlas.getLetterDefinitionForChar(y, D)) {
                  var ba = Z + r.offsetX * I - D.margin;
                  if (O && V > 0 && d > 0 && ba + r.w * I > V && !q.isUnicodeSpace(y)) {
                    o.push(k);
                    k = 0;
                    c++;
                    d = 0;
                    f -= R * this._getFontScale() + 0;
                    $ = true;
                    break;
                  }
                  u.x = ba;
                  u.y = f - r.offsetY * I + D.margin;
                  this._recordLetterInfo(u, y, aa, c);
                  if (aa + 1 < t.length && aa < a - 1) {
                    Z += t[aa + 1];
                  }
                  Z += r.xAdvance * I + N - D.margin * 2;
                  Y = u.x + r.w * I - D.margin;
                  if (W < u.y) {
                    W = u.y;
                  }
                  if (X > u.y - r.h * I) {
                    X = u.y - r.h * I;
                  }
                } else {
                  this._recordPlaceholderInfo(aa, y);
                  if (h) {
                    h.atlasName;
                  }
                }
              } else {
                this._recordPlaceholderInfo(aa, y);
              }
            }
            if (!$) {
              d = Z;
              if (n < W) {
                n = W;
              }
              if (p > X) {
                p = X;
              }
              if (i < (k = Y)) {
                i = k;
              }
              v += J;
            }
          } else {
            o.push(k);
            k = 0;
            c++;
            d = 0;
            f -= R * this._getFontScale() + 0;
            this._recordPlaceholderInfo(v, y);
            v++;
          }
        }
        o.push(k);
        z = (w = c + 1) * R * this._getFontScale();
        if (w > 1) {
          z += (w - 1) * 0;
        }
        K.width = T;
        K.height = U;
        if (T <= 0) {
          K.width = parseFloat(i.toFixed(2)) + D.margin * 2;
        }
        if (U <= 0) {
          K.height = parseFloat(z.toFixed(2)) + D.margin * 2;
        }
        C = K.height;
        H = 0;
        if (S !== s.CLAMP) {
          if (n > 0) {
            C = K.height + n;
          }
          if (p < -z) {
            H = z + p;
          }
        }
        return true;
      };
      k._getFirstCharLen = function () {
        return 1;
      };
      k._getFontScale = function () {
        if (S === s.SHRINK) {
          return I;
        } else {
          return 1;
        }
      };
      k._getFirstWordLen = function (c, a, b) {
        var d = c.charAt(a);
        if (q.isUnicodeCJK(d) || d === "\n" || q.isUnicodeSpace(d)) {
          return 1;
        }
        var j = 1;
        var k = D.fontAtlas.getLetterDefinitionForChar(d, D);
        if (!k) {
          return j;
        }
        for (var l = k.xAdvance * I + N, m = a + 1; m < b && (d = c.charAt(m), k = D.fontAtlas.getLetterDefinitionForChar(d, D)); ++m) {
          if (l + k.offsetX * I + k.w * I > V && !q.isUnicodeSpace(d) && V > 0) {
            return j;
          }
          l += k.xAdvance * I + N;
          if (d === "\n" || q.isUnicodeSpace(d) || q.isUnicodeCJK(d)) {
            break;
          }
          j++;
        }
        return j;
      };
      k._multilineTextWrapByWord = function () {
        return this._multilineTextWrap(this._getFirstWordLen);
      };
      k._multilineTextWrapByChar = function () {
        return this._multilineTextWrap(this._getFirstCharLen);
      };
      k._recordPlaceholderInfo = function (c, e) {
        if (c >= E.length) {
          var b = new a();
          E.push(b);
        }
        E[c].char = e;
        E[c].hash = e.charCodeAt(0) + D.hash;
        E[c].valid = false;
      };
      k._recordLetterInfo = function (c, h, b, d) {
        if (b >= E.length) {
          var e = new a();
          E.push(e);
        }
        var f = h.charCodeAt(0) + D.hash;
        E[b].line = d;
        E[b].char = h;
        E[b].hash = f;
        E[b].valid = D.fontAtlas.getLetter(f).valid;
        E[b].x = c.x;
        E[b].y = c.y;
      };
      k._alignText = function () {
        z = 0;
        o.length = 0;
        this._multilineTextWrapByWord();
        this._computeAlignmentOffset();
        if (S === s.SHRINK && x > 0 && this._isVerticalClamp()) {
          this._shrinkLabelToContentSize(this._isVerticalClamp);
        }
        if (!this._updateQuads()) {
          if (S === s.SHRINK) {
            this._shrinkLabelToContentSize(this._isHorizontalClamp);
          }
        }
      };
      k._scaleFontSizeDown = function (c) {
        var d = true;
        if (!c) {
          c = 0.1;
          d = false;
        }
        x = c;
        if (d) {
          this._updateContent();
        }
      };
      k._shrinkLabelToContentSize = function (e) {
        for (var a = 0, h = x | 0, i = 0; a < h;) {
          var j = i = a + h + 1 >> 1;
          if (j <= 0) {
            break;
          }
          I = j / A;
          this._multilineTextWrapByWord();
          this._computeAlignmentOffset();
          if (e()) {
            h = i - 1;
          } else {
            a = i;
          }
        }
        var k = a;
        if (k >= 0) {
          this._scaleFontSizeDown(k);
        }
      };
      k._isVerticalClamp = function () {
        return z > K.height;
      };
      k._isHorizontalClamp = function () {
        for (var a = false, b = 0, d = M.length; b < d; ++b) {
          var e = E[b];
          if (e.valid) {
            var g = D.fontAtlas.getLetter(e.hash);
            var l = e.x + g.w * I;
            var m = e.line;
            if (T > 0) {
              if (O) {
                if (o[m] > K.width && (l > K.width || l < 0)) {
                  a = true;
                  break;
                }
              } else if (l > K.width) {
                a = true;
                break;
              }
            }
          }
        }
        return a;
      };
      k._isHorizontalClamped = function (d, a) {
        var b = o[a];
        var c = d > K.width || d < 0;
        if (O) {
          return b > K.width && c;
        } else {
          return c;
        }
      };
      k._updateQuads = function () {
        var a = J ? J._texture : D.fontAtlas.getTexture();
        var b = l.node;
        this.verticesCount = this.indicesCount = 0;
        if (this._renderData) {
          this._renderData.dataLength = 0;
        }
        for (var c = K, e = b._anchorPoint.x * c.width, f = b._anchorPoint.y * c.height, g = true, h = 0, i = M.length; h < i; ++h) {
          var j = E[h];
          if (j.valid) {
            var m = D.fontAtlas.getLetter(j.hash);
            y.height = m.h;
            y.width = m.w;
            y.x = m.u;
            y.y = m.v;
            var o = j.y + F;
            if (U > 0) {
              if (o > C) {
                var p = o - C;
                y.y += p;
                y.height -= p;
                o -= p;
              }
              if (o - m.h * I < H && S === s.CLAMP) {
                y.height = o < H ? 0 : (o - H) / I;
              }
            }
            var q = j.line;
            var u = j.x + m.w / 2 * I + d[q];
            if (T > 0 && this._isHorizontalClamped(u, q)) {
              if (S === s.CLAMP) {
                y.width = 0;
              } else if (S === s.SHRINK) {
                if (K.width > m.w) {
                  g = false;
                  break;
                }
                y.width = 0;
              }
            }
            if (y.height > 0 && y.width > 0) {
              var v = this._determineRect(y);
              var G = j.x + d[j.line] + P;
              this.appendQuad(l, a, y, v, G - e, o - f + Q, I);
            }
          }
        }
        this._quadsUpdated(l);
        return g;
      };
      k._determineRect = function (i) {
        var b = J.isRotated();
        var c = J._originalSize;
        var d = J._rect;
        var e = J._offset;
        var f = e.x + (c.width - d.width) / 2;
        var g = e.y - (c.height - d.height) / 2;
        if (b) {
          var h = i.x;
          i.x = d.x + d.height - i.y - i.height - g;
          i.y = h + d.y - f;
          if (i.y < 0) {
            i.height = i.height + g;
          }
        } else {
          i.x += d.x - f;
          i.y += d.y + g;
        }
        return b;
      };
      k._computeAlignmentOffset = function () {
        d.length = 0;
        switch (B) {
          case m.TextAlignment.LEFT:
            for (var a = 0; a < w; ++a) {
              d.push(0);
            }
            break;
          case m.TextAlignment.CENTER:
            for (var e = 0, j = o.length; e < j; e++) {
              d.push((K.width - o[e]) / 2);
            }
            break;
          case m.TextAlignment.RIGHT:
            for (var f = 0, k = o.length; f < k; f++) {
              d.push(K.width - o[f]);
            }
        }
        F = K.height;
        if (L !== m.VerticalTextAlignment.TOP) {
          var h = K.height - z + R * this._getFontScale() - A * I;
          if (L === m.VerticalTextAlignment.BOTTOM) {
            F -= h;
          } else {
            F -= h / 2;
          }
        }
      };
      k._setupBMFontOverflowMetrics = function () {
        var c = K.width;
        var d = K.height;
        if (S === s.RESIZE_HEIGHT) {
          d = 0;
        }
        if (S === s.NONE) {
          c = 0;
          d = 0;
        }
        T = c;
        U = d;
        V = c;
      };
      k.updateWorldVerts = function () {};
      k.appendQuad = function () {};
      k._quadsUpdated = function () {};
      k._reserveQuads = function () {};
      return i;
    }(k.default);
    j.default = aa;
    g.exports = j.default;
  }, {
    "../../../components/CCLabel": 102,
    "../../../platform/CCMacro": 167,
    "../../../utils/text-utils": 243,
    "../../assembler-2d": 188,
    "../utils": 201
  }],
  198: [function (d, a) {
    "use strict";

    function b() {
      this._rect = null;
      this.uv = [];
      this._texture = null;
      this._original = null;
    }
    b.prototype = {
      constructor: b,
      getRect: function () {
        return cc.rect(this._rect);
      },
      setRect: function (b) {
        this._rect = b;
        if (this._texture) {
          this._calculateUV();
        }
      },
      _setDynamicAtlasFrame: function (b) {
        if (b) {
          this._original = {
            _texture: this._texture,
            _x: this._rect.x,
            _y: this._rect.y
          };
          this._texture = b.texture;
          this._rect.x = b.x;
          this._rect.y = b.y;
          this._calculateUV();
        }
      },
      _resetDynamicAtlasFrame: function () {
        if (this._original) {
          this._rect.x = this._original._x;
          this._rect.y = this._original._y;
          this._texture = this._original._texture;
          this._original = null;
          this._calculateUV();
        }
      },
      _refreshTexture: function (b) {
        this._texture = b;
        this._rect = cc.rect(0, 0, b.width, b.height);
        this._calculateUV();
      },
      _calculateUV: function () {
        var c = this._rect;
        var b = this._texture;
        var d = this.uv;
        var e = b.width;
        var f = b.height;
        var g = e === 0 ? 0 : c.x / e;
        var h = e === 0 ? 0 : (c.x + c.width) / e;
        var i = f === 0 ? 0 : (c.y + c.height) / f;
        var a = f === 0 ? 0 : c.y / f;
        d[0] = g;
        d[1] = i;
        d[2] = h;
        d[3] = i;
        d[4] = g;
        d[5] = a;
        d[6] = h;
        d[7] = a;
      }
    };
    a.exports = b;
  }, {}],
  199: [function (n, b, j) {
    "use strict";

    j.__esModule = true;
    j.default = undefined;
    var e;
    var s = (e = n("../../webgl/assemblers/label/2d/bmfont")) && e.__esModule ? e : {
      default: e
    };
    function k(c, a) {
      return (k = Object.setPrototypeOf || function (c, a) {
        c.__proto__ = a;
        return c;
      })(c, a);
    }
    var y = n("../../../components/CCLabel");
    var r = n("../../../components/CCLabelOutline");
    var z = n("../../../utils/text-utils");
    var a = n("../../../components/CCComponent");
    var w = n("../../../assets/CCRenderTexture");
    var l = cc.js.isChildClassOf(r, a);
    var h = n("../utils").getFontFamily;
    var o = n("../utils").shareLabelInfo;
    var A = cc.BitmapFont.FontLetterDefinition;
    var d = cc.BitmapFont.FontAtlas;
    var f = cc.Color.WHITE;
    var p = 0;
    function c(c, a) {
      this._texture = null;
      this._labelInfo = a;
      this._char = c;
      this._hash = null;
      this._data = null;
      this._canvas = null;
      this._context = null;
      this._width = 0;
      this._height = 0;
      this._offsetY = 0;
      this._hash = c.charCodeAt(0) + a.hash;
    }
    function g(e, a) {
      var b = new w();
      b.initWithSize(e, a);
      b.update();
      this._fontDefDictionary = new d(b);
      this._x = p;
      this._y = p;
      this._nexty = p;
      this._width = e;
      this._height = a;
      cc.director.on(cc.Director.EVENT_BEFORE_SCENE_LAUNCH, this.beforeSceneLoad, this);
    }
    c.prototype = {
      constructor: c,
      updateRenderData: function () {
        this._updateProperties();
        this._updateTexture();
      },
      _updateProperties: function () {
        this._texture = new cc.Texture2D();
        this._data = y._canvasPool.get();
        this._canvas = this._data.canvas;
        this._context = this._data.context;
        this._context.font = this._labelInfo.fontDesc;
        var c = z.safeMeasureText(this._context, this._char, this._labelInfo.fontDesc);
        var a = this._labelInfo.margin * 2 + 2;
        this._width = parseFloat(c.toFixed(2)) + a;
        this._height = (1 + z.BASELINE_RATIO) * this._labelInfo.fontSize + a;
        this._offsetY = -this._labelInfo.fontSize * z.BASELINE_RATIO / 2;
        if (this._canvas.width !== this._width) {
          this._canvas.width = this._width;
        }
        if (this._canvas.height !== this._height) {
          this._canvas.height = this._height;
        }
        this._texture.initWithElement(this._canvas);
      },
      _updateTexture: function () {
        var j = this._context;
        var b = this._labelInfo;
        var c = this._canvas.width;
        var d = this._canvas.height;
        var e = this._labelInfo.fontSize;
        var k = c / 2;
        var g = d / 2 + e * z.MIDDLE_RATIO + e * z.BASELINE_OFFSET;
        var h = b.color;
        j.lineJoin = "round";
        j.textAlign = "center";
        j.clearRect(0, 0, c, d);
        j.fillStyle = "rgba(" + h.r + ", " + h.g + ", " + h.b + ", 0.004)";
        j.fillRect(0, 0, c, d);
        j.font = b.fontDesc;
        j.fillStyle = "rgba(" + h.r + ", " + h.g + ", " + h.b + ", 1)";
        if (b.isOutlined && b.margin > 0) {
          var a = b.out || f;
          j.strokeStyle = "rgba(" + a.r + ", " + a.g + ", " + a.b + ", " + a.a / 255 + ")";
          j.lineWidth = b.margin * 2;
          j.strokeText(this._char, k, g);
        }
        j.fillText(this._char, k, g);
        this._texture.handleLoadedTexture();
      },
      destroy: function () {
        this._texture.destroy();
        this._texture = null;
        y._canvasPool.put(this._data);
      }
    };
    cc.js.mixin(g.prototype, {
      insertLetterTexture: function (d) {
        var a = d._texture;
        var b = a.width;
        var c = a.height;
        if (this._x + b + p > this._width) {
          this._x = p;
          this._y = this._nexty;
        }
        if (this._y + c > this._nexty) {
          this._nexty = this._y + c + p;
        }
        if (this._nexty > this._height) {
          return null;
        }
        this._fontDefDictionary._texture.drawTextureAt(a, this._x, this._y);
        this._dirty = true;
        var e = new A();
        e.u = this._x + 1;
        e.v = this._y + 1;
        e.texture = this._fontDefDictionary._texture;
        e.valid = true;
        e.w = d._width - 2;
        e.h = d._height - 2;
        e.xAdvance = e.w;
        e.offsetY = d._offsetY;
        this._x += b + p;
        this._fontDefDictionary.addLetterDefinitions(d._hash, e);
        return e;
      },
      update: function () {
        if (this._dirty) {
          this._fontDefDictionary._texture.update();
          this._dirty = false;
        }
      },
      reset: function () {
        this._x = p;
        this._y = p;
        this._nexty = p;
        for (var e = this._fontDefDictionary._letterDefinitions, a = 0, f = e.length; a < f; a++) {
          var c = e[a];
          if (c.isValid) {
            c.destroy();
          }
        }
        this._fontDefDictionary.clear();
      },
      destroy: function () {
        this.reset();
        this._fontDefDictionary._texture.destroy();
        this._fontDefDictionary._texture = null;
      },
      beforeSceneLoad: function () {
        this.clearAllCache();
      },
      clearAllCache: function () {
        this.destroy();
        var b = new w();
        b.initWithSize(this._width, this._height);
        b.update();
        this._fontDefDictionary._texture = b;
      },
      getLetter: function (b) {
        return this._fontDefDictionary._letterDefinitions[b];
      },
      getTexture: function () {
        return this._fontDefDictionary.getTexture();
      },
      getLetterDefinitionForChar: function (f, a) {
        var b = f.charCodeAt(0) + a.hash;
        var g = this._fontDefDictionary._letterDefinitions[b];
        if (!g) {
          var h = new c(f, a);
          h.updateRenderData();
          g = this.insertLetterTexture(h);
          h.destroy();
        }
        return g;
      }
    });
    var m = null;
    var u = function (a) {
      var b;
      var e;
      function f() {
        return a.apply(this, arguments) || this;
      }
      e = a;
      (b = f).prototype = Object.create(e.prototype);
      b.prototype.constructor = b;
      k(b, e);
      var i = f.prototype;
      i._getAssemblerData = function () {
        if (!m) {
          m = new g(2048, 2048);
          cc.Label._shareAtlas = m;
        }
        return m.getTexture();
      };
      i._updateFontFamily = function (a) {
        o.fontAtlas = m;
        o.fontFamily = h(a);
        var b = l && a.getComponent(r);
        if (b && b.enabled) {
          o.isOutlined = true;
          o.margin = b.width;
          o.out = b.color.clone();
          o.out.a = b.color.a * a.node.color.a / 255;
        } else {
          o.isOutlined = false;
          o.margin = 0;
        }
      };
      i._updateLabelInfo = function (e) {
        var a;
        var f;
        var g;
        o.fontDesc = this._getFontDesc();
        o.color = e.node.color;
        f = (a = o).color.toHEX();
        g = "";
        if (a.isOutlined && a.margin > 0) {
          g = g + a.margin + a.out.toHEX();
        }
        o.hash = "" + a.fontSize + a.fontFamily + f + g + a.actualLineHeight;
      };
      i._getFontDesc = function () {
        return o.fontSize.toString() + "px " + o.fontFamily;
      };
      i._computeHorizontalKerningForText = function () {};
      i._determineRect = function () {
        return false;
      };
      return f;
    }(s.default);
    j.default = u;
    b.exports = j.default;
  }, {
    "../../../assets/CCRenderTexture": 65,
    "../../../components/CCComponent": 100,
    "../../../components/CCLabel": 102,
    "../../../components/CCLabelOutline": 103,
    "../../../utils/text-utils": 243,
    "../../webgl/assemblers/label/2d/bmfont": 206,
    "../utils": 201
  }],
  200: [function (a, b, g) {
    "use strict";

    g.__esModule = true;
    g.default = undefined;
    var e;
    var m = (e = a("../../assembler-2d")) && e.__esModule ? e : {
      default: e
    };
    function n(c, a) {
      return (n = Object.setPrototypeOf || function (c, a) {
        c.__proto__ = a;
        return c;
      })(c, a);
    }
    var p;
    var q = a("../../../utils/text-utils");
    var s = a("../../../platform/CCMacro");
    var o = a("../../../components/CCLabel");
    var c = a("../../../components/CCLabelOutline");
    var l = a("../../../components/CCLabelShadow");
    var t = o.Overflow;
    var h = a("../utils").deleteFromDynamicAtlas;
    var f = a("../utils").getFontFamily;
    var u = null;
    var v = null;
    var w = null;
    var y = "";
    var z = "";
    var A = 0;
    var C = 0;
    var D = [];
    var E = cc.Size.ZERO;
    var d = 0;
    var F = 0;
    var G = 0;
    var H = null;
    var I = "";
    var J = t.NONE;
    var K = false;
    var L = false;
    var M = 0;
    var O = 0;
    var P = null;
    var R = cc.Color.WHITE;
    var S = null;
    var T = cc.Color.BLACK;
    var U = cc.rect();
    var B = cc.Size.ZERO;
    var V = cc.Size.ZERO;
    var W = false;
    var Y = false;
    var Z = false;
    var ga = 0;
    var ra = cc.Vec2.ZERO;
    var sa = 0;
    var xa = ["left", "center", "right"];
    var ya = function (e) {
      var a;
      var i;
      function k() {
        return e.apply(this, arguments) || this;
      }
      i = e;
      (a = k).prototype = Object.create(i.prototype);
      a.prototype.constructor = a;
      n(a, i);
      var j = k.prototype;
      j._getAssemblerData = function () {
        (p = o._canvasPool.get()).canvas.width = p.canvas.height = 1;
        return p;
      };
      j._resetAssemblerData = function (b) {
        if (b) {
          o._canvasPool.put(b);
        }
      };
      j.updateRenderData = function (a) {
        e.prototype.updateRenderData.call(this, a);
        if (a._vertsDirty) {
          this._updateProperties(a);
          this._calculateLabelFont();
          this._updateLabelDimensions();
          this._updateTexture(a);
          this._calDynamicAtlas(a);
          a._actualFontSize = A;
          a.node.setContentSize(V);
          this.updateVerts(a);
          a._vertsDirty = false;
          u = null;
          v = null;
          w = null;
        }
      };
      j.updateVerts = function () {};
      j._updatePaddingRect = function () {
        var a = 0;
        var e = 0;
        var i = 0;
        var k = 0;
        var l = 0;
        B.width = B.height = 0;
        if (P) {
          a = e = i = k = l = P.width;
          B.width = B.height = l * 2;
        }
        if (S) {
          var m = S.blur + l;
          i = Math.max(i, -S._offset.x + m);
          k = Math.max(k, S._offset.x + m);
          a = Math.max(a, S._offset.y + m);
          e = Math.max(e, -S._offset.y + m);
        }
        if (Y) {
          var h = C * 0.21255656141989004;
          k += h;
          B.width += h;
        }
        U.x = i;
        U.y = a;
        U.width = i + k;
        U.height = a + e;
      };
      j._updateProperties = function (e) {
        var a = e._assemblerData;
        u = a.context;
        v = a.canvas;
        w = e._frame._original ? e._frame._original._texture : e._frame._texture;
        z = e.string.toString();
        A = e._fontSize;
        C = A;
        ga = e.underlineHeight || C / 8;
        J = e.overflow;
        E.width = e.node.width;
        E.height = e.node.height;
        V = e.node.getContentSize();
        d = e._lineHeight;
        F = e.horizontalAlign;
        G = e.verticalAlign;
        H = e.node.color;
        W = e.enableBold;
        Y = e.enableItalic;
        Z = e.enableUnderline;
        I = f(e);
        L = e.srcBlendFactor === cc.macro.BlendFactor.ONE;
        M = e._customOffsetX;
        O = e._customOffsetY;
        K = J !== t.NONE && (J === t.RESIZE_HEIGHT || e.enableWrapText);
        if (P = (P = c && e.getComponent(c)) && P.enabled && P.width > 0 ? P : null) {
          R.set(P.color);
        }
        if (S = (S = l && e.getComponent(l)) && S.enabled ? S : null) {
          T.set(S.color);
          T.a = T.a * e.node.color.a / 255;
        }
        this._updatePaddingRect();
      };
      j._calculateFillTextStartPosition = function () {
        var f = 0;
        if (F === s.TextAlignment.RIGHT) {
          f = E.width - U.width;
        } else if (F === s.TextAlignment.CENTER) {
          f = (E.width - U.width) / 2;
        }
        var g = this._getLineHeight();
        D.length;
        var b = g * (D.length - 1);
        var c = A * (1 - q.BASELINE_RATIO / 2);
        if (G !== s.VerticalTextAlignment.TOP) {
          var h = b + U.height + A - E.height;
          if (G === s.VerticalTextAlignment.BOTTOM) {
            c -= h += q.BASELINE_RATIO / 2 * A;
          } else {
            c -= h / 2;
          }
        }
        c += q.BASELINE_OFFSET * A;
        return cc.v2(f + U.x + M, c + U.y + O);
      };
      j._setupOutline = function () {
        u.strokeStyle = "rgba(" + R.r + ", " + R.g + ", " + R.b + ", " + R.a / 255 + ")";
        u.lineWidth = P.width * 2;
      };
      j._setupShadow = function () {
        u.shadowColor = "rgba(" + T.r + ", " + T.g + ", " + T.b + ", " + T.a / 255 + ")";
        u.shadowBlur = S.blur;
        u.shadowOffsetX = S.offset.x;
        u.shadowOffsetY = -S.offset.y;
      };
      j._drawTextEffect = function (a, b) {
        if (S || P || Z) {
          var c = D.length > 1 && S;
          var d = this._measureText(u, y);
          var e = 0;
          var i = 0;
          if (S) {
            this._setupShadow();
          }
          if (P) {
            this._setupOutline();
          }
          for (var j = 0; j < D.length; ++j) {
            e = a.x;
            i = a.y + j * b;
            if (c) {
              if (P) {
                u.strokeText(D[j], e, i);
              }
              u.fillText(D[j], e, i);
            }
            if (Z) {
              sa = d(D[j]);
              if (F === s.TextAlignment.RIGHT) {
                ra.x = a.x - sa;
              } else if (F === s.TextAlignment.CENTER) {
                ra.x = a.x - sa / 2;
              } else {
                ra.x = a.x;
              }
              ra.y = i + C / 8;
              u.fillRect(ra.x, ra.y, sa, ga);
            }
          }
          if (c) {
            u.shadowColor = "transparent";
          }
        }
      };
      j._updateTexture = function () {
        u.clearRect(0, 0, v.width, v.height);
        u.lineJoin = "round";
        if (L) {
          u.fillStyle = "rgba(" + H.r + ", " + H.g + ", " + H.b + ", " + H.a / 255 + ")";
        } else {
          var g = P ? R : H;
          u.fillStyle = "rgba(" + g.r + ", " + g.g + ", " + g.b + ", 0.004)";
          u.fillRect(0, 0, v.width, v.height);
          u.fillStyle = "rgba(" + H.r + ", " + H.g + ", " + H.b + ", 1)";
        }
        var a = this._calculateFillTextStartPosition();
        var b = this._getLineHeight();
        var c = a.x;
        var d = 0;
        this._drawTextEffect(a, b);
        for (var h = 0; h < D.length; ++h) {
          d = a.y + h * b;
          if (P) {
            u.strokeText(D[h], c, d);
          }
          u.fillText(D[h], c, d);
        }
        if (S) {
          u.shadowColor = "transparent";
        }
        w.handleLoadedTexture();
      };
      j._calDynamicAtlas = function (c) {
        if (c.cacheMode === o.CacheMode.BITMAP) {
          var a = c._frame;
          h(c, a);
          if (!a._original) {
            a.setRect(cc.rect(0, 0, v.width, v.height));
          }
          this.packToDynamicAtlas(c, a);
        }
      };
      j._updateLabelDimensions = function () {
        var c = cc.renderer.device.caps ? cc.renderer.device.caps.maxTextureSize : 2048;
        if (!(E.width > c)) {
          E.height;
        }
        E.width = Math.min(E.width, c);
        E.height = Math.min(E.height, c);
        var a = false;
        if (v.width !== E.width) {
          v.width = E.width;
          a = true;
        }
        if (v.height !== E.height) {
          v.height = E.height;
          a = true;
        }
        if (a) {
          u.font = y;
        }
        u.textAlign = xa[F];
        if (q.isUnicodeRTL(z)) {
          u.direction = "rtl";
        }
      };
      j._getFontDesc = function () {
        var b = A.toString() + "px ";
        b += I;
        if (W) {
          b = "bold " + b;
        }
        if (Y) {
          b = "italic " + b;
        }
        return b;
      };
      j._getLineHeight = function () {
        return (d === 0 ? A : d * A / C) | 0;
      };
      j._calculateParagraphLength = function (f, a) {
        for (var b = [], c = 0; c < f.length; ++c) {
          var g = q.safeMeasureText(a, f[c], y);
          b.push(g);
        }
        return b;
      };
      j._measureText = function (d, a) {
        return function (b) {
          return q.safeMeasureText(d, b, a);
        };
      };
      j._calculateShrinkFont = function (c) {
        var b = this._calculateParagraphLength(c, u);
        var f = 0;
        var g = 0;
        var h = 0;
        if (K) {
          var i = V.width;
          var k = V.height;
          if (i < 0 || k < 0) {
            return;
          }
          g = k + 1;
          for (var l = 0, n = A + 1 | 0, o = 0; l < n && !((o = l + n + 1 >> 1) <= 0);) {
            A = o;
            y = this._getFontDesc();
            u.font = y;
            var p = this._getLineHeight();
            g = 0;
            f = 0;
            for (; f < c.length; ++f) {
              var r = q.safeMeasureText(u, c[f], y);
              g += q.fragmentText(c[f], r, i, this._measureText(u, y)).length * p;
            }
            if (g > k) {
              n = o - 1;
            } else {
              l = o;
            }
          }
          if (!(l === 0)) {
            A = l;
            y = this._getFontDesc();
            u.font = y;
          }
        } else {
          g = c.length * this._getLineHeight();
          f = 0;
          for (; f < c.length; ++f) {
            if (h < b[f]) {
              h = b[f];
            }
          }
          var x = (E.width - U.width) / h;
          var w = E.height / g;
          A = C * Math.min(1, x, w) | 0;
          y = this._getFontDesc();
          u.font = y;
        }
      };
      j._calculateWrapText = function (f) {
        if (K) {
          D = [];
          for (var a = V.width, b = 0; b < f.length; ++b) {
            var g = q.safeMeasureText(u, f[b], y);
            var h = q.fragmentText(f[b], g, a, this._measureText(u, y));
            D = D.concat(h);
          }
        }
      };
      j._calculateLabelFont = function () {
        var c = z.split("\n");
        D = c;
        y = this._getFontDesc();
        u.font = y;
        switch (J) {
          case t.NONE:
            for (var b = 0, e = 0, i = 0; i < c.length; ++i) {
              var k = q.safeMeasureText(u, c[i], y);
              b = b > k ? b : k;
            }
            e = (D.length + q.BASELINE_RATIO) * this._getLineHeight();
            var m = parseFloat(b.toFixed(2));
            var j = parseFloat(e.toFixed(2));
            E.width = m + U.width;
            E.height = j + U.height;
            V.width = m + B.width;
            V.height = j + B.height;
            break;
          case t.SHRINK:
            this._calculateShrinkFont(c);
            this._calculateWrapText(c);
            break;
          case t.CLAMP:
            this._calculateWrapText(c);
            break;
          case t.RESIZE_HEIGHT:
            this._calculateWrapText(c);
            var l = (D.length + q.BASELINE_RATIO) * this._getLineHeight();
            E.height = l + U.height;
            V.height = l + B.height;
        }
      };
      j._calculateSplitedStrings = function (f) {
        if (!K) {
          D = [];
          for (var a = V.width, b = 0; b < f.length; ++b) {
            var g = f[b];
            var h = q.safeMeasureText(u, f[b], y);
            if (h > a) {
              g = (g = g.substring(0, g.length * (a / h) | 0)).slice(0, -2) + "…";
            }
            D = D.concat(g);
          }
        }
      };
      return k;
    }(m.default);
    g.default = ya;
    b.exports = g.default;
  }, {
    "../../../components/CCLabel": 102,
    "../../../components/CCLabelOutline": 103,
    "../../../components/CCLabelShadow": 104,
    "../../../platform/CCMacro": 167,
    "../../../utils/text-utils": 243,
    "../../assembler-2d": 188,
    "../utils": 201
  }],
  201: [function (f, a) {
    "use strict";

    var g = f("./dynamic-atlas/manager");
    var b = cc.Color.WHITE;
    var c = {
      fontAtlas: null,
      fontSize: 0,
      lineHeight: 0,
      hAlign: 0,
      vAlign: 0,
      actualLineHeight: 0,
      hash: "",
      fontFamily: "",
      fontDesc: "Arial",
      color: b,
      isOutlined: false,
      out: b,
      margin: 0
    };
    a.exports = {
      deleteFromDynamicAtlas: function (c, a) {
        if (a && a._original && g) {
          g.deleteAtlasSpriteFrame(a);
          a._resetDynamicAtlasFrame();
        }
      },
      getFontFamily: function (b) {
        if (b.useSystemFont) {
          return b.fontFamily || "Arial";
        } else if (b.font) {
          if (b.font._nativeAsset) {
            return b.font._nativeAsset;
          } else {
            cc.assetManager.postLoadNative(b.font, function () {
              if (b.isValid) {
                b.setVertsDirty();
              }
            });
            return "Arial";
          }
        } else {
          return "Arial";
        }
      },
      shareLabelInfo: c
    };
  }, {
    "./dynamic-atlas/manager": 196
  }],
  202: [function (t, j) {
    "use strict";

    function k(a, b, f) {
      f = f || 2;
      var g;
      var h;
      var i;
      var l;
      var o;
      var p;
      var q;
      var r = b && b.length;
      var u = r ? b[0] * f : a.length;
      var d = G(a, 0, u, f, true);
      var x = [];
      if (!d) {
        return x;
      }
      if (r) {
        d = c(a, b, d, f);
      }
      if (a.length > f * 80) {
        g = i = a[0];
        h = l = a[1];
        for (var z = f; z < u; z += f) {
          if ((o = a[z]) < g) {
            g = o;
          }
          if ((p = a[z + 1]) < h) {
            h = p;
          }
          if (o > i) {
            i = o;
          }
          if (p > l) {
            l = p;
          }
        }
        q = Math.max(i - g, l - h);
      }
      H(d, x, f, g, h, q);
      return x;
    }
    function G(a, b, c, d, e) {
      var f;
      var i;
      if (e === E(a, b, c, d) > 0) {
        for (f = b; f < c; f += d) {
          i = B(f, a[f], a[f + 1], i);
        }
      } else {
        for (f = c - d; f >= b; f -= d) {
          i = B(f, a[f], a[f + 1], i);
        }
      }
      if (i && m(i, i.next)) {
        C(i);
        i = i.next;
      }
      return i;
    }
    function q(e, a) {
      if (!e) {
        return e;
      }
      if (!a) {
        a = e;
      }
      var f;
      var h = e;
      do {
        f = false;
        if (h.steiner || !m(h, h.next) && g(h.prev, h, h.next) !== 0) {
          h = h.next;
        } else {
          C(h);
          if ((h = a = h.prev) === h.next) {
            return null;
          }
          f = true;
        }
      } while (f || h !== a);
      return a;
    }
    function H(c, d, g, e, i, j, h) {
      if (c) {
        if (!h && j) {
          f(c, e, i, j);
        }
        for (var k, n, p = c; c.prev !== c.next;) {
          k = c.prev;
          n = c.next;
          if (j ? r(c, e, i, j) : z(c)) {
            d.push(k.i / g);
            d.push(c.i / g);
            d.push(n.i / g);
            C(c);
            c = n.next;
            p = n.next;
          } else if ((c = n) === p) {
            if (h) {
              if (h === 1) {
                H(c = a(c, d, g), d, g, e, i, j, 2);
              } else if (h === 2) {
                o(c, d, g, e, i, j);
              }
            } else {
              H(q(c), d, g, e, i, j, 1);
            }
            break;
          }
        }
      }
    }
    function z(f) {
      var a = f.prev;
      var b = f;
      var c = f.next;
      if (g(a, b, c) >= 0) {
        return false;
      }
      for (var d = f.next.next; d !== f.prev;) {
        if (i(a.x, a.y, b.x, b.y, c.x, c.y, d.x, d.y) && g(d.prev, d, d.next) >= 0) {
          return false;
        }
        d = d.next;
      }
      return true;
    }
    function r(d, b, j, e) {
      var p = d.prev;
      var k = d;
      var m = d.next;
      if (g(p, k, m) >= 0) {
        return false;
      }
      for (var n = p.x < k.x ? p.x < m.x ? p.x : m.x : k.x < m.x ? k.x : m.x, a = p.y < k.y ? p.y < m.y ? p.y : m.y : k.y < m.y ? k.y : m.y, o = p.x > k.x ? p.x > m.x ? p.x : m.x : k.x > m.x ? k.x : m.x, c = p.y > k.y ? p.y > m.y ? p.y : m.y : k.y > m.y ? k.y : m.y, l = s(n, a, b, j, e), h = s(o, c, b, j, e), q = d.nextZ; q && q.z <= h;) {
        if (q !== d.prev && q !== d.next && i(p.x, p.y, k.x, k.y, m.x, m.y, q.x, q.y) && g(q.prev, q, q.next) >= 0) {
          return false;
        }
        q = q.nextZ;
      }
      for (q = d.prevZ; q && q.z >= l;) {
        if (q !== d.prev && q !== d.next && i(p.x, p.y, k.x, k.y, m.x, m.y, q.x, q.y) && g(q.prev, q, q.next) >= 0) {
          return false;
        }
        q = q.prevZ;
      }
      return true;
    }
    function a(g, h, b) {
      var c = g;
      do {
        var i = c.prev;
        var j = c.next.next;
        if (!m(i, j) && u(i, c, c.next, j) && y(i, j) && y(j, i)) {
          h.push(i.i / b);
          h.push(c.i / b);
          h.push(j.i / b);
          C(c);
          C(c.next);
          c = g = j;
        }
        c = c.next;
      } while (c !== g);
      return c;
    }
    function o(b, c, f, e, g, h) {
      var a = b;
      do {
        for (var i = a.next.next; i !== a.prev;) {
          if (a.i !== i.i && d(a, i)) {
            var l = A(a, i);
            a = q(a, a.next);
            l = q(l, l.next);
            H(a, c, f, e, g, h);
            H(l, c, f, e, g, h);
            return;
          }
          i = i.next;
        }
        a = a.next;
      } while (a !== b);
    }
    function c(a, b, c, d) {
      var f;
      var i;
      var n;
      var o = [];
      f = 0;
      i = b.length;
      for (; f < i; f++) {
        if ((n = G(a, b[f] * d, f < i - 1 ? b[f + 1] * d : a.length, d, false)) === n.next) {
          n.steiner = true;
        }
        o.push(p(n));
      }
      o.sort(l);
      f = 0;
      for (; f < o.length; f++) {
        h(o[f], c);
        c = q(c, c.next);
      }
      return c;
    }
    function l(c, a) {
      return c.x - a.x;
    }
    function h(b, a) {
      if (a = e(b, a)) {
        var f = A(a, b);
        q(f, f.next);
      }
    }
    function e(a, b) {
      var c;
      var d = b;
      var f = a.x;
      var g = a.y;
      var k = -Infinity;
      do {
        if (g <= d.y && g >= d.next.y) {
          var m = d.x + (g - d.y) * (d.next.x - d.x) / (d.next.y - d.y);
          if (m <= f && m > k) {
            k = m;
            if (m === f) {
              if (g === d.y) {
                return d;
              }
              if (g === d.next.y) {
                return d.next;
              }
            }
            c = d.x < d.next.x ? d : d.next;
          }
        }
        d = d.next;
      } while (d !== b);
      if (!c) {
        return null;
      }
      if (f === k) {
        return c.prev;
      }
      var n;
      var o = c;
      var s = c.x;
      var l = c.y;
      var h = Infinity;
      for (d = c.next; d !== o;) {
        if (f >= d.x && d.x >= s && i(g < l ? f : k, g, s, l, g < l ? k : f, g, d.x, d.y) && ((n = Math.abs(g - d.y) / (f - d.x)) < h || n === h && d.x > c.x) && y(d, a)) {
          c = d;
          h = n;
        }
        d = d.next;
      }
      return c;
    }
    function f(f, a, b, c) {
      var d = f;
      do {
        if (d.z === null) {
          d.z = s(d.x, d.y, a, b, c);
        }
        d.prevZ = d.prev;
        d.nextZ = d.next;
        d = d.next;
      } while (d !== f);
      d.prevZ.nextZ = null;
      d.prevZ = null;
      n(d);
    }
    function n(a) {
      var c;
      var e;
      var i;
      var l;
      var n;
      var o;
      var r;
      var s;
      var t = 1;
      do {
        e = a;
        a = null;
        n = null;
        o = 0;
        for (; e;) {
          o++;
          i = e;
          r = 0;
          c = 0;
          for (; c < t && (r++, i = i.nextZ); c++);
          for (s = t; r > 0 || s > 0 && i;) {
            if (r === 0) {
              l = i;
              i = i.nextZ;
              s--;
            } else if (s !== 0 && i) {
              if (e.z <= i.z) {
                l = e;
                e = e.nextZ;
                r--;
              } else {
                l = i;
                i = i.nextZ;
                s--;
              }
            } else {
              l = e;
              e = e.nextZ;
              r--;
            }
            if (n) {
              n.nextZ = l;
            } else {
              a = l;
            }
            l.prevZ = n;
            n = l;
          }
          e = i;
        }
        n.nextZ = null;
        t *= 2;
      } while (o > 1);
      return a;
    }
    function s(e, g, h, c, d) {
      return (e = ((e = ((e = ((e = ((e = (e - h) * 32767 / d) | e << 8) & 16711935) | e << 4) & 252645135) | e << 2) & 858993459) | e << 1) & 1431655765) | (g = ((g = ((g = ((g = ((g = (g - c) * 32767 / d) | g << 8) & 16711935) | g << 4) & 252645135) | g << 2) & 858993459) | g << 1) & 1431655765) << 1;
    }
    function p(d) {
      var a = d;
      var e = d;
      do {
        if (a.x < e.x) {
          e = a;
        }
        a = a.next;
      } while (a !== d);
      return e;
    }
    function i(i, b, c, d, e, f, g, h) {
      return (e - g) * (b - h) - (i - g) * (f - h) >= 0 && (i - g) * (d - h) - (c - g) * (b - h) >= 0 && (c - g) * (f - h) - (e - g) * (d - h) >= 0;
    }
    function d(c, a) {
      return c.next.i !== a.i && c.prev.i !== a.i && !v(c, a) && y(c, a) && y(a, c) && x(c, a);
    }
    function g(d, a, b) {
      return (a.y - d.y) * (b.x - a.x) - (a.x - d.x) * (b.y - a.y);
    }
    function m(c, a) {
      return c.x === a.x && c.y === a.y;
    }
    function u(e, a, b, c) {
      return !!(m(e, a) && m(b, c) || m(e, c) && m(b, a)) || g(e, a, b) > 0 != g(e, a, c) > 0 && g(b, c, e) > 0 != g(b, c, a) > 0;
    }
    function v(d, a) {
      var b = d;
      do {
        if (b.i !== d.i && b.next.i !== d.i && b.i !== a.i && b.next.i !== a.i && u(b, b.next, d, a)) {
          return true;
        }
        b = b.next;
      } while (b !== d);
      return false;
    }
    function y(c, a) {
      if (g(c.prev, c, c.next) < 0) {
        return g(c, a, c.next) >= 0 && g(c, c.prev, a) >= 0;
      } else {
        return g(c, a, c.prev) < 0 || g(c, c.next, a) < 0;
      }
    }
    function x(g, a) {
      var b = g;
      var h = false;
      var i = (g.x + a.x) / 2;
      var e = (g.y + a.y) / 2;
      do {
        if (b.y > e != b.next.y > e && i < (b.next.x - b.x) * (e - b.y) / (b.next.y - b.y) + b.x) {
          h = !h;
        }
        b = b.next;
      } while (b !== g);
      return h;
    }
    function A(g, a) {
      var b = new D(g.i, g.x, g.y);
      var c = new D(a.i, a.x, a.y);
      var d = g.next;
      var e = a.prev;
      g.next = a;
      a.prev = g;
      b.next = d;
      d.prev = b;
      c.next = b;
      b.prev = c;
      e.next = c;
      c.prev = e;
      return c;
    }
    function B(f, a, b, c) {
      var d = new D(f, a, b);
      if (c) {
        d.next = c.next;
        d.prev = c;
        c.next.prev = d;
        c.next = d;
      } else {
        d.prev = d;
        d.next = d;
      }
      return d;
    }
    function C(b) {
      b.next.prev = b.prev;
      b.prev.next = b.next;
      if (b.prevZ) {
        b.prevZ.nextZ = b.nextZ;
      }
      if (b.nextZ) {
        b.nextZ.prevZ = b.prevZ;
      }
    }
    function D(d, a, b) {
      this.i = d;
      this.x = a;
      this.y = b;
      this.prev = null;
      this.next = null;
      this.z = null;
      this.prevZ = null;
      this.nextZ = null;
      this.steiner = false;
    }
    function E(a, b, c, d) {
      for (var e = 0, i = b, j = c - d; i < c; i += d) {
        e += (a[j] - a[i]) * (a[i + 1] + a[j + 1]);
        j = i;
      }
      return e;
    }
    cc.Graphics.earcut = j.exports = k;
    k.deviation = function (a, b, d, e) {
      var f = b && b.length;
      var g = f ? b[0] * d : a.length;
      var h = Math.abs(E(a, 0, g, d));
      if (f) {
        for (var i = 0, j = b.length; i < j; i++) {
          var k = b[i] * d;
          var l = i < j - 1 ? b[i + 1] * d : a.length;
          h -= Math.abs(E(a, k, l, d));
        }
      }
      var o = 0;
      for (i = 0; i < e.length; i += 3) {
        var p = e[i] * d;
        var u = e[i + 1] * d;
        var w = e[i + 2] * d;
        o += Math.abs((a[p] - a[w]) * (a[u + 1] - a[p + 1]) - (a[p] - a[u]) * (a[w + 1] - a[p + 1]));
      }
      if (h === 0 && o === 0) {
        return 0;
      } else {
        return Math.abs((o - h) / h);
      }
    };
    k.flatten = function (a) {
      for (var b = a[0][0].length, c = {
          vertices: [],
          holes: [],
          dimensions: b
        }, d = 0, i = 0; i < a.length; i++) {
        for (var j = 0; j < a[i].length; j++) {
          for (var k = 0; k < b; k++) {
            c.vertices.push(a[i][j][k]);
          }
        }
        if (i > 0) {
          d += a[i - 1].length;
          c.holes.push(d);
        }
      }
      return c;
    };
  }, {}],
  203: [function (a, b) {
    "use strict";

    var i = a("../../../../graphics/graphics-point");
    var j = a("../../../../graphics/helper");
    var f = a("../../../../graphics/types").PointFlags;
    function c() {
      this.reset();
    }
    function d() {
      this._tessTol = 0.25;
      this._distTol = 0.01;
      this._updatePathOffset = false;
      this._paths = null;
      this._pathLength = 0;
      this._pathOffset = 0;
      this._points = null;
      this._pointsOffset = 0;
      this._commandx = 0;
      this._commandy = 0;
      this._paths = [];
      this._points = [];
    }
    cc.js.mixin(c.prototype, {
      reset: function () {
        this.closed = false;
        this.nbevel = 0;
        this.complex = true;
        if (this.points) {
          this.points.length = 0;
        } else {
          this.points = [];
        }
      }
    });
    cc.js.mixin(d.prototype, {
      moveTo: function (c, a) {
        if (this._updatePathOffset) {
          this._pathOffset = this._pathLength;
          this._updatePathOffset = false;
        }
        this._addPath();
        this._addPoint(c, a, f.PT_CORNER);
        this._commandx = c;
        this._commandy = a;
      },
      lineTo: function (c, a) {
        this._addPoint(c, a, f.PT_CORNER);
        this._commandx = c;
        this._commandy = a;
      },
      bezierCurveTo: function (g, b, d, e, h, i) {
        var a = this._curPath;
        var k = a.points[a.points.length - 1];
        if (k.x !== g || k.y !== b || d !== h || e !== i) {
          j.tesselateBezier(this, k.x, k.y, g, b, d, e, h, i, 0, f.PT_CORNER);
          this._commandx = h;
          this._commandy = i;
        } else {
          this.lineTo(h, i);
        }
      },
      quadraticCurveTo: function (g, a, b, c) {
        var d = this._commandx;
        var e = this._commandy;
        this.bezierCurveTo(d + 2 / 3 * (g - d), e + 2 / 3 * (a - e), b + 2 / 3 * (g - b), c + 2 / 3 * (a - c), b, c);
      },
      arc: function (a, b, c, d, e, f) {
        j.arc(this, a, b, c, d, e, f);
      },
      ellipse: function (e, a, b, c) {
        j.ellipse(this, e, a, b, c);
        this._curPath.complex = false;
      },
      circle: function (d, a, b) {
        j.ellipse(this, d, a, b, b);
        this._curPath.complex = false;
      },
      rect: function (e, a, b, c) {
        this.moveTo(e, a);
        this.lineTo(e, a + c);
        this.lineTo(e + b, a + c);
        this.lineTo(e + b, a);
        this.close();
        this._curPath.complex = false;
      },
      roundRect: function (f, a, b, c, d) {
        j.roundRect(this, f, a, b, c, d);
        this._curPath.complex = false;
      },
      clear: function (b) {
        this._pathLength = 0;
        this._pathOffset = 0;
        this._pointsOffset = 0;
        this._curPath = null;
        if (b) {
          this._paths.length = 0;
          this._points.length = 0;
        }
      },
      close: function () {
        this._curPath.closed = true;
      },
      _addPath: function () {
        var d = this._pathLength;
        var a = this._paths[d];
        if (a) {
          a.reset();
        } else {
          a = new c();
          this._paths.push(a);
        }
        this._pathLength++;
        this._curPath = a;
        return a;
      },
      _addPoint: function (d, b, c) {
        var e = this._curPath;
        if (e) {
          var f;
          var j = this._points;
          var h = e.points;
          if (f = j[this._pointsOffset++]) {
            f.x = d;
            f.y = b;
          } else {
            f = new i(d, b);
            j.push(f);
          }
          f.flags = c;
          h.push(f);
        }
      }
    });
    cc.Graphics._Impl = d;
    b.exports = d;
  }, {
    "../../../../graphics/graphics-point": 150,
    "../../../../graphics/helper": 152,
    "../../../../graphics/types": 154
  }],
  204: [function (a, b, j) {
    "use strict";

    j.__esModule = true;
    j.default = undefined;
    var e = k(a("../../../assembler"));
    var i = k(a("../../../../../renderer/core/input-assembler"));
    function k(b) {
      if (b && b.__esModule) {
        return b;
      } else {
        return {
          default: b
        };
      }
    }
    function n(c, a) {
      return (n = Object.setPrototypeOf || function (c, a) {
        c.__proto__ = a;
        return c;
      })(c, a);
    }
    var q = a("../../mesh-buffer");
    var s = a("../../../index");
    var o = a("../../../../graphics/graphics");
    var C = a("../../../../graphics/types").PointFlags;
    var A = o.LineJoin;
    var h = o.LineCap;
    var t = a("./earcut");
    a("./impl");
    var z = Math.PI;
    var f = Math.min;
    var E = Math.max;
    var F = Math.ceil;
    var u = Math.acos;
    var v = Math.cos;
    var m = Math.sin;
    var p = Math.atan2;
    function d(d, a, b) {
      if (d < a) {
        return a;
      } else if (d > b) {
        return b;
      } else {
        return d;
      }
    }
    var c = cc.gfx;
    var g = new c.VertexFormat([{
      name: c.ATTR_POSITION,
      type: c.ATTR_TYPE_FLOAT32,
      num: 2
    }, {
      name: c.ATTR_COLOR,
      type: c.ATTR_TYPE_UINT8,
      num: 4,
      normalize: true
    }, {
      name: "a_dist",
      type: c.ATTR_TYPE_FLOAT32,
      num: 1
    }]);
    g.name = "vfmtPosColorSdf";
    var l = function (e) {
      var a;
      var l;
      function o(a) {
        var b;
        (b = e.call(this, a) || this)._buffer = null;
        b._buffers = [];
        b._bufferOffset = 0;
        return b;
      }
      l = e;
      (a = o).prototype = Object.create(l.prototype);
      a.prototype.constructor = a;
      n(a, l);
      var j = o.prototype;
      j.getVfmt = function () {
        return g;
      };
      j.getVfmtFloatCount = function () {
        return 4;
      };
      j.requestBuffer = function () {
        var d = {
          indiceStart: 0,
          vertexStart: 0
        };
        var a = new q(s._handle, this.getVfmt());
        d.meshbuffer = a;
        var b = new i.default(a._vb, a._ib);
        d.ia = b;
        this._buffers.push(d);
        return d;
      };
      j.getBuffers = function () {
        if (this._buffers.length === 0) {
          this.requestBuffer();
        }
        return this._buffers;
      };
      j.clear = function (i) {
        this._bufferOffset = 0;
        var b = this._buffers;
        if (i) {
          for (var c = 0, j = b.length; c < j; c++) {
            var e = b[c];
            e.meshbuffer.destroy();
            e.meshbuffer = null;
          }
          b.length = 0;
        } else {
          for (var k = 0, l = b.length; k < l; k++) {
            var h = b[k];
            h.indiceStart = 0;
            h.vertexStart = 0;
            h.meshbuffer.reset();
          }
        }
      };
      j.fillBuffers = function (a, b) {
        b._flush();
        b.node = a.node;
        b.material = a._materials[0];
        for (var c = this.getBuffers(), d = 0, i = c.length; d < i; d++) {
          var f = c[d];
          var j = f.meshbuffer;
          f.ia._count = f.indiceStart;
          b._flushIA(f.ia);
          j.uploadData();
        }
      };
      j.genBuffer = function (g, a) {
        var b = this.getBuffers();
        var c = b[this._bufferOffset];
        var h = c.meshbuffer;
        var i = c.vertexStart + a;
        if (i > 65535 || i * 3 > 131070) {
          ++this._bufferOffset;
          i = a;
          if (this._bufferOffset < b.length) {
            c = b[this._bufferOffset];
          } else {
            c = this.requestBuffer(g);
            b[this._bufferOffset] = c;
          }
          h = c.meshbuffer;
        }
        if (i > h.vertexOffset) {
          h.requestStatic(a, a * 3);
        }
        this._buffer = c;
        return c;
      };
      j.stroke = function (b) {
        this._curColor = b._strokeColor._val;
        this._flattenPaths(b._impl);
        this._expandStroke(b);
        b._impl._updatePathOffset = true;
      };
      j.fill = function (b) {
        this._curColor = b._fillColor._val;
        this._expandFill(b);
        b._impl._updatePathOffset = true;
      };
      j._expandStroke = function (e) {
        var f;
        var g;
        var i;
        var j = e.lineWidth * 0.5;
        var k = e.lineCap;
        var n = e.lineJoin;
        var p = e.miterLimit;
        var a = e._impl;
        f = j;
        z;
        g = a._tessTol;
        i = u(f / (f + g)) * 2;
        var o = E(2, F(3.141592653589793 / i));
        this._calculateJoins(a, j, n, p);
        for (var c = a._paths, l = 0, q = a._pathOffset, r = a._pathLength; q < r; q++) {
          var s = c[q];
          var t = s.points.length;
          if (n === A.ROUND) {
            l += (t + s.nbevel * (o + 2) + 1) * 2;
          } else {
            l += (t + s.nbevel * 5 + 1) * 2;
          }
          if (!s.closed) {
            if (k === h.ROUND) {
              l += (o * 2 + 2) * 2;
            } else {
              l += 12;
            }
          }
        }
        for (var v = this.genBuffer(e, l), w = v.meshbuffer, x = w._vData, y = w._iData, b = a._pathOffset, B = a._pathLength; b < B; b++) {
          var D;
          var G = c[b];
          var H = G.points;
          var I = H.length;
          var J = v.vertexStart;
          var L = undefined;
          var N = undefined;
          var O = undefined;
          var P = undefined;
          if (D = G.closed) {
            L = H[I - 1];
            N = H[0];
            O = 0;
            P = I;
          } else {
            L = H[0];
            N = H[1];
            O = 1;
            P = I - 1;
          }
          N = N || L;
          if (!D) {
            var R = N.sub(L);
            R.normalizeSelf();
            var U = R.x;
            var V = R.y;
            if (k === h.BUTT) {
              this._buttCapStart(L, U, V, j, 0);
            } else if (k === h.SQUARE) {
              this._buttCapStart(L, U, V, j, j);
            } else if (k === h.ROUND) {
              this._roundCapStart(L, U, V, j, o);
            }
          }
          for (var W = O; W < P; ++W) {
            if (n === A.ROUND) {
              this._roundJoin(L, N, j, j, o);
            } else if ((N.flags & (C.PT_BEVEL | C.PT_INNERBEVEL)) != 0) {
              this._bevelJoin(L, N, j, j);
            } else {
              this._vset(N.x + N.dmx * j, N.y + N.dmy * j, 1);
              this._vset(N.x - N.dmx * j, N.y - N.dmy * j, -1);
            }
            L = N;
            N = H[W + 1];
          }
          if (D) {
            var X = this.getVfmtFloatCount();
            var Y = J * X;
            this._vset(x[Y], x[Y + 1], 1);
            this._vset(x[Y + X], x[Y + X + 1], -1);
          } else {
            var Z = N.sub(L);
            Z.normalizeSelf();
            var $ = Z.x;
            var aa = Z.y;
            if (k === h.BUTT) {
              this._buttCapEnd(N, $, aa, j, 0);
            } else if (k === h.SQUARE) {
              this._buttCapEnd(N, $, aa, j, j);
            } else if (k === h.ROUND) {
              this._roundCapEnd(N, $, aa, j, o);
            }
          }
          for (var ca = v.indiceStart, da = J + 2, ya = v.vertexStart; da < ya; da++) {
            y[ca++] = da - 2;
            y[ca++] = da - 1;
            y[ca++] = da;
          }
          v.indiceStart = ca;
        }
      };
      j._expandFill = function (b) {
        for (var d = b._impl, f = d._paths, e = 0, g = d._pathOffset, h = d._pathLength; g < h; g++) {
          e += f[g].points.length;
        }
        for (var j = this.genBuffer(b, e), m = j.meshbuffer, a = m._vData, n = m._iData, c = d._pathOffset, o = d._pathLength; c < o; c++) {
          var p = f[c];
          var q = p.points;
          var r = q.length;
          if (r !== 0) {
            for (var s = j.vertexStart, v = 0; v < r; ++v) {
              this._vset(q[v].x, q[v].y);
            }
            var w = j.indiceStart;
            if (p.complex) {
              for (var x = [], y = this.getVfmtFloatCount(), A = s, C = j.vertexStart; A < C; A++) {
                var E = A * y;
                x.push(a[E]);
                x.push(a[E + 1]);
              }
              var M = t(x, null, 2);
              if (!M || M.length === 0) {
                continue;
              }
              for (var R = 0, S = M.length; R < S; R++) {
                n[w++] = M[R] + s;
              }
            } else {
              for (var T = s, W = s + 2, X = j.vertexStart; W < X; W++) {
                n[w++] = T;
                n[w++] = W - 1;
                n[w++] = W;
              }
            }
            j.indiceStart = w;
          }
        }
      };
      j._calculateJoins = function (b, d, g, e) {
        var h = 0;
        var i = d * d;
        if (d > 0) {
          h = 1 / d;
        }
        for (var j = b._paths, k = b._pathOffset, l = b._pathLength; k < l; k++) {
          var m = j[k];
          var o = m.points;
          var p = o.length;
          var q = o[p - 1];
          var r = o[0];
          m.nbevel = 0;
          for (var s = 0; s < p; s++) {
            var u;
            var x;
            var y = q.dy;
            var G = -q.dx;
            var M = r.dy;
            var Q = -r.dx;
            r.dmx = (y + M) * 0.5;
            r.dmy = (G + Q) * 0.5;
            if ((u = r.dmx * r.dmx + r.dmy * r.dmy) > 0.000001) {
              var R = 1 / u;
              if (R > 600) {
                R = 600;
              }
              r.dmx *= R;
              r.dmy *= R;
            }
            if (r.dx * q.dy - q.dx * r.dy > 0) {
              r.flags |= C.PT_LEFT;
            }
            if (u * (x = E(11, f(q.len, r.len) * h)) * x < 1) {
              r.flags |= C.PT_INNERBEVEL;
            }
            var S = r.dmx * d;
            var T = r.dmy * d;
            var U = S * S + T * T;
            if (U > r.len * r.len + i && U > q.len * q.len + i) {
              r.flags |= C.PT_INNERBEVEL;
            }
            if (r.flags & C.PT_CORNER && (u * e * e < 1 || g === A.BEVEL || g === A.ROUND)) {
              r.flags |= C.PT_BEVEL;
            }
            if ((r.flags & (C.PT_BEVEL | C.PT_INNERBEVEL)) != 0) {
              m.nbevel++;
            }
            q = r;
            r = o[s + 1];
          }
        }
      };
      j._flattenPaths = function (a) {
        for (var b = a._paths, c = a._pathOffset, d = a._pathLength; c < d; c++) {
          var f = b[c];
          var h = f.points;
          var i = h[h.length - 1];
          var l = h[0];
          if (h.length > 2 && i.equals(l)) {
            f.closed = true;
            h.pop();
            i = h[h.length - 1];
          }
          for (var o = 0, r = h.length; o < r; o++) {
            var s = l.sub(i);
            i.len = s.mag();
            if (s.x || s.y) {
              s.normalizeSelf();
            }
            i.dx = s.x;
            i.dy = s.y;
            i = l;
            l = h[o + 1];
          }
        }
      };
      j._chooseBevel = function (a, b, d, e) {
        var f;
        var l;
        var m;
        var n;
        var o = d.x;
        var k = d.y;
        if (a !== 0) {
          f = o + b.dy * e;
          l = k - b.dx * e;
          m = o + d.dy * e;
          n = k - d.dx * e;
        } else {
          f = m = o + d.dmx * e;
          l = n = k + d.dmy * e;
        }
        return [f, l, m, n];
      };
      j._buttCapStart = function (c, b, d, e, f) {
        var g = c.x - b * f;
        var h = c.y - d * f;
        var i = d;
        var a = -b;
        this._vset(g + i * e, h + a * e, 1);
        this._vset(g - i * e, h - a * e, -1);
      };
      j._buttCapEnd = function (c, b, d, e, f) {
        var g = c.x + b * f;
        var h = c.y + d * f;
        var i = d;
        var a = -b;
        this._vset(g + i * e, h + a * e, 1);
        this._vset(g - i * e, h - a * e, -1);
      };
      j._roundCapStart = function (f, b, d, e, g) {
        for (var h = f.x, i = f.y, j = d, a = -b, k = 0; k < g; k++) {
          var l = k / (g - 1) * z;
          var n = v(l) * e;
          var p = m(l) * e;
          this._vset(h - j * n - b * p, i - a * n - d * p, 1);
          this._vset(h, i, 0);
        }
        this._vset(h + j * e, i + a * e, 1);
        this._vset(h - j * e, i - a * e, -1);
      };
      j._roundCapEnd = function (f, b, d, e, g) {
        var h = f.x;
        var i = f.y;
        var j = d;
        var a = -b;
        this._vset(h + j * e, i + a * e, 1);
        this._vset(h - j * e, i - a * e, -1);
        for (var k = 0; k < g; k++) {
          var l = k / (g - 1) * z;
          var n = v(l) * e;
          var p = m(l) * e;
          this._vset(h, i, 0);
          this._vset(h - j * n + b * p, i - a * n + d * p, 1);
        }
      };
      j._roundJoin = function (k, g, h, e, i) {
        var j = k.dy;
        var n = -k.dx;
        var q = g.dy;
        var a = -g.dx;
        var o = g.x;
        var c = g.y;
        if ((g.flags & C.PT_LEFT) != 0) {
          var l = this._chooseBevel(g.flags & C.PT_INNERBEVEL, k, g, h);
          var r = l[0];
          var f = l[1];
          var w = l[2];
          var s = l[3];
          var t = p(-n, -j);
          var u = p(-a, -q);
          if (u > t) {
            u -= z * 2;
          }
          this._vset(r, f, 1);
          this._vset(o - j * e, g.y - n * e, -1);
          for (var y = d(F((t - u) / z) * i, 2, i), A = 0; A < y; A++) {
            var D = t + A / (y - 1) * (u - t);
            var G = o + v(D) * e;
            var J = c + m(D) * e;
            this._vset(o, c, 0);
            this._vset(G, J, -1);
          }
          this._vset(w, s, 1);
          this._vset(o - q * e, c - a * e, -1);
        } else {
          var M = this._chooseBevel(g.flags & C.PT_INNERBEVEL, k, g, -e);
          var Q = M[0];
          var I = M[1];
          var O = M[2];
          var L = M[3];
          var P = p(n, j);
          var R = p(a, q);
          if (R < P) {
            R += z * 2;
          }
          this._vset(o + j * e, c + n * e, 1);
          this._vset(Q, I, -1);
          for (var S = d(F((R - P) / z) * i, 2, i), T = 0; T < S; T++) {
            var U = P + T / (S - 1) * (R - P);
            var V = o + v(U) * h;
            var W = c + m(U) * h;
            this._vset(V, W, 1);
            this._vset(o, c, 0);
          }
          this._vset(o + q * e, c + a * e, 1);
          this._vset(O, L, -1);
        }
      };
      j._bevelJoin = function (a, b, c, e) {
        var f;
        var h;
        var i;
        var l;
        var m;
        var o;
        var r;
        var s;
        var u = a.dy;
        var z = -a.dx;
        var d = b.dy;
        var A = -b.dx;
        if (b.flags & C.PT_LEFT) {
          var p = this._chooseBevel(b.flags & C.PT_INNERBEVEL, a, b, c);
          m = p[0];
          o = p[1];
          r = p[2];
          s = p[3];
          this._vset(m, o, 1);
          this._vset(b.x - u * e, b.y - z * e, -1);
          this._vset(r, s, 1);
          this._vset(b.x - d * e, b.y - A * e, -1);
        } else {
          var v = this._chooseBevel(b.flags & C.PT_INNERBEVEL, a, b, -e);
          f = v[0];
          h = v[1];
          i = v[2];
          l = v[3];
          this._vset(b.x + u * c, b.y + z * c, 1);
          this._vset(f, h, -1);
          this._vset(b.x + d * c, b.y + A * c, 1);
          this._vset(i, l, -1);
        }
      };
      j._vset = function (i, b, c) {
        if (c === undefined) {
          c = 0;
        }
        var j = this._buffer;
        var e = j.meshbuffer;
        var f = j.vertexStart * this.getVfmtFloatCount();
        var g = e._vData;
        var h = e._uintVData;
        g[f] = i;
        g[f + 1] = b;
        h[f + 2] = this._curColor;
        g[f + 3] = c;
        j.vertexStart++;
        e._dirty = true;
      };
      return o;
    }(e.default);
    j.default = l;
    e.default.register(cc.Graphics, l);
    b.exports = j.default;
  }, {
    "../../../../../renderer/core/input-assembler": 272,
    "../../../../graphics/graphics": 151,
    "../../../../graphics/types": 154,
    "../../../assembler": 190,
    "../../../index": 193,
    "../../mesh-buffer": 220,
    "./earcut": 202,
    "./impl": 203
  }],
  205: [function (b) {
    "use strict";

    cc.assemblers = {};
    b("./sprite");
    b("./mask-assembler");
    b("./graphics");
    b("./label");
    b("./motion-streak");
  }, {
    "./graphics": 204,
    "./label": 210,
    "./mask-assembler": 211,
    "./motion-streak": undefined,
    "./sprite": 218
  }],
  206: [function (a, b, c) {
    "use strict";

    c.__esModule = true;
    c.default = undefined;
    var d;
    var i = (d = a("../../../../utils/label/bmfont")) && d.__esModule ? d : {
      default: d
    };
    function k(c, a) {
      return (k = Object.setPrototypeOf || function (c, a) {
        c.__proto__ = a;
        return c;
      })(c, a);
    }
    var u = 0;
    var f = function (e) {
      var a;
      var g;
      function h() {
        return e.apply(this, arguments) || this;
      }
      g = e;
      (a = h).prototype = Object.create(g.prototype);
      a.prototype.constructor = a;
      k(a, g);
      var d = h.prototype;
      d.initData = function () {
        this._renderData.createFlexData(0, 4, 6, this.getVfmt());
      };
      d._reserveQuads = function (c, a) {
        var b = a * 4;
        var d = a * 6;
        var e = this._renderData._flexBuffer;
        e.reserve(b, d);
        e.used(b, d);
        for (var f = this._renderData.iDatas[0], g = 0, j = 0, l = d; g < l; g += 6, j += 4) {
          f[g] = j;
          f[g + 1] = j + 1;
          f[g + 2] = j + 2;
          f[g + 3] = j + 1;
          f[g + 4] = j + 3;
          f[g + 5] = j + 2;
        }
        u = 0;
      };
      d._quadsUpdated = function () {
        u = 0;
        this._renderData._flexBuffer.used(this.verticesCount, this.indicesCount);
      };
      d._getColor = function (b) {
        return b.node._color._val;
      };
      d.appendQuad = function (d, a, b, e, f, i, j) {
        var k = this._renderData;
        var n = k.vDatas[0];
        var c = k.uintVDatas[0];
        this.verticesCount += 4;
        this.indicesCount = this.verticesCount / 2 * 3;
        var l;
        var o;
        var q;
        var x;
        var A = a.width;
        var w = a.height;
        var p = b.width;
        var v = b.height;
        var g = this._getColor(d);
        var m = this.floatsPerVert;
        var y = u + this.uvOffset;
        if (e) {
          l = b.x / A;
          q = (b.x + v) / A;
          o = (b.y + p) / w;
          x = b.y / w;
          n[y] = l;
          n[y + 1] = x;
          n[y += m] = l;
          n[y + 1] = o;
          n[y += m] = q;
          n[y + 1] = x;
          n[y += m] = q;
          n[y + 1] = o;
        } else {
          l = b.x / A;
          q = (b.x + p) / A;
          o = (b.y + v) / w;
          x = b.y / w;
          n[y] = l;
          n[y + 1] = o;
          n[y += m] = q;
          n[y + 1] = o;
          n[y += m] = l;
          n[y + 1] = x;
          n[y += m] = q;
          n[y + 1] = x;
        }
        l = f;
        q = f + p * j;
        o = i - v * j;
        x = i;
        this.appendVerts(d, u, l, q, o, x);
        for (var D = u + this.colorOffset, E = 0; E < 4; E++) {
          c[D] = g;
          D += m;
        }
        u += this.floatsPerVert * 4;
      };
      d.appendVerts = function (e, b, j, d, f, g) {
        var h = this._local;
        var i = this.floatsPerVert;
        h[b] = j;
        h[b + 1] = f;
        h[b += i] = d;
        h[b + 1] = f;
        h[b += i] = j;
        h[b + 1] = g;
        h[b += i] = d;
        h[b + 1] = g;
      };
      d.updateWorldVerts = function (d) {
        for (var b = d.node._worldMatrix.m, f = b[0], e = b[1], g = b[4], i = b[5], j = b[12], k = b[13], a = this._local, m = this._renderData.vDatas[0], c = this.floatsPerVert, l = 0; l < a.length; l += c) {
          var n = a[l];
          var q = a[l + 1];
          m[l] = n * f + q * g + j;
          m[l + 1] = n * e + q * i + k;
        }
      };
      return h;
    }(i.default);
    c.default = f;
    b.exports = c.default;
  }, {
    "../../../../utils/label/bmfont": 197
  }],
  207: [function (a, b, c) {
    "use strict";

    function i(c, a) {
      return (i = Object.setPrototypeOf || function (c, a) {
        c.__proto__ = a;
        return c;
      })(c, a);
    }
    c.__esModule = true;
    c.default = undefined;
    a("../../../../../platform/js");
    a("./bmfont");
    var d = a("../../../../utils/label/letter-font");
    var e = cc.color(255, 255, 255, 255);
    var g = function (f) {
      var a;
      var b;
      function g() {
        return f.apply(this, arguments) || this;
      }
      b = f;
      (a = g).prototype = Object.create(b.prototype);
      a.prototype.constructor = a;
      i(a, b);
      var h = g.prototype;
      h.createData = function (b) {
        return b.requestRenderData();
      };
      h._getColor = function (b) {
        e._fastSetA(b.node._color.a);
        return e._val;
      };
      h.updateColor = function (b) {
        var a = this._getColor(b);
        f.prototype.updateColor.call(this, b, a);
      };
      return g;
    }(d);
    c.default = g;
    b.exports = c.default;
  }, {
    "../../../../../platform/js": 183,
    "../../../../utils/label/letter-font": 199,
    "./bmfont": 206
  }],
  208: [function (g, a, b) {
    "use strict";

    b.__esModule = true;
    b.default = undefined;
    var c;
    var h = (c = g("../../../../../assets/material/material-variant")) && c.__esModule ? c : {
      default: c
    };
    g("../../../../../components/CCLabel");
    g("../../../../../components/CCLabelShadow");
    g("../../../../../components/CCLabelOutline");
    g("../../../../../assets/material/CCMaterial");
    var f = function () {
      function c() {}
      var a = c.prototype;
      a.init = function (b) {
        this.labelMaterial = null;
        this._label = this._renderComp = b;
        renderer.CustomAssembler.prototype.ctor.call(this);
        b.node._proxy.setAssembler(this);
        this._layout = new jsb.LabelRenderer();
        this._layout.init(b);
        this._cfg = new DataView(this._layout._cfg);
        this._layoutInfo = new DataView(this._layout._layout);
        this._cfgFields = typeof jsb.LabelRenderer._cfgFields == "string" ? JSON.parse(jsb.LabelRenderer._cfgFields) : jsb.LabelRenderer._cfgFields;
        this._layoutFields = typeof jsb.LabelRenderer._layoutFields == "string" ? JSON.parse(jsb.LabelRenderer._layoutFields) : jsb.LabelRenderer._layoutFields;
        this._layout.bindNodeProxy(b.node._proxy);
        this._bindMaterial(b);
      };
      a._setBufferFlag = function (a, b, c, d, e) {
        if (d == "int8" && c == 1) {
          var f = a.getInt8(b);
          a.setInt8(b, e | f);
        } else if (d == "int32" && c == 4) {
          var g = a.getInt32(b, jsb.__isLittleEndian__);
          a.setInt32(b, e | g, jsb.__isLittleEndian__);
        }
      };
      a._updateCfgFlag = function (c) {
        var a = this._cfgFields.updateFlags;
        this._setBufferFlag(this._cfg, a.offset, a.size, a.type, c);
      };
      a._setBufferValue = function (f, a, b, c, d) {
        if (c == "float" && b == 4) {
          f.setFloat32(a, d, jsb.__isLittleEndian__);
        } else if (c == "int32" && b == 4) {
          f.setInt32(a, d, jsb.__isLittleEndian__);
        } else if (c == "bool" && b == 1) {
          f.setInt8(a, d ? 1 : 0, jsb.__isLittleEndian__);
        } else if (c == "Color4B" && b == 4) {
          f.setUint8(a, d.r);
          f.setUint8(a + 1, d.g);
          f.setUint8(a + 2, d.b);
          f.setUint8(a + 3, d.a);
        } else if (c == "int8" && b == 1) {
          f.setUint8(a, d);
        }
      };
      a._setFieldValue = function (f, a, b, c) {
        var d = a[b];
        this._setBufferValue(f, d.offset, d.size, d.type, c);
      };
      a._getBufferValue = function (e, a, b, c) {
        if (c == "float" && b == 4) {
          return e.getFloat32(a, jsb.__isLittleEndian__);
        } else if (c == "int32" && b == 4) {
          return e.getInt32(a, jsb.__isLittleEndian__);
        } else if (c == "bool" && b == 1) {
          return e.getInt8(a, jsb.__isLittleEndian__) != 0;
        } else if (c == "Color4B" && b == 4) {
          return {
            r: e.getUint8(a),
            g: e.getUint8(a + 1),
            b: e.getUint8(a + 2),
            a: e.getUint8(a + 3)
          };
        } else if (c == "int8" && b == 1) {
          return e.getUint8(a);
        } else {
          return undefined;
        }
      };
      a._getFieldValue = function (e, a, b) {
        var c = a[b];
        return this._getBufferValue(e, c.offset, c.size, c.type);
      };
      a._getLayoutValue = function (b) {
        return this._getFieldValue(this._layoutInfo, this._layoutFields, b);
      };
      a._setLayoutValue = function (c, a) {
        return this._setFieldValue(this._layoutInfo, this._layoutFields, c, a);
      };
      a._updateCfgFlag_Content = function () {
        this._updateCfgFlag(1);
      };
      a._updateCfgFlag_Font = function () {
        this._updateCfgFlag(2);
      };
      a._colorEqual = function (c, a) {
        return c.r == a.r && c.g == a.g && c.b == a.b && c.a == a.a;
      };
      a._colorToObj = function (e, a, b, c) {
        return {
          r: e,
          g: a,
          b: b,
          a: c
        };
      };
      a.setString = function (b) {
        if (b != this._layout.string) {
          this._layout.string = b;
          this._updateCfgFlag_Content();
        }
      };
      a.setFontPath = function (b) {
        if (b != this._layout.fontPath) {
          this._layout.fontPath = b;
          this._updateCfgFlag_Font();
        }
      };
      a.setFontSize = function (c, a) {
        if (this._getFieldValue(this._cfg, this._cfgFields, "fontSize") != c) {
          this._setFieldValue(this._cfg, this._cfgFields, "fontSize", c);
          this._setFieldValue(this._cfg, this._cfgFields, "fontSizeRetina", a);
          this._updateCfgFlag_Font();
        }
      };
      a.setOutline = function (c) {
        var a = this._getLayoutValue("outlineSize");
        if (a > 0 != c > 0) {
          this._updateCfgFlag_Font();
        }
        if (a != c) {
          this._updateCfgFlag_Content();
          this._setLayoutValue("outlineSize", c);
        }
      };
      a.setOutlineColor = function (c) {
        var a = this._getLayoutValue("outlineColor");
        if (!this._colorEqual(a, c)) {
          this._setLayoutValue("outlineColor", c);
          this._updateCfgFlag_Content();
        }
      };
      a.setLineHeight = function (b) {
        if (this._getLayoutValue("lineHeight") != b) {
          this._setLayoutValue("lineHeight", b);
          this._updateCfgFlag_Content();
        }
      };
      a.setOverFlow = function (b) {
        if (this._getLayoutValue("overflow") != b) {
          this._setLayoutValue("overflow", b);
          this._updateCfgFlag_Content();
        }
      };
      a.setEnableWrap = function (b) {
        if (this._getLayoutValue("wrap") != b) {
          this._setLayoutValue("wrap", b);
          this._updateCfgFlag_Content();
        }
      };
      a.setVerticalAlign = function (b) {
        if (this._getLayoutValue("valign") != b) {
          this._setLayoutValue("valign", b);
          this._updateCfgFlag_Content();
        }
      };
      a.setHorizontalAlign = function (b) {
        if (this._getLayoutValue("halign") != b) {
          this._setLayoutValue("halign", b);
          this._updateCfgFlag_Content();
        }
      };
      a.setContentSize = function (e, a) {
        var b = this._getLayoutValue("width");
        var c = this._getLayoutValue("height");
        if (!(b == e && c == a)) {
          this._setLayoutValue("height", a);
          this._setLayoutValue("width", e);
          this._updateCfgFlag_Content();
        }
      };
      a.setAnchorPoint = function (e, a) {
        var b = this._getLayoutValue("anchorX");
        var c = this._getLayoutValue("anchorY");
        if (!(b == e && c == a)) {
          this._setLayoutValue("anchorX", e);
          this._setLayoutValue("anchorY", a);
          this._updateCfgFlag_Content();
        }
      };
      a.setColor = function (c) {
        var a = this._getLayoutValue("color");
        if (!this._colorEqual(a, c)) {
          this._setLayoutValue("color", c);
          this._updateCfgFlag_Content();
        }
      };
      a.setShadow = function (a, b, c) {
        var d = this._getLayoutValue("shadowBlur");
        var e = this._getLayoutValue("shadowX");
        var f = this._getLayoutValue("shadowY");
        if (d > 0 != c > 0) {
          this._updateCfgFlag_Font();
        }
        var g = false;
        if (d != c) {
          this._setLayoutValue("shadowBlur", c);
          g = true;
        }
        if (e != a) {
          this._setLayoutValue("shadowX", a);
          g = true;
        }
        if (f != b) {
          this._setLayoutValue("shadowY", b);
          g = true;
        }
        if (g) {
          this._updateCfgFlag_Content();
        }
      };
      a.setShadowColor = function (c) {
        var a = this._getLayoutValue("shadowColor");
        if (!this._colorEqual(a, c)) {
          this._setLayoutValue("shadowColor", c);
          this._updateCfgFlag_Content();
        }
      };
      a.setItalic = function (b) {
        if (this._getLayoutValue("italic") != b) {
          this._setLayoutValue("italic", b);
          this._updateCfgFlag_Content();
        }
      };
      a.setBold = function (b) {
        if (this._getLayoutValue("bold") != b) {
          this._setLayoutValue("bold", b);
          this._updateCfgFlag_Content();
          this._updateCfgFlag_Font();
        }
      };
      a.setUnderline = function (b) {
        if (this._getLayoutValue("underline") != b) {
          this._setLayoutValue("underline", b);
          this._updateCfgFlag_Content();
        }
      };
      a.setSpacingX = function (b) {
        if (!(this._getLayoutValue("spaceX") == b || typeof b != "number" || isNaN(b))) {
          this._setLayoutValue("spaceX", b);
          this._updateCfgFlag_Content();
        }
      };
      a.updateRenderData = function (a) {
        if (a._vertsDirty) {
          if (a.font && a.font.nativeUrl) {
            this.setFontPath(cc.assetManager.cacheManager.getCache(a.font.nativeUrl) || a.font.nativeUrl);
          }
          var b = this._layout;
          var c = a.node.color;
          var d = a.node;
          var e = a.fontSize;
          this.setString(a.string);
          this.setFontSize(a.fontSize, e / 72 * a.fontSize);
          this.setLineHeight(a.lineHeight);
          this.setEnableWrap(a.enableWrapText);
          this.setItalic(a.enableItalic);
          this.setUnderline(a.enableUnderline);
          this.setBold(a.enableBold);
          this.setOverFlow(a.overflow);
          this.setVerticalAlign(a.verticalAlign);
          this.setHorizontalAlign(a.horizontalAlign);
          this.setSpacingX(a.spacingX);
          this.setContentSize(d.getContentSize().width, d.getContentSize().height);
          this.setAnchorPoint(d.anchorX, d.anchorY);
          this.setColor(this._colorToObj(c.getR(), c.getG(), c.getB(), Math.ceil(c.getA() * d.opacity / 255)));
          var f = d.getComponent(cc.LabelShadow);
          if (f && f.enabled) {
            var g = f.color;
            this.setShadow(f.offset.x, f.offset.y, f.blur);
            this.setShadowColor(this._colorToObj(g.getR(), g.getG(), g.getB(), Math.ceil(g.getA() * d.opacity / 255)));
          } else {
            this.setShadow(0, 0, -1);
          }
          this._updateTTFMaterial(a);
          b.render();
        }
      };
      a._bindMaterial = function (c) {
        var a = this.labelMaterial;
        if (!a) {
          a = h.default.createWithBuiltin("2d-label", c);
          this.labelMaterial = a;
        }
        return a;
      };
      a._updateTTFMaterial = function (a) {
        var b = this._bindMaterial(a);
        var c = this._label.node;
        var d = this._layout;
        var e = c.getComponent(cc.LabelOutline);
        var f = 0;
        if (e && e.enabled && e.width > 0) {
          f = Math.max(Math.min(e.width / 10, 0.4), 0.1);
          var i = e.color;
          this.setOutlineColor(this._colorToObj(i.getR(), i.getG(), i.getB(), Math.ceil(i.getA() * c.opacity / 255)));
        }
        this.setOutline(f);
        b.define("CC_USE_MODEL", true);
        b.define("USE_TEXTURE_ALPHAONLY", true);
        b.define("USE_SDF", f > 0 || a.enableBold);
        b.define("USE_SDF_EXTEND", a.enableBold ? 1 : 0);
        if (b.getDefine("CC_SUPPORT_standard_derivatives") !== undefined && cc.sys.glExtension("OES_standard_derivatives")) {
          b.define("CC_SUPPORT_standard_derivatives", true);
        }
        d.setEffect(b.effect._nativeObj);
      };
      a.fillBuffers = function () {
        this._layout.render();
      };
      a.getVfmt = function () {};
      return c;
    }();
    b.default = f;
    a.exports = b.default;
  }, {
    "../../../../../assets/material/CCMaterial": 76,
    "../../../../../assets/material/material-variant": 83,
    "../../../../../components/CCLabel": 102,
    "../../../../../components/CCLabelOutline": 103,
    "../../../../../components/CCLabelShadow": 104
  }],
  209: [function (c, b, d) {
    "use strict";

    d.__esModule = true;
    d.default = undefined;
    var e;
    var k = (e = c("../../../../utils/label/ttf")) && e.__esModule ? e : {
      default: e
    };
    function l(c, a) {
      return (l = Object.setPrototypeOf || function (c, a) {
        c.__proto__ = a;
        return c;
      })(c, a);
    }
    var m = c("../../../../../components/CCLabelShadow");
    var g = cc.color(255, 255, 255, 255);
    var a = function (a) {
      var b;
      var e;
      function h() {
        return a.apply(this, arguments) || this;
      }
      e = a;
      (b = h).prototype = Object.create(e.prototype);
      b.prototype.constructor = b;
      l(b, e);
      var f = h.prototype;
      f.updateUVs = function (a) {
        for (var b = this._renderData.vDatas[0], c = a._frame.uv, d = this.uvOffset, e = this.floatsPerVert, f = 0; f < 4; f++) {
          var j = f * 2;
          var k = e * f + d;
          b[k] = c[j];
          b[k + 1] = c[j + 1];
        }
      };
      f.updateColor = function (b) {
        g._fastSetA(b.node._color.a);
        var c = g._val;
        a.prototype.updateColor.call(this, b, c);
      };
      f.updateVerts = function (j) {
        var a = j.node;
        var b = j._ttfTexture.width;
        var d = j._ttfTexture.height;
        var e = a.anchorX * a.width;
        var n = a.anchorY * a.height;
        var o = m && j.getComponent(m);
        if (o && o._enabled) {
          var i = (b - a.width) / 2;
          var k = (d - a.height) / 2;
          var c = o.offset;
          if (-c.x > i) {
            e += b - a.width;
          } else if (i > c.x) {
            e += i - c.x;
          }
          if (-c.y > k) {
            n += d - a.height;
          } else if (k > c.y) {
            n += k - c.y;
          }
        }
        var l = this._local;
        l[0] = -e;
        l[1] = -n;
        l[2] = b - e;
        l[3] = d - n;
        this.updateUVs(j);
        this.updateWorldVerts(j);
      };
      return h;
    }(k.default);
    d.default = a;
    b.exports = d.default;
  }, {
    "../../../../../components/CCLabelShadow": 104,
    "../../../../utils/label/ttf": 200
  }],
  210: [function (e) {
    "use strict";

    var b = j(e("../../../assembler"));
    var l = j(e("../../../../components/CCLabel"));
    var f = j(e("./2d/ttf"));
    var d = j(e("./2d/bmfont"));
    var g = j(e("./2d/letter"));
    var h = j(e("./3d/ttf"));
    var i = j(e("./3d/bmfont"));
    var a = j(e("./3d/letter"));
    function j(b) {
      if (b && b.__esModule) {
        return b;
      } else {
        return {
          default: b
        };
      }
    }
    l.default._canvasPool = {
      pool: [],
      get: function () {
        var d = this.pool.pop();
        if (!d) {
          var e = document.createElement("canvas");
          var b = e.getContext("2d");
          d = {
            canvas: e,
            context: b
          };
          b.textBaseline = "alphabetic";
        }
        return d;
      },
      put: function (b) {
        if (!(this.pool.length >= 32)) {
          this.pool.push(b);
        }
      }
    };
    b.default.register(cc.Label, {
      getConstructor: function (e) {
        var b = e.node.is3DNode;
        var c = b ? h.default : f.default;
        if (e.font instanceof cc.BitmapFont) {
          c = b ? i.default : d.default;
        } else if (e.cacheMode === l.default.CacheMode.CHAR) {
          if (!(cc.sys.platform === cc.sys.WECHAT_GAME_SUB)) {
            c = b ? a.default : g.default;
          }
        }
        return c;
      },
      TTF: f.default,
      Bmfont: d.default,
      Letter: g.default,
      TTF3D: h.default,
      Bmfont3D: i.default,
      Letter3D: a.default,
      NativeTTF: undefined
    });
  }, {
    "../../../../components/CCLabel": 102,
    "../../../assembler": 190,
    "./2d/bmfont": 206,
    "./2d/letter": 207,
    "./2d/nativeTTF": 208,
    "./2d/ttf": 209,
    "./3d/bmfont": undefined,
    "./3d/letter": undefined,
    "./3d/ttf": undefined
  }],
  211: [function (n, b, j) {
    "use strict";

    j.__esModule = true;
    j.MaskAssembler = undefined;
    var e;
    var s = (e = n("../../assembler")) && e.__esModule ? e : {
      default: e
    };
    function v(c, a) {
      return (v = Object.setPrototypeOf || function (c, a) {
        c.__proto__ = a;
        return c;
      })(c, a);
    }
    var k = n("../../../components/CCMask");
    var w = n("../../render-flow");
    var y = n("./sprite/2d/simple");
    var o = n("./graphics");
    var A = n("../../../../renderer/gfx");
    var x = n("../vertex-format").vfmtPos;
    var B = [];
    function l() {
      return 1 << B.length - 1;
    }
    function a() {
      for (var c = 0, d = 0; d < B.length; ++d) {
        c += 1 << d;
      }
      return c;
    }
    function u(c, b, d, e, f, g) {
      var h = c.effect;
      var i = A.STENCIL_OP_KEEP;
      var a = A.STENCIL_OP_KEEP;
      h.setStencil(A.STENCIL_ENABLE, b, e, f, d, i, a, g);
    }
    function d(b) {
      B.length;
      B.push(b);
    }
    function f(c, a) {
      B.length;
      B.pop();
      if (B.length === 0) {
        a._flushMaterial(c._exitMaterial);
      } else {
        m(a);
      }
    }
    function h(f, b) {
      var d = A.DS_FUNC_NEVER;
      var e = l();
      var g = e;
      var h = e;
      var i = f.inverted ? A.STENCIL_OP_REPLACE : A.STENCIL_OP_ZERO;
      u(f._clearMaterial, d, i, e, g, h);
      var j = b.getBuffer("mesh", x);
      var a = j.request(4, 6);
      var k = a.indiceOffset;
      var m = a.byteOffset >> 2;
      var n = a.vertexOffset;
      var p = j._vData;
      var q = j._iData;
      p[m++] = -1;
      p[m++] = -1;
      p[m++] = -1;
      p[m++] = 1;
      p[m++] = 1;
      p[m++] = 1;
      p[m++] = 1;
      p[m++] = -1;
      q[k++] = n;
      q[k++] = n + 3;
      q[k++] = n + 1;
      q[k++] = n + 1;
      q[k++] = n + 3;
      q[k++] = n + 2;
      b.node = b._dummyNode;
      b.material = f._clearMaterial;
      b._flush();
    }
    function g(c, a) {
      var b = A.DS_FUNC_NEVER;
      var d = l();
      var e = d;
      var f = d;
      var g = c.inverted ? A.STENCIL_OP_ZERO : A.STENCIL_OP_REPLACE;
      u(c._materials[0], b, g, d, e, f);
      a.material = c._materials[0];
      if (c._type === k.Type.IMAGE_STENCIL) {
        a.node = a._dummyNode;
        y.prototype.fillBuffers.call(c._assembler, c, a);
        a._flush();
      } else {
        a.node = c.node;
        o.prototype.fillBuffers.call(c._graphics._assembler, c._graphics, a);
      }
    }
    function m(d) {
      var b = A.DS_FUNC_EQUAL;
      var c = A.STENCIL_OP_KEEP;
      var e = a();
      var f = e;
      var g = l();
      var h = B[B.length - 1];
      u(h._enableMaterial, b, c, e, f, g);
      d._flushMaterial(h._enableMaterial);
    }
    var c = function (a) {
      var b;
      var c;
      function e() {
        return a.apply(this, arguments) || this;
      }
      c = a;
      (b = e).prototype = Object.create(c.prototype);
      b.prototype.constructor = b;
      v(b, c);
      var i = e.prototype;
      i.updateRenderData = function (b) {
        if (b._type === k.Type.IMAGE_STENCIL) {
          if (b.spriteFrame) {
            y.prototype.updateRenderData.call(this, b);
          } else {
            b.setMaterial(0, null);
          }
        } else {
          b._graphics.setMaterial(0, b._materials[0]);
          o.prototype.updateRenderData.call(b._graphics._assembler, b._graphics, b._graphics);
        }
      };
      i.fillBuffers = function (a, b) {
        if (a._type !== k.Type.IMAGE_STENCIL || a.spriteFrame) {
          d(a);
          h(a, b);
          g(a, b);
          m(b);
        }
        a.node._renderFlag |= w.FLAG_UPDATE_RENDER_DATA;
      };
      i.postFillBuffers = function (a, b) {
        if (a._type !== k.Type.IMAGE_STENCIL || a.spriteFrame) {
          f(a, b);
        }
        a.node._renderFlag |= w.FLAG_UPDATE_RENDER_DATA;
      };
      return e;
    }(y);
    j.MaskAssembler = c;
    s.default.register(k, c);
  }, {
    "../../../../renderer/gfx": 282,
    "../../../components/CCMask": 106,
    "../../assembler": 190,
    "../../render-flow": 194,
    "../vertex-format": 225,
    "./graphics": 204,
    "./sprite/2d/simple": 215
  }],
  212: [function (h, b, c) {
    "use strict";

    c.__esModule = true;
    c.default = undefined;
    var d;
    var i = (d = h("../../../../assembler-2d")) && d.__esModule ? d : {
      default: d
    };
    function k(c, a) {
      return (k = Object.setPrototypeOf || function (c, a) {
        c.__proto__ = a;
        return c;
      })(c, a);
    }
    var f = h("../../../../../components/CCSprite").FillType;
    var j = function (e) {
      var a;
      var g;
      function h() {
        return e.apply(this, arguments) || this;
      }
      g = e;
      (a = h).prototype = Object.create(g.prototype);
      a.prototype.constructor = a;
      k(a, g);
      var d = h.prototype;
      d.updateRenderData = function (f) {
        var a = f._spriteFrame;
        this.packToDynamicAtlas(f, a);
        if (f._vertsDirty) {
          var b = f._fillStart;
          var g = f._fillRange;
          if (g < 0) {
            b += g;
            g = -g;
          }
          g = (g = (g = b + g) > 1 ? 1 : g) < 0 ? 0 : g;
          var h = (b = (b = b > 1 ? 1 : b) < 0 ? 0 : b) + (g = (g -= b) < 0 ? 0 : g);
          h = h > 1 ? 1 : h;
          this.updateUVs(f, b, h);
          this.updateVerts(f, b, h);
          f._vertsDirty = false;
        }
      };
      d.updateUVs = function (c, a, b) {
        var d;
        var e;
        var h;
        var j;
        var l;
        var n;
        var o;
        var r;
        var s;
        var u;
        var F = c._spriteFrame;
        var D = F._texture.width;
        var E = F._texture.height;
        var p = F._rect;
        if (F._rotated) {
          d = p.x / D;
          e = (p.y + p.width) / E;
          h = l = d;
          o = s = (p.x + p.height) / D;
          n = u = e;
          j = r = p.y / E;
        } else {
          d = p.x / D;
          e = (p.y + p.height) / E;
          h = o = d;
          l = s = (p.x + p.width) / D;
          j = n = e;
          r = u = p.y / E;
        }
        var v = this._renderData.vDatas[0];
        var g = this.uvOffset;
        var m = this.floatsPerVert;
        switch (c._fillType) {
          case f.HORIZONTAL:
            v[g] = h + (l - h) * a;
            v[g + 1] = j + (n - j) * a;
            v[g + m] = h + (l - h) * b;
            v[g + m + 1] = j + (n - j) * b;
            v[g + m * 2] = o + (s - o) * a;
            v[g + m * 2 + 1] = r + (u - r) * a;
            v[g + m * 3] = o + (s - o) * b;
            v[g + m * 3 + 1] = r + (u - r) * b;
            break;
          case f.VERTICAL:
            v[g] = h + (o - h) * a;
            v[g + 1] = j + (r - j) * a;
            v[g + m] = l + (s - l) * a;
            v[g + m + 1] = n + (u - n) * a;
            v[g + m * 2] = h + (o - h) * b;
            v[g + m * 2 + 1] = j + (r - j) * b;
            v[g + m * 3] = l + (s - l) * b;
            v[g + m * 3 + 1] = n + (u - n) * b;
        }
      };
      d.updateVerts = function (d, a, b) {
        var e;
        var h = d.node;
        var i = h.width;
        var j = h.height;
        var k = h.anchorX * i;
        var m = h.anchorY * j;
        var c = -k;
        var n = -m;
        var o = i - k;
        var t = j - m;
        switch (d._fillType) {
          case f.HORIZONTAL:
            e = c + (o - c) * b;
            c += (o - c) * a;
            o = e;
            break;
          case f.VERTICAL:
            e = n + (t - n) * b;
            n += (t - n) * a;
            t = e;
        }
        var u = this._local;
        u[0] = c;
        u[1] = n;
        u[2] = o;
        u[3] = t;
        this.updateWorldVerts(d);
      };
      return h;
    }(i.default);
    c.default = j;
    b.exports = c.default;
  }, {
    "../../../../../components/CCSprite": 115,
    "../../../../assembler-2d": 188
  }],
  213: [function (g, a, b) {
    "use strict";

    var c;
    function h(c, a) {
      return (h = Object.setPrototypeOf || function (c, a) {
        c.__proto__ = a;
        return c;
      })(c, a);
    }
    b.__esModule = true;
    b.default = undefined;
    var i = function (e) {
      var a;
      var f;
      function i() {
        return e.apply(this, arguments) || this;
      }
      f = e;
      (a = i).prototype = Object.create(f.prototype);
      a.prototype.constructor = a;
      h(a, f);
      var d = i.prototype;
      d.initData = function () {
        this._renderData.createFlexData(0, 4, 6, this.getVfmt());
      };
      d.updateRenderData = function (e) {
        this.packToDynamicAtlas(e, e._spriteFrame);
        var a = e.spriteFrame;
        if (a) {
          var b = a.vertices;
          if (b) {
            this.verticesCount = b.x.length;
            this.indicesCount = b.triangles.length;
            var c = this._renderData._flexBuffer;
            if (c.reserve(this.verticesCount, this.indicesCount)) {
              this.updateColor(e);
              e._vertsDirty = true;
            }
            c.used(this.verticesCount, this.indicesCount);
            this.updateIndices(b.triangles);
            if (e._vertsDirty) {
              this.updateUVs(e);
              this.updateVerts(e);
              this.updateWorldVerts(e);
              e._vertsDirty = false;
            }
          }
        }
      };
      d.updateIndices = function (b) {
        this._renderData.iDatas[0].set(b);
      };
      d.updateUVs = function (c) {
        for (var b = c.spriteFrame.vertices, d = b.nu, e = b.nv, f = this.uvOffset, g = this.floatsPerVert, h = this._renderData.vDatas[0], i = 0; i < d.length; i++) {
          var k = g * i + f;
          h[k] = d[i];
          h[k + 1] = e[i];
        }
      };
      d.updateVerts = function (b) {
        var j = b.node;
        var k = Math.abs(j.width);
        var e = Math.abs(j.height);
        var i = j.anchorX * k;
        var n = j.anchorY * e;
        var q = b.spriteFrame;
        var r = q.vertices;
        var a = r.x;
        var o = r.y;
        var c = q._originalSize.width;
        var l = q._originalSize.height;
        var h = q._rect.width;
        var s = q._rect.height;
        var f = q._offset.x + (c - h) / 2;
        var d = q._offset.y + (l - s) / 2;
        var t = k / (b.trim ? h : c);
        var p = e / (b.trim ? s : l);
        var u = this._local;
        if (b.trim) {
          for (var g = 0, y = a.length; g < y; g++) {
            var v = g * 2;
            u[v] = (a[g] - f) * t - i;
            u[v + 1] = (l - o[g] - d) * p - n;
          }
        } else {
          for (var A = 0, C = a.length; A < C; A++) {
            var B = A * 2;
            u[B] = a[A] * t - i;
            u[B + 1] = (l - o[A]) * p - n;
          }
        }
        if (q._flipX) {
          for (var E = 0, I = this.verticesCount; E < I; E++) {
            u[E * 2] = k - u[E * 2] - i * 2;
          }
        }
        if (q._flipY) {
          for (var F = 0, J = this.verticesCount; F < J; F++) {
            u[F * 2 + 1] = e - u[F * 2 + 1] - n * 2;
          }
        }
      };
      d.updateWorldVerts = function (d) {
        for (var b = d.node._worldMatrix.m, g = b[0], e = b[1], i = b[4], j = b[5], k = b[12], m = b[13], a = this._local, n = this._renderData.vDatas[0], c = this.floatsPerVert, l = 0, q = this.verticesCount; l < q; l++) {
          var o = a[l * 2];
          var r = a[l * 2 + 1];
          n[c * l] = o * g + r * i + k;
          n[c * l + 1] = o * e + r * j + m;
        }
      };
      return i;
    }(((c = g("../../../../assembler-2d")) && c.__esModule ? c : {
      default: c
    }).default);
    b.default = i;
    a.exports = b.default;
  }, {
    "../../../../assembler-2d": 188
  }],
  214: [function (g, b, j) {
    "use strict";

    j.__esModule = true;
    j.default = undefined;
    var e;
    var n = (e = g("../../../../assembler-2d")) && e.__esModule ? e : {
      default: e
    };
    function p(c, a) {
      return (p = Object.setPrototypeOf || function (c, a) {
        c.__proto__ = a;
        return c;
      })(c, a);
    }
    var s = Math.PI * 2;
    var q = [cc.v2(0, 0), cc.v2(0, 0), cc.v2(0, 0), cc.v2(0, 0)];
    var r = [0, 0, 0, 0];
    var v = [0, 0, 0, 0, 0, 0, 0, 0];
    var x = [cc.v2(0, 0), cc.v2(0, 0), cc.v2(0, 0), cc.v2(0, 0)];
    var a = [cc.v2(0, 0), cc.v2(0, 0), cc.v2(0, 0), cc.v2(0, 0)];
    var E = cc.v2(0, 0);
    var w = [];
    function c(c, b, g, e, i, j, k) {
      var m;
      var o;
      var r = Math.sin(j);
      var p = Math.cos(j);
      if (Math.cos(j) !== 0) {
        m = r / p;
        if ((c - i.x) * p > 0) {
          var l = i.y + m * (c - i.x);
          k[0].x = c;
          k[0].y = l;
        }
        if ((b - i.x) * p > 0) {
          var h = i.y + m * (b - i.x);
          k[2].x = b;
          k[2].y = h;
        }
      }
      if (Math.sin(j) !== 0) {
        o = p / r;
        if ((e - i.y) * r > 0) {
          var q = i.x + o * (e - i.y);
          k[3].x = q;
          k[3].y = e;
        }
        if ((g - i.y) * r > 0) {
          var f = i.x + o * (g - i.y);
          k[1].x = f;
          k[1].y = g;
        }
      }
    }
    function h(f) {
      var b = f.node;
      var c = b.width;
      var d = b.height;
      var e = b.anchorX * c;
      var g = b.anchorY * d;
      var i = -e;
      var j = -g;
      var a = c - e;
      var k = d - g;
      var h = r;
      h[0] = i;
      h[1] = j;
      h[2] = a;
      h[3] = k;
      var l = f._fillCenter;
      var m = E.x = Math.min(Math.max(0, l.x), 1) * (a - i) + i;
      var n = E.y = Math.min(Math.max(0, l.y), 1) * (k - j) + j;
      q[0].x = q[3].x = i;
      q[1].x = q[2].x = a;
      q[0].y = q[1].y = j;
      q[2].y = q[3].y = k;
      w.length = 0;
      if (m !== h[0]) {
        w[0] = [3, 0];
      }
      if (m !== h[2]) {
        w[2] = [1, 2];
      }
      if (n !== h[1]) {
        w[1] = [0, 1];
      }
      if (n !== h[3]) {
        w[3] = [2, 3];
      }
    }
    function f(f, a) {
      var b;
      var g;
      b = a.x - f.x;
      g = a.y - f.y;
      if (b !== 0 || g !== 0) {
        if (b === 0) {
          if (g > 0) {
            return Math.PI * 0.5;
          } else {
            return Math.PI * 1.5;
          }
        }
        var h = Math.atan(g / b);
        if (b < 0) {
          h += Math.PI;
        }
        return h;
      }
    }
    var d = function (d) {
      var b;
      var e;
      function i() {
        return d.apply(this, arguments) || this;
      }
      e = d;
      (b = i).prototype = Object.create(e.prototype);
      b.prototype.constructor = b;
      p(b, e);
      var k = i.prototype;
      k.initData = function () {
        this._renderData.createFlexData(0, 4, 6, this.getVfmt());
        this.updateIndices();
      };
      k.updateRenderData = function (b) {
        d.prototype.updateRenderData.call(this, b);
        var f;
        var g;
        var i;
        var l;
        var m;
        var n;
        var o;
        var q;
        var t;
        var z = b.spriteFrame;
        this.packToDynamicAtlas(b, z);
        if (b._vertsDirty) {
          var D = b._fillStart;
          var G = b._fillRange;
          for (G < 0 && (D += G, G = -G); D >= 1;) {
            D -= 1;
          }
          for (; D < 0;) {
            D += 1;
          }
          D *= s;
          G *= s;
          h(b);
          n = (f = z)._texture.width;
          o = f._texture.height;
          q = f._rect;
          t = v;
          if (f._rotated) {
            g = q.x / n;
            i = (q.x + q.height) / n;
            l = q.y / o;
            m = (q.y + q.width) / o;
            t[0] = t[2] = g;
            t[4] = t[6] = i;
            t[3] = t[7] = m;
            t[1] = t[5] = l;
          } else {
            g = q.x / n;
            i = (q.x + q.width) / n;
            l = q.y / o;
            m = (q.y + q.height) / o;
            t[0] = t[4] = g;
            t[2] = t[6] = i;
            t[1] = t[3] = m;
            t[5] = t[7] = l;
          }
          c(r[0], r[2], r[1], r[3], E, D, x);
          c(r[0], r[2], r[1], r[3], E, D + G, a);
          this.updateVerts(b, D, G);
          b._vertsDirty = false;
        }
      };
      k.updateVerts = function (d, b, g) {
        var e = b + g;
        var h = this._local;
        h.length = 0;
        for (var i = 0, j = this.floatsPerVert * 3, k = 0; k < 4; ++k) {
          var l = w[k];
          if (l) {
            if (g >= s) {
              h.length = i + j;
              this._generateTriangle(h, i, E, q[l[0]], q[l[1]]);
              i += j;
            } else {
              var m = f(E, q[l[0]]);
              var o = f(E, q[l[1]]);
              if (o < m) {
                o += s;
              }
              m -= s;
              o -= s;
              for (var p = 0; p < 3; ++p) {
                if (!(m >= e)) {
                  if (m >= b) {
                    h.length = i + j;
                    if (o >= e) {
                      this._generateTriangle(h, i, E, q[l[0]], a[k]);
                    } else {
                      this._generateTriangle(h, i, E, q[l[0]], q[l[1]]);
                    }
                    i += j;
                  } else if (!(o <= b)) {
                    if (o <= e) {
                      h.length = i + j;
                      this._generateTriangle(h, i, E, x[k], q[l[1]]);
                      i += j;
                    } else {
                      h.length = i + j;
                      this._generateTriangle(h, i, E, x[k], a[k]);
                      i += j;
                    }
                  }
                }
                m += s;
                o += s;
              }
            }
          }
        }
        this.allocWorldVerts(d);
        this.updateWorldVerts(d);
      };
      k.allocWorldVerts = function (h) {
        var b = h.node._color._val;
        var d = this._renderData;
        var e = this.floatsPerVert;
        var f = this._local;
        var g = f.length / e;
        this.verticesCount = this.indicesCount = g;
        var i = d._flexBuffer;
        if (i.reserve(g, g)) {
          this.updateIndices();
        }
        i.used(this.verticesCount, this.indicesCount);
        for (var j = d.vDatas[0], a = d.uintVDatas[0], k = this.uvOffset, c = 0; c < f.length; c += e) {
          var n = c + k;
          j[n] = f[n];
          j[n + 1] = f[n + 1];
          a[n + 2] = b;
        }
      };
      k.updateIndices = function () {
        for (var c = this._renderData.iDatas[0], a = 0; a < c.length; a++) {
          c[a] = a;
        }
      };
      k.updateWorldVerts = function (d) {
        for (var b = d.node._worldMatrix.m, f = b[0], e = b[1], g = b[4], i = b[5], j = b[12], k = b[13], a = this._local, m = this._renderData.vDatas[0], c = this.floatsPerVert, l = 0; l < a.length; l += c) {
          var n = a[l];
          var q = a[l + 1];
          m[l] = n * f + q * g + j;
          m[l + 1] = n * e + q * i + k;
        }
      };
      k._generateTriangle = function (d, b, c, e, f) {
        var g = r;
        var i = g[0];
        var j = g[1];
        var a = g[2];
        var k = g[3];
        var l = this.floatsPerVert;
        d[b] = c.x;
        d[b + 1] = c.y;
        d[b + l] = e.x;
        d[b + l + 1] = e.y;
        d[b + l * 2] = f.x;
        d[b + l * 2 + 1] = f.y;
        var h;
        var m;
        var q = this.uvOffset;
        h = (c.x - i) / (a - i);
        m = (c.y - j) / (k - j);
        this._generateUV(h, m, d, b + q);
        h = (e.x - i) / (a - i);
        m = (e.y - j) / (k - j);
        this._generateUV(h, m, d, b + l + q);
        h = (f.x - i) / (a - i);
        m = (f.y - j) / (k - j);
        this._generateUV(h, m, d, b + l * 2 + q);
      };
      k._generateUV = function (c, b, d, e) {
        var f = v[0] + (v[2] - v[0]) * c;
        var g = v[4] + (v[6] - v[4]) * c;
        var h = v[1] + (v[3] - v[1]) * c;
        var i = v[5] + (v[7] - v[5]) * c;
        d[e] = f + (g - f) * b;
        d[e + 1] = h + (i - h) * b;
      };
      return i;
    }(n.default);
    j.default = d;
    b.exports = j.default;
  }, {
    "../../../../assembler-2d": 188
  }],
  215: [function (g, a, b) {
    "use strict";

    var c;
    function h(c, a) {
      return (h = Object.setPrototypeOf || function (c, a) {
        c.__proto__ = a;
        return c;
      })(c, a);
    }
    b.__esModule = true;
    b.default = undefined;
    var i = function (e) {
      var a;
      var f;
      function i() {
        return e.apply(this, arguments) || this;
      }
      f = e;
      (a = i).prototype = Object.create(f.prototype);
      a.prototype.constructor = a;
      h(a, f);
      var d = i.prototype;
      d.updateRenderData = function (b) {
        this.packToDynamicAtlas(b, b._spriteFrame);
        if (b._vertsDirty) {
          this.updateUVs(b);
          this.updateVerts(b);
          b._vertsDirty = false;
        }
      };
      d.updateUVs = function (a) {
        for (var b = a._spriteFrame.uv, c = this.uvOffset, d = this.floatsPerVert, e = this._renderData.vDatas[0], f = 0; f < 4; f++) {
          var j = f * 2;
          var k = d * f + c;
          e[k] = b[j];
          e[k + 1] = b[j + 1];
        }
      };
      d.updateVerts = function (e) {
        var b;
        var i;
        var n;
        var r;
        var z = e.node;
        var w = z.width;
        var s = z.height;
        var a = z.anchorX * w;
        var o = z.anchorY * s;
        if (e.trim) {
          b = -a;
          i = -o;
          n = w - a;
          r = s - o;
        } else {
          var c = e.spriteFrame;
          var l = c._originalSize.width;
          var h = c._originalSize.height;
          var u = c._rect.width;
          var f = c._rect.height;
          var d = c._offset;
          var x = w / l;
          var p = s / h;
          var v = d.x + (l - u) / 2;
          var g = d.x - (l - u) / 2;
          b = v * x - a;
          i = (d.y + (h - f) / 2) * p - o;
          n = w + g * x - a;
          r = s + (d.y - (h - f) / 2) * p - o;
        }
        var m = this._local;
        m[0] = b;
        m[1] = i;
        m[2] = n;
        m[3] = r;
        this.updateWorldVerts(e);
      };
      return i;
    }(((c = g("../../../../assembler-2d")) && c.__esModule ? c : {
      default: c
    }).default);
    b.default = i;
    a.exports = b.default;
  }, {
    "../../../../assembler-2d": 188
  }],
  216: [function (g, a, b) {
    "use strict";

    var c;
    function h(c, a) {
      return (h = Object.setPrototypeOf || function (c, a) {
        c.__proto__ = a;
        return c;
      })(c, a);
    }
    b.__esModule = true;
    b.default = undefined;
    var i = function (e) {
      var a;
      var f;
      function i() {
        return e.apply(this, arguments) || this;
      }
      f = e;
      (a = i).prototype = Object.create(f.prototype);
      a.prototype.constructor = a;
      h(a, f);
      var d = i.prototype;
      d.initData = function () {
        if (!(this._renderData.meshCount > 0)) {
          this._renderData.createData(0, this.verticesFloats, this.indicesCount);
          for (var e = this._renderData.iDatas[0], a = 0, g = 0; g < 3; ++g) {
            for (var h = 0; h < 3; ++h) {
              var i = g * 4 + h;
              e[a++] = i;
              e[a++] = i + 1;
              e[a++] = i + 4;
              e[a++] = i + 1;
              e[a++] = i + 5;
              e[a++] = i + 4;
            }
          }
        }
      };
      d.initLocal = function () {
        this._local = [];
        this._local.length = 8;
      };
      d.updateRenderData = function (c) {
        var a = c._spriteFrame;
        this.packToDynamicAtlas(c, a);
        if (c._vertsDirty) {
          this.updateUVs(c);
          this.updateVerts(c);
          c._vertsDirty = false;
        }
      };
      d.updateVerts = function (d) {
        var b = d.node;
        var f = b.width;
        var e = b.height;
        var g = b.anchorX * f;
        var i = b.anchorY * e;
        var j = d.spriteFrame;
        var k = j.insetLeft;
        var a = j.insetRight;
        var m = j.insetTop;
        var c = j.insetBottom;
        var l = f - k - a;
        var n = e - m - c;
        var p = f / (k + a);
        var t = e / (m + c);
        p = isNaN(p) || p > 1 ? 1 : p;
        t = isNaN(t) || t > 1 ? 1 : t;
        l = l < 0 ? 0 : l;
        n = n < 0 ? 0 : n;
        var u = this._local;
        u[0] = -g;
        u[1] = -i;
        u[2] = k * p - g;
        u[3] = c * t - i;
        u[4] = u[2] + l;
        u[5] = u[3] + n;
        u[6] = f - g;
        u[7] = e - i;
        this.updateWorldVerts(d);
      };
      d.updateUVs = function (a) {
        for (var b = this._renderData.vDatas[0], c = a.spriteFrame.uvSliced, d = this.uvOffset, e = this.floatsPerVert, f = 0; f < 4; ++f) {
          for (var g = 0; g < 4; ++g) {
            var l = f * 4 + g;
            var n = c[l];
            var o = l * e;
            b[o + d] = n.u;
            b[o + d + 1] = n.v;
          }
        }
      };
      d.updateWorldVerts = function (d) {
        for (var b = d.node._worldMatrix.m, f = b[0], e = b[1], g = b[4], i = b[5], j = b[12], k = b[13], a = this._local, m = this._renderData.vDatas[0], c = this.floatsPerVert, l = 0; l < 4; ++l) {
          for (var n = a[l * 2 + 1], p = 0; p < 4; ++p) {
            var t = a[p * 2];
            var u = (l * 4 + p) * c;
            m[u] = t * f + n * g + j;
            m[u + 1] = t * e + n * i + k;
          }
        }
      };
      return i;
    }(((c = g("../../../../assembler-2d")) && c.__esModule ? c : {
      default: c
    }).default);
    b.default = i;
    Object.assign(i.prototype, {
      verticesCount: 16,
      indicesCount: 54
    });
    a.exports = b.default;
  }, {
    "../../../../assembler-2d": 188
  }],
  217: [function (g, a, b) {
    "use strict";

    var c;
    function h(c, a) {
      return (h = Object.setPrototypeOf || function (c, a) {
        c.__proto__ = a;
        return c;
      })(c, a);
    }
    b.__esModule = true;
    b.default = undefined;
    var i = function (e) {
      var a;
      var f;
      function i() {
        return e.apply(this, arguments) || this;
      }
      f = e;
      (a = i).prototype = Object.create(f.prototype);
      a.prototype.constructor = a;
      h(a, f);
      var d = i.prototype;
      d.initData = function () {
        this.verticesCount = 0;
        this.contentWidth = 0;
        this.contentHeight = 0;
        this.rectWidth = 0;
        this.rectHeight = 0;
        this.hRepeat = 0;
        this.vRepeat = 0;
        this.row = 0;
        this.col = 0;
        this._renderData.createFlexData(0, 4, 6, this.getVfmt());
        this._updateIndices();
      };
      d.initLocal = function () {
        this._local = {
          x: [],
          y: []
        };
      };
      d._updateIndices = function () {
        for (var e = this._renderData.iDatas[0], a = 0, f = 0, g = e.length; a < g; a += 6, f += 4) {
          e[a] = f;
          e[a + 1] = f + 1;
          e[a + 2] = f + 2;
          e[a + 3] = f + 1;
          e[a + 4] = f + 3;
          e[a + 5] = f + 2;
        }
      };
      d.updateRenderData = function (p) {
        var b = p._spriteFrame;
        this.packToDynamicAtlas(p, b);
        var g = p.node;
        var e = this.contentWidth = Math.abs(g.width);
        var i = this.contentHeight = Math.abs(g.height);
        var j = b._rect;
        var k = b.insetLeft;
        var m = b.insetRight;
        var a = j.width - k - m;
        var n = b.insetTop;
        var c = b.insetBottom;
        var l = j.height - n - c;
        this.sizableWidth = e - k - m;
        this.sizableHeight = i - n - c;
        this.sizableWidth = this.sizableWidth > 0 ? this.sizableWidth : 0;
        this.sizableHeight = this.sizableHeight > 0 ? this.sizableHeight : 0;
        var h = this.hRepeat = a === 0 ? this.sizableWidth : this.sizableWidth / a;
        var o = this.vRepeat = l === 0 ? this.sizableHeight : this.sizableHeight / l;
        var f = (this.row = Math.ceil(o + 2)) * (this.col = Math.ceil(h + 2));
        this.verticesCount = f * 4;
        this.indicesCount = f * 6;
        var d = this._renderData._flexBuffer;
        if (d.reserve(this.verticesCount, this.indicesCount)) {
          this._updateIndices();
          this.updateColor(p);
        }
        d.used(this.verticesCount, this.indicesCount);
        if (p._vertsDirty) {
          this.updateUVs(p);
          this.updateVerts(p);
          p._vertsDirty = false;
        }
      };
      d.updateVerts = function (d) {
        var b = d._spriteFrame;
        var j = b._rect;
        var e = d.node;
        var i = e.anchorX * e.width;
        var k = e.anchorY * e.height;
        var n = this.row;
        var q = this.col;
        var a = this.contentWidth;
        var o = this.contentHeight;
        var c = this._local;
        var l = c.x;
        var h = c.y;
        l.length = h.length = 0;
        var r;
        var x;
        var B = b.insetLeft;
        var t = b.insetRight;
        var p = j.width - B - t;
        var u = b.insetTop;
        var g = b.insetBottom;
        var m = j.height - u - g;
        var v = e.width / (B + t) > 1 ? 1 : e.width / (B + t);
        var w = e.height / (u + g) > 1 ? 1 : e.height / (u + g);
        r = p > 0 ? Math.floor(this.sizableWidth * 1000) / 1000 % p == 0 ? p : this.sizableWidth % p : this.sizableWidth;
        x = m > 0 ? Math.floor(this.sizableHeight * 1000) / 1000 % m == 0 ? m : this.sizableHeight % m : this.sizableHeight;
        for (var y = 0; y <= q; y++) {
          if (y === 0) {
            l[y] = -i;
          } else if (y > 0 && y < q) {
            l[y] = y === 1 ? B * v + Math.min(p, this.sizableWidth) - i : p > 0 ? y === q - 1 ? B + r + p * (y - 2) - i : B + Math.min(p, this.sizableWidth) + p * (y - 2) - i : B + this.sizableWidth - i;
          } else if (y === q) {
            l[y] = Math.min(B + this.sizableWidth + t, a) - i;
          }
        }
        for (var C = 0; C <= n; C++) {
          if (C === 0) {
            h[C] = -k;
          } else if (C > 0 && C < n) {
            h[C] = C === 1 ? g * w + Math.min(m, this.sizableHeight) - k : m > 0 ? C === n - 1 ? g + x + (C - 2) * m - k : g + Math.min(m, this.sizableHeight) + (C - 2) * m - k : g + this.sizableHeight - k;
          } else if (C === n) {
            h[C] = Math.min(g + this.sizableHeight + u, o) - k;
          }
        }
        this.updateWorldVerts(d);
      };
      d.updateWorldVerts = function (e) {
        for (var b, i, n, r, x = this._renderData, w = this._local, s = w.x, a = w.y, o = x.vDatas[0], c = this.row, l = this.col, h = e.node._worldMatrix.m, u = h[0], f = h[1], d = h[4], z = h[5], p = h[12], v = h[13], g = this.floatsPerVert, m = 0, C = 0, E = c; C < E; ++C) {
          n = a[C];
          r = a[C + 1];
          for (var D = 0, G = l; D < G; ++D) {
            b = s[D];
            i = s[D + 1];
            o[m] = b * u + n * d + p;
            o[m + 1] = b * f + n * z + v;
            o[m += g] = i * u + n * d + p;
            o[m + 1] = i * f + n * z + v;
            o[m += g] = b * u + r * d + p;
            o[m + 1] = b * f + r * z + v;
            o[m += g] = i * u + r * d + p;
            o[m + 1] = i * f + r * z + v;
            m += g;
          }
        }
      };
      d.updateUVs = function (b) {
        var j = this._renderData.vDatas[0];
        if (j) {
          for (var k = b._spriteFrame, e = k._rect, i = k.insetLeft, n = k.insetRight, p = e.width - i - n, q = k.insetTop, a = k.insetBottom, o = e.height - q - a, c = this.row, l = this.col, h = this.hRepeat, r = this.vRepeat, f = 0, s = 0, x = b.spriteFrame.uv, u = b.spriteFrame.uvSliced, v = b.spriteFrame._rotated, g = this.floatsPerVert, m = this.uvOffset, E = [], y = [], z = 0, F = c; z < F; ++z) {
            s = this.sizableHeight > o ? this.sizableHeight >= z * o ? 1 : r % 1 : r;
            for (var B = 0, G = l; B < G; ++B) {
              f = this.sizableWidth > p ? this.sizableWidth >= B * p ? 1 : h % 1 : h;
              if (v) {
                if (z === 0) {
                  E[0] = u[0].u;
                  E[1] = u[0].u;
                  E[2] = u[4].u + (u[8].u - u[4].u) * s;
                } else if (z < c - 1) {
                  E[0] = u[4].u;
                  E[1] = u[4].u;
                  E[2] = u[4].u + (u[8].u - u[4].u) * s;
                } else if (z === c - 1) {
                  E[0] = u[8].u;
                  E[1] = u[8].u;
                  E[2] = u[12].u;
                }
                if (B === 0) {
                  y[0] = u[0].v;
                  y[1] = u[1].v + (u[2].v - u[1].v) * f;
                  y[2] = u[0].v;
                } else if (B < l - 1) {
                  y[0] = u[1].v;
                  y[1] = u[1].v + (u[2].v - u[1].v) * f;
                  y[2] = u[1].v;
                } else if (B === l - 1) {
                  y[0] = u[2].v;
                  y[1] = u[3].v;
                  y[2] = u[2].v;
                }
                E[3] = E[2];
                y[3] = y[1];
              } else {
                if (B === 0) {
                  E[0] = u[0].u;
                  E[1] = u[1].u + (u[2].u - u[1].u) * f;
                  E[2] = x[0];
                } else if (B < l - 1) {
                  E[0] = u[1].u;
                  E[1] = u[1].u + (u[2].u - u[1].u) * f;
                  E[2] = u[1].u;
                } else if (B === l - 1) {
                  E[0] = u[2].u;
                  E[1] = u[3].u;
                  E[2] = u[2].u;
                }
                if (z === 0) {
                  y[0] = u[0].v;
                  y[1] = u[0].v;
                  y[2] = u[4].v + (u[8].v - u[4].v) * s;
                } else if (z < c - 1) {
                  y[0] = u[4].v;
                  y[1] = u[4].v;
                  y[2] = u[4].v + (u[8].v - u[4].v) * s;
                } else if (z === c - 1) {
                  y[0] = u[8].v;
                  y[1] = u[8].v;
                  y[2] = u[12].v;
                }
                E[3] = E[1];
                y[3] = y[2];
              }
              j[m] = E[0];
              j[m + 1] = y[0];
              j[m += g] = E[1];
              j[m + 1] = y[1];
              j[m += g] = E[2];
              j[m + 1] = y[2];
              j[m += g] = E[3];
              j[m + 1] = y[3];
              m += g;
            }
          }
        }
      };
      return i;
    }(((c = g("../../../../assembler-2d")) && c.__esModule ? c : {
      default: c
    }).default);
    b.default = i;
    a.exports = b.default;
  }, {
    "../../../../assembler-2d": 188
  }],
  218: [function (r) {
    "use strict";

    var b = d(r("../../../assembler"));
    var s = r("../../../../components/CCSprite");
    var j = d(r("./2d/simple"));
    var i = d(r("./2d/sliced"));
    var k = d(r("./2d/tiled"));
    var m = d(r("./2d/radial-filled"));
    var n = d(r("./2d/bar-filled"));
    var a = d(r("./2d/mesh"));
    var o = d(r("./3d/simple"));
    var c = d(r("./3d/sliced"));
    var l = d(r("./3d/tiled"));
    var h = d(r("./3d/radial-filled"));
    var q = d(r("./3d/bar-filled"));
    var f = d(r("./3d/mesh"));
    function d(b) {
      if (b && b.__esModule) {
        return b;
      } else {
        return {
          default: b
        };
      }
    }
    var e = {
      getConstructor: function (d) {
        var b = d.node.is3DNode;
        var g = b ? o.default : j.default;
        switch (d.type) {
          case s.Type.SLICED:
            g = b ? c.default : i.default;
            break;
          case s.Type.TILED:
            g = b ? l.default : k.default;
            break;
          case s.Type.FILLED:
            g = d._fillType === s.FillType.RADIAL ? b ? h.default : m.default : b ? q.default : n.default;
            break;
          case s.Type.MESH:
            g = b ? f.default : a.default;
        }
        return g;
      },
      Simple: j.default,
      Sliced: i.default,
      Tiled: k.default,
      RadialFilled: m.default,
      BarFilled: n.default,
      Mesh: a.default,
      Simple3D: o.default,
      Sliced3D: c.default,
      Tiled3D: l.default,
      RadialFilled3D: h.default,
      BarFilled3D: q.default,
      Mesh3D: f.default
    };
    b.default.register(cc.Sprite, e);
  }, {
    "../../../../components/CCSprite": 115,
    "../../../assembler": 190,
    "./2d/bar-filled": 212,
    "./2d/mesh": 213,
    "./2d/radial-filled": 214,
    "./2d/simple": 215,
    "./2d/sliced": 216,
    "./2d/tiled": 217,
    "./3d/bar-filled": undefined,
    "./3d/mesh": undefined,
    "./3d/radial-filled": undefined,
    "./3d/simple": undefined,
    "./3d/sliced": undefined,
    "./3d/tiled": undefined
  }],
  219: [function (e, a, b) {
    "use strict";

    b.__esModule = true;
    b.default = undefined;
    var c = function () {
      function c(f, a, b, c, d) {
        this._handler = f;
        this._index = a;
        this._vfmt = d;
        this._verticesBytes = d._bytes;
        this._initVerticesCount = b;
        this._initIndicesCount = c;
        this.reset();
      }
      var a = c.prototype;
      a._reallocVData = function (c, a) {
        this.vData = new Float32Array(c);
        this.uintVData = new Uint32Array(this.vData.buffer);
        if (a) {
          this.vData.set(a);
        }
        this._handler.updateMesh(this._index, this.vData, this.iData);
      };
      a._reallocIData = function (c, a) {
        this.iData = new Uint16Array(c);
        if (a) {
          this.iData.set(a);
        }
        this._handler.updateMesh(this._index, this.vData, this.iData);
      };
      a.reserve = function (g, a) {
        var b = g * this._verticesBytes >> 2;
        var c = this.vData.length;
        var h = false;
        if (b > c) {
          for (; c < b;) {
            c *= 2;
          }
          this._reallocVData(c, this.vData);
          h = true;
        }
        var i = this.iData.length;
        if (a > i) {
          for (; i < a;) {
            i *= 2;
          }
          this._reallocIData(a, this.iData);
          h = true;
        }
        return h;
      };
      a.used = function (c, a) {
        this.usedVertices = c;
        this.usedIndices = a;
        this.usedVerticesFloats = c * this._verticesBytes >> 2;
        this._handler.updateMeshRange(c, a);
      };
      a.reset = function () {
        var b = this._initVerticesCount * this._verticesBytes >> 2;
        this._reallocVData(b);
        this._reallocIData(this._initIndicesCount);
        this.usedVertices = 0;
        this.usedVerticesFloats = 0;
        this.usedIndices = 0;
      };
      return c;
    }();
    b.default = c;
    cc.FlexBuffer = c;
    a.exports = b.default;
  }, {}],
  220: [function (f, a) {
    "use strict";

    var b;
    var g = (b = f("../../../renderer/gfx")) && b.__esModule ? b : {
      default: b
    };
    var d = cc.Class({
      name: "cc.MeshBuffer",
      ctor: function (c, a) {
        this.init(c, a);
      },
      init: function (c, a) {
        this.byteOffset = 0;
        this.indiceOffset = 0;
        this.vertexOffset = 0;
        this.indiceStart = 0;
        this._dirty = false;
        this._vertexFormat = a;
        this._vertexBytes = this._vertexFormat._bytes;
        this._arrOffset = 0;
        this._vbArr = [];
        this._vb = new g.default.VertexBuffer(c._device, a, g.default.USAGE_DYNAMIC, new ArrayBuffer(), 0);
        this._vbArr[0] = this._vb;
        this._ibArr = [];
        this._ib = new g.default.IndexBuffer(c._device, g.default.INDEX_FMT_UINT16, g.default.USAGE_STATIC, new ArrayBuffer(), 0);
        this._ibArr[0] = this._ib;
        this._vData = null;
        this._uintVData = null;
        this._iData = null;
        this._batcher = c;
        this._initVDataCount = a._bytes * 256;
        this._initIDataCount = 1536;
        this._offsetInfo = {
          byteOffset: 0,
          vertexOffset: 0,
          indiceOffset: 0
        };
        this._reallocBuffer();
      },
      uploadData: function () {
        if (this.byteOffset !== 0 && this._dirty) {
          var c = new Float32Array(this._vData.buffer, 0, this.byteOffset >> 2);
          var a = new Uint16Array(this._iData.buffer, 0, this.indiceOffset);
          this._vb.update(0, c);
          this._ib.update(0, a);
          this._dirty = false;
        }
      },
      switchBuffer: function () {
        var b = ++this._arrOffset;
        this.byteOffset = 0;
        this.vertexOffset = 0;
        this.indiceOffset = 0;
        this.indiceStart = 0;
        if (b < this._vbArr.length) {
          this._vb = this._vbArr[b];
          this._ib = this._ibArr[b];
        } else {
          this._vb = new g.default.VertexBuffer(this._batcher._device, this._vertexFormat, g.default.USAGE_DYNAMIC, new ArrayBuffer(), 0);
          this._vbArr[b] = this._vb;
          this._ib = new g.default.IndexBuffer(this._batcher._device, g.default.INDEX_FMT_UINT16, g.default.USAGE_STATIC, new ArrayBuffer(), 0);
          this._ibArr[b] = this._ib;
        }
      },
      checkAndSwitchBuffer: function (b) {
        if (this.vertexOffset + b > 65535) {
          this.uploadData();
          this._batcher._flush();
          this.switchBuffer();
        }
      },
      requestStatic: function (g, a) {
        this.checkAndSwitchBuffer(g);
        var b = this.byteOffset + g * this._vertexBytes;
        var c = this.indiceOffset + a;
        var d = this._vData.byteLength;
        var h = this._iData.length;
        if (b > d || c > h) {
          for (; d < b || h < c;) {
            this._initVDataCount *= 2;
            this._initIDataCount *= 2;
            d = this._initVDataCount * 4;
            h = this._initIDataCount;
          }
          this._reallocBuffer();
        }
        this._updateOffset(g, a, b);
      },
      _updateOffset: function (e, a, b) {
        var c = this._offsetInfo;
        c.vertexOffset = this.vertexOffset;
        this.vertexOffset += e;
        c.indiceOffset = this.indiceOffset;
        this.indiceOffset += a;
        c.byteOffset = this.byteOffset;
        this.byteOffset = b;
        this._dirty = true;
      },
      request: function (c, a) {
        if (this._batcher._buffer !== this) {
          this._batcher._flush();
          this._batcher._buffer = this;
        }
        this.requestStatic(c, a);
        return this._offsetInfo;
      },
      _reallocBuffer: function () {
        this._reallocVData(true);
        this._reallocIData(true);
      },
      _reallocVData: function (e) {
        var a;
        if (this._vData) {
          a = new Uint8Array(this._vData.buffer);
        }
        this._vData = new Float32Array(this._initVDataCount);
        this._uintVData = new Uint32Array(this._vData.buffer);
        var g = new Uint8Array(this._uintVData.buffer);
        if (a && e) {
          for (var c = 0, h = a.length; c < h; c++) {
            g[c] = a[c];
          }
        }
      },
      _reallocIData: function (f) {
        var a = this._iData;
        this._iData = new Uint16Array(this._initIDataCount);
        if (a && f) {
          for (var b = this._iData, c = 0, g = a.length; c < g; c++) {
            b[c] = a[c];
          }
        }
      },
      reset: function () {
        this._arrOffset = 0;
        this._vb = this._vbArr[0];
        this._ib = this._ibArr[0];
        this.byteOffset = 0;
        this.indiceOffset = 0;
        this.vertexOffset = 0;
        this.indiceStart = 0;
        this._dirty = false;
      },
      destroy: function () {
        this.reset();
        for (var c = 0; c < this._vbArr.length; c++) {
          this._vbArr[c].destroy();
        }
        this._vbArr = null;
        for (var d = 0; d < this._ibArr.length; d++) {
          this._ibArr[d].destroy();
        }
        this._ibArr = null;
        this._ib = null;
        this._vb = null;
      },
      forwardIndiceStartToOffset: function () {
        this.indiceStart = this.indiceOffset;
      }
    });
    if (cc.sys.isSafari14) {
      d.prototype.checkAndSwitchBuffer = function (b) {
        if (this.vertexOffset + b > 65535) {
          this.uploadData();
          this._batcher._flush();
        }
      };
      d.prototype.forwardIndiceStartToOffset = function () {
        this.uploadData();
        this.switchBuffer();
      };
    }
    cc.MeshBuffer = a.exports = d;
  }, {
    "../../../renderer/gfx": 282
  }],
  221: [function (r, b) {
    "use strict";

    var g = j(r("../../../renderer/core/input-assembler"));
    var e = j(r("../../../renderer/memop/recycle-pool"));
    var i = j(r("../../../renderer/scene/model"));
    function j(b) {
      if (b && b.__esModule) {
        return b;
      } else {
        return {
          default: b
        };
      }
    }
    var k = r("./vertex-format");
    var m = k.vfmtPosUvColor;
    var a = k.vfmt3D;
    var n = r("./quad-buffer");
    var c = r("./mesh-buffer");
    var l = r("./spine-buffer");
    var h = r("../../assets/material/CCMaterial");
    new (r("../../platform/id-generater"))("VertextFormat");
    var o = {};
    var f = new h();
    var d = new g.default();
    d._count = 0;
    function q(d, b) {
      this._renderScene = b;
      this._device = d;
      this.walking = false;
      this.material = f;
      this.cullingMask = 1;
      this._iaPool = new e.default(function () {
        return new g.default();
      }, 16);
      this._modelPool = new e.default(function () {
        return new i.default();
      }, 16);
      this._quadBuffer = this.getBuffer("quad", m);
      this._meshBuffer = this.getBuffer("mesh", m);
      this._quadBuffer3D = this.getBuffer("quad", a);
      this._meshBuffer3D = this.getBuffer("mesh", a);
      this._buffer = this._meshBuffer;
      this._batchedModels = [];
      this._dummyNode = new cc.Node();
      this._sortKey = 0;
      this.node = this._dummyNode;
      this.parentOpacity = 1;
      this.parentOpacityDirty = 0;
      this.worldMatDirty = 0;
    }
    q.prototype = {
      constructor: q,
      reset: function () {
        this._iaPool.reset();
        for (var d = this._renderScene, a = this._batchedModels, b = 0; b < a.length; ++b) {
          a[b].setInputAssembler(null);
          a[b].setEffect(null);
          d.removeModel(a[b]);
        }
        this._modelPool.reset();
        a.length = 0;
        this._sortKey = 0;
        for (var g in o) {
          o[g].reset();
        }
        this._buffer = this._meshBuffer;
        this.node = this._dummyNode;
        this.material = f;
        this.cullingMask = 1;
        this.parentOpacity = 1;
        this.parentOpacityDirty = 0;
        this.worldMatDirty = 0;
      },
      _flushMaterial: function (e) {
        if (e) {
          this.material = e;
          var a = e.effect;
          if (a) {
            var b = this._modelPool.add();
            this._batchedModels.push(b);
            b.sortKey = this._sortKey++;
            b._cullingMask = this.cullingMask;
            b.setNode(this.node);
            b.setEffect(a, null);
            b.setInputAssembler(d);
            this._renderScene.addModel(b);
          }
        }
      },
      _flush: function () {
        var g = this.material;
        var a = this._buffer;
        var b = a.indiceOffset - a.indiceStart;
        if (this.walking && g && !(b <= 0)) {
          var c = g.effect;
          if (c) {
            var d = this._iaPool.add();
            d._vertexBuffer = a._vb;
            d._indexBuffer = a._ib;
            d._start = a.indiceStart;
            d._count = b;
            var e = this._modelPool.add();
            this._batchedModels.push(e);
            e.sortKey = this._sortKey++;
            e._cullingMask = this.cullingMask;
            e.setNode(this.node);
            e.setEffect(c);
            e.setInputAssembler(d);
            this._renderScene.addModel(e);
            a.forwardIndiceStartToOffset();
          }
        }
      },
      _flushIA: function (d) {
        if (d) {
          var a = this.material.effect;
          if (a) {
            var b = this._modelPool.add();
            this._batchedModels.push(b);
            b.sortKey = this._sortKey++;
            b._cullingMask = this.cullingMask;
            b.setNode(this.node);
            b.setEffect(a);
            b.setInputAssembler(d);
            this._renderScene.addModel(b);
          }
        }
      },
      terminate: function () {
        if (cc.dynamicAtlasManager && cc.dynamicAtlasManager.enabled) {
          cc.dynamicAtlasManager.update();
        }
        this._flush();
        for (var b in o) {
          o[b].uploadData();
        }
        this.walking = false;
      },
      getBuffer: function (f, a) {
        var b = f + a.getHash();
        var d = o[b];
        if (!d) {
          if (f === "mesh") {
            d = new c(this, a);
          } else if (f === "quad") {
            d = new n(this, a);
          } else {
            if (f !== "spine") {
              return null;
            }
            d = new l(this, a);
          }
          o[b] = d;
        }
        return d;
      }
    };
    b.exports = q;
  }, {
    "../../../renderer/core/input-assembler": 272,
    "../../../renderer/memop/recycle-pool": 297,
    "../../../renderer/scene/model": 303,
    "../../assets/material/CCMaterial": 76,
    "../../platform/id-generater": 179,
    "./mesh-buffer": 220,
    "./quad-buffer": 222,
    "./spine-buffer": 224,
    "./vertex-format": 225
  }],
  222: [function (e, a) {
    "use strict";

    var b = e("./mesh-buffer");
    var c = cc.Class({
      name: "cc.QuadBuffer",
      extends: b,
      _fillQuadBuffer: function () {
        for (var g = this._initIDataCount / 6, a = this._iData, b = 0, h = 0; b < g; b++) {
          var i = b * 4;
          a[h++] = i;
          a[h++] = i + 1;
          a[h++] = i + 2;
          a[h++] = i + 1;
          a[h++] = i + 3;
          a[h++] = i + 2;
        }
        var j = new Uint16Array(this._iData.buffer, 0, g * 6);
        this._ib.update(0, j);
      },
      uploadData: function () {
        if (this.byteOffset !== 0 && this._dirty) {
          var b = new Float32Array(this._vData.buffer, 0, this.byteOffset >> 2);
          this._vb.update(0, b);
          this._dirty = false;
        }
      },
      switchBuffer: function () {
        this._super();
        var b = new Uint16Array(this._iData.buffer, 0, this._initIDataCount);
        this._ib.update(0, b);
      },
      _reallocBuffer: function () {
        this._reallocVData(true);
        this._reallocIData();
        this._fillQuadBuffer();
      }
    });
    cc.QuadBuffer = a.exports = c;
  }, {
    "./mesh-buffer": 220
  }],
  223: [function (a, b, c) {
    "use strict";

    c.__esModule = true;
    c.default = g;
    var d;
    var i = (d = a("./flex-buffer")) && d.__esModule ? d : {
      default: d
    };
    var f = a("./vertex-format");
    function g() {
      this.vDatas = [];
      this.uintVDatas = [];
      this.iDatas = [];
      this.meshCount = 0;
      this._infos = null;
      this._flexBuffer = null;
    }
    cc.js.mixin(g.prototype, {
      init: function () {},
      clear: function () {
        this.vDatas.length = 0;
        this.iDatas.length = 0;
        this.uintVDatas.length = 0;
        this.meshCount = 0;
        this._infos = null;
        if (this._flexBuffer) {
          this._flexBuffer.reset();
        }
      },
      updateMesh: function (d, a, b) {
        this.vDatas[d] = a;
        this.uintVDatas[d] = new Uint32Array(a.buffer, 0, a.length);
        this.iDatas[d] = b;
        this.meshCount = this.vDatas.length;
      },
      updateMeshRange: function () {},
      createData: function (f, a, b) {
        var c = new Float32Array(a);
        var d = new Uint16Array(b);
        this.updateMesh(f, c, d);
      },
      createQuadData: function (d, a, b) {
        this.createData(d, a, b);
        this.initQuadIndices(this.iDatas[d]);
      },
      createFlexData: function (e, a, b, c) {
        c = c || f.vfmtPosUvColor;
        this._flexBuffer = new i.default(this, e, a, b, c);
      },
      initQuadIndices: function (f) {
        for (var a = f.length / 6, b = 0, g = 0; b < a; b++) {
          var h = b * 4;
          f[g++] = h;
          f[g++] = h + 1;
          f[g++] = h + 2;
          f[g++] = h + 1;
          f[g++] = h + 3;
          f[g++] = h + 2;
        }
      }
    });
    cc.RenderData = g;
    b.exports = c.default;
  }, {
    "./flex-buffer": 219,
    "./vertex-format": 225
  }],
  224: [function (d, a) {
    "use strict";

    var b = cc.Class({
      name: "cc.SpineBuffer",
      extends: d("./mesh-buffer"),
      requestStatic: function (a, b) {
        this.checkAndSwitchBuffer(a);
        var c = this.byteOffset + a * this._vertexBytes;
        var d = this.indiceOffset + b;
        var e = this._vData.byteLength;
        var i = this._iData.length;
        if (c > e || d > i) {
          for (; e < c || i < d;) {
            this._initVDataCount *= 2;
            this._initIDataCount *= 2;
            e = this._initVDataCount * 4;
            i = this._initIDataCount;
          }
          this._reallocBuffer();
        }
        var j = this._offsetInfo;
        j.vertexOffset = this.vertexOffset;
        j.indiceOffset = this.indiceOffset;
        j.byteOffset = this.byteOffset;
      },
      adjust: function (c, a) {
        this.vertexOffset += c;
        this.indiceOffset += a;
        this.byteOffset = this.byteOffset + c * this._vertexBytes;
        this._dirty = true;
      }
    });
    cc.SpineBuffer = a.exports = b;
  }, {
    "./mesh-buffer": 220
  }],
  225: [function (i, b) {
    "use strict";

    var d;
    var l = (d = i("../../../renderer/gfx")) && d.__esModule ? d : {
      default: d
    };
    var f = new l.default.VertexFormat([{
      name: l.default.ATTR_POSITION,
      type: l.default.ATTR_TYPE_FLOAT32,
      num: 3
    }, {
      name: l.default.ATTR_UV0,
      type: l.default.ATTR_TYPE_FLOAT32,
      num: 2
    }, {
      name: l.default.ATTR_COLOR,
      type: l.default.ATTR_TYPE_UINT8,
      num: 4,
      normalize: true
    }]);
    f.name = "vfmt3D";
    l.default.VertexFormat.XYZ_UV_Color = f;
    var g = new l.default.VertexFormat([{
      name: l.default.ATTR_POSITION,
      type: l.default.ATTR_TYPE_FLOAT32,
      num: 2
    }, {
      name: l.default.ATTR_UV0,
      type: l.default.ATTR_TYPE_FLOAT32,
      num: 2
    }, {
      name: l.default.ATTR_COLOR,
      type: l.default.ATTR_TYPE_UINT8,
      num: 4,
      normalize: true
    }]);
    g.name = "vfmtPosUvColor";
    l.default.VertexFormat.XY_UV_Color = g;
    var h = new l.default.VertexFormat([{
      name: l.default.ATTR_POSITION,
      type: l.default.ATTR_TYPE_FLOAT32,
      num: 2
    }, {
      name: l.default.ATTR_UV0,
      type: l.default.ATTR_TYPE_FLOAT32,
      num: 2
    }, {
      name: l.default.ATTR_COLOR,
      type: l.default.ATTR_TYPE_UINT8,
      num: 4,
      normalize: true
    }, {
      name: l.default.ATTR_COLOR0,
      type: l.default.ATTR_TYPE_UINT8,
      num: 4,
      normalize: true
    }]);
    h.name = "vfmtPosUvTwoColor";
    l.default.VertexFormat.XY_UV_Two_Color = h;
    var j = new l.default.VertexFormat([{
      name: l.default.ATTR_POSITION,
      type: l.default.ATTR_TYPE_FLOAT32,
      num: 2
    }, {
      name: l.default.ATTR_UV0,
      type: l.default.ATTR_TYPE_FLOAT32,
      num: 2
    }]);
    j.name = "vfmtPosUv";
    l.default.VertexFormat.XY_UV = j;
    var a = new l.default.VertexFormat([{
      name: l.default.ATTR_POSITION,
      type: l.default.ATTR_TYPE_FLOAT32,
      num: 2
    }, {
      name: l.default.ATTR_COLOR,
      type: l.default.ATTR_TYPE_UINT8,
      num: 4,
      normalize: true
    }]);
    a.name = "vfmtPosColor";
    l.default.VertexFormat.XY_Color = a;
    var k = new l.default.VertexFormat([{
      name: l.default.ATTR_POSITION,
      type: l.default.ATTR_TYPE_FLOAT32,
      num: 2
    }]);
    k.name = "vfmtPos";
    l.default.VertexFormat.XY = k;
    b.exports = {
      vfmt3D: f,
      vfmtPosUvColor: g,
      vfmtPosUvTwoColor: h,
      vfmtPosUv: j,
      vfmtPosColor: a,
      vfmtPos: k
    };
  }, {
    "../../../renderer/gfx": 282
  }],
  226: [function (f, a) {
    "use strict";

    f("../platform/CCSys");
    var g = /(\.[^\.\/\?\\]*)(\?.*)?$/;
    var c = /((.*)(\/|\\|\\\\))?(.*?\..*$)?/;
    var b = /[^\.\/]+\/\.\.\//;
    cc.path = {
      join: function () {
        for (var d = arguments.length, a = "", e = 0; e < d; e++) {
          a = (a + (a === "" ? "" : "/") + arguments[e]).replace(/(\/|\\\\)$/, "");
        }
        return a;
      },
      extname: function (c) {
        var a = g.exec(c);
        if (a) {
          return a[1];
        } else {
          return "";
        }
      },
      mainFileName: function (c) {
        if (c) {
          var a = c.lastIndexOf(".");
          if (a !== -1) {
            return c.substring(0, a);
          }
        }
        return c;
      },
      basename: function (f, g) {
        var b = f.indexOf("?");
        if (b > 0) {
          f = f.substring(0, b);
        }
        var c = /(\/|\\)([^\/\\]+)$/g.exec(f.replace(/(\/|\\)$/, ""));
        if (!c) {
          return f;
        }
        var d = c[2];
        if (g && f.substring(f.length - g.length).toLowerCase() === g.toLowerCase()) {
          return d.substring(0, d.length - g.length);
        } else {
          return d;
        }
      },
      dirname: function (d) {
        var a = c.exec(d);
        if (a) {
          return a[2];
        } else {
          return "";
        }
      },
      changeExtname: function (e, f) {
        f = f || "";
        var g = e.indexOf("?");
        var h = "";
        if (g > 0) {
          h = e.substring(g);
          e = e.substring(0, g);
        }
        if ((g = e.lastIndexOf(".")) < 0) {
          return e + f + h;
        } else {
          return e.substring(0, g) + f + h;
        }
      },
      changeBasename: function (g, h, b) {
        if (h.indexOf(".") === 0) {
          return this.changeExtname(g, h);
        }
        var c = g.indexOf("?");
        var i = "";
        var j = b ? this.extname(g) : "";
        if (c > 0) {
          i = g.substring(c);
          g = g.substring(0, c);
        }
        c = (c = g.lastIndexOf("/")) <= 0 ? 0 : c + 1;
        return g.substring(0, c) + h + j + i;
      },
      _normalize: function (c) {
        var d = c += "";
        do {
          d = c;
          c = c.replace(b, "");
        } while (d.length !== c.length);
        return c;
      },
      sep: cc.sys.os === cc.sys.OS_WINDOWS ? "\\" : "/",
      stripSep: function (b) {
        return b.replace(/[\/\\]$/, "");
      }
    };
    a.exports = cc.path;
  }, {
    "../platform/CCSys": 171
  }],
  227: [function (d, a) {
    "use strict";

    function b(g, a, b, c, d, e) {
      this.a = g;
      this.b = a;
      this.c = b;
      this.d = c;
      this.tx = d;
      this.ty = e;
    }
    b.create = function (g, a, b, c, d, e) {
      return {
        a: g,
        b: a,
        c: b,
        d: c,
        tx: d,
        ty: e
      };
    };
    b.identity = function () {
      return {
        a: 1,
        b: 0,
        c: 0,
        d: 1,
        tx: 0,
        ty: 0
      };
    };
    b.clone = function (b) {
      return {
        a: b.a,
        b: b.b,
        c: b.c,
        d: b.d,
        tx: b.tx,
        ty: b.ty
      };
    };
    b.concat = function (c, b, d) {
      var e = b.a;
      var f = b.b;
      var g = b.c;
      var h = b.d;
      var i = b.tx;
      var a = b.ty;
      c.a = e * d.a + f * d.c;
      c.b = e * d.b + f * d.d;
      c.c = g * d.a + h * d.c;
      c.d = g * d.b + h * d.d;
      c.tx = i * d.a + a * d.c + d.tx;
      c.ty = i * d.b + a * d.d + d.ty;
      return c;
    };
    b.invert = function (c, b) {
      var d = b.a;
      var e = b.b;
      var f = b.c;
      var g = b.d;
      var h = 1 / (d * g - e * f);
      var i = b.tx;
      var a = b.ty;
      c.a = h * g;
      c.b = -h * e;
      c.c = -h * f;
      c.d = h * d;
      c.tx = h * (f * a - g * i);
      c.ty = h * (e * i - d * a);
      return c;
    };
    b.fromMat4 = function (d, a) {
      var b = a.m;
      d.a = b[0];
      d.b = b[1];
      d.c = b[4];
      d.d = b[5];
      d.tx = b[12];
      d.ty = b[13];
      return d;
    };
    b.transformVec2 = function (g, a, b, c) {
      var h;
      var i;
      if (c === undefined) {
        c = b;
        h = a.x;
        i = a.y;
      } else {
        h = a;
        i = b;
      }
      g.x = c.a * h + c.c * i + c.tx;
      g.y = c.b * h + c.d * i + c.ty;
      return g;
    };
    b.transformSize = function (d, a, b) {
      d.width = b.a * a.width + b.c * a.height;
      d.height = b.b * a.width + b.d * a.height;
      return d;
    };
    b.transformRect = function (m, b, j) {
      var e = b.x;
      var i = b.y;
      var k = e + b.width;
      var n = i + b.height;
      var q = j.a * e + j.c * i + j.tx;
      var a = j.b * e + j.d * i + j.ty;
      var o = j.a * k + j.c * i + j.tx;
      var c = j.b * k + j.d * i + j.ty;
      var l = j.a * e + j.c * n + j.tx;
      var h = j.b * e + j.d * n + j.ty;
      var r = j.a * k + j.c * n + j.tx;
      var f = j.b * k + j.d * n + j.ty;
      var d = Math.min(q, o, l, r);
      var s = Math.max(q, o, l, r);
      var p = Math.min(a, c, h, f);
      var t = Math.max(a, c, h, f);
      m.x = d;
      m.y = p;
      m.width = s - d;
      m.height = t - p;
      return m;
    };
    b.transformObb = function (p, b, g, e, i, j) {
      var k = i.x;
      var m = i.y;
      var a = i.width;
      var n = i.height;
      var c = j.a * k + j.c * m + j.tx;
      var l = j.b * k + j.d * m + j.ty;
      var h = j.a * a;
      var o = j.b * a;
      var f = j.c * n;
      var d = j.d * n;
      b.x = c;
      b.y = l;
      g.x = h + c;
      g.y = o + l;
      p.x = f + c;
      p.y = d + l;
      e.x = h + f + c;
      e.y = o + d + l;
    };
    cc.AffineTransform = a.exports = b;
  }, {}],
  228: [function (g, b) {
    "use strict";

    var j = g("../platform/CCObject").Flags;
    var e = g("./misc");
    var i = g("../platform/js");
    var k = g("../platform/id-generater");
    var m = g("../event-manager");
    var n = g("../renderer/render-flow");
    var t = j.Destroying;
    var a = j.DontDestroy;
    var q = j.Deactivating;
    var c = new k("Node");
    function h(b) {
      if (b) {
        if (typeof b == "string") {
          return i.getClassByName(b);
        } else {
          return b;
        }
      } else {
        return null;
      }
    }
    function l(g, a) {
      if (a._sealed) {
        for (var b = 0; b < g._components.length; ++b) {
          var h = g._components[b];
          if (h.constructor === a) {
            return h;
          }
        }
      } else {
        for (var i = 0; i < g._components.length; ++i) {
          var j = g._components[i];
          if (j instanceof a) {
            return j;
          }
        }
      }
      return null;
    }
    function o(a, b, c) {
      if (b._sealed) {
        for (var d = 0; d < a._components.length; ++d) {
          var i = a._components[d];
          if (i.constructor === b) {
            c.push(i);
          }
        }
      } else {
        for (var j = 0; j < a._components.length; ++j) {
          var k = a._components[j];
          if (k instanceof b) {
            c.push(k);
          }
        }
      }
    }
    function f(g, a) {
      for (var b = 0; b < g.length; ++b) {
        var h = g[b];
        var i = l(h, a);
        if (i) {
          return i;
        }
        if (h._children.length > 0 && (i = f(h._children, a))) {
          return i;
        }
      }
      return null;
    }
    function d(g, a, b) {
      for (var c = 0; c < g.length; ++c) {
        var h = g[c];
        o(h, a, b);
        if (h._children.length > 0) {
          d(h._children, a, b);
        }
      }
    }
    var p = cc.Class({
      name: "cc._BaseNode",
      extends: cc.Object,
      properties: {
        _parent: null,
        _children: [],
        _active: true,
        _components: [],
        _prefab: null,
        _persistNode: {
          get: function () {
            return (this._objFlags & a) > 0;
          },
          set: function (b) {
            if (b) {
              this._objFlags |= a;
            } else {
              this._objFlags &= ~a;
            }
          }
        },
        name: {
          get: function () {
            return this._name;
          },
          set: function (b) {
            this._name = b;
          }
        },
        uuid: {
          get: function () {
            return this._id;
          }
        },
        children: {
          get: function () {
            return this._children;
          }
        },
        childrenCount: {
          get: function () {
            return this._children.length;
          }
        },
        active: {
          get: function () {
            return this._active;
          },
          set: function (c) {
            c = !!c;
            if (this._active !== c) {
              this._active = c;
              var d = this._parent;
              if (d && d._activeInHierarchy) {
                cc.director._nodeActivator.activateNode(this, c);
              }
            }
          }
        },
        activeInHierarchy: {
          get: function () {
            return this._activeInHierarchy;
          }
        }
      },
      ctor: function (b) {
        this._name = b !== undefined ? b : "New Node";
        this._activeInHierarchy = false;
        this._id = c.getNewId();
        if (cc.director._scheduler) {
          cc.director._scheduler.enableForTarget(this);
        }
        this.__eventTargets = [];
      },
      getParent: function () {
        return this._parent;
      },
      setParent: function (a) {
        if (this._parent !== a) {
          var b = this._parent;
          this._parent = a || null;
          this._onSetParent(a);
          if (a) {
            m._setDirtyForNode(this);
            a._children.push(this);
            if (a.emit) {
              a.emit("child-added", this);
            }
            a._renderFlag |= n.FLAG_CHILDREN;
          }
          if (b) {
            if (!(b._objFlags & t)) {
              var c = b._children.indexOf(this);
              b._children.splice(c, 1);
              if (b.emit) {
                b.emit("child-removed", this);
              }
              this._onHierarchyChanged(b);
              if (b._children.length === 0) {
                b._renderFlag &= ~n.FLAG_CHILDREN;
              }
            }
          } else if (a) {
            this._onHierarchyChanged(null);
          }
        }
      },
      attr: function (b) {
        i.mixin(this, b);
      },
      getChildByUuid: function (e) {
        if (!e) {
          return null;
        }
        for (var a = this._children, b = 0, f = a.length; b < f; b++) {
          if (a[b]._id === e) {
            return a[b];
          }
        }
        return null;
      },
      getChildByName: function (e) {
        if (!e) {
          return null;
        }
        for (var a = this._children, b = 0, f = a.length; b < f; b++) {
          if (a[b]._name === e) {
            return a[b];
          }
        }
        return null;
      },
      addChild: function (b) {
        b.setParent(this);
      },
      insertChild: function (c, a) {
        c.parent = this;
        c.setSiblingIndex(a);
      },
      getSiblingIndex: function () {
        if (this._parent) {
          return this._parent._children.indexOf(this);
        } else {
          return 0;
        }
      },
      setSiblingIndex: function (d) {
        if (this._parent && !(this._parent._objFlags & q)) {
          var e = this._parent._children;
          d = d !== -1 ? d : e.length - 1;
          var b = e.indexOf(this);
          if (d !== b) {
            e.splice(b, 1);
            if (d < e.length) {
              e.splice(d, 0, this);
            } else {
              e.push(this);
            }
            if (this._onSiblingIndexChanged) {
              this._onSiblingIndexChanged(d);
            }
          }
        }
      },
      walk: function (c, b) {
        var d;
        var i;
        var l;
        var n;
        var o = cc._BaseNode;
        var j = 1;
        var p = o._stacks[o._stackId];
        if (!p) {
          p = [];
          o._stacks.push(p);
        }
        o._stackId++;
        p.length = 0;
        p[0] = this;
        var q = null;
        for (n = false; j;) {
          if (i = p[--j]) {
            if (!n && c) {
              c(i);
            } else if (n && b) {
              b(i);
            }
            p[j] = null;
            if (n) {
              if (q === this._parent) {
                break;
              }
              n = false;
              if (d) {
                if (d[++l]) {
                  p[j] = d[l];
                  j++;
                } else if (q && (p[j] = q, j++, n = true, q._parent ? (l = (d = q._parent._children).indexOf(q), q = q._parent) : (q = null, d = null), l < 0)) {
                  break;
                }
              }
            } else if (i._children.length > 0) {
              q = i;
              d = i._children;
              l = 0;
              p[j] = d[l];
              j++;
            } else {
              p[j] = i;
              j++;
              n = true;
            }
          }
        }
        p.length = 0;
        o._stackId--;
      },
      cleanup: function () {},
      removeFromParent: function (b) {
        if (this._parent) {
          if (b === undefined) {
            b = true;
          }
          this._parent.removeChild(this, b);
        }
      },
      removeChild: function (c, a) {
        if (this._children.indexOf(c) > -1) {
          if (a || a === undefined) {
            c.cleanup();
          }
          c.parent = null;
        }
      },
      removeAllChildren: function (e) {
        var f = this._children;
        if (e === undefined) {
          e = true;
        }
        for (var b = f.length - 1; b >= 0; b--) {
          var g = f[b];
          if (g) {
            if (e) {
              g.cleanup();
            }
            g.parent = null;
          }
        }
        this._children.length = 0;
      },
      isChildOf: function (c) {
        var a = this;
        do {
          if (a === c) {
            return true;
          }
          a = a._parent;
        } while (a);
        return false;
      },
      getComponent: function (c) {
        var a = h(c);
        if (a) {
          return l(this, a);
        } else {
          return null;
        }
      },
      getComponents: function (d) {
        var a = h(d);
        var b = [];
        if (a) {
          o(this, a, b);
        }
        return b;
      },
      getComponentInChildren: function (c) {
        var a = h(c);
        if (a) {
          return f(this._children, a);
        } else {
          return null;
        }
      },
      getComponentsInChildren: function (e) {
        var a = h(e);
        var b = [];
        if (a) {
          o(this, a, b);
          d(this._children, a, b);
        }
        return b;
      },
      _checkMultipleComp: false,
      addComponent: function (e) {
        var a;
        if (typeof e == "string") {
          if (!(a = i.getClassByName(e))) {
            cc._RF.peek();
            return null;
          }
        } else {
          if (!e) {
            return null;
          }
          a = e;
        }
        if (typeof a != "function") {
          return null;
        }
        if (!i.isChildClassOf(a, cc.Component)) {
          return null;
        }
        var f = a._requireComponent;
        if (f && !this.getComponent(f) && !this.addComponent(f)) {
          return null;
        }
        var c = new a();
        c.node = this;
        this._components.push(c);
        if (this._activeInHierarchy) {
          cc.director._nodeActivator.activateComp(c);
        }
        return c;
      },
      _addComponentAt: false,
      removeComponent: function (b) {
        if (b) {
          if (!(b instanceof cc.Component)) {
            b = this.getComponent(b);
          }
          if (b) {
            b.destroy();
          }
        }
      },
      _getDependComponent: false,
      _removeComponent: function (c) {
        if (c && !(this._objFlags & t)) {
          var a = this._components.indexOf(c);
          if (a !== -1) {
            this._components.splice(a, 1);
          } else {
            c.node;
          }
        }
      },
      destroy: function () {
        if (cc.Object.prototype.destroy.call(this)) {
          this.active = false;
        }
      },
      destroyAllChildren: function () {
        for (var c = this._children, a = 0; a < c.length; ++a) {
          c[a].destroy();
        }
      },
      _onSetParent: function () {},
      _onPostActivated: function () {},
      _onBatchCreated: function () {},
      _onHierarchyChanged: function () {
        var c = this._parent;
        if (!(!this._persistNode || c instanceof cc.Scene)) {
          cc.game.removePersistRootNode(this);
        }
        var a = this._active && !(!c || !c._activeInHierarchy);
        if (this._activeInHierarchy !== a) {
          cc.director._nodeActivator.activateNode(this, a);
        }
      },
      _instantiate: function (c, d) {
        if (!c) {
          c = cc.instantiate._clone(this, this);
        }
        c._prefab;
        c._parent = null;
        c._onBatchCreated(d);
        return c;
      },
      _registerIfAttached: false,
      _onPreDestroy: function () {
        var a;
        var e;
        var k = this._parent;
        var d = k && k._objFlags & t;
        var f = this._children;
        a = 0;
        e = f.length;
        for (; a < e; ++a) {
          f[a]._destroyImmediate();
        }
        a = 0;
        e = this._components.length;
        for (; a < e; ++a) {
          this._components[a]._destroyImmediate();
        }
        for (var g = this.__eventTargets; g.length;) {
          var h = g.pop();
          if (h) {
            h.targetOff(this);
          }
        }
        if (this._persistNode) {
          cc.game.removePersistRootNode(this);
        }
        if (!d && k) {
          var l = k._children.indexOf(this);
          k._children.splice(l, 1);
          if (k.emit) {
            k.emit("child-removed", this);
          }
        }
        return d;
      },
      onRestore: false
    });
    p.idGenerater = c;
    p._stacks = [[]];
    p._stackId = 0;
    p.prototype._onPreDestroyBase = p.prototype._onPreDestroy;
    p.prototype._onHierarchyChangedBase = p.prototype._onHierarchyChanged;
    e.propertyDefine(p, ["parent", "name", "children", "childrenCount"], {});
    cc._BaseNode = b.exports = p;
  }, {
    "../event-manager": 133,
    "../platform/CCObject": 168,
    "../platform/id-generater": 179,
    "../platform/js": 183,
    "../renderer/render-flow": 194,
    "./misc": 236
  }],
  229: [function (c, a) {
    "use strict";

    a.exports = {
      binarySearchEpsilon: function (g, a) {
        for (var b = 0, h = g.length - 1, i = h >>> 1; b <= h; i = b + h >>> 1) {
          var j = g[i];
          if (j > a + 0.000001) {
            h = i - 1;
          } else {
            if (!(j < a - 0.000001)) {
              return i;
            }
            b = i + 1;
          }
        }
        return ~b;
      }
    };
  }, {}],
  230: [function (g, a) {
    "use strict";

    var h = g("../components/CCRenderComponent");
    var i = g("../platform/CCMacro").BlendFactor;
    var b = g("../../renderer/gfx");
    var c = cc.Class({
      properties: {
        _srcBlendFactor: i.SRC_ALPHA,
        _dstBlendFactor: i.ONE_MINUS_SRC_ALPHA,
        srcBlendFactor: {
          get: function () {
            return this._srcBlendFactor;
          },
          set: function (b) {
            if (this._srcBlendFactor !== b) {
              this._srcBlendFactor = b;
              this._updateBlendFunc(true);
              if (this._onBlendChanged) {
                this._onBlendChanged();
              }
            }
          },
          animatable: false,
          type: i,
          tooltip: false,
          visible: true
        },
        dstBlendFactor: {
          get: function () {
            return this._dstBlendFactor;
          },
          set: function (b) {
            if (this._dstBlendFactor !== b) {
              this._dstBlendFactor = b;
              this._updateBlendFunc(true);
            }
          },
          animatable: false,
          type: i,
          tooltip: false,
          visible: true
        }
      },
      setMaterial: function (c, a) {
        var b = h.prototype.setMaterial.call(this, c, a);
        if (!(this._srcBlendFactor === i.SRC_ALPHA && this._dstBlendFactor === i.ONE_MINUS_SRC_ALPHA)) {
          this._updateMaterialBlendFunc(b);
        }
        return b;
      },
      _updateMaterial: function () {
        this._updateBlendFunc();
      },
      _updateBlendFunc: function (d) {
        if (d || this._srcBlendFactor !== i.SRC_ALPHA || this._dstBlendFactor !== i.ONE_MINUS_SRC_ALPHA) {
          for (var a = this.getMaterials(), b = 0; b < a.length; b++) {
            var f = a[b];
            this._updateMaterialBlendFunc(f);
          }
        }
      },
      _updateMaterialBlendFunc: function (c) {
        c.setBlend(true, b.BLEND_FUNC_ADD, this._srcBlendFactor, this._dstBlendFactor, b.BLEND_FUNC_ADD, this._srcBlendFactor, this._dstBlendFactor);
      }
    });
    a.exports = cc.BlendFunc = c;
  }, {
    "../../renderer/gfx": 282,
    "../components/CCRenderComponent": 109,
    "../platform/CCMacro": 167
  }],
  231: [function (a, b) {
    "use strict";

    var c = a("./misc").BASE64_VALUES;
    var d = "0123456789abcdef".split("");
    var f = ["", "", "", ""];
    var e = f.concat(f, "-", f, "-", f, "-", f, "-", f, f, f);
    var g = e.map(function (c, a) {
      if (c === "-") {
        return NaN;
      } else {
        return a;
      }
    }).filter(isFinite);
    b.exports = function (f) {
      if (f.length !== 22) {
        return f;
      }
      e[0] = f[0];
      e[1] = f[1];
      for (var a = 2, h = 2; a < 22; a += 2) {
        var l = c[f.charCodeAt(a)];
        var m = c[f.charCodeAt(a + 1)];
        e[g[h++]] = d[l >> 2];
        e[g[h++]] = d[(l & 3) << 2 | m >> 4];
        e[g[h++]] = d[m & 15];
      }
      return e.join("");
    };
  }, {
    "./misc": 236
  }],
  232: [function (c, a) {
    "use strict";

    cc.find = a.exports = function (a, b) {
      if (a == null) {
        return null;
      }
      if (b) ;else {
        var c = cc.director.getScene();
        if (!c) {
          return null;
        }
        b = c;
      }
      for (var e = b, f = a[0] !== "/" ? 0 : 1, h = a.split("/"), i = f; i < h.length; i++) {
        var j = h[i];
        var l = e._children;
        e = null;
        for (var n = 0, o = l.length; n < o; ++n) {
          var t = l[n];
          if (t.name === j) {
            e = t;
            break;
          }
        }
        if (!e) {
          return null;
        }
      }
      return e;
    };
  }, {}],
  233: [function (g, a) {
    "use strict";

    var b;
    var h = (b = g("../assets/material/material-variant")) && b.__esModule ? b : {
      default: b
    };
    var d = g("../assets/material/CCMaterial");
    var f = cc.Class({
      properties: {
        _normalMaterial: null,
        normalMaterial: {
          get: function () {
            return this._normalMaterial;
          },
          set: function (b) {
            this._normalMaterial = b;
            if (this._updateDisabledState) {
              this._updateDisabledState();
            }
          },
          type: d,
          tooltip: false,
          animatable: false
        },
        _grayMaterial: null,
        grayMaterial: {
          get: function () {
            return this._grayMaterial;
          },
          set: function (b) {
            this._grayMaterial = b;
            if (this._updateDisabledState) {
              this._updateDisabledState();
            }
          },
          type: d,
          tooltip: false,
          animatable: false
        }
      },
      _switchGrayMaterial: function (e, a) {
        var b;
        if (e) {
          if (!(b = this._grayMaterial)) {
            b = d.getBuiltinMaterial("2d-gray-sprite");
          }
          b = this._grayMaterial = h.default.create(b, a);
        } else {
          if (!(b = this._normalMaterial)) {
            b = d.getBuiltinMaterial("2d-sprite", a);
          }
          b = this._normalMaterial = h.default.create(b, a);
        }
        a.setMaterial(0, b);
      }
    });
    a.exports = f;
  }, {
    "../assets/material/CCMaterial": 76,
    "../assets/material/material-variant": 83
  }],
  234: [function (e, a) {
    "use strict";

    var m = /^(click)(\s)*=|(param)(\s)*=/;
    var i = /(\s)*src(\s)*=|(\s)*height(\s)*=|(\s)*width(\s)*=|(\s)*align(\s)*=|(\s)*offset(\s)*=|(\s)*click(\s)*=|(\s)*param(\s)*=/;
    function b() {
      this._parsedObject = {};
      this._specialSymbolArray = [];
      this._specialSymbolArray.push([/&lt;/g, "<"]);
      this._specialSymbolArray.push([/&gt;/g, ">"]);
      this._specialSymbolArray.push([/&amp;/g, "&"]);
      this._specialSymbolArray.push([/&quot;/g, "\""]);
      this._specialSymbolArray.push([/&apos;/g, "'"]);
      this._specialSymbolArray.push([/&nbsp;/g, " "]);
    }
    b.prototype = {
      constructor: b,
      parse: function (a) {
        this._resultObjectArray = [];
        if (!a) {
          return this._resultObjectArray;
        }
        this._stack = [];
        for (var b = 0, e = a.length; b < e;) {
          var d = a.indexOf(">", b);
          var j = -1;
          if (d >= 0 && (j = a.lastIndexOf("<", d)) < b - 1) {
            j = a.indexOf("<", d + 1);
            d = a.indexOf(">", j + 1);
          }
          if (j < 0) {
            this._stack.pop();
            this._processResult(a.substring(b));
            b = e;
          } else {
            var k = a.substring(b, j);
            var l = a.substring(j + 1, d);
            if (l === "") {
              k = a.substring(b, d + 1);
            }
            this._processResult(k);
            if (d === -1) {
              d = j;
            } else if (a.charAt(j + 1) === "/") {
              this._stack.pop();
            } else {
              this._addToStack(l);
            }
            b = d + 1;
          }
        }
        return this._resultObjectArray;
      },
      _attributeToObject: function (c) {
        var e;
        var f;
        var l;
        var o;
        var r = {};
        var m = (c = c.trim()).match(/^(color|size)(\s)*=/);
        if (m) {
          e = m[0];
          if ((c = c.substring(e.length).trim()) === "") {
            return r;
          }
          f = c.indexOf(" ");
          switch (e[0]) {
            case "c":
              r.color = f > -1 ? c.substring(0, f).trim() : c;
              break;
            case "s":
              r.size = parseInt(c);
          }
          if (f > -1) {
            o = c.substring(f + 1).trim();
            l = this._processEventHandler(o);
            r.event = l;
          }
          return r;
        }
        if ((m = c.match(/^(br(\s)*\/)/)) && m[0].length > 0 && (e = m[0].trim()).startsWith("br") && e[e.length - 1] === "/") {
          r.isNewLine = true;
          this._resultObjectArray.push({
            text: "",
            style: {
              newline: true
            }
          });
          return r;
        }
        if ((m = c.match(/^(img(\s)*src(\s)*=[^>]+\/)/)) && m[0].length > 0 && (e = m[0].trim()).startsWith("img") && e[e.length - 1] === "/") {
          var s;
          m = c.match(i);
          for (var t = false; m;) {
            e = (c = c.substring(c.indexOf(m[0]))).substr(0, m[0].length);
            q = (f = (s = c.substring(e.length).trim()).indexOf(" ")) > -1 ? s.substr(0, f) : s;
            e = (e = e.replace(/[^a-zA-Z]/g, "").trim()).toLocaleLowerCase();
            c = s.substring(f).trim();
            if (q.endsWith("/")) {
              q = q.slice(0, -1);
            }
            if (e === "src") {
              switch (q.charCodeAt(0)) {
                case 34:
                case 39:
                  t = true;
                  q = q.slice(1, -1);
              }
              r.isImage = true;
              r.src = q;
            } else if (e === "height") {
              r.imageHeight = parseInt(q);
            } else if (e === "width") {
              r.imageWidth = parseInt(q);
            } else if (e === "align") {
              switch (q.charCodeAt(0)) {
                case 34:
                case 39:
                  q = q.slice(1, -1);
              }
              r.imageAlign = q.toLocaleLowerCase();
            } else if (e === "offset") {
              r.imageOffset = q;
            } else if (e === "click") {
              r.event = this._processEventHandler(e + "=" + q);
            }
            if (r.event && e === "param") {
              r.event.param = q.replace(/^\"|\"$/g, "");
            }
            m = c.match(i);
          }
          if (t && r.isImage) {
            this._resultObjectArray.push({
              text: "",
              style: r
            });
          }
          return {};
        }
        if (m = c.match(/^(outline(\s)*[^>]*)/)) {
          var u = {
            color: "#ffffff",
            width: 1
          };
          if (c = m[0].substring(7).trim()) {
            var q;
            var w = /(\s)*color(\s)*=|(\s)*width(\s)*=|(\s)*click(\s)*=|(\s)*param(\s)*=/;
            for (m = c.match(w); m;) {
              e = (c = c.substring(c.indexOf(m[0]))).substr(0, m[0].length);
              q = (f = (s = c.substring(e.length).trim()).indexOf(" ")) > -1 ? s.substr(0, f) : s;
              e = (e = e.replace(/[^a-zA-Z]/g, "").trim()).toLocaleLowerCase();
              c = s.substring(f).trim();
              if (e === "click") {
                r.event = this._processEventHandler(e + "=" + q);
              } else if (e === "color") {
                u.color = q;
              } else if (e === "width") {
                u.width = parseInt(q);
              }
              if (r.event && e === "param") {
                r.event.param = q.replace(/^\"|\"$/g, "");
              }
              m = c.match(w);
            }
          }
          r.outline = u;
        }
        if ((m = c.match(/^(on|u|b|i)(\s)*/)) && m[0].length > 0) {
          e = m[0];
          c = c.substring(e.length).trim();
          switch (e[0]) {
            case "u":
              r.underline = true;
              break;
            case "i":
              r.italic = true;
              break;
            case "b":
              r.bold = true;
          }
          if (c === "") {
            return r;
          }
          l = this._processEventHandler(c);
          r.event = l;
        }
        return r;
      },
      _processEventHandler: function (a) {
        for (var c = 0, d = {}, e = a.match(m), g = false; e;) {
          var n = e[0];
          var o = "";
          g = false;
          if ((a = a.substring(n.length).trim()).charAt(0) === "\"") {
            if ((c = a.indexOf("\"", 1)) > -1) {
              o = a.substring(1, c).trim();
              g = true;
            }
            c++;
          } else if (a.charAt(0) === "'") {
            if ((c = a.indexOf("'", 1)) > -1) {
              o = a.substring(1, c).trim();
              g = true;
            }
            c++;
          } else {
            var p = a.match(/(\S)+/);
            c = (o = p ? p[0] : "").length;
          }
          if (g) {
            d[n = n.substring(0, n.length - 1).trim()] = o;
          }
          e = (a = a.substring(c).trim()).match(m);
        }
        return d;
      },
      _addToStack: function (e) {
        var a = this._attributeToObject(e);
        if (this._stack.length === 0) {
          this._stack.push(a);
        } else {
          if (a.isNewLine || a.isImage) {
            return;
          }
          var b = this._stack[this._stack.length - 1];
          for (var c in b) {
            if (!a[c]) {
              a[c] = b[c];
            }
          }
          this._stack.push(a);
        }
      },
      _processResult: function (b) {
        if (b !== "") {
          b = this._escapeSpecialSymbol(b);
          if (this._stack.length > 0) {
            this._resultObjectArray.push({
              text: b,
              style: this._stack[this._stack.length - 1]
            });
          } else {
            this._resultObjectArray.push({
              text: b
            });
          }
        }
      },
      _escapeSpecialSymbol: function (e) {
        for (var f = 0; f < this._specialSymbolArray.length; ++f) {
          var g = this._specialSymbolArray[f][0];
          var h = this._specialSymbolArray[f][1];
          e = e.replace(g, h);
        }
        return e;
      }
    };
    a.exports = b;
  }, {}],
  235: [function (b) {
    "use strict";

    b("./CCPath");
    b("./profiler/CCProfiler");
    b("./find");
    b("./mutable-forward-iterator");
  }, {
    "./CCPath": 226,
    "./find": 232,
    "./mutable-forward-iterator": 237,
    "./profiler/CCProfiler": 240
  }],
  236: [function (a, b) {
    "use strict";

    for (var i = a("../platform/js"), c = {
        propertyDefine: function (c, b, d) {
          function e(a, b, c, d) {
            var e = Object.getOwnPropertyDescriptor(a, b);
            if (e) {
              if (e.get) {
                a[c] = e.get;
              }
              if (e.set && d) {
                a[d] = e.set;
              }
            } else {
              var f = a[c];
              i.getset(a, b, f, a[d]);
            }
          }
          for (var f, g = c.prototype, l = 0; l < b.length; l++) {
            var m = (f = b[l])[0].toUpperCase() + f.slice(1);
            e(g, f, "get" + m, "set" + m);
          }
          for (f in d) {
            var n = d[f];
            e(g, f, n[0], n[1]);
          }
        },
        NextPOT: function (b) {
          b -= 1;
          b |= b >> 1;
          b |= b >> 2;
          b |= b >> 4;
          b |= b >> 8;
          return 1 + (b |= b >> 16);
        },
        BUILTIN_CLASSID_RE: /^(?:cc|dragonBones|sp|ccsg)\..+/
      }, d = Array(123), e = 0; e < 123; ++e) {
      d[e] = 64;
    }
    for (var f = 0; f < 64; ++f) {
      d["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charCodeAt(f)] = f;
    }
    c.BASE64_VALUES = d;
    c.pushToMap = function (f, a, b, c) {
      var d = f[a];
      if (d) {
        if (Array.isArray(d)) {
          if (c) {
            d.push(d[0]);
            d[0] = b;
          } else {
            d.push(b);
          }
        } else {
          f[a] = c ? [b, d] : [d, b];
        }
      } else {
        f[a] = b;
      }
    };
    c.clampf = function (e, a, f) {
      if (a > f) {
        var g = a;
        a = f;
        f = g;
      }
      if (e < a) {
        return a;
      } else if (e < f) {
        return e;
      } else {
        return f;
      }
    };
    c.clamp01 = function (b) {
      if (b < 0) {
        return 0;
      } else if (b < 1) {
        return b;
      } else {
        return 1;
      }
    };
    c.lerp = function (d, a, b) {
      return d + (a - d) * b;
    };
    c.degreesToRadians = function (b) {
      return b * cc.macro.RAD;
    };
    c.radiansToDegrees = function (b) {
      return b * cc.macro.DEG;
    };
    cc.misc = b.exports = c;
  }, {
    "../platform/js": 183
  }],
  237: [function (e, a) {
    "use strict";

    function b(b) {
      this.i = 0;
      this.array = b;
    }
    var c = b.prototype;
    c.remove = function (c) {
      var a = this.array.indexOf(c);
      if (a >= 0) {
        this.removeAt(a);
      }
    };
    c.removeAt = function (b) {
      this.array.splice(b, 1);
      if (b <= this.i) {
        --this.i;
      }
    };
    c.fastRemove = function (c) {
      var a = this.array.indexOf(c);
      if (a >= 0) {
        this.fastRemoveAt(a);
      }
    };
    c.fastRemoveAt = function (c) {
      var a = this.array;
      a[c] = a[a.length - 1];
      --a.length;
      if (c <= this.i) {
        --this.i;
      }
    };
    c.push = function (b) {
      this.array.push(b);
    };
    a.exports = b;
  }, {}],
  238: [function (e, a, b) {
    "use strict";

    b.__esModule = true;
    b.default = undefined;
    var c = function () {
      function c() {
        this.enabled = false;
        this.count = 0;
        this.maxSize = 1024;
      }
      var a = c.prototype;
      a.get = function () {};
      a.put = function () {};
      a.clear = function () {};
      return c;
    }();
    b.default = c;
    cc.pool = {};
    c.register = function (c, a) {
      cc.pool[c] = a;
    };
    a.exports = b.default;
  }, {}],
  239: [function (c, a) {
    "use strict";

    cc._PrefabInfo = cc.Class({
      name: "cc.PrefabInfo",
      properties: {
        root: null,
        asset: null,
        fileId: "",
        sync: false
      }
    });
    a.exports = {
      syncWithPrefab: function (p) {
        var b = p._prefab;
        if (b.asset) {
          var g = p._objFlags;
          var e = p._parent;
          var i = p._id;
          var j = p._name;
          var k = p._active;
          var m = p._eulerAngles.x;
          var a = p._eulerAngles.y;
          var n = p._eulerAngles.z;
          var c = p._localZOrder;
          var l = p._trs;
          var q = l[0];
          var o = l[1];
          var f = l[2];
          cc.game._isCloning = true;
          b.asset._doInstantiate(p);
          cc.game._isCloning = false;
          p._objFlags = g;
          p._parent = e;
          p._id = i;
          p._prefab = b;
          p._name = j;
          p._active = k;
          p._localZOrder = c;
          (l = p._trs)[0] = q;
          l[1] = o;
          l[2] = f;
          p._eulerAngles.x = m;
          p._eulerAngles.y = a;
          p._eulerAngles.z = n;
        } else {
          p._prefab = null;
        }
      }
    };
  }, {}],
  240: [function (a, b) {
    "use strict";

    var g = a("../../platform/CCMacro");
    var c = a("./perf-counter");
    var d = false;
    var i = 15;
    var j = null;
    var k = null;
    var o = null;
    function r() {
      if (!j) {
        j = {
          fps: {
            desc: "Framerate (FPS)",
            below: 30,
            average: 500
          },
          draws: {
            desc: "Draw Call"
          },
          frame: {
            desc: "Frame time (ms)",
            min: 0,
            max: 50,
            average: 500
          },
          logic: {
            desc: "Game Logic (ms)",
            min: 0,
            max: 50,
            average: 500,
            color: "#080"
          },
          render: {
            desc: "Renderer (ms)",
            min: 0,
            max: 50,
            average: 500,
            color: "#f90"
          },
          mode: {
            desc: cc.game.renderType === cc.game.RENDER_TYPE_WEBGL ? "WebGL" : "Canvas",
            min: 1
          }
        };
        var d = performance.now();
        for (var a in j) {
          j[a]._counter = new c(a, j[a], d);
        }
      }
    }
    function n() {
      if (!k || !k.isValid) {
        (k = new cc.Node("PROFILER-NODE")).x = k.y = 10;
        k.groupIndex = cc.Node.BuiltinGroupIndex.DEBUG;
        cc.Camera._setupDebugCamera();
        k.zIndex = g.MAX_ZINDEX;
        cc.game.addPersistRootNode(k);
        var e = new cc.Node("LEFT-PANEL");
        e.anchorX = e.anchorY = 0;
        var a = e.addComponent(cc.Label);
        a.fontSize = i;
        a.lineHeight = i;
        e.parent = k;
        var b = new cc.Node("RIGHT-PANEL");
        b.anchorX = 1;
        b.anchorY = 0;
        b.x = 200;
        var c = b.addComponent(cc.Label);
        c.horizontalAlign = cc.Label.HorizontalAlign.RIGHT;
        c.fontSize = i;
        c.lineHeight = i;
        b.parent = k;
        if (cc.sys.platform !== cc.sys.BAIDU_GAME_SUB && cc.sys.platform !== cc.sys.WECHAT_GAME_SUB) {
          a.cacheMode = cc.Label.CacheMode.CHAR;
          c.cacheMode = cc.Label.CacheMode.CHAR;
        }
        o = {
          left: a,
          right: c
        };
      }
    }
    function l() {
      n();
      var b = cc.director._lastUpdate;
      j.frame._counter.start(b);
      j.logic._counter.start(b);
    }
    function h() {
      var b = performance.now();
      if (cc.director.isPaused()) {
        j.frame._counter.start(b);
      } else {
        j.logic._counter.end(b);
      }
      j.render._counter.start(b);
    }
    function s() {
      var e = performance.now();
      j.render._counter.end(e);
      j.draws._counter.value = cc.renderer.drawCalls;
      j.frame._counter.end(e);
      j.fps._counter.frame(e);
      var a = "";
      var g = "";
      for (var h in j) {
        var i = j[h];
        i._counter.sample(e);
        a += i.desc + "\n";
        g += i._counter.human() + "\n";
      }
      if (o) {
        o.left.string = a;
        o.right.string = g;
      }
    }
    cc.profiler = b.exports = {
      isShowingStats: function () {
        return d;
      },
      hideStats: function () {
        if (d) {
          if (k) {
            k.active = false;
          }
          cc.director.off(cc.Director.EVENT_BEFORE_UPDATE, l);
          cc.director.off(cc.Director.EVENT_AFTER_UPDATE, h);
          cc.director.off(cc.Director.EVENT_AFTER_DRAW, s);
          d = false;
        }
      },
      showStats: function () {
        if (!d) {
          r();
          if (k) {
            k.active = true;
          }
          cc.director.on(cc.Director.EVENT_BEFORE_UPDATE, l);
          cc.director.on(cc.Director.EVENT_AFTER_UPDATE, h);
          cc.director.on(cc.Director.EVENT_AFTER_DRAW, s);
          d = true;
        }
      }
    };
  }, {
    "../../platform/CCMacro": 167,
    "./perf-counter": 242
  }],
  241: [function (d, a) {
    "use strict";

    var b = cc.Class({
      name: "cc.Counter",
      ctor: function (d, a, b) {
        this._id = d;
        this._opts = a || {};
        this._value = 0;
        this._total = 0;
        this._averageValue = 0;
        this._accumValue = 0;
        this._accumSamples = 0;
        this._accumStart = b;
      },
      properties: {
        value: {
          get: function () {
            return this._value;
          },
          set: function (b) {
            this._value = b;
          }
        }
      },
      _average: function (d, a) {
        if (this._opts.average) {
          this._accumValue += d;
          ++this._accumSamples;
          var b = a;
          if (b - this._accumStart >= this._opts.average) {
            this._averageValue = this._accumValue / this._accumSamples;
            this._accumValue = 0;
            this._accumStart = b;
            this._accumSamples = 0;
          }
        }
      },
      sample: function (b) {
        this._average(this._value, b);
      },
      human: function () {
        var b = this._opts.average ? this._averageValue : this._value;
        return Math.round(b * 100) / 100;
      },
      alarm: function () {
        return this._opts.below && this._value < this._opts.below || this._opts.over && this._value > this._opts.over;
      }
    });
    a.exports = b;
  }, {}],
  242: [function (e, a) {
    "use strict";

    var b = e("./counter");
    var c = cc.Class({
      name: "cc.PerfCounter",
      extends: b,
      ctor: function (d, a, b) {
        this._time = b;
      },
      start: function (b) {
        this._time = b;
      },
      end: function (b) {
        this._value = b - this._time;
        this._average(this._value);
      },
      tick: function () {
        this.end();
        this.start();
      },
      frame: function (d) {
        var a = d;
        var b = a - this._time;
        this._total++;
        if (b > (this._opts.average || 1000)) {
          this._value = this._total * 1000 / b;
          this._total = 0;
          this._time = a;
          this._average(this._value);
        }
      }
    });
    a.exports = c;
  }, {
    "./counter": 241
  }],
  243: [function (a, b) {
    "use strict";

    var c;
    var i = new ((c = a("../platform/js")) && c.__esModule ? c : {
      default: c
    }).default.Pool(2);
    function f(b) {
      this.count = 0;
      this.limit = b;
      this.datas = {};
      this.head = null;
      this.tail = null;
    }
    i.get = function () {
      return this._get() || {
        key: null,
        value: null,
        prev: null,
        next: null
      };
    };
    f.prototype.moveToHead = function (b) {
      b.next = this.head;
      b.prev = null;
      if (this.head !== null) {
        this.head.prev = b;
      }
      this.head = b;
      if (this.tail === null) {
        this.tail = b;
      }
      this.count++;
      this.datas[b.key] = b;
    };
    f.prototype.put = function (e, a) {
      var b = i.get();
      b.key = e;
      b.value = a;
      if (this.count >= this.limit) {
        var c = this.tail;
        delete this.datas[c.key];
        this.count--;
        this.tail = c.prev;
        this.tail.next = null;
        c.prev = null;
        c.next = null;
        i.put(c);
      }
      this.moveToHead(b);
    };
    f.prototype.remove = function (b) {
      if (b.prev !== null) {
        b.prev.next = b.next;
      } else {
        this.head = b.next;
      }
      if (b.next !== null) {
        b.next.prev = b.prev;
      } else {
        this.tail = b.prev;
      }
      delete this.datas[b.key];
      this.count--;
    };
    f.prototype.get = function (c) {
      var a = this.datas[c];
      if (a) {
        this.remove(a);
        this.moveToHead(a);
        return a.value;
      } else {
        return null;
      }
    };
    f.prototype.clear = function () {
      this.count = 0;
      this.datas = {};
      this.head = null;
      this.tail = null;
    };
    f.prototype.has = function (b) {
      return !!this.datas[b];
    };
    f.prototype.delete = function (c) {
      var a = this.datas[c];
      this.remove(a);
    };
    var j = new f(100);
    var e = {
      BASELINE_RATIO: 0.26,
      MIDDLE_RATIO: 0.37,
      BASELINE_OFFSET: 0,
      label_wordRex: undefined,
      label_symbolRex: /^[!,.:;'}\]%\?>\u3001\u2018\u201c\u300b\uff1f\u3002\uff0c\uff01]/,
      label_lastWordRex: undefined,
      label_lastEnglish: undefined,
      label_firstEnglish: undefined,
      highSurrogateRex: /[\uD800-\uDBFF]/,
      lowSurrogateRex: /[\uDC00-\uDFFF]/,
      label_wrapinspection: true,
      __CHINESE_REG: /[\u4E00-\u9FFF\u3400-\u4DFF]/,
      __JAPANESE_REG: /[\u3000-\u303F\u3040-\u309F\u30A0-\u30FF\uFF00-\uFFEF\u4E00-\u9FAF\u2605-\u2606\u2190-\u2195\u203B]/,
      __KOREAN_REG: /[\u1100-\u11FF\u3130-\u318F\uA960-\uA97F\uAC00-\uD7AF\uD7B0-\uD7FF]/,
      __RTL_LANGUAGE_REG: /[\u0600-\u06FF\u0750-\u077F\u0870-\u089F\u08A0-\u08FF\uFB50-\uFDFF\uFE70-\uFEFF]/,
      isUnicodeCJK: function (b) {
        return this.__CHINESE_REG.test(b) || this.__JAPANESE_REG.test(b) || this.__KOREAN_REG.test(b);
      },
      isUnicodeSpace: function (b) {
        return (b = b.charCodeAt(0)) >= 9 && b <= 13 || b === 32 || b === 133 || b === 160 || b === 5760 || b >= 8192 && b <= 8202 || b === 8232 || b === 8233 || b === 8239 || b === 8287 || b === 12288;
      },
      isUnicodeRTL: function (b) {
        return this.__RTL_LANGUAGE_REG.test(b);
      },
      updateLabelRegex: function (b) {
        this.label_wordRex = RegExp("([" + b + "]+|S)");
        this.label_lastWordRex = RegExp("([" + b + "]+|S)$");
        this.label_lastEnglish = RegExp("[" + b + "]+$");
        this.label_firstEnglish = RegExp("^[" + b + "]");
      },
      setRegexLang: function (c) {
        var a = "";
        switch (c) {
          case "ar":
          case "fa":
          case "ur":
            a = "؀-ۿݐ-ݿࡰ-࢟ࢠ-ࣿﭐ-﷿ﹰ-﻿";
            break;
          case "az":
            a = "ÇçƏəĞğİıÖöŞşÜü";
            break;
          case "bg":
          case "mn":
          case "ru":
            a = "А-Яа-яЁё";
            break;
          case "bn":
            a = "ঀ-৿";
            break;
          case "cs":
            a = "ÁáČčĎďÉéĚěÍíŇňÓóŘřŠšŤťÚúŮůÝýŽž";
            break;
          case "da":
          case "no":
            a = "ÆæØøÅå";
            break;
          case "de":
            a = "ÄäÖöÜüẞß";
            break;
          case "el":
            a = "Ͱ-Ͽ";
            break;
          case "et":
            a = "ÄäÖöÜüÕõ";
            break;
          case "fi":
            a = "ÄäÖöÅåŠšŽž";
            break;
          case "fr":
            a = "ÀàÂâÄäÇçÉéÈèÊêËëÎîÏïÔôŒœÙùÛûÜüŸÿ";
            break;
          case "hi":
            a = "ऄ-ॿ";
            break;
          case "hu":
            a = "ÁáÉéÍíÓóÖöŐőÚúÜüŰű";
            break;
          case "hy":
            a = "԰-֏ﬓ-ﬗ";
            break;
          case "it":
            a = "ÀàÉéÈèÌìÍíÎîÒòÓóÙùÚú";
            break;
          case "lo":
            a = "຀-໿";
            break;
          case "lt":
            a = "ĄąČčĘęĖėĮįŠšŲųŪūŽž";
            break;
          case "my":
            a = "က-႟ꩠ-ꩿꧠ-꧿";
            break;
          case "nl":
            a = "ÀàÁáÂâÄäÈèÉéÊêËëÌìÍíÎîÏïÒòÓóÔôÖöÙùÚúÛûÜü";
            break;
          case "pl":
            a = "ĄąĆćĘęŁłŃńÓóŚśŹźŻż";
            break;
          case "ro":
            a = "ĂăÂâÎîȘșȚț";
            break;
          case "sh":
            a = "ČčĆćĐđŠšŽž";
            break;
          case "si":
            a = "඀-෿";
            break;
          case "sk":
            a = "ÁáÄäČčĎďÉéÍíĹĺĽľŇňÓóÔôŔŕŠšŤťÚúÝýŽž";
            break;
          case "sq":
            a = "ÇçËë";
            break;
          case "sr":
            a = "А-Яа-яЁёČčĆćĐđŠšŽžA-Za-zĐđŠšĆćČčŽž";
            break;
          case "sv":
            a = "ÄäÖöÅå";
            break;
          case "th":
            a = "฀-๿";
            break;
          case "tr":
            a = "ÇçĞğİıÖöŞşÜü";
            break;
          case "uk":
            a = "А-ЩЬЮЯҐЄIЇІа-щьюяґєії";
            break;
          case "uz":
            a = "ʻ";
            break;
          case "vi":
            a = "ÂâĂăĐđÊêÔôƠơƯư";
            break;
          default:
            a = "ÁáÂâÃãÀàÉéÊêÍíÓóÔôÕõÚúÜüÑñÇç";
        }
        this.updateLabelRegex("a-zA-Z0-9" + a);
      },
      safeMeasureText: function (g, b, c) {
        var d = (c || g.font) + "🎮" + b;
        var e = j.get(d);
        if (e !== null) {
          return e;
        }
        var f = g.measureText(b);
        var h = f && f.width || 0;
        j.put(d, h);
        return h;
      },
      _safeSubstring: function (a, b, c) {
        var d = b;
        var i = c;
        var j = a[b];
        if (this.lowSurrogateRex.test(j)) {
          d--;
        }
        if (c !== undefined) {
          if (c - 1 !== b) {
            var g = a[c - 1];
            if (this.highSurrogateRex.test(g)) {
              i--;
            }
          } else if (this.highSurrogateRex.test(j)) {
            i++;
          }
        }
        return a.substring(d, i);
      },
      fragmentText: function (a, b, c, d) {
        var e = [];
        if (a.length === 0 || c < 0) {
          e.push("");
          return e;
        }
        for (var f = a; b > c && f.length > 1;) {
          for (var h = f.length * (c / b) | 0, i = this._safeSubstring(f, h), j = b - d(i), k = i, l = 0, o = 0; j > c && o++ < 10;) {
            h *= c / j;
            h |= 0;
            j = b - d(i = this._safeSubstring(f, h));
          }
          for (o = 0; j <= c && o++ < 10;) {
            if (i) {
              var s = this.label_wordRex.exec(i);
              l = s ? s[0].length : 1;
              k = i;
            }
            h += l;
            j = b - d(i = this._safeSubstring(f, h));
          }
          if ((h -= l) == 0) {
            h = 1;
            k = this._safeSubstring(f, 1);
          } else if (h === 1 && this.highSurrogateRex.test(f[0])) {
            h = 2;
            k = this._safeSubstring(f, 2);
          }
          var u;
          var z = this._safeSubstring(f, 0, h);
          if (this.label_wrapinspection && this.label_symbolRex.test(k || i)) {
            if ((h -= (u = this.label_lastWordRex.exec(z)) ? u[0].length : 0) == 0) {
              h = 1;
            }
            k = this._safeSubstring(f, h);
            z = this._safeSubstring(f, 0, h);
          }
          if (this.label_firstEnglish.test(k) && (u = this.label_lastEnglish.exec(z)) && z !== u[0]) {
            h -= u[0].length;
            k = this._safeSubstring(f, h);
            z = this._safeSubstring(f, 0, h);
          }
          if (e.length === 0) {
            e.push(z);
          } else if ((z = z.trimLeft()).length > 0) {
            e.push(z);
          }
          b = d(f = k || i);
        }
        if (e.length === 0) {
          e.push(f);
        } else if ((f = f.trimLeft()).length > 0) {
          e.push(f);
        }
        return e;
      }
    };
    e.updateLabelRegex("a-zA-Z0-9ÁáÂâÃãÀàÉéÊêÍíÓóÔôÕõÚúÜüÑñÇç");
    cc.textUtils = b.exports = e;
  }, {
    "../platform/js": 183
  }],
  244: [function (e, a) {
    "use strict";

    var f = e("../assets/CCTexture2D");
    var b = {
      loadImage: function (e, f, b) {
        var a = cc.assetManager.assets.get(e);
        if (a) {
          if (a.loaded) {
            if (f) {
              f.call(b, null, a);
            }
            return a;
          } else {
            a.once("load", function () {
              if (f) {
                f.call(b, null, a);
              }
            }, b);
            return a;
          }
        }
        cc.assetManager.loadRemote(e, function (c, a) {
          if (f) {
            f.call(b, c, a);
          }
        });
      },
      cacheImage: function (c, a) {
        if (c && a) {
          var b = new f();
          b.initWithElement(a);
          cc.assetManager.assets.add(c, b);
          return b;
        }
      },
      postLoadTexture: function (c, a) {
        if (c.loaded) {
          if (a) {
            a();
          }
        } else if (c.nativeUrl) {
          cc.assetManager.postLoadNative(c, a);
        } else if (a) {
          a();
        }
      }
    };
    a.exports = b;
  }, {
    "../assets/CCTexture2D": 72
  }],
  245: [function (e, a) {
    "use strict";

    var b = e("./node-unit");
    var c = e("./node-mem-pool");
    a.exports = {
      NodeMemPool: new c(b)
    };
  }, {
    "./node-mem-pool": 247,
    "./node-unit": 248
  }],
  246: [function (e, a) {
    "use strict";

    function b(b) {
      this._unitClass = b;
      this._pool = [];
      this._findOrder = [];
    }
    var c = b.prototype;
    c._initNative = function () {
      this._nativeMemPool = new renderer.MemPool();
    };
    c._buildUnit = function (b) {
      return new this._unitClass(b, this);
    };
    c._destroyUnit = function (e) {
      this._pool[e] = null;
      for (var a = 0, f = this._findOrder.length; a < f; a++) {
        var c = this._findOrder[a];
        if (c && c.unitID == e) {
          this._findOrder.splice(a, 1);
          break;
        }
      }
    };
    c._findUnitID = function () {
      for (var c = 0, d = this._pool; d[c];) {
        c++;
      }
      return c;
    };
    c.pop = function () {
      for (var e = null, j = 0, k = this._findOrder, d = this._pool, f = k.length; j < f; j++) {
        var g = k[j];
        if (g && g.hasSpace()) {
          e = g;
          break;
        }
      }
      if (!e) {
        var l = this._findUnitID();
        e = this._buildUnit(l);
        d[l] = e;
        k.push(e);
        j = k.length - 1;
      }
      var i = k[0];
      if (i !== e) {
        k[0] = e;
        k[j] = i;
      }
      return e.pop();
    };
    c.push = function (c) {
      var a = this._pool[c.unitID];
      a.push(c.index);
      if (this._findOrder.length > 1 && a.isAllFree()) {
        this._destroyUnit(c.unitID);
      }
      return a;
    };
    a.exports = b;
  }, {}],
  247: [function (g, a) {
    "use strict";

    var b;
    var h = g("./mem-pool");
    function d(b) {
      h.call(this, b);
    }
    (b = function () {}).prototype = h.prototype;
    var e = d.prototype = new b();
    e._initNative = function () {
      this._nativeMemPool = new renderer.NodeMemPool();
    };
    e._destroyUnit = function (b) {
      h.prototype._destroyUnit.call(this, b);
    };
    a.exports = d;
  }, {
    "./mem-pool": 246
  }],
  248: [function (c, b) {
    "use strict";

    var d;
    var l = c("../../value-types/utils");
    Uint32Array;
    var f = l.FLOAT_BYTES * 10;
    var g = l.FLOAT_BYTES * 16;
    var h = l.FLOAT_BYTES * 16;
    Uint32Array;
    Uint32Array;
    Int32Array;
    Uint8Array;
    Uint8Array;
    Uint32Array;
    l.FLOAT_BYTES;
    var j = c("./unit-base");
    function a(a, b) {
      j.call(this, a, b);
      var c = this._contentNum;
      this.trsList = new l.FLOAT_ARRAY_TYPE(c * 10);
      this.localMatList = new l.FLOAT_ARRAY_TYPE(c * 16);
      this.worldMatList = new l.FLOAT_ARRAY_TYPE(c * 16);
      for (var d = 0; d < c; d++) {
        var e = this._spacesData[d];
        e.trs = new l.FLOAT_ARRAY_TYPE(this.trsList.buffer, d * f, 10);
        e.localMat = new l.FLOAT_ARRAY_TYPE(this.localMatList.buffer, d * g, 16);
        e.worldMat = new l.FLOAT_ARRAY_TYPE(this.worldMatList.buffer, d * h, 16);
      }
    }
    (d = function () {}).prototype = j.prototype;
    a.prototype = new d();
    b.exports = a;
  }, {
    "../../value-types/utils": 258,
    "./unit-base": 249
  }],
  249: [function (e, a) {
    "use strict";

    function b(f, a, b) {
      b = b || 128;
      this.unitID = f;
      this._memPool = a;
      this._data = new Uint16Array(2);
      this._data[0] = 0;
      this._data[1] = 0;
      this._contentNum = b;
      this._signData = new Uint16Array(this._contentNum * 2);
      this._spacesData = [];
      for (var g = 0; g < b; g++) {
        var h = g * 2;
        this._signData[h + 0] = g + 1;
        this._signData[h + 1] = 0;
        this._spacesData[g] = {
          index: g,
          unitID: f
        };
      }
      this._signData[(b - 1) * 2] = 65535;
    }
    var c = b.prototype;
    c.hasSpace = function () {
      return this._data[0] !== 65535;
    };
    c.isAllFree = function () {
      return this._data[1] == 0;
    };
    c.pop = function () {
      var e = this._data[0];
      if (e === 65535) {
        return null;
      }
      var a = e;
      var b = a * 2;
      var c = this._spacesData[a];
      this._signData[b + 1] = 1;
      this._data[0] = this._signData[b + 0];
      this._data[1]++;
      return c;
    };
    c.push = function (c) {
      var a = c * 2;
      this._signData[a + 1] = 0;
      this._signData[a + 0] = this._data[0];
      this._data[0] = c;
      this._data[1]--;
    };
    c.dump = function () {
      for (var d = this._data[0]; d != 65535;) {
        d = this._signData[d * 2 + 0];
      }
      for (var e = this._contentNum, b = 0; b < e; b++) {
        this._signData[b * 2 + 1];
      }
      this._data[1];
      this._contentNum;
    };
    a.exports = b;
  }, {}],
  250: [function (c, b, d) {
    "use strict";

    d.__esModule = true;
    d.default = undefined;
    var e = h(c("./value-type"));
    var f = h(c("../platform/CCClass"));
    var g = h(c("../utils/misc"));
    function h(b) {
      if (b && b.__esModule) {
        return b;
      } else {
        return {
          default: b
        };
      }
    }
    function i(e, a) {
      for (var b = 0; b < a.length; b++) {
        var f = a[b];
        f.enumerable = f.enumerable || false;
        f.configurable = true;
        if ("value" in f) {
          f.writable = true;
        }
        Object.defineProperty(e, f.key, f);
      }
    }
    function j(c, a) {
      return (j = Object.setPrototypeOf || function (c, a) {
        c.__proto__ = a;
        return c;
      })(c, a);
    }
    var l = function (e) {
      var a;
      var b;
      function k(b, h, i, j) {
        var k;
        if (b === undefined) {
          b = 0;
        }
        if (h === undefined) {
          h = 0;
        }
        if (i === undefined) {
          i = 0;
        }
        if (j === undefined) {
          j = 255;
        }
        (k = e.call(this) || this)._val = 0;
        if (typeof b == "object") {
          h = b.g;
          i = b.b;
          j = b.a;
          b = b.r;
        }
        k._val = (j << 24 >>> 0) + (i << 16) + (h << 8) + (b | 0);
        return k;
      }
      b = e;
      (a = k).prototype = Object.create(b.prototype);
      a.prototype.constructor = a;
      j(a, b);
      k.copy = function (c, a) {
        c.r = a.r;
        c.g = a.g;
        c.b = a.b;
        c.a = a.a;
        return c;
      };
      k.clone = function (b) {
        return new k(b.r, b.g, b.b, b.a);
      };
      k.set = function (e, a, g, h, i) {
        if (a === undefined) {
          a = 255;
        }
        if (g === undefined) {
          g = 255;
        }
        if (h === undefined) {
          h = 255;
        }
        if (i === undefined) {
          i = 255;
        }
        e.r = a;
        e.g = g;
        e.b = h;
        e.a = i;
        return e;
      };
      k.fromHex = function (g, a) {
        var b = a >> 24 & 255;
        var c = a >> 16 & 255;
        var d = a >> 8 & 255;
        var e = a & 255;
        g.r = b;
        g.g = c;
        g.b = d;
        g.a = e;
        return g;
      };
      k.fromHEX = function (c, a) {
        a = a.indexOf("#") === 0 ? a.substring(1) : a;
        c.r = parseInt(a.substr(0, 2), 16) || 0;
        c.g = parseInt(a.substr(2, 2), 16) || 0;
        c.b = parseInt(a.substr(4, 2), 16) || 0;
        c.a = parseInt(a.substr(6, 2), 16) || 255;
        c._val = (c.a << 24 >>> 0) + (c.b << 16) + (c.g << 8) + c.r;
        return c;
      };
      k.add = function (d, a, b) {
        d.r = a.r + b.r;
        d.g = a.g + b.g;
        d.b = a.b + b.b;
        d.a = a.a + b.a;
        return d;
      };
      k.subtract = function (d, a, b) {
        d.r = a.r - b.r;
        d.g = a.g - b.g;
        d.b = a.b - b.b;
        d.a = a.a - b.a;
        return d;
      };
      k.multiply = function (d, a, b) {
        d.r = a.r * b.r;
        d.g = a.g * b.g;
        d.b = a.b * b.b;
        d.a = a.a * b.a;
        return d;
      };
      k.divide = function (d, a, b) {
        d.r = a.r / b.r;
        d.g = a.g / b.g;
        d.b = a.b / b.b;
        d.a = a.a / b.a;
        return d;
      };
      k.scale = function (d, a, b) {
        d.r = a.r * b;
        d.g = a.g * b;
        d.b = a.b * b;
        d.a = a.a * b;
        return d;
      };
      k.lerp = function (i, b, c, d) {
        var e = b.r;
        var f = b.g;
        var g = b.b;
        var h = b.a;
        i.r = e + d * (c.r - e);
        i.g = f + d * (c.g - f);
        i.b = g + d * (c.b - g);
        i.a = h + d * (c.a - h);
        return i;
      };
      k.toArray = function (e, a, b) {
        if (b === undefined) {
          b = 0;
        }
        var f = a instanceof k || a.a > 1 ? 1 / 255 : 1;
        e[b + 0] = a.r * f;
        e[b + 1] = a.g * f;
        e[b + 2] = a.b * f;
        e[b + 3] = a.a * f;
        return e;
      };
      k.fromArray = function (d, a, b) {
        if (b === undefined) {
          b = 0;
        }
        a.r = d[b + 0] * 255;
        a.g = d[b + 1] * 255;
        a.b = d[b + 2] * 255;
        a.a = d[b + 3] * 255;
        return a;
      };
      k.premultiplyAlpha = function (d, a) {
        var b = a.a / 255;
        d.r = a.r * b;
        d.g = a.g * b;
        d.b = a.b * b;
        d._fastSetA(a.a);
        return d;
      };
      var f;
      var h;
      var l;
      var p = k.prototype;
      p.clone = function () {
        var b = new k();
        b._val = this._val;
        return b;
      };
      p.equals = function (b) {
        return b && this._val === b._val;
      };
      p.lerp = function (f, b, c) {
        c = c || new k();
        var i = this.r;
        var e = this.g;
        var g = this.b;
        var h = this.a;
        c.r = i + (f.r - i) * b;
        c.g = e + (f.g - e) * b;
        c.b = g + (f.b - g) * b;
        c.a = h + (f.a - h) * b;
        return c;
      };
      p.toString = function () {
        return "rgba(" + this.r.toFixed() + ", " + this.g.toFixed() + ", " + this.b.toFixed() + ", " + this.a.toFixed() + ")";
      };
      p.getR = function () {
        return this._val & 255;
      };
      p.setR = function (b) {
        b = ~~g.default.clampf(b, 0, 255);
        this._val = (this._val & 4294967040 | b) >>> 0;
        return this;
      };
      p.getG = function () {
        return (this._val & 65280) >> 8;
      };
      p.setG = function (b) {
        b = ~~g.default.clampf(b, 0, 255);
        this._val = (this._val & 4294902015 | b << 8) >>> 0;
        return this;
      };
      p.getB = function () {
        return (this._val & 16711680) >> 16;
      };
      p.setB = function (b) {
        b = ~~g.default.clampf(b, 0, 255);
        this._val = (this._val & 4278255615 | b << 16) >>> 0;
        return this;
      };
      p.getA = function () {
        return (this._val & 4278190080) >>> 24;
      };
      p.setA = function (b) {
        b = ~~g.default.clampf(b, 0, 255);
        this._val = (this._val & 16777215 | b << 24) >>> 0;
        return this;
      };
      p.toCSS = function (b) {
        if (b && b !== "rgba") {
          if (b === "rgb") {
            return "rgb(" + this.r + "," + this.g + "," + this.b + ")";
          } else {
            return "#" + this.toHEX(b);
          }
        } else {
          return "rgba(" + this.r + "," + this.g + "," + this.b + "," + (this.a / 255).toFixed(2) + ")";
        }
      };
      p.fromHEX = function (f) {
        f = f.indexOf("#") === 0 ? f.substring(1) : f;
        var g = parseInt(f.substr(0, 2), 16) || 0;
        var b = parseInt(f.substr(2, 2), 16) || 0;
        var c = parseInt(f.substr(4, 2), 16) || 0;
        var d = parseInt(f.substr(6, 2), 16) || 255;
        this._val = (d << 24 >>> 0) + (c << 16) + (b << 8) + g;
        return this;
      };
      p.toHEX = function (c) {
        var a = [(this.r < 16 ? "0" : "") + this.r.toString(16), (this.g < 16 ? "0" : "") + this.g.toString(16), (this.b < 16 ? "0" : "") + this.b.toString(16)];
        if (c === "#rgb") {
          a[0] = a[0][0];
          a[1] = a[1][0];
          a[2] = a[2][0];
        } else if (c === "#rrggbbaa") {
          a.push((this.a < 16 ? "0" : "") + this.a.toString(16));
        }
        return a.join("");
      };
      p.toRGBValue = function () {
        return this._val & 16777215;
      };
      p.fromHSV = function (h, m, d) {
        var e;
        var n;
        var o;
        if (m === 0) {
          e = n = o = d;
        } else if (d === 0) {
          e = n = o = 0;
        } else {
          if (h === 1) {
            h = 0;
          }
          var p = Math.floor(h *= 6);
          var j = h - p;
          var a = d * (1 - m);
          var k = d * (1 - m * j);
          var c = d * (1 - m * (1 - j));
          switch (p) {
            case 0:
              e = d;
              n = c;
              o = a;
              break;
            case 1:
              e = k;
              n = d;
              o = a;
              break;
            case 2:
              e = a;
              n = d;
              o = c;
              break;
            case 3:
              e = a;
              n = k;
              o = d;
              break;
            case 4:
              e = c;
              n = a;
              o = d;
              break;
            case 5:
              e = d;
              n = a;
              o = k;
          }
        }
        e *= 255;
        n *= 255;
        o *= 255;
        this._val = (this.a << 24 >>> 0) + (o << 16) + (n << 8) + (e | 0);
        return this;
      };
      p.toHSV = function () {
        var a = this.r / 255;
        var b = this.g / 255;
        var c = this.b / 255;
        var d = {
          h: 0,
          s: 0,
          v: 0
        };
        var e = Math.max(a, b, c);
        var f = Math.min(a, b, c);
        var g = 0;
        d.v = e;
        d.s = e ? (e - f) / e : 0;
        if (d.s) {
          g = e - f;
          d.h = a === e ? (b - c) / g : b === e ? 2 + (c - a) / g : 4 + (a - b) / g;
          d.h /= 6;
          if (d.h < 0) {
            d.h += 1;
          }
        } else {
          d.h = 0;
        }
        return d;
      };
      p.set = function (b) {
        if (b._val) {
          this._val = b._val;
        } else {
          this.r = b.r;
          this.g = b.g;
          this.b = b.b;
          this.a = b.a;
        }
        return this;
      };
      p._fastSetA = function (b) {
        this._val = (this._val & 16777215 | b << 24) >>> 0;
      };
      p.multiply = function (f) {
        var a = (this._val & 255) * f.r >> 8;
        var b = (this._val & 65280) * f.g >> 8;
        var c = (this._val & 16711680) * f.b >> 8;
        var d = ((this._val & 4278190080) >>> 8) * f.a;
        this._val = d & 4278190080 | c & 16711680 | b & 65280 | a & 255;
        return this;
      };
      f = k;
      l = [{
        key: "WHITE",
        get: function () {
          return new k(255, 255, 255, 255);
        }
      }, {
        key: "BLACK",
        get: function () {
          return new k(0, 0, 0, 255);
        }
      }, {
        key: "TRANSPARENT",
        get: function () {
          return new k(0, 0, 0, 0);
        }
      }, {
        key: "GRAY",
        get: function () {
          return new k(127.5, 127.5, 127.5);
        }
      }, {
        key: "RED",
        get: function () {
          return new k(255, 0, 0);
        }
      }, {
        key: "GREEN",
        get: function () {
          return new k(0, 255, 0);
        }
      }, {
        key: "BLUE",
        get: function () {
          return new k(0, 0, 255);
        }
      }, {
        key: "YELLOW",
        get: function () {
          return new k(255, 235, 4);
        }
      }, {
        key: "ORANGE",
        get: function () {
          return new k(255, 127, 0);
        }
      }, {
        key: "CYAN",
        get: function () {
          return new k(0, 255, 255);
        }
      }, {
        key: "MAGENTA",
        get: function () {
          return new k(255, 0, 255);
        }
      }];
      if (h = [{
        key: "r",
        get: function () {
          return this.getR();
        },
        set: function (b) {
          this.setR(b);
        }
      }, {
        key: "g",
        get: function () {
          return this.getG();
        },
        set: function (b) {
          this.setG(b);
        }
      }, {
        key: "b",
        get: function () {
          return this.getB();
        },
        set: function (b) {
          this.setB(b);
        }
      }, {
        key: "a",
        get: function () {
          return this.getA();
        },
        set: function (b) {
          this.setA(b);
        }
      }]) {
        i(f.prototype, h);
      }
      if (l) {
        i(f, l);
      }
      Object.defineProperty(f, "prototype", {
        writable: false
      });
      return k;
    }(e.default);
    d.default = l;
    l.div = l.divide;
    l.sub = l.subtract;
    l.mul = l.multiply;
    l.WHITE_R = l.WHITE;
    l.BLACK_R = l.BLACK;
    l.TRANSPARENT_R = l.TRANSPARENT;
    l.GRAY_R = l.GRAY;
    l.RED_R = l.RED;
    l.GREEN_R = l.GREEN;
    l.BLUE_R = l.BLUE;
    l.YELLOW_R = l.YELLOW;
    l.ORANGE_R = l.ORANGE;
    l.CYAN_R = l.CYAN;
    l.MAGENTA_R = l.MAGENTA;
    f.default.fastDefine("cc.Color", l, {
      r: 0,
      g: 0,
      b: 0,
      a: 255
    });
    cc.Color = l;
    cc.color = function (a, b, c, d) {
      if (typeof a == "string") {
        return new l().fromHEX(a);
      } else if (typeof a == "object") {
        return new l(a.r, a.g, a.b, a.a);
      } else {
        return new l(a, b, c, d);
      }
    };
    b.exports = d.default;
  }, {
    "../platform/CCClass": 162,
    "../utils/misc": 236,
    "./value-type": 259
  }],
  251: [function (p, b, g) {
    "use strict";

    g.__esModule = true;
    var e = {
      Vec2: true,
      Vec3: true,
      Vec4: true,
      Mat4: true,
      Mat3: true,
      Rect: true,
      Size: true,
      Color: true,
      Quat: true,
      Trs: true
    };
    g.Vec4 = g.Vec3 = g.Vec2 = g.Trs = g.Size = g.Rect = g.Quat = g.Mat4 = g.Mat3 = g.Color = undefined;
    var i = d(p("./vec2"));
    g.Vec2 = i.default;
    var j = d(p("./vec3"));
    g.Vec3 = j.default;
    var k = d(p("./vec4"));
    g.Vec4 = k.default;
    var m = d(p("./mat4"));
    g.Mat4 = m.default;
    var a = d(p("./mat3"));
    g.Mat3 = a.default;
    var n = d(p("./rect"));
    g.Rect = n.default;
    var c = d(p("./size"));
    g.Size = c.default;
    var l = d(p("./color"));
    g.Color = l.default;
    var h = d(p("./quat"));
    g.Quat = h.default;
    var o = d(p("./trs"));
    g.Trs = o.default;
    var f = p("./utils");
    function d(b) {
      if (b && b.__esModule) {
        return b;
      } else {
        return {
          default: b
        };
      }
    }
    Object.keys(f).forEach(function (b) {
      if (b !== "default" && b !== "__esModule") {
        if (!(Object.prototype.hasOwnProperty.call(e, b) || b in g && g[b] === f[b])) {
          g[b] = f[b];
        }
      }
    });
    cc.math = b.exports;
  }, {
    "./color": 250,
    "./mat3": 252,
    "./mat4": 253,
    "./quat": 254,
    "./rect": 255,
    "./size": 256,
    "./trs": 257,
    "./utils": 258,
    "./vec2": 260,
    "./vec3": 261,
    "./vec4": 262
  }],
  252: [function (a, b, c) {
    "use strict";

    c.__esModule = true;
    c.default = undefined;
    var d;
    var x = a("../value-types/utils");
    var i = (d = a("./vec3")) && d.__esModule ? d : {
      default: d
    };
    var f = function () {
      function e(a, c, e, h, i, j, l, n, o) {
        if (a === undefined) {
          a = 1;
        }
        if (c === undefined) {
          c = 0;
        }
        if (e === undefined) {
          e = 0;
        }
        if (h === undefined) {
          h = 0;
        }
        if (i === undefined) {
          i = 1;
        }
        if (j === undefined) {
          j = 0;
        }
        if (l === undefined) {
          l = 0;
        }
        if (n === undefined) {
          n = 0;
        }
        if (o === undefined) {
          o = 1;
        }
        this.m = undefined;
        if (a instanceof x.FLOAT_ARRAY_TYPE) {
          this.m = a;
        } else {
          this.m = new x.FLOAT_ARRAY_TYPE(9);
          var s = this.m;
          s[0] = a;
          s[1] = c;
          s[2] = e;
          s[3] = h;
          s[4] = i;
          s[5] = j;
          s[6] = l;
          s[7] = n;
          s[8] = o;
        }
      }
      e.create = function (a, b, c, i, l, n, o, r, s) {
        if (a === undefined) {
          a = 1;
        }
        if (b === undefined) {
          b = 0;
        }
        if (c === undefined) {
          c = 0;
        }
        if (i === undefined) {
          i = 0;
        }
        if (l === undefined) {
          l = 1;
        }
        if (n === undefined) {
          n = 0;
        }
        if (o === undefined) {
          o = 0;
        }
        if (r === undefined) {
          r = 0;
        }
        if (s === undefined) {
          s = 1;
        }
        return new e(a, b, c, i, l, n, o, r, s);
      };
      e.clone = function (b) {
        var a = b.m;
        return new e(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);
      };
      e.copy = function (c, a) {
        c.m.set(a.m);
        return c;
      };
      e.set = function (h, b, d, e, f, g, i, j, a, k) {
        var c = h.m;
        c[0] = b;
        c[1] = d;
        c[2] = e;
        c[3] = f;
        c[4] = g;
        c[5] = i;
        c[6] = j;
        c[7] = a;
        c[8] = k;
        return h;
      };
      e.identity = function (c) {
        var a = c.m;
        a[0] = 1;
        a[1] = 0;
        a[2] = 0;
        a[3] = 0;
        a[4] = 1;
        a[5] = 0;
        a[6] = 0;
        a[7] = 0;
        a[8] = 1;
        return c;
      };
      e.transpose = function (a, b) {
        var c = b.m;
        var d = a.m;
        if (a === b) {
          var e = c[1];
          var f = c[2];
          var g = c[5];
          d[1] = c[3];
          d[2] = c[6];
          d[3] = e;
          d[5] = c[7];
          d[6] = f;
          d[7] = g;
        } else {
          d[0] = c[0];
          d[1] = c[3];
          d[2] = c[6];
          d[3] = c[1];
          d[4] = c[4];
          d[5] = c[7];
          d[6] = c[2];
          d[7] = c[5];
          d[8] = c[8];
        }
        return a;
      };
      e.invert = function (r, b) {
        var g = b.m;
        var e = r.m;
        var i = g[0];
        var j = g[1];
        var k = g[2];
        var m = g[3];
        var a = g[4];
        var n = g[5];
        var c = g[6];
        var l = g[7];
        var h = g[8];
        var o = h * a - n * l;
        var f = -h * m + n * c;
        var d = l * m - a * c;
        var q = i * o + j * f + k * d;
        if (q) {
          q = 1 / q;
          e[0] = o * q;
          e[1] = (-h * j + k * l) * q;
          e[2] = (n * j - k * a) * q;
          e[3] = f * q;
          e[4] = (h * i - k * c) * q;
          e[5] = (-n * i + k * m) * q;
          e[6] = d * q;
          e[7] = (-l * i + j * c) * q;
          e[8] = (a * i - j * m) * q;
          return r;
        } else {
          return r;
        }
      };
      e.adjoint = function (f, b) {
        var d = b.m;
        var e = f.m;
        var g = d[0];
        var i = d[1];
        var j = d[2];
        var k = d[3];
        var a = d[4];
        var m = d[5];
        var c = d[6];
        var l = d[7];
        var h = d[8];
        e[0] = a * h - m * l;
        e[1] = j * l - i * h;
        e[2] = i * m - j * a;
        e[3] = m * c - k * h;
        e[4] = g * h - j * c;
        e[5] = j * k - g * m;
        e[6] = k * l - a * c;
        e[7] = i * c - g * l;
        e[8] = g * a - i * k;
        return f;
      };
      e.determinant = function (h) {
        var b = h.m;
        var d = b[0];
        var e = b[1];
        var f = b[2];
        var g = b[3];
        var i = b[4];
        var j = b[5];
        var a = b[6];
        var k = b[7];
        var c = b[8];
        return d * (c * i - j * k) + e * (-c * g + j * a) + f * (k * g - i * a);
      };
      e.multiply = function (x, b, j) {
        var e = b.m;
        var i = j.m;
        var k = x.m;
        var n = e[0];
        var q = e[1];
        var a = e[2];
        var o = e[3];
        var c = e[4];
        var l = e[5];
        var h = e[6];
        var r = e[7];
        var f = e[8];
        var d = i[0];
        var s = i[1];
        var p = i[2];
        var t = i[3];
        var g = i[4];
        var m = i[5];
        var u = i[6];
        var v = i[7];
        var w = i[8];
        k[0] = d * n + s * o + p * h;
        k[1] = d * q + s * c + p * r;
        k[2] = d * a + s * l + p * f;
        k[3] = t * n + g * o + m * h;
        k[4] = t * q + g * c + m * r;
        k[5] = t * a + g * l + m * f;
        k[6] = u * n + v * o + w * h;
        k[7] = u * q + v * c + w * r;
        k[8] = u * a + v * l + w * f;
        return x;
      };
      e.multiplyMat4 = function (x, b, j) {
        var e = b.m;
        var i = j.m;
        var k = x.m;
        var n = e[0];
        var q = e[1];
        var a = e[2];
        var o = e[3];
        var c = e[4];
        var l = e[5];
        var h = e[6];
        var r = e[7];
        var f = e[8];
        var d = i[0];
        var s = i[1];
        var p = i[2];
        var t = i[4];
        var g = i[5];
        var m = i[6];
        var u = i[8];
        var v = i[9];
        var w = i[10];
        k[0] = d * n + s * o + p * h;
        k[1] = d * q + s * c + p * r;
        k[2] = d * a + s * l + p * f;
        k[3] = t * n + g * o + m * h;
        k[4] = t * q + g * c + m * r;
        k[5] = t * a + g * l + m * f;
        k[6] = u * n + v * o + w * h;
        k[7] = u * q + v * c + w * r;
        k[8] = u * a + v * l + w * f;
        return x;
      };
      e.translate = function (p, b, g) {
        var e = b.m;
        var i = p.m;
        var j = e[0];
        var k = e[1];
        var m = e[2];
        var a = e[3];
        var n = e[4];
        var c = e[5];
        var l = e[6];
        var h = e[7];
        var o = e[8];
        var f = g.x;
        var d = g.y;
        i[0] = j;
        i[1] = k;
        i[2] = m;
        i[3] = a;
        i[4] = n;
        i[5] = c;
        i[6] = f * j + d * a + l;
        i[7] = f * k + d * n + h;
        i[8] = f * m + d * c + o;
        return p;
      };
      e.rotate = function (p, b, g) {
        var e = b.m;
        var i = p.m;
        var j = e[0];
        var k = e[1];
        var m = e[2];
        var a = e[3];
        var n = e[4];
        var c = e[5];
        var l = e[6];
        var h = e[7];
        var o = e[8];
        var f = Math.sin(g);
        var d = Math.cos(g);
        i[0] = d * j + f * a;
        i[1] = d * k + f * n;
        i[2] = d * m + f * c;
        i[3] = d * a - f * j;
        i[4] = d * n - f * k;
        i[5] = d * c - f * m;
        i[6] = l;
        i[7] = h;
        i[8] = o;
        return p;
      };
      e.scale = function (a, b, c) {
        var d = c.x;
        var e = c.y;
        var f = b.m;
        var g = a.m;
        g[0] = d * f[0];
        g[1] = d * f[1];
        g[2] = d * f[2];
        g[3] = e * f[3];
        g[4] = e * f[4];
        g[5] = e * f[5];
        g[6] = f[6];
        g[7] = f[7];
        g[8] = f[8];
        return a;
      };
      e.fromMat4 = function (e, a) {
        var b = a.m;
        var c = e.m;
        c[0] = b[0];
        c[1] = b[1];
        c[2] = b[2];
        c[3] = b[4];
        c[4] = b[5];
        c[5] = b[6];
        c[6] = b[8];
        c[7] = b[9];
        c[8] = b[10];
        return e;
      };
      e.fromTranslation = function (d, a) {
        var b = d.m;
        b[0] = 1;
        b[1] = 0;
        b[2] = 0;
        b[3] = 0;
        b[4] = 1;
        b[5] = 0;
        b[6] = a.x;
        b[7] = a.y;
        b[8] = 1;
        return d;
      };
      e.fromRotation = function (f, a) {
        var b = Math.sin(a);
        var c = Math.cos(a);
        var d = f.m;
        d[0] = c;
        d[1] = b;
        d[2] = 0;
        d[3] = -b;
        d[4] = c;
        d[5] = 0;
        d[6] = 0;
        d[7] = 0;
        d[8] = 1;
        return f;
      };
      e.fromScaling = function (d, a) {
        var b = d.m;
        b[0] = a.x;
        b[1] = 0;
        b[2] = 0;
        b[3] = 0;
        b[4] = a.y;
        b[5] = 0;
        b[6] = 0;
        b[7] = 0;
        b[8] = 1;
        return d;
      };
      e.fromQuat = function (m, b) {
        var j = m.m;
        var e = b.x;
        var i = b.y;
        var k = b.z;
        var n = b.w;
        var q = e + e;
        var a = i + i;
        var o = k + k;
        var c = e * q;
        var l = i * q;
        var h = i * a;
        var r = k * q;
        var f = k * a;
        var d = k * o;
        var s = n * q;
        var p = n * a;
        var t = n * o;
        j[0] = 1 - h - d;
        j[3] = l - t;
        j[6] = r + p;
        j[1] = l + t;
        j[4] = 1 - c - d;
        j[7] = f - s;
        j[2] = r - p;
        j[5] = f + s;
        j[8] = 1 - c - h;
        return m;
      };
      e.fromViewUp = function (a, b, c) {
        var f;
        var g;
        var d;
        return (f = new i.default(0, 1, 0), g = new i.default(), d = new i.default(), function (b, a, c) {
          if (i.default.lengthSqr(a) < x.EPSILON * x.EPSILON) {
            e.identity(b);
            return b;
          } else {
            c = c || f;
            i.default.normalize(g, i.default.cross(g, c, a));
            if (i.default.lengthSqr(g) < x.EPSILON * x.EPSILON) {
              e.identity(b);
              return b;
            } else {
              i.default.cross(d, a, g);
              e.set(b, g.x, g.y, g.z, d.x, d.y, d.z, a.x, a.y, a.z);
              return b;
            }
          }
        })(a, b, c);
      };
      e.normalFromMat4 = function (H, j) {
        var k = j.m;
        var e = H.m;
        var i = k[0];
        var n = k[1];
        var q = k[2];
        var r = k[3];
        var a = k[4];
        var o = k[5];
        var c = k[6];
        var l = k[7];
        var h = k[8];
        var s = k[9];
        var f = k[10];
        var d = k[11];
        var t = k[12];
        var p = k[13];
        var u = k[14];
        var g = k[15];
        var m = i * o - n * a;
        var v = i * c - q * a;
        var y = i * l - r * a;
        var z = n * c - q * o;
        var A = n * l - r * o;
        var x = q * l - r * c;
        var B = h * p - s * t;
        var b = h * u - f * t;
        var C = h * g - d * t;
        var D = s * u - f * p;
        var E = s * g - d * p;
        var w = f * g - d * u;
        var F = m * w - v * E + y * D + z * C - A * b + x * B;
        if (F) {
          F = 1 / F;
          e[0] = (o * w - c * E + l * D) * F;
          e[1] = (c * C - a * w - l * b) * F;
          e[2] = (a * E - o * C + l * B) * F;
          e[3] = (q * E - n * w - r * D) * F;
          e[4] = (i * w - q * C + r * b) * F;
          e[5] = (n * C - i * E - r * B) * F;
          e[6] = (p * x - u * A + g * z) * F;
          e[7] = (u * y - t * x - g * v) * F;
          e[8] = (t * A - p * y + g * m) * F;
          return H;
        } else {
          return H;
        }
      };
      e.frob = function (c) {
        var a = c.m;
        return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2));
      };
      e.add = function (g, a, b) {
        var c = a.m;
        var d = b.m;
        var e = g.m;
        e[0] = c[0] + d[0];
        e[1] = c[1] + d[1];
        e[2] = c[2] + d[2];
        e[3] = c[3] + d[3];
        e[4] = c[4] + d[4];
        e[5] = c[5] + d[5];
        e[6] = c[6] + d[6];
        e[7] = c[7] + d[7];
        e[8] = c[8] + d[8];
        return g;
      };
      e.subtract = function (g, a, b) {
        var c = a.m;
        var d = b.m;
        var e = g.m;
        e[0] = c[0] - d[0];
        e[1] = c[1] - d[1];
        e[2] = c[2] - d[2];
        e[3] = c[3] - d[3];
        e[4] = c[4] - d[4];
        e[5] = c[5] - d[5];
        e[6] = c[6] - d[6];
        e[7] = c[7] - d[7];
        e[8] = c[8] - d[8];
        return g;
      };
      e.multiplyScalar = function (f, a, b) {
        var c = a.m;
        var d = f.m;
        d[0] = c[0] * b;
        d[1] = c[1] * b;
        d[2] = c[2] * b;
        d[3] = c[3] * b;
        d[4] = c[4] * b;
        d[5] = c[5] * b;
        d[6] = c[6] * b;
        d[7] = c[7] * b;
        d[8] = c[8] * b;
        return f;
      };
      e.multiplyScalarAndAdd = function (a, b, c, d) {
        var e = b.m;
        var f = c.m;
        var g = a.m;
        g[0] = e[0] + f[0] * d;
        g[1] = e[1] + f[1] * d;
        g[2] = e[2] + f[2] * d;
        g[3] = e[3] + f[3] * d;
        g[4] = e[4] + f[4] * d;
        g[5] = e[5] + f[5] * d;
        g[6] = e[6] + f[6] * d;
        g[7] = e[7] + f[7] * d;
        g[8] = e[8] + f[8] * d;
        return a;
      };
      e.exactEquals = function (e, a) {
        var b = e.m;
        var c = a.m;
        return b[0] === c[0] && b[1] === c[1] && b[2] === c[2] && b[3] === c[3] && b[4] === c[4] && b[5] === c[5] && b[6] === c[6] && b[7] === c[7] && b[8] === c[8];
      };
      e.equals = function (j, b) {
        var k = j.m;
        var e = b.m;
        var i = k[0];
        var n = k[1];
        var q = k[2];
        var a = k[3];
        var o = k[4];
        var c = k[5];
        var l = k[6];
        var h = k[7];
        var r = k[8];
        var f = e[0];
        var d = e[1];
        var s = e[2];
        var p = e[3];
        var t = e[4];
        var g = e[5];
        var m = e[6];
        var u = e[7];
        var v = e[8];
        return Math.abs(i - f) <= x.EPSILON * Math.max(1, Math.abs(i), Math.abs(f)) && Math.abs(n - d) <= x.EPSILON * Math.max(1, Math.abs(n), Math.abs(d)) && Math.abs(q - s) <= x.EPSILON * Math.max(1, Math.abs(q), Math.abs(s)) && Math.abs(a - p) <= x.EPSILON * Math.max(1, Math.abs(a), Math.abs(p)) && Math.abs(o - t) <= x.EPSILON * Math.max(1, Math.abs(o), Math.abs(t)) && Math.abs(c - g) <= x.EPSILON * Math.max(1, Math.abs(c), Math.abs(g)) && Math.abs(l - m) <= x.EPSILON * Math.max(1, Math.abs(l), Math.abs(m)) && Math.abs(h - u) <= x.EPSILON * Math.max(1, Math.abs(h), Math.abs(u)) && Math.abs(r - v) <= x.EPSILON * Math.max(1, Math.abs(r), Math.abs(v));
      };
      e.toArray = function (f, a, b) {
        if (b === undefined) {
          b = 0;
        }
        for (var g = a.m, d = 0; d < 9; d++) {
          f[b + d] = g[d];
        }
        return f;
      };
      e.fromArray = function (f, a, b) {
        if (b === undefined) {
          b = 0;
        }
        for (var g = f.m, d = 0; d < 9; d++) {
          g[d] = a[b + d];
        }
        return f;
      };
      e.prototype.toString = function () {
        var b = this.m;
        return "mat3(" + b[0] + ", " + b[1] + ", " + b[2] + ", " + b[3] + ", " + b[4] + ", " + b[5] + ", " + b[6] + ", " + b[7] + ", " + b[8] + ")";
      };
      return e;
    }();
    c.default = f;
    f.sub = f.subtract;
    f.mul = f.multiply;
    f.IDENTITY = Object.freeze(new f());
    cc.Mat3 = f;
    b.exports = c.default;
  }, {
    "../value-types/utils": 258,
    "./vec3": 261
  }],
  253: [function (b, d, f) {
    "use strict";

    f.__esModule = true;
    f.default = undefined;
    var e = j(b("./value-type"));
    var g = j(b("../platform/CCClass"));
    var h = j(b("./vec3"));
    var i = j(b("./quat"));
    var s = b("./utils");
    var p = j(b("./mat3"));
    function j(b) {
      if (b && b.__esModule) {
        return b;
      } else {
        return {
          default: b
        };
      }
    }
    function k(c, a) {
      return (k = Object.setPrototypeOf || function (c, a) {
        c.__proto__ = a;
        return c;
      })(c, a);
    }
    var z = 0;
    var B = 0;
    var C = 0;
    var E = 0;
    var I = 0;
    var O = 0;
    var R = 0;
    var S = 0;
    var T = 0;
    var _ = 0;
    var aa = 0;
    var ba = 0;
    var t = 0;
    var u = 0;
    var v = 0;
    var w = 0;
    var x = function (c) {
      var b;
      var e;
      e = c;
      (b = f).prototype = Object.create(e.prototype);
      b.prototype.constructor = b;
      k(b, e);
      var j = f.prototype;
      function f(a, b, d, e, f, g, h, i, l, m, n, p, r, u, v, y) {
        var z;
        if (a === undefined) {
          a = 1;
        }
        if (b === undefined) {
          b = 0;
        }
        if (d === undefined) {
          d = 0;
        }
        if (e === undefined) {
          e = 0;
        }
        if (f === undefined) {
          f = 0;
        }
        if (g === undefined) {
          g = 1;
        }
        if (h === undefined) {
          h = 0;
        }
        if (i === undefined) {
          i = 0;
        }
        if (l === undefined) {
          l = 0;
        }
        if (m === undefined) {
          m = 0;
        }
        if (n === undefined) {
          n = 1;
        }
        if (p === undefined) {
          p = 0;
        }
        if (r === undefined) {
          r = 0;
        }
        if (u === undefined) {
          u = 0;
        }
        if (v === undefined) {
          v = 0;
        }
        if (y === undefined) {
          y = 1;
        }
        (z = c.call(this) || this).m = undefined;
        if (a instanceof s.FLOAT_ARRAY_TYPE) {
          z.m = a;
        } else {
          z.m = new s.FLOAT_ARRAY_TYPE(16);
          var L = z.m;
          L[0] = a;
          L[1] = b;
          L[2] = d;
          L[3] = e;
          L[4] = f;
          L[5] = g;
          L[6] = h;
          L[7] = i;
          L[8] = l;
          L[9] = m;
          L[10] = n;
          L[11] = p;
          L[12] = r;
          L[13] = u;
          L[14] = v;
          L[15] = y;
        }
        return z;
      }
      j.mul = function (c, a) {
        return f.multiply(a || new f(), this, c);
      };
      j.mulScalar = function (c, a) {
        f.multiplyScalar(a || new f(), this, c);
      };
      j.sub = function (c, a) {
        f.subtract(a || new f(), this, c);
      };
      f.clone = function (c) {
        var a = c.m;
        return new f(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);
      };
      f.copy = function (e, a) {
        var b = e.m;
        var c = a.m;
        b[0] = c[0];
        b[1] = c[1];
        b[2] = c[2];
        b[3] = c[3];
        b[4] = c[4];
        b[5] = c[5];
        b[6] = c[6];
        b[7] = c[7];
        b[8] = c[8];
        b[9] = c[9];
        b[10] = c[10];
        b[11] = c[11];
        b[12] = c[12];
        b[13] = c[13];
        b[14] = c[14];
        b[15] = c[15];
        return e;
      };
      f.set = function (g, b, j, e, i, k, m, n, a, o, c, l, h, q, f, d, r) {
        var p = g.m;
        p[0] = b;
        p[1] = j;
        p[2] = e;
        p[3] = i;
        p[4] = k;
        p[5] = m;
        p[6] = n;
        p[7] = a;
        p[8] = o;
        p[9] = c;
        p[10] = l;
        p[11] = h;
        p[12] = q;
        p[13] = f;
        p[14] = d;
        p[15] = r;
        return g;
      };
      f.identity = function (c) {
        var a = c.m;
        a[0] = 1;
        a[1] = 0;
        a[2] = 0;
        a[3] = 0;
        a[4] = 0;
        a[5] = 1;
        a[6] = 0;
        a[7] = 0;
        a[8] = 0;
        a[9] = 0;
        a[10] = 1;
        a[11] = 0;
        a[12] = 0;
        a[13] = 0;
        a[14] = 0;
        a[15] = 1;
        return c;
      };
      f.transpose = function (k, b) {
        var d = k.m;
        var e = b.m;
        if (k === b) {
          var f = e[1];
          var g = e[2];
          var h = e[3];
          var i = e[6];
          var a = e[7];
          var j = e[11];
          d[1] = e[4];
          d[2] = e[8];
          d[3] = e[12];
          d[4] = f;
          d[6] = e[9];
          d[7] = e[13];
          d[8] = g;
          d[9] = i;
          d[11] = e[14];
          d[12] = h;
          d[13] = a;
          d[14] = j;
        } else {
          d[0] = e[0];
          d[1] = e[4];
          d[2] = e[8];
          d[3] = e[12];
          d[4] = e[1];
          d[5] = e[5];
          d[6] = e[9];
          d[7] = e[13];
          d[8] = e[2];
          d[9] = e[6];
          d[10] = e[10];
          d[11] = e[14];
          d[12] = e[3];
          d[13] = e[7];
          d[14] = e[11];
          d[15] = e[15];
        }
        return k;
      };
      f.invert = function (r, b) {
        var d = b.m;
        z = d[0];
        B = d[1];
        C = d[2];
        E = d[3];
        I = d[4];
        O = d[5];
        R = d[6];
        S = d[7];
        T = d[8];
        _ = d[9];
        aa = d[10];
        ba = d[11];
        t = d[12];
        u = d[13];
        v = d[14];
        w = d[15];
        var e = z * O - B * I;
        var f = z * R - C * I;
        var g = z * S - E * I;
        var i = B * R - C * O;
        var j = B * S - E * O;
        var a = C * S - E * R;
        var k = T * u - _ * t;
        var c = T * v - aa * t;
        var l = T * w - ba * t;
        var h = _ * v - aa * u;
        var m = _ * w - ba * u;
        var n = aa * w - ba * v;
        var o = e * n - f * m + g * h + i * l - j * c + a * k;
        if (o === 0) {
          return null;
        }
        o = 1 / o;
        var s = r.m;
        s[0] = (O * n - R * m + S * h) * o;
        s[1] = (C * m - B * n - E * h) * o;
        s[2] = (u * a - v * j + w * i) * o;
        s[3] = (aa * j - _ * a - ba * i) * o;
        s[4] = (R * l - I * n - S * c) * o;
        s[5] = (z * n - C * l + E * c) * o;
        s[6] = (v * g - t * a - w * f) * o;
        s[7] = (T * a - aa * g + ba * f) * o;
        s[8] = (I * m - O * l + S * k) * o;
        s[9] = (B * l - z * m - E * k) * o;
        s[10] = (t * j - u * g + w * e) * o;
        s[11] = (_ * g - T * j - ba * e) * o;
        s[12] = (O * c - I * h - R * k) * o;
        s[13] = (z * h - B * c + C * k) * o;
        s[14] = (u * f - t * i - v * e) * o;
        s[15] = (T * i - _ * f + aa * e) * o;
        return r;
      };
      f.determinant = function (c) {
        var a = c.m;
        z = a[0];
        B = a[1];
        C = a[2];
        E = a[3];
        I = a[4];
        O = a[5];
        R = a[6];
        S = a[7];
        T = a[8];
        _ = a[9];
        aa = a[10];
        ba = a[11];
        t = a[12];
        u = a[13];
        v = a[14];
        w = a[15];
        return (z * O - B * I) * (aa * w - ba * v) - (z * R - C * I) * (_ * w - ba * u) + (z * S - E * I) * (_ * v - aa * u) + (B * R - C * O) * (T * w - ba * t) - (B * S - E * O) * (T * v - aa * t) + (C * S - E * R) * (T * u - _ * t);
      };
      f.multiply = function (a, b, c) {
        var d = a.m;
        var e = b.m;
        var f = c.m;
        z = e[0];
        B = e[1];
        C = e[2];
        E = e[3];
        I = e[4];
        O = e[5];
        R = e[6];
        S = e[7];
        T = e[8];
        _ = e[9];
        aa = e[10];
        ba = e[11];
        t = e[12];
        u = e[13];
        v = e[14];
        w = e[15];
        var g = f[0];
        var h = f[1];
        var l = f[2];
        var n = f[3];
        d[0] = g * z + h * I + l * T + n * t;
        d[1] = g * B + h * O + l * _ + n * u;
        d[2] = g * C + h * R + l * aa + n * v;
        d[3] = g * E + h * S + l * ba + n * w;
        g = f[4];
        h = f[5];
        l = f[6];
        n = f[7];
        d[4] = g * z + h * I + l * T + n * t;
        d[5] = g * B + h * O + l * _ + n * u;
        d[6] = g * C + h * R + l * aa + n * v;
        d[7] = g * E + h * S + l * ba + n * w;
        g = f[8];
        h = f[9];
        l = f[10];
        n = f[11];
        d[8] = g * z + h * I + l * T + n * t;
        d[9] = g * B + h * O + l * _ + n * u;
        d[10] = g * C + h * R + l * aa + n * v;
        d[11] = g * E + h * S + l * ba + n * w;
        g = f[12];
        h = f[13];
        l = f[14];
        n = f[15];
        d[12] = g * z + h * I + l * T + n * t;
        d[13] = g * B + h * O + l * _ + n * u;
        d[14] = g * C + h * R + l * aa + n * v;
        d[15] = g * E + h * S + l * ba + n * w;
        return a;
      };
      f.transform = function (i, b, c) {
        var d = c.x;
        var e = c.y;
        var f = c.z;
        var g = i.m;
        var h = b.m;
        if (b === i) {
          g[12] = h[0] * d + h[4] * e + h[8] * f + h[12];
          g[13] = h[1] * d + h[5] * e + h[9] * f + h[13];
          g[14] = h[2] * d + h[6] * e + h[10] * f + h[14];
          g[15] = h[3] * d + h[7] * e + h[11] * f + h[15];
        } else {
          z = h[0];
          B = h[1];
          C = h[2];
          E = h[3];
          I = h[4];
          O = h[5];
          R = h[6];
          S = h[7];
          T = h[8];
          _ = h[9];
          aa = h[10];
          ba = h[11];
          t = h[12];
          u = h[13];
          v = h[14];
          w = h[15];
          g[0] = z;
          g[1] = B;
          g[2] = C;
          g[3] = E;
          g[4] = I;
          g[5] = O;
          g[6] = R;
          g[7] = S;
          g[8] = T;
          g[9] = _;
          g[10] = aa;
          g[11] = ba;
          g[12] = z * d + I * e + T * f + h[12];
          g[13] = B * d + O * e + _ * f + h[13];
          g[14] = C * d + R * e + aa * f + h[14];
          g[15] = E * d + S * e + ba * f + h[15];
        }
        return i;
      };
      f.translate = function (f, a, b) {
        var c = f.m;
        var d = a.m;
        if (a === f) {
          c[12] += b.x;
          c[13] += b.y;
          c[14] += b.z;
        } else {
          c[0] = d[0];
          c[1] = d[1];
          c[2] = d[2];
          c[3] = d[3];
          c[4] = d[4];
          c[5] = d[5];
          c[6] = d[6];
          c[7] = d[7];
          c[8] = d[8];
          c[9] = d[9];
          c[10] = d[10];
          c[11] = d[11];
          c[12] += b.x;
          c[13] += b.y;
          c[14] += b.z;
          c[15] = d[15];
        }
        return f;
      };
      f.scale = function (i, b, c) {
        var d = c.x;
        var e = c.y;
        var f = c.z;
        var g = i.m;
        var h = b.m;
        g[0] = h[0] * d;
        g[1] = h[1] * d;
        g[2] = h[2] * d;
        g[3] = h[3] * d;
        g[4] = h[4] * e;
        g[5] = h[5] * e;
        g[6] = h[6] * e;
        g[7] = h[7] * e;
        g[8] = h[8] * f;
        g[9] = h[9] * f;
        g[10] = h[10] * f;
        g[11] = h[11] * f;
        g[12] = h[12];
        g[13] = h[13];
        g[14] = h[14];
        g[15] = h[15];
        return i;
      };
      f.rotate = function (a, c, d, e) {
        var f = e.x;
        var g = e.y;
        var r = e.z;
        var D = Math.sqrt(f * f + g * g + r * r);
        if (Math.abs(D) < s.EPSILON) {
          return null;
        }
        f *= D = 1 / D;
        g *= D;
        r *= D;
        var F = Math.sin(d);
        var n = Math.cos(d);
        var l = 1 - n;
        var h = c.m;
        z = h[0];
        B = h[1];
        C = h[2];
        E = h[3];
        I = h[4];
        O = h[5];
        R = h[6];
        S = h[7];
        T = h[8];
        _ = h[9];
        aa = h[10];
        ba = h[11];
        var o = f * f * l + n;
        var p = g * f * l + r * F;
        var b = r * f * l - g * F;
        var q = f * g * l - r * F;
        var t = g * g * l + n;
        var u = r * g * l + f * F;
        var v = f * r * l + g * F;
        var w = g * r * l - f * F;
        var x = r * r * l + n;
        var y = a.m;
        y[0] = z * o + I * p + T * b;
        y[1] = B * o + O * p + _ * b;
        y[2] = C * o + R * p + aa * b;
        y[3] = E * o + S * p + ba * b;
        y[4] = z * q + I * t + T * u;
        y[5] = B * q + O * t + _ * u;
        y[6] = C * q + R * t + aa * u;
        y[7] = E * q + S * t + ba * u;
        y[8] = z * v + I * w + T * x;
        y[9] = B * v + O * w + _ * x;
        y[10] = C * v + R * w + aa * x;
        y[11] = E * v + S * w + ba * x;
        if (c !== a) {
          y[12] = h[12];
          y[13] = h[13];
          y[14] = h[14];
          y[15] = h[15];
        }
        return a;
      };
      f.rotateX = function (p, b, g) {
        var e = p.m;
        var i = b.m;
        var j = Math.sin(g);
        var k = Math.cos(g);
        var m = i[4];
        var a = i[5];
        var n = i[6];
        var c = i[7];
        var l = i[8];
        var h = i[9];
        var o = i[10];
        var f = i[11];
        if (b !== p) {
          e[0] = i[0];
          e[1] = i[1];
          e[2] = i[2];
          e[3] = i[3];
          e[12] = i[12];
          e[13] = i[13];
          e[14] = i[14];
          e[15] = i[15];
        }
        e[4] = m * k + l * j;
        e[5] = a * k + h * j;
        e[6] = n * k + o * j;
        e[7] = c * k + f * j;
        e[8] = l * k - m * j;
        e[9] = h * k - a * j;
        e[10] = o * k - n * j;
        e[11] = f * k - c * j;
        return p;
      };
      f.rotateY = function (p, b, g) {
        var e = p.m;
        var i = b.m;
        var j = Math.sin(g);
        var k = Math.cos(g);
        var m = i[0];
        var a = i[1];
        var n = i[2];
        var c = i[3];
        var l = i[8];
        var h = i[9];
        var o = i[10];
        var f = i[11];
        if (b !== p) {
          e[4] = i[4];
          e[5] = i[5];
          e[6] = i[6];
          e[7] = i[7];
          e[12] = i[12];
          e[13] = i[13];
          e[14] = i[14];
          e[15] = i[15];
        }
        e[0] = m * k - l * j;
        e[1] = a * k - h * j;
        e[2] = n * k - o * j;
        e[3] = c * k - f * j;
        e[8] = m * j + l * k;
        e[9] = a * j + h * k;
        e[10] = n * j + o * k;
        e[11] = c * j + f * k;
        return p;
      };
      f.rotateZ = function (p, b, g) {
        var e = b.m;
        var i = p.m;
        var j = Math.sin(g);
        var k = Math.cos(g);
        var m = b.m[0];
        var a = b.m[1];
        var n = b.m[2];
        var c = b.m[3];
        var l = b.m[4];
        var h = b.m[5];
        var o = b.m[6];
        var f = b.m[7];
        if (b !== p) {
          i[8] = e[8];
          i[9] = e[9];
          i[10] = e[10];
          i[11] = e[11];
          i[12] = e[12];
          i[13] = e[13];
          i[14] = e[14];
          i[15] = e[15];
        }
        i[0] = m * k + l * j;
        i[1] = a * k + h * j;
        i[2] = n * k + o * j;
        i[3] = c * k + f * j;
        i[4] = l * k - m * j;
        i[5] = h * k - a * j;
        i[6] = o * k - n * j;
        i[7] = f * k - c * j;
        return p;
      };
      f.fromTranslation = function (d, a) {
        var b = d.m;
        b[0] = 1;
        b[1] = 0;
        b[2] = 0;
        b[3] = 0;
        b[4] = 0;
        b[5] = 1;
        b[6] = 0;
        b[7] = 0;
        b[8] = 0;
        b[9] = 0;
        b[10] = 1;
        b[11] = 0;
        b[12] = a.x;
        b[13] = a.y;
        b[14] = a.z;
        b[15] = 1;
        return d;
      };
      f.fromScaling = function (d, a) {
        var b = d.m;
        b[0] = a.x;
        b[1] = 0;
        b[2] = 0;
        b[3] = 0;
        b[4] = 0;
        b[5] = a.y;
        b[6] = 0;
        b[7] = 0;
        b[8] = 0;
        b[9] = 0;
        b[10] = a.z;
        b[11] = 0;
        b[12] = 0;
        b[13] = 0;
        b[14] = 0;
        b[15] = 1;
        return d;
      };
      f.fromRotation = function (a, b, d) {
        var e = d.x;
        var m = d.y;
        var n = d.z;
        var o = Math.sqrt(e * e + m * m + n * n);
        if (Math.abs(o) < s.EPSILON) {
          return null;
        }
        e *= o = 1 / o;
        m *= o;
        n *= o;
        var p = Math.sin(b);
        var k = Math.cos(b);
        var c = 1 - k;
        var l = a.m;
        l[0] = e * e * c + k;
        l[1] = m * e * c + n * p;
        l[2] = n * e * c - m * p;
        l[3] = 0;
        l[4] = e * m * c - n * p;
        l[5] = m * m * c + k;
        l[6] = n * m * c + e * p;
        l[7] = 0;
        l[8] = e * n * c + m * p;
        l[9] = m * n * c - e * p;
        l[10] = n * n * c + k;
        l[11] = 0;
        l[12] = 0;
        l[13] = 0;
        l[14] = 0;
        l[15] = 1;
        return a;
      };
      f.fromXRotation = function (f, a) {
        var b = Math.sin(a);
        var c = Math.cos(a);
        var d = f.m;
        d[0] = 1;
        d[1] = 0;
        d[2] = 0;
        d[3] = 0;
        d[4] = 0;
        d[5] = c;
        d[6] = b;
        d[7] = 0;
        d[8] = 0;
        d[9] = -b;
        d[10] = c;
        d[11] = 0;
        d[12] = 0;
        d[13] = 0;
        d[14] = 0;
        d[15] = 1;
        return f;
      };
      f.fromYRotation = function (f, a) {
        var b = Math.sin(a);
        var c = Math.cos(a);
        var d = f.m;
        d[0] = c;
        d[1] = 0;
        d[2] = -b;
        d[3] = 0;
        d[4] = 0;
        d[5] = 1;
        d[6] = 0;
        d[7] = 0;
        d[8] = b;
        d[9] = 0;
        d[10] = c;
        d[11] = 0;
        d[12] = 0;
        d[13] = 0;
        d[14] = 0;
        d[15] = 1;
        return f;
      };
      f.fromZRotation = function (f, a) {
        var b = Math.sin(a);
        var c = Math.cos(a);
        var d = f.m;
        d[0] = c;
        d[1] = b;
        d[2] = 0;
        d[3] = 0;
        d[4] = -b;
        d[5] = c;
        d[6] = 0;
        d[7] = 0;
        d[8] = 0;
        d[9] = 0;
        d[10] = 1;
        d[11] = 0;
        d[12] = 0;
        d[13] = 0;
        d[14] = 0;
        d[15] = 1;
        return f;
      };
      f.fromRT = function (u, b, j) {
        var e = b.x;
        var i = b.y;
        var k = b.z;
        var n = b.w;
        var q = e + e;
        var a = i + i;
        var o = k + k;
        var c = e * q;
        var l = e * a;
        var h = e * o;
        var r = i * a;
        var f = i * o;
        var d = k * o;
        var s = n * q;
        var p = n * a;
        var t = n * o;
        var g = u.m;
        g[0] = 1 - (r + d);
        g[1] = l + t;
        g[2] = h - p;
        g[3] = 0;
        g[4] = l - t;
        g[5] = 1 - (c + d);
        g[6] = f + s;
        g[7] = 0;
        g[8] = h + p;
        g[9] = f - s;
        g[10] = 1 - (c + r);
        g[11] = 0;
        g[12] = j.x;
        g[13] = j.y;
        g[14] = j.z;
        g[15] = 1;
        return u;
      };
      f.getTranslation = function (d, a) {
        var b = a.m;
        d.x = b[12];
        d.y = b[13];
        d.z = b[14];
        return d;
      };
      f.getScaling = function (d, b) {
        var c = b.m;
        var e = q.m;
        var g = e[0] = c[0];
        var i = e[1] = c[1];
        var j = e[2] = c[2];
        var k = e[3] = c[4];
        var a = e[4] = c[5];
        var m = e[5] = c[6];
        var l = e[6] = c[8];
        var h = e[7] = c[9];
        var n = e[8] = c[10];
        d.x = Math.sqrt(g * g + i * i + j * j);
        d.y = Math.sqrt(k * k + a * a + m * m);
        d.z = Math.sqrt(l * l + h * h + n * n);
        if (p.default.determinant(q) < 0) {
          d.x *= -1;
        }
        return d;
      };
      f.getRotation = function (f, a) {
        var b = a.m;
        var c = b[0] + b[5] + b[10];
        var d = 0;
        if (c > 0) {
          d = Math.sqrt(c + 1) * 2;
          f.w = d * 0.25;
          f.x = (b[6] - b[9]) / d;
          f.y = (b[8] - b[2]) / d;
          f.z = (b[1] - b[4]) / d;
        } else if (b[0] > b[5] && b[0] > b[10]) {
          d = Math.sqrt(1 + b[0] - b[5] - b[10]) * 2;
          f.w = (b[6] - b[9]) / d;
          f.x = d * 0.25;
          f.y = (b[1] + b[4]) / d;
          f.z = (b[8] + b[2]) / d;
        } else if (b[5] > b[10]) {
          d = Math.sqrt(1 + b[5] - b[0] - b[10]) * 2;
          f.w = (b[8] - b[2]) / d;
          f.x = (b[1] + b[4]) / d;
          f.y = d * 0.25;
          f.z = (b[6] + b[9]) / d;
        } else {
          d = Math.sqrt(1 + b[10] - b[0] - b[5]) * 2;
          f.w = (b[1] - b[4]) / d;
          f.x = (b[8] + b[2]) / d;
          f.y = (b[6] + b[9]) / d;
          f.z = d * 0.25;
        }
        return f;
      };
      f.toRTS = function (g, a, b, c) {
        var d = g.m;
        var e = q.m;
        c.x = h.default.set(m, d[0], d[1], d[2]).mag();
        e[0] = d[0] / c.x;
        e[1] = d[1] / c.x;
        e[2] = d[2] / c.x;
        c.y = h.default.set(m, d[4], d[5], d[6]).mag();
        e[3] = d[4] / c.y;
        e[4] = d[5] / c.y;
        e[5] = d[6] / c.y;
        c.z = h.default.set(m, d[8], d[9], d[10]).mag();
        e[6] = d[8] / c.z;
        e[7] = d[9] / c.z;
        e[8] = d[10] / c.z;
        if (p.default.determinant(q) < 0) {
          c.x *= -1;
          e[0] *= -1;
          e[1] *= -1;
          e[2] *= -1;
        }
        i.default.fromMat3(a, q);
        h.default.set(b, d[12], d[13], d[14]);
      };
      f.fromRTS = function (x, b, j, e) {
        var i = b.x;
        var k = b.y;
        var n = b.z;
        var q = b.w;
        var a = i + i;
        var o = k + k;
        var c = n + n;
        var l = i * a;
        var h = i * o;
        var r = i * c;
        var f = k * o;
        var d = k * c;
        var s = n * c;
        var p = q * a;
        var t = q * o;
        var g = q * c;
        var m = e.x;
        var u = e.y;
        var v = e.z;
        var w = x.m;
        w[0] = (1 - (f + s)) * m;
        w[1] = (h + g) * m;
        w[2] = (r - t) * m;
        w[3] = 0;
        w[4] = (h - g) * u;
        w[5] = (1 - (l + s)) * u;
        w[6] = (d + p) * u;
        w[7] = 0;
        w[8] = (r + t) * v;
        w[9] = (d - p) * v;
        w[10] = (1 - (l + f)) * v;
        w[11] = 0;
        w[12] = j.x;
        w[13] = j.y;
        w[14] = j.z;
        w[15] = 1;
        return x;
      };
      f.fromRTSOrigin = function (C, j, k, e, i) {
        var n = j.x;
        var q = j.y;
        var r = j.z;
        var a = j.w;
        var o = n + n;
        var c = q + q;
        var l = r + r;
        var h = n * o;
        var s = n * c;
        var f = n * l;
        var d = q * c;
        var t = q * l;
        var p = r * l;
        var u = a * o;
        var g = a * c;
        var m = a * l;
        var v = e.x;
        var w = e.y;
        var y = e.z;
        var z = i.x;
        var x = i.y;
        var A = i.z;
        var b = C.m;
        b[0] = (1 - (d + p)) * v;
        b[1] = (s + m) * v;
        b[2] = (f - g) * v;
        b[3] = 0;
        b[4] = (s - m) * w;
        b[5] = (1 - (h + p)) * w;
        b[6] = (t + u) * w;
        b[7] = 0;
        b[8] = (f + g) * y;
        b[9] = (t - u) * y;
        b[10] = (1 - (h + d)) * y;
        b[11] = 0;
        b[12] = k.x + z - (b[0] * z + b[4] * x + b[8] * A);
        b[13] = k.y + x - (b[1] * z + b[5] * x + b[9] * A);
        b[14] = k.z + A - (b[2] * z + b[6] * x + b[10] * A);
        b[15] = 1;
        return C;
      };
      f.fromQuat = function (m, b) {
        var j = b.x;
        var e = b.y;
        var i = b.z;
        var k = b.w;
        var n = j + j;
        var q = e + e;
        var a = i + i;
        var o = j * n;
        var c = e * n;
        var l = e * q;
        var h = i * n;
        var r = i * q;
        var f = i * a;
        var d = k * n;
        var s = k * q;
        var p = k * a;
        var t = m.m;
        t[0] = 1 - l - f;
        t[1] = c + p;
        t[2] = h - s;
        t[3] = 0;
        t[4] = c - p;
        t[5] = 1 - o - f;
        t[6] = r + d;
        t[7] = 0;
        t[8] = h + s;
        t[9] = r - d;
        t[10] = 1 - o - l;
        t[11] = 0;
        t[12] = 0;
        t[13] = 0;
        t[14] = 0;
        t[15] = 1;
        return m;
      };
      f.frustum = function (h, b, d, e, f, g, i) {
        var j = 1 / (d - b);
        var a = 1 / (f - e);
        var k = 1 / (g - i);
        var c = h.m;
        c[0] = g * 2 * j;
        c[1] = 0;
        c[2] = 0;
        c[3] = 0;
        c[4] = 0;
        c[5] = g * 2 * a;
        c[6] = 0;
        c[7] = 0;
        c[8] = (d + b) * j;
        c[9] = (f + e) * a;
        c[10] = (i + g) * k;
        c[11] = -1;
        c[12] = 0;
        c[13] = 0;
        c[14] = i * g * 2 * k;
        c[15] = 0;
        return h;
      };
      f.perspective = function (i, b, c, d, e) {
        var f = 1 / Math.tan(b / 2);
        var g = 1 / (d - e);
        var h = i.m;
        h[0] = f / c;
        h[1] = 0;
        h[2] = 0;
        h[3] = 0;
        h[4] = 0;
        h[5] = f;
        h[6] = 0;
        h[7] = 0;
        h[8] = 0;
        h[9] = 0;
        h[10] = (e + d) * g;
        h[11] = -1;
        h[12] = 0;
        h[13] = 0;
        h[14] = e * 2 * d * g;
        h[15] = 0;
        return i;
      };
      f.ortho = function (h, b, d, e, f, g, i) {
        var j = 1 / (b - d);
        var a = 1 / (e - f);
        var k = 1 / (g - i);
        var c = h.m;
        c[0] = j * -2;
        c[1] = 0;
        c[2] = 0;
        c[3] = 0;
        c[4] = 0;
        c[5] = a * -2;
        c[6] = 0;
        c[7] = 0;
        c[8] = 0;
        c[9] = 0;
        c[10] = k * 2;
        c[11] = 0;
        c[12] = (b + d) * j;
        c[13] = (f + e) * a;
        c[14] = (i + g) * k;
        c[15] = 1;
        return h;
      };
      f.lookAt = function (d, b, f, e) {
        var h = b.x;
        var i = b.y;
        var j = b.z;
        var k = e.x;
        var a = e.y;
        var n = e.z;
        var c = h - f.x;
        var o = i - f.y;
        var p = j - f.z;
        var q = 1 / Math.sqrt(c * c + o * o + p * p);
        var u = a * (p *= q) - n * (o *= q);
        var v = n * (c *= q) - k * p;
        var B = k * o - a * c;
        var C = o * (B *= q = 1 / Math.sqrt(u * u + v * v + B * B)) - p * (v *= q);
        var A = p * (u *= q) - c * B;
        var g = c * v - o * u;
        var m = d.m;
        m[0] = u;
        m[1] = C;
        m[2] = c;
        m[3] = 0;
        m[4] = v;
        m[5] = A;
        m[6] = o;
        m[7] = 0;
        m[8] = B;
        m[9] = g;
        m[10] = p;
        m[11] = 0;
        m[12] = -(u * h + v * i + B * j);
        m[13] = -(C * h + A * i + g * j);
        m[14] = -(c * h + o * i + p * j);
        m[15] = 1;
        return d;
      };
      f.inverseTranspose = function (i, b) {
        var d = b.m;
        z = d[0];
        B = d[1];
        C = d[2];
        E = d[3];
        I = d[4];
        O = d[5];
        R = d[6];
        S = d[7];
        T = d[8];
        _ = d[9];
        aa = d[10];
        ba = d[11];
        t = d[12];
        u = d[13];
        v = d[14];
        w = d[15];
        var r = z * O - B * I;
        var f = z * R - C * I;
        var g = z * S - E * I;
        var j = B * R - C * O;
        var k = B * S - E * O;
        var a = C * S - E * R;
        var m = T * u - _ * t;
        var c = T * v - aa * t;
        var l = T * w - ba * t;
        var h = _ * v - aa * u;
        var n = _ * w - ba * u;
        var o = aa * w - ba * v;
        var p = r * o - f * n + g * h + j * l - k * c + a * m;
        if (p) {
          p = 1 / p;
          (d = i.m)[0] = (O * o - R * n + S * h) * p;
          d[1] = (R * l - I * o - S * c) * p;
          d[2] = (I * n - O * l + S * m) * p;
          d[3] = 0;
          d[4] = (C * n - B * o - E * h) * p;
          d[5] = (z * o - C * l + E * c) * p;
          d[6] = (B * l - z * n - E * m) * p;
          d[7] = 0;
          d[8] = (u * a - v * k + w * j) * p;
          d[9] = (v * g - t * a - w * f) * p;
          d[10] = (t * k - u * g + w * r) * p;
          d[11] = 0;
          d[12] = 0;
          d[13] = 0;
          d[14] = 0;
          d[15] = 1;
          return i;
        } else {
          return null;
        }
      };
      f.add = function (g, a, b) {
        var c = g.m;
        var d = a.m;
        var e = b.m;
        c[0] = d[0] + e[0];
        c[1] = d[1] + e[1];
        c[2] = d[2] + e[2];
        c[3] = d[3] + e[3];
        c[4] = d[4] + e[4];
        c[5] = d[5] + e[5];
        c[6] = d[6] + e[6];
        c[7] = d[7] + e[7];
        c[8] = d[8] + e[8];
        c[9] = d[9] + e[9];
        c[10] = d[10] + e[10];
        c[11] = d[11] + e[11];
        c[12] = d[12] + e[12];
        c[13] = d[13] + e[13];
        c[14] = d[14] + e[14];
        c[15] = d[15] + e[15];
        return g;
      };
      f.subtract = function (g, a, b) {
        var c = g.m;
        var d = a.m;
        var e = b.m;
        c[0] = d[0] - e[0];
        c[1] = d[1] - e[1];
        c[2] = d[2] - e[2];
        c[3] = d[3] - e[3];
        c[4] = d[4] - e[4];
        c[5] = d[5] - e[5];
        c[6] = d[6] - e[6];
        c[7] = d[7] - e[7];
        c[8] = d[8] - e[8];
        c[9] = d[9] - e[9];
        c[10] = d[10] - e[10];
        c[11] = d[11] - e[11];
        c[12] = d[12] - e[12];
        c[13] = d[13] - e[13];
        c[14] = d[14] - e[14];
        c[15] = d[15] - e[15];
        return g;
      };
      f.multiplyScalar = function (f, a, b) {
        var c = f.m;
        var d = a.m;
        c[0] = d[0] * b;
        c[1] = d[1] * b;
        c[2] = d[2] * b;
        c[3] = d[3] * b;
        c[4] = d[4] * b;
        c[5] = d[5] * b;
        c[6] = d[6] * b;
        c[7] = d[7] * b;
        c[8] = d[8] * b;
        c[9] = d[9] * b;
        c[10] = d[10] * b;
        c[11] = d[11] * b;
        c[12] = d[12] * b;
        c[13] = d[13] * b;
        c[14] = d[14] * b;
        c[15] = d[15] * b;
        return f;
      };
      f.multiplyScalarAndAdd = function (a, b, c, d) {
        var e = a.m;
        var f = b.m;
        var g = c.m;
        e[0] = f[0] + g[0] * d;
        e[1] = f[1] + g[1] * d;
        e[2] = f[2] + g[2] * d;
        e[3] = f[3] + g[3] * d;
        e[4] = f[4] + g[4] * d;
        e[5] = f[5] + g[5] * d;
        e[6] = f[6] + g[6] * d;
        e[7] = f[7] + g[7] * d;
        e[8] = f[8] + g[8] * d;
        e[9] = f[9] + g[9] * d;
        e[10] = f[10] + g[10] * d;
        e[11] = f[11] + g[11] * d;
        e[12] = f[12] + g[12] * d;
        e[13] = f[13] + g[13] * d;
        e[14] = f[14] + g[14] * d;
        e[15] = f[15] + g[15] * d;
        return a;
      };
      f.strictEquals = function (e, a) {
        var b = e.m;
        var c = a.m;
        return b[0] === c[0] && b[1] === c[1] && b[2] === c[2] && b[3] === c[3] && b[4] === c[4] && b[5] === c[5] && b[6] === c[6] && b[7] === c[7] && b[8] === c[8] && b[9] === c[9] && b[10] === c[10] && b[11] === c[11] && b[12] === c[12] && b[13] === c[13] && b[14] === c[14] && b[15] === c[15];
      };
      f.equals = function (f, a, b) {
        if (b === undefined) {
          b = s.EPSILON;
        }
        var g = f.m;
        var d = a.m;
        return Math.abs(g[0] - d[0]) <= b * Math.max(1, Math.abs(g[0]), Math.abs(d[0])) && Math.abs(g[1] - d[1]) <= b * Math.max(1, Math.abs(g[1]), Math.abs(d[1])) && Math.abs(g[2] - d[2]) <= b * Math.max(1, Math.abs(g[2]), Math.abs(d[2])) && Math.abs(g[3] - d[3]) <= b * Math.max(1, Math.abs(g[3]), Math.abs(d[3])) && Math.abs(g[4] - d[4]) <= b * Math.max(1, Math.abs(g[4]), Math.abs(d[4])) && Math.abs(g[5] - d[5]) <= b * Math.max(1, Math.abs(g[5]), Math.abs(d[5])) && Math.abs(g[6] - d[6]) <= b * Math.max(1, Math.abs(g[6]), Math.abs(d[6])) && Math.abs(g[7] - d[7]) <= b * Math.max(1, Math.abs(g[7]), Math.abs(d[7])) && Math.abs(g[8] - d[8]) <= b * Math.max(1, Math.abs(g[8]), Math.abs(d[8])) && Math.abs(g[9] - d[9]) <= b * Math.max(1, Math.abs(g[9]), Math.abs(d[9])) && Math.abs(g[10] - d[10]) <= b * Math.max(1, Math.abs(g[10]), Math.abs(d[10])) && Math.abs(g[11] - d[11]) <= b * Math.max(1, Math.abs(g[11]), Math.abs(d[11])) && Math.abs(g[12] - d[12]) <= b * Math.max(1, Math.abs(g[12]), Math.abs(d[12])) && Math.abs(g[13] - d[13]) <= b * Math.max(1, Math.abs(g[13]), Math.abs(d[13])) && Math.abs(g[14] - d[14]) <= b * Math.max(1, Math.abs(g[14]), Math.abs(d[14])) && Math.abs(g[15] - d[15]) <= b * Math.max(1, Math.abs(g[15]), Math.abs(d[15]));
      };
      f.adjoint = function (u, b) {
        var j = b.m;
        var e = u.m;
        var i = j[0];
        var k = j[1];
        var n = j[2];
        var q = j[3];
        var a = j[4];
        var o = j[5];
        var c = j[6];
        var l = j[7];
        var h = j[8];
        var r = j[9];
        var f = j[10];
        var d = j[11];
        var s = j[12];
        var p = j[13];
        var t = j[14];
        var g = j[15];
        e[0] = o * (f * g - d * t) - r * (c * g - l * t) + p * (c * d - l * f);
        e[1] = -(k * (f * g - d * t) - r * (n * g - q * t) + p * (n * d - q * f));
        e[2] = k * (c * g - l * t) - o * (n * g - q * t) + p * (n * l - q * c);
        e[3] = -(k * (c * d - l * f) - o * (n * d - q * f) + r * (n * l - q * c));
        e[4] = -(a * (f * g - d * t) - h * (c * g - l * t) + s * (c * d - l * f));
        e[5] = i * (f * g - d * t) - h * (n * g - q * t) + s * (n * d - q * f);
        e[6] = -(i * (c * g - l * t) - a * (n * g - q * t) + s * (n * l - q * c));
        e[7] = i * (c * d - l * f) - a * (n * d - q * f) + h * (n * l - q * c);
        e[8] = a * (r * g - d * p) - h * (o * g - l * p) + s * (o * d - l * r);
        e[9] = -(i * (r * g - d * p) - h * (k * g - q * p) + s * (k * d - q * r));
        e[10] = i * (o * g - l * p) - a * (k * g - q * p) + s * (k * l - q * o);
        e[11] = -(i * (o * d - l * r) - a * (k * d - q * r) + h * (k * l - q * o));
        e[12] = -(a * (r * t - f * p) - h * (o * t - c * p) + s * (o * f - c * r));
        e[13] = i * (r * t - f * p) - h * (k * t - n * p) + s * (k * f - n * r);
        e[14] = -(i * (o * t - c * p) - a * (k * t - n * p) + s * (k * c - n * o));
        e[15] = i * (o * f - c * r) - a * (k * f - n * r) + h * (k * c - n * o);
        return u;
      };
      f.toArray = function (f, a, b) {
        if (b === undefined) {
          b = 0;
        }
        for (var g = a.m, d = 0; d < 16; d++) {
          f[b + d] = g[d];
        }
        return f;
      };
      f.fromArray = function (f, a, b) {
        if (b === undefined) {
          b = 0;
        }
        for (var g = f.m, d = 0; d < 16; d++) {
          g[d] = a[b + d];
        }
        return f;
      };
      j.clone = function () {
        var b = this.m;
        return new f(b[0], b[1], b[2], b[3], b[4], b[5], b[6], b[7], b[8], b[9], b[10], b[11], b[12], b[13], b[14], b[15]);
      };
      j.set = function (d) {
        var a = this.m;
        var b = d.m;
        a[0] = b[0];
        a[1] = b[1];
        a[2] = b[2];
        a[3] = b[3];
        a[4] = b[4];
        a[5] = b[5];
        a[6] = b[6];
        a[7] = b[7];
        a[8] = b[8];
        a[9] = b[9];
        a[10] = b[10];
        a[11] = b[11];
        a[12] = b[12];
        a[13] = b[13];
        a[14] = b[14];
        a[15] = b[15];
        return this;
      };
      j.equals = function (b) {
        return f.strictEquals(this, b);
      };
      j.fuzzyEquals = function (b) {
        return f.equals(this, b);
      };
      j.toString = function () {
        var b = this.m;
        if (b) {
          return "[\n" + b[0] + ", " + b[1] + ", " + b[2] + ", " + b[3] + ",\n" + b[4] + ", " + b[5] + ", " + b[6] + ", " + b[7] + ",\n" + b[8] + ", " + b[9] + ", " + b[10] + ", " + b[11] + ",\n" + b[12] + ", " + b[13] + ", " + b[14] + ", " + b[15] + "\n]";
        } else {
          return `[
1, 0, 0, 0
0, 1, 0, 0
0, 0, 1, 0
0, 0, 0, 1
]`;
        }
      };
      j.identity = function () {
        return f.identity(this);
      };
      j.transpose = function (b) {
        b = b || new f();
        return f.transpose(b, this);
      };
      j.invert = function (b) {
        b = b || new f();
        return f.invert(b, this);
      };
      j.adjoint = function (b) {
        b = b || new f();
        return f.adjoint(b, this);
      };
      j.determinant = function () {
        return f.determinant(this);
      };
      j.add = function (c, a) {
        a = a || new f();
        return f.add(a, this, c);
      };
      j.subtract = function (b) {
        return f.subtract(this, this, b);
      };
      j.multiply = function (b) {
        return f.multiply(this, this, b);
      };
      j.multiplyScalar = function (b) {
        return f.multiplyScalar(this, this, b);
      };
      j.translate = function (c, a) {
        a = a || new f();
        return f.translate(a, this, c);
      };
      j.scale = function (c, a) {
        a = a || new f();
        return f.scale(a, this, c);
      };
      j.rotate = function (d, a, b) {
        b = b || new f();
        return f.rotate(b, this, d, a);
      };
      j.getTranslation = function (b) {
        b = b || new h.default();
        return f.getTranslation(b, this);
      };
      j.getScale = function (b) {
        b = b || new h.default();
        return f.getScaling(b, this);
      };
      j.getRotation = function (b) {
        b = b || new i.default();
        return f.getRotation(b, this);
      };
      j.fromRTS = function (d, a, b) {
        return f.fromRTS(this, d, a, b);
      };
      j.fromQuat = function (b) {
        return f.fromQuat(this, b);
      };
      return f;
    }(e.default);
    f.default = x;
    x.mul = x.multiply;
    x.sub = x.subtract;
    x.IDENTITY = Object.freeze(new x());
    var m = new h.default();
    var q = new p.default();
    g.default.fastDefine("cc.Mat4", x, {
      m00: 1,
      m01: 0,
      m02: 0,
      m03: 0,
      m04: 0,
      m05: 1,
      m06: 0,
      m07: 0,
      m08: 0,
      m09: 0,
      m10: 1,
      m11: 0,
      m12: 0,
      m13: 0,
      m14: 0,
      m15: 1
    });
    for (var a = function (c) {
        Object.defineProperty(x.prototype, "m" + c, {
          get: function () {
            return this.m[c];
          },
          set: function (a) {
            this.m[c] = a;
          }
        });
      }, l = 0; l < 16; l++) {
      a(l);
    }
    cc.mat4 = function (r, b, g, e, i, j, k, m, a, n, c, l, h, o, f, d) {
      var q = new x(r, b, g, e, i, j, k, m, a, n, c, l, h, o, f, d);
      if (r === undefined) {
        x.identity(q);
      }
      return q;
    };
    cc.Mat4 = x;
    d.exports = f.default;
  }, {
    "../platform/CCClass": 162,
    "./mat3": 252,
    "./quat": 254,
    "./utils": 258,
    "./value-type": 259,
    "./vec3": 261
  }],
  254: [function (d, b, f) {
    "use strict";

    f.__esModule = true;
    f.default = undefined;
    var e = k(d("./value-type"));
    var h = k(d("../platform/CCClass"));
    var i = k(d("./vec3"));
    var j = k(d("./mat3"));
    var l = d("./utils");
    function k(b) {
      if (b && b.__esModule) {
        return b;
      } else {
        return {
          default: b
        };
      }
    }
    function n(c, a) {
      return (n = Object.setPrototypeOf || function (c, a) {
        c.__proto__ = a;
        return c;
      })(c, a);
    }
    var q = 0;
    var s = 0;
    var t = 0;
    var u = 0;
    var y = function (e) {
      var c;
      var g;
      g = e;
      (c = m).prototype = Object.create(g.prototype);
      c.prototype.constructor = c;
      n(c, g);
      var k = m.prototype;
      function m(a, h, i, j) {
        var k;
        if (a === undefined) {
          a = 0;
        }
        if (h === undefined) {
          h = 0;
        }
        if (i === undefined) {
          i = 0;
        }
        if (j === undefined) {
          j = 1;
        }
        (k = e.call(this) || this).x = undefined;
        k.y = undefined;
        k.z = undefined;
        k.w = undefined;
        if (a && typeof a == "object") {
          k.x = a.x;
          k.y = a.y;
          k.z = a.z;
          k.w = a.w;
        } else {
          k.x = a;
          k.y = h;
          k.z = i;
          k.w = j;
        }
        return k;
      }
      k.mul = function (c, a) {
        return m.multiply(a || new m(), this, c);
      };
      m.clone = function (b) {
        return new m(b.x, b.y, b.z, b.w);
      };
      m.copy = function (c, a) {
        c.x = a.x;
        c.y = a.y;
        c.z = a.z;
        c.w = a.w;
        return c;
      };
      m.set = function (f, a, b, c, d) {
        f.x = a;
        f.y = b;
        f.z = c;
        f.w = d;
        return f;
      };
      m.identity = function (b) {
        b.x = 0;
        b.y = 0;
        b.z = 0;
        b.w = 1;
        return b;
      };
      m.rotationTo = function (e, a, b) {
        var c = i.default.dot(a, b);
        if (c < -0.999999) {
          i.default.cross(p, i.default.RIGHT, a);
          if (p.mag() < 0.000001) {
            i.default.cross(p, i.default.UP, a);
          }
          i.default.normalize(p, p);
          m.fromAxisAngle(e, p, Math.PI);
          return e;
        } else if (c > 0.999999) {
          e.x = 0;
          e.y = 0;
          e.z = 0;
          e.w = 1;
          return e;
        } else {
          i.default.cross(p, a, b);
          e.x = p.x;
          e.y = p.y;
          e.z = p.z;
          e.w = 1 + c;
          return m.normalize(e, e);
        }
      };
      m.getAxisAngle = function (e, a) {
        var b = Math.acos(a.w) * 2;
        var c = Math.sin(b / 2);
        if (c !== 0) {
          e.x = a.x / c;
          e.y = a.y / c;
          e.z = a.z / c;
        } else {
          e.x = 1;
          e.y = 0;
          e.z = 0;
        }
        return b;
      };
      m.multiply = function (d, a, b) {
        q = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;
        s = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;
        t = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;
        u = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;
        d.x = q;
        d.y = s;
        d.z = t;
        d.w = u;
        return d;
      };
      m.multiplyScalar = function (d, a, b) {
        d.x = a.x * b;
        d.y = a.y * b;
        d.z = a.z * b;
        d.w = a.w * b;
        return d;
      };
      m.scaleAndAdd = function (e, a, b, c) {
        e.x = a.x + b.x * c;
        e.y = a.y + b.y * c;
        e.z = a.z + b.z * c;
        e.w = a.w + b.w * c;
        return e;
      };
      m.rotateX = function (f, a, b) {
        var g = Math.sin(b *= 0.5);
        var d = Math.cos(b);
        q = a.x * d + a.w * g;
        s = a.y * d + a.z * g;
        t = a.z * d - a.y * g;
        u = a.w * d - a.x * g;
        f.x = q;
        f.y = s;
        f.z = t;
        f.w = u;
        return f;
      };
      m.rotateY = function (f, a, b) {
        var g = Math.sin(b *= 0.5);
        var d = Math.cos(b);
        q = a.x * d - a.z * g;
        s = a.y * d + a.w * g;
        t = a.z * d + a.x * g;
        u = a.w * d - a.y * g;
        f.x = q;
        f.y = s;
        f.z = t;
        f.w = u;
        return f;
      };
      m.rotateZ = function (f, a, b) {
        var g = Math.sin(b *= 0.5);
        var d = Math.cos(b);
        q = a.x * d + a.y * g;
        s = a.y * d - a.x * g;
        t = a.z * d + a.w * g;
        u = a.w * d - a.z * g;
        f.x = q;
        f.y = s;
        f.z = t;
        f.w = u;
        return f;
      };
      m.rotateAround = function (e, a, b, c) {
        m.invert(r, a);
        i.default.transformQuat(p, b, r);
        m.fromAxisAngle(r, p, c);
        m.multiply(e, a, r);
        return e;
      };
      m.rotateAroundLocal = function (e, a, b, c) {
        m.fromAxisAngle(r, b, c);
        m.multiply(e, a, r);
        return e;
      };
      m.calculateW = function (c, a) {
        c.x = a.x;
        c.y = a.y;
        c.z = a.z;
        c.w = Math.sqrt(Math.abs(1 - a.x * a.x - a.y * a.y - a.z * a.z));
        return c;
      };
      m.dot = function (c, a) {
        return c.x * a.x + c.y * a.y + c.z * a.z + c.w * a.w;
      };
      m.lerp = function (e, a, b, c) {
        e.x = a.x + c * (b.x - a.x);
        e.y = a.y + c * (b.y - a.y);
        e.z = a.z + c * (b.z - a.z);
        e.w = a.w + c * (b.w - a.w);
        return e;
      };
      m.slerp = function (a, b, c, d) {
        var e = 0;
        var f = 0;
        var l = b.x * c.x + b.y * c.y + b.z * c.z + b.w * c.w;
        if (l < 0) {
          l = -l;
          c.x = -c.x;
          c.y = -c.y;
          c.z = -c.z;
          c.w = -c.w;
        }
        if (1 - l > 0.000001) {
          var m = Math.acos(l);
          var j = Math.sin(m);
          e = Math.sin((1 - d) * m) / j;
          f = Math.sin(d * m) / j;
        } else {
          e = 1 - d;
          f = d;
        }
        a.x = e * b.x + f * c.x;
        a.y = e * b.y + f * c.y;
        a.z = e * b.z + f * c.z;
        a.w = e * b.w + f * c.w;
        return a;
      };
      m.sqlerp = function (h, b, c, d, e, f) {
        m.slerp(r, b, e, f);
        m.slerp(a, c, d, f);
        m.slerp(h, r, a, f * 2 * (1 - f));
        return h;
      };
      m.invert = function (e, a) {
        var b = a.x * a.x + a.y * a.y + a.z * a.z + a.w * a.w;
        var c = b ? 1 / b : 0;
        e.x = -a.x * c;
        e.y = -a.y * c;
        e.z = -a.z * c;
        e.w = a.w * c;
        return e;
      };
      m.conjugate = function (c, a) {
        c.x = -a.x;
        c.y = -a.y;
        c.z = -a.z;
        c.w = a.w;
        return c;
      };
      m.len = function (b) {
        return Math.sqrt(b.x * b.x + b.y * b.y + b.z * b.z + b.w * b.w);
      };
      m.lengthSqr = function (b) {
        return b.x * b.x + b.y * b.y + b.z * b.z + b.w * b.w;
      };
      m.normalize = function (d, a) {
        var b = a.x * a.x + a.y * a.y + a.z * a.z + a.w * a.w;
        if (b > 0) {
          b = 1 / Math.sqrt(b);
          d.x = a.x * b;
          d.y = a.y * b;
          d.z = a.z * b;
          d.w = a.w * b;
        }
        return d;
      };
      m.fromAxes = function (e, a, b, c) {
        j.default.set(v, a.x, a.y, a.z, b.x, b.y, b.z, c.x, c.y, c.z);
        return m.normalize(e, m.fromMat3(e, v));
      };
      m.fromViewUp = function (d, a, b) {
        j.default.fromViewUp(v, a, b);
        return m.normalize(d, m.fromMat3(d, v));
      };
      m.fromAxisAngle = function (e, a, b) {
        var f = Math.sin(b *= 0.5);
        e.x = f * a.x;
        e.y = f * a.y;
        e.z = f * a.z;
        e.w = Math.cos(b);
        return e;
      };
      m.fromAngleZ = function (c, a) {
        a *= A;
        c.x = c.y = 0;
        c.z = Math.sin(a);
        c.w = Math.cos(a);
        return c;
      };
      m.fromMat3 = function (r, b) {
        var g = b.m;
        var e = g[0];
        var i = g[1];
        var j = g[2];
        var k = g[3];
        var m = g[4];
        var a = g[5];
        var n = g[6];
        var c = g[7];
        var l = g[8];
        var h = e + m + l;
        if (h > 0) {
          var o = 0.5 / Math.sqrt(h + 1);
          r.w = 0.25 / o;
          r.x = (a - c) * o;
          r.y = (n - j) * o;
          r.z = (i - k) * o;
        } else if (e > m && e > l) {
          var f = Math.sqrt(1 + e - m - l) * 2;
          r.w = (a - c) / f;
          r.x = f * 0.25;
          r.y = (k + i) / f;
          r.z = (n + j) / f;
        } else if (m > l) {
          var d = Math.sqrt(1 + m - e - l) * 2;
          r.w = (n - j) / d;
          r.x = (k + i) / d;
          r.y = d * 0.25;
          r.z = (c + a) / d;
        } else {
          var q = Math.sqrt(1 + l - e - m) * 2;
          r.w = (i - k) / q;
          r.x = (n + j) / q;
          r.y = (c + a) / q;
          r.z = q * 0.25;
        }
        return r;
      };
      m.fromEuler = function (e, b, i, l) {
        i *= A;
        l *= A;
        var m = Math.sin(b *= A);
        var h = Math.cos(b);
        var j = Math.sin(i);
        var k = Math.cos(i);
        var a = Math.sin(l);
        var n = Math.cos(l);
        e.x = m * k * n + h * j * a;
        e.y = h * j * n + m * k * a;
        e.z = h * k * a - m * j * n;
        e.w = h * k * n - m * j * a;
        return e;
      };
      m.toAxisX = function (e, a) {
        var b = a.y * 2;
        var c = a.z * 2;
        e.x = 1 - b * a.y - c * a.z;
        e.y = b * a.x + c * a.w;
        e.z = c * a.x + b * a.w;
        return e;
      };
      m.toAxisY = function (f, a) {
        var b = a.x * 2;
        var c = a.y * 2;
        var d = a.z * 2;
        f.x = c * a.x - d * a.w;
        f.y = 1 - b * a.x - d * a.z;
        f.z = d * a.y + b * a.w;
        return f;
      };
      m.toAxisZ = function (f, a) {
        var b = a.x * 2;
        var c = a.y * 2;
        var d = a.z * 2;
        f.x = d * a.x - c * a.w;
        f.y = d * a.y - b * a.w;
        f.z = 1 - b * a.x - c * a.y;
        return f;
      };
      m.toEuler = function (c, b, g) {
        var e = b.x;
        var h = b.y;
        var i = b.z;
        var j = b.w;
        var k = 0;
        var m = 0;
        var r = 0;
        var s = e * h + i * j;
        if (s > 0.499999) {
          k = 0;
          m = (0, l.toDegree)(Math.atan2(e, j) * 2);
          r = 90;
        } else if (s < -0.499999) {
          k = 0;
          m = -(0, l.toDegree)(Math.atan2(e, j) * 2);
          r = -90;
        } else {
          var p = e * e;
          var q = h * h;
          var f = i * i;
          k = (0, l.toDegree)(Math.atan2(e * 2 * j - h * 2 * i, 1 - p * 2 - f * 2));
          m = (0, l.toDegree)(Math.atan2(h * 2 * j - e * 2 * i, 1 - q * 2 - f * 2));
          r = (0, l.toDegree)(Math.asin(s * 2));
          if (g) {
            k = Math.sign(k + 0.000001) * -180 + k;
            m = Math.sign(m + 0.000001) * -180 + m;
            r = Math.sign(r + 0.000001) * 180 - r;
          }
        }
        c.x = k;
        c.y = m;
        c.z = r;
        return c;
      };
      m.strictEquals = function (c, a) {
        return c.x === a.x && c.y === a.y && c.z === a.z && c.w === a.w;
      };
      m.equals = function (d, a, b) {
        if (b === undefined) {
          b = l.EPSILON;
        }
        return Math.abs(d.x - a.x) <= b * Math.max(1, Math.abs(d.x), Math.abs(a.x)) && Math.abs(d.y - a.y) <= b * Math.max(1, Math.abs(d.y), Math.abs(a.y)) && Math.abs(d.z - a.z) <= b * Math.max(1, Math.abs(d.z), Math.abs(a.z)) && Math.abs(d.w - a.w) <= b * Math.max(1, Math.abs(d.w), Math.abs(a.w));
      };
      m.toArray = function (d, a, b) {
        if (b === undefined) {
          b = 0;
        }
        d[b + 0] = a.x;
        d[b + 1] = a.y;
        d[b + 2] = a.z;
        d[b + 3] = a.w;
        return d;
      };
      m.fromArray = function (d, a, b) {
        if (b === undefined) {
          b = 0;
        }
        d.x = a[b + 0];
        d.y = a[b + 1];
        d.z = a[b + 2];
        d.w = a[b + 3];
        return d;
      };
      k.clone = function () {
        return new m(this.x, this.y, this.z, this.w);
      };
      k.set = function (b) {
        this.x = b.x;
        this.y = b.y;
        this.z = b.z;
        this.w = b.w;
        return this;
      };
      k.equals = function (b) {
        return b && this.x === b.x && this.y === b.y && this.z === b.z && this.w === b.w;
      };
      k.toEuler = function (b) {
        return m.toEuler(b, this);
      };
      k.fromEuler = function (b) {
        return m.fromEuler(this, b.x, b.y, b.z);
      };
      k.lerp = function (d, a, b) {
        b = b || new m();
        m.slerp(b, this, d, a);
        return b;
      };
      k.multiply = function (b) {
        return m.multiply(this, this, b);
      };
      k.rotateAround = function (e, a, b, c) {
        c = c || new m();
        return m.rotateAround(c, e, a, b);
      };
      return m;
    }(e.default);
    f.default = y;
    y.mul = y.multiply;
    y.scale = y.multiplyScalar;
    y.mag = y.len;
    y.IDENTITY = Object.freeze(new y());
    var r = new y();
    var a = new y();
    var p = new i.default();
    var v = new j.default();
    var A = Math.PI * 0.5 / 180;
    h.default.fastDefine("cc.Quat", y, {
      x: 0,
      y: 0,
      z: 0,
      w: 1
    });
    cc.quat = function (e, a, b, c) {
      return new y(e, a, b, c);
    };
    cc.Quat = y;
    b.exports = f.default;
  }, {
    "../platform/CCClass": 162,
    "./mat3": 252,
    "./utils": 258,
    "./value-type": 259,
    "./vec3": 261
  }],
  255: [function (h, b, d) {
    "use strict";

    d.__esModule = true;
    d.default = undefined;
    var e = j(h("./value-type"));
    var f = j(h("../platform/CCClass"));
    var g = j(h("./vec2"));
    var i = j(h("./size"));
    function j(b) {
      if (b && b.__esModule) {
        return b;
      } else {
        return {
          default: b
        };
      }
    }
    function a(e, a) {
      for (var b = 0; b < a.length; b++) {
        var f = a[b];
        f.enumerable = f.enumerable || false;
        f.configurable = true;
        if ("value" in f) {
          f.writable = true;
        }
        Object.defineProperty(e, f.key, f);
      }
    }
    function k(c, a) {
      return (k = Object.setPrototypeOf || function (c, a) {
        c.__proto__ = a;
        return c;
      })(c, a);
    }
    var l = function (e) {
      var c;
      var h;
      function j(a, h, i, j) {
        var k;
        if (a === undefined) {
          a = 0;
        }
        if (h === undefined) {
          h = 0;
        }
        if (i === undefined) {
          i = 0;
        }
        if (j === undefined) {
          j = 0;
        }
        (k = e.call(this) || this).x = undefined;
        k.y = undefined;
        k.width = undefined;
        k.height = undefined;
        if (a && typeof a == "object") {
          h = a.y;
          i = a.width;
          j = a.height;
          a = a.x;
        }
        k.x = a || 0;
        k.y = h || 0;
        k.width = i || 0;
        k.height = j || 0;
        return k;
      }
      h = e;
      (c = j).prototype = Object.create(h.prototype);
      c.prototype.constructor = c;
      k(c, h);
      j.fromMinMax = function (e, a) {
        var b = Math.min(e.x, a.x);
        var c = Math.min(e.y, a.y);
        return new j(b, c, Math.max(e.x, a.x) - b, Math.max(e.y, a.y) - c);
      };
      var f;
      var n;
      var o = j.prototype;
      o.clone = function () {
        return new j(this.x, this.y, this.width, this.height);
      };
      o.equals = function (b) {
        return b && this.x === b.x && this.y === b.y && this.width === b.width && this.height === b.height;
      };
      o.lerp = function (f, b, c) {
        c = c || new j();
        var i = this.x;
        var e = this.y;
        var g = this.width;
        var h = this.height;
        c.x = i + (f.x - i) * b;
        c.y = e + (f.y - e) * b;
        c.width = g + (f.width - g) * b;
        c.height = h + (f.height - h) * b;
        return c;
      };
      o.set = function (b) {
        this.x = b.x;
        this.y = b.y;
        this.width = b.width;
        this.height = b.height;
        return this;
      };
      o.intersects = function (f) {
        var a = this.x + this.width;
        var b = this.y + this.height;
        var c = f.x + f.width;
        var d = f.y + f.height;
        return !(a < f.x || c < this.x || b < f.y || d < this.y);
      };
      o.intersection = function (k, b) {
        var d = this.x;
        var e = this.y;
        var f = this.x + this.width;
        var g = this.y + this.height;
        var h = b.x;
        var i = b.y;
        var a = b.x + b.width;
        var j = b.y + b.height;
        k.x = Math.max(d, h);
        k.y = Math.max(e, i);
        k.width = Math.min(f, a) - k.x;
        k.height = Math.min(g, j) - k.y;
        return k;
      };
      o.contains = function (b) {
        return this.x <= b.x && this.x + this.width >= b.x && this.y <= b.y && this.y + this.height >= b.y;
      };
      o.containsRect = function (b) {
        return this.x <= b.x && this.x + this.width >= b.x + b.width && this.y <= b.y && this.y + this.height >= b.y + b.height;
      };
      o.union = function (k, b) {
        var d = this.x;
        var e = this.y;
        var f = this.width;
        var g = this.height;
        var h = b.x;
        var i = b.y;
        var a = b.width;
        var j = b.height;
        k.x = Math.min(d, h);
        k.y = Math.min(e, i);
        k.width = Math.max(d + f, h + a) - k.x;
        k.height = Math.max(e + g, i + j) - k.y;
        return k;
      };
      o.transformMat4 = function (m, b) {
        var j = this.x;
        var e = this.y;
        var i = j + this.width;
        var k = e + this.height;
        var n = b.m;
        var q = n[0] * j + n[4] * e + n[12];
        var a = n[1] * j + n[5] * e + n[13];
        var o = n[0] * i + n[4] * e + n[12];
        var c = n[1] * i + n[5] * e + n[13];
        var l = n[0] * j + n[4] * k + n[12];
        var h = n[1] * j + n[5] * k + n[13];
        var r = n[0] * i + n[4] * k + n[12];
        var f = n[1] * i + n[5] * k + n[13];
        var d = Math.min(q, o, l, r);
        var s = Math.max(q, o, l, r);
        var p = Math.min(a, c, h, f);
        var t = Math.max(a, c, h, f);
        m.x = d;
        m.y = p;
        m.width = s - d;
        m.height = t - p;
        return m;
      };
      o.toString = function () {
        return "(" + this.x.toFixed(2) + ", " + this.y.toFixed(2) + ", " + this.width.toFixed(2) + ", " + this.height.toFixed(2) + ")";
      };
      f = j;
      if (n = [{
        key: "xMin",
        get: function () {
          return this.x;
        },
        set: function (b) {
          this.width += this.x - b;
          this.x = b;
        }
      }, {
        key: "yMin",
        get: function () {
          return this.y;
        },
        set: function (b) {
          this.height += this.y - b;
          this.y = b;
        }
      }, {
        key: "xMax",
        get: function () {
          return this.x + this.width;
        },
        set: function (b) {
          this.width = b - this.x;
        }
      }, {
        key: "yMax",
        get: function () {
          return this.y + this.height;
        },
        set: function (b) {
          this.height = b - this.y;
        }
      }, {
        key: "center",
        get: function () {
          return new g.default(this.x + this.width * 0.5, this.y + this.height * 0.5);
        },
        set: function (b) {
          this.x = b.x - this.width * 0.5;
          this.y = b.y - this.height * 0.5;
        }
      }, {
        key: "origin",
        get: function () {
          return new g.default(this.x, this.y);
        },
        set: function (b) {
          this.x = b.x;
          this.y = b.y;
        }
      }, {
        key: "size",
        get: function () {
          return new i.default(this.width, this.height);
        },
        set: function (b) {
          this.width = b.width;
          this.height = b.height;
        }
      }]) {
        a(f.prototype, n);
      }
      Object.defineProperty(f, "prototype", {
        writable: false
      });
      return j;
    }(e.default);
    d.default = l;
    f.default.fastDefine("cc.Rect", l, {
      x: 0,
      y: 0,
      width: 0,
      height: 0
    });
    cc.Rect = l;
    cc.rect = function (e, a, b, c) {
      return new l(e, a, b, c);
    };
    b.exports = d.default;
  }, {
    "../platform/CCClass": 162,
    "./size": 256,
    "./value-type": 259,
    "./vec2": 260
  }],
  256: [function (c, b, d) {
    "use strict";

    d.__esModule = true;
    d.default = undefined;
    var e = g(c("./value-type"));
    var f = g(c("../platform/CCClass"));
    function g(b) {
      if (b && b.__esModule) {
        return b;
      } else {
        return {
          default: b
        };
      }
    }
    function k(e, a) {
      for (var b = 0; b < a.length; b++) {
        var f = a[b];
        f.enumerable = f.enumerable || false;
        f.configurable = true;
        if ("value" in f) {
          f.writable = true;
        }
        Object.defineProperty(e, f.key, f);
      }
    }
    function i(a, b) {
      return (i = Object.setPrototypeOf || function (c, a) {
        c.__proto__ = a;
        return c;
      })(a, b);
    }
    var h = function (e) {
      var a;
      var b;
      function l(b, f) {
        var g;
        if (b === undefined) {
          b = 0;
        }
        if (f === undefined) {
          f = 0;
        }
        (g = e.call(this) || this).width = undefined;
        g.height = undefined;
        if (b && typeof b == "object") {
          g.width = b.width;
          g.height = b.height;
        } else {
          g.width = b || 0;
          g.height = f || 0;
        }
        return g;
      }
      b = e;
      (a = l).prototype = Object.create(b.prototype);
      a.prototype.constructor = a;
      i(a, b);
      var c;
      var g;
      var m = l.prototype;
      m.clone = function () {
        return new l(this.width, this.height);
      };
      m.equals = function (b) {
        return b && this.width === b.width && this.height === b.height;
      };
      m.lerp = function (f, a, b) {
        b = b || new l();
        var g = this.width;
        var d = this.height;
        b.width = g + (f.width - g) * a;
        b.height = d + (f.height - d) * a;
        return b;
      };
      m.set = function (b) {
        this.width = b.width;
        this.height = b.height;
        return this;
      };
      m.toString = function () {
        return "(" + this.width.toFixed(2) + ", " + this.height.toFixed(2) + ")";
      };
      c = l;
      g = [{
        key: "ZERO",
        get: function () {
          return new l();
        }
      }];
      if (null) {
        k(c.prototype, null);
      }
      if (g) {
        k(c, g);
      }
      Object.defineProperty(c, "prototype", {
        writable: false
      });
      return l;
    }(e.default);
    d.default = h;
    h.ZERO_R = h.ZERO;
    f.default.fastDefine("cc.Size", h, {
      width: 0,
      height: 0
    });
    cc.size = function (c, a) {
      return new h(c, a);
    };
    cc.Size = h;
    b.exports = d.default;
  }, {
    "../platform/CCClass": 162,
    "./value-type": 259
  }],
  257: [function (a, b, c) {
    "use strict";

    c.__esModule = true;
    c.default = undefined;
    var d;
    var i = (d = a("./quat")) && d.__esModule ? d : {
      default: d
    };
    var f = new i.default();
    var g = function () {
      function g() {}
      g.toRotation = function (c, a) {
        c.x = a[3];
        c.y = a[4];
        c.z = a[5];
        c.w = a[6];
        return c;
      };
      g.fromRotation = function (c, a) {
        c[3] = a.x;
        c[4] = a.y;
        c[5] = a.z;
        c[6] = a.w;
        return c;
      };
      g.toEuler = function (b, a) {
        g.toRotation(f, a);
        i.default.toEuler(b, f);
        return b;
      };
      g.fromEuler = function (b, a) {
        i.default.fromEuler(f, a.x, a.y, a.z);
        g.fromRotation(b, f);
        return b;
      };
      g.fromEulerNumber = function (a, b, c, d) {
        i.default.fromEuler(f, b, c, d);
        g.fromRotation(a, f);
        return a;
      };
      g.toScale = function (c, a) {
        c.x = a[7];
        c.y = a[8];
        c.z = a[9];
        return c;
      };
      g.fromScale = function (c, a) {
        c[7] = a.x;
        c[8] = a.y;
        c[9] = a.z;
        return c;
      };
      g.toPosition = function (c, a) {
        c.x = a[0];
        c.y = a[1];
        c.z = a[2];
        return c;
      };
      g.fromPosition = function (c, a) {
        c[0] = a.x;
        c[1] = a.y;
        c[2] = a.z;
        return c;
      };
      g.fromAngleZ = function (b, a) {
        i.default.fromAngleZ(f, a);
        g.fromRotation(b, f);
        return b;
      };
      g.toMat4 = function (w, b) {
        var j = b[3];
        var e = b[4];
        var i = b[5];
        var k = b[6];
        var n = j + j;
        var q = e + e;
        var a = i + i;
        var o = j * n;
        var c = j * q;
        var l = j * a;
        var h = e * q;
        var r = e * a;
        var f = i * a;
        var d = k * n;
        var s = k * q;
        var p = k * a;
        var t = b[7];
        var g = b[8];
        var m = b[9];
        var u = w.m;
        u[0] = (1 - (h + f)) * t;
        u[1] = (c + p) * t;
        u[2] = (l - s) * t;
        u[3] = 0;
        u[4] = (c - p) * g;
        u[5] = (1 - (o + f)) * g;
        u[6] = (r + d) * g;
        u[7] = 0;
        u[8] = (l + s) * m;
        u[9] = (r - d) * m;
        u[10] = (1 - (o + h)) * m;
        u[11] = 0;
        u[12] = b[0];
        u[13] = b[1];
        u[14] = b[2];
        u[15] = 1;
        return w;
      };
      return g;
    }();
    c.default = g;
    cc.Trs = g;
    b.exports = c.default;
  }, {
    "./quat": 254
  }],
  258: [function (m, b, d) {
    "use strict";

    d.__esModule = true;
    d.INT_MIN = d.INT_MAX = d.INT_BITS = d.FLOAT_BYTES = d.FLOAT_ARRAY_TYPE = d.EPSILON = undefined;
    d.approx = function (d, a, b) {
      b = b || g;
      return Math.abs(d - a) <= b;
    };
    d.clamp = function (d, a, b) {
      if (d < a) {
        return a;
      } else if (d > b) {
        return b;
      } else {
        return d;
      }
    };
    d.clamp01 = function (b) {
      if (b < 0) {
        return 0;
      } else if (b > 1) {
        return 1;
      } else {
        return b;
      }
    };
    d.equals = function (c, a) {
      return Math.abs(c - a) <= g * Math.max(1, Math.abs(c), Math.abs(a));
    };
    d.inverseLerp = function (d, a, b) {
      return (b - d) / (a - d);
    };
    d.lerp = function (d, a, b) {
      return d + (a - d) * b;
    };
    d.nextPow2 = function (b) {
      --b;
      b |= b >> 1;
      b |= b >> 2;
      b |= b >> 4;
      b |= b >> 8;
      b |= b >> 16;
      return ++b;
    };
    d.pingPong = function (d, e) {
      d = c(d, e * 2);
      return e - Math.abs(d - e);
    };
    d.pseudoRandom = k;
    d.pseudoRandomRange = o;
    d.pseudoRandomRangeInt = function (d, a, b) {
      return Math.floor(o(d, a, b));
    };
    d.random = undefined;
    d.randomRange = n;
    d.randomRangeInt = function (c, a) {
      return Math.floor(n(c, a));
    };
    d.repeat = c;
    d.sign = function (b) {
      return (b > 0) - (b < 0);
    };
    d.toDegree = function (b) {
      return b * f;
    };
    d.toRadian = function (b) {
      return b * e;
    };
    var e = Math.PI / 180;
    var f = 180 / Math.PI;
    var g = 0.000001;
    d.EPSILON = g;
    d.INT_BITS = 32;
    d.INT_MAX = 2147483647;
    d.INT_MIN = -1 << 31;
    var j = Float64Array;
    d.FLOAT_ARRAY_TYPE = j;
    d.FLOAT_BYTES = 8;
    var i = Math.random;
    function n(c, a) {
      return Math.random() * (a - c) + c;
    }
    function k(b) {
      return (b = (b * 9301 + 49297) % 233280) / 233280;
    }
    function o(c, a, b) {
      return k(c) * (b - a) + a;
    }
    function c(c, a) {
      return c - Math.floor(c / a) * a;
    }
    d.random = i;
  }, {}],
  259: [function (g, a, b) {
    "use strict";

    b.__esModule = true;
    b.default = undefined;
    var c;
    var h = (c = g("../platform/js")) && c.__esModule ? c : {
      default: c
    };
    var e = function () {
      function c() {}
      var a = c.prototype;
      a.clone = function () {
        return null;
      };
      a.equals = function () {
        return false;
      };
      a.lerp = function () {
        return this.clone();
      };
      a.set = function () {};
      a.toString = function () {
        return "" + {};
      };
      return c;
    }();
    b.default = e;
    h.default.setClassName("cc.ValueType", e);
    cc.ValueType = e;
    a.exports = b.default;
  }, {
    "../platform/js": 183
  }],
  260: [function (f, b, g) {
    "use strict";

    g.__esModule = true;
    g.default = undefined;
    var e = k(f("./value-type"));
    var h = k(f("../platform/CCClass"));
    var i = k(f("../utils/misc"));
    var j = f("./utils");
    function k(b) {
      if (b && b.__esModule) {
        return b;
      } else {
        return {
          default: b
        };
      }
    }
    function a(e, a) {
      for (var b = 0; b < a.length; b++) {
        var f = a[b];
        f.enumerable = f.enumerable || false;
        f.configurable = true;
        if ("value" in f) {
          f.writable = true;
        }
        Object.defineProperty(e, f.key, f);
      }
    }
    function m(c, a) {
      return (m = Object.setPrototypeOf || function (c, a) {
        c.__proto__ = a;
        return c;
      })(c, a);
    }
    var l = 0;
    var o = 0;
    var s = function (e) {
      var c;
      var d;
      d = e;
      (c = q).prototype = Object.create(d.prototype);
      c.prototype.constructor = c;
      m(c, d);
      var f;
      var k;
      var p = q.prototype;
      function q(a, f) {
        var g;
        if (a === undefined) {
          a = 0;
        }
        if (f === undefined) {
          f = 0;
        }
        (g = e.call(this) || this).mag = q.prototype.len;
        g.magSqr = q.prototype.lengthSqr;
        g.subSelf = q.prototype.subtract;
        g.mulSelf = q.prototype.multiplyScalar;
        g.divSelf = q.prototype.divide;
        g.scaleSelf = q.prototype.multiply;
        g.negSelf = q.prototype.negate;
        g.x = undefined;
        g.y = undefined;
        g.z = 0;
        if (a && typeof a == "object") {
          g.x = a.x || 0;
          g.y = a.y || 0;
        } else {
          g.x = a || 0;
          g.y = f || 0;
        }
        return g;
      }
      p.sub = function (c, a) {
        return q.subtract(a || new q(), this, c);
      };
      p.mul = function (c, a) {
        return q.multiplyScalar(a || new q(), this, c);
      };
      p.div = function (c, a) {
        return q.multiplyScalar(a || new q(), this, 1 / c);
      };
      p.scale = function (c, a) {
        return q.multiply(a || new q(), this, c);
      };
      p.neg = function (b) {
        return q.negate(b || new q(), this);
      };
      q.clone = function (b) {
        return new q(b.x, b.y);
      };
      q.copy = function (c, a) {
        c.x = a.x;
        c.y = a.y;
        return c;
      };
      q.set = function (d, a, b) {
        d.x = a;
        d.y = b;
        return d;
      };
      q.add = function (d, a, b) {
        d.x = a.x + b.x;
        d.y = a.y + b.y;
        return d;
      };
      q.subtract = function (d, a, b) {
        d.x = a.x - b.x;
        d.y = a.y - b.y;
        return d;
      };
      q.multiply = function (d, a, b) {
        d.x = a.x * b.x;
        d.y = a.y * b.y;
        return d;
      };
      q.divide = function (d, a, b) {
        d.x = a.x / b.x;
        d.y = a.y / b.y;
        return d;
      };
      q.ceil = function (c, a) {
        c.x = Math.ceil(a.x);
        c.y = Math.ceil(a.y);
        return c;
      };
      q.floor = function (c, a) {
        c.x = Math.floor(a.x);
        c.y = Math.floor(a.y);
        return c;
      };
      q.min = function (d, a, b) {
        d.x = Math.min(a.x, b.x);
        d.y = Math.min(a.y, b.y);
        return d;
      };
      q.max = function (d, a, b) {
        d.x = Math.max(a.x, b.x);
        d.y = Math.max(a.y, b.y);
        return d;
      };
      q.round = function (c, a) {
        c.x = Math.round(a.x);
        c.y = Math.round(a.y);
        return c;
      };
      q.multiplyScalar = function (d, a, b) {
        d.x = a.x * b;
        d.y = a.y * b;
        return d;
      };
      q.scaleAndAdd = function (e, a, b, c) {
        e.x = a.x + b.x * c;
        e.y = a.y + b.y * c;
        return e;
      };
      q.distance = function (c, a) {
        l = a.x - c.x;
        o = a.y - c.y;
        return Math.sqrt(l * l + o * o);
      };
      q.squaredDistance = function (c, a) {
        l = a.x - c.x;
        o = a.y - c.y;
        return l * l + o * o;
      };
      q.len = function (b) {
        l = b.x;
        o = b.y;
        return Math.sqrt(l * l + o * o);
      };
      q.lengthSqr = function (b) {
        l = b.x;
        o = b.y;
        return l * l + o * o;
      };
      q.negate = function (c, a) {
        c.x = -a.x;
        c.y = -a.y;
        return c;
      };
      q.inverse = function (c, a) {
        c.x = 1 / a.x;
        c.y = 1 / a.y;
        return c;
      };
      q.inverseSafe = function (c, a) {
        l = a.x;
        o = a.y;
        if (Math.abs(l) < j.EPSILON) {
          c.x = 0;
        } else {
          c.x = 1 / l;
        }
        if (Math.abs(o) < j.EPSILON) {
          c.y = 0;
        } else {
          c.y = 1 / o;
        }
        return c;
      };
      q.normalize = function (d, a) {
        l = a.x;
        o = a.y;
        var b = l * l + o * o;
        if (b > 0) {
          b = 1 / Math.sqrt(b);
          d.x = l * b;
          d.y = o * b;
        }
        return d;
      };
      q.dot = function (c, a) {
        return c.x * a.x + c.y * a.y;
      };
      q.cross = function (d, a, b) {
        d.x = d.y = 0;
        d.z = a.x * b.y - a.y * b.x;
        return d;
      };
      q.lerp = function (e, a, b, c) {
        l = a.x;
        o = a.y;
        e.x = l + c * (b.x - l);
        e.y = o + c * (b.y - o);
        return e;
      };
      q.random = function (d, a) {
        a = a || 1;
        var e = (0, j.random)() * 2 * Math.PI;
        d.x = Math.cos(e) * a;
        d.y = Math.sin(e) * a;
        return d;
      };
      q.transformMat3 = function (e, a, b) {
        l = a.x;
        o = a.y;
        var c = b.m;
        e.x = c[0] * l + c[3] * o + c[6];
        e.y = c[1] * l + c[4] * o + c[7];
        return e;
      };
      q.transformMat4 = function (e, a, b) {
        l = a.x;
        o = a.y;
        var c = b.m;
        e.x = c[0] * l + c[4] * o + c[12];
        e.y = c[1] * l + c[5] * o + c[13];
        return e;
      };
      q.strictEquals = function (c, a) {
        return c.x === a.x && c.y === a.y;
      };
      q.equals = function (d, a, b) {
        if (b === undefined) {
          b = j.EPSILON;
        }
        return Math.abs(d.x - a.x) <= b * Math.max(1, Math.abs(d.x), Math.abs(a.x)) && Math.abs(d.y - a.y) <= b * Math.max(1, Math.abs(d.y), Math.abs(a.y));
      };
      q.angle = function (d, a) {
        q.normalize(n, d);
        q.normalize(r, a);
        var b = q.dot(n, r);
        if (b > 1) {
          return 0;
        } else if (b < -1) {
          return Math.PI;
        } else {
          return Math.acos(b);
        }
      };
      q.toArray = function (d, a, b) {
        if (b === undefined) {
          b = 0;
        }
        d[b + 0] = a.x;
        d[b + 1] = a.y;
        return d;
      };
      q.fromArray = function (d, a, b) {
        if (b === undefined) {
          b = 0;
        }
        d.x = a[b + 0];
        d.y = a[b + 1];
        return d;
      };
      p.clone = function () {
        return new q(this.x, this.y);
      };
      p.set = function (b) {
        this.x = b.x;
        this.y = b.y;
        return this;
      };
      p.equals = function (b) {
        return b && this.x === b.x && this.y === b.y;
      };
      p.fuzzyEquals = function (c, a) {
        return this.x - a <= c.x && c.x <= this.x + a && this.y - a <= c.y && c.y <= this.y + a;
      };
      p.toString = function () {
        return "(" + this.x.toFixed(2) + ", " + this.y.toFixed(2) + ")";
      };
      p.lerp = function (f, a, b) {
        b = b || new q();
        var g = this.x;
        var d = this.y;
        b.x = g + (f.x - g) * a;
        b.y = d + (f.y - d) * a;
        return b;
      };
      p.clampf = function (c, a) {
        this.x = i.default.clampf(this.x, c.x, a.x);
        this.y = i.default.clampf(this.y, c.y, a.y);
        return this;
      };
      p.add = function (c, a) {
        (a = a || new q()).x = this.x + c.x;
        a.y = this.y + c.y;
        return a;
      };
      p.addSelf = function (b) {
        this.x += b.x;
        this.y += b.y;
        return this;
      };
      p.subtract = function (b) {
        this.x -= b.x;
        this.y -= b.y;
        return this;
      };
      p.multiplyScalar = function (b) {
        this.x *= b;
        this.y *= b;
        return this;
      };
      p.multiply = function (b) {
        this.x *= b.x;
        this.y *= b.y;
        return this;
      };
      p.divide = function (b) {
        this.x /= b;
        this.y /= b;
        return this;
      };
      p.negate = function () {
        this.x = -this.x;
        this.y = -this.y;
        return this;
      };
      p.dot = function (b) {
        return this.x * b.x + this.y * b.y;
      };
      p.cross = function (b) {
        return this.x * b.y - this.y * b.x;
      };
      p.len = function () {
        return Math.sqrt(this.x * this.x + this.y * this.y);
      };
      p.lengthSqr = function () {
        return this.x * this.x + this.y * this.y;
      };
      p.normalizeSelf = function () {
        var c = this.x * this.x + this.y * this.y;
        if (c === 1) {
          return this;
        }
        if (c === 0) {
          return this;
        }
        var a = 1 / Math.sqrt(c);
        this.x *= a;
        this.y *= a;
        return this;
      };
      p.normalize = function (b) {
        (b = b || new q()).x = this.x;
        b.y = this.y;
        b.normalizeSelf();
        return b;
      };
      p.angle = function (e) {
        var a = this.magSqr();
        var b = e.magSqr();
        if (a === 0 || b === 0) {
          return 0;
        }
        var c = this.dot(e) / Math.sqrt(a * b);
        c = i.default.clampf(c, -1, 1);
        return Math.acos(c);
      };
      p.signAngle = function (c) {
        var a = this.angle(c);
        if (this.cross(c) < 0) {
          return -a;
        } else {
          return a;
        }
      };
      p.rotate = function (c, a) {
        (a = a || new q()).x = this.x;
        a.y = this.y;
        return a.rotateSelf(c);
      };
      p.rotateSelf = function (e) {
        var a = Math.sin(e);
        var b = Math.cos(e);
        var c = this.x;
        this.x = b * c - a * this.y;
        this.y = a * c + b * this.y;
        return this;
      };
      p.project = function (b) {
        return b.multiplyScalar(this.dot(b) / b.dot(b));
      };
      p.transformMat4 = function (c, a) {
        a = a || new q();
        q.transformMat4(a, this, c);
        return a;
      };
      p.maxAxis = function () {
        return Math.max(this.x, this.y);
      };
      f = q;
      k = [{
        key: "ONE",
        get: function () {
          return new q(1, 1);
        }
      }, {
        key: "ZERO",
        get: function () {
          return new q(0, 0);
        }
      }, {
        key: "UP",
        get: function () {
          return new q(0, 1);
        }
      }, {
        key: "RIGHT",
        get: function () {
          return new q(1, 0);
        }
      }];
      if (null) {
        a(f.prototype, null);
      }
      if (k) {
        a(f, k);
      }
      Object.defineProperty(f, "prototype", {
        writable: false
      });
      return q;
    }(e.default);
    g.default = s;
    s.sub = s.subtract;
    s.mul = s.multiply;
    s.scale = s.multiplyScalar;
    s.mag = s.len;
    s.squaredMagnitude = s.lengthSqr;
    s.div = s.divide;
    s.ONE_R = s.ONE;
    s.ZERO_R = s.ZERO;
    s.UP_R = s.UP;
    s.RIGHT_R = s.RIGHT;
    var n = new s();
    var r = new s();
    h.default.fastDefine("cc.Vec2", s, {
      x: 0,
      y: 0
    });
    cc.v2 = function (c, a) {
      return new s(c, a);
    };
    cc.Vec2 = s;
    b.exports = g.default;
  }, {
    "../platform/CCClass": 162,
    "../utils/misc": 236,
    "./utils": 258,
    "./value-type": 259
  }],
  261: [function (d, b, f) {
    "use strict";

    f.__esModule = true;
    f.default = undefined;
    var e = a(d("./value-type"));
    var g = a(d("../platform/CCClass"));
    var h = a(d("../utils/misc"));
    var i = a(d("./vec2"));
    var j = d("./utils");
    function a(b) {
      if (b && b.__esModule) {
        return b;
      } else {
        return {
          default: b
        };
      }
    }
    function k(e, a) {
      for (var b = 0; b < a.length; b++) {
        var f = a[b];
        f.enumerable = f.enumerable || false;
        f.configurable = true;
        if ("value" in f) {
          f.writable = true;
        }
        Object.defineProperty(e, f.key, f);
      }
    }
    function c(d, a) {
      return (c = Object.setPrototypeOf || function (c, a) {
        c.__proto__ = a;
        return c;
      })(d, a);
    }
    var m = 0;
    var n = 0;
    var s = 0;
    var t = function (e) {
      var a;
      var b;
      b = e;
      (a = t).prototype = Object.create(b.prototype);
      a.prototype.constructor = a;
      c(a, b);
      var l;
      var p;
      var q = t.prototype;
      function t(b, g, h) {
        var j;
        if (b === undefined) {
          b = 0;
        }
        if (g === undefined) {
          g = 0;
        }
        if (h === undefined) {
          h = 0;
        }
        (j = e.call(this) || this).mag = t.prototype.len;
        j.magSqr = t.prototype.lengthSqr;
        j.subSelf = t.prototype.subtract;
        j.mulSelf = t.prototype.multiplyScalar;
        j.divSelf = t.prototype.divide;
        j.scaleSelf = t.prototype.multiply;
        j.negSelf = t.prototype.negate;
        j.x = undefined;
        j.y = undefined;
        j.z = undefined;
        j.angle = i.default.prototype.angle;
        j.project = i.default.prototype.project;
        if (b && typeof b == "object") {
          j.x = b.x;
          j.y = b.y;
          j.z = b.z;
        } else {
          j.x = b;
          j.y = g;
          j.z = h;
        }
        return j;
      }
      q.sub = function (c, a) {
        return t.subtract(a || new t(), this, c);
      };
      q.mul = function (c, a) {
        return t.multiplyScalar(a || new t(), this, c);
      };
      q.div = function (c, a) {
        return t.multiplyScalar(a || new t(), this, 1 / c);
      };
      q.scale = function (c, a) {
        return t.multiply(a || new t(), this, c);
      };
      q.neg = function (b) {
        return t.negate(b || new t(), this);
      };
      t.zero = function (b) {
        b.x = 0;
        b.y = 0;
        b.z = 0;
        return b;
      };
      t.clone = function (b) {
        return new t(b.x, b.y, b.z);
      };
      t.copy = function (c, a) {
        c.x = a.x;
        c.y = a.y;
        c.z = a.z;
        return c;
      };
      t.set = function (e, a, b, c) {
        e.x = a;
        e.y = b;
        e.z = c;
        return e;
      };
      t.add = function (d, a, b) {
        d.x = a.x + b.x;
        d.y = a.y + b.y;
        d.z = a.z + b.z;
        return d;
      };
      t.subtract = function (d, a, b) {
        d.x = a.x - b.x;
        d.y = a.y - b.y;
        d.z = a.z - b.z;
        return d;
      };
      t.multiply = function (d, a, b) {
        d.x = a.x * b.x;
        d.y = a.y * b.y;
        d.z = a.z * b.z;
        return d;
      };
      t.divide = function (d, a, b) {
        d.x = a.x / b.x;
        d.y = a.y / b.y;
        d.z = a.z / b.z;
        return d;
      };
      t.ceil = function (c, a) {
        c.x = Math.ceil(a.x);
        c.y = Math.ceil(a.y);
        c.z = Math.ceil(a.z);
        return c;
      };
      t.floor = function (c, a) {
        c.x = Math.floor(a.x);
        c.y = Math.floor(a.y);
        c.z = Math.floor(a.z);
        return c;
      };
      t.min = function (d, a, b) {
        d.x = Math.min(a.x, b.x);
        d.y = Math.min(a.y, b.y);
        d.z = Math.min(a.z, b.z);
        return d;
      };
      t.max = function (d, a, b) {
        d.x = Math.max(a.x, b.x);
        d.y = Math.max(a.y, b.y);
        d.z = Math.max(a.z, b.z);
        return d;
      };
      t.round = function (c, a) {
        c.x = Math.round(a.x);
        c.y = Math.round(a.y);
        c.z = Math.round(a.z);
        return c;
      };
      t.multiplyScalar = function (d, a, b) {
        d.x = a.x * b;
        d.y = a.y * b;
        d.z = a.z * b;
        return d;
      };
      t.scaleAndAdd = function (e, a, b, c) {
        e.x = a.x + b.x * c;
        e.y = a.y + b.y * c;
        e.z = a.z + b.z * c;
        return e;
      };
      t.distance = function (c, a) {
        m = a.x - c.x;
        n = a.y - c.y;
        s = a.z - c.z;
        return Math.sqrt(m * m + n * n + s * s);
      };
      t.squaredDistance = function (c, a) {
        m = a.x - c.x;
        n = a.y - c.y;
        s = a.z - c.z;
        return m * m + n * n + s * s;
      };
      t.len = function (b) {
        m = b.x;
        n = b.y;
        s = b.z;
        return Math.sqrt(m * m + n * n + s * s);
      };
      t.lengthSqr = function (b) {
        m = b.x;
        n = b.y;
        s = b.z;
        return m * m + n * n + s * s;
      };
      t.negate = function (c, a) {
        c.x = -a.x;
        c.y = -a.y;
        c.z = -a.z;
        return c;
      };
      t.inverse = function (c, a) {
        c.x = 1 / a.x;
        c.y = 1 / a.y;
        c.z = 1 / a.z;
        return c;
      };
      t.inverseSafe = function (a, b) {
        m = b.x;
        n = b.y;
        s = b.z;
        if (Math.abs(m) < j.EPSILON) {
          a.x = 0;
        } else {
          a.x = 1 / m;
        }
        if (Math.abs(n) < j.EPSILON) {
          a.y = 0;
        } else {
          a.y = 1 / n;
        }
        if (Math.abs(s) < j.EPSILON) {
          a.z = 0;
        } else {
          a.z = 1 / s;
        }
        return a;
      };
      t.normalize = function (d, a) {
        m = a.x;
        n = a.y;
        s = a.z;
        var b = m * m + n * n + s * s;
        if (b > 0) {
          b = 1 / Math.sqrt(b);
          d.x = m * b;
          d.y = n * b;
          d.z = s * b;
        }
        return d;
      };
      t.dot = function (c, a) {
        return c.x * a.x + c.y * a.y + c.z * a.z;
      };
      t.cross = function (c, b, d) {
        var e = b.x;
        var f = b.y;
        var g = b.z;
        var h = d.x;
        var i = d.y;
        var a = d.z;
        c.x = f * a - g * i;
        c.y = g * h - e * a;
        c.z = e * i - f * h;
        return c;
      };
      t.lerp = function (e, a, b, c) {
        e.x = a.x + c * (b.x - a.x);
        e.y = a.y + c * (b.y - a.y);
        e.z = a.z + c * (b.z - a.z);
        return e;
      };
      t.random = function (a, b) {
        b = b || 1;
        var e = (0, j.random)() * 2 * Math.PI;
        var d = (0, j.random)() * 2 - 1;
        var f = Math.sqrt(1 - d * d);
        a.x = f * Math.cos(e) * b;
        a.y = f * Math.sin(e) * b;
        a.z = d * b;
        return a;
      };
      t.transformMat4 = function (f, a, b) {
        m = a.x;
        n = a.y;
        s = a.z;
        var c = b.m;
        var d = c[3] * m + c[7] * n + c[11] * s + c[15];
        d = d ? 1 / d : 1;
        f.x = (c[0] * m + c[4] * n + c[8] * s + c[12]) * d;
        f.y = (c[1] * m + c[5] * n + c[9] * s + c[13]) * d;
        f.z = (c[2] * m + c[6] * n + c[10] * s + c[14]) * d;
        return f;
      };
      t.transformMat4Normal = function (f, a, b) {
        m = a.x;
        n = a.y;
        s = a.z;
        var c = b.m;
        var d = c[3] * m + c[7] * n + c[11] * s;
        d = d ? 1 / d : 1;
        f.x = (c[0] * m + c[4] * n + c[8] * s) * d;
        f.y = (c[1] * m + c[5] * n + c[9] * s) * d;
        f.z = (c[2] * m + c[6] * n + c[10] * s) * d;
        return f;
      };
      t.transformMat3 = function (e, a, b) {
        m = a.x;
        n = a.y;
        s = a.z;
        var c = b.m;
        e.x = m * c[0] + n * c[3] + s * c[6];
        e.y = m * c[1] + n * c[4] + s * c[7];
        e.z = m * c[2] + n * c[5] + s * c[8];
        return e;
      };
      t.transformAffine = function (e, a, b) {
        m = a.x;
        n = a.y;
        s = a.z;
        var c = b.m;
        e.x = c[0] * m + c[1] * n + c[2] * s + c[3];
        e.y = c[4] * m + c[5] * n + c[6] * s + c[7];
        e.x = c[8] * m + c[9] * n + c[10] * s + c[11];
        return e;
      };
      t.transformQuat = function (a, b, c) {
        var d = c.w * b.x + c.y * b.z - c.z * b.y;
        var e = c.w * b.y + c.z * b.x - c.x * b.z;
        var f = c.w * b.z + c.x * b.y - c.y * b.x;
        var g = -c.x * b.x - c.y * b.y - c.z * b.z;
        a.x = d * c.w + g * -c.x + e * -c.z - f * -c.y;
        a.y = e * c.w + g * -c.y + f * -c.x - d * -c.z;
        a.z = f * c.w + g * -c.z + d * -c.y - e * -c.x;
        return a;
      };
      t.transformRTS = function (m, b, d, e, f) {
        var g = b.x * f.x;
        var i = b.y * f.y;
        var j = b.z * f.z;
        var a = d.w * g + d.y * j - d.z * i;
        var k = d.w * i + d.z * g - d.x * j;
        var c = d.w * j + d.x * i - d.y * g;
        var l = -d.x * g - d.y * i - d.z * j;
        m.x = a * d.w + l * -d.x + k * -d.z - c * -d.y + e.x;
        m.y = k * d.w + l * -d.y + c * -d.x - a * -d.z + e.y;
        m.z = c * d.w + l * -d.z + a * -d.y - k * -d.x + e.z;
        return m;
      };
      t.transformInverseRTS = function (m, b, d, e, f) {
        var g = b.x - e.x;
        var i = b.y - e.y;
        var j = b.z - e.z;
        var a = d.w * g - d.y * j + d.z * i;
        var k = d.w * i - d.z * g + d.x * j;
        var c = d.w * j - d.x * i + d.y * g;
        var l = d.x * g + d.y * i + d.z * j;
        m.x = (a * d.w + l * d.x + k * d.z - c * d.y) / f.x;
        m.y = (k * d.w + l * d.y + c * d.x - a * d.z) / f.y;
        m.z = (c * d.w + l * d.z + a * d.y - k * d.x) / f.z;
        return m;
      };
      t.rotateX = function (c, b, d, e) {
        m = b.x - d.x;
        n = b.y - d.y;
        s = b.z - d.z;
        var f = Math.cos(e);
        var g = Math.sin(e);
        var h = m;
        var i = n * f - s * g;
        var a = n * g + s * f;
        c.x = h + d.x;
        c.y = i + d.y;
        c.z = a + d.z;
        return c;
      };
      t.rotateY = function (c, b, d, e) {
        m = b.x - d.x;
        n = b.y - d.y;
        s = b.z - d.z;
        var f = Math.cos(e);
        var g = Math.sin(e);
        var h = s * g + m * f;
        var i = n;
        var a = s * f - m * g;
        c.x = h + d.x;
        c.y = i + d.y;
        c.z = a + d.z;
        return c;
      };
      t.rotateZ = function (c, b, d, e) {
        m = b.x - d.x;
        n = b.y - d.y;
        s = b.z - d.z;
        var f = Math.cos(e);
        var g = Math.sin(e);
        var h = m * f - n * g;
        var i = m * g + n * f;
        var a = s;
        c.x = h + d.x;
        c.y = i + d.y;
        c.z = a + d.z;
        return c;
      };
      t.strictEquals = function (c, a) {
        return c.x === a.x && c.y === a.y && c.z === a.z;
      };
      t.equals = function (a, b, d) {
        if (d === undefined) {
          d = j.EPSILON;
        }
        var i = a.x;
        var f = a.y;
        var g = a.z;
        var h = b.x;
        var l = b.y;
        var k = b.z;
        return Math.abs(i - h) <= d * Math.max(1, Math.abs(i), Math.abs(h)) && Math.abs(f - l) <= d * Math.max(1, Math.abs(f), Math.abs(l)) && Math.abs(g - k) <= d * Math.max(1, Math.abs(g), Math.abs(k));
      };
      t.angle = function (d, a) {
        t.normalize(u, d);
        t.normalize(r, a);
        var b = t.dot(u, r);
        if (b > 1) {
          return 0;
        } else if (b < -1) {
          return Math.PI;
        } else {
          return Math.acos(b);
        }
      };
      t.projectOnPlane = function (d, a, b) {
        return t.subtract(d, a, t.project(d, a, b));
      };
      t.project = function (e, a, b) {
        var c = t.lengthSqr(b);
        if (c < 0.000001) {
          return t.set(e, 0, 0, 0);
        } else {
          return t.multiplyScalar(e, b, t.dot(a, b) / c);
        }
      };
      t.toArray = function (d, a, b) {
        if (b === undefined) {
          b = 0;
        }
        d[b + 0] = a.x;
        d[b + 1] = a.y;
        d[b + 2] = a.z;
        return d;
      };
      t.fromArray = function (d, a, b) {
        if (b === undefined) {
          b = 0;
        }
        d.x = a[b + 0];
        d.y = a[b + 1];
        d.z = a[b + 2];
        return d;
      };
      q.clone = function () {
        return new t(this.x, this.y, this.z);
      };
      q.set = function (b) {
        this.x = b.x;
        this.y = b.y;
        this.z = b.z;
        return this;
      };
      q.equals = function (b) {
        return b && this.x === b.x && this.y === b.y && this.z === b.z;
      };
      q.fuzzyEquals = function (c, a) {
        return this.x - a <= c.x && c.x <= this.x + a && this.y - a <= c.y && c.y <= this.y + a && this.z - a <= c.z && c.z <= this.z + a;
      };
      q.toString = function () {
        return "(" + this.x.toFixed(2) + ", " + this.y.toFixed(2) + ", " + this.z.toFixed(2) + ")";
      };
      q.lerp = function (d, a, b) {
        b = b || new t();
        t.lerp(b, this, d, a);
        return b;
      };
      q.clampf = function (c, a) {
        this.x = h.default.clampf(this.x, c.x, a.x);
        this.y = h.default.clampf(this.y, c.y, a.y);
        this.z = h.default.clampf(this.z, c.z, a.z);
        return this;
      };
      q.addSelf = function (b) {
        this.x += b.x;
        this.y += b.y;
        this.z += b.z;
        return this;
      };
      q.add = function (c, a) {
        (a = a || new t()).x = this.x + c.x;
        a.y = this.y + c.y;
        a.z = this.z + c.z;
        return a;
      };
      q.subtract = function (b) {
        this.x -= b.x;
        this.y -= b.y;
        this.z -= b.z;
        return this;
      };
      q.multiplyScalar = function (b) {
        this.x *= b;
        this.y *= b;
        this.z *= b;
        return this;
      };
      q.multiply = function (b) {
        this.x *= b.x;
        this.y *= b.y;
        this.z *= b.z;
        return this;
      };
      q.divide = function (b) {
        this.x /= b;
        this.y /= b;
        this.z /= b;
        return this;
      };
      q.negate = function () {
        this.x = -this.x;
        this.y = -this.y;
        this.z = -this.z;
        return this;
      };
      q.dot = function (b) {
        return this.x * b.x + this.y * b.y + this.z * b.z;
      };
      q.cross = function (c, a) {
        a = a || new t();
        t.cross(a, this, c);
        return a;
      };
      q.len = function () {
        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
      };
      q.lengthSqr = function () {
        return this.x * this.x + this.y * this.y + this.z * this.z;
      };
      q.normalizeSelf = function () {
        t.normalize(this, this);
        return this;
      };
      q.normalize = function (b) {
        b = b || new t();
        t.normalize(b, this);
        return b;
      };
      q.transformMat4 = function (c, a) {
        a = a || new t();
        t.transformMat4(a, this, c);
        return a;
      };
      q.maxAxis = function () {
        return Math.max(this.x, this.y, this.z);
      };
      q.signAngle = function (d) {
        var a = new i.default(this.x, this.y);
        var b = new i.default(d.x, d.y);
        return a.signAngle(b);
      };
      q.rotate = function (c, a) {
        return i.default.prototype.rotate.call(this, c, a);
      };
      q.rotateSelf = function (b) {
        return i.default.prototype.rotateSelf.call(this, b);
      };
      l = t;
      p = [{
        key: "ONE",
        get: function () {
          return new t(1, 1, 1);
        }
      }, {
        key: "ZERO",
        get: function () {
          return new t();
        }
      }, {
        key: "UP",
        get: function () {
          return new t(0, 1, 0);
        }
      }, {
        key: "RIGHT",
        get: function () {
          return new t(1, 0, 0);
        }
      }, {
        key: "FORWARD",
        get: function () {
          return new t(0, 0, 1);
        }
      }];
      if (null) {
        k(l.prototype, null);
      }
      if (p) {
        k(l, p);
      }
      Object.defineProperty(l, "prototype", {
        writable: false
      });
      return t;
    }(e.default);
    f.default = t;
    t.sub = t.subtract;
    t.mul = t.multiply;
    t.scale = t.multiplyScalar;
    t.mag = t.len;
    t.squaredMagnitude = t.lengthSqr;
    t.div = t.divide;
    t.ONE_R = t.ONE;
    t.ZERO_R = t.ZERO;
    t.UP_R = t.UP;
    t.RIGHT_R = t.RIGHT;
    t.FRONT_R = t.FORWARD;
    var u = new t();
    var r = new t();
    g.default.fastDefine("cc.Vec3", t, {
      x: 0,
      y: 0,
      z: 0
    });
    cc.v3 = function (d, a, b) {
      return new t(d, a, b);
    };
    cc.Vec3 = t;
    b.exports = f.default;
  }, {
    "../platform/CCClass": 162,
    "../utils/misc": 236,
    "./utils": 258,
    "./value-type": 259,
    "./vec2": 260
  }],
  262: [function (c, b, f) {
    "use strict";

    f.__esModule = true;
    f.default = undefined;
    f.v4 = a;
    var e = i(c("../platform/CCClass"));
    var g = i(c("./value-type"));
    var h = c("./utils");
    function i(b) {
      if (b && b.__esModule) {
        return b;
      } else {
        return {
          default: b
        };
      }
    }
    function j(e, a) {
      for (var b = 0; b < a.length; b++) {
        var f = a[b];
        f.enumerable = f.enumerable || false;
        f.configurable = true;
        if ("value" in f) {
          f.writable = true;
        }
        Object.defineProperty(e, f.key, f);
      }
    }
    function k(c, a) {
      return (k = Object.setPrototypeOf || function (c, a) {
        c.__proto__ = a;
        return c;
      })(c, a);
    }
    var m = 0;
    var n = 0;
    var s = 0;
    var t = 0;
    var l = function (e) {
      var a;
      var b;
      b = e;
      (a = p).prototype = Object.create(b.prototype);
      a.prototype.constructor = a;
      k(a, b);
      var d;
      var i;
      var o = p.prototype;
      function p(b, h, i, j) {
        var k;
        if (b === undefined) {
          b = 0;
        }
        if (h === undefined) {
          h = 0;
        }
        if (i === undefined) {
          i = 0;
        }
        if (j === undefined) {
          j = 0;
        }
        (k = e.call(this) || this).mag = p.prototype.len;
        k.magSqr = p.prototype.lengthSqr;
        k.subSelf = p.prototype.subtract;
        k.mulSelf = p.prototype.multiplyScalar;
        k.divSelf = p.prototype.divide;
        k.scaleSelf = p.prototype.multiply;
        k.negSelf = p.prototype.negate;
        k.x = undefined;
        k.y = undefined;
        k.z = undefined;
        k.w = undefined;
        if (b && typeof b == "object") {
          k.x = b.x;
          k.y = b.y;
          k.z = b.z;
          k.w = b.w;
        } else {
          k.x = b;
          k.y = h;
          k.z = i;
          k.w = j;
        }
        return k;
      }
      o.sub = function (c, a) {
        return p.subtract(a || new p(), this, c);
      };
      o.mul = function (c, a) {
        return p.multiplyScalar(a || new p(), this, c);
      };
      o.div = function (c, a) {
        return p.multiplyScalar(a || new p(), this, 1 / c);
      };
      o.scale = function (c, a) {
        return p.multiply(a || new p(), this, c);
      };
      o.neg = function (b) {
        return p.negate(b || new p(), this);
      };
      p.clone = function (b) {
        return new p(b.x, b.y, b.z, b.w);
      };
      p.copy = function (c, a) {
        c.x = a.x;
        c.y = a.y;
        c.z = a.z;
        c.w = a.w;
        return c;
      };
      p.set = function (f, a, b, c, d) {
        f.x = a;
        f.y = b;
        f.z = c;
        f.w = d;
        return f;
      };
      p.add = function (d, a, b) {
        d.x = a.x + b.x;
        d.y = a.y + b.y;
        d.z = a.z + b.z;
        d.w = a.w + b.w;
        return d;
      };
      p.subtract = function (d, a, b) {
        d.x = a.x - b.x;
        d.y = a.y - b.y;
        d.z = a.z - b.z;
        d.w = a.w - b.w;
        return d;
      };
      p.multiply = function (d, a, b) {
        d.x = a.x * b.x;
        d.y = a.y * b.y;
        d.z = a.z * b.z;
        d.w = a.w * b.w;
        return d;
      };
      p.divide = function (d, a, b) {
        d.x = a.x / b.x;
        d.y = a.y / b.y;
        d.z = a.z / b.z;
        d.w = a.w / b.w;
        return d;
      };
      p.ceil = function (c, a) {
        c.x = Math.ceil(a.x);
        c.y = Math.ceil(a.y);
        c.z = Math.ceil(a.z);
        c.w = Math.ceil(a.w);
        return c;
      };
      p.floor = function (c, a) {
        c.x = Math.floor(a.x);
        c.y = Math.floor(a.y);
        c.z = Math.floor(a.z);
        c.w = Math.floor(a.w);
        return c;
      };
      p.min = function (d, a, b) {
        d.x = Math.min(a.x, b.x);
        d.y = Math.min(a.y, b.y);
        d.z = Math.min(a.z, b.z);
        d.w = Math.min(a.w, b.w);
        return d;
      };
      p.max = function (d, a, b) {
        d.x = Math.max(a.x, b.x);
        d.y = Math.max(a.y, b.y);
        d.z = Math.max(a.z, b.z);
        d.w = Math.max(a.w, b.w);
        return d;
      };
      p.round = function (c, a) {
        c.x = Math.round(a.x);
        c.y = Math.round(a.y);
        c.z = Math.round(a.z);
        c.w = Math.round(a.w);
        return c;
      };
      p.multiplyScalar = function (d, a, b) {
        d.x = a.x * b;
        d.y = a.y * b;
        d.z = a.z * b;
        d.w = a.w * b;
        return d;
      };
      p.scaleAndAdd = function (e, a, b, c) {
        e.x = a.x + b.x * c;
        e.y = a.y + b.y * c;
        e.z = a.z + b.z * c;
        e.w = a.w + b.w * c;
        return e;
      };
      p.distance = function (g, a) {
        var b = a.x - g.x;
        var c = a.y - g.y;
        var d = a.z - g.z;
        var e = a.w - g.w;
        return Math.sqrt(b * b + c * c + d * d + e * e);
      };
      p.squaredDistance = function (g, a) {
        var b = a.x - g.x;
        var c = a.y - g.y;
        var d = a.z - g.z;
        var e = a.w - g.w;
        return b * b + c * c + d * d + e * e;
      };
      p.len = function (b) {
        m = b.x;
        n = b.y;
        s = b.z;
        t = b.w;
        return Math.sqrt(m * m + n * n + s * s + t * t);
      };
      p.lengthSqr = function (b) {
        m = b.x;
        n = b.y;
        s = b.z;
        t = b.w;
        return m * m + n * n + s * s + t * t;
      };
      p.negate = function (c, a) {
        c.x = -a.x;
        c.y = -a.y;
        c.z = -a.z;
        c.w = -a.w;
        return c;
      };
      p.inverse = function (c, a) {
        c.x = 1 / a.x;
        c.y = 1 / a.y;
        c.z = 1 / a.z;
        c.w = 1 / a.w;
        return c;
      };
      p.inverseSafe = function (c, a) {
        m = a.x;
        n = a.y;
        s = a.z;
        t = a.w;
        if (Math.abs(m) < h.EPSILON) {
          c.x = 0;
        } else {
          c.x = 1 / m;
        }
        if (Math.abs(n) < h.EPSILON) {
          c.y = 0;
        } else {
          c.y = 1 / n;
        }
        if (Math.abs(s) < h.EPSILON) {
          c.z = 0;
        } else {
          c.z = 1 / s;
        }
        if (Math.abs(t) < h.EPSILON) {
          c.w = 0;
        } else {
          c.w = 1 / t;
        }
        return c;
      };
      p.normalize = function (d, a) {
        m = a.x;
        n = a.y;
        s = a.z;
        t = a.w;
        var b = m * m + n * n + s * s + t * t;
        if (b > 0) {
          b = 1 / Math.sqrt(b);
          d.x = m * b;
          d.y = n * b;
          d.z = s * b;
          d.w = t * b;
        }
        return d;
      };
      p.dot = function (c, a) {
        return c.x * a.x + c.y * a.y + c.z * a.z + c.w * a.w;
      };
      p.lerp = function (e, a, b, c) {
        e.x = a.x + c * (b.x - a.x);
        e.y = a.y + c * (b.y - a.y);
        e.z = a.z + c * (b.z - a.z);
        e.w = a.w + c * (b.w - a.w);
        return e;
      };
      p.random = function (e, a) {
        a = a || 1;
        var g = (0, h.random)() * 2 * Math.PI;
        var c = (0, h.random)() * 2 - 1;
        var d = Math.sqrt(1 - c * c);
        e.x = d * Math.cos(g) * a;
        e.y = d * Math.sin(g) * a;
        e.z = c * a;
        e.w = 0;
        return e;
      };
      p.transformMat4 = function (e, a, b) {
        m = a.x;
        n = a.y;
        s = a.z;
        t = a.w;
        var c = b.m;
        e.x = c[0] * m + c[4] * n + c[8] * s + c[12] * t;
        e.y = c[1] * m + c[5] * n + c[9] * s + c[13] * t;
        e.z = c[2] * m + c[6] * n + c[10] * s + c[14] * t;
        e.w = c[3] * m + c[7] * n + c[11] * s + c[15] * t;
        return e;
      };
      p.transformAffine = function (e, a, b) {
        m = a.x;
        n = a.y;
        s = a.z;
        t = a.w;
        var c = b.m;
        e.x = c[0] * m + c[1] * n + c[2] * s + c[3] * t;
        e.y = c[4] * m + c[5] * n + c[6] * s + c[7] * t;
        e.x = c[8] * m + c[9] * n + c[10] * s + c[11] * t;
        e.w = a.w;
        return e;
      };
      p.transformQuat = function (d, b, f) {
        var e = b.x;
        var g = b.y;
        var h = b.z;
        m = f.x;
        n = f.y;
        s = f.z;
        var i = (t = f.w) * e + n * h - s * g;
        var j = t * g + s * e - m * h;
        var a = t * h + m * g - n * e;
        var k = -m * e - n * g - s * h;
        d.x = i * t + k * -m + j * -s - a * -n;
        d.y = j * t + k * -n + a * -m - i * -s;
        d.z = a * t + k * -s + i * -n - j * -m;
        d.w = b.w;
        return d;
      };
      p.strictEquals = function (c, a) {
        return c.x === a.x && c.y === a.y && c.z === a.z && c.w === a.w;
      };
      p.equals = function (d, a, b) {
        if (b === undefined) {
          b = h.EPSILON;
        }
        return Math.abs(d.x - a.x) <= b * Math.max(1, Math.abs(d.x), Math.abs(a.x)) && Math.abs(d.y - a.y) <= b * Math.max(1, Math.abs(d.y), Math.abs(a.y)) && Math.abs(d.z - a.z) <= b * Math.max(1, Math.abs(d.z), Math.abs(a.z)) && Math.abs(d.w - a.w) <= b * Math.max(1, Math.abs(d.w), Math.abs(a.w));
      };
      p.toArray = function (d, a, b) {
        if (b === undefined) {
          b = 0;
        }
        d[b + 0] = a.x;
        d[b + 1] = a.y;
        d[b + 2] = a.z;
        d[b + 3] = a.w;
        return d;
      };
      p.fromArray = function (d, a, b) {
        if (b === undefined) {
          b = 0;
        }
        d.x = a[b + 0];
        d.y = a[b + 1];
        d.z = a[b + 2];
        d.w = a[b + 3];
        return d;
      };
      o.clone = function () {
        return new p(this.x, this.y, this.z, this.w);
      };
      o.set = function (e, a, b, c) {
        if (e && typeof e == "object") {
          this.x = e.x;
          this.y = e.y;
          this.z = e.z;
          this.w = e.w;
        } else {
          this.x = e || 0;
          this.y = a || 0;
          this.z = b || 0;
          this.w = c || 0;
        }
        return this;
      };
      o.equals = function (c, a) {
        if (a === undefined) {
          a = h.EPSILON;
        }
        return Math.abs(this.x - c.x) <= a * Math.max(1, Math.abs(this.x), Math.abs(c.x)) && Math.abs(this.y - c.y) <= a * Math.max(1, Math.abs(this.y), Math.abs(c.y)) && Math.abs(this.z - c.z) <= a * Math.max(1, Math.abs(this.z), Math.abs(c.z)) && Math.abs(this.w - c.w) <= a * Math.max(1, Math.abs(this.w), Math.abs(c.w));
      };
      o.equals4f = function (f, a, b, c, d) {
        if (d === undefined) {
          d = h.EPSILON;
        }
        return Math.abs(this.x - f) <= d * Math.max(1, Math.abs(this.x), Math.abs(f)) && Math.abs(this.y - a) <= d * Math.max(1, Math.abs(this.y), Math.abs(a)) && Math.abs(this.z - b) <= d * Math.max(1, Math.abs(this.z), Math.abs(b)) && Math.abs(this.w - c) <= d * Math.max(1, Math.abs(this.w), Math.abs(c));
      };
      o.strictEquals = function (b) {
        return this.x === b.x && this.y === b.y && this.z === b.z && this.w === b.w;
      };
      o.strictEquals4f = function (e, a, b, c) {
        return this.x === e && this.y === a && this.z === b && this.w === c;
      };
      o.lerp = function (c, a) {
        m = this.x;
        n = this.y;
        s = this.z;
        t = this.w;
        this.x = m + a * (c.x - m);
        this.y = n + a * (c.y - n);
        this.z = s + a * (c.z - s);
        this.w = t + a * (c.w - t);
        return this;
      };
      o.toString = function () {
        return "(" + this.x.toFixed(2) + ", " + this.y.toFixed(2) + ", " + this.z.toFixed(2) + ", " + this.w.toFixed(2) + ")";
      };
      o.clampf = function (c, a) {
        this.x = (0, h.clamp)(this.x, c.x, a.x);
        this.y = (0, h.clamp)(this.y, c.y, a.y);
        this.z = (0, h.clamp)(this.z, c.z, a.z);
        this.w = (0, h.clamp)(this.w, c.w, a.w);
        return this;
      };
      o.addSelf = function (b) {
        this.x += b.x;
        this.y += b.y;
        this.z += b.z;
        this.w += b.w;
        return this;
      };
      o.add = function (c, a) {
        (a = a || new p()).x = this.x + c.x;
        a.y = this.y + c.y;
        a.z = this.z + c.z;
        a.w = this.w + c.w;
        return a;
      };
      o.subtract = function (c, a) {
        (a = a || new p()).x = this.x - c.x;
        a.y = this.y - c.y;
        a.z = this.z - c.z;
        a.w = this.w - c.w;
        return a;
      };
      o.multiplyScalar = function (b) {
        this.x *= b;
        this.y *= b;
        this.z *= b;
        this.w *= b;
        return this;
      };
      o.multiply = function (b) {
        this.x *= b.x;
        this.y *= b.y;
        this.z *= b.z;
        this.w *= b.w;
        return this;
      };
      o.divide = function (b) {
        this.x /= b;
        this.y /= b;
        this.z /= b;
        this.w /= b;
        return this;
      };
      o.negate = function () {
        this.x = -this.x;
        this.y = -this.y;
        this.z = -this.z;
        this.w = -this.w;
        return this;
      };
      o.dot = function (b) {
        return this.x * b.x + this.y * b.y + this.z * b.z + this.w * b.w;
      };
      o.cross = function (e, b) {
        b = b || new p();
        var j = this.x;
        var d = this.y;
        var f = this.z;
        var g = e.x;
        var h = e.y;
        var i = e.z;
        b.x = d * i - f * h;
        b.y = f * g - j * i;
        b.z = j * h - d * g;
        return b;
      };
      o.len = function () {
        var e = this.x;
        var a = this.y;
        var b = this.z;
        var c = this.w;
        return Math.sqrt(e * e + a * a + b * b + c * c);
      };
      o.lengthSqr = function () {
        var e = this.x;
        var a = this.y;
        var b = this.z;
        var c = this.w;
        return e * e + a * a + b * b + c * c;
      };
      o.normalizeSelf = function () {
        this.normalize(this);
        return this;
      };
      o.normalize = function (c) {
        c = c || new p();
        m = this.x;
        n = this.y;
        s = this.z;
        t = this.w;
        var d = m * m + n * n + s * s + t * t;
        if (d > 0) {
          d = 1 / Math.sqrt(d);
          c.x = m * d;
          c.y = n * d;
          c.z = s * d;
          c.w = t * d;
        }
        return c;
      };
      o.transformMat4 = function (d, a) {
        a = a || new p();
        m = this.x;
        n = this.y;
        s = this.z;
        t = this.w;
        var e = d.m;
        a.x = e[0] * m + e[4] * n + e[8] * s + e[12] * t;
        a.y = e[1] * m + e[5] * n + e[9] * s + e[13] * t;
        a.z = e[2] * m + e[6] * n + e[10] * s + e[14] * t;
        a.w = e[3] * m + e[7] * n + e[11] * s + e[15] * t;
        return a;
      };
      o.maxAxis = function () {
        return Math.max(this.x, this.y, this.z, this.w);
      };
      d = p;
      i = [{
        key: "ZERO",
        get: function () {
          return new p(0, 0, 0, 0);
        }
      }, {
        key: "ONE",
        get: function () {
          return new p(1, 1, 1, 1);
        }
      }, {
        key: "NEG_ONE",
        get: function () {
          return new p(-1, -1, -1, -1);
        }
      }];
      if (null) {
        j(d.prototype, null);
      }
      if (i) {
        j(d, i);
      }
      Object.defineProperty(d, "prototype", {
        writable: false
      });
      return p;
    }(g.default);
    function a(e, a, b, c) {
      return new l(e, a, b, c);
    }
    f.default = l;
    l.sub = l.subtract;
    l.mul = l.multiply;
    l.div = l.divide;
    l.scale = l.multiplyScalar;
    l.mag = l.len;
    l.squaredMagnitude = l.lengthSqr;
    l.ZERO_R = l.ZERO;
    l.ONE_R = l.ONE;
    l.NEG_ONE_R = l.NEG_ONE;
    e.default.fastDefine("cc.Vec4", l, {
      x: 0,
      y: 0,
      z: 0,
      w: 0
    });
    cc.v4 = a;
    cc.Vec4 = l;
  }, {
    "../platform/CCClass": 162,
    "./utils": 258,
    "./value-type": 259
  }],
  263: [function () {
    "use strict";

    cc.js;
  }, {}],
  264: [function (b) {
    "use strict";

    b("./core/CCGame");
    b("./actions");
    b("./audio/CCAudio");
  }, {
    "./actions": 7,
    "./audio/CCAudio": 20,
    "./core/CCGame": 25
  }],
  265: [function (f, a) {
    "use strict";

    var b = f("../core/assets/CCAsset");
    var c = f("../core/assets/CCSpriteFrame");
    var d = cc.Class({
      name: "cc.ParticleAsset",
      extends: b,
      properties: {
        spriteFrame: {
          default: null,
          type: c
        }
      }
    });
    cc.ParticleAsset = a.exports = d;
  }, {
    "../core/assets/CCAsset": 57,
    "../core/assets/CCSpriteFrame": 69
  }],
  266: [function (f, b) {
    "use strict";

    var o = f("../core/platform/CCMacro");
    var d = f("./CCParticleAsset");
    var e = f("../core/components/CCRenderComponent");
    var g = f("../core/CCDebug");
    var i = f("../core/utils/texture-util");
    f("../core/renderer/render-flow");
    var j = f("./particle-simulator");
    f("../core/assets/material/CCMaterial");
    var k = f("../core/utils/blend-func");
    var m = cc.Enum({
      GRAVITY: 0,
      RADIUS: 1
    });
    var c = cc.Enum({
      FREE: 0,
      RELATIVE: 1,
      GROUPED: 2
    });
    var a = {
      preview: {
        default: true,
        editorOnly: true,
        notify: false,
        animatable: false,
        tooltip: false
      },
      _custom: false,
      custom: {
        get: function () {
          return this._custom;
        },
        set: function (b) {
          if (this._custom !== b) {
            this._custom = b;
            this._applyFile();
          }
        },
        animatable: false,
        tooltip: false
      },
      _file: {
        default: null,
        type: d
      },
      file: {
        get: function () {
          return this._file;
        },
        set: function (b) {
          if (this._file !== b) {
            this._file = b;
            if (b) {
              this._applyFile();
            } else {
              this.custom = true;
            }
          }
        },
        animatable: false,
        type: d,
        tooltip: false
      },
      _spriteFrame: {
        default: null,
        type: cc.SpriteFrame
      },
      spriteFrame: {
        get: function () {
          return this._spriteFrame;
        },
        set: function (c) {
          var a = this._renderSpriteFrame;
          if (a !== c) {
            this._renderSpriteFrame = c;
            if (!(c && !c._uuid)) {
              this._spriteFrame = c;
            }
            this._applySpriteFrame(a);
          }
        },
        type: cc.SpriteFrame,
        tooltip: false
      },
      _texture: {
        default: null,
        type: cc.Texture2D,
        editorOnly: true
      },
      texture: {
        get: function () {
          return this._getTexture();
        },
        set: function () {},
        type: cc.Texture2D,
        tooltip: false,
        readonly: true,
        visible: false,
        animatable: false
      },
      particleCount: {
        visible: false,
        get: function () {
          return this._simulator.particles.length;
        },
        readonly: true
      },
      _stopped: true,
      stopped: {
        get: function () {
          return this._stopped;
        },
        animatable: false,
        visible: false
      },
      playOnLoad: true,
      autoRemoveOnFinish: {
        default: false,
        animatable: false,
        tooltip: false
      },
      active: {
        get: function () {
          return this._simulator.active;
        },
        visible: false
      },
      totalParticles: 150,
      duration: -1,
      emissionRate: 10,
      life: 1,
      lifeVar: 0,
      _startColor: null,
      startColor: {
        type: cc.Color,
        get: function () {
          return this._startColor;
        },
        set: function (b) {
          this._startColor.r = b.r;
          this._startColor.g = b.g;
          this._startColor.b = b.b;
          this._startColor.a = b.a;
        }
      },
      _startColorVar: null,
      startColorVar: {
        type: cc.Color,
        get: function () {
          return this._startColorVar;
        },
        set: function (b) {
          this._startColorVar.r = b.r;
          this._startColorVar.g = b.g;
          this._startColorVar.b = b.b;
          this._startColorVar.a = b.a;
        }
      },
      _endColor: null,
      endColor: {
        type: cc.Color,
        get: function () {
          return this._endColor;
        },
        set: function (b) {
          this._endColor.r = b.r;
          this._endColor.g = b.g;
          this._endColor.b = b.b;
          this._endColor.a = b.a;
        }
      },
      _endColorVar: null,
      endColorVar: {
        type: cc.Color,
        get: function () {
          return this._endColorVar;
        },
        set: function (b) {
          this._endColorVar.r = b.r;
          this._endColorVar.g = b.g;
          this._endColorVar.b = b.b;
          this._endColorVar.a = b.a;
        }
      },
      angle: 90,
      angleVar: 20,
      startSize: 50,
      startSizeVar: 0,
      endSize: 0,
      endSizeVar: 0,
      startSpin: 0,
      startSpinVar: 0,
      endSpin: 0,
      endSpinVar: 0,
      sourcePos: cc.Vec2.ZERO,
      posVar: cc.Vec2.ZERO,
      _positionType: {
        default: c.FREE,
        formerlySerializedAs: "positionType"
      },
      positionType: {
        type: c,
        get: function () {
          return this._positionType;
        },
        set: function (b) {
          this._positionType = b;
          this._updateMaterial();
        }
      },
      emitterMode: {
        default: m.GRAVITY,
        type: m
      },
      gravity: cc.Vec2.ZERO,
      speed: 180,
      speedVar: 50,
      tangentialAccel: 80,
      tangentialAccelVar: 0,
      radialAccel: 0,
      radialAccelVar: 0,
      rotationIsDir: false,
      startRadius: 0,
      startRadiusVar: 0,
      endRadius: 0,
      endRadiusVar: 0,
      rotatePerS: 0,
      rotatePerSVar: 0
    };
    var h = cc.Class({
      name: "cc.ParticleSystem",
      extends: e,
      mixins: [k],
      editor: false,
      ctor: function () {
        this.initProperties();
      },
      initProperties: function () {
        this._previewTimer = null;
        this._focused = false;
        this._aspectRatio = 1;
        this._simulator = new j(this);
        this._startColor = cc.color(255, 255, 255, 255);
        this._startColorVar = cc.color(0, 0, 0, 0);
        this._endColor = cc.color(255, 255, 255, 0);
        this._endColorVar = cc.color(0, 0, 0, 0);
        this._renderSpriteFrame = null;
      },
      properties: a,
      statics: {
        DURATION_INFINITY: -1,
        START_SIZE_EQUAL_TO_END_SIZE: -1,
        START_RADIUS_EQUAL_TO_END_RADIUS: -1,
        EmitterMode: m,
        PositionType: c
      },
      onFocusInEditor: false,
      onLostFocusInEditor: false,
      onRestore: false,
      _startPreview: false,
      _stopPreview: false,
      _convertTextureToSpriteFrame: false,
      __preload: function () {
        this._super();
        if (this._custom && this.spriteFrame && !this._renderSpriteFrame) {
          this._applySpriteFrame(this.spriteFrame);
        } else if (this._file) {
          if (this._custom) {
            if (!this._getTexture()) {
              this._applyFile();
            }
          } else {
            this._applyFile();
          }
        }
        if (this.playOnLoad) {
          this.resetSystem();
        }
      },
      onDestroy: function () {
        if (this.autoRemoveOnFinish) {
          this.autoRemoveOnFinish = false;
        }
        if (this._buffer) {
          this._buffer.destroy();
          this._buffer = null;
        }
        this._super();
      },
      lateUpdate: function (b) {
        if (!this._simulator.finished) {
          this._simulator.step(b);
        }
      },
      addParticle: function () {},
      stopSystem: function () {
        this._stopped = true;
        this._simulator.stop();
      },
      resetSystem: function () {
        this._stopped = false;
        this._simulator.reset();
        this.markForRender(true);
      },
      isFull: function () {
        return this.particleCount >= this.totalParticles;
      },
      setTextureWithRect: function (c, a) {
        if (c instanceof cc.Texture2D) {
          this.spriteFrame = new cc.SpriteFrame(c, a);
        }
      },
      _applyFile: function () {
        var d = this._file;
        if (d) {
          var a = this;
          cc.assetManager.postLoadNative(d, function (b) {
            if (!b && d._nativeAsset && a.isValid) {
              a._plistFile = d.nativeUrl;
              if (!a._custom) {
                if (a._spriteFrame !== d.spriteFrame) {
                  a.spriteFrame = d.spriteFrame;
                }
                a._initWithDictionary(d._nativeAsset);
              }
              if (a._spriteFrame) {
                if (!a._renderSpriteFrame && a._spriteFrame) {
                  a._applySpriteFrame(a.spriteFrame);
                }
              } else if (d.spriteFrame) {
                a.spriteFrame = d.spriteFrame;
              } else if (a._custom) {
                a._initTextureWithDictionary(d._nativeAsset);
              }
            }
          });
        }
      },
      _initTextureWithDictionary: function (c) {
        var a = cc.path.changeBasename(this._plistFile, c.textureFileName || "");
        if (c.textureFileName) {
          i.loadImage(a, function (b, e) {
            if (b) {
              c.textureFileName = undefined;
              this._initTextureWithDictionary(c);
            } else {
              cc.assetManager.assets.add(a, e);
              this.spriteFrame = new cc.SpriteFrame(e);
            }
          }, this);
        } else if (c.textureImageData) {
          throw Error(g.getError(100));
        }
        return true;
      },
      _initWithDictionary: function (g) {
        this.totalParticles = parseInt(g.maxParticles || 0);
        this.life = parseFloat(g.particleLifespan || 0);
        this.lifeVar = parseFloat(g.particleLifespanVariance || 0);
        var b = g.emissionRate;
        this.emissionRate = b || Math.min(this.totalParticles / this.life, Number.MAX_VALUE);
        this.duration = parseFloat(g.duration || 0);
        this.srcBlendFactor = parseInt(g.blendFuncSource || o.SRC_ALPHA);
        this.dstBlendFactor = parseInt(g.blendFuncDestination || o.ONE_MINUS_SRC_ALPHA);
        var d = this._startColor;
        d.r = parseFloat(g.startColorRed || 0) * 255;
        d.g = parseFloat(g.startColorGreen || 0) * 255;
        d.b = parseFloat(g.startColorBlue || 0) * 255;
        d.a = parseFloat(g.startColorAlpha || 0) * 255;
        var e = this._startColorVar;
        e.r = parseFloat(g.startColorVarianceRed || 0) * 255;
        e.g = parseFloat(g.startColorVarianceGreen || 0) * 255;
        e.b = parseFloat(g.startColorVarianceBlue || 0) * 255;
        e.a = parseFloat(g.startColorVarianceAlpha || 0) * 255;
        var f = this._endColor;
        f.r = parseFloat(g.finishColorRed || 0) * 255;
        f.g = parseFloat(g.finishColorGreen || 0) * 255;
        f.b = parseFloat(g.finishColorBlue || 0) * 255;
        f.a = parseFloat(g.finishColorAlpha || 0) * 255;
        var h = this._endColorVar;
        h.r = parseFloat(g.finishColorVarianceRed || 0) * 255;
        h.g = parseFloat(g.finishColorVarianceGreen || 0) * 255;
        h.b = parseFloat(g.finishColorVarianceBlue || 0) * 255;
        h.a = parseFloat(g.finishColorVarianceAlpha || 0) * 255;
        this.startSize = parseFloat(g.startParticleSize || 0);
        this.startSizeVar = parseFloat(g.startParticleSizeVariance || 0);
        this.endSize = parseFloat(g.finishParticleSize || 0);
        this.endSizeVar = parseFloat(g.finishParticleSizeVariance || 0);
        this.positionType = parseFloat(g.positionType !== undefined ? g.positionType : c.RELATIVE);
        this.sourcePos.x = 0;
        this.sourcePos.y = 0;
        this.posVar.x = parseFloat(g.sourcePositionVariancex || 0);
        this.posVar.y = parseFloat(g.sourcePositionVariancey || 0);
        this.angle = parseFloat(g.angle || 0);
        this.angleVar = parseFloat(g.angleVariance || 0);
        this.startSpin = parseFloat(g.rotationStart || 0);
        this.startSpinVar = parseFloat(g.rotationStartVariance || 0);
        this.endSpin = parseFloat(g.rotationEnd || 0);
        this.endSpinVar = parseFloat(g.rotationEndVariance || 0);
        this.emitterMode = parseInt(g.emitterType || m.GRAVITY);
        if (this.emitterMode === m.GRAVITY) {
          this.gravity.x = parseFloat(g.gravityx || 0);
          this.gravity.y = parseFloat(g.gravityy || 0);
          this.speed = parseFloat(g.speed || 0);
          this.speedVar = parseFloat(g.speedVariance || 0);
          this.radialAccel = parseFloat(g.radialAcceleration || 0);
          this.radialAccelVar = parseFloat(g.radialAccelVariance || 0);
          this.tangentialAccel = parseFloat(g.tangentialAcceleration || 0);
          this.tangentialAccelVar = parseFloat(g.tangentialAccelVariance || 0);
          var i = g.rotationIsDir || "";
          if (i !== null) {
            i = i.toString().toLowerCase();
            this.rotationIsDir = i === "true" || i === "1";
          } else {
            this.rotationIsDir = false;
          }
        } else {
          if (this.emitterMode !== m.RADIUS) {
            return false;
          }
          this.startRadius = parseFloat(g.maxRadius || 0);
          this.startRadiusVar = parseFloat(g.maxRadiusVariance || 0);
          this.endRadius = parseFloat(g.minRadius || 0);
          this.endRadiusVar = parseFloat(g.minRadiusVariance || 0);
          this.rotatePerS = parseFloat(g.rotatePerSecond || 0);
          this.rotatePerSVar = parseFloat(g.rotatePerSecondVariance || 0);
        }
        this._initTextureWithDictionary(g);
        return true;
      },
      _validateRender: function () {
        var b = this._getTexture();
        if (b && b.loaded) {
          this._super();
        } else {
          this.disableRender();
        }
      },
      _onTextureLoaded: function () {
        this._simulator.updateUVs(true);
        this._syncAspect();
        this._updateMaterial();
        this.markForRender(true);
      },
      _syncAspect: function () {
        var b = this._renderSpriteFrame._rect;
        this._aspectRatio = b.width / b.height;
      },
      _applySpriteFrame: function () {
        this._renderSpriteFrame = this._renderSpriteFrame || this._spriteFrame;
        if (this._renderSpriteFrame) {
          if (this._renderSpriteFrame.textureLoaded()) {
            this._onTextureLoaded();
          } else {
            this._renderSpriteFrame.onTextureLoaded(this._onTextureLoaded, this);
          }
        }
      },
      _getTexture: function () {
        return this._renderSpriteFrame && this._renderSpriteFrame.getTexture() || this._texture;
      },
      _updateMaterial: function () {
        var b = this.getMaterial(0);
        if (b) {
          b.define("CC_USE_MODEL", this._positionType !== c.FREE);
          b.setProperty("texture", this._getTexture());
          k.prototype._updateMaterial.call(this);
        }
      },
      _finishedSimulation: function () {
        this.disableRender();
        if (this.autoRemoveOnFinish && this._stopped) {
          this.node.destroy();
        }
      }
    });
    cc.ParticleSystem = b.exports = h;
  }, {
    "../core/CCDebug": 23,
    "../core/assets/material/CCMaterial": 76,
    "../core/components/CCRenderComponent": 109,
    "../core/platform/CCMacro": 167,
    "../core/renderer/render-flow": 194,
    "../core/utils/blend-func": 230,
    "../core/utils/texture-util": 244,
    "./CCParticleAsset": 265,
    "./particle-simulator": 268,
    "fire-url": undefined
  }],
  267: [function (b) {
    "use strict";

    b("./CCParticleAsset");
    b("./CCParticleSystem");
    b("./particle-simulator");
    b("./particle-system-assembler");
  }, {
    "./CCParticleAsset": 265,
    "./CCParticleSystem": 266,
    "./particle-simulator": 268,
    "./particle-system-assembler": 269
  }],
  268: [function (f, b) {
    "use strict";

    var d = f("../core/platform/js");
    var s = f("../core/utils/misc");
    var e = cc.v2(0, 0);
    var g = cc.v2();
    var k = cc.v2();
    var i = cc.v2();
    var a = cc.v2();
    function j() {
      this.pos = cc.v2(0, 0);
      this.startPos = cc.v2(0, 0);
      this.color = cc.color(0, 0, 0, 255);
      this.deltaColor = {
        r: 0,
        g: 0,
        b: 0,
        a: 255
      };
      this.preciseColor = {
        r: 0,
        g: 0,
        b: 0,
        a: 255
      };
      this.size = 0;
      this.deltaSize = 0;
      this.rotation = 0;
      this.deltaRotation = 0;
      this.timeToLive = 0;
      this.drawPos = cc.v2(0, 0);
      this.aspectRatio = 1;
      this.dir = cc.v2(0, 0);
      this.radialAccel = 0;
      this.tangentialAccel = 0;
      this.angle = 0;
      this.degreesPerSecond = 0;
      this.radius = 0;
      this.deltaRadius = 0;
    }
    var c = new d.Pool(function (b) {
      b.pos.set(e);
      b.startPos.set(e);
      b.color._val = 4278190080;
      b.deltaColor.r = b.deltaColor.g = b.deltaColor.b = 0;
      b.deltaColor.a = 255;
      b.size = 0;
      b.deltaSize = 0;
      b.rotation = 0;
      b.deltaRotation = 0;
      b.timeToLive = 0;
      b.drawPos.set(e);
      b.aspectRatio = 1;
      b.dir.set(e);
      b.radialAccel = 0;
      b.tangentialAccel = 0;
      b.angle = 0;
      b.degreesPerSecond = 0;
      b.radius = 0;
      b.deltaRadius = 0;
    }, 1024);
    c.get = function () {
      return this._get() || new j();
    };
    function m(b) {
      this.sys = b;
      this.particles = [];
      this.active = false;
      this.readyToPlay = true;
      this.finished = false;
      this.elapsed = 0;
      this.emitCounter = 0;
      this._uvFilled = 0;
      this._worldRotation = 0;
    }
    function h(d) {
      for (var a = 0, e = d; e;) {
        a += e.angle;
        e = e.parent;
      }
      return a;
    }
    m.prototype.stop = function () {
      this.active = false;
      this.readyToPlay = false;
      this.elapsed = this.sys.duration;
      this.emitCounter = 0;
    };
    m.prototype.reset = function () {
      this.active = true;
      this.readyToPlay = true;
      this.elapsed = 0;
      this.emitCounter = 0;
      this.finished = false;
      for (var a = this.particles, b = a.length, i = 0; i < b; ++i) {
        c.put(a[i]);
      }
      a.length = 0;
      var k = this.sys._buffer;
      if (k && k.byteOffset > 0 && b > 0) {
        for (var e = this.sys._vertexFormat._bytes * 4 / 4, f = k._uintVData, g = 0; g < b; g++) {
          var l = e * g;
          f[l + 4] = f[l + 9] = f[l + 14] = f[l + 19] = 0;
        }
        k._dirty = true;
        k.uploadData();
      }
    };
    m.prototype.emitParticle = function (a) {
      var b = this.sys;
      var g = s.clampf;
      var e = c.get();
      this.particles.push(e);
      e.timeToLive = b.life + b.lifeVar * (Math.random() - 0.5) * 2;
      var h;
      var i;
      var j;
      var m;
      var o = e.timeToLive = Math.max(0, e.timeToLive);
      e.pos.x = b.sourcePos.x + b.posVar.x * (Math.random() - 0.5) * 2;
      e.pos.y = b.sourcePos.y + b.posVar.y * (Math.random() - 0.5) * 2;
      var q = b._startColor;
      var l = b._startColorVar;
      var u = b._endColor;
      var f = b._endColorVar;
      e.color.r = h = g(q.r + l.r * (Math.random() - 0.5) * 2, 0, 255);
      e.color.g = i = g(q.g + l.g * (Math.random() - 0.5) * 2, 0, 255);
      e.color.b = j = g(q.b + l.b * (Math.random() - 0.5) * 2, 0, 255);
      e.color.a = m = g(q.a + l.a * (Math.random() - 0.5) * 2, 0, 255);
      var d = e.color;
      var w = e.preciseColor;
      w.r = d.r;
      w.g = d.g;
      w.b = d.b;
      w.a = d.a;
      e.deltaColor.r = (g(u.r + f.r * (Math.random() - 0.5) * 2, 0, 255) - h) / o;
      e.deltaColor.g = (g(u.g + f.g * (Math.random() - 0.5) * 2, 0, 255) - i) / o;
      e.deltaColor.b = (g(u.b + f.b * (Math.random() - 0.5) * 2, 0, 255) - j) / o;
      e.deltaColor.a = (g(u.a + f.a * (Math.random() - 0.5) * 2, 0, 255) - m) / o;
      var p = b.startSize + b.startSizeVar * (Math.random() - 0.5) * 2;
      p = Math.max(0, p);
      e.size = p;
      if (b.endSize === cc.ParticleSystem.START_SIZE_EQUAL_TO_END_SIZE) {
        e.deltaSize = 0;
      } else {
        var z = b.endSize + b.endSizeVar * (Math.random() - 0.5) * 2;
        z = Math.max(0, z);
        e.deltaSize = (z - p) / o;
      }
      var C = b.startSpin + b.startSpinVar * (Math.random() - 0.5) * 2;
      var D = b.endSpin + b.endSpinVar * (Math.random() - 0.5) * 2;
      e.rotation = C;
      e.deltaRotation = (D - C) / o;
      e.startPos.x = a.x;
      e.startPos.y = a.y;
      e.aspectRatio = b._aspectRatio || 1;
      var y = s.degreesToRadians(b.angle + this._worldRotation + b.angleVar * (Math.random() - 0.5) * 2);
      if (b.emitterMode === cc.ParticleSystem.EmitterMode.GRAVITY) {
        var F = b.speed + b.speedVar * (Math.random() - 0.5) * 2;
        e.dir.x = Math.cos(y);
        e.dir.y = Math.sin(y);
        e.dir.mulSelf(F);
        e.radialAccel = b.radialAccel + b.radialAccelVar * (Math.random() - 0.5) * 2;
        e.tangentialAccel = b.tangentialAccel + b.tangentialAccelVar * (Math.random() - 0.5) * 2;
        if (b.rotationIsDir) {
          e.rotation = -s.radiansToDegrees(Math.atan2(e.dir.y, e.dir.x));
        }
      } else {
        var E = b.startRadius + b.startRadiusVar * (Math.random() - 0.5) * 2;
        var A = b.endRadius + b.endRadiusVar * (Math.random() - 0.5) * 2;
        e.radius = E;
        e.deltaRadius = b.endRadius === cc.ParticleSystem.START_RADIUS_EQUAL_TO_END_RADIUS ? 0 : (A - E) / o;
        e.angle = y;
        e.degreesPerSecond = s.degreesToRadians(b.rotatePerS + b.rotatePerSVar * (Math.random() - 0.5) * 2);
      }
    };
    m.prototype.updateUVs = function (c) {
      var b = this.sys._assembler;
      if (b) {
        var d = b.getBuffer();
        if (d && this.sys._renderSpriteFrame) {
          for (var e = b._vfmt._bytes * 4 / 4, f = d._vData, g = this.sys._renderSpriteFrame.uv, h = c ? 0 : this._uvFilled, i = this.particles.length, a = h; a < i; a++) {
            var l = a * e;
            f[l + 2] = g[0];
            f[l + 3] = g[1];
            f[l + 7] = g[2];
            f[l + 8] = g[3];
            f[l + 12] = g[4];
            f[l + 13] = g[5];
            f[l + 17] = g[6];
            f[l + 18] = g[7];
          }
          this._uvFilled = i;
        }
      }
    };
    m.prototype.updateParticleBuffer = function (h, b, j, e) {
      var i = j._vData;
      var k = j._uintVData;
      var l = b.x;
      var a = b.y;
      var n = h.size;
      var o = n;
      var q = h.aspectRatio;
      if (q > 1) {
        o = n / q;
      } else {
        n = o * q;
      }
      var x = n / 2;
      var t = o / 2;
      if (h.rotation) {
        var f = -x;
        var d = -t;
        var u = x;
        var p = t;
        var v = -s.degreesToRadians(h.rotation);
        var g = Math.cos(v);
        var m = Math.sin(v);
        i[e] = f * g - d * m + l;
        i[e + 1] = f * m + d * g + a;
        i[e + 5] = u * g - d * m + l;
        i[e + 6] = u * m + d * g + a;
        i[e + 10] = f * g - p * m + l;
        i[e + 11] = f * m + p * g + a;
        i[e + 15] = u * g - p * m + l;
        i[e + 16] = u * m + p * g + a;
      } else {
        i[e] = l - x;
        i[e + 1] = a - t;
        i[e + 5] = l + x;
        i[e + 6] = a - t;
        i[e + 10] = l - x;
        i[e + 11] = a + t;
        i[e + 15] = l + x;
        i[e + 16] = a + t;
      }
      k[e + 4] = h.color._val;
      k[e + 9] = h.color._val;
      k[e + 14] = h.color._val;
      k[e + 19] = h.color._val;
    };
    m.prototype.step = function (b) {
      b = b > cc.director._maxParticleDeltaTime ? cc.director._maxParticleDeltaTime : b;
      var l = this.sys;
      var f = l.node;
      var e = this.particles;
      var m = this.sys._assembler._vfmt._bytes * 4 / 4;
      var j = cc.ParticleSystem.PositionType;
      f._updateWorldMatrix();
      if (l.positionType === j.FREE) {
        this._worldRotation = h(f);
        var n = f._worldMatrix.m;
        g.x = n[12];
        g.y = n[13];
      } else if (l.positionType === j.RELATIVE) {
        this._worldRotation = f.angle;
        g.x = f.x;
        g.y = f.y;
      } else {
        this._worldRotation = 0;
      }
      if (this.active && l.emissionRate) {
        var o = 1 / l.emissionRate;
        for (e.length < l.totalParticles && (this.emitCounter += b); e.length < l.totalParticles && this.emitCounter > o;) {
          this.emitParticle(g);
          this.emitCounter -= o;
        }
        this.elapsed += b;
        if (l.duration !== -1 && l.duration < this.elapsed) {
          l.stopSystem();
        }
      }
      var q = l._assembler.getBuffer();
      var d = e.length;
      q.reset();
      q.request(d * 4, d * 6);
      if (d > this._uvFilled) {
        this.updateUVs();
      }
      for (var r = 0; r < e.length;) {
        k.x = k.y = i.x = i.y = a.x = a.y = 0;
        var s = e[r];
        s.timeToLive -= b;
        if (s.timeToLive > 0) {
          if (l.emitterMode === cc.ParticleSystem.EmitterMode.GRAVITY) {
            var t = a;
            var u = k;
            var v = i;
            if (s.pos.x || s.pos.y) {
              u.set(s.pos);
              u.normalizeSelf();
            }
            v.set(u);
            u.mulSelf(s.radialAccel);
            var x = v.x;
            v.x = -v.y;
            v.y = x;
            v.mulSelf(s.tangentialAccel);
            t.set(u);
            t.addSelf(v);
            t.addSelf(l.gravity);
            t.mulSelf(b);
            s.dir.addSelf(t);
            t.set(s.dir);
            t.mulSelf(b);
            s.pos.addSelf(t);
          } else {
            s.angle += s.degreesPerSecond * b;
            s.radius += s.deltaRadius * b;
            s.pos.x = -Math.cos(s.angle) * s.radius;
            s.pos.y = -Math.sin(s.angle) * s.radius;
          }
          var y = s.preciseColor;
          var A = s.deltaColor;
          y.r += A.r * b;
          y.g += A.g * b;
          y.b += A.b * b;
          y.a += A.a * b;
          var C = s.color;
          C.r = y.r;
          C.g = y.g;
          C.b = y.b;
          C.a = y.a;
          s.size += s.deltaSize * b;
          if (s.size < 0) {
            s.size = 0;
          }
          s.rotation += s.deltaRotation * b;
          var E = k;
          E.set(s.pos);
          if (l.positionType !== j.GROUPED) {
            E.addSelf(s.startPos);
          }
          var M = m * r;
          this.updateParticleBuffer(s, E, q, M);
          ++r;
        } else {
          var N = e[r];
          if (r !== e.length - 1) {
            e[r] = e[e.length - 1];
          }
          c.put(N);
          e.length--;
        }
      }
      l._assembler._ia._count = e.length * 6;
      if (e.length > 0) {
        q.uploadData();
      } else if (!(this.active || this.readyToPlay)) {
        this.finished = true;
        l._finishedSimulation();
      }
    };
    b.exports = m;
  }, {
    "../core/platform/js": 183,
    "../core/utils/misc": 236
  }],
  269: [function (h, b) {
    "use strict";

    var d = f(h("../core/renderer/assembler"));
    var e = f(h("../renderer/core/input-assembler"));
    function f(b) {
      if (b && b.__esModule) {
        return b;
      } else {
        return {
          default: b
        };
      }
    }
    function m(c, a) {
      return (m = Object.setPrototypeOf || function (c, a) {
        c.__proto__ = a;
        return c;
      })(c, a);
    }
    var g = h("./CCParticleSystem");
    var i = h("../core/renderer/");
    var a = h("../core/renderer/webgl/quad-buffer");
    var k = h("../core/renderer/webgl/vertex-format").vfmtPosUvColor;
    var c = function (c) {
      var b;
      var f;
      function j(b) {
        var a;
        (a = c.call(this, b) || this)._buffer = null;
        a._ia = null;
        a._vfmt = k;
        return a;
      }
      f = c;
      (b = j).prototype = Object.create(f.prototype);
      b.prototype.constructor = b;
      m(b, f);
      var h = j.prototype;
      h.getBuffer = function () {
        if (!this._buffer) {
          this._buffer = new a(i._handle, k);
          this._ia = new e.default();
          this._ia._vertexBuffer = this._buffer._vb;
          this._ia._indexBuffer = this._buffer._ib;
          this._ia._start = 0;
          this._ia._count = 0;
        }
        return this._buffer;
      };
      h.fillBuffers = function (d, a) {
        if (this._ia) {
          var b = cc.ParticleSystem.PositionType;
          if (d.positionType === b.RELATIVE) {
            a.node = d.node.parent;
          } else {
            a.node = d.node;
          }
          a.material = d._materials[0];
          a._flushIA(this._ia);
        }
      };
      return j;
    }(d.default);
    d.default.register(g, c);
    b.exports = c;
  }, {
    "../core/renderer/": 193,
    "../core/renderer/assembler": 190,
    "../core/renderer/webgl/quad-buffer": 222,
    "../core/renderer/webgl/vertex-format": 225,
    "../renderer/core/input-assembler": 272,
    "./CCParticleSystem": 266
  }],
  270: [function (a, b) {
    "use strict";

    var c;
    var d;
    var f;
    var g;
    var h;
    var i;
    var k;
    var l;
    var m;
    var n;
    var o;
    var p;
    var q;
    var r;
    var s;
    var t;
    var u;
    var v;
    var w;
    var x;
    var y;
    var z;
    var A;
    var B;
    var C;
    var D;
    var E;
    var F;
    var G;
    var H;
    var I;
    var J;
    var L;
    var M;
    var N;
    var O;
    var P;
    var R;
    var S;
    var T;
    var U;
    var V;
    (function (b) {
      b[b.COMPRESSED_RGB_S3TC_DXT1_EXT = 33776] = "COMPRESSED_RGB_S3TC_DXT1_EXT";
      b[b.COMPRESSED_RGBA_S3TC_DXT1_EXT = 33777] = "COMPRESSED_RGBA_S3TC_DXT1_EXT";
      b[b.COMPRESSED_RGBA_S3TC_DXT3_EXT = 33778] = "COMPRESSED_RGBA_S3TC_DXT3_EXT";
      b[b.COMPRESSED_RGBA_S3TC_DXT5_EXT = 33779] = "COMPRESSED_RGBA_S3TC_DXT5_EXT";
      b[b.COMPRESSED_SRGB_S3TC_DXT1_EXT = 35916] = "COMPRESSED_SRGB_S3TC_DXT1_EXT";
      b[b.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 35917] = "COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT";
      b[b.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 35918] = "COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT";
      b[b.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 35919] = "COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT";
      b[b.COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 35840] = "COMPRESSED_RGB_PVRTC_4BPPV1_IMG";
      b[b.COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 35841] = "COMPRESSED_RGB_PVRTC_2BPPV1_IMG";
      b[b.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 35842] = "COMPRESSED_RGBA_PVRTC_4BPPV1_IMG";
      b[b.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 35843] = "COMPRESSED_RGBA_PVRTC_2BPPV1_IMG";
      b[b.COMPRESSED_RGB_ETC1_WEBGL = 36196] = "COMPRESSED_RGB_ETC1_WEBGL";
    })(c || (c = {}));
    (function (b) {
      b[b.UNKNOWN = 0] = "UNKNOWN";
      b[b.BUFFER = 1] = "BUFFER";
      b[b.TEXTURE = 2] = "TEXTURE";
      b[b.TEXTURE_VIEW = 3] = "TEXTURE_VIEW";
      b[b.RENDER_PASS = 4] = "RENDER_PASS";
      b[b.FRAMEBUFFER = 5] = "FRAMEBUFFER";
      b[b.SAMPLER = 6] = "SAMPLER";
      b[b.SHADER = 7] = "SHADER";
      b[b.PIPELINE_LAYOUT = 8] = "PIPELINE_LAYOUT";
      b[b.PIPELINE_STATE = 9] = "PIPELINE_STATE";
      b[b.BINDING_LAYOUT = 10] = "BINDING_LAYOUT";
      b[b.INPUT_ASSEMBLER = 11] = "INPUT_ASSEMBLER";
      b[b.COMMAND_ALLOCATOR = 12] = "COMMAND_ALLOCATOR";
      b[b.COMMAND_BUFFER = 13] = "COMMAND_BUFFER";
      b[b.QUEUE = 14] = "QUEUE";
      b[b.WINDOW = 15] = "WINDOW";
    })(d || (d = {}));
    (function (b) {
      b[b.UNREADY = 0] = "UNREADY";
      b[b.FAILED = 1] = "FAILED";
      b[b.SUCCESS = 2] = "SUCCESS";
    })(f || (f = {}));
    (function () {
      function b(b) {
        this._gfxType = d.UNKNOWN;
        this._status = f.UNREADY;
        this._gfxType = b;
      }
      Object.defineProperty(b.prototype, "gfxType", {
        get: function () {
          return this._gfxType;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(b.prototype, "status", {
        get: function () {
          return this._status;
        },
        enumerable: true,
        configurable: true
      });
    })();
    (function (b) {
      b.ATTR_POSITION = "a_position";
      b.ATTR_NORMAL = "a_normal";
      b.ATTR_TANGENT = "a_tangent";
      b.ATTR_BITANGENT = "a_bitangent";
      b.ATTR_WEIGHTS = "a_weights";
      b.ATTR_JOINTS = "a_joints";
      b.ATTR_COLOR = "a_color";
      b.ATTR_COLOR1 = "a_color1";
      b.ATTR_COLOR2 = "a_color2";
      b.ATTR_TEX_COORD = "a_texCoord";
      b.ATTR_TEX_COORD1 = "a_texCoord1";
      b.ATTR_TEX_COORD2 = "a_texCoord2";
      b.ATTR_TEX_COORD3 = "a_texCoord3";
      b.ATTR_TEX_COORD4 = "a_texCoord4";
      b.ATTR_TEX_COORD5 = "a_texCoord5";
      b.ATTR_TEX_COORD6 = "a_texCoord6";
      b.ATTR_TEX_COORD7 = "a_texCoord7";
      b.ATTR_TEX_COORD8 = "a_texCoord8";
    })(g || (g = {}));
    (function (b) {
      b[b.UNKNOWN = 0] = "UNKNOWN";
      b[b.BOOL = 1] = "BOOL";
      b[b.BOOL2 = 2] = "BOOL2";
      b[b.BOOL3 = 3] = "BOOL3";
      b[b.BOOL4 = 4] = "BOOL4";
      b[b.INT = 5] = "INT";
      b[b.INT2 = 6] = "INT2";
      b[b.INT3 = 7] = "INT3";
      b[b.INT4 = 8] = "INT4";
      b[b.UINT = 9] = "UINT";
      b[b.UINT2 = 10] = "UINT2";
      b[b.UINT3 = 11] = "UINT3";
      b[b.UINT4 = 12] = "UINT4";
      b[b.FLOAT = 13] = "FLOAT";
      b[b.FLOAT2 = 14] = "FLOAT2";
      b[b.FLOAT3 = 15] = "FLOAT3";
      b[b.FLOAT4 = 16] = "FLOAT4";
      b[b.COLOR4 = 17] = "COLOR4";
      b[b.MAT2 = 18] = "MAT2";
      b[b.MAT2X3 = 19] = "MAT2X3";
      b[b.MAT2X4 = 20] = "MAT2X4";
      b[b.MAT3X2 = 21] = "MAT3X2";
      b[b.MAT3 = 22] = "MAT3";
      b[b.MAT3X4 = 23] = "MAT3X4";
      b[b.MAT4X2 = 24] = "MAT4X2";
      b[b.MAT4X3 = 25] = "MAT4X3";
      b[b.MAT4 = 26] = "MAT4";
      b[b.SAMPLER1D = 27] = "SAMPLER1D";
      b[b.SAMPLER1D_ARRAY = 28] = "SAMPLER1D_ARRAY";
      b[b.SAMPLER2D = 29] = "SAMPLER2D";
      b[b.SAMPLER2D_ARRAY = 30] = "SAMPLER2D_ARRAY";
      b[b.SAMPLER3D = 31] = "SAMPLER3D";
      b[b.SAMPLER_CUBE = 32] = "SAMPLER_CUBE";
      b[b.COUNT = 33] = "COUNT";
    })(h || (h = {}));
    (function (b) {
      b[b.UNKNOWN = 0] = "UNKNOWN";
      b[b.A8 = 1] = "A8";
      b[b.L8 = 2] = "L8";
      b[b.LA8 = 3] = "LA8";
      b[b.R8 = 4] = "R8";
      b[b.R8SN = 5] = "R8SN";
      b[b.R8UI = 6] = "R8UI";
      b[b.R8I = 7] = "R8I";
      b[b.R16F = 8] = "R16F";
      b[b.R16UI = 9] = "R16UI";
      b[b.R16I = 10] = "R16I";
      b[b.R32F = 11] = "R32F";
      b[b.R32UI = 12] = "R32UI";
      b[b.R32I = 13] = "R32I";
      b[b.RG8 = 14] = "RG8";
      b[b.RG8SN = 15] = "RG8SN";
      b[b.RG8UI = 16] = "RG8UI";
      b[b.RG8I = 17] = "RG8I";
      b[b.RG16F = 18] = "RG16F";
      b[b.RG16UI = 19] = "RG16UI";
      b[b.RG16I = 20] = "RG16I";
      b[b.RG32F = 21] = "RG32F";
      b[b.RG32UI = 22] = "RG32UI";
      b[b.RG32I = 23] = "RG32I";
      b[b.RGB8 = 24] = "RGB8";
      b[b.SRGB8 = 25] = "SRGB8";
      b[b.RGB8SN = 26] = "RGB8SN";
      b[b.RGB8UI = 27] = "RGB8UI";
      b[b.RGB8I = 28] = "RGB8I";
      b[b.RGB16F = 29] = "RGB16F";
      b[b.RGB16UI = 30] = "RGB16UI";
      b[b.RGB16I = 31] = "RGB16I";
      b[b.RGB32F = 32] = "RGB32F";
      b[b.RGB32UI = 33] = "RGB32UI";
      b[b.RGB32I = 34] = "RGB32I";
      b[b.RGBA8 = 35] = "RGBA8";
      b[b.SRGB8_A8 = 36] = "SRGB8_A8";
      b[b.RGBA8SN = 37] = "RGBA8SN";
      b[b.RGBA8UI = 38] = "RGBA8UI";
      b[b.RGBA8I = 39] = "RGBA8I";
      b[b.RGBA16F = 40] = "RGBA16F";
      b[b.RGBA16UI = 41] = "RGBA16UI";
      b[b.RGBA16I = 42] = "RGBA16I";
      b[b.RGBA32F = 43] = "RGBA32F";
      b[b.RGBA32UI = 44] = "RGBA32UI";
      b[b.RGBA32I = 45] = "RGBA32I";
      b[b.R5G6B5 = 46] = "R5G6B5";
      b[b.R11G11B10F = 47] = "R11G11B10F";
      b[b.RGB5A1 = 48] = "RGB5A1";
      b[b.RGBA4 = 49] = "RGBA4";
      b[b.RGB10A2 = 50] = "RGB10A2";
      b[b.RGB10A2UI = 51] = "RGB10A2UI";
      b[b.RGB9E5 = 52] = "RGB9E5";
      b[b.D16 = 53] = "D16";
      b[b.D16S8 = 54] = "D16S8";
      b[b.D24 = 55] = "D24";
      b[b.D24S8 = 56] = "D24S8";
      b[b.D32F = 57] = "D32F";
      b[b.D32F_S8 = 58] = "D32F_S8";
      b[b.BC1 = 59] = "BC1";
      b[b.BC1_ALPHA = 60] = "BC1_ALPHA";
      b[b.BC1_SRGB = 61] = "BC1_SRGB";
      b[b.BC1_SRGB_ALPHA = 62] = "BC1_SRGB_ALPHA";
      b[b.BC2 = 63] = "BC2";
      b[b.BC2_SRGB = 64] = "BC2_SRGB";
      b[b.BC3 = 65] = "BC3";
      b[b.BC3_SRGB = 66] = "BC3_SRGB";
      b[b.BC4 = 67] = "BC4";
      b[b.BC4_SNORM = 68] = "BC4_SNORM";
      b[b.BC5 = 69] = "BC5";
      b[b.BC5_SNORM = 70] = "BC5_SNORM";
      b[b.BC6H_UF16 = 71] = "BC6H_UF16";
      b[b.BC6H_SF16 = 72] = "BC6H_SF16";
      b[b.BC7 = 73] = "BC7";
      b[b.BC7_SRGB = 74] = "BC7_SRGB";
      b[b.ETC_RGB8 = 75] = "ETC_RGB8";
      b[b.ETC2_RGB8 = 76] = "ETC2_RGB8";
      b[b.ETC2_SRGB8 = 77] = "ETC2_SRGB8";
      b[b.ETC2_RGB8_A1 = 78] = "ETC2_RGB8_A1";
      b[b.ETC2_SRGB8_A1 = 79] = "ETC2_SRGB8_A1";
      b[b.ETC2_RGBA8 = 80] = "ETC2_RGBA8";
      b[b.ETC2_SRGB8_A8 = 81] = "ETC2_SRGB8_A8";
      b[b.EAC_R11 = 82] = "EAC_R11";
      b[b.EAC_R11SN = 83] = "EAC_R11SN";
      b[b.EAC_RG11 = 84] = "EAC_RG11";
      b[b.EAC_RG11SN = 85] = "EAC_RG11SN";
      b[b.PVRTC_RGB2 = 86] = "PVRTC_RGB2";
      b[b.PVRTC_RGBA2 = 87] = "PVRTC_RGBA2";
      b[b.PVRTC_RGB4 = 88] = "PVRTC_RGB4";
      b[b.PVRTC_RGBA4 = 89] = "PVRTC_RGBA4";
      b[b.PVRTC2_2BPP = 90] = "PVRTC2_2BPP";
      b[b.PVRTC2_4BPP = 91] = "PVRTC2_4BPP";
      b[b.ASTC_RGBA_4x4 = 92] = "ASTC_RGBA_4x4";
      b[b.ASTC_RGBA_5x4 = 92] = "ASTC_RGBA_5x4";
      b[b.ASTC_RGBA_5x5 = 92] = "ASTC_RGBA_5x5";
      b[b.ASTC_RGBA_6x5 = 92] = "ASTC_RGBA_6x5";
      b[b.ASTC_RGBA_6x6 = 92] = "ASTC_RGBA_6x6";
      b[b.ASTC_RGBA_8x5 = 92] = "ASTC_RGBA_8x5";
      b[b.ASTC_RGBA_8x6 = 92] = "ASTC_RGBA_8x6";
      b[b.ASTC_RGBA_8x8 = 92] = "ASTC_RGBA_8x8";
      b[b.ASTC_RGBA_10x5 = 92] = "ASTC_RGBA_10x5";
      b[b.ASTC_RGBA_10x6 = 92] = "ASTC_RGBA_10x6";
      b[b.ASTC_RGBA_10x8 = 92] = "ASTC_RGBA_10x8";
      b[b.ASTC_RGBA_10x10 = 92] = "ASTC_RGBA_10x10";
      b[b.ASTC_RGBA_12x10 = 92] = "ASTC_RGBA_12x10";
      b[b.ASTC_RGBA_12x12 = 92] = "ASTC_RGBA_12x12";
      b[b.ASTC_SRGBA_4x4 = 92] = "ASTC_SRGBA_4x4";
      b[b.ASTC_SRGBA_5x4 = 92] = "ASTC_SRGBA_5x4";
      b[b.ASTC_SRGBA_5x5 = 92] = "ASTC_SRGBA_5x5";
      b[b.ASTC_SRGBA_6x5 = 92] = "ASTC_SRGBA_6x5";
      b[b.ASTC_SRGBA_6x6 = 92] = "ASTC_SRGBA_6x6";
      b[b.ASTC_SRGBA_8x5 = 92] = "ASTC_SRGBA_8x5";
      b[b.ASTC_SRGBA_8x6 = 92] = "ASTC_SRGBA_8x6";
      b[b.ASTC_SRGBA_8x8 = 92] = "ASTC_SRGBA_8x8";
      b[b.ASTC_SRGBA_10x5 = 92] = "ASTC_SRGBA_10x5";
      b[b.ASTC_SRGBA_10x6 = 92] = "ASTC_SRGBA_10x6";
      b[b.ASTC_SRGBA_10x8 = 92] = "ASTC_SRGBA_10x8";
      b[b.ASTC_SRGBA_10x10 = 92] = "ASTC_SRGBA_10x10";
      b[b.ASTC_SRGBA_12x10 = 92] = "ASTC_SRGBA_12x10";
      b[b.ASTC_SRGBA_12x12 = 92] = "ASTC_SRGBA_12x12";
    })(i || (i = {}));
    (function (b) {
      b[b.NONE = 0] = "NONE";
      b[b.TRANSFER_SRC = 1] = "TRANSFER_SRC";
      b[b.TRANSFER_DST = 2] = "TRANSFER_DST";
      b[b.INDEX = 4] = "INDEX";
      b[b.VERTEX = 8] = "VERTEX";
      b[b.UNIFORM = 16] = "UNIFORM";
      b[b.STORAGE = 32] = "STORAGE";
      b[b.INDIRECT = 64] = "INDIRECT";
    })(k || (k = {}));
    (function (b) {
      b[b.NONE = 0] = "NONE";
      b[b.DEVICE = 1] = "DEVICE";
      b[b.HOST = 2] = "HOST";
    })(l || (l = {}));
    (function (b) {
      b[b.NONE = 0] = "NONE";
      b[b.READ = 1] = "READ";
      b[b.WRITE = 2] = "WRITE";
    })(m || (m = {}));
    (function (b) {
      b[b.POINT_LIST = 0] = "POINT_LIST";
      b[b.LINE_LIST = 1] = "LINE_LIST";
      b[b.LINE_STRIP = 2] = "LINE_STRIP";
      b[b.LINE_LOOP = 3] = "LINE_LOOP";
      b[b.LINE_LIST_ADJACENCY = 4] = "LINE_LIST_ADJACENCY";
      b[b.LINE_STRIP_ADJACENCY = 5] = "LINE_STRIP_ADJACENCY";
      b[b.ISO_LINE_LIST = 6] = "ISO_LINE_LIST";
      b[b.TRIANGLE_LIST = 7] = "TRIANGLE_LIST";
      b[b.TRIANGLE_STRIP = 8] = "TRIANGLE_STRIP";
      b[b.TRIANGLE_FAN = 9] = "TRIANGLE_FAN";
      b[b.TRIANGLE_LIST_ADJACENCY = 10] = "TRIANGLE_LIST_ADJACENCY";
      b[b.TRIANGLE_STRIP_ADJACENCY = 11] = "TRIANGLE_STRIP_ADJACENCY";
      b[b.TRIANGLE_PATCH_ADJACENCY = 12] = "TRIANGLE_PATCH_ADJACENCY";
      b[b.QUAD_PATCH_LIST = 13] = "QUAD_PATCH_LIST";
    })(n || (n = {}));
    (function (b) {
      b[b.FILL = 0] = "FILL";
      b[b.POINT = 1] = "POINT";
      b[b.LINE = 2] = "LINE";
    })(o || (o = {}));
    (function (b) {
      b[b.GOURAND = 0] = "GOURAND";
      b[b.FLAT = 1] = "FLAT";
    })(p || (p = {}));
    (function (b) {
      b[b.NONE = 0] = "NONE";
      b[b.FRONT = 1] = "FRONT";
      b[b.BACK = 2] = "BACK";
    })(q || (q = {}));
    (function (b) {
      b[b.NEVER = 0] = "NEVER";
      b[b.LESS = 1] = "LESS";
      b[b.EQUAL = 2] = "EQUAL";
      b[b.LESS_EQUAL = 3] = "LESS_EQUAL";
      b[b.GREATER = 4] = "GREATER";
      b[b.NOT_EQUAL = 5] = "NOT_EQUAL";
      b[b.GREATER_EQUAL = 6] = "GREATER_EQUAL";
      b[b.ALWAYS = 7] = "ALWAYS";
    })(r || (r = {}));
    (function (b) {
      b[b.ZERO = 0] = "ZERO";
      b[b.KEEP = 1] = "KEEP";
      b[b.REPLACE = 2] = "REPLACE";
      b[b.INCR = 3] = "INCR";
      b[b.DECR = 4] = "DECR";
      b[b.INVERT = 5] = "INVERT";
      b[b.INCR_WRAP = 6] = "INCR_WRAP";
      b[b.DECR_WRAP = 7] = "DECR_WRAP";
    })(s || (s = {}));
    (function (b) {
      b[b.ADD = 0] = "ADD";
      b[b.SUB = 1] = "SUB";
      b[b.REV_SUB = 2] = "REV_SUB";
      b[b.MIN = 3] = "MIN";
      b[b.MAX = 4] = "MAX";
    })(t || (t = {}));
    (function (b) {
      b[b.ZERO = 0] = "ZERO";
      b[b.ONE = 1] = "ONE";
      b[b.SRC_ALPHA = 2] = "SRC_ALPHA";
      b[b.DST_ALPHA = 3] = "DST_ALPHA";
      b[b.ONE_MINUS_SRC_ALPHA = 4] = "ONE_MINUS_SRC_ALPHA";
      b[b.ONE_MINUS_DST_ALPHA = 5] = "ONE_MINUS_DST_ALPHA";
      b[b.SRC_COLOR = 6] = "SRC_COLOR";
      b[b.DST_COLOR = 7] = "DST_COLOR";
      b[b.ONE_MINUS_SRC_COLOR = 8] = "ONE_MINUS_SRC_COLOR";
      b[b.ONE_MINUS_DST_COLOR = 9] = "ONE_MINUS_DST_COLOR";
      b[b.SRC_ALPHA_SATURATE = 10] = "SRC_ALPHA_SATURATE";
      b[b.CONSTANT_COLOR = 11] = "CONSTANT_COLOR";
      b[b.ONE_MINUS_CONSTANT_COLOR = 12] = "ONE_MINUS_CONSTANT_COLOR";
      b[b.CONSTANT_ALPHA = 13] = "CONSTANT_ALPHA";
      b[b.ONE_MINUS_CONSTANT_ALPHA = 14] = "ONE_MINUS_CONSTANT_ALPHA";
    })(u || (u = {}));
    (function (b) {
      b[b.NONE = 0] = "NONE";
      b[b.R = 1] = "R";
      b[b.G = 2] = "G";
      b[b.B = 4] = "B";
      b[b.A = 8] = "A";
      b[b.ALL = 15] = "ALL";
    })(v || (v = {}));
    (function (b) {
      b[b.NONE = 0] = "NONE";
      b[b.POINT = 1] = "POINT";
      b[b.LINEAR = 2] = "LINEAR";
      b[b.ANISOTROPIC = 3] = "ANISOTROPIC";
    })(w || (w = {}));
    (function (b) {
      b[b.WRAP = 0] = "WRAP";
      b[b.MIRROR = 1] = "MIRROR";
      b[b.CLAMP = 2] = "CLAMP";
      b[b.BORDER = 3] = "BORDER";
    })(x || (x = {}));
    (function (b) {
      b[b.TEX1D = 0] = "TEX1D";
      b[b.TEX2D = 1] = "TEX2D";
      b[b.TEX3D = 2] = "TEX3D";
    })(y || (y = {}));
    (function (b) {
      b[b.NONE = 0] = "NONE";
      b[b.TRANSFER_SRC = 1] = "TRANSFER_SRC";
      b[b.TRANSFER_DST = 2] = "TRANSFER_DST";
      b[b.SAMPLED = 4] = "SAMPLED";
      b[b.STORAGE = 8] = "STORAGE";
      b[b.COLOR_ATTACHMENT = 16] = "COLOR_ATTACHMENT";
      b[b.DEPTH_STENCIL_ATTACHMENT = 32] = "DEPTH_STENCIL_ATTACHMENT";
      b[b.TRANSIENT_ATTACHMENT = 64] = "TRANSIENT_ATTACHMENT";
      b[b.INPUT_ATTACHMENT = 128] = "INPUT_ATTACHMENT";
    })(z || (z = {}));
    (function (b) {
      b[b.X1 = 0] = "X1";
      b[b.X2 = 1] = "X2";
      b[b.X4 = 2] = "X4";
      b[b.X8 = 3] = "X8";
      b[b.X16 = 4] = "X16";
      b[b.X32 = 5] = "X32";
      b[b.X64 = 6] = "X64";
    })(A || (A = {}));
    (function (b) {
      b[b.NONE = 0] = "NONE";
      b[b.GEN_MIPMAP = 1] = "GEN_MIPMAP";
      b[b.CUBEMAP = 2] = "CUBEMAP";
      b[b.BAKUP_BUFFER = 4] = "BAKUP_BUFFER";
    })(B || (B = {}));
    (function (b) {
      b[b.TV1D = 0] = "TV1D";
      b[b.TV2D = 1] = "TV2D";
      b[b.TV3D = 2] = "TV3D";
      b[b.CUBE = 3] = "CUBE";
      b[b.TV1D_ARRAY = 4] = "TV1D_ARRAY";
      b[b.TV2D_ARRAY = 5] = "TV2D_ARRAY";
    })(C || (C = {}));
    (function (b) {
      b[b.VERTEX = 0] = "VERTEX";
      b[b.HULL = 1] = "HULL";
      b[b.DOMAIN = 2] = "DOMAIN";
      b[b.GEOMETRY = 3] = "GEOMETRY";
      b[b.FRAGMENT = 4] = "FRAGMENT";
      b[b.COMPUTE = 5] = "COMPUTE";
      b[b.COUNT = 6] = "COUNT";
    })(D || (D = {}));
    (function (b) {
      b[b.UNKNOWN = 0] = "UNKNOWN";
      b[b.UNIFORM_BUFFER = 1] = "UNIFORM_BUFFER";
      b[b.SAMPLER = 2] = "SAMPLER";
      b[b.STORAGE_BUFFER = 3] = "STORAGE_BUFFER";
    })(E || (E = {}));
    (function (b) {
      b[b.PRIMARY = 0] = "PRIMARY";
      b[b.SECONDARY = 1] = "SECONDARY";
    })(F || (F = {}));
    (function (b) {
      b[b.LOAD = 0] = "LOAD";
      b[b.CLEAR = 1] = "CLEAR";
      b[b.DISCARD = 2] = "DISCARD";
    })(G || (G = {}));
    (function (b) {
      b[b.STORE = 0] = "STORE";
      b[b.DISCARD = 1] = "DISCARD";
    })(H || (H = {}));
    (function (b) {
      b[b.UNDEFINED = 0] = "UNDEFINED";
      b[b.GENERAL = 1] = "GENERAL";
      b[b.COLOR_ATTACHMENT_OPTIMAL = 2] = "COLOR_ATTACHMENT_OPTIMAL";
      b[b.DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3] = "DEPTH_STENCIL_ATTACHMENT_OPTIMAL";
      b[b.DEPTH_STENCIL_READONLY_OPTIMAL = 4] = "DEPTH_STENCIL_READONLY_OPTIMAL";
      b[b.SHADER_READONLY_OPTIMAL = 5] = "SHADER_READONLY_OPTIMAL";
      b[b.TRANSFER_SRC_OPTIMAL = 6] = "TRANSFER_SRC_OPTIMAL";
      b[b.TRANSFER_DST_OPTIMAL = 7] = "TRANSFER_DST_OPTIMAL";
      b[b.PREINITIALIZED = 8] = "PREINITIALIZED";
      b[b.PRESENT_SRC = 9] = "PRESENT_SRC";
    })(I || (I = {}));
    (function (b) {
      b[b.GRAPHICS = 0] = "GRAPHICS";
      b[b.COMPUTE = 1] = "COMPUTE";
      b[b.RAY_TRACING = 2] = "RAY_TRACING";
    })(J || (J = {}));
    (function (b) {
      b[b.VIEWPORT = 0] = "VIEWPORT";
      b[b.SCISSOR = 1] = "SCISSOR";
      b[b.LINE_WIDTH = 2] = "LINE_WIDTH";
      b[b.DEPTH_BIAS = 3] = "DEPTH_BIAS";
      b[b.BLEND_CONSTANTS = 4] = "BLEND_CONSTANTS";
      b[b.DEPTH_BOUNDS = 5] = "DEPTH_BOUNDS";
      b[b.STENCIL_WRITE_MASK = 6] = "STENCIL_WRITE_MASK";
      b[b.STENCIL_COMPARE_MASK = 7] = "STENCIL_COMPARE_MASK";
    })(L || (L = {}));
    (function (b) {
      b[b.FRONT = 0] = "FRONT";
      b[b.BACK = 1] = "BACK";
      b[b.ALL = 2] = "ALL";
    })(M || (M = {}));
    (function (b) {
      b[b.GRAPHICS = 0] = "GRAPHICS";
      b[b.COMPUTE = 1] = "COMPUTE";
      b[b.TRANSFER = 2] = "TRANSFER";
    })(N || (N = {}));
    (function (b) {
      b[b.NONE = 0] = "NONE";
      b[b.COLOR = 1] = "COLOR";
      b[b.DEPTH = 2] = "DEPTH";
      b[b.STENCIL = 4] = "STENCIL";
      b[b.DEPTH_STENCIL = 6] = "DEPTH_STENCIL";
      b[b.ALL = 7] = "ALL";
    })(O || (O = {}));
    (function (b) {
      b[b.DEFAULT = 100] = "DEFAULT";
    })(P || (P = {}));
    (function (b) {
      b[b.MIN = 0] = "MIN";
      b[b.MAX = 255] = "MAX";
      b[b.DEFAULT = 128] = "DEFAULT";
    })(R || (R = {}));
    (function (b) {
      b[b.UBO_GLOBAL = 23] = "UBO_GLOBAL";
      b[b.UBO_SHADOW = 22] = "UBO_SHADOW";
      b[b.UBO_LOCAL = 21] = "UBO_LOCAL";
      b[b.UBO_FORWARD_LIGHTS = 20] = "UBO_FORWARD_LIGHTS";
      b[b.UBO_SKINNING = 19] = "UBO_SKINNING";
      b[b.UBO_SKINNING_TEXTURE = 18] = "UBO_SKINNING_TEXTURE";
      b[b.UBO_UI = 17] = "UBO_UI";
      b[b.SAMPLER_JOINTS = 25] = "SAMPLER_JOINTS";
      b[b.SAMPLER_ENVIRONMENT = 26] = "SAMPLER_ENVIRONMENT";
      b[b.CUSTUM_UBO_BINDING_END_POINT = 17] = "CUSTUM_UBO_BINDING_END_POINT";
      b[b.CUSTOM_SAMPLER_BINDING_START_POINT = 30] = "CUSTOM_SAMPLER_BINDING_START_POINT";
    })(S || (S = {}));
    (function (b) {
      b[b.minFilter = 0] = "minFilter";
      b[b.magFilter = 1] = "magFilter";
      b[b.mipFilter = 2] = "mipFilter";
      b[b.addressU = 3] = "addressU";
      b[b.addressV = 4] = "addressV";
      b[b.addressW = 5] = "addressW";
      b[b.maxAnisotropy = 6] = "maxAnisotropy";
      b[b.cmpFunc = 7] = "cmpFunc";
      b[b.minLOD = 8] = "minLOD";
      b[b.maxLOD = 9] = "maxLOD";
      b[b.mipLODBias = 10] = "mipLODBias";
      b[b.borderColor = 11] = "borderColor";
      b[b.total = 15] = "total";
    })(V || (V = {}));
    var _ = {
      [_.bool = h.BOOL]: "bool",
      [_.int = h.INT]: "int",
      [_.ivec2 = h.INT2]: "ivec2invTypeParams",
      [_.ivec3 = h.INT3]: "ivec3",
      [_.ivec4 = h.INT4]: "ivec4",
      [_.float = h.FLOAT]: "float",
      [_.vec2 = h.FLOAT2]: "vec2",
      [_.vec3 = h.FLOAT3]: "vec3",
      [_.vec4 = h.FLOAT4]: "vec4",
      [_.mat2 = h.MAT2]: "mat2",
      [_.mat3 = h.MAT3]: "mat3",
      [_.mat4 = h.MAT4]: "mat4",
      [_.sampler2D = h.SAMPLER2D]: "sampler2D",
      [_.samplerCube = h.SAMPLER_CUBE]: "samplerCube"
    };
    (T = {})[h.BOOL] = 4;
    T[h.INT] = 4;
    T[h.INT2] = 8;
    T[h.INT3] = 12;
    T[h.INT4] = 16;
    T[h.FLOAT] = 4;
    T[h.FLOAT2] = 8;
    T[h.FLOAT3] = 12;
    T[h.FLOAT4] = 16;
    T[h.MAT2] = 16;
    T[h.MAT3] = 36;
    T[h.MAT4] = 64;
    T[h.SAMPLER2D] = 4;
    T[h.SAMPLER_CUBE] = 4;
    var La = T;
    (U = {})[h.BOOL] = i.R32I;
    U[h.INT] = i.R32I;
    U[h.INT2] = i.RG32I;
    U[h.INT3] = i.RGB32I;
    U[h.INT4] = i.RGBA32I;
    U[h.FLOAT] = i.R32F;
    U[h.FLOAT2] = i.RG32F;
    U[h.FLOAT3] = i.RGB32F;
    U[h.FLOAT4] = i.RGBA32F;
    var W = U;
    var X = {
      BACK: 1029,
      FRONT: 1028,
      NONE: 0,
      ADD: 32774,
      SUB: 32778,
      REV_SUB: 32779,
      ZERO: 0,
      ONE: 1,
      SRC_COLOR: 768,
      ONE_MINUS_SRC_COLOR: 769,
      DST_COLOR: 774,
      ONE_MINUS_DST_COLOR: 775,
      SRC_ALPHA: 770,
      ONE_MINUS_SRC_ALPHA: 771,
      DST_ALPHA: 772,
      ONE_MINUS_DST_ALPHA: 773,
      CONSTANT_COLOR: 32769,
      ONE_MINUS_CONSTANT_COLOR: 32770,
      CONSTANT_ALPHA: 32771,
      ONE_MINUS_CONSTANT_ALPHA: 32772,
      SRC_ALPHA_SATURATE: 776,
      NEVER: 512,
      LESS: 513,
      EQUAL: 514,
      LEQUAL: 515,
      GREATER: 516,
      NOTEQUAL: 517,
      GEQUAL: 518,
      ALWAYS: 519,
      KEEP: 7680,
      REPLACE: 7681,
      INCR: 7682,
      INCR_WRAP: 34055,
      DECR: 7683,
      DECR_WRAP: 34056,
      INVERT: 5386
    };
    Object.assign(X, P);
    var Y = {
      murmurhash2_32_gc: function (g, a) {
        for (var b, h = g.length, i = a ^ h, j = 0; h >= 4;) {
          b = ((b = g.charCodeAt(j) & 255 | (g.charCodeAt(++j) & 255) << 8 | (g.charCodeAt(++j) & 255) << 16 | (g.charCodeAt(++j) & 255) << 24) & 65535) * 1540483477 + (((b >>> 16) * 1540483477 & 65535) << 16);
          i = (i & 65535) * 1540483477 + (((i >>> 16) * 1540483477 & 65535) << 16) ^ (b = ((b ^= b >>> 24) & 65535) * 1540483477 + (((b >>> 16) * 1540483477 & 65535) << 16));
          h -= 4;
          ++j;
        }
        switch (h) {
          case 3:
            i ^= (g.charCodeAt(j + 2) & 255) << 16;
          case 2:
            i ^= (g.charCodeAt(j + 1) & 255) << 8;
          case 1:
            i = ((i ^= g.charCodeAt(j) & 255) & 65535) * 1540483477 + (((i >>> 16) * 1540483477 & 65535) << 16);
        }
        i = ((i ^= i >>> 13) & 65535) * 1540483477 + (((i >>> 16) * 1540483477 & 65535) << 16);
        return (i ^= i >>> 15) >>> 0;
      },
      SamplerInfoIndex: V,
      effectStructure: {
        $techniques: [{
          $passes: [{
            depthStencilState: {},
            rasterizerState: {},
            blendState: {
              targets: [{}]
            },
            properties: {
              any: {
                sampler: {},
                inspector: {}
              }
            }
          }]
        }]
      },
      typeMap: _,
      sizeMap: La,
      formatMap: W,
      passParams: X,
      RenderQueue: {
        OPAQUE: 0,
        TRANSPARENT: 1,
        OVERLAY: 2
      },
      RenderPriority: R,
      GFXGetTypeSize: function (b) {
        switch (b) {
          case h.BOOL:
          case h.INT:
          case h.UINT:
          case h.FLOAT:
            return 4;
          case h.BOOL2:
          case h.INT2:
          case h.UINT2:
          case h.FLOAT2:
            return 8;
          case h.BOOL3:
          case h.INT3:
          case h.UINT3:
          case h.FLOAT3:
            return 12;
          case h.BOOL4:
          case h.INT4:
          case h.UINT4:
          case h.FLOAT4:
          case h.MAT2:
            return 16;
          case h.MAT2X3:
            return 24;
          case h.MAT2X4:
            return 32;
          case h.MAT3X2:
            return 24;
          case h.MAT3:
            return 36;
          case h.MAT3X4:
            return 48;
          case h.MAT4X2:
          case h.MAT4X2:
            return 32;
          case h.MAT4:
            return 64;
          case h.SAMPLER1D:
          case h.SAMPLER1D_ARRAY:
          case h.SAMPLER2D:
          case h.SAMPLER2D_ARRAY:
          case h.SAMPLER3D:
          case h.SAMPLER_CUBE:
            return 4;
          default:
            return 0;
        }
      },
      UniformBinding: S
    };
    b.exports = Y;
  }, {}],
  271: [function (l, b, j) {
    "use strict";

    j.__esModule = true;
    j.default = undefined;
    var e = l("../memop");
    var o = a(l("../enums"));
    var u = l("../../core/value-types");
    var k = a(l("./program-lib"));
    var n = a(l("./view"));
    var w = a(l("../gfx"));
    function a(b) {
      if (b && b.__esModule) {
        return b;
      } else {
        return {
          default: b
        };
      }
    }
    var s = new u.Mat4();
    var c = new e.RecyclePool(function () {
      return {
        stage: null,
        items: null
      };
    }, 8);
    var x = new e.RecyclePool(function () {
      return new Float32Array(2);
    }, 8);
    var h = new e.RecyclePool(function () {
      return new Float32Array(3);
    }, 8);
    var f = new e.RecyclePool(function () {
      return new Float32Array(4);
    }, 8);
    var d = new e.RecyclePool(function () {
      return new Float32Array(9);
    }, 8);
    var z = new e.RecyclePool(function () {
      return new Float32Array(16);
    }, 8);
    var p = new e.RecyclePool(function () {
      return new Float32Array(64);
    }, 8);
    var v = new e.RecyclePool(function () {
      return new Int32Array(2);
    }, 8);
    var g = new e.RecyclePool(function () {
      return new Int32Array(3);
    }, 8);
    var m = new e.RecyclePool(function () {
      return new Int32Array(4);
    }, 8);
    var y = new e.RecyclePool(function () {
      return new Int32Array(64);
    }, 8);
    var q = function () {
      function a(a, b) {
        var c;
        this._device = a;
        this._programLib = new k.default(a);
        this._opts = b;
        this._type2defaultValue = ((c = {})[o.default.PARAM_INT] = 0, c[o.default.PARAM_INT2] = new u.Vec2(0, 0), c[o.default.PARAM_INT3] = new u.Vec3(0, 0, 0), c[o.default.PARAM_INT4] = new u.Vec4(0, 0, 0, 0), c[o.default.PARAM_FLOAT] = 0, c[o.default.PARAM_FLOAT2] = new u.Vec2(0, 0), c[o.default.PARAM_FLOAT3] = new u.Vec3(0, 0, 0), c[o.default.PARAM_FLOAT4] = new u.Vec4(0, 0, 0, 0), c[o.default.PARAM_COLOR4] = new u.Color(0, 0, 0, 1), c[o.default.PARAM_MAT3] = new u.Mat3(), c[o.default.PARAM_MAT4] = new u.Mat4(), c[o.default.PARAM_TEXTURE_2D] = b.defaultTexture, c[o.default.PARAM_TEXTURE_CUBE] = b.defaultTextureCube, c);
        this._stage2fn = {};
        this._usedTextureUnits = 0;
        this._viewPools = new e.RecyclePool(function () {
          return new n.default();
        }, 8);
        this._drawItemsPools = new e.RecyclePool(function () {
          return {
            model: null,
            node: null,
            ia: null,
            effect: null,
            defines: null,
            uniforms: null
          };
        }, 100);
        this._stageItemsPools = new e.RecyclePool(function () {
          return new e.RecyclePool(function () {
            return {
              model: null,
              node: null,
              ia: null,
              effect: null,
              defines: null,
              passes: [],
              sortKey: -1,
              uniforms: null
            };
          }, 100);
        }, 16);
        this._definesChanged = false;
      }
      var b = a.prototype;
      b._resetTextuerUnit = function () {
        this._usedTextureUnits = 0;
      };
      b._allocTextureUnit = function () {
        var c = this._device;
        var a = this._usedTextureUnits;
        c._caps.maxTextureUnits;
        this._usedTextureUnits += 1;
        return a;
      };
      b._registerStage = function (c, a) {
        this._stage2fn[c] = a;
      };
      b.clear = function () {
        this._programLib.clear();
        this.reset();
      };
      b.reset = function () {
        this._viewPools.reset();
        this._stageItemsPools.reset();
        this._definesChanged = false;
      };
      b._requestView = function () {
        return this._viewPools.add();
      };
      b._render = function (a, b) {
        var d = this._device;
        d.setFrameBuffer(a._framebuffer);
        d.setViewport(a._rect.x, a._rect.y, a._rect.w, a._rect.h);
        var e = {};
        if (a._clearFlags & o.default.CLEAR_COLOR) {
          e.color = u.Vec4.toArray([], a._color);
        }
        if (a._clearFlags & o.default.CLEAR_DEPTH) {
          e.depth = a._depth;
        }
        if (a._clearFlags & o.default.CLEAR_STENCIL) {
          e.stencil = a._stencil;
        }
        d.clear(e);
        this._drawItemsPools.reset();
        for (var f = 0; f < b._models.length; ++f) {
          var g = b._models.data[f];
          if ((g._cullingMask & a._cullingMask) != 0) {
            var h = this._drawItemsPools.add();
            g.extractDrawItem(h);
          }
        }
        c.reset();
        for (var i = 0; i < a._stages.length; ++i) {
          var j = a._stages[i];
          var l = this._stageItemsPools.add();
          l.reset();
          for (var m = 0; m < this._drawItemsPools.length; ++m) {
            var p = this._drawItemsPools.data[m];
            var q = p.effect.stagePasses[j];
            if (q && q.length !== 0) {
              var r = l.add();
              r.passes = q;
              r.model = p.model;
              r.node = p.node;
              r.ia = p.ia;
              r.effect = p.effect;
              r.defines = p.defines;
              r.sortKey = -1;
              r.uniforms = p.uniforms;
            }
          }
          var v = c.add();
          v.stage = j;
          v.items = l;
        }
        for (var w = 0; w < c.length; ++w) {
          var y = c.data[w];
          (0, this._stage2fn[y.stage])(a, y.items);
        }
      };
      b._setProperty = function (f) {
        var a = this._device;
        var b = f.value;
        if (b === undefined) {
          b = f.val;
        }
        if (b === undefined) {
          b = this._type2defaultValue[f.type];
        }
        if (b !== undefined) {
          if (f.type === o.default.PARAM_TEXTURE_2D || f.type === o.default.PARAM_TEXTURE_CUBE) {
            if (Array.isArray(b)) {
              if (b.length > f.count) {
                return;
              }
              for (var g = y.add(), d = 0; d < b.length; ++d) {
                g[d] = this._allocTextureUnit();
              }
              a.setTextureArray(f.name, b, g);
            } else {
              a.setTexture(f.name, b, this._allocTextureUnit());
            }
          } else if (f.directly) {
            a.setUniformDirectly(f.name, b);
          } else {
            a.setUniform(f.name, b);
          }
        }
      };
      b._draw = function (b) {
        var c = this._device;
        var j = this._programLib;
        var e = b.node;
        var i = b.ia;
        var k = b.passes;
        var n = b.effect;
        x.reset();
        h.reset();
        f.reset();
        d.reset();
        z.reset();
        p.reset();
        v.reset();
        g.reset();
        m.reset();
        y.reset();
        e.getWorldMatrix(s);
        c.setUniform("cc_matWorld", u.Mat4.toArray(z.add(), s));
        u.Mat4.invert(s, s);
        u.Mat4.transpose(s, s);
        c.setUniform("cc_matWorldIT", u.Mat4.toArray(z.add(), s));
        for (var a = this._defines, o = 0; o < k.length; ++o) {
          var A = k[o];
          if (this._definesChanged) {
            A._programKey = null;
          }
          var B = i.count;
          if (i._vertexBuffer) {
            c.setVertexBuffer(0, i._vertexBuffer);
          }
          if (i._indexBuffer) {
            c.setIndexBuffer(i._indexBuffer);
          }
          c.setPrimitiveType(i._primitiveType);
          Object.setPrototypeOf(a, A._defines);
          var C = j.getProgram(A, a, n.name);
          c.setProgram(C);
          for (var D = C._uniforms, I = A._properties, J = 0; J < D.length; J++) {
            var K = I[D[J].name];
            if (K !== undefined) {
              this._setProperty(K);
            }
          }
          c.setCullMode(A._cullMode);
          if (A._blend) {
            c.enableBlend();
            c.setBlendFuncSep(A._blendSrc, A._blendDst, A._blendSrcAlpha, A._blendDstAlpha);
            c.setBlendEqSep(A._blendEq, A._blendAlphaEq);
            c.setBlendColor32(A._blendColor);
          }
          if (A._depthTest) {
            c.enableDepthTest();
            c.setDepthFunc(A._depthFunc);
          }
          if (A._depthWrite) {
            c.enableDepthWrite();
          }
          c.setStencilTest(A._stencilTest);
          if (A._stencilTest === w.default.STENCIL_ENABLE) {
            c.setStencilFuncFront(A._stencilFuncFront, A._stencilRefFront, A._stencilMaskFront);
            c.setStencilOpFront(A._stencilFailOpFront, A._stencilZFailOpFront, A._stencilZPassOpFront, A._stencilWriteMaskFront);
            c.setStencilFuncBack(A._stencilFuncBack, A._stencilRefBack, A._stencilMaskBack);
            c.setStencilOpBack(A._stencilFailOpBack, A._stencilZFailOpBack, A._stencilZPassOpBack, A._stencilWriteMaskBack);
          }
          c.draw(i._start, B);
          this._resetTextuerUnit();
        }
      };
      return a;
    }();
    j.default = q;
    b.exports = j.default;
  }, {
    "../../core/value-types": 251,
    "../enums": 277,
    "../gfx": 282,
    "../memop": 294,
    "./program-lib": 274,
    "./view": 276
  }],
  272: [function (a, b, c) {
    "use strict";

    c.__esModule = true;
    c.default = undefined;
    var d;
    var i = (d = a("../gfx")) && d.__esModule ? d : {
      default: d
    };
    function f(e, a) {
      for (var b = 0; b < a.length; b++) {
        var f = a[b];
        f.enumerable = f.enumerable || false;
        f.configurable = true;
        if ("value" in f) {
          f.writable = true;
        }
        Object.defineProperty(e, f.key, f);
      }
    }
    var g = function () {
      function d(d, a, b) {
        if (b === undefined) {
          b = i.default.PT_TRIANGLES;
        }
        this._vertexBuffer = d;
        this._indexBuffer = a;
        this._primitiveType = b;
        this._start = 0;
        this._count = -1;
      }
      var a;
      var e;
      a = d;
      if (e = [{
        key: "count",
        get: function () {
          if (this._count !== -1) {
            return this._count;
          } else if (this._indexBuffer) {
            return this._indexBuffer.count;
          } else if (this._vertexBuffer) {
            return this._vertexBuffer.count;
          } else {
            return 0;
          }
        }
      }]) {
        f(a.prototype, e);
      }
      Object.defineProperty(a, "prototype", {
        writable: false
      });
      return d;
    }();
    c.default = g;
    b.exports = c.default;
  }, {
    "../gfx": 282
  }],
  273: [function (i, b, c) {
    "use strict";

    c.__esModule = true;
    c.default = undefined;
    var j = g(i("../gfx"));
    var d = g(i("../enums"));
    var f = g(i("../../core/value-types/value-type"));
    function g(b) {
      if (b && b.__esModule) {
        return b;
      } else {
        return {
          default: b
        };
      }
    }
    var e = function () {
      function c(a, b, c, d, e, f) {
        if (e === undefined) {
          e = {};
        }
        if (f === undefined) {
          f = {};
        }
        this._name = a;
        this._detailName = b;
        this._programName = c;
        this._programKey = null;
        this._stage = d;
        this._properties = e;
        this._defines = f;
        this._propertyNames = Object.keys(e);
        this._defineNames = Object.keys(f);
        this._cullMode = j.default.CULL_BACK;
        this._blend = false;
        this._blendEq = j.default.BLEND_FUNC_ADD;
        this._blendAlphaEq = j.default.BLEND_FUNC_ADD;
        this._blendSrc = j.default.BLEND_SRC_ALPHA;
        this._blendDst = j.default.BLEND_ONE_MINUS_SRC_ALPHA;
        this._blendSrcAlpha = j.default.BLEND_SRC_ALPHA;
        this._blendDstAlpha = j.default.BLEND_ONE_MINUS_SRC_ALPHA;
        this._blendColor = 4294967295;
        this._depthTest = false;
        this._depthWrite = false;
        this._depthFunc = j.default.DS_FUNC_LESS;
        this._stencilTest = j.default.STENCIL_INHERIT;
        this._stencilFuncFront = j.default.DS_FUNC_ALWAYS;
        this._stencilRefFront = 0;
        this._stencilMaskFront = 255;
        this._stencilFailOpFront = j.default.STENCIL_OP_KEEP;
        this._stencilZFailOpFront = j.default.STENCIL_OP_KEEP;
        this._stencilZPassOpFront = j.default.STENCIL_OP_KEEP;
        this._stencilWriteMaskFront = 255;
        this._stencilFuncBack = j.default.DS_FUNC_ALWAYS;
        this._stencilRefBack = 0;
        this._stencilMaskBack = 255;
        this._stencilFailOpBack = j.default.STENCIL_OP_KEEP;
        this._stencilZFailOpBack = j.default.STENCIL_OP_KEEP;
        this._stencilZPassOpBack = j.default.STENCIL_OP_KEEP;
        this._stencilWriteMaskBack = 255;
      }
      var b = c.prototype;
      b.setCullMode = function (b) {
        if (b === undefined) {
          b = j.default.CULL_BACK;
        }
        this._cullMode = b;
      };
      b.setBlend = function (a, c, e, f, i, n, o, p) {
        if (a === undefined) {
          a = false;
        }
        if (c === undefined) {
          c = j.default.BLEND_FUNC_ADD;
        }
        if (e === undefined) {
          e = j.default.BLEND_SRC_ALPHA;
        }
        if (f === undefined) {
          f = j.default.BLEND_ONE_MINUS_SRC_ALPHA;
        }
        if (i === undefined) {
          i = j.default.BLEND_FUNC_ADD;
        }
        if (n === undefined) {
          n = j.default.BLEND_SRC_ALPHA;
        }
        if (o === undefined) {
          o = j.default.BLEND_ONE_MINUS_SRC_ALPHA;
        }
        if (p === undefined) {
          p = 4294967295;
        }
        this._blend = a;
        this._blendEq = c;
        this._blendSrc = e;
        this._blendDst = f;
        this._blendAlphaEq = i;
        this._blendSrcAlpha = n;
        this._blendDstAlpha = o;
        this._blendColor = p;
      };
      b.setDepth = function (d, e, f) {
        if (d === undefined) {
          d = false;
        }
        if (e === undefined) {
          e = false;
        }
        if (f === undefined) {
          f = j.default.DS_FUNC_LESS;
        }
        this._depthTest = d;
        this._depthWrite = e;
        this._depthFunc = f;
      };
      b.setStencilFront = function (a, c, e, f, i, n, o, p) {
        if (a === undefined) {
          a = j.default.STENCIL_INHERIT;
        }
        if (c === undefined) {
          c = j.default.DS_FUNC_ALWAYS;
        }
        if (e === undefined) {
          e = 0;
        }
        if (f === undefined) {
          f = 255;
        }
        if (i === undefined) {
          i = j.default.STENCIL_OP_KEEP;
        }
        if (n === undefined) {
          n = j.default.STENCIL_OP_KEEP;
        }
        if (o === undefined) {
          o = j.default.STENCIL_OP_KEEP;
        }
        if (p === undefined) {
          p = 255;
        }
        this._stencilTest = a;
        this._stencilFuncFront = c;
        this._stencilRefFront = e;
        this._stencilMaskFront = f;
        this._stencilFailOpFront = i;
        this._stencilZFailOpFront = n;
        this._stencilZPassOpFront = o;
        this._stencilWriteMaskFront = p;
      };
      b.setStencilEnabled = function (b) {
        if (b === undefined) {
          b = j.default.STENCIL_INHERIT;
        }
        this._stencilTest = b;
      };
      b.setStencilBack = function (a, c, e, f, i, n, o, p) {
        if (a === undefined) {
          a = j.default.STENCIL_INHERIT;
        }
        if (c === undefined) {
          c = j.default.DS_FUNC_ALWAYS;
        }
        if (e === undefined) {
          e = 0;
        }
        if (f === undefined) {
          f = 255;
        }
        if (i === undefined) {
          i = j.default.STENCIL_OP_KEEP;
        }
        if (n === undefined) {
          n = j.default.STENCIL_OP_KEEP;
        }
        if (o === undefined) {
          o = j.default.STENCIL_OP_KEEP;
        }
        if (p === undefined) {
          p = 255;
        }
        this._stencilTest = a;
        this._stencilFuncBack = c;
        this._stencilRefBack = e;
        this._stencilMaskBack = f;
        this._stencilFailOpBack = i;
        this._stencilZFailOpBack = n;
        this._stencilZPassOpBack = o;
        this._stencilWriteMaskBack = p;
      };
      b.setStage = function (b) {
        this._stage = b;
      };
      b.setProperties = function (b) {
        this._properties = b;
      };
      b.getProperty = function (b) {
        if (this._properties[b]) {
          return this._properties[b].value;
        }
      };
      b.setProperty = function (g, b, c) {
        var h = this._properties[g];
        if (!h) {
          return false;
        }
        h.directly = c;
        if (Array.isArray(b)) {
          var e = h.value;
          if (e.length !== b.length) {
            return;
          }
          for (var i = 0; i < b.length; i++) {
            e[i] = b[i];
          }
        } else if (b && !ArrayBuffer.isView(b)) {
          if (h.type === d.default.PARAM_TEXTURE_2D) {
            h.value = b.getImpl();
          } else if (b instanceof f.default) {
            b.constructor.toArray(h.value, b);
          } else {
            h.value = b;
          }
        } else {
          h.value = b;
        }
        return true;
      };
      b.getDefine = function (b) {
        return this._defines[b];
      };
      b.define = function (e, a, b) {
        var c = this._defines[e];
        return !(!b && c === undefined || (c !== a && (this._defines[e] = a, this._programKey = null), 0));
      };
      b.clone = function () {
        var a = new c(this._programName);
        Object.assign(a, this);
        var b = {};
        var d = this._properties;
        for (var e in d) {
          var f = d[e];
          var l = b[e] = {};
          var m = f.value;
          if (Array.isArray(m)) {
            l.value = m.concat();
          } else if (ArrayBuffer.isView(m)) {
            l.value = new m.__proto__.constructor(m);
          } else {
            l.value = m;
          }
          for (var n in f) {
            if (n !== "value") {
              l[n] = f[n];
            }
          }
        }
        a._properties = b;
        a._defines = Object.assign({}, this._defines);
        a._propertyNames = this._propertyNames;
        a._defineNames = this._defineNames;
        return a;
      };
      return c;
    }();
    c.default = e;
    b.exports = c.default;
  }, {
    "../../core/value-types/value-type": 259,
    "../enums": 277,
    "../gfx": 282
  }],
  274: [function (h, b, d) {
    "use strict";

    d.__esModule = true;
    d.default = undefined;
    var e;
    var n = (e = h("../gfx")) && e.__esModule ? e : {
      default: e
    };
    var g = 0;
    function p(g, a) {
      for (var b = [], c = 0; c < g.length; c++) {
        var h = g[c].name;
        var i = a[h];
        if (typeof i != "number") {
          i = i ? 1 : 0;
        }
        b.push("#define " + h + " " + i);
      }
      return b.join("\n") + "\n";
    }
    function k(a, b, c) {
      for (var d = a, j = 0; j < b.length; j++) {
        var k = b[j].name;
        var l = c[k];
        if (Number.isInteger(l)) {
          var m = RegExp(k, "g");
          d = d.replace(m, l);
        }
      }
      return d;
    }
    function a(b) {
      return b.replace(/#pragma for (\w+) in range\(\s*(\d+)\s*,\s*(\d+)\s*\)([\s\S]+?)#pragma endFor/g, function (c, b, d, e, f) {
        for (var g = "", k = parseInt(d), i = parseInt(e), a = k; a < i; ++a) {
          g += f.replace(RegExp("{" + b + "}", "g"), a);
        }
        return g;
      });
    }
    function l(b) {
      return b.replace(/\bhighp\b/g, "mediump");
    }
    var c = function () {
      function c(b) {
        this._device = b;
        this._templates = {};
        this._cache = {};
        this._checkPrecision();
      }
      var b = c.prototype;
      b.clear = function () {
        this._templates = {};
        this._cache = {};
      };
      b.define = function (c) {
        var b = c.name;
        var f = c.defines;
        var e = c.glsl1 || c;
        var h = e.vert;
        var i = e.frag;
        if (!this._templates[b]) {
          for (var j = ++g, a = 0, k = 0; k < f.length; ++k) {
            var l = f[k];
            var m = 1;
            if (l.type === "number") {
              var n = l.range || [];
              l.min = n[0] || 0;
              l.max = n[1] || 4;
              m = Math.ceil(Math.log2(l.max - l.min));
              l._map = function (b) {
                return b - this.min << this._offset;
              }.bind(l);
            } else {
              l._map = function (b) {
                if (b) {
                  return 1 << this._offset;
                } else {
                  return 0;
                }
              }.bind(l);
            }
            l._offset = a;
            a += m;
          }
          var p = c.uniforms || [];
          if (c.samplers) {
            for (var q = 0; q < c.samplers.length; q++) {
              p.push(c.samplers[q]);
            }
          }
          if (c.blocks) {
            for (var u = 0; u < c.blocks.length; u++) {
              for (var v = c.blocks[u].defines, x = c.blocks[u].members, C = 0; C < x.length; C++) {
                p.push({
                  defines: v,
                  name: x[C].name,
                  type: x[C].type
                });
              }
            }
          }
          this._templates[b] = {
            id: j,
            name: b,
            vert: h,
            frag: i,
            defines: f,
            attributes: c.attributes,
            uniforms: p,
            extensions: c.extensions
          };
        }
      };
      b.getTemplate = function (b) {
        return this._templates[b];
      };
      b.hasProgram = function (b) {
        return this._templates[b] !== undefined;
      };
      b.getKey = function (a, b) {
        for (var c = this._templates[a], d = 0, i = 0; i < c.defines.length; ++i) {
          var j = c.defines[i];
          var k = b[j.name];
          if (k !== undefined) {
            d |= j._map(k);
          }
        }
        return c.id + ":" + d;
      };
      b.getProgram = function (c, b) {
        var d = c._programKey = c._programKey || this.getKey(c._programName, b);
        var e = this._cache[d];
        if (e) {
          return e;
        }
        var f = this._templates[c._programName];
        var g = p(f.defines, b);
        var j = k(f.vert, f.defines, b);
        j = g + a(j);
        if (!this._highpSupported) {
          j = l(j);
        }
        var m = k(f.frag, f.defines, b);
        m = g + a(m);
        if (!this._highpSupported) {
          m = l(m);
        }
        (e = new n.default.Program(this._device, {
          vert: j,
          frag: m
        })).link();
        this._cache[d] = e;
        return e;
      };
      b._checkPrecision = function () {
        var e = this._device._gl;
        var a = false;
        if (e.getShaderPrecisionFormat) {
          var f = e.getShaderPrecisionFormat(e.VERTEX_SHADER, e.HIGH_FLOAT);
          var c = e.getShaderPrecisionFormat(e.FRAGMENT_SHADER, e.HIGH_FLOAT);
          a = f && f.precision > 0 && c && c.precision > 0;
        }
        this._highpSupported = a;
      };
      return c;
    }();
    d.default = c;
    b.exports = d.default;
  }, {
    "../gfx": 282
  }],
  275: [function (f, a, b) {
    "use strict";

    function g(e, a) {
      for (var b = 0; b < a.length; b++) {
        var f = a[b];
        f.enumerable = f.enumerable || false;
        f.configurable = true;
        if ("value" in f) {
          f.writable = true;
        }
        Object.defineProperty(e, f.key, f);
      }
    }
    b.__esModule = true;
    b.default = undefined;
    var c = function () {
      function d(c, a) {
        this._name = c;
        this._passes = a;
      }
      var a;
      var e;
      d.prototype.clone = function () {
        for (var a = [], b = 0; b < this._passes.length; b++) {
          a.push(this._passes[b].clone());
        }
        return new d(this._name, a);
      };
      a = d;
      if (e = [{
        key: "name",
        get: function () {
          return this._name;
        }
      }, {
        key: "passes",
        get: function () {
          return this._passes;
        }
      }]) {
        g(a.prototype, e);
      }
      Object.defineProperty(a, "prototype", {
        writable: false
      });
      return d;
    }();
    b.default = c;
    a.exports = b.default;
  }, {}],
  276: [function (c, b, d) {
    "use strict";

    d.__esModule = true;
    d.default = undefined;
    var e;
    var k = c("../../core/value-types");
    var g = (e = c("../enums")) && e.__esModule ? e : {
      default: e
    };
    var h = new k.Mat4();
    var i = 0;
    var l = function () {
      function a() {
        this._id = i++;
        this._priority = 0;
        this._rect = {
          x: 0,
          y: 0,
          w: 1,
          h: 1
        };
        this._color = new k.Vec4(0.3, 0.3, 0.3, 1);
        this._depth = 1;
        this._stencil = 0;
        this._clearFlags = g.default.CLEAR_COLOR | g.default.CLEAR_DEPTH;
        this._clearModel = null;
        this._matView = cc.mat4();
        this._matViewInv = cc.mat4();
        this._matProj = cc.mat4();
        this._matViewProj = cc.mat4();
        this._matInvViewProj = cc.mat4();
        this._stages = [];
        this._cullingByID = false;
        this._framebuffer = null;
        this._shadowLight = null;
        this._cullingMask = 4294967295;
      }
      var b = a.prototype;
      b.getForward = function (c) {
        var a = this._matView.m;
        return k.Vec3.set(c, -a[2], -a[6], -a[10]);
      };
      b.getPosition = function (b) {
        k.Mat4.invert(h, this._matView);
        return k.Mat4.getTranslation(b, h);
      };
      return a;
    }();
    d.default = l;
    b.exports = d.default;
  }, {
    "../../core/value-types": 251,
    "../enums": 277
  }],
  277: [function (f, a, b) {
    "use strict";

    b.__esModule = true;
    b.default = undefined;
    var c = f("./build/mappings");
    var d = {
      PROJ_PERSPECTIVE: 0,
      PROJ_ORTHO: 1,
      LIGHT_DIRECTIONAL: 0,
      LIGHT_POINT: 1,
      LIGHT_SPOT: 2,
      LIGHT_AMBIENT: 3,
      SHADOW_NONE: 0,
      SHADOW_HARD: 1,
      SHADOW_SOFT: 2,
      PARAM_INT: c.typeMap.int,
      PARAM_INT2: c.typeMap.ivec2,
      PARAM_INT3: c.typeMap.ivec3,
      PARAM_INT4: c.typeMap.ivec4,
      PARAM_FLOAT: c.typeMap.float,
      PARAM_FLOAT2: c.typeMap.vec2,
      PARAM_FLOAT3: c.typeMap.vec3,
      PARAM_FLOAT4: c.typeMap.vec4,
      PARAM_MAT2: c.typeMap.mat2,
      PARAM_MAT3: c.typeMap.mat3,
      PARAM_MAT4: c.typeMap.mat4,
      PARAM_TEXTURE_2D: c.typeMap.sampler2D,
      PARAM_TEXTURE_CUBE: c.typeMap.samplerCube,
      CLEAR_COLOR: 1,
      CLEAR_DEPTH: 2,
      CLEAR_STENCIL: 4,
      CLEAR_SKYBOX: 8,
      BUFFER_VIEW_INT8: 0,
      BUFFER_VIEW_UINT8: 1,
      BUFFER_VIEW_INT16: 2,
      BUFFER_VIEW_UINT16: 3,
      BUFFER_VIEW_INT32: 4,
      BUFFER_VIEW_UINT32: 5,
      BUFFER_VIEW_FLOAT32: 6
    };
    b.default = d;
    a.exports = b.default;
  }, {
    "./build/mappings": 270
  }],
  278: [function (n, b, j) {
    "use strict";

    j.__esModule = true;
    j.default = undefined;
    var e;
    var r;
    var x = o(n("./state"));
    var q = n("./enums");
    var s = o(n("./texture-2d"));
    var a = o(n("./texture-cube"));
    function o(b) {
      if (b && b.__esModule) {
        return b;
      } else {
        return {
          default: b
        };
      }
    }
    function y(e, a) {
      for (var b = 0; b < a.length; b++) {
        var f = a[b];
        f.enumerable = f.enumerable || false;
        f.configurable = true;
        if ("value" in f) {
          f.writable = true;
        }
        Object.defineProperty(e, f.key, f);
      }
    }
    (e = {})[5124] = function (d, a, b) {
      d.uniform1i(a, b);
    };
    e[5126] = function (d, a, b) {
      d.uniform1f(a, b);
    };
    e[35664] = function (d, a, b) {
      d.uniform2fv(a, b);
    };
    e[35665] = function (d, a, b) {
      d.uniform3fv(a, b);
    };
    e[35666] = function (d, a, b) {
      d.uniform4fv(a, b);
    };
    e[35667] = function (d, a, b) {
      d.uniform2iv(a, b);
    };
    e[35668] = function (d, a, b) {
      d.uniform3iv(a, b);
    };
    e[35669] = function (d, a, b) {
      d.uniform4iv(a, b);
    };
    e[35670] = function (d, a, b) {
      d.uniform1i(a, b);
    };
    e[35671] = function (d, a, b) {
      d.uniform2iv(a, b);
    };
    e[35672] = function (d, a, b) {
      d.uniform3iv(a, b);
    };
    e[35673] = function (d, a, b) {
      d.uniform4iv(a, b);
    };
    e[35674] = function (d, a, b) {
      d.uniformMatrix2fv(a, false, b);
    };
    e[35675] = function (d, a, b) {
      d.uniformMatrix3fv(a, false, b);
    };
    e[35676] = function (d, a, b) {
      d.uniformMatrix4fv(a, false, b);
    };
    e[35678] = function (d, a, b) {
      d.uniform1i(a, b);
    };
    e[35680] = function (d, a, b) {
      d.uniform1i(a, b);
    };
    var c = e;
    (r = {})[5124] = function (d, a, b) {
      d.uniform1iv(a, b);
    };
    r[5126] = function (d, a, b) {
      d.uniform1fv(a, b);
    };
    r[35664] = function (d, a, b) {
      d.uniform2fv(a, b);
    };
    r[35665] = function (d, a, b) {
      d.uniform3fv(a, b);
    };
    r[35666] = function (d, a, b) {
      d.uniform4fv(a, b);
    };
    r[35667] = function (d, a, b) {
      d.uniform2iv(a, b);
    };
    r[35668] = function (d, a, b) {
      d.uniform3iv(a, b);
    };
    r[35669] = function (d, a, b) {
      d.uniform4iv(a, b);
    };
    r[35670] = function (d, a, b) {
      d.uniform1iv(a, b);
    };
    r[35671] = function (d, a, b) {
      d.uniform2iv(a, b);
    };
    r[35672] = function (d, a, b) {
      d.uniform3iv(a, b);
    };
    r[35673] = function (d, a, b) {
      d.uniform4iv(a, b);
    };
    r[35674] = function (d, a, b) {
      d.uniformMatrix2fv(a, false, b);
    };
    r[35675] = function (d, a, b) {
      d.uniformMatrix3fv(a, false, b);
    };
    r[35676] = function (d, a, b) {
      d.uniformMatrix4fv(a, false, b);
    };
    r[35678] = function (d, a, b) {
      d.uniform1iv(a, b);
    };
    r[35680] = function (d, a, b) {
      d.uniform1iv(a, b);
    };
    var h = r;
    function l(d, a, b) {
      if (a.blend !== b.blend) {
        if (b.blend) {
          d.enable(d.BLEND);
          if (!(b.blendSrc !== q.enums.BLEND_CONSTANT_COLOR && b.blendSrc !== q.enums.BLEND_ONE_MINUS_CONSTANT_COLOR && b.blendDst !== q.enums.BLEND_CONSTANT_COLOR && b.blendDst !== q.enums.BLEND_ONE_MINUS_CONSTANT_COLOR)) {
            d.blendColor((b.blendColor >> 24) / 255, (b.blendColor >> 16 & 255) / 255, (b.blendColor >> 8 & 255) / 255, (b.blendColor & 255) / 255);
          }
          if (b.blendSep) {
            d.blendFuncSeparate(b.blendSrc, b.blendDst, b.blendSrcAlpha, b.blendDstAlpha);
            d.blendEquationSeparate(b.blendEq, b.blendAlphaEq);
          } else {
            d.blendFunc(b.blendSrc, b.blendDst);
            d.blendEquation(b.blendEq);
          }
          return;
        } else {
          d.disable(d.BLEND);
          return;
        }
      }
      if (b.blend !== false) {
        if (a.blendColor !== b.blendColor) {
          d.blendColor((b.blendColor >> 24) / 255, (b.blendColor >> 16 & 255) / 255, (b.blendColor >> 8 & 255) / 255, (b.blendColor & 255) / 255);
        }
        if (a.blendSep === b.blendSep) {
          if (b.blendSep) {
            if (!(a.blendSrc === b.blendSrc && a.blendDst === b.blendDst && a.blendSrcAlpha === b.blendSrcAlpha && a.blendDstAlpha === b.blendDstAlpha)) {
              d.blendFuncSeparate(b.blendSrc, b.blendDst, b.blendSrcAlpha, b.blendDstAlpha);
            }
            if (!(a.blendEq === b.blendEq && a.blendAlphaEq === b.blendAlphaEq)) {
              d.blendEquationSeparate(b.blendEq, b.blendAlphaEq);
            }
          } else {
            if (!(a.blendSrc === b.blendSrc && a.blendDst === b.blendDst)) {
              d.blendFunc(b.blendSrc, b.blendDst);
            }
            if (a.blendEq !== b.blendEq) {
              d.blendEquation(b.blendEq);
            }
          }
        } else if (b.blendSep) {
          d.blendFuncSeparate(b.blendSrc, b.blendDst, b.blendSrcAlpha, b.blendDstAlpha);
          d.blendEquationSeparate(b.blendEq, b.blendAlphaEq);
        } else {
          d.blendFunc(b.blendSrc, b.blendDst);
          d.blendEquation(b.blendEq);
        }
      }
    }
    function f(d, a, b) {
      if (a.depthTest !== b.depthTest) {
        if (b.depthTest) {
          d.enable(d.DEPTH_TEST);
          d.depthFunc(b.depthFunc);
          d.depthMask(b.depthWrite);
          return;
        } else {
          d.disable(d.DEPTH_TEST);
          return;
        }
      }
      if (a.depthWrite !== b.depthWrite) {
        d.depthMask(b.depthWrite);
      }
      if (b.depthTest !== false) {
        if (a.depthFunc !== b.depthFunc) {
          d.depthFunc(b.depthFunc);
        }
      } else if (b.depthWrite) {
        b.depthTest = true;
        b.depthFunc = q.enums.DS_FUNC_ALWAYS;
        d.enable(d.DEPTH_TEST);
        d.depthFunc(b.depthFunc);
      }
    }
    function d(d, a, b) {
      if (b.stencilTest !== q.enums.STENCIL_INHERIT) {
        if (b.stencilTest !== a.stencilTest) {
          if (b.stencilTest === q.enums.STENCIL_DISABLE) {
            d.disable(d.STENCIL_TEST);
            return;
          } else {
            d.enable(d.STENCIL_TEST);
            if (b.stencilSep) {
              d.stencilFuncSeparate(d.FRONT, b.stencilFuncFront, b.stencilRefFront, b.stencilMaskFront);
              d.stencilMaskSeparate(d.FRONT, b.stencilWriteMaskFront);
              d.stencilOpSeparate(d.FRONT, b.stencilFailOpFront, b.stencilZFailOpFront, b.stencilZPassOpFront);
              d.stencilFuncSeparate(d.BACK, b.stencilFuncBack, b.stencilRefBack, b.stencilMaskBack);
              d.stencilMaskSeparate(d.BACK, b.stencilWriteMaskBack);
              d.stencilOpSeparate(d.BACK, b.stencilFailOpBack, b.stencilZFailOpBack, b.stencilZPassOpBack);
            } else {
              d.stencilFunc(b.stencilFuncFront, b.stencilRefFront, b.stencilMaskFront);
              d.stencilMask(b.stencilWriteMaskFront);
              d.stencilOp(b.stencilFailOpFront, b.stencilZFailOpFront, b.stencilZPassOpFront);
            }
            return;
          }
        } else {
          if (b.stencilTest !== q.enums.STENCIL_DISABLE) {
            if (a.stencilSep === b.stencilSep) {
              if (b.stencilSep) {
                if (!(a.stencilFuncFront === b.stencilFuncFront && a.stencilRefFront === b.stencilRefFront && a.stencilMaskFront === b.stencilMaskFront)) {
                  d.stencilFuncSeparate(d.FRONT, b.stencilFuncFront, b.stencilRefFront, b.stencilMaskFront);
                }
                if (a.stencilWriteMaskFront !== b.stencilWriteMaskFront) {
                  d.stencilMaskSeparate(d.FRONT, b.stencilWriteMaskFront);
                }
                if (!(a.stencilFailOpFront === b.stencilFailOpFront && a.stencilZFailOpFront === b.stencilZFailOpFront && a.stencilZPassOpFront === b.stencilZPassOpFront)) {
                  d.stencilOpSeparate(d.FRONT, b.stencilFailOpFront, b.stencilZFailOpFront, b.stencilZPassOpFront);
                }
                if (!(a.stencilFuncBack === b.stencilFuncBack && a.stencilRefBack === b.stencilRefBack && a.stencilMaskBack === b.stencilMaskBack)) {
                  d.stencilFuncSeparate(d.BACK, b.stencilFuncBack, b.stencilRefBack, b.stencilMaskBack);
                }
                if (a.stencilWriteMaskBack !== b.stencilWriteMaskBack) {
                  d.stencilMaskSeparate(d.BACK, b.stencilWriteMaskBack);
                }
                if (!(a.stencilFailOpBack === b.stencilFailOpBack && a.stencilZFailOpBack === b.stencilZFailOpBack && a.stencilZPassOpBack === b.stencilZPassOpBack)) {
                  d.stencilOpSeparate(d.BACK, b.stencilFailOpBack, b.stencilZFailOpBack, b.stencilZPassOpBack);
                }
              } else {
                if (!(a.stencilFuncFront === b.stencilFuncFront && a.stencilRefFront === b.stencilRefFront && a.stencilMaskFront === b.stencilMaskFront)) {
                  d.stencilFunc(b.stencilFuncFront, b.stencilRefFront, b.stencilMaskFront);
                }
                if (a.stencilWriteMaskFront !== b.stencilWriteMaskFront) {
                  d.stencilMask(b.stencilWriteMaskFront);
                }
                if (!(a.stencilFailOpFront === b.stencilFailOpFront && a.stencilZFailOpFront === b.stencilZFailOpFront && a.stencilZPassOpFront === b.stencilZPassOpFront)) {
                  d.stencilOp(b.stencilFailOpFront, b.stencilZFailOpFront, b.stencilZPassOpFront);
                }
              }
            } else if (b.stencilSep) {
              d.stencilFuncSeparate(d.FRONT, b.stencilFuncFront, b.stencilRefFront, b.stencilMaskFront);
              d.stencilMaskSeparate(d.FRONT, b.stencilWriteMaskFront);
              d.stencilOpSeparate(d.FRONT, b.stencilFailOpFront, b.stencilZFailOpFront, b.stencilZPassOpFront);
              d.stencilFuncSeparate(d.BACK, b.stencilFuncBack, b.stencilRefBack, b.stencilMaskBack);
              d.stencilMaskSeparate(d.BACK, b.stencilWriteMaskBack);
              d.stencilOpSeparate(d.BACK, b.stencilFailOpBack, b.stencilZFailOpBack, b.stencilZPassOpBack);
            } else {
              d.stencilFunc(b.stencilFuncFront, b.stencilRefFront, b.stencilMaskFront);
              d.stencilMask(b.stencilWriteMaskFront);
              d.stencilOp(b.stencilFailOpFront, b.stencilZFailOpFront, b.stencilZPassOpFront);
            }
          }
          return;
        }
      }
    }
    function t(d, a, b) {
      if (a.cullMode !== b.cullMode) {
        if (b.cullMode !== q.enums.CULL_NONE) {
          d.enable(d.CULL_FACE);
          d.cullFace(b.cullMode);
        } else {
          d.disable(d.CULL_FACE);
        }
      }
    }
    function p(a, b, c, d) {
      var e = false;
      if (d.maxStream !== -1) {
        if (c.maxStream !== d.maxStream) {
          e = true;
        } else if (c.program !== d.program) {
          e = true;
        } else {
          for (var f = 0; f < d.maxStream + 1; ++f) {
            if (c.vertexBuffers[f] !== d.vertexBuffers[f] || c.vertexBufferOffsets[f] !== d.vertexBufferOffsets[f]) {
              e = true;
              break;
            }
          }
        }
        if (e) {
          for (var g = 0; g < a._caps.maxVertexAttribs; ++g) {
            a._newAttributes[g] = 0;
          }
          for (var h = 0; h < d.maxStream + 1; ++h) {
            var i = d.vertexBuffers[h];
            var l = d.vertexBufferOffsets[h];
            if (i && i._glID !== -1) {
              b.bindBuffer(b.ARRAY_BUFFER, i._glID);
              for (var o = 0; o < d.program._attributes.length; ++o) {
                var r = d.program._attributes[o];
                var s = i._format.element(r.name);
                if (s) {
                  if (a._enabledAttributes[r.location] === 0) {
                    b.enableVertexAttribArray(r.location);
                    a._enabledAttributes[r.location] = 1;
                  }
                  a._newAttributes[r.location] = 1;
                  b.vertexAttribPointer(r.location, s.num, s.type, s.normalize, s.stride, s.offset + l * s.stride);
                }
              }
            }
          }
          for (var u = 0; u < a._caps.maxVertexAttribs; ++u) {
            if (a._enabledAttributes[u] !== a._newAttributes[u]) {
              b.disableVertexAttribArray(u);
              a._enabledAttributes[u] = 0;
            }
          }
        }
      }
    }
    function u(f, a, b) {
      for (var c = 0; c < b.maxTextureSlot + 1; ++c) {
        if (a.textureUnits[c] !== b.textureUnits[c]) {
          var g = b.textureUnits[c];
          if (g && g._glID !== -1) {
            f.activeTexture(f.TEXTURE0 + c);
            f.bindTexture(g._target, g._glID);
          }
        }
      }
    }
    function g(f, b, c, d) {
      if (d === undefined) {
        d = 0;
      }
      if (c instanceof s.default) {
        f.framebufferTexture2D(f.FRAMEBUFFER, b, f.TEXTURE_2D, c._glID, 0);
      } else if (c instanceof a.default) {
        f.framebufferTexture2D(f.FRAMEBUFFER, b, f.TEXTURE_CUBE_MAP_POSITIVE_X + d, c._glID, 0);
      } else {
        f.framebufferRenderbuffer(f.FRAMEBUFFER, b, f.RENDERBUFFER, c._glID);
      }
    }
    var m = function () {
      function e(e, a) {
        var f;
        if ((a = a || {}).alpha === undefined) {
          a.alpha = false;
        }
        if (a.stencil === undefined) {
          a.stencil = true;
        }
        if (a.depth === undefined) {
          a.depth = true;
        }
        if (a.antialias === undefined) {
          a.antialias = false;
        }
        if (a.preserveDrawingBuffer === undefined) {
          a.preserveDrawingBuffer = false;
        }
        try {
          f = e.getContext("webgl", a) || e.getContext("experimental-webgl", a) || e.getContext("webkit-3d", a) || e.getContext("moz-webgl", a);
        } catch (b) {
          f = null;
        }
        if (!f) {
          throw Error(cc.debug.getError(2400, "no webgl"));
        }
        this._gl = f;
        this._extensions = {};
        this._caps = {};
        this._stats = {
          texture: 0,
          vb: 0,
          ib: 0,
          drawcalls: 0
        };
        this._initExtensions(["EXT_texture_filter_anisotropic", "EXT_shader_texture_lod", "OES_standard_derivatives", "OES_texture_float", "OES_texture_float_linear", "OES_texture_half_float", "OES_texture_half_float_linear", "OES_vertex_array_object", "WEBGL_compressed_texture_astc", "WEBGL_compressed_texture_etc", "WEBGL_compressed_texture_etc1", "WEBGL_compressed_texture_pvrtc", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture", "WEBGL_draw_buffers"]);
        this._initCaps();
        this._initStates();
        x.default.initDefault(this);
        this._current = new x.default(this);
        this._next = new x.default(this);
        this._uniforms = {};
        this._vx = this._vy = this._vw = this._vh = 0;
        this._sx = this._sy = this._sw = this._sh = 0;
        this._framebuffer = null;
        this._enabledAttributes = Array(this._caps.maxVertexAttribs);
        this._newAttributes = Array(this._caps.maxVertexAttribs);
        for (var g = 0; g < this._caps.maxVertexAttribs; ++g) {
          this._enabledAttributes[g] = 0;
          this._newAttributes[g] = 0;
        }
      }
      var a;
      var i;
      var k = e.prototype;
      k._initExtensions = function (a) {
        for (var b = this._gl, c = ["", "WEBKIT_", "MOZ_"], d = 0; d < a.length; ++d) {
          for (var i = a[d], j = 0; j < 3; j++) {
            try {
              var k = b.getExtension(c[j] + i);
              if (k) {
                this._extensions[i] = k;
                break;
              }
            } catch (b) {}
          }
        }
      };
      k._initCaps = function () {
        var c = this._gl;
        var a = this.ext("WEBGL_draw_buffers");
        this._caps.maxVertexStreams = 4;
        this._caps.maxVertexTextures = c.getParameter(c.MAX_VERTEX_TEXTURE_IMAGE_UNITS);
        this._caps.maxFragUniforms = c.getParameter(c.MAX_FRAGMENT_UNIFORM_VECTORS);
        this._caps.maxTextureUnits = c.getParameter(c.MAX_TEXTURE_IMAGE_UNITS);
        this._caps.maxVertexAttribs = c.getParameter(c.MAX_VERTEX_ATTRIBS);
        this._caps.maxTextureSize = c.getParameter(c.MAX_TEXTURE_SIZE);
        this._caps.maxDrawBuffers = a ? c.getParameter(a.MAX_DRAW_BUFFERS_WEBGL) : 1;
        this._caps.maxColorAttachments = a ? c.getParameter(a.MAX_COLOR_ATTACHMENTS_WEBGL) : 1;
      };
      k._initStates = function () {
        var b = this._gl;
        b.disable(b.BLEND);
        b.blendFunc(b.ONE, b.ZERO);
        b.blendEquation(b.FUNC_ADD);
        b.blendColor(1, 1, 1, 1);
        b.colorMask(true, true, true, true);
        b.enable(b.CULL_FACE);
        b.cullFace(b.BACK);
        b.disable(b.DEPTH_TEST);
        b.depthFunc(b.LESS);
        b.depthMask(false);
        b.disable(b.POLYGON_OFFSET_FILL);
        b.depthRange(0, 1);
        b.disable(b.STENCIL_TEST);
        b.stencilFunc(b.ALWAYS, 0, 255);
        b.stencilMask(255);
        b.stencilOp(b.KEEP, b.KEEP, b.KEEP);
        b.clearDepth(1);
        b.clearColor(0, 0, 0, 0);
        b.clearStencil(0);
        b.disable(b.SCISSOR_TEST);
      };
      k._restoreTexture = function (d) {
        var a = this._gl;
        var b = this._current.textureUnits[d];
        if (b && b._glID !== -1) {
          a.bindTexture(b._target, b._glID);
        } else {
          a.bindTexture(a.TEXTURE_2D, null);
        }
      };
      k._restoreIndexBuffer = function () {
        var c = this._gl;
        var a = this._current.indexBuffer;
        if (a && a._glID !== -1) {
          c.bindBuffer(c.ELEMENT_ARRAY_BUFFER, a._glID);
        } else {
          c.bindBuffer(c.ELEMENT_ARRAY_BUFFER, null);
        }
      };
      k.ext = function (b) {
        return this._extensions[b];
      };
      k.allowFloatTexture = function () {
        return this.ext("OES_texture_float") != null;
      };
      k.setFrameBuffer = function (h) {
        if (this._framebuffer !== h) {
          this._framebuffer = h;
          var a = this._gl;
          if (h) {
            a.bindFramebuffer(a.FRAMEBUFFER, h._glID);
            for (var b = h._colors.length, c = 0; c < b; ++c) {
              var i = h._colors[c];
              g(a, a.COLOR_ATTACHMENT0 + c, i);
            }
            for (var j = b; j < this._caps.maxColorAttachments; ++j) {
              a.framebufferTexture2D(a.FRAMEBUFFER, a.COLOR_ATTACHMENT0 + j, a.TEXTURE_2D, null, 0);
            }
            if (h._depth) {
              g(a, a.DEPTH_ATTACHMENT, h._depth);
            }
            if (h._stencil) {
              g(a, a.STENCIL_ATTACHMENT, h._stencil);
            }
            if (h._depthStencil) {
              g(a, a.DEPTH_STENCIL_ATTACHMENT, h._depthStencil);
            }
          } else {
            a.bindFramebuffer(a.FRAMEBUFFER, null);
          }
        }
      };
      k.setViewport = function (e, a, b, c) {
        if (!(this._vx === e && this._vy === a && this._vw === b && this._vh === c)) {
          this._gl.viewport(e, a, b, c);
          this._vx = e;
          this._vy = a;
          this._vw = b;
          this._vh = c;
        }
      };
      k.setScissor = function (e, a, b, c) {
        if (!(this._sx === e && this._sy === a && this._sw === b && this._sh === c)) {
          this._gl.scissor(e, a, b, c);
          this._sx = e;
          this._sy = a;
          this._sw = b;
          this._sh = c;
        }
      };
      k.clear = function (d) {
        if (d.color !== undefined || d.depth !== undefined || d.stencil !== undefined) {
          var a = this._gl;
          var b = 0;
          if (d.color !== undefined) {
            b |= a.COLOR_BUFFER_BIT;
            a.clearColor(d.color[0], d.color[1], d.color[2], d.color[3]);
          }
          if (d.depth !== undefined) {
            b |= a.DEPTH_BUFFER_BIT;
            a.clearDepth(d.depth);
            a.enable(a.DEPTH_TEST);
            a.depthMask(true);
            a.depthFunc(a.ALWAYS);
          }
          if (d.stencil !== undefined) {
            b |= a.STENCIL_BUFFER_BIT;
            a.clearStencil(d.stencil);
          }
          a.clear(b);
          if (d.depth !== undefined) {
            if (this._current.depthTest === false) {
              a.disable(a.DEPTH_TEST);
            } else {
              if (this._current.depthWrite === false) {
                a.depthMask(false);
              }
              if (this._current.depthFunc !== q.enums.DS_FUNC_ALWAYS) {
                a.depthFunc(this._current.depthFunc);
              }
            }
          }
        }
      };
      k.enableBlend = function () {
        this._next.blend = true;
      };
      k.enableDepthTest = function () {
        this._next.depthTest = true;
      };
      k.enableDepthWrite = function () {
        this._next.depthWrite = true;
      };
      k.setStencilTest = function (b) {
        this._next.stencilTest = b;
      };
      k.setStencilFunc = function (d, a, b) {
        this._next.stencilSep = false;
        this._next.stencilFuncFront = this._next.stencilFuncBack = d;
        this._next.stencilRefFront = this._next.stencilRefBack = a;
        this._next.stencilMaskFront = this._next.stencilMaskBack = b;
      };
      k.setStencilFuncFront = function (d, a, b) {
        this._next.stencilSep = true;
        this._next.stencilFuncFront = d;
        this._next.stencilRefFront = a;
        this._next.stencilMaskFront = b;
      };
      k.setStencilFuncBack = function (d, a, b) {
        this._next.stencilSep = true;
        this._next.stencilFuncBack = d;
        this._next.stencilRefBack = a;
        this._next.stencilMaskBack = b;
      };
      k.setStencilOp = function (e, a, b, c) {
        this._next.stencilFailOpFront = this._next.stencilFailOpBack = e;
        this._next.stencilZFailOpFront = this._next.stencilZFailOpBack = a;
        this._next.stencilZPassOpFront = this._next.stencilZPassOpBack = b;
        this._next.stencilWriteMaskFront = this._next.stencilWriteMaskBack = c;
      };
      k.setStencilOpFront = function (e, a, b, c) {
        this._next.stencilSep = true;
        this._next.stencilFailOpFront = e;
        this._next.stencilZFailOpFront = a;
        this._next.stencilZPassOpFront = b;
        this._next.stencilWriteMaskFront = c;
      };
      k.setStencilOpBack = function (e, a, b, c) {
        this._next.stencilSep = true;
        this._next.stencilFailOpBack = e;
        this._next.stencilZFailOpBack = a;
        this._next.stencilZPassOpBack = b;
        this._next.stencilWriteMaskBack = c;
      };
      k.setDepthFunc = function (b) {
        this._next.depthFunc = b;
      };
      k.setBlendColor32 = function (b) {
        this._next.blendColor = b;
      };
      k.setBlendColor = function (e, a, b, c) {
        this._next.blendColor = (e * 255 << 24 | a * 255 << 16 | b * 255 << 8 | c * 255) >>> 0;
      };
      k.setBlendFunc = function (c, a) {
        this._next.blendSep = false;
        this._next.blendSrc = c;
        this._next.blendDst = a;
      };
      k.setBlendFuncSep = function (e, a, b, c) {
        this._next.blendSep = true;
        this._next.blendSrc = e;
        this._next.blendDst = a;
        this._next.blendSrcAlpha = b;
        this._next.blendDstAlpha = c;
      };
      k.setBlendEq = function (b) {
        this._next.blendSep = false;
        this._next.blendEq = b;
      };
      k.setBlendEqSep = function (c, a) {
        this._next.blendSep = true;
        this._next.blendEq = c;
        this._next.blendAlphaEq = a;
      };
      k.setCullMode = function (b) {
        this._next.cullMode = b;
      };
      k.setVertexBuffer = function (d, a, b) {
        if (b === undefined) {
          b = 0;
        }
        this._next.vertexBuffers[d] = a;
        this._next.vertexBufferOffsets[d] = b;
        if (this._next.maxStream < d) {
          this._next.maxStream = d;
        }
      };
      k.setIndexBuffer = function (b) {
        this._next.indexBuffer = b;
      };
      k.setProgram = function (b) {
        this._next.program = b;
      };
      k.setTexture = function (d, a, b) {
        if (!(b >= this._caps.maxTextureUnits)) {
          this._next.textureUnits[b] = a;
          this.setUniform(d, b);
          if (this._next.maxTextureSlot < b) {
            this._next.maxTextureSlot = b;
          }
        }
      };
      k.setTextureArray = function (g, a, b) {
        var c = a.length;
        if (!(c >= this._caps.maxTextureUnits)) {
          for (var d = 0; d < c; ++d) {
            var h = b[d];
            this._next.textureUnits[h] = a[d];
            if (this._next.maxTextureSlot < h) {
              this._next.maxTextureSlot = h;
            }
          }
          this.setUniform(g, b);
        }
      };
      k.setUniform = function (a, b) {
        var c = this._uniforms[a];
        var d = false;
        var i = false;
        var l = false;
        var n = false;
        do {
          if (!c) {
            break;
          }
          l = Array.isArray(b) || b instanceof Float32Array;
          n = b instanceof Int32Array;
          i = l || n;
          if (c.isArray !== i) {
            break;
          }
          if (c.isArray && c.value.length !== b.length) {
            break;
          }
          d = true;
        } while (0);
        if (d) {
          var r = c.value;
          var m = false;
          if (c.isArray) {
            for (var s = 0, t = r.length; s < t; s++) {
              if (r[s] !== b[s]) {
                m = true;
                r[s] = b[s];
              }
            }
          } else if (r !== b) {
            m = true;
            c.value = b;
          }
          if (m) {
            c.dirty = true;
          }
        } else {
          var q = b;
          if (l) {
            q = new Float32Array(b);
          } else if (n) {
            q = new Int32Array(b);
          }
          c = {
            dirty: true,
            value: q,
            isArray: i
          };
        }
        this._uniforms[a] = c;
      };
      k.setUniformDirectly = function (d, a) {
        var b = this._uniforms[d];
        if (!b) {
          this._uniforms[d] = b = {};
        }
        b.dirty = true;
        b.value = a;
      };
      k.setPrimitiveType = function (b) {
        this._next.primitiveType = b;
      };
      k.resetDrawCalls = function () {
        this._stats.drawcalls = 0;
      };
      k.getDrawCalls = function () {
        return this._stats.drawcalls;
      };
      k.draw = function (a, b) {
        var g = this._gl;
        var e = this._current;
        var i = this._next;
        l(g, e, i);
        f(g, e, i);
        d(g, e, i);
        t(g, e, i);
        p(this, g, e, i);
        if (e.indexBuffer !== i.indexBuffer) {
          g.bindBuffer(g.ELEMENT_ARRAY_BUFFER, i.indexBuffer && i.indexBuffer._glID !== -1 ? i.indexBuffer._glID : null);
        }
        var j = false;
        if (e.program !== i.program) {
          if (i.program._linked) {
            g.useProgram(i.program._glID);
          }
          j = true;
        }
        u(g, e, i);
        for (var k = 0; k < i.program._uniforms.length; ++k) {
          var o = i.program._uniforms[k];
          var s = this._uniforms[o.name];
          if (s && (j || s.dirty)) {
            s.dirty = false;
            var v = o.size === undefined ? c[o.type] : h[o.type];
            if (v) {
              v(g, o.location, s.value);
            }
          }
        }
        if (b) {
          if (i.indexBuffer) {
            g.drawElements(this._next.primitiveType, b, i.indexBuffer._format, a * i.indexBuffer._bytesPerIndex);
          } else {
            g.drawArrays(this._next.primitiveType, a, b);
          }
          this._stats.drawcalls++;
        }
        e.set(i);
        i.reset();
      };
      a = e;
      if (i = [{
        key: "caps",
        get: function () {
          return this._caps;
        }
      }]) {
        y(a.prototype, i);
      }
      Object.defineProperty(a, "prototype", {
        writable: false
      });
      return e;
    }();
    j.default = m;
    b.exports = j.default;
  }, {
    "./enums": 279,
    "./state": 286,
    "./texture-2d": 287,
    "./texture-cube": 288
  }],
  279: [function (g, a, b) {
    "use strict";

    b.__esModule = true;
    b.attrTypeBytes = function (b) {
      if (b === d.ATTR_TYPE_INT8) {
        return 1;
      } else if (b === d.ATTR_TYPE_UINT8) {
        return 1;
      } else if (b === d.ATTR_TYPE_INT16) {
        return 2;
      } else if (b === d.ATTR_TYPE_UINT16) {
        return 2;
      } else if (b === d.ATTR_TYPE_INT32) {
        return 4;
      } else if (b === d.ATTR_TYPE_UINT32) {
        return 4;
      } else if (b === d.ATTR_TYPE_FLOAT32) {
        return 4;
      } else {
        return 0;
      }
    };
    b.enums = undefined;
    b.glFilter = function (d, a, b) {
      if (b === undefined) {
        b = -1;
      }
      var f = h[a][b + 1];
      if (f === undefined) {
        if (b === -1) {
          return d.LINEAR;
        } else {
          return d.LINEAR_MIPMAP_LINEAR;
        }
      } else {
        return f;
      }
    };
    b.glTextureFmt = function (e) {
      var a = c[e];
      if (a === undefined) {
        return c[d.TEXTURE_FMT_RGBA8];
      } else {
        return a;
      }
    };
    var h = [[9728, 9984, 9986], [9729, 9985, 9987]];
    var c = [{
      format: 6407,
      internalFormat: 33776,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 33777,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 33778,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 33779,
      pixelType: null
    }, {
      format: 6407,
      internalFormat: 36196,
      pixelType: null
    }, {
      format: 6407,
      internalFormat: 35841,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 35843,
      pixelType: null
    }, {
      format: 6407,
      internalFormat: 35840,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 35842,
      pixelType: null
    }, {
      format: 6406,
      internalFormat: 6406,
      pixelType: 5121
    }, {
      format: 6409,
      internalFormat: 6409,
      pixelType: 5121
    }, {
      format: 6410,
      internalFormat: 6410,
      pixelType: 5121
    }, {
      format: 6407,
      internalFormat: 6407,
      pixelType: 33635
    }, {
      format: 6408,
      internalFormat: 6408,
      pixelType: 32820
    }, {
      format: 6408,
      internalFormat: 6408,
      pixelType: 32819
    }, {
      format: 6407,
      internalFormat: 6407,
      pixelType: 5121
    }, {
      format: 6408,
      internalFormat: 6408,
      pixelType: 5121
    }, {
      format: 6407,
      internalFormat: 6407,
      pixelType: 36193
    }, {
      format: 6408,
      internalFormat: 6408,
      pixelType: 36193
    }, {
      format: 6407,
      internalFormat: 6407,
      pixelType: 5126
    }, {
      format: 6408,
      internalFormat: 6408,
      pixelType: 5126
    }, {
      format: null,
      internalFormat: null,
      pixelType: null
    }, {
      format: null,
      internalFormat: null,
      pixelType: null
    }, {
      format: null,
      internalFormat: null,
      pixelType: null
    }, {
      format: null,
      internalFormat: null,
      pixelType: null
    }, {
      format: 6402,
      internalFormat: 6402,
      pixelType: 5123
    }, {
      format: 6402,
      internalFormat: 6402,
      pixelType: 5125
    }, {
      format: 6402,
      internalFormat: 6402,
      pixelType: 5125
    }, {
      format: 6407,
      internalFormat: 37492,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37496,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37808,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37809,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37810,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37811,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37812,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37813,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37814,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37815,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37816,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37817,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37818,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37819,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37820,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37821,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37840,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37841,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37842,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37843,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37844,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37845,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37846,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37847,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37848,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37849,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37850,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37851,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37852,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37853,
      pixelType: null
    }];
    var d = {
      USAGE_STATIC: 35044,
      USAGE_DYNAMIC: 35048,
      USAGE_STREAM: 35040,
      INDEX_FMT_UINT8: 5121,
      INDEX_FMT_UINT16: 5123,
      INDEX_FMT_UINT32: 5125,
      ATTR_POSITION: "a_position",
      ATTR_NORMAL: "a_normal",
      ATTR_TANGENT: "a_tangent",
      ATTR_BITANGENT: "a_bitangent",
      ATTR_WEIGHTS: "a_weights",
      ATTR_JOINTS: "a_joints",
      ATTR_COLOR: "a_color",
      ATTR_COLOR0: "a_color0",
      ATTR_COLOR1: "a_color1",
      ATTR_UV: "a_uv",
      ATTR_UV0: "a_uv0",
      ATTR_UV1: "a_uv1",
      ATTR_UV2: "a_uv2",
      ATTR_UV3: "a_uv3",
      ATTR_UV4: "a_uv4",
      ATTR_UV5: "a_uv5",
      ATTR_UV6: "a_uv6",
      ATTR_UV7: "a_uv7",
      ATTR_TEX_COORD: "a_texCoord",
      ATTR_TEX_COORD1: "a_texCoord1",
      ATTR_TEX_COORD2: "a_texCoord2",
      ATTR_TEX_COORD3: "a_texCoord3",
      ATTR_TEX_COORD4: "a_texCoord4",
      ATTR_TEX_COORD5: "a_texCoord5",
      ATTR_TEX_COORD6: "a_texCoord6",
      ATTR_TEX_COORD7: "a_texCoord7",
      ATTR_TEX_COORD8: "a_texCoord8",
      ATTR_TYPE_INT8: 5120,
      ATTR_TYPE_UINT8: 5121,
      ATTR_TYPE_INT16: 5122,
      ATTR_TYPE_UINT16: 5123,
      ATTR_TYPE_INT32: 5124,
      ATTR_TYPE_UINT32: 5125,
      ATTR_TYPE_FLOAT32: 5126,
      FILTER_NEAREST: 0,
      FILTER_LINEAR: 1,
      WRAP_REPEAT: 10497,
      WRAP_CLAMP: 33071,
      WRAP_MIRROR: 33648,
      TEXTURE_FMT_RGB_DXT1: 0,
      TEXTURE_FMT_RGBA_DXT1: 1,
      TEXTURE_FMT_RGBA_DXT3: 2,
      TEXTURE_FMT_RGBA_DXT5: 3,
      TEXTURE_FMT_RGB_ETC1: 4,
      TEXTURE_FMT_RGB_PVRTC_2BPPV1: 5,
      TEXTURE_FMT_RGBA_PVRTC_2BPPV1: 6,
      TEXTURE_FMT_RGB_PVRTC_4BPPV1: 7,
      TEXTURE_FMT_RGBA_PVRTC_4BPPV1: 8,
      TEXTURE_FMT_A8: 9,
      TEXTURE_FMT_L8: 10,
      TEXTURE_FMT_L8_A8: 11,
      TEXTURE_FMT_R5_G6_B5: 12,
      TEXTURE_FMT_R5_G5_B5_A1: 13,
      TEXTURE_FMT_R4_G4_B4_A4: 14,
      TEXTURE_FMT_RGB8: 15,
      TEXTURE_FMT_RGBA8: 16,
      TEXTURE_FMT_RGB16F: 17,
      TEXTURE_FMT_RGBA16F: 18,
      TEXTURE_FMT_RGB32F: 19,
      TEXTURE_FMT_RGBA32F: 20,
      TEXTURE_FMT_R32F: 21,
      TEXTURE_FMT_111110F: 22,
      TEXTURE_FMT_SRGB: 23,
      TEXTURE_FMT_SRGBA: 24,
      TEXTURE_FMT_D16: 25,
      TEXTURE_FMT_D32: 26,
      TEXTURE_FMT_D24S8: 27,
      TEXTURE_FMT_RGB_ETC2: 28,
      TEXTURE_FMT_RGBA_ETC2: 29,
      TEXTURE_FMT_RGBA_ASTC_4X4: 30,
      TEXTURE_FMT_RGBA_ASTC_5X4: 31,
      TEXTURE_FMT_RGBA_ASTC_5X5: 32,
      TEXTURE_FMT_RGBA_ASTC_6X5: 33,
      TEXTURE_FMT_RGBA_ASTC_6X6: 34,
      TEXTURE_FMT_RGBA_ASTC_8X5: 35,
      TEXTURE_FMT_RGBA_ASTC_8X6: 36,
      TEXTURE_FMT_RGBA_ASTC_8X8: 37,
      TEXTURE_FMT_RGBA_ASTC_10X5: 38,
      TEXTURE_FMT_RGBA_ASTC_10X6: 39,
      TEXTURE_FMT_RGBA_ASTC_10X8: 40,
      TEXTURE_FMT_RGBA_ASTC_10X10: 41,
      TEXTURE_FMT_RGBA_ASTC_12X10: 42,
      TEXTURE_FMT_RGBA_ASTC_12X12: 43,
      TEXTURE_FMT_SRGBA_ASTC_4X4: 44,
      TEXTURE_FMT_SRGBA_ASTC_5X4: 45,
      TEXTURE_FMT_SRGBA_ASTC_5X5: 46,
      TEXTURE_FMT_SRGBA_ASTC_6X5: 47,
      TEXTURE_FMT_SRGBA_ASTC_6X6: 48,
      TEXTURE_FMT_SRGBA_ASTC_8X5: 49,
      TEXTURE_FMT_SRGBA_ASTC_8X6: 50,
      TEXTURE_FMT_SRGBA_ASTC_8X8: 51,
      TEXTURE_FMT_SRGBA_ASTC_10X5: 52,
      TEXTURE_FMT_SRGBA_ASTC_10X6: 53,
      TEXTURE_FMT_SRGBA_ASTC_10X8: 54,
      TEXTURE_FMT_SRGBA_ASTC_10X10: 55,
      TEXTURE_FMT_SRGBA_ASTC_12X10: 56,
      TEXTURE_FMT_SRGBA_ASTC_12X12: 57,
      DS_FUNC_NEVER: 512,
      DS_FUNC_LESS: 513,
      DS_FUNC_EQUAL: 514,
      DS_FUNC_LEQUAL: 515,
      DS_FUNC_GREATER: 516,
      DS_FUNC_NOTEQUAL: 517,
      DS_FUNC_GEQUAL: 518,
      DS_FUNC_ALWAYS: 519,
      RB_FMT_RGBA4: 32854,
      RB_FMT_RGB5_A1: 32855,
      RB_FMT_RGB565: 36194,
      RB_FMT_D16: 33189,
      RB_FMT_S8: 36168,
      RB_FMT_D24S8: 34041,
      BLEND_FUNC_ADD: 32774,
      BLEND_FUNC_SUBTRACT: 32778,
      BLEND_FUNC_REVERSE_SUBTRACT: 32779,
      BLEND_ZERO: 0,
      BLEND_ONE: 1,
      BLEND_SRC_COLOR: 768,
      BLEND_ONE_MINUS_SRC_COLOR: 769,
      BLEND_DST_COLOR: 774,
      BLEND_ONE_MINUS_DST_COLOR: 775,
      BLEND_SRC_ALPHA: 770,
      BLEND_ONE_MINUS_SRC_ALPHA: 771,
      BLEND_DST_ALPHA: 772,
      BLEND_ONE_MINUS_DST_ALPHA: 773,
      BLEND_CONSTANT_COLOR: 32769,
      BLEND_ONE_MINUS_CONSTANT_COLOR: 32770,
      BLEND_CONSTANT_ALPHA: 32771,
      BLEND_ONE_MINUS_CONSTANT_ALPHA: 32772,
      BLEND_SRC_ALPHA_SATURATE: 776,
      STENCIL_DISABLE: 0,
      STENCIL_ENABLE: 1,
      STENCIL_INHERIT: 2,
      STENCIL_OP_KEEP: 7680,
      STENCIL_OP_ZERO: 0,
      STENCIL_OP_REPLACE: 7681,
      STENCIL_OP_INCR: 7682,
      STENCIL_OP_INCR_WRAP: 34055,
      STENCIL_OP_DECR: 7683,
      STENCIL_OP_DECR_WRAP: 34056,
      STENCIL_OP_INVERT: 5386,
      CULL_NONE: 0,
      CULL_FRONT: 1028,
      CULL_BACK: 1029,
      CULL_FRONT_AND_BACK: 1032,
      PT_POINTS: 0,
      PT_LINES: 1,
      PT_LINE_LOOP: 2,
      PT_LINE_STRIP: 3,
      PT_TRIANGLES: 4,
      PT_TRIANGLE_STRIP: 5,
      PT_TRIANGLE_FAN: 6
    };
    b.enums = d;
  }, {}],
  280: [function (e, a, b) {
    "use strict";

    b.__esModule = true;
    b.default = undefined;
    var c = function () {
      function c(e, a, b, c) {
        this._device = e;
        this._width = a;
        this._height = b;
        this._colors = c.colors || [];
        this._depth = c.depth || null;
        this._stencil = c.stencil || null;
        this._depthStencil = c.depthStencil || null;
        this._glID = e._gl.createFramebuffer();
      }
      var a = c.prototype;
      a.destroy = function () {
        if (this._glID !== null) {
          this._device._gl.deleteFramebuffer(this._glID);
          this._glID = null;
        }
      };
      a.getHandle = function () {
        return this._glID;
      };
      return c;
    }();
    b.default = c;
    a.exports = b.default;
  }, {}],
  281: [function (c, b, d) {
    "use strict";

    d.__esModule = true;
    d.default = undefined;
    var e;
    var k = c("./enums");
    function g(e, a) {
      for (var b = 0; b < a.length; b++) {
        var f = a[b];
        f.enumerable = f.enumerable || false;
        f.configurable = true;
        if ("value" in f) {
          f.writable = true;
        }
        Object.defineProperty(e, f.key, f);
      }
    }
    (e = {})[k.enums.INDEX_FMT_UINT8] = 1;
    e[k.enums.INDEX_FMT_UINT16] = 2;
    e[k.enums.INDEX_FMT_UINT32] = 4;
    var h = e;
    var j = function () {
      function e(e, a, b, c) {
        this._device = e;
        this._format = a;
        this._usage = b;
        this._bytesPerIndex = h[a];
        this._bytes = c.byteLength;
        this._numIndices = this._bytes / this._bytesPerIndex;
        this._needExpandDataStore = true;
        this._glID = e._gl.createBuffer();
        this.update(0, c);
        e._stats.ib += this._bytes;
      }
      var a;
      var f;
      var i = e.prototype;
      i.destroy = function () {
        if (this._glID !== -1) {
          this._device._gl.deleteBuffer(this._glID);
          this._device._stats.ib -= this.bytes;
          this._glID = -1;
        }
      };
      i.update = function (e, a) {
        if (this._glID !== -1 && a.byteLength !== 0) {
          if (e + a.byteLength > this._bytes) {
            if (e) {
              return;
            }
            this._needExpandDataStore = true;
            this._bytes = e + a.byteLength;
            this._numIndices = this._bytes / this._bytesPerIndex;
          }
          var b = this._device._gl;
          var c = this._usage;
          b.bindBuffer(b.ELEMENT_ARRAY_BUFFER, this._glID);
          if (this._needExpandDataStore) {
            b.bufferData(b.ELEMENT_ARRAY_BUFFER, a, c);
            this._needExpandDataStore = false;
          } else {
            b.bufferSubData(b.ELEMENT_ARRAY_BUFFER, e, a);
          }
          this._device._restoreIndexBuffer();
        }
      };
      i.setUsage = function (b) {
        this._usage = b;
      };
      a = e;
      if (f = [{
        key: "count",
        get: function () {
          return this._numIndices;
        }
      }]) {
        g(a.prototype, f);
      }
      Object.defineProperty(a, "prototype", {
        writable: false
      });
      return e;
    }();
    j.BYTES_PER_INDEX = h;
    var a = j;
    d.default = a;
    b.exports = d.default;
  }, {
    "./enums": 279
  }],
  282: [function (g, a, b) {
    "use strict";

    b.__esModule = true;
    b.default = undefined;
    var c;
    var h = g("./enums");
    c = {
      VertexFormat: g("./vertex-format"),
      IndexBuffer: g("./index-buffer"),
      VertexBuffer: g("./vertex-buffer"),
      Program: g("./program"),
      Texture: g("./texture"),
      Texture2D: g("./texture-2d"),
      TextureCube: g("./texture-cube"),
      RenderBuffer: g("./render-buffer"),
      FrameBuffer: g("./frame-buffer"),
      Device: g("./device"),
      attrTypeBytes: h.attrTypeBytes,
      glFilter: h.glFilter,
      glTextureFmt: h.glTextureFmt
    };
    Object.assign(c, h.enums);
    var e = c;
    b.default = e;
    cc.gfx = c;
    a.exports = b.default;
  }, {
    "./device": 278,
    "./enums": 279,
    "./frame-buffer": 280,
    "./index-buffer": 281,
    "./program": 284,
    "./render-buffer": 285,
    "./texture": 289,
    "./texture-2d": 287,
    "./texture-cube": 288,
    "./vertex-buffer": 290,
    "./vertex-format": 291
  }],
  283: [function (d, a, b) {
    "use strict";

    b.__esModule = true;
    b.isPow2 = function (b) {
      return !(b & b - 1 || !b);
    };
  }, {}],
  284: [function (a, b, c) {
    "use strict";

    function i(e, a) {
      for (var b = 0; b < a.length; b++) {
        var f = a[b];
        f.enumerable = f.enumerable || false;
        f.configurable = true;
        if ("value" in f) {
          f.writable = true;
        }
        Object.defineProperty(e, f.key, f);
      }
    }
    c.__esModule = true;
    c.default = undefined;
    var d = 0;
    function f(e, a, b) {
      if (b) {
        b.split("\n").forEach(function (b) {
          if (!(b.length < 5)) {
            var c = /^ERROR:\s+(\d+):(\d+):\s*(.*)$/.exec(b);
            if (c) {
              e.push({
                type: a,
                fileID: c[1] | 0,
                line: c[2] | 0,
                message: c[3].trim()
              });
            } else if (b.length > 0) {
              e.push({
                type: a,
                fileID: -1,
                line: 0,
                message: b
              });
            }
          }
        });
      }
    }
    var h = function () {
      function a(c, a) {
        this._device = c;
        this._attributes = [];
        this._uniforms = [];
        this._samplers = [];
        this._errors = [];
        this._linked = false;
        this._vertSource = a.vert;
        this._fragSource = a.frag;
        this._glID = null;
        this._id = d++;
      }
      var b;
      var e;
      var g = a.prototype;
      g.link = function () {
        if (!this._linked) {
          var d = this._device._gl;
          if (!d.isContextLost()) {
            var b = l(d, d.VERTEX_SHADER, this._vertSource);
            var g = l(d, d.FRAGMENT_SHADER, this._fragSource);
            var e = d.createProgram();
            d.attachShader(e, b);
            d.attachShader(e, g);
            d.linkProgram(e);
            var h = false;
            var i = this._errors;
            if (!d.getShaderParameter(b, d.COMPILE_STATUS)) {
              f(i, "vs", d.getShaderInfoLog(b) || "");
              h = true;
            }
            if (!d.getShaderParameter(g, d.COMPILE_STATUS)) {
              f(i, "fs", d.getShaderInfoLog(g) || "");
              h = true;
            }
            d.deleteShader(b);
            d.deleteShader(g);
            if (h) {
              return i;
            }
            if (!d.getProgramParameter(e, d.LINK_STATUS)) {
              i.push({
                info: "Failed to link shader program: " + d.getProgramInfoLog(e)
              });
              return i;
            }
            this._glID = e;
            for (var j = d.getProgramParameter(e, d.ACTIVE_ATTRIBUTES), a = 0; a < j; ++a) {
              var k = d.getActiveAttrib(e, a);
              var m = d.getAttribLocation(e, k.name);
              this._attributes.push({
                name: k.name,
                location: m,
                type: k.type
              });
            }
            for (var o = d.getProgramParameter(e, d.ACTIVE_UNIFORMS), p = 0; p < o; ++p) {
              var r = d.getActiveUniform(e, p);
              var t = r.name;
              var u = d.getUniformLocation(e, t);
              var v = t.substr(t.length - 3) === "[0]";
              if (v) {
                t = t.substr(0, t.length - 3);
              }
              var B = {
                name: t,
                location: u,
                type: r.type,
                size: v ? r.size : undefined
              };
              this._uniforms.push(B);
            }
            this._linked = true;
          }
        }
      };
      g.destroy = function () {
        this._device._gl.deleteProgram(this._glID);
        this._linked = false;
        this._glID = null;
        this._attributes = [];
        this._uniforms = [];
        this._samplers = [];
      };
      b = a;
      if (e = [{
        key: "id",
        get: function () {
          return this._id;
        }
      }]) {
        i(b.prototype, e);
      }
      Object.defineProperty(b, "prototype", {
        writable: false
      });
      return a;
    }();
    function l(e, a, b) {
      var c = e.createShader(a);
      e.shaderSource(c, b);
      e.compileShader(c);
      return c;
    }
    c.default = h;
    b.exports = c.default;
  }, {}],
  285: [function (e, a, b) {
    "use strict";

    b.__esModule = true;
    b.default = undefined;
    var c = function () {
      function c(e, a, b, c) {
        this._device = e;
        this._format = a;
        this._glID = e._gl.createRenderbuffer();
        this.update(b, c);
      }
      var a = c.prototype;
      a.update = function (d, a) {
        this._width = d;
        this._height = a;
        var b = this._device._gl;
        b.bindRenderbuffer(b.RENDERBUFFER, this._glID);
        b.renderbufferStorage(b.RENDERBUFFER, this._format, d, a);
        b.bindRenderbuffer(b.RENDERBUFFER, null);
      };
      a.destroy = function () {
        if (this._glID !== null) {
          var b = this._device._gl;
          b.bindRenderbuffer(b.RENDERBUFFER, null);
          b.deleteRenderbuffer(this._glID);
          this._glID = null;
        }
      };
      return c;
    }();
    b.default = c;
    a.exports = b.default;
  }, {}],
  286: [function (g, a, b) {
    "use strict";

    b.__esModule = true;
    b.default = undefined;
    var c = g("./enums");
    var d = {
      blend: false,
      blendSep: false,
      blendColor: 4294967295,
      blendEq: c.enums.BLEND_FUNC_ADD,
      blendAlphaEq: c.enums.BLEND_FUNC_ADD,
      blendSrc: c.enums.BLEND_ONE,
      blendDst: c.enums.BLEND_ZERO,
      blendSrcAlpha: c.enums.BLEND_ONE,
      blendDstAlpha: c.enums.BLEND_ZERO,
      depthTest: false,
      depthWrite: false,
      depthFunc: c.enums.DS_FUNC_LESS,
      stencilTest: false,
      stencilSep: false,
      stencilFuncFront: c.enums.DS_FUNC_ALWAYS,
      stencilRefFront: 0,
      stencilMaskFront: 255,
      stencilFailOpFront: c.enums.STENCIL_OP_KEEP,
      stencilZFailOpFront: c.enums.STENCIL_OP_KEEP,
      stencilZPassOpFront: c.enums.STENCIL_OP_KEEP,
      stencilWriteMaskFront: 255,
      stencilFuncBack: c.enums.DS_FUNC_ALWAYS,
      stencilRefBack: 0,
      stencilMaskBack: 255,
      stencilFailOpBack: c.enums.STENCIL_OP_KEEP,
      stencilZFailOpBack: c.enums.STENCIL_OP_KEEP,
      stencilZPassOpBack: c.enums.STENCIL_OP_KEEP,
      stencilWriteMaskBack: 255,
      cullMode: c.enums.CULL_BACK,
      primitiveType: c.enums.PT_TRIANGLES,
      maxStream: -1,
      vertexBuffers: [],
      vertexBufferOffsets: [],
      indexBuffer: null,
      maxTextureSlot: -1,
      textureUnits: [],
      program: null
    };
    var e = function () {
      function c(b) {
        this.vertexBuffers = Array(b._caps.maxVertexStreams);
        this.vertexBufferOffsets = Array(b._caps.maxVertexStreams);
        this.textureUnits = Array(b._caps.maxTextureUnits);
        this.set(d);
      }
      c.initDefault = function (b) {
        d.vertexBuffers = Array(b._caps.maxVertexStreams);
        d.vertexBufferOffsets = Array(b._caps.maxVertexStreams);
        d.textureUnits = Array(b._caps.maxTextureUnits);
      };
      var a = c.prototype;
      a.reset = function () {
        this.set(d);
      };
      a.set = function (e) {
        this.blend = e.blend;
        this.blendSep = e.blendSep;
        this.blendColor = e.blendColor;
        this.blendEq = e.blendEq;
        this.blendAlphaEq = e.blendAlphaEq;
        this.blendSrc = e.blendSrc;
        this.blendDst = e.blendDst;
        this.blendSrcAlpha = e.blendSrcAlpha;
        this.blendDstAlpha = e.blendDstAlpha;
        this.depthTest = e.depthTest;
        this.depthWrite = e.depthWrite;
        this.depthFunc = e.depthFunc;
        this.stencilTest = e.stencilTest;
        this.stencilSep = e.stencilSep;
        this.stencilFuncFront = e.stencilFuncFront;
        this.stencilRefFront = e.stencilRefFront;
        this.stencilMaskFront = e.stencilMaskFront;
        this.stencilFailOpFront = e.stencilFailOpFront;
        this.stencilZFailOpFront = e.stencilZFailOpFront;
        this.stencilZPassOpFront = e.stencilZPassOpFront;
        this.stencilWriteMaskFront = e.stencilWriteMaskFront;
        this.stencilFuncBack = e.stencilFuncBack;
        this.stencilRefBack = e.stencilRefBack;
        this.stencilMaskBack = e.stencilMaskBack;
        this.stencilFailOpBack = e.stencilFailOpBack;
        this.stencilZFailOpBack = e.stencilZFailOpBack;
        this.stencilZPassOpBack = e.stencilZPassOpBack;
        this.stencilWriteMaskBack = e.stencilWriteMaskBack;
        this.cullMode = e.cullMode;
        this.primitiveType = e.primitiveType;
        this.maxStream = e.maxStream;
        for (var a = 0; a < e.vertexBuffers.length; ++a) {
          this.vertexBuffers[a] = e.vertexBuffers[a];
        }
        for (var f = 0; f < e.vertexBufferOffsets.length; ++f) {
          this.vertexBufferOffsets[f] = e.vertexBufferOffsets[f];
        }
        this.indexBuffer = e.indexBuffer;
        this.maxTextureSlot = e.maxTextureSlot;
        for (var g = 0; g < e.textureUnits.length; ++g) {
          this.textureUnits[g] = e.textureUnits[g];
        }
        this.program = e.program;
      };
      return c;
    }();
    b.default = e;
    a.exports = b.default;
  }, {
    "./enums": 279
  }],
  287: [function (c, b, d) {
    "use strict";

    d.__esModule = true;
    d.default = undefined;
    var e;
    var k = (e = c("./texture")) && e.__esModule ? e : {
      default: e
    };
    var l = c("./enums");
    var g = c("./misc");
    function h(a, b) {
      return (h = Object.setPrototypeOf || function (c, a) {
        c.__proto__ = a;
        return c;
      })(a, b);
    }
    var j = function (i) {
      var a;
      var b;
      function e(b, a) {
        var c;
        var f = (c = i.call(this, b) || this)._device._gl;
        c._target = f.TEXTURE_2D;
        c._glID = f.createTexture();
        a.images = a.images || [null];
        c.update(a);
        return c;
      }
      b = i;
      (a = e).prototype = Object.create(b.prototype);
      a.prototype.constructor = a;
      h(a, b);
      var f = e.prototype;
      f.update = function (d) {
        var a = this._device._gl;
        var b = this._genMipmap;
        if (d) {
          if (d.width !== undefined) {
            this._width = d.width;
          }
          if (d.height !== undefined) {
            this._height = d.height;
          }
          if (d.anisotropy !== undefined) {
            this._anisotropy = d.anisotropy;
          }
          if (d.minFilter !== undefined) {
            this._minFilter = d.minFilter;
          }
          if (d.magFilter !== undefined) {
            this._magFilter = d.magFilter;
          }
          if (d.mipFilter !== undefined) {
            this._mipFilter = d.mipFilter;
          }
          if (d.wrapS !== undefined) {
            this._wrapS = d.wrapS;
          }
          if (d.wrapT !== undefined) {
            this._wrapT = d.wrapT;
          }
          if (d.format !== undefined) {
            this._format = d.format;
            this._compressed = this._format >= l.enums.TEXTURE_FMT_RGB_DXT1 && this._format <= l.enums.TEXTURE_FMT_RGBA_PVRTC_4BPPV1 || this._format >= l.enums.TEXTURE_FMT_RGB_ETC2 && this._format <= l.enums.TEXTURE_FMT_RGBA_ETC2 || this._format >= l.enums.TEXTURE_FMT_RGBA_ASTC_4X4 && this._format <= l.enums.TEXTURE_FMT_SRGBA_ASTC_12X12;
          }
          if (d.genMipmaps !== undefined) {
            this._genMipmap = d.genMipmaps;
            b = d.genMipmaps;
          }
          this._device.caps.maxTextureSize;
          d.width;
          d.height;
          if (d.images !== undefined && d.images.length > 1) {
            b = false;
            if (d.width > d.height) {
              d.width;
            } else {
              d.height;
            }
            d.images.length;
          }
        }
        if (!((0, g.isPow2)(this._width) && (0, g.isPow2)(this._height))) {
          b = false;
        }
        a.activeTexture(a.TEXTURE0);
        a.bindTexture(a.TEXTURE_2D, this._glID);
        if (d.images !== undefined && d.images.length > 0) {
          this._setMipmap(d.images, d.flipY, d.premultiplyAlpha);
          if (d.images.length > 1) {
            this._genMipmap = true;
          }
        }
        if (b) {
          a.hint(a.GENERATE_MIPMAP_HINT, a.NICEST);
          a.generateMipmap(a.TEXTURE_2D);
          this._genMipmap = true;
        }
        this._setTexInfo();
        this._device._restoreTexture(0);
      };
      f.updateSubImage = function (d) {
        var a = this._device._gl;
        var b = (0, l.glTextureFmt)(this._format);
        a.activeTexture(a.TEXTURE0);
        a.bindTexture(a.TEXTURE_2D, this._glID);
        this._setSubImage(b, d);
        this._device._restoreTexture(0);
      };
      f.updateImage = function (d) {
        var a = this._device._gl;
        var b = (0, l.glTextureFmt)(this._format);
        a.activeTexture(a.TEXTURE0);
        a.bindTexture(a.TEXTURE_2D, this._glID);
        this._setImage(b, d);
        this._device._restoreTexture(0);
      };
      f._setSubImage = function (g, a) {
        var b = this._device._gl;
        var c = a.flipY;
        var d = a.premultiplyAlpha;
        var e = a.image;
        if (!e || ArrayBuffer.isView(e) || e instanceof ArrayBuffer) {
          if (c === undefined) {
            b.pixelStorei(b.UNPACK_FLIP_Y_WEBGL, false);
          } else {
            b.pixelStorei(b.UNPACK_FLIP_Y_WEBGL, c);
          }
          if (d === undefined) {
            b.pixelStorei(b.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
          } else {
            b.pixelStorei(b.UNPACK_PREMULTIPLY_ALPHA_WEBGL, d);
          }
          if (this._compressed) {
            b.compressedTexSubImage2D(b.TEXTURE_2D, a.level, a.x, a.y, a.width, a.height, g.format, e);
          } else {
            b.texSubImage2D(b.TEXTURE_2D, a.level, a.x, a.y, a.width, a.height, g.format, g.pixelType, e);
          }
        } else {
          if (c === undefined) {
            b.pixelStorei(b.UNPACK_FLIP_Y_WEBGL, true);
          } else {
            b.pixelStorei(b.UNPACK_FLIP_Y_WEBGL, c);
          }
          if (d === undefined) {
            b.pixelStorei(b.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
          } else {
            b.pixelStorei(b.UNPACK_PREMULTIPLY_ALPHA_WEBGL, d);
          }
          b.texSubImage2D(b.TEXTURE_2D, a.level, a.x, a.y, g.format, g.pixelType, e);
        }
      };
      f._setImage = function (g, a) {
        var b = this._device._gl;
        var c = a.flipY;
        var d = a.premultiplyAlpha;
        var e = a.image;
        if (!e || ArrayBuffer.isView(e) || e instanceof ArrayBuffer) {
          if (c === undefined) {
            b.pixelStorei(b.UNPACK_FLIP_Y_WEBGL, false);
          } else {
            b.pixelStorei(b.UNPACK_FLIP_Y_WEBGL, c);
          }
          if (d === undefined) {
            b.pixelStorei(b.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
          } else {
            b.pixelStorei(b.UNPACK_PREMULTIPLY_ALPHA_WEBGL, d);
          }
          if (this._compressed) {
            b.compressedTexImage2D(b.TEXTURE_2D, a.level, g.internalFormat, a.width, a.height, 0, e);
          } else {
            b.texImage2D(b.TEXTURE_2D, a.level, g.internalFormat, a.width, a.height, 0, g.format, g.pixelType, e);
          }
        } else {
          if (c === undefined) {
            b.pixelStorei(b.UNPACK_FLIP_Y_WEBGL, true);
          } else {
            b.pixelStorei(b.UNPACK_FLIP_Y_WEBGL, c);
          }
          if (d === undefined) {
            b.pixelStorei(b.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
          } else {
            b.pixelStorei(b.UNPACK_PREMULTIPLY_ALPHA_WEBGL, d);
          }
          b.texImage2D(b.TEXTURE_2D, a.level, g.internalFormat, g.format, g.pixelType, e);
        }
      };
      f._setMipmap = function (a, b, c) {
        for (var d = (0, l.glTextureFmt)(this._format), e = {
            width: this._width,
            height: this._height,
            flipY: b,
            premultiplyAlpha: c,
            level: 0,
            image: null
          }, f = 0; f < a.length; ++f) {
          e.level = f;
          e.width = this._width >> f;
          e.height = this._height >> f;
          e.image = a[f];
          this._setImage(d, e);
        }
      };
      f._setTexInfo = function () {
        var e = this._device._gl;
        var a = (0, g.isPow2)(this._width) && (0, g.isPow2)(this._height);
        if (!(a || this._wrapS === l.enums.WRAP_CLAMP && this._wrapT === l.enums.WRAP_CLAMP)) {
          this._wrapS = l.enums.WRAP_CLAMP;
          this._wrapT = l.enums.WRAP_CLAMP;
        }
        var b = this._genMipmap ? this._mipFilter : -1;
        if (!(a || b === -1)) {
          b = -1;
        }
        e.texParameteri(e.TEXTURE_2D, e.TEXTURE_MIN_FILTER, (0, l.glFilter)(e, this._minFilter, b));
        e.texParameteri(e.TEXTURE_2D, e.TEXTURE_MAG_FILTER, (0, l.glFilter)(e, this._magFilter, -1));
        e.texParameteri(e.TEXTURE_2D, e.TEXTURE_WRAP_S, this._wrapS);
        e.texParameteri(e.TEXTURE_2D, e.TEXTURE_WRAP_T, this._wrapT);
        var f = this._device.ext("EXT_texture_filter_anisotropic");
        if (f) {
          e.texParameteri(e.TEXTURE_2D, f.TEXTURE_MAX_ANISOTROPY_EXT, this._anisotropy);
        }
      };
      return e;
    }(k.default);
    d.default = j;
    b.exports = d.default;
  }, {
    "./enums": 279,
    "./misc": 283,
    "./texture": 289
  }],
  288: [function (c, b, d) {
    "use strict";

    d.__esModule = true;
    d.default = undefined;
    var e;
    var k = (e = c("./texture")) && e.__esModule ? e : {
      default: e
    };
    var l = c("./enums");
    var g = c("./misc");
    function h(a, b) {
      return (h = Object.setPrototypeOf || function (c, a) {
        c.__proto__ = a;
        return c;
      })(a, b);
    }
    var j = function (i) {
      var a;
      var b;
      function e(b, a) {
        var c;
        var f = (c = i.call(this, b) || this)._device._gl;
        c._target = f.TEXTURE_CUBE_MAP;
        c._glID = f.createTexture();
        c.update(a);
        return c;
      }
      b = i;
      (a = e).prototype = Object.create(b.prototype);
      a.prototype.constructor = a;
      h(a, b);
      var f = e.prototype;
      f.update = function (d) {
        var a = this._device._gl;
        var b = this._genMipmaps;
        if (d) {
          if (d.width !== undefined) {
            this._width = d.width;
          }
          if (d.height !== undefined) {
            this._height = d.height;
          }
          if (d.anisotropy !== undefined) {
            this._anisotropy = d.anisotropy;
          }
          if (d.minFilter !== undefined) {
            this._minFilter = d.minFilter;
          }
          if (d.magFilter !== undefined) {
            this._magFilter = d.magFilter;
          }
          if (d.mipFilter !== undefined) {
            this._mipFilter = d.mipFilter;
          }
          if (d.wrapS !== undefined) {
            this._wrapS = d.wrapS;
          }
          if (d.wrapT !== undefined) {
            this._wrapT = d.wrapT;
          }
          if (d.format !== undefined) {
            this._format = d.format;
            this._compressed = this._format >= l.enums.TEXTURE_FMT_RGB_DXT1 && this._format <= l.enums.TEXTURE_FMT_RGBA_PVRTC_4BPPV1 || this._format >= l.enums.TEXTURE_FMT_RGB_ETC2 && this._format <= l.enums.TEXTURE_FMT_RGBA_ETC2 || this._format >= l.enums.TEXTURE_FMT_RGBA_ASTC_4X4 && this._format <= l.enums.TEXTURE_FMT_SRGBA_ASTC_12X12;
          }
          if (d.genMipmaps !== undefined) {
            this._genMipmaps = d.genMipmaps;
            b = d.genMipmaps;
          }
          if (d.images !== undefined && d.images.length > 1) {
            b = false;
            d.width;
            d.height;
            d.width;
            d.images.length;
          }
        }
        if (!((0, g.isPow2)(this._width) && (0, g.isPow2)(this._height))) {
          b = false;
        }
        a.activeTexture(a.TEXTURE0);
        a.bindTexture(a.TEXTURE_CUBE_MAP, this._glID);
        if (d.images !== undefined && d.images.length > 0) {
          this._setMipmap(d.images, d.flipY, d.premultiplyAlpha);
          if (d.images.length > 1) {
            this._genMipmaps = true;
          }
        }
        if (b) {
          a.hint(a.GENERATE_MIPMAP_HINT, a.NICEST);
          a.generateMipmap(a.TEXTURE_CUBE_MAP);
          this._genMipmaps = true;
        }
        this._setTexInfo();
        this._device._restoreTexture(0);
      };
      f.updateSubImage = function (d) {
        var a = this._device._gl;
        var b = (0, l.glTextureFmt)(this._format);
        a.activeTexture(a.TEXTURE0);
        a.bindTexture(a.TEXTURE_CUBE_MAP, this._glID);
        this._setSubImage(b, d);
        this._device._restoreTexture(0);
      };
      f.updateImage = function (d) {
        var a = this._device._gl;
        var b = (0, l.glTextureFmt)(this._format);
        a.activeTexture(a.TEXTURE0);
        a.bindTexture(a.TEXTURE_CUBE_MAP, this._glID);
        this._setImage(b, d);
        this._device._restoreTexture(0);
      };
      f._setSubImage = function (a, b) {
        var c = this._device._gl;
        var d = b.flipY;
        var e = b.premultiplyAlpha;
        var f = b.faceIndex;
        var g = b.image;
        if (d === undefined) {
          c.pixelStorei(c.UNPACK_FLIP_Y_WEBGL, false);
        } else {
          c.pixelStorei(c.UNPACK_FLIP_Y_WEBGL, d);
        }
        if (e === undefined) {
          c.pixelStorei(c.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
        } else {
          c.pixelStorei(c.UNPACK_PREMULTIPLY_ALPHA_WEBGL, e);
        }
        if (!g || ArrayBuffer.isView(g) || g instanceof ArrayBuffer) {
          if (this._compressed) {
            c.compressedTexSubImage2D(c.TEXTURE_CUBE_MAP_POSITIVE_X + f, b.level, b.x, b.y, b.width, b.height, a.format, g);
          } else {
            c.texSubImage2D(c.TEXTURE_CUBE_MAP_POSITIVE_X + f, b.level, b.x, b.y, b.width, b.height, a.format, a.pixelType, g);
          }
        } else {
          c.texSubImage2D(c.TEXTURE_CUBE_MAP_POSITIVE_X + f, b.level, b.x, b.y, a.format, a.pixelType, g);
        }
      };
      f._setImage = function (a, b) {
        var c = this._device._gl;
        var d = b.flipY;
        var e = b.premultiplyAlpha;
        var f = b.faceIndex;
        var g = b.image;
        if (d === undefined) {
          c.pixelStorei(c.UNPACK_FLIP_Y_WEBGL, false);
        } else {
          c.pixelStorei(c.UNPACK_FLIP_Y_WEBGL, d);
        }
        if (e === undefined) {
          c.pixelStorei(c.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
        } else {
          c.pixelStorei(c.UNPACK_PREMULTIPLY_ALPHA_WEBGL, e);
        }
        if (!g || ArrayBuffer.isView(g) || g instanceof ArrayBuffer) {
          if (this._compressed) {
            c.compressedTexImage2D(c.TEXTURE_CUBE_MAP_POSITIVE_X + f, b.level, a.internalFormat, b.width, b.height, 0, g);
          } else {
            c.texImage2D(c.TEXTURE_CUBE_MAP_POSITIVE_X + f, b.level, a.internalFormat, b.width, b.height, 0, a.format, a.pixelType, g);
          }
        } else {
          c.texImage2D(c.TEXTURE_CUBE_MAP_POSITIVE_X + f, b.level, a.internalFormat, a.format, a.pixelType, g);
        }
      };
      f._setMipmap = function (a, b, c) {
        for (var d = (0, l.glTextureFmt)(this._format), e = {
            width: this._width,
            height: this._height,
            faceIndex: 0,
            flipY: b,
            premultiplyAlpha: c,
            level: 0,
            image: null
          }, f = 0; f < a.length; ++f) {
          var g = a[f];
          e.level = f;
          e.width = this._width >> f;
          e.height = this._height >> f;
          for (var h = 0; h < 6; ++h) {
            e.faceIndex = h;
            e.image = g[h];
            this._setImage(d, e);
          }
        }
      };
      f._setTexInfo = function () {
        var e = this._device._gl;
        var a = (0, g.isPow2)(this._width) && (0, g.isPow2)(this._height);
        if (!(a || this._wrapS === l.enums.WRAP_CLAMP && this._wrapT === l.enums.WRAP_CLAMP)) {
          this._wrapS = l.enums.WRAP_CLAMP;
          this._wrapT = l.enums.WRAP_CLAMP;
        }
        var b = this._genMipmaps ? this._mipFilter : -1;
        if (!(a || b === -1)) {
          b = -1;
        }
        e.texParameteri(e.TEXTURE_CUBE_MAP, e.TEXTURE_MIN_FILTER, (0, l.glFilter)(e, this._minFilter, b));
        e.texParameteri(e.TEXTURE_CUBE_MAP, e.TEXTURE_MAG_FILTER, (0, l.glFilter)(e, this._magFilter, -1));
        e.texParameteri(e.TEXTURE_CUBE_MAP, e.TEXTURE_WRAP_S, this._wrapS);
        e.texParameteri(e.TEXTURE_CUBE_MAP, e.TEXTURE_WRAP_T, this._wrapT);
        var f = this._device.ext("EXT_texture_filter_anisotropic");
        if (f) {
          e.texParameteri(e.TEXTURE_CUBE_MAP, f.TEXTURE_MAX_ANISOTROPY_EXT, this._anisotropy);
        }
      };
      return e;
    }(k.default);
    d.default = j;
    b.exports = d.default;
  }, {
    "./enums": 279,
    "./misc": 283,
    "./texture": 289
  }],
  289: [function (g, a, b) {
    "use strict";

    b.__esModule = true;
    b.default = undefined;
    var c = g("./enums");
    var d = 0;
    var h = function () {
      function b(b) {
        this._device = b;
        this._width = 4;
        this._height = 4;
        this._genMipmaps = false;
        this._compressed = false;
        this._anisotropy = 1;
        this._minFilter = c.enums.FILTER_LINEAR;
        this._magFilter = c.enums.FILTER_LINEAR;
        this._mipFilter = c.enums.FILTER_LINEAR;
        this._wrapS = c.enums.WRAP_REPEAT;
        this._wrapT = c.enums.WRAP_REPEAT;
        this._format = c.enums.TEXTURE_FMT_RGBA8;
        this._target = -1;
        this._id = d++;
      }
      b.prototype.destroy = function () {
        if (this._glID !== null) {
          this._device._gl.deleteTexture(this._glID);
          this._device._stats.tex -= this.bytes;
          this._glID = null;
        }
      };
      return b;
    }();
    b.default = h;
    a.exports = b.default;
  }, {
    "./enums": 279
  }],
  290: [function (f, a, b) {
    "use strict";

    function g(e, a) {
      for (var b = 0; b < a.length; b++) {
        var f = a[b];
        f.enumerable = f.enumerable || false;
        f.configurable = true;
        if ("value" in f) {
          f.writable = true;
        }
        Object.defineProperty(e, f.key, f);
      }
    }
    b.__esModule = true;
    b.default = undefined;
    f("./enums");
    var c = function () {
      function d(e, a, b, c) {
        this._device = e;
        this._format = a;
        this._usage = b;
        this._bytesPerVertex = this._format._bytes;
        this._bytes = c.byteLength;
        this._numVertices = this._bytes / this._bytesPerVertex;
        this._needExpandDataStore = true;
        this._glID = e._gl.createBuffer();
        this.update(0, c);
        e._stats.vb += this._bytes;
      }
      var a;
      var e;
      var h = d.prototype;
      h.destroy = function () {
        if (this._glID !== -1) {
          this._device._gl.deleteBuffer(this._glID);
          this._device._stats.vb -= this.bytes;
          this._glID = -1;
        }
      };
      h.update = function (e, a) {
        if (this._glID !== -1 && a.byteLength !== 0) {
          if (e + a.byteLength > this._bytes) {
            if (e) {
              return;
            }
            this._needExpandDataStore = true;
            this._bytes = e + a.byteLength;
            this._numVertices = this._bytes / this._bytesPerVertex;
          }
          var b = this._device._gl;
          var c = this._usage;
          b.bindBuffer(b.ARRAY_BUFFER, this._glID);
          if (this._needExpandDataStore) {
            b.bufferData(b.ARRAY_BUFFER, a, c);
            this._needExpandDataStore = false;
          } else {
            b.bufferSubData(b.ARRAY_BUFFER, e, a);
          }
          b.bindBuffer(b.ARRAY_BUFFER, null);
        }
      };
      h.getFormat = function (b) {
        return this._format.element(b);
      };
      h.setUsage = function (b) {
        this._usage = b;
      };
      a = d;
      if (e = [{
        key: "count",
        get: function () {
          return this._numVertices;
        }
      }]) {
        g(a.prototype, e);
      }
      Object.defineProperty(a, "prototype", {
        writable: false
      });
      return d;
    }();
    b.default = c;
    a.exports = b.default;
  }, {
    "./enums": 279
  }],
  291: [function (a, b, c) {
    "use strict";

    c.__esModule = true;
    c.default = undefined;
    var d;
    var i = a("./enums");
    var f = (d = a("../murmurhash2_gc")) && d.__esModule ? d : {
      default: d
    };
    var g = function () {
      function c(a) {
        this._attr2el = {};
        this._elements = [];
        this._bytes = 0;
        for (var b = "", c = 0, e = a.length; c < e; ++c) {
          var g = a[c];
          var j = {
            name: g.name,
            offset: this._bytes,
            stride: 0,
            stream: -1,
            type: g.type,
            num: g.num,
            normalize: g.normalize !== undefined && g.normalize,
            bytes: g.num * (0, i.attrTypeBytes)(g.type)
          };
          this._attr2el[j.name] = j;
          this._elements.push(j);
          this._bytes += j.bytes;
          b += j.name + ":" + j.num + ":" + j.type + ":" + j.normalize;
        }
        for (var l = 0, o = this._elements.length; l < o; ++l) {
          this._elements[l].stride = this._bytes;
        }
        this._hash = (0, f.default)(b, 666);
      }
      var a = c.prototype;
      a.element = function (b) {
        return this._attr2el[b];
      };
      a.getHash = function () {
        return this._hash;
      };
      return c;
    }();
    c.default = g;
    b.exports = c.default;
  }, {
    "../murmurhash2_gc": 300,
    "./enums": 279
  }],
  292: [function (e, a, b) {
    "use strict";

    b.__esModule = true;
    b.default = undefined;
    var c = function () {
      function b(d, a) {
        this._cursor = 0;
        this._data = Array(a);
        for (var b = 0; b < a; ++b) {
          this._data[b] = d();
        }
      }
      b.prototype.request = function () {
        var b = this._data[this._cursor];
        this._cursor = (this._cursor + 1) % this._data.length;
        return b;
      };
      return b;
    }();
    b.default = c;
    a.exports = b.default;
  }, {}],
  293: [function (a, b, c) {
    "use strict";

    c.__esModule = true;
    c.default = undefined;
    var d;
    var i = (d = a("./timsort")) && d.__esModule ? d : {
      default: d
    };
    function f(e, a) {
      for (var b = 0; b < a.length; b++) {
        var f = a[b];
        f.enumerable = f.enumerable || false;
        f.configurable = true;
        if ("value" in f) {
          f.writable = true;
        }
        Object.defineProperty(e, f.key, f);
      }
    }
    var g = function () {
      function e(b) {
        this._count = 0;
        this._data = Array(b);
      }
      var a;
      var g;
      var h = e.prototype;
      h._resize = function (c) {
        if (c > this._data.length) {
          for (var a = this._data.length; a < c; ++a) {
            this._data[a] = undefined;
          }
        }
      };
      h.reset = function () {
        for (var b = 0; b < this._count; ++b) {
          this._data[b] = undefined;
        }
        this._count = 0;
      };
      h.push = function (b) {
        if (this._count >= this._data.length) {
          this._resize(this._data.length * 2);
        }
        this._data[this._count] = b;
        ++this._count;
      };
      h.pop = function () {
        --this._count;
        if (this._count < 0) {
          this._count = 0;
        }
        var b = this._data[this._count];
        this._data[this._count] = undefined;
        return b;
      };
      h.fastRemove = function (c) {
        if (!(c >= this._count || c < 0)) {
          var a = this._count - 1;
          this._data[c] = this._data[a];
          this._data[a] = undefined;
          this._count -= 1;
        }
      };
      h.indexOf = function (b) {
        return this._data.indexOf(b);
      };
      h.sort = function (b) {
        return (0, i.default)(this._data, 0, this._count, b);
      };
      a = e;
      if (g = [{
        key: "length",
        get: function () {
          return this._count;
        }
      }, {
        key: "data",
        get: function () {
          return this._data;
        }
      }]) {
        f(a.prototype, g);
      }
      Object.defineProperty(a, "prototype", {
        writable: false
      });
      return e;
    }();
    c.default = g;
    b.exports = c.default;
  }, {
    "./timsort": 298
  }],
  294: [function (k, b, d) {
    "use strict";

    d.__esModule = true;
    d.TypedArrayPool = d.RecyclePool = d.Pool = d.LinkedArray = d.FixedArray = d.CircularPool = undefined;
    var e = j(k("./circular-pool"));
    d.CircularPool = e.default;
    var f = j(k("./fixed-array"));
    d.FixedArray = f.default;
    var g = j(k("./linked-array"));
    d.LinkedArray = g.default;
    var h = j(k("./pool"));
    d.Pool = h.default;
    var i = j(k("./recycle-pool"));
    d.RecyclePool = i.default;
    var a = j(k("./typed-array-pool"));
    function j(b) {
      if (b && b.__esModule) {
        return b;
      } else {
        return {
          default: b
        };
      }
    }
    d.TypedArrayPool = a.default;
  }, {
    "./circular-pool": 292,
    "./fixed-array": 293,
    "./linked-array": 295,
    "./pool": 296,
    "./recycle-pool": 297,
    "./typed-array-pool": 299
  }],
  295: [function (a, b, c) {
    "use strict";

    c.__esModule = true;
    c.default = undefined;
    var d;
    var i = (d = a("./pool")) && d.__esModule ? d : {
      default: d
    };
    function f(e, a) {
      for (var b = 0; b < a.length; b++) {
        var f = a[b];
        f.enumerable = f.enumerable || false;
        f.configurable = true;
        if ("value" in f) {
          f.writable = true;
        }
        Object.defineProperty(e, f.key, f);
      }
    }
    var g = function () {
      function e(c, a) {
        this._fn = c;
        this._count = 0;
        this._head = null;
        this._tail = null;
        this._pool = new i.default(c, a);
      }
      var a;
      var g;
      var h = e.prototype;
      h.add = function () {
        var b = this._pool.alloc();
        if (this._tail) {
          this._tail._next = b;
          b._prev = this._tail;
        } else {
          this._head = b;
        }
        this._tail = b;
        this._count += 1;
        return b;
      };
      h.remove = function (b) {
        if (b._prev) {
          b._prev._next = b._next;
        } else {
          this._head = b._next;
        }
        if (b._next) {
          b._next._prev = b._prev;
        } else {
          this._tail = b._prev;
        }
        b._next = null;
        b._prev = null;
        this._pool.free(b);
        this._count -= 1;
      };
      h.forEach = function (f, g) {
        var b = this._head;
        if (b) {
          if (g) {
            f = f.bind(g);
          }
          for (var h = 0, i = b; b;) {
            i = b._next;
            f(b, h, this);
            b = i;
            ++h;
          }
        }
      };
      a = e;
      if (g = [{
        key: "head",
        get: function () {
          return this._head;
        }
      }, {
        key: "tail",
        get: function () {
          return this._tail;
        }
      }, {
        key: "length",
        get: function () {
          return this._count;
        }
      }]) {
        f(a.prototype, g);
      }
      Object.defineProperty(a, "prototype", {
        writable: false
      });
      return e;
    }();
    c.default = g;
    b.exports = c.default;
  }, {
    "./pool": 296
  }],
  296: [function (e, a, b) {
    "use strict";

    b.__esModule = true;
    b.default = undefined;
    var c = function () {
      function c(d, a) {
        this._fn = d;
        this._idx = a - 1;
        this._frees = Array(a);
        for (var b = 0; b < a; ++b) {
          this._frees[b] = d();
        }
      }
      var a = c.prototype;
      a._expand = function (g) {
        var a = this._frees;
        this._frees = Array(g);
        for (var b = g - a.length, c = 0; c < b; ++c) {
          this._frees[c] = this._fn();
        }
        for (var h = b, i = 0; h < g; ++h, ++i) {
          this._frees[h] = a[i];
        }
        this._idx += b;
      };
      a.alloc = function () {
        if (this._idx < 0) {
          this._expand(Math.round(this._frees.length * 1.2) + 1);
        }
        var b = this._frees[this._idx];
        this._frees[this._idx] = null;
        --this._idx;
        return b;
      };
      a.free = function (b) {
        ++this._idx;
        this._frees[this._idx] = b;
      };
      a.clear = function (c) {
        for (var a = 0; a <= this._idx; a++) {
          if (c) {
            c(this._frees[a]);
          }
        }
        this._frees.length = 0;
        this._idx = -1;
      };
      return c;
    }();
    b.default = c;
    a.exports = b.default;
  }, {}],
  297: [function (a, b, c) {
    "use strict";

    c.__esModule = true;
    c.default = undefined;
    var d;
    var i = (d = a("./timsort")) && d.__esModule ? d : {
      default: d
    };
    function f(e, a) {
      for (var b = 0; b < a.length; b++) {
        var f = a[b];
        f.enumerable = f.enumerable || false;
        f.configurable = true;
        if ("value" in f) {
          f.writable = true;
        }
        Object.defineProperty(e, f.key, f);
      }
    }
    var g = function () {
      function e(d, a) {
        this._fn = d;
        this._count = 0;
        this._data = Array(a);
        for (var b = 0; b < a; ++b) {
          this._data[b] = d();
        }
      }
      var a;
      var g;
      var h = e.prototype;
      h.reset = function () {
        this._count = 0;
      };
      h.resize = function (c) {
        if (c > this._data.length) {
          for (var a = this._data.length; a < c; ++a) {
            this._data[a] = this._fn();
          }
        }
      };
      h.add = function () {
        if (this._count >= this._data.length) {
          this.resize(this._data.length * 2);
        }
        return this._data[this._count++];
      };
      h.remove = function (d) {
        if (!(d >= this._count)) {
          var a = this._count - 1;
          var b = this._data[d];
          this._data[d] = this._data[a];
          this._data[a] = b;
          this._count -= 1;
        }
      };
      h.sort = function (b) {
        return (0, i.default)(this._data, 0, this._count, b);
      };
      a = e;
      if (g = [{
        key: "length",
        get: function () {
          return this._count;
        }
      }, {
        key: "data",
        get: function () {
          return this._data;
        }
      }]) {
        f(a.prototype, g);
      }
      Object.defineProperty(a, "prototype", {
        writable: false
      });
      return e;
    }();
    c.default = g;
    cc.RecyclePool = g;
    b.exports = c.default;
  }, {
    "./timsort": 298
  }],
  298: [function (p, b, g) {
    "use strict";

    g.__esModule = true;
    g.default = function (f, b, i, j) {
      if (!Array.isArray(f)) {
        throw new TypeError(cc.debug.getError(665905));
      }
      if (b === undefined) {
        b = 0;
      }
      if (i === undefined) {
        i = f.length;
      }
      if (j === undefined) {
        j = a;
      }
      var l = i - b;
      if (!(l < 2)) {
        var o = 0;
        if (l < e) {
          r(f, b, i, b + (o = c(f, b, i, j)), j);
          return;
        }
        var s = new d(f, j);
        var q = n(l);
        do {
          if ((o = c(f, b, i, j)) < q) {
            var t = l;
            if (t > q) {
              t = q;
            }
            r(f, b, b + t, b + o, j);
            o = t;
          }
          s.pushRun(b, o);
          s.mergeRuns();
          l -= o;
          b += o;
        } while (l !== 0);
        s.forceMergeRuns();
      }
    };
    var e = 32;
    var u = 7;
    var i = 256;
    var j = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000];
    function k(b) {
      if (b < 100000) {
        if (b < 100) {
          if (b < 10) {
            return 0;
          } else {
            return 1;
          }
        } else if (b < 10000) {
          if (b < 1000) {
            return 2;
          } else {
            return 3;
          }
        } else {
          return 4;
        }
      } else if (b < 10000000) {
        if (b < 1000000) {
          return 5;
        } else {
          return 6;
        }
      } else if (b < 1000000000) {
        if (b < 100000000) {
          return 7;
        } else {
          return 8;
        }
      } else {
        return 9;
      }
    }
    function a(a, c) {
      if (a === c) {
        return 0;
      }
      if (~~a === a && ~~c === c) {
        if (a === 0 || c === 0) {
          if (a < c) {
            return -1;
          } else {
            return 1;
          }
        }
        if (a < 0 || c < 0) {
          if (c >= 0) {
            return -1;
          }
          if (a >= 0) {
            return 1;
          }
          a = -a;
          c = -c;
        }
        var e = k(a);
        var f = k(c);
        var g = 0;
        if (e < f) {
          a *= j[f - e - 1];
          c /= 10;
          g = -1;
        } else if (e > f) {
          c *= j[e - f - 1];
          a /= 10;
          g = 1;
        }
        if (a === c) {
          return g;
        } else if (a < c) {
          return -1;
        } else {
          return 1;
        }
      }
      var l = a + "";
      var i = c + "";
      if (l === i) {
        return 0;
      } else if (l < i) {
        return -1;
      } else {
        return 1;
      }
    }
    function n(c) {
      for (var d = 0; c >= e;) {
        d |= c & 1;
        c >>= 1;
      }
      return c + d;
    }
    function c(f, a, b, c) {
      var d = a + 1;
      if (d === b) {
        return 1;
      }
      if (c(f[d++], f[a]) < 0) {
        for (; d < b && c(f[d], f[d - 1]) < 0;) {
          d++;
        }
        l(f, a, d);
      } else {
        for (; d < b && c(f[d], f[d - 1]) >= 0;) {
          d++;
        }
      }
      return d - a;
    }
    function l(e, a, f) {
      for (f--; a < f;) {
        var g = e[a];
        e[a++] = e[f];
        e[f--] = g;
      }
    }
    function r(a, b, c, d, e) {
      for (d === b && d++; d < c; d++) {
        for (var g = a[d], l = b, n = d; l < n;) {
          var o = l + n >>> 1;
          if (e(g, a[o]) < 0) {
            n = o;
          } else {
            l = o + 1;
          }
        }
        var p = d - l;
        switch (p) {
          case 3:
            a[l + 3] = a[l + 2];
          case 2:
            a[l + 2] = a[l + 1];
          case 1:
            a[l + 1] = a[l];
            break;
          default:
            for (; p > 0;) {
              a[l + p] = a[l + p - 1];
              p--;
            }
        }
        a[l] = g;
      }
    }
    function v(a, b, c, d, e, f) {
      var g = 0;
      var h = 0;
      var i = 1;
      if (f(a, b[c + e]) > 0) {
        for (h = d - e; i < h && f(a, b[c + e + i]) > 0;) {
          g = i;
          if ((i = 1 + (i << 1)) <= 0) {
            i = h;
          }
        }
        if (i > h) {
          i = h;
        }
        g += e;
        i += e;
      } else {
        for (h = e + 1; i < h && f(a, b[c + e - i]) <= 0;) {
          g = i;
          if ((i = 1 + (i << 1)) <= 0) {
            i = h;
          }
        }
        if (i > h) {
          i = h;
        }
        var o = g;
        g = e - i;
        i = e - o;
      }
      for (g++; g < i;) {
        var n = g + (i - g >>> 1);
        if (f(a, b[c + n]) > 0) {
          g = n + 1;
        } else {
          i = n;
        }
      }
      return i;
    }
    function q(a, b, c, d, e, f) {
      var g = 0;
      var h = 0;
      var i = 1;
      if (f(a, b[c + e]) < 0) {
        for (h = e + 1; i < h && f(a, b[c + e - i]) < 0;) {
          g = i;
          if ((i = 1 + (i << 1)) <= 0) {
            i = h;
          }
        }
        if (i > h) {
          i = h;
        }
        var o = g;
        g = e - i;
        i = e - o;
      } else {
        for (h = d - e; i < h && f(a, b[c + e + i]) >= 0;) {
          g = i;
          if ((i = 1 + (i << 1)) <= 0) {
            i = h;
          }
        }
        if (i > h) {
          i = h;
        }
        g += e;
        i += e;
      }
      for (g++; g < i;) {
        var n = g + (i - g >>> 1);
        if (f(a, b[c + n]) < 0) {
          i = n;
        } else {
          g = n + 1;
        }
      }
      return i;
    }
    var d = function () {
      function c(c, a) {
        this.array = c;
        this.compare = a;
        this.minGallop = u;
        this.length = c.length;
        this.tmpStorageLength = i;
        if (this.length < i * 2) {
          this.tmpStorageLength = this.length >>> 1;
        }
        this.tmp = Array(this.tmpStorageLength);
        this.stackLength = this.length < 120 ? 5 : this.length < 1542 ? 10 : this.length < 119151 ? 19 : 40;
        this.runStart = Array(this.stackLength);
        this.runLength = Array(this.stackLength);
        this.stackSize = 0;
      }
      var a = c.prototype;
      a.pushRun = function (c, a) {
        this.runStart[this.stackSize] = c;
        this.runLength[this.stackSize] = a;
        this.stackSize += 1;
      };
      a.mergeRuns = function () {
        for (; this.stackSize > 1;) {
          var b = this.stackSize - 2;
          if (b >= 1 && this.runLength[b - 1] <= this.runLength[b] + this.runLength[b + 1] || b >= 2 && this.runLength[b - 2] <= this.runLength[b] + this.runLength[b - 1]) {
            if (this.runLength[b - 1] < this.runLength[b + 1]) {
              b--;
            }
          } else if (this.runLength[b] > this.runLength[b + 1]) {
            break;
          }
          this.mergeAt(b);
        }
      };
      a.forceMergeRuns = function () {
        for (; this.stackSize > 1;) {
          var b = this.stackSize - 2;
          if (b > 0 && this.runLength[b - 1] < this.runLength[b + 1]) {
            b--;
          }
          this.mergeAt(b);
        }
      };
      a.mergeAt = function (a) {
        var b = this.compare;
        var c = this.array;
        var d = this.runStart[a];
        var e = this.runLength[a];
        var k = this.runStart[a + 1];
        var h = this.runLength[a + 1];
        this.runLength[a] = e + h;
        if (a === this.stackSize - 3) {
          this.runStart[a + 1] = this.runStart[a + 2];
          this.runLength[a + 1] = this.runLength[a + 2];
        }
        this.stackSize--;
        var l = q(c[k], c, d, e, 0, b);
        d += l;
        if ((e -= l) != 0 && (h = v(c[d + e - 1], c, k, h, h - 1, b)) !== 0) {
          if (e <= h) {
            this.mergeLow(d, e, k, h);
          } else {
            this.mergeHigh(d, e, k, h);
          }
        }
      };
      a.mergeLow = function (c, b, d, e) {
        var f = this.compare;
        var g = this.array;
        var h = this.tmp;
        var a = 0;
        for (a = 0; a < b; a++) {
          h[a] = g[c + a];
        }
        var i = 0;
        var k = d;
        var l = c;
        g[l++] = g[k++];
        if (--e != 0) {
          if (b !== 1) {
            for (var n = this.minGallop;;) {
              var p = 0;
              var r = 0;
              var s = false;
              do {
                if (f(g[k], h[i]) < 0) {
                  g[l++] = g[k++];
                  r++;
                  p = 0;
                  if (--e == 0) {
                    s = true;
                    break;
                  }
                } else {
                  g[l++] = h[i++];
                  p++;
                  r = 0;
                  if (--b == 1) {
                    s = true;
                    break;
                  }
                }
              } while ((p | r) < n);
              if (s) {
                break;
              }
              do {
                if ((p = q(g[k], h, i, b, 0, f)) !== 0) {
                  for (a = 0; a < p; a++) {
                    g[l + a] = h[i + a];
                  }
                  l += p;
                  i += p;
                  if ((b -= p) <= 1) {
                    s = true;
                    break;
                  }
                }
                g[l++] = g[k++];
                if (--e == 0) {
                  s = true;
                  break;
                }
                if ((r = v(h[i], g, k, e, 0, f)) !== 0) {
                  for (a = 0; a < r; a++) {
                    g[l + a] = g[k + a];
                  }
                  l += r;
                  k += r;
                  if ((e -= r) == 0) {
                    s = true;
                    break;
                  }
                }
                g[l++] = h[i++];
                if (--b == 1) {
                  s = true;
                  break;
                }
                n--;
              } while (p >= u || r >= u);
              if (s) {
                break;
              }
              if (n < 0) {
                n = 0;
              }
              n += 2;
            }
            this.minGallop = n;
            if (n < 1) {
              this.minGallop = 1;
            }
            if (b === 1) {
              for (a = 0; a < e; a++) {
                g[l + a] = g[k + a];
              }
              g[l + e] = h[i];
            } else {
              if (b === 0) {
                throw Error(cc.debug.getError(665903));
              }
              for (a = 0; a < b; a++) {
                g[l + a] = h[i + a];
              }
            }
          } else {
            for (a = 0; a < e; a++) {
              g[l + a] = g[k + a];
            }
            g[l + e] = h[i];
          }
        } else {
          for (a = 0; a < b; a++) {
            g[l + a] = h[i + a];
          }
        }
      };
      a.mergeHigh = function (c, b, d, e) {
        var f = this.compare;
        var g = this.array;
        var h = this.tmp;
        var a = 0;
        for (a = 0; a < e; a++) {
          h[a] = g[d + a];
        }
        var i = c + b - 1;
        var k = e - 1;
        var l = d + e - 1;
        var m = 0;
        var n = 0;
        g[l--] = g[i--];
        if (--b != 0) {
          if (e !== 1) {
            for (var p = this.minGallop;;) {
              var s = 0;
              var t = 0;
              var y = false;
              do {
                if (f(h[k], g[i]) < 0) {
                  g[l--] = g[i--];
                  s++;
                  t = 0;
                  if (--b == 0) {
                    y = true;
                    break;
                  }
                } else {
                  g[l--] = h[k--];
                  t++;
                  s = 0;
                  if (--e == 1) {
                    y = true;
                    break;
                  }
                }
              } while ((s | t) < p);
              if (y) {
                break;
              }
              do {
                if ((s = b - q(h[k], g, c, b, b - 1, f)) != 0) {
                  b -= s;
                  n = 1 + (l -= s);
                  m = 1 + (i -= s);
                  a = s - 1;
                  for (; a >= 0; a--) {
                    g[n + a] = g[m + a];
                  }
                  if (b === 0) {
                    y = true;
                    break;
                  }
                }
                g[l--] = h[k--];
                if (--e == 1) {
                  y = true;
                  break;
                }
                if ((t = e - v(g[i], h, 0, e, e - 1, f)) != 0) {
                  e -= t;
                  n = 1 + (l -= t);
                  m = 1 + (k -= t);
                  a = 0;
                  for (; a < t; a++) {
                    g[n + a] = h[m + a];
                  }
                  if (e <= 1) {
                    y = true;
                    break;
                  }
                }
                g[l--] = g[i--];
                if (--b == 0) {
                  y = true;
                  break;
                }
                p--;
              } while (s >= u || t >= u);
              if (y) {
                break;
              }
              if (p < 0) {
                p = 0;
              }
              p += 2;
            }
            this.minGallop = p;
            if (p < 1) {
              this.minGallop = 1;
            }
            if (e === 1) {
              n = 1 + (l -= b);
              m = 1 + (i -= b);
              a = b - 1;
              for (; a >= 0; a--) {
                g[n + a] = g[m + a];
              }
              g[l] = h[k];
            } else {
              if (e === 0) {
                throw Error(cc.debug.getError(665904));
              }
              m = l - (e - 1);
              a = 0;
              for (; a < e; a++) {
                g[m + a] = h[a];
              }
            }
          } else {
            n = 1 + (l -= b);
            m = 1 + (i -= b);
            a = b - 1;
            for (; a >= 0; a--) {
              g[n + a] = g[m + a];
            }
            g[l] = h[k];
          }
        } else {
          m = l - (e - 1);
          a = 0;
          m = l - (e - 1);
          a = 0;
          for (; a < e; a++) {
            g[m + a] = h[a];
          }
        }
      };
      return c;
    }();
    b.exports = g.default;
  }, {}],
  299: [function (c, b, d) {
    "use strict";

    d.__esModule = true;
    d.default = undefined;
    for (var e = [,,,,,,,,], f = 0; f < 8; ++f) {
      e[f] = [];
    }
    function k(c) {
      for (var a = 16; a <= 1 << 28; a *= 16) {
        if (c <= a) {
          return a;
        }
      }
      return 0;
    }
    function h(d) {
      var e;
      var f;
      e = (d > 65535) << 4;
      e |= f = ((d >>>= e) > 255) << 3;
      e |= f = ((d >>>= f) > 15) << 2;
      return (e |= f = ((d >>>= f) > 3) << 1) | (d >>>= f) >> 1;
    }
    function j(d) {
      var a = k(d);
      var b = e[h(a) >> 2];
      if (b.length > 0) {
        return b.pop();
      } else {
        return new ArrayBuffer(a);
      }
    }
    var a = {
      alloc_int8: function (a) {
        var b = new Int8Array(j(a), 0, a);
        if (b.length !== a) {
          return b.subarray(0, a);
        } else {
          return b;
        }
      },
      alloc_uint8: function (a) {
        var b = new Uint8Array(j(a), 0, a);
        if (b.length !== a) {
          return b.subarray(0, a);
        } else {
          return b;
        }
      },
      alloc_int16: function (a) {
        var b = new Int16Array(j(a * 2), 0, a);
        if (b.length !== a) {
          return b.subarray(0, a);
        } else {
          return b;
        }
      },
      alloc_uint16: function (a) {
        var b = new Uint16Array(j(a * 2), 0, a);
        if (b.length !== a) {
          return b.subarray(0, a);
        } else {
          return b;
        }
      },
      alloc_int32: function (a) {
        var b = new Int32Array(j(a * 4), 0, a);
        if (b.length !== a) {
          return b.subarray(0, a);
        } else {
          return b;
        }
      },
      alloc_uint32: function (a) {
        var b = new Uint32Array(j(a * 4), 0, a);
        if (b.length !== a) {
          return b.subarray(0, a);
        } else {
          return b;
        }
      },
      alloc_float32: function (a) {
        var b = new Float32Array(j(a * 4), 0, a);
        if (b.length !== a) {
          return b.subarray(0, a);
        } else {
          return b;
        }
      },
      alloc_float64: function (a) {
        var b = new Float64Array(j(a * 8), 0, a);
        if (b.length !== a) {
          return b.subarray(0, a);
        } else {
          return b;
        }
      },
      alloc_dataview: function (a) {
        var b = new DataView(j(a), 0, a);
        if (b.length !== a) {
          return b.subarray(0, a);
        } else {
          return b;
        }
      },
      free: function (c) {
        var a;
        a = c.buffer;
        e[h(a.byteLength) >> 2].push(a);
      },
      reset: function () {
        for (var c = [,,,,,,,,], a = 0; a < 8; ++a) {
          c[a] = [];
        }
      }
    };
    d.default = a;
    b.exports = d.default;
  }, {}],
  300: [function (d, a, b) {
    "use strict";

    b.__esModule = true;
    b.default = function (g, a) {
      for (var b, h = g.length, i = a ^ h, j = 0; h >= 4;) {
        b = ((b = g.charCodeAt(j) & 255 | (g.charCodeAt(++j) & 255) << 8 | (g.charCodeAt(++j) & 255) << 16 | (g.charCodeAt(++j) & 255) << 24) & 65535) * 1540483477 + (((b >>> 16) * 1540483477 & 65535) << 16);
        i = (i & 65535) * 1540483477 + (((i >>> 16) * 1540483477 & 65535) << 16) ^ (b = ((b ^= b >>> 24) & 65535) * 1540483477 + (((b >>> 16) * 1540483477 & 65535) << 16));
        h -= 4;
        ++j;
      }
      switch (h) {
        case 3:
          i ^= (g.charCodeAt(j + 2) & 255) << 16;
        case 2:
          i ^= (g.charCodeAt(j + 1) & 255) << 8;
        case 1:
          i = ((i ^= g.charCodeAt(j) & 255) & 65535) * 1540483477 + (((i >>> 16) * 1540483477 & 65535) << 16);
      }
      i = ((i ^= i >>> 13) & 65535) * 1540483477 + (((i >>> 16) * 1540483477 & 65535) << 16);
      return (i ^= i >>> 15) >>> 0;
    };
    a.exports = b.default;
  }, {}],
  301: [function (l, b, j) {
    "use strict";

    j.__esModule = true;
    j.default = undefined;
    var x = l("../../core/value-types");
    var e = n(l("../core/base-renderer"));
    var k = n(l("../enums"));
    var i = l("../memop");
    function n(b) {
      if (b && b.__esModule) {
        return b;
      } else {
        return {
          default: b
        };
      }
    }
    function q(b) {
      if (b === undefined) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return b;
    }
    function o(c, a) {
      return (o = Object.setPrototypeOf || function (c, a) {
        c.__proto__ = a;
        return c;
      })(c, a);
    }
    var A = new Float32Array(16);
    var s = new Float32Array(16);
    var h = new Float32Array(16);
    var u = new Float32Array(16);
    var f = new Float32Array(4);
    var B = new Float32Array(64);
    var w = [];
    var d = new Float32Array(4);
    var p = new x.Vec4(0, 0, 0, 0);
    var g = new x.Vec3(0, 0, 0);
    var a = new x.Vec3(0, 0, 0);
    var m = new i.RecyclePool(function () {
      return new Float32Array(16);
    }, 8);
    function r(c, a) {
      return c._priority - a._priority;
    }
    var t = function (e) {
      var b;
      var c;
      function i(b, a) {
        var c;
        (c = e.call(this, b, a) || this)._time = new Float32Array(4);
        c._lights = [];
        c._shadowLights = [];
        c._numLights = 0;
        c._defines = {};
        c._registerStage("shadowcast", c._shadowStage.bind(q(c)));
        c._registerStage("opaque", c._opaqueStage.bind(q(c)));
        c._registerStage("transparent", c._transparentStage.bind(q(c)));
        return c;
      }
      c = e;
      (b = i).prototype = Object.create(c.prototype);
      b.prototype.constructor = b;
      o(b, c);
      var n = i.prototype;
      n.reset = function () {
        m.reset();
        e.prototype.reset.call(this);
      };
      n.render = function (a, b) {
        this.reset();
        if (b) {
          this._time[0] += b;
          this._time[1] = b;
          this._time[2]++;
        }
        this._device.setUniform("cc_time", this._time);
        this._updateLights(a);
        for (var c = this._device._gl.canvas, d = 0; d < a._cameras.length; ++d) {
          var e = this._requestView();
          var l = c.width;
          var m = c.height;
          a._cameras.data[d].extractView(e, l, m);
        }
        this._viewPools.sort(r);
        for (var n = 0; n < this._viewPools.length; ++n) {
          var o = this._viewPools.data[n];
          this._render(o, a);
        }
      };
      n.renderCamera = function (a, b) {
        this.reset();
        this._updateLights(b);
        var c = this._device._gl.canvas;
        var d = c.width;
        var e = c.height;
        var f = this._requestView();
        a.extractView(f, d, e);
        this._viewPools.sort(r);
        for (var g = 0; g < this._viewPools.length; ++g) {
          var j = this._viewPools.data[g];
          this._render(j, b);
        }
      };
      n._updateLights = function (f) {
        this._lights.length = 0;
        this._shadowLights.length = 0;
        for (var a = f._lights, b = 0; b < a.length; ++b) {
          var g = a.data[b];
          g.update(this._device);
          if (g.shadowType !== k.default.SHADOW_NONE) {
            if (this._shadowLights.length < 2) {
              this._shadowLights.unshift(g);
            }
            var h = this._requestView();
            g.extractView(h, ["shadowcast"]);
            this._lights.splice(0, 0, g);
          } else {
            this._lights.push(g);
          }
        }
        this._updateLightDefines();
        this._numLights = a._count;
      };
      n._updateLightDefines = function () {
        for (var e = this._defines, a = 0; a < this._lights.length; ++a) {
          var h = this._lights[a];
          var i = "CC_LIGHT_" + a + "_TYPE";
          var j = "CC_SHADOW_" + a + "_TYPE";
          if (e[i] !== h._type) {
            e[i] = h._type;
            this._definesChanged = true;
          }
          if (e[j] !== h._shadowType) {
            e[j] = h._shadowType;
            this._definesChanged = true;
          }
        }
        var k = Math.min(4, this._lights.length);
        if (e.CC_NUM_LIGHTS !== k) {
          e.CC_NUM_LIGHTS = k;
          this._definesChanged = true;
        }
        k = Math.min(4, this._shadowLights.length);
        if (e.CC_NUM_SHADOW_LIGHTS !== k) {
          e.CC_NUM_SHADOW_LIGHTS = k;
          this._definesChanged = true;
        }
      };
      n._submitLightsUniforms = function () {
        var a = this._device;
        if (this._lights.length > 0) {
          for (var b = m.add(), c = m.add(), d = m.add(), e = Math.min(4, this._lights.length), f = 0; f < e; ++f) {
            var g = this._lights[f];
            var l = f * 4;
            d.set(g._colorUniform, l);
            c.set(g._directionUniform, l);
            b.set(g._positionUniform, l);
            b[l + 3] = g._range;
            if (g._type === k.default.LIGHT_SPOT) {
              c[l + 3] = g._spotUniform[0];
              d[l + 3] = g._spotUniform[1];
            } else {
              c[l + 3] = 0;
              d[l + 3] = 0;
            }
          }
          a.setUniform("cc_lightDirection", c);
          a.setUniform("cc_lightColor", d);
          a.setUniform("cc_lightPositionAndRange", b);
        }
      };
      n._submitShadowStageUniforms = function (e) {
        var a = e._shadowLight;
        var b = d;
        b[0] = a.shadowMinDepth;
        b[1] = a.shadowMaxDepth;
        b[2] = a.shadowDepthScale;
        b[3] = a.shadowDarkness;
        this._device.setUniform("cc_shadow_map_lightViewProjMatrix", x.Mat4.toArray(u, e._matViewProj));
        this._device.setUniform("cc_shadow_map_info", b);
        this._device.setUniform("cc_shadow_map_bias", a.shadowBias);
        this._defines.CC_SHADOW_TYPE = a._shadowType;
      };
      n._submitOtherStagesUniforms = function () {
        for (var e = m.add(), a = 0; a < this._shadowLights.length; ++a) {
          var g = this._shadowLights[a];
          var h = w[a];
          if (!h) {
            h = w[a] = new Float32Array(B.buffer, a * 64, 16);
          }
          x.Mat4.toArray(h, g.viewProjMatrix);
          var i = a * 4;
          e[i] = g.shadowMinDepth;
          e[i + 1] = g.shadowMaxDepth;
          e[i + 2] = g._shadowResolution;
          e[i + 3] = g.shadowDarkness;
        }
        this._device.setUniform("cc_shadow_lightViewProjMatrix", B);
        this._device.setUniform("cc_shadow_info", e);
      };
      n._sortItems = function (b) {
        b.sort(function (c, a) {
          if (c.passes.length !== a.passes.length) {
            return c.passes.length - a.passes.length;
          } else {
            return c.sortKey - a.sortKey;
          }
        });
      };
      n._shadowStage = function (e, a) {
        this._submitShadowStageUniforms(e);
        for (var b = 0; b < a.length; ++b) {
          var f = a.data[b];
          if (f.effect.getDefine("CC_CASTING_SHADOW")) {
            this._draw(f);
          }
        }
      };
      n._drawItems = function (a, b) {
        var c = this._shadowLights;
        if (c.length === 0 && this._numLights === 0) {
          for (var d = 0; d < b.length; ++d) {
            var j = b.data[d];
            this._draw(j);
          }
        } else {
          for (var k = 0; k < b.length; ++k) {
            for (var l = b.data[k], m = 0; m < c.length; ++m) {
              this._device.setTexture("cc_shadow_map_" + m, c[m].shadowMap, this._allocTextureUnit());
            }
            this._draw(l);
          }
        }
      };
      n._opaqueStage = function (c, a) {
        c.getPosition(p);
        this._device.setUniform("cc_matView", x.Mat4.toArray(A, c._matView));
        this._device.setUniform("cc_matViewInv", x.Mat4.toArray(s, c._matViewInv));
        this._device.setUniform("cc_matProj", x.Mat4.toArray(h, c._matProj));
        this._device.setUniform("cc_matViewProj", x.Mat4.toArray(u, c._matViewProj));
        this._device.setUniform("cc_cameraPos", x.Vec4.toArray(f, p));
        this._submitLightsUniforms();
        this._submitOtherStagesUniforms();
        this._drawItems(c, a);
      };
      n._transparentStage = function (d, i) {
        d.getPosition(p);
        d.getForward(g);
        this._device.setUniform("cc_matView", x.Mat4.toArray(A, d._matView));
        this._device.setUniform("cc_matViewInv", x.Mat4.toArray(s, d._matViewInv));
        this._device.setUniform("cc_matProj", x.Mat4.toArray(h, d._matProj));
        this._device.setUniform("cc_matViewProj", x.Mat4.toArray(u, d._matViewProj));
        this._device.setUniform("cc_cameraPos", x.Vec4.toArray(f, p));
        this._submitLightsUniforms();
        this._submitOtherStagesUniforms();
        for (var b = 0; b < i.length; ++b) {
          var j = i.data[b];
          j.node.getWorldPosition(a);
          x.Vec3.sub(a, a, p);
          j.sortKey = -x.Vec3.dot(a, g);
        }
        this._sortItems(i);
        this._drawItems(d, i);
      };
      return i;
    }(e.default);
    j.default = t;
    b.exports = j.default;
  }, {
    "../../core/value-types": 251,
    "../core/base-renderer": 271,
    "../enums": 277,
    "../memop": 294
  }],
  302: [function (n, b, g) {
    "use strict";

    g.__esModule = true;
    g.default = undefined;
    var e;
    var s = n("../../core/value-types");
    var j = n("../../core/geom-utils");
    var t = (e = n("../enums")) && e.__esModule ? e : {
      default: e
    };
    function k(e, a) {
      for (var b = 0; b < a.length; b++) {
        var f = a[b];
        f.enumerable = f.enumerable || false;
        f.configurable = true;
        if ("value" in f) {
          f.writable = true;
        }
        Object.defineProperty(e, f.key, f);
      }
    }
    var a = new s.Mat4();
    var m = new s.Mat4();
    var c = new s.Mat4();
    var l = new s.Mat4();
    var o = new s.Mat4();
    var q = new s.Mat4();
    var u = new s.Vec3();
    var d = new s.Vec3();
    var f = function () {
      function e() {
        this._poolID = -1;
        this._node = null;
        this._projection = t.default.PROJ_PERSPECTIVE;
        this._priority = 0;
        this._color = new s.Vec4(0.2, 0.3, 0.47, 1);
        this._depth = 1;
        this._stencil = 0;
        this._clearFlags = t.default.CLEAR_COLOR | t.default.CLEAR_DEPTH;
        this._clearModel = null;
        this._stages = [];
        this._framebuffer = null;
        this._near = 0.01;
        this._far = 1000;
        this._fov = Math.PI / 4;
        this._rect = {
          x: 0,
          y: 0,
          w: 1,
          h: 1
        };
        this._orthoHeight = 10;
        this._cullingMask = 4294967295;
      }
      var b;
      var f;
      var h = e.prototype;
      h.setCullingMask = function (b) {
        this._cullingMask = b;
      };
      h.getNode = function () {
        return this._node;
      };
      h.setNode = function (b) {
        this._node = b;
      };
      h.getType = function () {
        return this._projection;
      };
      h.setType = function (b) {
        this._projection = b;
      };
      h.getPriority = function () {
        return this._priority;
      };
      h.setPriority = function (b) {
        this._priority = b;
      };
      h.getOrthoHeight = function () {
        return this._orthoHeight;
      };
      h.setOrthoHeight = function (b) {
        this._orthoHeight = b;
      };
      h.getFov = function () {
        return this._fov;
      };
      h.setFov = function (b) {
        this._fov = b;
      };
      h.getNear = function () {
        return this._near;
      };
      h.setNear = function (b) {
        this._near = b;
      };
      h.getFar = function () {
        return this._far;
      };
      h.setFar = function (b) {
        this._far = b;
      };
      h.getColor = function (b) {
        return s.Vec4.copy(b, this._color);
      };
      h.setColor = function (e, a, b, c) {
        s.Vec4.set(this._color, e, a, b, c);
      };
      h.getDepth = function () {
        return this._depth;
      };
      h.setDepth = function (b) {
        this._depth = b;
      };
      h.getStencil = function () {
        return this._stencil;
      };
      h.setStencil = function (b) {
        this._stencil = b;
      };
      h.getClearFlags = function () {
        return this._clearFlags;
      };
      h.setClearFlags = function (b) {
        this._clearFlags = b;
      };
      h.getRect = function (b) {
        b.x = this._rect.x;
        b.y = this._rect.y;
        b.w = this._rect.w;
        b.h = this._rect.h;
        return b;
      };
      h.setRect = function (e, a, b, c) {
        this._rect.x = e;
        this._rect.y = a;
        this._rect.w = b;
        this._rect.h = c;
      };
      h.getStages = function () {
        return this._stages;
      };
      h.setStages = function (b) {
        this._stages = b;
      };
      h.getFramebuffer = function () {
        return this._framebuffer;
      };
      h.setFrameBuffer = function (b) {
        this._framebuffer = b;
      };
      h._calcMatrices = function (f, a) {
        this._node.getWorldRT(c);
        s.Mat4.invert(m, c);
        var b = f / a;
        if (this._projection === t.default.PROJ_PERSPECTIVE) {
          s.Mat4.perspective(l, this._fov, b, this._near, this._far);
        } else {
          var d = this._orthoHeight * b;
          var e = this._orthoHeight;
          s.Mat4.ortho(l, -d, d, -e, e, this._near, this._far);
        }
        s.Mat4.mul(o, l, m);
        s.Mat4.invert(q, o);
      };
      h.extractView = function (e, a, f) {
        if (this._framebuffer) {
          a = this._framebuffer._width;
          f = this._framebuffer._height;
        }
        e._priority = this._priority;
        e._rect.x = this._rect.x * a;
        e._rect.y = this._rect.y * f;
        e._rect.w = this._rect.w * a;
        e._rect.h = this._rect.h * f;
        this.getColor(e._color);
        e._depth = this._depth;
        e._stencil = this._stencil;
        e._clearFlags = this._clearFlags;
        e._clearModel = this._clearModel;
        e._stages = this._stages;
        e._framebuffer = this._framebuffer;
        this._calcMatrices(a, f);
        s.Mat4.copy(e._matView, m);
        s.Mat4.copy(e._matViewInv, c);
        s.Mat4.copy(e._matProj, l);
        s.Mat4.copy(e._matViewProj, o);
        s.Mat4.copy(e._matInvViewProj, q);
        e._cullingMask = this._cullingMask;
      };
      h.screenPointToRay = function (f, a, b, e, g) {
        if (!cc.geomUtils) {
          return g;
        }
        g = g || new j.Ray();
        this._calcMatrices(b, e);
        var k = this._rect.x * b;
        var m = this._rect.y * e;
        var c = this._rect.w * b;
        var l = this._rect.h * e;
        s.Vec3.set(d, (f - k) / c * 2 - 1, (a - m) / l * 2 - 1, 1);
        s.Vec3.transformMat4(d, d, q);
        if (this._projection === t.default.PROJ_PERSPECTIVE) {
          this._node.getWorldPosition(u);
        } else {
          s.Vec3.set(u, (f - k) / c * 2 - 1, (a - m) / l * 2 - 1, -1);
          s.Vec3.transformMat4(u, u, q);
        }
        return j.Ray.fromPoints(g, u, d);
      };
      h.screenToWorld = function (d, a, b, e) {
        this._calcMatrices(b, e);
        var f = this._rect.x * b;
        var g = this._rect.y * e;
        var h = this._rect.w * b;
        var i = this._rect.h * e;
        if (this._projection === t.default.PROJ_PERSPECTIVE) {
          s.Vec3.set(d, (a.x - f) / h * 2 - 1, (a.y - g) / i * 2 - 1, 0.9999);
          s.Vec3.transformMat4(d, d, q);
          this._node.getWorldPosition(u);
          s.Vec3.lerp(d, u, d, (0, s.lerp)(this._near / this._far, 1, a.z));
        } else {
          s.Vec3.set(d, (a.x - f) / h * 2 - 1, (a.y - g) / i * 2 - 1, a.z * 2 - 1);
          s.Vec3.transformMat4(d, d, q);
        }
        return d;
      };
      h.worldToScreen = function (c, b, d, e) {
        this._calcMatrices(d, e);
        var f = this._rect.x * d;
        var g = this._rect.y * e;
        var h = this._rect.w * d;
        var a = this._rect.h * e;
        s.Vec3.transformMat4(c, b, o);
        c.x = f + (c.x + 1) * 0.5 * h;
        c.y = g + (c.y + 1) * 0.5 * a;
        c.z = c.z * 0.5 + 0.5;
        return c;
      };
      h.worldMatrixToScreen = function (d, b, c, e) {
        this._calcMatrices(c, e);
        s.Mat4.mul(d, o, b);
        var f = c / 2;
        var g = e / 2;
        s.Mat4.identity(a);
        s.Mat4.transform(a, a, s.Vec3.set(u, f, g, 0));
        s.Mat4.scale(a, a, s.Vec3.set(u, f, g, 1));
        s.Mat4.mul(d, a, d);
        return d;
      };
      b = e;
      if (f = [{
        key: "cullingMask",
        get: function () {
          return this._cullingMask;
        },
        set: function (b) {
          this._cullingMask = b;
        }
      }]) {
        k(b.prototype, f);
      }
      Object.defineProperty(b, "prototype", {
        writable: false
      });
      return e;
    }();
    g.default = f;
    b.exports = g.default;
  }, {
    "../../core/geom-utils": 142,
    "../../core/value-types": 251,
    "../enums": 277
  }],
  303: [function (e, a, b) {
    "use strict";

    b.__esModule = true;
    b.default = undefined;
    var c = function () {
      function c() {
        this._type = "default";
        this._poolID = -1;
        this._node = null;
        this._inputAssembler = null;
        this._effect = null;
        this._viewID = -1;
        this._cameraID = -1;
        this._userKey = -1;
        this._castShadow = false;
        this._boundingShape = null;
      }
      var a = c.prototype;
      a.setNode = function (b) {
        this._node = b;
      };
      a.setInputAssembler = function (b) {
        this._inputAssembler = b;
      };
      a.setEffect = function (b) {
        this._effect = b;
      };
      a.setUserKey = function (b) {
        this._userKey = b;
      };
      a.extractDrawItem = function (b) {
        b.model = this;
        b.node = this._node;
        b.ia = this._inputAssembler;
        b.effect = this._effect;
      };
      return c;
    }();
    b.default = c;
    a.exports = b.default;
  }, {}],
  304: [function (f, a, b) {
    "use strict";

    b.__esModule = true;
    b.default = undefined;
    var c = f("../memop");
    var d = function () {
      function d(b) {
        this._lights = new c.FixedArray(16);
        this._models = new c.FixedArray(16);
        this._cameras = new c.FixedArray(16);
        this._debugCamera = null;
        this._app = b;
        this._views = [];
      }
      var a = d.prototype;
      a._add = function (c, a) {
        if (a._poolID === -1) {
          c.push(a);
          a._poolID = c.length - 1;
        }
      };
      a._remove = function (c, a) {
        if (a._poolID !== -1) {
          c.data[c.length - 1]._poolID = a._poolID;
          c.fastRemove(a._poolID);
          a._poolID = -1;
        }
      };
      a.reset = function () {
        for (var b = 0; b < this._models.length; ++b) {
          this._models.data[b]._viewID = -1;
        }
      };
      a.setDebugCamera = function (b) {
        this._debugCamera = b;
      };
      a.getCameraCount = function () {
        return this._cameras.length;
      };
      a.getCamera = function (b) {
        return this._cameras.data[b];
      };
      a.addCamera = function (b) {
        this._add(this._cameras, b);
      };
      a.removeCamera = function (b) {
        this._remove(this._cameras, b);
      };
      a.getModelCount = function () {
        return this._models.length;
      };
      a.getModel = function (b) {
        return this._models.data[b];
      };
      a.addModel = function (b) {
        this._add(this._models, b);
      };
      a.removeModel = function (b) {
        this._remove(this._models, b);
      };
      a.getLightCount = function () {
        return this._lights.length;
      };
      a.getLight = function (b) {
        return this._lights.data[b];
      };
      a.addLight = function (b) {
        this._add(this._lights, b);
      };
      a.removeLight = function (b) {
        this._remove(this._lights, b);
      };
      a.addView = function (b) {
        if (this._views.indexOf(b) === -1) {
          this._views.push(b);
        }
      };
      a.removeView = function (c) {
        var a = this._views.indexOf(c);
        if (a !== -1) {
          this._views.splice(a, 1);
        }
      };
      return d;
    }();
    b.default = d;
    a.exports = b.default;
  }, {
    "../memop": 294
  }],
  305: [function (a, b, j) {
    "use strict";

    j.__esModule = true;
    j.getClassName = j.enums2default = j.ctor2enums = undefined;
    j.getInspectorProps = function (d) {
      var a = {
        type: d.type
      };
      Object.assign(a, d.editor || d.inspector);
      a.defines = d.defines;
      a.value = v(a.type)(d.value);
      if (d.range) {
        a.range = d.range;
      }
      var b = g(a.type);
      a.typeName = m[b] || b;
      a.valueCtor = f[a.type];
      if (a.typeName == "cc.Texture2D") {
        a.typeName = "cc.Asset";
        a.assetType = "cc.Texture2D";
      }
      return a;
    };
    j.getInstanceType = j.getInstanceCtor = undefined;
    var e;
    var n;
    var r;
    var s;
    var u = c(a("./enums"));
    var w = a("../core/value-types");
    var o = c(a("../core/assets/CCTexture2D"));
    function c(b) {
      if (b && b.__esModule) {
        return b;
      } else {
        return {
          default: b
        };
      }
    }
    var l;
    l = a("./gfx/texture-2d");
    var A = cc.Object;
    (e = {})[Boolean] = function (b) {
      return b || false;
    };
    e[Number] = function (b) {
      if (b) {
        if (ArrayBuffer.isView(b)) {
          return b[0];
        } else {
          return b;
        }
      } else {
        return 0;
      }
    };
    e[w.Vec2] = function (b) {
      if (b) {
        return cc.v2(b[0], b[1]);
      } else {
        return cc.v2();
      }
    };
    e[w.Vec3] = function (b) {
      if (b) {
        return cc.v3(b[0], b[1], b[2]);
      } else {
        return cc.v3();
      }
    };
    e[w.Vec4] = function (b) {
      if (b) {
        return cc.v4(b[0], b[1], b[2], b[3]);
      } else {
        return cc.v4();
      }
    };
    e[w.Color] = function (b) {
      if (b) {
        return cc.color(b[0] * 255, b[1] * 255, b[2] * 255, (b[3] || 1) * 255);
      } else {
        return cc.color();
      }
    };
    e[w.Mat4] = function (b) {
      if (b) {
        return cc.mat4(b[0], b[1], b[2], b[3], b[4], b[5], b[6], b[7], b[8], b[9], b[10], b[11], b[12], b[13], b[14], b[15]);
      } else {
        return cc.mat4();
      }
    };
    e[o.default] = function () {
      return null;
    };
    e[A] = function () {
      return null;
    };
    var x = e;
    (n = {})[u.default.PARAM_INT] = Number;
    n[u.default.PARAM_INT2] = w.Vec2;
    n[u.default.PARAM_INT3] = w.Vec3;
    n[u.default.PARAM_INT4] = w.Vec4;
    n[u.default.PARAM_FLOAT] = Number;
    n[u.default.PARAM_FLOAT2] = w.Vec2;
    n[u.default.PARAM_FLOAT3] = w.Vec3;
    n[u.default.PARAM_FLOAT4] = w.Vec4;
    n[u.default.PARAM_MAT4] = w.Mat4;
    n[u.default.PARAM_TEXTURE_2D] = o.default;
    n.color = w.Color;
    n.number = Number;
    n.boolean = Boolean;
    n.default = A;
    var f = n;
    (r = {})[Number] = u.default.PARAM_FLOAT;
    r[w.Vec2] = u.default.PARAM_FLOAT2;
    r[w.Vec3] = u.default.PARAM_FLOAT3;
    r[w.Vec4] = u.default.PARAM_FLOAT4;
    r[w.Color] = u.default.PARAM_COLOR3;
    r[w.Color] = u.default.PARAM_COLOR4;
    r[w.Mat4] = u.default.PARAM_MAT4;
    r[o.default] = u.default.PARAM_TEXTURE_2D;
    r[l] = u.default.PARAM_TEXTURE_2D;
    var d = r;
    j.ctor2enums = d;
    (s = {})[u.default.PARAM_INT] = new Uint32Array([0]);
    s[u.default.PARAM_INT2] = new Uint32Array([0, 0]);
    s[u.default.PARAM_INT3] = new Uint32Array([0, 0, 0]);
    s[u.default.PARAM_INT4] = new Uint32Array([0, 0, 0, 0]);
    s[u.default.PARAM_FLOAT] = new Float32Array([0]);
    s[u.default.PARAM_FLOAT2] = new Float32Array([0, 0]);
    s[u.default.PARAM_FLOAT3] = new Float32Array([0, 0, 0]);
    s[u.default.PARAM_FLOAT4] = new Float32Array([0, 0, 0, 0]);
    s[u.default.PARAM_MAT4] = new Float32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    s[u.default.PARAM_TEXTURE_2D] = null;
    s.number = 0;
    s.boolean = false;
    var z = s;
    j.enums2default = z;
    function p(b) {
      return f[b] || f.default;
    }
    j.getInstanceType = p;
    function v(b) {
      return x[p(b)];
    }
    j.getInstanceCtor = v;
    function g(b) {
      return cc.js.getClassName(p(b));
    }
    j.getClassName = g;
    var m = {
      Number: "number",
      Boolean: "boolean"
    };
  }, {
    "../core/assets/CCTexture2D": 72,
    "../core/value-types": 251,
    "./enums": 277,
    "./gfx/texture-2d": 287
  }],
  306: [function (c) {
    "use strict";

    var b = c("../core/CCDebug");
    var f = c("../compression/ZipUtils");
    var d = c("../core/platform/js");
    function e(c) {
      var a = cc.Label.HorizontalAlign;
      switch (c) {
        case "center":
          return a.CENTER;
        case "right":
          return a.RIGHT;
        default:
          return a.LEFT;
      }
    }
    function g(c) {
      var a = cc.Label.VerticalAlign;
      switch (c) {
        case "center":
          return a.CENTER;
        case "bottom":
          return a.BOTTOM;
        default:
          return a.TOP;
      }
    }
    function h(i) {
      if (!i) {
        return cc.color(0, 0, 0, 255);
      }
      if ((i = i.indexOf("#") !== -1 ? i.substring(1) : i).length === 8) {
        var j = parseInt(i.substr(0, 2), 16) || 255;
        var c = parseInt(i.substr(2, 2), 16) || 0;
        var d = parseInt(i.substr(4, 2), 16) || 0;
        var e = parseInt(i.substr(6, 2), 16) || 0;
        return cc.color(c, d, e, j);
      }
      var f = parseInt(i.substr(0, 2), 16) || 0;
      var g = parseInt(i.substr(2, 2), 16) || 0;
      var h = parseInt(i.substr(4, 2), 16) || 0;
      return cc.color(f, g, h, 255);
    }
    function p(c, a) {
      for (var e = [], d = c.getElementsByTagName("properties"), f = 0; f < d.length; ++f) {
        for (var g = d[f].getElementsByTagName("property"), j = 0; j < g.length; ++j) {
          e.push(g[j]);
        }
      }
      a = a || {};
      for (var l = 0; l < e.length; l++) {
        var o = e[l];
        var r = o.getAttribute("name");
        var s = o.getAttribute("type") || "string";
        var u = o.getAttribute("value");
        if (s === "int") {
          u = parseInt(u);
        } else if (s === "float") {
          u = parseFloat(u);
        } else if (s === "bool") {
          u = u === "true";
        } else if (s === "color") {
          u = h(u);
        }
        a[r] = u;
      }
      return a;
    }
    c("../core/platform/CCSAXParser");
    cc.TMXLayerInfo = function () {
      this.properties = {};
      this.name = "";
      this._layerSize = null;
      this._tiles = [];
      this.visible = true;
      this._opacity = 0;
      this.ownTiles = true;
      this._minGID = 100000;
      this._maxGID = 0;
      this.offset = cc.v2(0, 0);
    };
    cc.TMXLayerInfo.prototype = {
      constructor: cc.TMXLayerInfo,
      getProperties: function () {
        return this.properties;
      },
      setProperties: function (b) {
        this.properties = b;
      }
    };
    cc.TMXImageLayerInfo = function () {
      this.name = "";
      this.visible = true;
      this.width = 0;
      this.height = 0;
      this.offset = cc.v2(0, 0);
      this._opacity = 0;
      this._trans = new cc.Color(255, 255, 255, 255);
      this.sourceImage = null;
    };
    cc.TMXObjectGroupInfo = function () {
      this.properties = {};
      this.name = "";
      this._objects = [];
      this.visible = true;
      this._opacity = 0;
      this._color = new cc.Color(255, 255, 255, 255);
      this.offset = cc.v2(0, 0);
      this._draworder = "topdown";
    };
    cc.TMXObjectGroupInfo.prototype = {
      constructor: cc.TMXObjectGroupInfo,
      getProperties: function () {
        return this.properties;
      },
      setProperties: function (b) {
        this.properties = b;
      }
    };
    cc.TMXTilesetInfo = function () {
      this.name = "";
      this.firstGid = 0;
      this.spacing = 0;
      this.margin = 0;
      this.sourceImage = null;
      this.imageSize = cc.size(0, 0);
      this.tileOffset = cc.v2(0, 0);
      this._tileSize = cc.size(0, 0);
    };
    cc.TMXTilesetInfo.prototype = {
      constructor: cc.TMXTilesetInfo,
      rectForGID: function (e, f) {
        var b = f || cc.rect(0, 0, 0, 0);
        b.width = this._tileSize.width;
        b.height = this._tileSize.height;
        e &= cc.TiledMap.TileFlag.FLIPPED_MASK;
        e -= parseInt(this.firstGid, 10);
        var c = parseInt((this.imageSize.width - this.margin * 2 + this.spacing) / (this._tileSize.width + this.spacing), 10);
        b.x = parseInt(e % c * (this._tileSize.width + this.spacing) + this.margin, 10);
        b.y = parseInt(parseInt(e / c, 10) * (this._tileSize.height + this.spacing) + this.margin, 10);
        return b;
      }
    };
    cc.TMXMapInfo = function (f, a, b, c, d) {
      this.properties = [];
      this.orientation = null;
      this.parentElement = null;
      this.parentGID = null;
      this.layerAttrs = 0;
      this.storingCharacters = false;
      this.currentString = null;
      this.renderOrder = cc.TiledMap.RenderOrder.RightDown;
      this._supportVersion = [1, 2, 0];
      this._parser = new cc.SAXParser();
      this._objectGroups = [];
      this._allChildren = [];
      this._mapSize = cc.size(0, 0);
      this._tileSize = cc.size(0, 0);
      this._layers = [];
      this._tilesets = [];
      this._imageLayers = [];
      this._tileProperties = {};
      this._tileAnimations = {};
      this._tsxMap = null;
      this._textures = null;
      this._staggerAxis = null;
      this._staggerIndex = null;
      this._hexSideLength = 0;
      this._imageLayerTextures = null;
      this.initWithXML(f, a, b, c, d);
    };
    cc.TMXMapInfo.prototype = {
      constructor: cc.TMXMapInfo,
      getOrientation: function () {
        return this.orientation;
      },
      setOrientation: function (b) {
        this.orientation = b;
      },
      getStaggerAxis: function () {
        return this._staggerAxis;
      },
      setStaggerAxis: function (b) {
        this._staggerAxis = b;
      },
      getStaggerIndex: function () {
        return this._staggerIndex;
      },
      setStaggerIndex: function (b) {
        this._staggerIndex = b;
      },
      getHexSideLength: function () {
        return this._hexSideLength;
      },
      setHexSideLength: function (b) {
        this._hexSideLength = b;
      },
      getMapSize: function () {
        return cc.size(this._mapSize.width, this._mapSize.height);
      },
      setMapSize: function (b) {
        this._mapSize.width = b.width;
        this._mapSize.height = b.height;
      },
      _getMapWidth: function () {
        return this._mapSize.width;
      },
      _setMapWidth: function (b) {
        this._mapSize.width = b;
      },
      _getMapHeight: function () {
        return this._mapSize.height;
      },
      _setMapHeight: function (b) {
        this._mapSize.height = b;
      },
      getTileSize: function () {
        return cc.size(this._tileSize.width, this._tileSize.height);
      },
      setTileSize: function (b) {
        this._tileSize.width = b.width;
        this._tileSize.height = b.height;
      },
      _getTileWidth: function () {
        return this._tileSize.width;
      },
      _setTileWidth: function (b) {
        this._tileSize.width = b;
      },
      _getTileHeight: function () {
        return this._tileSize.height;
      },
      _setTileHeight: function (b) {
        this._tileSize.height = b;
      },
      getLayers: function () {
        return this._layers;
      },
      setLayers: function (b) {
        this._allChildren.push(b);
        this._layers.push(b);
      },
      getImageLayers: function () {
        return this._imageLayers;
      },
      setImageLayers: function (b) {
        this._allChildren.push(b);
        this._imageLayers.push(b);
      },
      getTilesets: function () {
        return this._tilesets;
      },
      setTilesets: function (b) {
        this._tilesets.push(b);
      },
      getObjectGroups: function () {
        return this._objectGroups;
      },
      setObjectGroups: function (b) {
        this._allChildren.push(b);
        this._objectGroups.push(b);
      },
      getAllChildren: function () {
        return this._allChildren;
      },
      getParentElement: function () {
        return this.parentElement;
      },
      setParentElement: function (b) {
        this.parentElement = b;
      },
      getParentGID: function () {
        return this.parentGID;
      },
      setParentGID: function (b) {
        this.parentGID = b;
      },
      getLayerAttribs: function () {
        return this.layerAttrs;
      },
      setLayerAttribs: function (b) {
        this.layerAttrs = b;
      },
      getStoringCharacters: function () {
        return this.storingCharacters;
      },
      setStoringCharacters: function (b) {
        this.storingCharacters = b;
      },
      getProperties: function () {
        return this.properties;
      },
      setProperties: function (b) {
        this.properties = b;
      },
      initWithXML: function (f, a, b, c, d) {
        this._tilesets.length = 0;
        this._layers.length = 0;
        this._imageLayers.length = 0;
        this._tsxMap = a;
        this._textures = b;
        this._imageLayerTextures = d;
        this._textureSizes = c;
        this._objectGroups.length = 0;
        this._allChildren.length = 0;
        this.properties.length = 0;
        this._tileProperties = {};
        this._tileAnimations = {};
        this.currentString = "";
        this.storingCharacters = false;
        this.layerAttrs = cc.TMXLayerInfo.ATTRIB_NONE;
        this.parentElement = cc.TiledMap.NONE;
        return this.parseXMLString(f);
      },
      parseXMLString: function (b, d) {
        var g;
        var i = this._parser._parseXML(b).documentElement;
        var j = i.getAttribute("orientation");
        var k = i.getAttribute("staggeraxis");
        var m = i.getAttribute("staggerindex");
        var n = i.getAttribute("hexsidelength");
        var a = i.getAttribute("renderorder");
        var c = i.getAttribute("version") || "1.0.0";
        if (i.nodeName === "map") {
          for (var l = c.split("."), h = this._supportVersion, o = 0; o < h.length; o++) {
            var q = parseInt(l[o]) || 0;
            if (h[o] < q) {
              break;
            }
          }
          if (j === "orthogonal") {
            this.orientation = cc.TiledMap.Orientation.ORTHO;
          } else if (j === "isometric") {
            this.orientation = cc.TiledMap.Orientation.ISO;
          } else if (j === "hexagonal") {
            this.orientation = cc.TiledMap.Orientation.HEX;
          }
          this.renderOrder = a === "right-up" ? cc.TiledMap.RenderOrder.RightUp : a === "left-up" ? cc.TiledMap.RenderOrder.LeftUp : a === "left-down" ? cc.TiledMap.RenderOrder.LeftDown : cc.TiledMap.RenderOrder.RightDown;
          if (k === "x") {
            this.setStaggerAxis(cc.TiledMap.StaggerAxis.STAGGERAXIS_X);
          } else if (k === "y") {
            this.setStaggerAxis(cc.TiledMap.StaggerAxis.STAGGERAXIS_Y);
          }
          if (m === "odd") {
            this.setStaggerIndex(cc.TiledMap.StaggerIndex.STAGGERINDEX_ODD);
          } else if (m === "even") {
            this.setStaggerIndex(cc.TiledMap.StaggerIndex.STAGGERINDEX_EVEN);
          }
          if (n) {
            this.setHexSideLength(parseFloat(n));
          }
          var r = cc.size(0, 0);
          r.width = parseFloat(i.getAttribute("width"));
          r.height = parseFloat(i.getAttribute("height"));
          this.setMapSize(r);
          (r = cc.size(0, 0)).width = parseFloat(i.getAttribute("tilewidth"));
          r.height = parseFloat(i.getAttribute("tileheight"));
          this.setTileSize(r);
          this.properties = p(i);
        }
        var s = i.getElementsByTagName("tileset");
        if (i.nodeName !== "map") {
          (s = []).push(i);
        }
        g = 0;
        for (; g < s.length; g++) {
          var t = s[g];
          var u = t.getAttribute("source");
          if (u) {
            var v = parseInt(t.getAttribute("firstgid"));
            var w = this._tsxMap[u];
            if (w) {
              this.parseXMLString(w, v);
            }
          } else {
            var x = t.getElementsByTagName("image");
            var y = x.length > 1;
            var z = x[0];
            var A = z.getAttribute("source");
            A = A.replace(/\\/g, "/");
            var B = t.getElementsByTagName("tile");
            var C = B && B.length || 1;
            var D = null;
            var E = t.getAttribute("name") || "";
            var F = parseInt(t.getAttribute("spacing")) || 0;
            var G = parseInt(t.getAttribute("margin")) || 0;
            var H = parseInt(d);
            if (!H) {
              H = parseInt(t.getAttribute("firstgid")) || 0;
            }
            var I = cc.size(0, 0);
            I.width = parseFloat(t.getAttribute("tilewidth"));
            I.height = parseFloat(t.getAttribute("tileheight"));
            var J = t.getElementsByTagName("tileoffset")[0];
            var K = cc.v2(0, 0);
            if (J) {
              K.x = parseFloat(J.getAttribute("x"));
              K.y = parseFloat(J.getAttribute("y"));
            }
            for (var L = null, M = 0; M < C; M++) {
              if (!(L && !y)) {
                (L = new cc.TMXTilesetInfo()).name = E;
                L.firstGid = H;
                L.spacing = F;
                L.margin = G;
                L._tileSize = I;
                L.tileOffset = K;
                L.sourceImage = this._textures[A];
                L.imageSize = this._textureSizes[A] || L.imageSize;
                L.sourceImage;
                this.setTilesets(L);
              }
              if (D = B && B[M]) {
                this.parentGID = parseInt(H) + parseInt(D.getAttribute("id") || 0);
                var N = D.getElementsByTagName("image");
                if (N && N.length > 0) {
                  var O = (z = N[0]).getAttribute("source");
                  O = O.replace(/\\/g, "/");
                  L.sourceImage = this._textures[O];
                  L.sourceImage;
                  var P = cc.size(0, 0);
                  P.width = parseFloat(z.getAttribute("width"));
                  P.height = parseFloat(z.getAttribute("height"));
                  L._tileSize = P;
                  L.firstGid = this.parentGID;
                }
                this._tileProperties[this.parentGID] = p(D);
                var Q = D.getElementsByTagName("animation");
                if (Q && Q.length > 0) {
                  var R = Q[0].getElementsByTagName("frame");
                  var S = {
                    frames: [],
                    dt: 0,
                    frameIdx: 0
                  };
                  this._tileAnimations[this.parentGID] = S;
                  for (var T = S.frames, U = 0; U < R.length; U++) {
                    var V = R[U];
                    var W = parseInt(H) + parseInt(V.getAttribute("tileid"));
                    var X = parseFloat(V.getAttribute("duration"));
                    T.push({
                      tileid: W,
                      duration: X / 1000,
                      grid: null
                    });
                  }
                }
              }
            }
          }
        }
        var Y = i.childNodes;
        for (g = 0; g < Y.length; g++) {
          var Z = Y[g];
          if (!this._shouldIgnoreNode(Z)) {
            if (Z.nodeName === "imagelayer") {
              var $ = this._parseImageLayer(Z);
              if ($) {
                this.setImageLayers($);
              }
            }
            if (Z.nodeName === "layer") {
              var _ = this._parseLayer(Z);
              this.setLayers(_);
            }
            if (Z.nodeName === "objectgroup") {
              var Ia = this._parseObjectGroup(Z);
              this.setObjectGroups(Ia);
            }
          }
        }
        return i;
      },
      _shouldIgnoreNode: function (b) {
        return b.nodeType === 3 || b.nodeType === 8 || b.nodeType === 4;
      },
      _parseImageLayer: function (i) {
        var a = i.getElementsByTagName("image");
        if (!a || a.length == 0) {
          return null;
        }
        var b = new cc.TMXImageLayerInfo();
        b.name = i.getAttribute("name");
        b.offset.x = parseFloat(i.getAttribute("offsetx")) || 0;
        b.offset.y = parseFloat(i.getAttribute("offsety")) || 0;
        var c = i.getAttribute("visible");
        b.visible = !(c === "0");
        var d = i.getAttribute("opacity") || 1;
        b.opacity = parseInt(parseFloat(d) * 255) || 255;
        var e = a[0];
        var f = e.getAttribute("source");
        b.sourceImage = this._imageLayerTextures[f];
        b.width = parseInt(e.getAttribute("width")) || 0;
        b.height = parseInt(e.getAttribute("height")) || 0;
        b.trans = h(e.getAttribute("trans"));
        if (b.sourceImage) {
          return b;
        } else {
          return null;
        }
      },
      _parseLayer: function (d) {
        var g = d.getElementsByTagName("data")[0];
        var e = new cc.TMXLayerInfo();
        e.name = d.getAttribute("name");
        var h = cc.size(0, 0);
        h.width = parseFloat(d.getAttribute("width"));
        h.height = parseFloat(d.getAttribute("height"));
        e._layerSize = h;
        var i = d.getAttribute("visible");
        e.visible = !(i === "0");
        var j = d.getAttribute("opacity") || 1;
        e._opacity = j ? parseInt(parseFloat(j) * 255) : 255;
        e.offset = cc.v2(parseFloat(d.getAttribute("offsetx")) || 0, parseFloat(d.getAttribute("offsety")) || 0);
        for (var a = "", k = 0; k < g.childNodes.length; k++) {
          a += g.childNodes[k].nodeValue;
        }
        a = a.trim();
        var l;
        var q = g.getAttribute("compression");
        var o = g.getAttribute("encoding");
        if (q && q !== "gzip" && q !== "zlib") {
          return null;
        }
        switch (q) {
          case "gzip":
          case "zlib":
            throw Error(b.getError(100));
          case null:
          case "":
            if (o === "base64") {
              l = f.Base64.decodeAsArray(a, 4);
            } else if (o === "csv") {
              l = [];
              for (var r = a.split(","), s = 0; s < r.length; s++) {
                l.push(parseInt(r[s]));
              }
            } else {
              var u = g.getElementsByTagName("tile");
              l = [];
              for (var w = 0; w < u.length; w++) {
                l.push(parseInt(u[w].getAttribute("gid")));
              }
            }
            break;
          default:
            this.layerAttrs;
            cc.TMXLayerInfo.ATTRIB_NONE;
        }
        if (l) {
          e._tiles = new Uint32Array(l);
        }
        e.properties = p(d);
        return e;
      },
      _parseObjectGroup: function (d) {
        var a = new cc.TMXObjectGroupInfo();
        a.name = d.getAttribute("name") || "";
        a.offset = cc.v2(parseFloat(d.getAttribute("offsetx")), parseFloat(d.getAttribute("offsety")));
        var b = d.getAttribute("opacity") || 1;
        a._opacity = b ? parseInt(parseFloat(b) * 255) : 255;
        var f = d.getAttribute("visible");
        if (f && parseInt(f) === 0) {
          a.visible = false;
        }
        var i = d.getAttribute("color");
        if (i) {
          a._color.fromHEX(i);
        }
        var j = d.getAttribute("draworder");
        if (j) {
          a._draworder = j;
        }
        a.setProperties(p(d));
        var c = d.getElementsByTagName("object");
        if (c) {
          for (var k = 0; k < c.length; k++) {
            var l = c[k];
            var m = {};
            m.id = l.getAttribute("id") || k;
            m.name = l.getAttribute("name") || "";
            m.width = parseFloat(l.getAttribute("width")) || 0;
            m.height = parseFloat(l.getAttribute("height")) || 0;
            m.x = parseFloat(l.getAttribute("x")) || 0;
            m.y = parseFloat(l.getAttribute("y")) || 0;
            m.rotation = parseFloat(l.getAttribute("rotation")) || 0;
            p(l, m);
            var q = l.getAttribute("visible");
            m.visible = !(q && parseInt(q) === 0);
            var u = l.getElementsByTagName("text");
            if (u && u.length > 0) {
              var v = u[0];
              m.type = cc.TiledMap.TMXObjectType.TEXT;
              m.wrap = v.getAttribute("wrap") == "1";
              m.color = h(v.getAttribute("color"));
              m.halign = e(v.getAttribute("halign"));
              m.valign = g(v.getAttribute("valign"));
              m.pixelsize = parseInt(v.getAttribute("pixelsize")) || 16;
              m.text = v.childNodes[0].nodeValue;
            }
            var y = l.getAttribute("gid");
            if (y) {
              m.gid = parseInt(y);
              m.type = cc.TiledMap.TMXObjectType.IMAGE;
            }
            var A = l.getElementsByTagName("ellipse");
            if (A && A.length > 0) {
              m.type = cc.TiledMap.TMXObjectType.ELLIPSE;
            }
            var E = l.getElementsByTagName("polygon");
            if (E && E.length > 0) {
              m.type = cc.TiledMap.TMXObjectType.POLYGON;
              var G = E[0].getAttribute("points");
              if (G) {
                m.points = this._parsePointsString(G);
              }
            }
            var H = l.getElementsByTagName("polyline");
            if (H && H.length > 0) {
              m.type = cc.TiledMap.TMXObjectType.POLYLINE;
              var I = H[0].getAttribute("points");
              if (I) {
                m.polylinePoints = this._parsePointsString(I);
              }
            }
            if (!m.type) {
              m.type = cc.TiledMap.TMXObjectType.RECT;
            }
            a._objects.push(m);
          }
          if (j !== "index") {
            a._objects.sort(function (c, a) {
              return c.y - a.y;
            });
          }
        }
        return a;
      },
      _parsePointsString: function (f) {
        if (!f) {
          return null;
        }
        for (var a = [], b = f.split(" "), c = 0; c < b.length; c++) {
          var g = b[c].split(",");
          a.push({
            x: parseFloat(g[0]),
            y: parseFloat(g[1])
          });
        }
        return a;
      },
      setTileAnimations: function (b) {
        this._tileAnimations = b;
      },
      getTileAnimations: function () {
        return this._tileAnimations;
      },
      getTileProperties: function () {
        return this._tileProperties;
      },
      setTileProperties: function (b) {
        this._tileProperties = b;
      },
      getCurrentString: function () {
        return this.currentString;
      },
      setCurrentString: function (b) {
        this.currentString = b;
      }
    };
    var i = cc.TMXMapInfo.prototype;
    d.getset(i, "mapWidth", i._getMapWidth, i._setMapWidth);
    d.getset(i, "mapHeight", i._getMapHeight, i._setMapHeight);
    d.getset(i, "tileWidth", i._getTileWidth, i._setTileWidth);
    d.getset(i, "tileHeight", i._getTileHeight, i._setTileHeight);
    cc.TMXLayerInfo.ATTRIB_NONE = 1;
    cc.TMXLayerInfo.ATTRIB_BASE64 = 2;
    cc.TMXLayerInfo.ATTRIB_GZIP = 4;
    cc.TMXLayerInfo.ATTRIB_ZLIB = 8;
  }, {
    "../compression/ZipUtils": 21,
    "../core/CCDebug": 23,
    "../core/platform/CCSAXParser": 169,
    "../core/platform/js": 183
  }],
  307: [function (i, b) {
    "use strict";

    var g;
    var q = i("../core/value-types");
    var j = (g = i("../core/assets/material/material-variant")) && g.__esModule ? g : {
      default: g
    };
    var k = i("../core/components/CCRenderComponent");
    var m = i("../core/assets/material/CCMaterial");
    var n = i("../core/renderer/render-flow");
    var r = cc.mat4();
    var o = cc.v2();
    var c = cc.v2();
    var a = cc.v2();
    var s = {
      row: 0,
      col: 0
    };
    var h = cc.Class({
      name: "cc.TiledUserNodeData",
      extends: cc.Component,
      ctor: function () {
        this._index = -1;
        this._row = -1;
        this._col = -1;
        this._tiledLayer = null;
      }
    });
    var f = cc.Class({
      name: "cc.TiledLayer",
      extends: k,
      editor: {
        inspector: "packages://inspector/inspectors/comps/tiled-layer.js"
      },
      ctor: function () {
        this._userNodeGrid = {};
        this._userNodeMap = {};
        this._userNodeDirty = false;
        this._tiledTiles = [];
        this._tilesetIndexArr = [];
        this._tilesetIndexToArrIndex = {};
        this._texIdToMatIndex = {};
        this._viewPort = {
          x: -1,
          y: -1,
          width: -1,
          height: -1
        };
        this._cullingRect = {
          leftDown: {
            row: -1,
            col: -1
          },
          rightTop: {
            row: -1,
            col: -1
          }
        };
        this._cullingDirty = true;
        this._rightTop = {
          row: -1,
          col: -1
        };
        this._layerInfo = null;
        this._mapInfo = null;
        this._topOffset = 0;
        this._downOffset = 0;
        this._leftOffset = 0;
        this._rightOffset = 0;
        this._tiles = [];
        this._vertices = [];
        this._verticesDirty = true;
        this._layerName = "";
        this._layerOrientation = null;
        this._texGrids = null;
        this._textures = null;
        this._tilesets = null;
        this._leftDownToCenterX = 0;
        this._leftDownToCenterY = 0;
        this._hasTiledNodeGrid = false;
        this._hasAniGrid = false;
        this._animations = null;
        this._enableCulling = cc.macro.ENABLE_TILEDMAP_CULLING;
      },
      _hasTiledNode: function () {
        return this._hasTiledNodeGrid;
      },
      _hasAnimation: function () {
        return this._hasAniGrid;
      },
      enableCulling: function (b) {
        if (this._enableCulling != b) {
          this._enableCulling = b;
          this._cullingDirty = true;
        }
      },
      addUserNode: function (a) {
        var b = a.getComponent(h);
        return !b && (b = a.addComponent(h), a.parent = this.node, a._renderFlag |= n.FLAG_BREAK_FLOW, this._userNodeMap[a._id] = b, b._row = -1, b._col = -1, b._tiledLayer = this, this._nodeLocalPosToLayerPos(a, o), this._positionToRowCol(o.x, o.y, s), this._addUserNodeToGrid(b, s), this._updateCullingOffsetByUserNode(a), a.on(cc.Node.EventType.POSITION_CHANGED, this._userNodePosChange, b), a.on(cc.Node.EventType.SIZE_CHANGED, this._userNodeSizeChange, b), true);
      },
      removeUserNode: function (a) {
        var b = a.getComponent(h);
        return !!b && (a.off(cc.Node.EventType.POSITION_CHANGED, this._userNodePosChange, b), a.off(cc.Node.EventType.SIZE_CHANGED, this._userNodeSizeChange, b), this._removeUserNodeFromGrid(b), delete this._userNodeMap[a._id], a._removeComponent(b), b.destroy(), a.removeFromParent(true), a._renderFlag &= ~n.FLAG_BREAK_FLOW, true);
      },
      destroyUserNode: function (b) {
        this.removeUserNode(b);
        b.destroy();
      },
      _nodeLocalPosToLayerPos: function (c, a) {
        a.x = c.x + this._leftDownToCenterX;
        a.y = c.y + this._leftDownToCenterY;
      },
      _getNodesByRowCol: function (d, a) {
        var b = this._userNodeGrid[d];
        if (b) {
          return b[a];
        } else {
          return null;
        }
      },
      _getNodesCountByRow: function (c) {
        var a = this._userNodeGrid[c];
        if (a) {
          return a.count;
        } else {
          return 0;
        }
      },
      _updateAllUserNode: function () {
        this._userNodeGrid = {};
        for (var c in this._userNodeMap) {
          var d = this._userNodeMap[c];
          this._nodeLocalPosToLayerPos(d.node, o);
          this._positionToRowCol(o.x, o.y, s);
          this._addUserNodeToGrid(d, s);
          this._updateCullingOffsetByUserNode(d.node);
        }
      },
      _updateCullingOffsetByUserNode: function (b) {
        if (this._topOffset < b.height) {
          this._topOffset = b.height;
        }
        if (this._downOffset < b.height) {
          this._downOffset = b.height;
        }
        if (this._leftOffset < b.width) {
          this._leftOffset = b.width;
        }
        if (this._rightOffset < b.width) {
          this._rightOffset = b.width;
        }
      },
      _userNodeSizeChange: function () {
        var b = this.node;
        this._tiledLayer._updateCullingOffsetByUserNode(b);
      },
      _userNodePosChange: function () {
        var c = this.node;
        var a = this._tiledLayer;
        a._nodeLocalPosToLayerPos(c, o);
        a._positionToRowCol(o.x, o.y, s);
        a._limitInLayer(s);
        if (!(s.row === this._row && s.col === this._col)) {
          a._removeUserNodeFromGrid(this);
          a._addUserNodeToGrid(this, s);
        }
      },
      _removeUserNodeFromGrid: function (g) {
        var a = g._row;
        var b = g._col;
        var c = g._index;
        var d = this._userNodeGrid[a];
        var e = d && d[b];
        if (e) {
          d.count--;
          e.count--;
          e.list[c] = null;
          if (e.count <= 0) {
            e.list.length = 0;
            e.count = 0;
          }
        }
        g._row = -1;
        g._col = -1;
        g._index = -1;
        this._userNodeDirty = true;
      },
      _limitInLayer: function (d) {
        var a = d.row;
        var b = d.col;
        if (a < 0) {
          d.row = 0;
        }
        if (a > this._rightTop.row) {
          d.row = this._rightTop.row;
        }
        if (b < 0) {
          d.col = 0;
        }
        if (b > this._rightTop.col) {
          d.col = this._rightTop.col;
        }
      },
      _addUserNodeToGrid: function (g, a) {
        var b = a.row;
        var c = a.col;
        var d = this._userNodeGrid[b] = this._userNodeGrid[b] || {
          count: 0
        };
        var e = d[c] = d[c] || {
          count: 0,
          list: []
        };
        g._row = b;
        g._col = c;
        g._index = e.list.length;
        d.count++;
        e.count++;
        e.list.push(g);
        this._userNodeDirty = true;
      },
      _isUserNodeDirty: function () {
        return this._userNodeDirty;
      },
      _setUserNodeDirty: function (b) {
        this._userNodeDirty = b;
      },
      onEnable: function () {
        this._super();
        this.node.on(cc.Node.EventType.ANCHOR_CHANGED, this._syncAnchorPoint, this);
        this._activateMaterial();
      },
      onDisable: function () {
        this._super();
        this.node.off(cc.Node.EventType.ANCHOR_CHANGED, this._syncAnchorPoint, this);
      },
      _syncAnchorPoint: function () {
        var b = this.node;
        this._leftDownToCenterX = b.width * b.anchorX * b.scaleX;
        this._leftDownToCenterY = b.height * b.anchorY * b.scaleY;
        this._cullingDirty = true;
      },
      onDestroy: function () {
        this._super();
        if (this._buffer) {
          this._buffer.destroy();
          this._buffer = null;
        }
        this._renderDataList = null;
      },
      getLayerName: function () {
        return this._layerName;
      },
      setLayerName: function (b) {
        this._layerName = b;
      },
      getProperty: function (b) {
        return this._properties[b];
      },
      getPositionAt: function (e, a) {
        var f;
        var g;
        if (a !== undefined) {
          f = Math.floor(e);
          a = Math.floor(a);
        } else {
          f = Math.floor(e.x);
          a = Math.floor(e.y);
        }
        switch (this._layerOrientation) {
          case cc.TiledMap.Orientation.ORTHO:
            g = this._positionForOrthoAt(f, a);
            break;
          case cc.TiledMap.Orientation.ISO:
            g = this._positionForIsoAt(f, a);
            break;
          case cc.TiledMap.Orientation.HEX:
            g = this._positionForHexAt(f, a);
        }
        return g;
      },
      _isInvalidPosition: function (d, e) {
        if (d && typeof d == "object") {
          var f = d;
          e = f.y;
          d = f.x;
        }
        return d >= this._layerSize.width || e >= this._layerSize.height || d < 0 || e < 0;
      },
      _positionForIsoAt: function (i, b) {
        var c = 0;
        var j = 0;
        var k = Math.floor(i) + Math.floor(b) * this._layerSize.width;
        var f = this._tiles[k];
        if (f) {
          var g = (f & cc.TiledMap.TileFlag.FLIPPED_MASK) >>> 0;
          var h = this._texGrids[g].tileset.tileOffset;
          c = h.x;
          j = h.y;
        }
        return cc.v2(this._mapTileSize.width * 0.5 * (this._layerSize.height + i - b - 1) + c, this._mapTileSize.height * 0.5 * (this._layerSize.width - i + this._layerSize.height - b - 2) - j);
      },
      _positionForOrthoAt: function (i, b) {
        var c = 0;
        var j = 0;
        var k = Math.floor(i) + Math.floor(b) * this._layerSize.width;
        var f = this._tiles[k];
        if (f) {
          var g = (f & cc.TiledMap.TileFlag.FLIPPED_MASK) >>> 0;
          var h = this._texGrids[g].tileset.tileOffset;
          c = h.x;
          j = h.y;
        }
        return cc.v2(i * this._mapTileSize.width + c, (this._layerSize.height - b - 1) * this._mapTileSize.height - j);
      },
      _positionForHexAt: function (f, b) {
        var d;
        var h = this._mapTileSize.width;
        var g = this._mapTileSize.height;
        var i = this._layerSize.height;
        var j = Math.floor(f) + Math.floor(b) * this._layerSize.width;
        var k = this._tiles[j];
        d = this._texGrids[k] ? this._texGrids[k].tileset.tileOffset : {
          x: 0,
          y: 0
        };
        var a = this._staggerIndex === cc.TiledMap.StaggerIndex.STAGGERINDEX_ODD ? 1 : -1;
        var l = 0;
        var m = 0;
        var n = 0;
        var r = 0;
        switch (this._staggerAxis) {
          case cc.TiledMap.StaggerAxis.STAGGERAXIS_Y:
            n = 0;
            if (b % 2 == 1) {
              n = h / 2 * a;
            }
            l = f * h + n + d.x;
            m = (i - b - 1) * (g - (g - this._hexSideLength) / 2) - d.y;
            break;
          case cc.TiledMap.StaggerAxis.STAGGERAXIS_X:
            r = 0;
            if (f % 2 == 1) {
              r = g / 2 * -a;
            }
            l = f * (h - (h - this._hexSideLength) / 2) + d.x;
            m = (i - b - 1) * g + r - d.y;
        }
        return cc.v2(l, m);
      },
      setTilesGIDAt: function (a, b, e, i) {
        if (a && a.length !== 0 && !(i <= 0)) {
          if (e < 0) {
            e = 0;
          }
          if (b < 0) {
            b = 0;
          }
          for (var f = 0, l = b + i, h = e;; h++) {
            for (var m = b; m < l; m++) {
              if (f >= a.length) {
                return;
              }
              this._updateTileForGID(a[f], m, h);
              f++;
            }
          }
        }
      },
      setTileGIDAt: function (g, h, b, c) {
        if (h === undefined) {
          throw Error(cc.debug.getError(667242));
        }
        var i;
        if (c === undefined && h instanceof cc.Vec2) {
          i = h;
          c = b;
        } else {
          a.x = h;
          a.y = b;
          i = a;
        }
        var j = g & cc.TiledMap.TileFlag.FLIPPED_MASK;
        i.x = Math.floor(i.x);
        i.y = Math.floor(i.y);
        if (this._isInvalidPosition(i)) {
          throw Error(cc.debug.getError(667243));
        }
        if (this._tiles && this._tilesets && this._tilesets.length != 0) {
          if (!(j !== 0 && j < this._tilesets[0].firstGid)) {
            c = c || 0;
            this._updateTileForGID((g | c) >>> 0, i.x, i.y);
          }
        }
      },
      _updateTileForGID: function (a, b, c) {
        var d = b + c * this._layerSize.width | 0;
        if (!(d >= this._tiles.length) && a !== this._tiles[d]) {
          var e = (a & cc.TiledMap.TileFlag.FLIPPED_MASK) >>> 0;
          var f = this._texGrids[e];
          var g = f && f.texId;
          if (f) {
            this._tiles[d] = a;
            this._updateVertex(b, c);
            this._buildMaterial(g);
          } else {
            this._tiles[d] = 0;
          }
          this._cullingDirty = true;
        }
      },
      getTiles: function () {
        return this._tiles;
      },
      getTileGIDAt: function (e, a) {
        if (e === undefined) {
          throw Error(cc.debug.getError(667244));
        }
        var f = e;
        if (a === undefined) {
          f = e.x;
          a = e.y;
        }
        if (this._isInvalidPosition(f, a)) {
          throw Error(cc.debug.getError(667245));
        }
        if (!this._tiles) {
          return null;
        }
        var g = Math.floor(f) + Math.floor(a) * this._layerSize.width;
        return (this._tiles[g] & cc.TiledMap.TileFlag.FLIPPED_MASK) >>> 0;
      },
      getTileFlagsAt: function (d, e) {
        if (!d) {
          throw Error(cc.debug.getError(667246));
        }
        if (e !== undefined) {
          d = cc.v2(d, e);
        }
        if (this._isInvalidPosition(d)) {
          throw Error(cc.debug.getError(667247));
        }
        if (!this._tiles) {
          return null;
        }
        var b = Math.floor(d.x) + Math.floor(d.y) * this._layerSize.width;
        return (this._tiles[b] & cc.TiledMap.TileFlag.FLIPPED_ALL) >>> 0;
      },
      _setCullingDirty: function (b) {
        this._cullingDirty = b;
      },
      _isCullingDirty: function () {
        return this._cullingDirty;
      },
      _updateViewPort: function (c, b, d, e) {
        if (this._viewPort.width !== d || this._viewPort.height !== e || this._viewPort.x !== c || this._viewPort.y !== b) {
          this._viewPort.x = c;
          this._viewPort.y = b;
          this._viewPort.width = d;
          this._viewPort.height = e;
          var f = 1;
          if (this._layerOrientation === cc.TiledMap.Orientation.ISO) {
            f = 2;
          }
          var g = this._viewPort.x - this._offset.x + this._leftDownToCenterX;
          var j = this._viewPort.y - this._offset.y + this._leftDownToCenterY;
          var k = g - this._leftOffset;
          var o = j - this._downOffset;
          var p = g + d + this._rightOffset;
          var n = j + e + this._topOffset;
          var l = this._cullingRect.leftDown;
          var h = this._cullingRect.rightTop;
          if (k < 0) {
            k = 0;
          }
          if (o < 0) {
            o = 0;
          }
          this._positionToRowCol(k, o, s);
          s.row -= f;
          s.col -= f;
          s.row = s.row > 0 ? s.row : 0;
          s.col = s.col > 0 ? s.col : 0;
          if (!(s.row === l.row && s.col === l.col)) {
            l.row = s.row;
            l.col = s.col;
            this._cullingDirty = true;
          }
          if (p < 0 || n < 0) {
            s.row = -1;
            s.col = -1;
          } else {
            this._positionToRowCol(p, n, s);
            s.row++;
            s.col++;
          }
          if (s.row > this._rightTop.row) {
            s.row = this._rightTop.row;
          }
          if (s.col > this._rightTop.col) {
            s.col = this._rightTop.col;
          }
          if (!(s.row === h.row && s.col === h.col)) {
            h.row = s.row;
            h.col = s.col;
            this._cullingDirty = true;
          }
        }
      },
      _positionToRowCol: function (d, b, f) {
        var e = cc.TiledMap;
        var g = e.Orientation;
        var h = e.StaggerAxis;
        var i = this._mapTileSize.width;
        var j = this._mapTileSize.height;
        var a = i * 0.5;
        var k = j * 0.5;
        var c = 0;
        var m = 0;
        var n = 0;
        var s = 0;
        var t = this._staggerAxis;
        this._layerSize.width;
        switch (this._layerOrientation) {
          case g.ORTHO:
            m = Math.floor(d / i);
            c = Math.floor(b / j);
            break;
          case g.ISO:
            m = Math.floor(d / a);
            c = Math.floor(b / k);
            break;
          case g.HEX:
            if (t === h.STAGGERAXIS_Y) {
              n = (c = Math.floor(b / (j - this._diffY1))) % 2 == 1 ? a * this._odd_even : 0;
              m = Math.floor((d - n) / i);
            } else {
              s = (m = Math.floor(d / (i - this._diffX1))) % 2 == 1 ? k * -this._odd_even : 0;
              c = Math.floor((b - s) / j);
            }
        }
        f.row = c;
        f.col = m;
        return f;
      },
      _updateCulling: function () {
        if (this._enableCulling) {
          this.node._updateWorldMatrix();
          q.Mat4.invert(r, this.node._worldMatrix);
          var d = cc.visibleRect;
          var a = cc.Camera.findCamera(this.node);
          if (a) {
            o.x = 0;
            o.y = 0;
            c.x = o.x + d.width;
            c.y = o.y + d.height;
            a.getScreenToWorldPoint(o, o);
            a.getScreenToWorldPoint(c, c);
            q.Vec2.transformMat4(o, o, r);
            q.Vec2.transformMat4(c, c, r);
            this._updateViewPort(o.x, o.y, c.x - o.x, c.y - o.y);
          }
        }
      },
      getLayerOrientation: function () {
        return this._layerOrientation;
      },
      getProperties: function () {
        return this._properties;
      },
      _updateVertex: function (b, d) {
        var f = cc.TiledMap;
        var e = f.TileFlag.FLIPPED_MASK;
        var h = f.StaggerAxis;
        var i = f.Orientation;
        var j = this._vertices;
        var k = this._layerOrientation;
        var a = this._tiles;
        if (a) {
          var l;
          var n;
          var o;
          var p;
          var q;
          var r;
          var u;
          var w = this._rightTop;
          var C = this._mapTileSize.width;
          var v = this._mapTileSize.height;
          var g = C * 0.5;
          var m = v * 0.5;
          var y = this._layerSize.height;
          var D = this._layerSize.width;
          var E = this._texGrids;
          if (k === i.HEX) {
            p = this._staggerAxis;
            q = this._diffX1;
            r = this._diffY1;
            u = this._odd_even;
          }
          var A;
          var H;
          var I;
          var J;
          var M = 0;
          var O = 0;
          var R = 0;
          var S = 0;
          var Y = d * D + b;
          if (l = E[H = (a[Y] & e) >>> 0]) {
            if (this._animations[H]) {
              this._hasAniGrid = this._hasAniGrid || true;
            }
            switch (k) {
              case i.ORTHO:
                n = (M = b) * C;
                o = (O = y - d - 1) * v;
                break;
              case i.ISO:
                n = g * (M = y + b - d - 1);
                o = m * (O = y + D - b - d - 2);
                break;
              case i.HEX:
                n = b * (C - q) + (p === h.STAGGERAXIS_Y && d % 2 == 1 ? g * u : 0);
                o = (y - d - 1) * (v - r) + (p === h.STAGGERAXIS_X && b % 2 == 1 ? m * -u : 0);
                M = b;
                O = y - d - 1;
            }
            var X = j[O] = j[O] || {
              minCol: 0,
              maxCol: 0
            };
            var L = X[M] = X[M] || {};
            if (X.minCol > M) {
              X.minCol = M;
            }
            if (X.maxCol < M) {
              X.maxCol = M;
            }
            if (w.row < O) {
              w.row = O;
            }
            if (w.col < M) {
              w.col = M;
            }
            A = l.tileset.tileOffset;
            n += this._offset.x + A.x;
            o += this._offset.y - A.y;
            R = (R = -A.y + l.tileset._tileSize.height - v) < 0 ? 0 : R;
            I = A.y < 0 ? 0 : A.y;
            J = -A.x < 0 ? 0 : -A.x;
            S = (S = A.x + l.tileset._tileSize.width - C) < 0 ? 0 : S;
            if (this._rightOffset < J) {
              this._rightOffset = J;
            }
            if (this._leftOffset < S) {
              this._leftOffset = S;
            }
            if (this._topOffset < I) {
              this._topOffset = I;
            }
            if (this._downOffset < R) {
              this._downOffset = R;
            }
            L.left = n;
            L.bottom = o;
            L.index = Y;
            this._cullingDirty = true;
          }
        }
      },
      _updateVertices: function () {
        this._vertices.length = 0;
        if (this._tiles) {
          var f = this._rightTop;
          f.row = -1;
          f.col = -1;
          var a = this._layerSize.height;
          var b = this._layerSize.width;
          this._topOffset = 0;
          this._downOffset = 0;
          this._leftOffset = 0;
          this._rightOffset = 0;
          this._hasAniGrid = false;
          for (var c = 0; c < a; ++c) {
            for (var g = 0; g < b; ++g) {
              this._updateVertex(g, c);
            }
          }
          this._verticesDirty = false;
        }
      },
      getTiledTileAt: function (g, a, b) {
        if (this._isInvalidPosition(g, a)) {
          throw Error(cc.debug.getError(667248));
        }
        if (!this._tiles) {
          return null;
        }
        var c = Math.floor(g) + Math.floor(a) * this._layerSize.width;
        var d = this._tiledTiles[c];
        if (!d && b) {
          var h = new cc.Node();
          (d = h.addComponent(cc.TiledTile))._x = g;
          d._y = a;
          d._layer = this;
          d._updateInfo();
          h.parent = this.node;
          return d;
        }
        return d;
      },
      setTiledTileAt: function (e, a, b) {
        if (this._isInvalidPosition(e, a)) {
          throw Error(cc.debug.getError(667249));
        }
        if (!this._tiles) {
          return null;
        }
        var c = Math.floor(e) + Math.floor(a) * this._layerSize.width;
        this._tiledTiles[c] = b;
        this._cullingDirty = true;
        this._hasTiledNodeGrid = !!b || this._tiledTiles.some(function (b) {
          return !!b;
        });
        return b;
      },
      getTexture: function (b) {
        b = b || 0;
        if (this._textures && b >= 0 && this._textures.length > b) {
          return this._textures[b];
        } else {
          return null;
        }
      },
      getTextures: function () {
        return this._textures;
      },
      setTexture: function (b) {
        this.setTextures([b]);
      },
      setTextures: function (b) {
        this._textures = b;
        this._activateMaterial();
      },
      getLayerSize: function () {
        return this._layerSize;
      },
      getMapTileSize: function () {
        return this._mapTileSize;
      },
      getTileSet: function (b) {
        b = b || 0;
        if (this._tilesets && b >= 0 && this._tilesets.length > b) {
          return this._tilesets[b];
        } else {
          return null;
        }
      },
      getTileSets: function () {
        return this._tilesets;
      },
      setTileSet: function (b) {
        this.setTileSets([b]);
      },
      setTileSets: function (g) {
        this._tilesets = g;
        for (var a = this._textures = [], h = this._texGrids = [], b = 0; b < g.length; b++) {
          var c = g[b];
          if (c) {
            a[b] = c.sourceImage;
          }
        }
        cc.TiledMap.loadAllTextures(a, function () {
          for (var a = 0, c = g.length; a < c; ++a) {
            var d = g[a];
            if (d) {
              cc.TiledMap.fillTextureGrids(d, h, a);
            }
          }
          this._prepareToRender();
        }.bind(this));
      },
      _traverseAllGrid: function () {
        var a = this._tiles;
        var b = this._texGrids;
        var c = this._tilesetIndexArr;
        var d = this._tilesetIndexToArrIndex = {};
        var e = cc.TiledMap.TileFlag.FLIPPED_MASK;
        c.length = 0;
        for (var f = 0; f < a.length; f++) {
          var g = a[f];
          if (g !== 0) {
            var l = b[g = (g & e) >>> 0];
            if (l) {
              var m = l.texId;
              if (d[m] === undefined) {
                d[m] = c.length;
                c.push(m);
              }
            }
          }
        }
      },
      _init: function (d, b, g, e, i) {
        this._cullingDirty = true;
        this._layerInfo = d;
        this._mapInfo = b;
        var j = d._layerSize;
        this._layerName = d.name;
        this._tiles = d._tiles;
        this._properties = d.properties;
        this._layerSize = j;
        this._minGID = d._minGID;
        this._maxGID = d._maxGID;
        this._opacity = d._opacity;
        this._renderOrder = b.renderOrder;
        this._staggerAxis = b.getStaggerAxis();
        this._staggerIndex = b.getStaggerIndex();
        this._hexSideLength = b.getHexSideLength();
        this._animations = b.getTileAnimations();
        this._tilesets = g;
        this._textures = e;
        this._texGrids = i;
        this._layerOrientation = b.orientation;
        this._mapTileSize = b.getTileSize();
        var k = this._mapTileSize.width;
        var m = this._mapTileSize.height;
        var a = this._layerSize.width;
        var n = this._layerSize.height;
        if (this._layerOrientation === cc.TiledMap.Orientation.HEX) {
          var c = cc.TiledMap;
          var l = c.StaggerAxis;
          var h = c.StaggerIndex;
          var o = 0;
          var p = 0;
          this._odd_even = this._staggerIndex === h.STAGGERINDEX_ODD ? 1 : -1;
          if (this._staggerAxis === l.STAGGERAXIS_X) {
            this._diffX1 = (k - this._hexSideLength) / 2;
            this._diffY1 = 0;
            p = m * (n + 0.5);
            o = (k + this._hexSideLength) * Math.floor(a / 2) + k * (a % 2);
          } else {
            this._diffX1 = 0;
            this._diffY1 = (m - this._hexSideLength) / 2;
            o = k * (a + 0.5);
            p = (m + this._hexSideLength) * Math.floor(n / 2) + m * (n % 2);
          }
          this.node.setContentSize(o, p);
        } else if (this._layerOrientation === cc.TiledMap.Orientation.ISO) {
          var s = a + n;
          this.node.setContentSize(k * 0.5 * s, m * 0.5 * s);
        } else {
          this.node.setContentSize(a * k, n * m);
        }
        this._offset = cc.v2(d.offset.x, -d.offset.y);
        this._useAutomaticVertexZ = false;
        this._vertexZvalue = 0;
        this._syncAnchorPoint();
        this._prepareToRender();
      },
      _prepareToRender: function () {
        this._updateVertices();
        this._traverseAllGrid();
        this._updateAllUserNode();
        this._activateMaterial();
      },
      _buildMaterial: function (c) {
        var a = this._texIdToMatIndex;
        if (a[c] !== undefined) {
          return null;
        }
        var b = this._tilesetIndexArr;
        var d = this._tilesetIndexToArrIndex;
        var e = d[c];
        if (e === undefined) {
          d[c] = e = b.length;
          b.push(c);
        }
        var i = this._textures[c];
        var g = this._materials[e];
        if (!g) {
          g = m.getBuiltinMaterial("2d-sprite");
        }
        (g = j.default.create(g, this)).define("CC_USE_MODEL", true);
        g.setProperty("texture", i);
        this._materials[e] = g;
        a[c] = e;
        return g;
      },
      _activateMaterial: function () {
        var d = this._tilesetIndexArr;
        if (d.length !== 0) {
          for (var a = d.length, b = 0; b < a; b++) {
            this._buildMaterial(d[b]);
          }
          this._materials.length = a;
          this.markForRender(true);
        } else {
          this.disableRender();
        }
      }
    });
    cc.TiledLayer = b.exports = f;
  }, {
    "../core/assets/material/CCMaterial": 76,
    "../core/assets/material/material-variant": 83,
    "../core/components/CCRenderComponent": 109,
    "../core/renderer/render-flow": 194,
    "../core/value-types": 251
  }],
  308: [function (k, b) {
    "use strict";

    k("./CCTMXXMLParser");
    k("./CCTiledMapAsset");
    k("./CCTiledLayer");
    k("./CCTiledTile");
    k("./CCTiledObjectGroup");
    var d = cc.Enum({
      ORTHO: 0,
      HEX: 1,
      ISO: 2
    });
    var e = cc.Enum({
      NONE: 0,
      MAP: 1,
      LAYER: 2,
      OBJECTGROUP: 3,
      OBJECT: 4,
      TILE: 5
    });
    var f = cc.Enum({
      HORIZONTAL: 2147483648,
      VERTICAL: 1073741824,
      DIAGONAL: 536870912,
      FLIPPED_ALL: 4026531840,
      FLIPPED_MASK: 268435455
    });
    var g = cc.Enum({
      STAGGERAXIS_X: 0,
      STAGGERAXIS_Y: 1
    });
    var h = cc.Enum({
      STAGGERINDEX_ODD: 0,
      STAGGERINDEX_EVEN: 1
    });
    var i = cc.Enum({
      RightDown: 0,
      RightUp: 1,
      LeftDown: 2,
      LeftUp: 3
    });
    var a = cc.Enum({
      RECT: 0,
      ELLIPSE: 1,
      POLYGON: 2,
      POLYLINE: 3,
      IMAGE: 4,
      TEXT: 5
    });
    var j = cc.Class({
      name: "cc.TiledMap",
      extends: cc.Component,
      editor: false,
      ctor: function () {
        this._texGrids = [];
        this._textures = [];
        this._tilesets = [];
        this._animations = [];
        this._imageLayers = [];
        this._layers = [];
        this._groups = [];
        this._images = [];
        this._properties = [];
        this._tileProperties = [];
        this._mapSize = cc.size(0, 0);
        this._tileSize = cc.size(0, 0);
      },
      statics: {
        Orientation: d,
        Property: e,
        TileFlag: f,
        StaggerAxis: g,
        StaggerIndex: h,
        TMXObjectType: a,
        RenderOrder: i
      },
      properties: {
        _tmxFile: {
          default: null,
          type: cc.TiledMapAsset
        },
        tmxAsset: {
          get: function () {
            return this._tmxFile;
          },
          set: function (b) {
            if (this._tmxFile !== b) {
              this._tmxFile = b;
              this._applyFile();
            }
          },
          type: cc.TiledMapAsset
        }
      },
      getMapSize: function () {
        return this._mapSize;
      },
      getTileSize: function () {
        return this._tileSize;
      },
      getMapOrientation: function () {
        return this._mapOrientation;
      },
      getObjectGroups: function () {
        return this._groups;
      },
      getObjectGroup: function (f) {
        for (var a = this._groups, b = 0, g = a.length; b < g; b++) {
          var d = a[b];
          if (d && d.getGroupName() === f) {
            return d;
          }
        }
        return null;
      },
      enableCulling: function (d) {
        for (var a = this._layers, b = 0; b < a.length; ++b) {
          a[b].enableCulling(d);
        }
      },
      getProperties: function () {
        return this._properties;
      },
      getLayers: function () {
        return this._layers;
      },
      getLayer: function (f) {
        for (var a = this._layers, b = 0, g = a.length; b < g; b++) {
          var d = a[b];
          if (d && d.getLayerName() === f) {
            return d;
          }
        }
        return null;
      },
      _changeLayer: function (g, a) {
        for (var b = this._layers, c = 0, h = b.length; c < h; c++) {
          var e = b[c];
          if (e && e.getLayerName() === g) {
            b[c] = a;
            return;
          }
        }
      },
      getProperty: function (b) {
        return this._properties[b.toString()];
      },
      getPropertiesForGID: function (b) {
        return this._tileProperties[b];
      },
      __preload: function () {
        if (this._tmxFile) {
          this._applyFile();
        }
      },
      onEnable: function () {
        this.node.on(cc.Node.EventType.ANCHOR_CHANGED, this._syncAnchorPoint, this);
      },
      onDisable: function () {
        this.node.off(cc.Node.EventType.ANCHOR_CHANGED, this._syncAnchorPoint, this);
      },
      _applyFile: function () {
        var a = this._tmxFile;
        if (a) {
          for (var b = a.textures, d = a.textureNames, e = a.textureSizes, i = {}, k = {}, l = 0; l < b.length; ++l) {
            var m = d[l];
            i[m] = b[l];
            k[m] = e[l];
          }
          var n = {};
          b = a.imageLayerTextures;
          d = a.imageLayerTextureNames;
          for (var o = 0; o < b.length; ++o) {
            n[d[o]] = b[o];
          }
          for (var p = a.tsxFileNames, s = a.tsxFiles, h = {}, t = 0; t < p.length; ++t) {
            if (p[t].length > 0) {
              h[p[t]] = s[t].text;
            }
          }
          var u = new cc.TMXMapInfo(a.tmxXmlStr, h, i, k, n);
          var v = u.getTilesets();
          if (!!v) {
            v.length;
          }
          this._buildWithMapInfo(u);
        } else {
          this._releaseMapInfo();
        }
      },
      _releaseMapInfo: function () {
        for (var c = this._layers, b = 0, e = c.length; b < e; b++) {
          c[b].node.removeFromParent(true);
          c[b].node.destroy();
        }
        c.length = 0;
        for (var f = this._groups, g = 0, l = f.length; g < l; g++) {
          f[g].node.removeFromParent(true);
          f[g].node.destroy();
        }
        f.length = 0;
        for (var i = this._images, j = 0, m = i.length; j < m; j++) {
          i[j].removeFromParent(true);
          i[j].destroy();
        }
        i.length = 0;
      },
      _syncAnchorPoint: function () {
        var a;
        var e;
        var k = this.node.getAnchorPoint();
        var d = this.node.width * k.x;
        var f = this.node.height * (1 - k.y);
        a = 0;
        e = this._layers.length;
        for (; a < e; a++) {
          this._layers[a].node.setAnchorPoint(k);
        }
        a = 0;
        e = this._groups.length;
        for (; a < e; a++) {
          var g = this._groups[a];
          var l = g.node;
          l.anchorX = 0.5;
          l.anchorY = 0.5;
          l.x = g._offset.x - d + l.width * l.anchorX;
          l.y = g._offset.y + f - l.height * l.anchorY;
        }
        a = 0;
        e = this._images.length;
        for (; a < e; a++) {
          var m = this._images[a];
          m.anchorX = 0.5;
          m.anchorY = 0.5;
          m.x = m._offset.x - d + m.width * m.anchorX;
          m.y = m._offset.y + f - m.height * m.anchorY;
        }
      },
      _fillAniGrids: function (a, b) {
        for (var c in b) {
          var i = b[c];
          if (i) {
            for (var j = i.frames, k = 0; k < j.length; k++) {
              var l = j[k];
              l.grid = a[l.tileid];
            }
          }
        }
      },
      _buildLayerAndGroup: function () {
        var a = this._tilesets;
        var b = this._texGrids;
        var c = this._animations;
        b.length = 0;
        for (var e = 0, f = a.length; e < f; ++e) {
          var h = a[e];
          if (h) {
            cc.TiledMap.fillTextureGrids(h, b, e);
          }
        }
        this._fillAniGrids(b, c);
        for (var j = this._layers, k = this._groups, n = this._images, o = {}, q = 0, s = j.length; q < s; q++) {
          o[j[q].node._name] = true;
        }
        for (var w = 0, A = k.length; w < A; w++) {
          o[k[w].node._name] = true;
        }
        for (var C = 0, E = n.length; C < E; C++) {
          o[n[C]._name] = true;
        }
        j = this._layers = [];
        k = this._groups = [];
        n = this._images = [];
        var F = this._mapInfo;
        var p = this.node;
        var v = F.getAllChildren();
        var g = this._textures;
        var m = 0;
        var G = 0;
        if (v && v.length > 0) {
          for (var H = 0, I = v.length; H < I; H++) {
            var J = v[H];
            var M = J.name;
            var N = this.node.getChildByName(M);
            o[M] = false;
            if (!N) {
              (N = new cc.Node()).name = M;
              p.addChild(N);
            }
            N.setSiblingIndex(H);
            N.active = J.visible;
            if (J instanceof cc.TMXLayerInfo) {
              var O = N.getComponent(cc.TiledLayer);
              if (!O) {
                O = N.addComponent(cc.TiledLayer);
              }
              O._init(J, F, a, g, b);
              J.ownTiles = false;
              j.push(O);
            } else if (J instanceof cc.TMXObjectGroupInfo) {
              var P = N.getComponent(cc.TiledObjectGroup);
              if (!P) {
                P = N.addComponent(cc.TiledObjectGroup);
              }
              P._init(J, F, b);
              k.push(P);
            } else if (J instanceof cc.TMXImageLayerInfo) {
              var R = J.sourceImage;
              N.opacity = J.opacity;
              N.layerInfo = J;
              N._offset = cc.v2(J.offset.x, -J.offset.y);
              var S = N.getComponent(cc.Sprite);
              if (!S) {
                S = N.addComponent(cc.Sprite);
              }
              var T = S.spriteFrame || new cc.SpriteFrame();
              T.setTexture(R);
              S.spriteFrame = T;
              N.width = R.width;
              N.height = R.height;
              n.push(N);
            }
            m = Math.max(m, N.width);
            G = Math.max(G, N.height);
          }
        }
        for (var U = p.children, _ = 0, ba = U.length; _ < ba; _++) {
          var ca = U[_];
          if (o[ca._name]) {
            ca.destroy();
          }
        }
        this.node.width = m;
        this.node.height = G;
        this._syncAnchorPoint();
      },
      _buildWithMapInfo: function (a) {
        this._mapInfo = a;
        this._mapSize = a.getMapSize();
        this._tileSize = a.getTileSize();
        this._mapOrientation = a.orientation;
        this._properties = a.properties;
        this._tileProperties = a.getTileProperties();
        this._imageLayers = a.getImageLayers();
        this._animations = a.getTileAnimations();
        this._tilesets = a.getTilesets();
        var b = this._tilesets;
        this._textures.length = 0;
        for (var c = [], d = 0, j = b.length; d < j; ++d) {
          var f = b[d];
          if (f && f.sourceImage) {
            this._textures[d] = f.sourceImage;
            c.push(f.sourceImage);
          }
        }
        for (var k = 0; k < this._imageLayers.length; k++) {
          var l = this._imageLayers[k];
          if (l && l.sourceImage) {
            c.push(l.sourceImage);
          }
        }
        cc.TiledMap.loadAllTextures(c, function () {
          this._buildLayerAndGroup();
        }.bind(this));
      },
      update: function (a) {
        var b = this._animations;
        var c = this._texGrids;
        for (var d in b) {
          var i = b[d];
          var j = i.frames;
          var k = j[i.frameIdx];
          i.dt += a;
          if (k.duration < i.dt) {
            i.dt = 0;
            i.frameIdx++;
            if (i.frameIdx >= j.length) {
              i.frameIdx = 0;
            }
            k = j[i.frameIdx];
          }
          c[d] = k.grid;
        }
      }
    });
    cc.TiledMap = b.exports = j;
    cc.TiledMap.loadAllTextures = function (a, b) {
      var c = a.length;
      if (c !== 0) {
        for (var d = 0, i = function () {
            if (++d >= c) {
              b();
            }
          }, f = 0; f < c; f++) {
          var j = a[f];
          if (j.loaded) {
            i();
          } else {
            j.once("load", function () {
              i();
            });
          }
        }
      } else {
        b();
      }
    };
    cc.TiledMap.fillTextureGrids = function (d, b, f) {
      var e = d.sourceImage;
      if (!(d.imageSize.width && d.imageSize.height)) {
        d.imageSize.width = e.width;
        d.imageSize.height = e.height;
      }
      var g = d._tileSize.width;
      var i = d._tileSize.height;
      var j = e.width;
      var k = e.height;
      var a = d.spacing;
      var m = d.margin;
      var c = Math.floor((j - m * 2 + a) / (g + a));
      var l = Math.floor((k - m * 2 + a) / (i + a)) * c;
      var n = d.firstGid;
      var t = null;
      var u = !!b[n];
      var v = cc.macro.FIX_ARTIFACTS_BY_STRECHING_TEXEL_TMX ? 0.5 : 0;
      if (l <= 0) {
        l = 1;
      }
      for (var s = d.firstGid + l; n < s && (u && !b[n] && (u = false), u || !b[n]); ++n) {
        t = {
          texId: f,
          tileset: d,
          x: 0,
          y: 0,
          width: g,
          height: i,
          t: 0,
          l: 0,
          r: 0,
          b: 0,
          gid: n
        };
        d.rectForGID(n, t);
        t.x += v;
        t.y += v;
        t.width -= v * 2;
        t.height -= v * 2;
        t.t = t.y / k;
        t.l = t.x / j;
        t.r = (t.x + t.width) / j;
        t.b = (t.y + t.height) / k;
        b[n] = t;
      }
    };
    cc.js.obsolete(cc.TiledMap.prototype, "cc.TiledMap.tmxFile", "tmxAsset", true);
    cc.js.get(cc.TiledMap.prototype, "mapLoaded", function () {
      return [];
    }, false);
  }, {
    "./CCTMXXMLParser": 306,
    "./CCTiledLayer": 307,
    "./CCTiledMapAsset": 309,
    "./CCTiledObjectGroup": 311,
    "./CCTiledTile": 312
  }],
  309: [function (d, a) {
    "use strict";

    var b = cc.Class({
      name: "cc.TiledMapAsset",
      extends: cc.Asset,
      properties: {
        tmxXmlStr: "",
        textures: {
          default: [],
          type: [cc.Texture2D]
        },
        textureNames: [cc.String],
        textureSizes: {
          default: [],
          type: [cc.Size]
        },
        imageLayerTextures: {
          default: [],
          type: [cc.Texture2D]
        },
        imageLayerTextureNames: [cc.String],
        tsxFiles: [cc.TextAsset],
        tsxFileNames: [cc.String]
      },
      statics: {
        preventDeferredLoadDependents: true
      },
      createNode: false
    });
    cc.TiledMapAsset = b;
    a.exports = b;
  }, {}],
  310: [function (f, a) {
    "use strict";

    var b;
    var g = (b = f("../renderer/core/input-assembler")) && b.__esModule ? b : {
      default: b
    };
    var d = cc.Class({
      name: "cc.TiledMapRenderDataList",
      ctor: function () {
        this._dataList = [];
        this._offset = 0;
      },
      _pushRenderData: function () {
        var b = {
          ia: new g.default(),
          nodesRenderList: []
        };
        this._dataList.push(b);
      },
      popRenderData: function (d) {
        if (this._offset >= this._dataList.length) {
          this._pushRenderData();
        }
        var a = this._dataList[this._offset];
        a.nodesRenderList.length = 0;
        var b = a.ia;
        b._vertexBuffer = d._vb;
        b._indexBuffer = d._ib;
        b._start = d.indiceOffset;
        b._count = 0;
        this._offset++;
        return a;
      },
      pushNodesList: function (c, a) {
        c.nodesRenderList.push(a);
      },
      reset: function () {
        this._offset = 0;
      }
    });
    cc.TiledMapRenderDataList = a.exports = d;
  }, {
    "../renderer/core/input-assembler": 272
  }],
  311: [function (d, a) {
    "use strict";

    var b = cc.Class({
      name: "cc.TiledObjectGroup",
      extends: cc.Component,
      getPositionOffset: function () {
        return this._positionOffset;
      },
      getProperties: function () {
        return this._properties;
      },
      getGroupName: function () {
        return this._groupName;
      },
      getProperty: function (b) {
        return this._properties[b.toString()];
      },
      getObject: function (e) {
        for (var a = 0, f = this._objects.length; a < f; a++) {
          var c = this._objects[a];
          if (c && c.name === e) {
            return c;
          }
        }
        return null;
      },
      getObjects: function () {
        return this._objects;
      },
      _init: function (b, d, j) {
        var e = cc.TiledMap;
        var i = e.TMXObjectType;
        var k = e.Orientation;
        var n = e.StaggerAxis;
        var q = e.TileFlag;
        var a = q.FLIPPED_MASK;
        var o = q.HORIZONTAL;
        var c = q.VERTICAL;
        this._groupName = b.name;
        this._positionOffset = b.offset;
        this._mapInfo = d;
        this._properties = b.getProperties();
        this._offset = cc.v2(b.offset.x, -b.offset.y);
        this._opacity = b._opacity;
        var l = d._mapSize;
        var h = d._tileSize;
        var r = 0;
        var s = 0;
        if (d.orientation === k.HEX) {
          if (d.getStaggerAxis() === n.STAGGERAXIS_X) {
            s = h.height * (l.height + 0.5);
            r = (h.width + d.getHexSideLength()) * Math.floor(l.width / 2) + h.width * (l.width % 2);
          } else {
            r = h.width * (l.width + 0.5);
            s = (h.height + d.getHexSideLength()) * Math.floor(l.height / 2) + h.height * (l.height % 2);
          }
        } else if (d.orientation === k.ISO) {
          var t = l.width + l.height;
          r = h.width * 0.5 * t;
          s = h.height * 0.5 * t;
        } else {
          r = l.width * h.width;
          s = l.height * h.height;
        }
        this.node.setContentSize(r, s);
        for (var u = r * this.node.anchorX, p = s * (1 - this.node.anchorY), v = b._objects, g = {}, m = 0, w = v.length; m < w; m++) {
          var x = v[m];
          var z = x.type;
          x.offset = cc.v2(x.x, x.y);
          var A = x.points || x.polylinePoints;
          if (A) {
            for (var B = 0; B < A.length; B++) {
              A[B].y *= -1;
            }
          }
          if (k.ISO !== d.orientation) {
            x.y = s - x.y;
          } else {
            var C = x.x / h.height;
            var D = x.y / h.height;
            x.x = h.width * 0.5 * (l.height + C - D);
            x.y = h.height * 0.5 * (l.width + l.height - C - D);
          }
          if (z === i.TEXT) {
            var F = "text" + x.id;
            g[F] = true;
            var I = this.node.getChildByName(F);
            if (!I) {
              I = new cc.Node();
            }
            I.active = x.visible;
            I.anchorX = 0;
            I.anchorY = 1;
            I.angle = -x.rotation;
            I.x = x.x - u;
            I.y = x.y - p;
            I.name = F;
            I.parent = this.node;
            I.color = x.color;
            I.opacity = this._opacity;
            I.setSiblingIndex(m);
            var K = I.getComponent(cc.Label);
            if (!K) {
              K = I.addComponent(cc.Label);
            }
            K.overflow = cc.Label.Overflow.SHRINK;
            K.lineHeight = x.height;
            K.string = x.text;
            K.horizontalAlign = x.halign;
            K.verticalAlign = x.valign;
            K.fontSize = x.pixelsize;
            I.width = x.width;
            I.height = x.height;
          }
          if (z === i.IMAGE) {
            var L = x.gid;
            var M = j[(L & a) >>> 0];
            if (!M) {
              continue;
            }
            var N = M.tileset;
            var O = "img" + x.id;
            g[O] = true;
            var P = this.node.getChildByName(O);
            var Q = x.width || M.width;
            var R = x.height || M.height;
            var S = N.tileOffset.x;
            var T = N.tileOffset.y;
            if (P instanceof cc.PrivateNode) {
              P.removeFromParent();
              P.destroy();
              P = null;
            }
            if (!P) {
              P = new cc.Node();
            }
            if (k.ISO == d.orientation) {
              P.anchorX = 0.5 + S / Q;
              P.anchorY = T / R;
            } else {
              P.anchorX = S / Q;
              P.anchorY = T / R;
            }
            P.active = x.visible;
            P.angle = -x.rotation;
            P.x = x.x - u;
            P.y = x.y - p;
            P.name = O;
            P.parent = this.node;
            P.opacity = this._opacity;
            P.setSiblingIndex(m);
            var U = P.getComponent(cc.Sprite);
            if (!U) {
              U = P.addComponent(cc.Sprite);
            }
            var V = U.spriteFrame;
            if (!V) {
              V = new cc.SpriteFrame();
            }
            if ((L & o) >>> 0) {
              V.setFlipX(true);
            } else {
              V.setFlipX(false);
            }
            if ((L & c) >>> 0) {
              V.setFlipY(true);
            } else {
              V.setFlipY(false);
            }
            V.setTexture(M.tileset.sourceImage, cc.rect(M));
            U.spriteFrame = V;
            U.setVertsDirty();
            P.width = Q;
            P.height = R;
          }
        }
        this._objects = v;
        for (var W = this.node.children, Y = /^(?:img|text)\d+$/, G = 0, _ = W.length; G < _; G++) {
          var ra = W[G];
          var sa = ra._name;
          if (Y.test(sa) && !g[sa]) {
            ra.destroy();
          }
        }
      }
    });
    cc.TiledObjectGroup = a.exports = b;
  }, {}],
  312: [function (d, a) {
    "use strict";

    var b = cc.Class({
      name: "cc.TiledTile",
      extends: cc.Component,
      editor: false,
      ctor: function () {
        this._layer = null;
      },
      properties: {
        _x: 0,
        _y: 0,
        x: {
          get: function () {
            return this._x;
          },
          set: function (b) {
            if (b !== this._x) {
              if (!(this._layer && this._layer._isInvalidPosition(b, this._y))) {
                this._resetTile();
                this._x = b;
                this._updateInfo();
              }
            }
          },
          type: cc.Integer
        },
        y: {
          get: function () {
            return this._y;
          },
          set: function (b) {
            if (b !== this._y) {
              if (!(this._layer && this._layer._isInvalidPosition(this._x, b))) {
                this._resetTile();
                this._y = b;
                this._updateInfo();
              }
            }
          },
          type: cc.Integer
        },
        gid: {
          get: function () {
            if (this._layer) {
              return this._layer.getTileGIDAt(this._x, this._y);
            } else {
              return 0;
            }
          },
          set: function (b) {
            if (this._layer) {
              this._layer.setTileGIDAt(b, this._x, this._y);
            }
          },
          type: cc.Integer
        }
      },
      onEnable: function () {
        var b = this.node.parent;
        this._layer = b.getComponent(cc.TiledLayer);
        this._resetTile();
        this._updateInfo();
      },
      onDisable: function () {
        this._resetTile();
      },
      _resetTile: function () {
        if (this._layer && this._layer.getTiledTileAt(this._x, this._y) === this) {
          this._layer.setTiledTileAt(this._x, this._y, null);
        }
      },
      _updateInfo: function () {
        if (this._layer) {
          var c = this._x;
          var a = this._y;
          if (!this._layer.getTiledTileAt(c, a)) {
            this.node.setPosition(this._layer.getPositionAt(c, a));
            this._layer.setTiledTileAt(c, a, this);
          }
        }
      }
    });
    cc.TiledTile = a.exports = b;
  }, {}],
  313: [function (b) {
    "use strict";

    b("./CCTiledMap");
    b("./CCTiledMapRenderDataList");
    b("./tiledmap-buffer");
    b("./tmx-layer-assembler");
  }, {
    "./CCTiledMap": 308,
    "./CCTiledMapRenderDataList": 310,
    "./tiledmap-buffer": 314,
    "./tmx-layer-assembler": 315
  }],
  314: [function (d, a) {
    "use strict";

    var b = cc.Class({
      name: "cc.TiledMapBuffer",
      extends: d("../core/renderer/webgl/quad-buffer"),
      _updateOffset: function () {
        var b = this._offsetInfo;
        b.vertexOffset = this.vertexOffset;
        b.indiceOffset = this.indiceOffset;
        b.byteOffset = this.byteOffset;
      },
      adjust: function (c, a) {
        this.vertexOffset += c;
        this.indiceOffset += a;
        this.indiceStart = this.indiceOffset;
        this.byteOffset = this.byteOffset + c * this._vertexBytes;
        this._dirty = true;
      }
    });
    cc.TiledMapBuffer = a.exports = b;
  }, {
    "../core/renderer/webgl/quad-buffer": 222
  }],
  315: [function (a, b, j) {
    "use strict";

    j.__esModule = true;
    j.default = undefined;
    var e;
    var n = (e = a("../core/renderer/assembler")) && e.__esModule ? e : {
      default: e
    };
    var q = a("../core/value-types");
    function t(c, a) {
      return (t = Object.setPrototypeOf || function (c, a) {
        c.__proto__ = a;
        return c;
      })(c, a);
    }
    var w = a("./CCTiledLayer");
    var r = a("./CCTiledMap");
    var o = r.TileFlag;
    var c = o.FLIPPED_MASK;
    var x = a("../core/renderer/");
    var h = a("../core/renderer/webgl/vertex-format").vfmtPosUvColor;
    var l = parseInt(10922.5);
    var u = r.RenderOrder;
    var d = a("../core/renderer/render-flow");
    var y = cc.mat4();
    var z = cc.v3();
    var f = {
      row: 0,
      col: 0
    };
    var g = {
      x: 0,
      y: 0
    };
    var D = {
      x: 0,
      y: 0
    };
    var F = {
      x: 0,
      y: 0
    };
    var H = {
      x: 0,
      y: 0
    };
    var J = null;
    var Y = null;
    var Z = 0;
    var _ = 0;
    var I = 0;
    var S = 0;
    var A = null;
    var C = null;
    var ma = null;
    var na = null;
    var oa = null;
    var pa = null;
    var qa = null;
    var ra = null;
    function v(b) {
      b._updateLocalMatrix();
      q.Mat4.mul(b._worldMatrix, A, b._matrix);
      b._renderFlag &= ~(d.FLAG_TRANSFORM | d.FLAG_BREAK_FLOW);
      d.visitRootNode(b);
      b._renderFlag |= d.FLAG_BREAK_FLOW;
    }
    function E() {
      if (Y._count !== 0) {
        C.material = J.material;
        C.node = pa.node;
        C._flushIA(J.ia);
        if (Z >= l) {
          na.uploadData();
          na.switchBuffer();
          qa = na._vData;
          ra = na._uintVData;
          J = ma.popRenderData(na);
          Y = J.ia;
          _ = 0;
          Z = 0;
        } else {
          J = ma.popRenderData(na);
          Y = J.ia;
        }
        J.material = oa;
      }
    }
    function B(a, b) {
      var c = pa._getNodesByRowCol(a, b);
      if (c && c.count != 0) {
        var d = c.list;
        var e = 0;
        var i = 0;
        E();
        C.worldMatDirty++;
        for (; e < c.count;) {
          var j = d[i];
          i++;
          if (j) {
            v(j.node);
            if (e !== i) {
              d[e] = j;
              j._index = e;
            }
            e++;
          }
        }
        d.length = e;
        C.worldMatDirty--;
        ma.pushNodesList(J, d);
        C._flush();
        C.node = pa.node;
      }
    }
    function V(c, a) {
      g.x = c.l;
      g.y = c.t;
      D.x = c.r;
      D.y = c.t;
      F.x = c.l;
      F.y = c.b;
      H.x = c.r;
      H.y = c.b;
      var b = null;
      if ((a & o.DIAGONAL) >>> 0) {
        b = D;
        D = F;
        F = b;
      }
      if ((a & o.HORIZONTAL) >>> 0) {
        b = g;
        g = D;
        D = b;
        b = F;
        F = H;
        H = b;
      }
      if ((a & o.VERTICAL) >>> 0) {
        b = g;
        g = F;
        F = b;
        b = D;
        D = H;
        H = b;
      }
    }
    var k = function (d) {
      var a;
      var e;
      function i() {
        return d.apply(this, arguments) || this;
      }
      e = d;
      (a = i).prototype = Object.create(e.prototype);
      a.prototype.constructor = a;
      t(a, e);
      var k = i.prototype;
      k.updateRenderData = function (b) {
        if (!b._renderDataList) {
          b._buffer = new cc.TiledMapBuffer(x._handle, h);
          b._renderDataList = new cc.TiledMapRenderDataList();
        }
      };
      k.fillBuffers = function (a, b) {
        if (a._vertices.length !== 0) {
          a._updateCulling();
          var c = a.node;
          I = a._leftDownToCenterX;
          S = a._leftDownToCenterY;
          A = c._worldMatrix;
          C = b;
          pa = a;
          ma = a._renderDataList;
          na = a._buffer;
          if (a._isCullingDirty() || a._isUserNodeDirty() || a._hasAnimation() || a._hasTiledNode()) {
            var d;
            var e;
            na.reset();
            if (a._enableCulling) {
              var g = a._cullingRect;
              d = g.leftDown;
              e = g.rightTop;
            } else {
              d = f;
              e = a._rightTop;
            }
            var h = (e.row - d.row + 1) * (e.col - d.col + 1);
            if (h > l) {
              h = l;
            }
            na.request(h * 4, h * 6);
            switch (a._renderOrder) {
              case u.RightDown:
                this.traverseGrids(d, e, -1, 1);
                break;
              case u.LeftDown:
                this.traverseGrids(d, e, -1, -1);
                break;
              case u.RightUp:
                this.traverseGrids(d, e, 1, 1);
                break;
              case u.LeftUp:
                this.traverseGrids(d, e, 1, -1);
            }
            a._setCullingDirty(false);
            a._setUserNodeDirty(false);
          } else {
            for (var j = null, m = null, n = null, o = 0; o < ma._offset; o++) {
              if ((m = (j = ma._dataList[o]).nodesRenderList).length > 0) {
                b.worldMatDirty++;
                for (var p = 0; p < m.length; p++) {
                  if (n = m[p]) {
                    for (var r = 0; r < n.length; r++) {
                      var B = n[r];
                      if (B) {
                        v(B.node);
                      }
                    }
                  }
                }
                b.worldMatDirty--;
                b._flush();
              }
              if (j.ia._count > 0) {
                b.material = j.material;
                b.node = c;
                b._flushIA(j.ia);
              }
            }
          }
          J = null;
          Y = null;
          A = null;
          C = null;
          ma = null;
          na = null;
          oa = null;
          pa = null;
          qa = null;
          ra = null;
        }
      };
      k.traverseGrids = function (a, b, d, e) {
        ma.reset();
        if (!(b.row < 0 || b.col < 0)) {
          J = ma.popRenderData(na);
          Y = J.ia;
          qa = na._vData;
          ra = na._uintVData;
          Z = 0;
          _ = 0;
          oa = null;
          var f = pa.node;
          var h = (f.parent ? f.parent._opacity / 255 : 1) * f._opacity;
          f._color._fastSetA(h);
          var i;
          var j;
          var k;
          var m;
          var n;
          var o;
          var p;
          var q;
          var u = f._color._val;
          var K = pa._tiledTiles;
          var v = pa._texGrids;
          var Q = pa._tiles;
          var W = pa._texIdToMatIndex;
          var w = pa._materials;
          var X = pa._vertices;
          var z = null;
          var $ = 0;
          var aa = 0;
          var ba = 0;
          var ca = 0;
          var da = 0;
          var ea = null;
          var fa = -1;
          var ga = 0;
          var ha = true;
          for (d == -1 ? (m = b.row, n = a.row) : (m = a.row, n = b.row); (n - m) * d >= 0; m += d) {
            i = X[m];
            ha = (ga = pa._getNodesCountByRow(m)) == 0 && i != null;
            if (e == 1) {
              j = ha && a.col < i.minCol ? i.minCol : a.col;
              k = ha && b.col > i.maxCol ? i.maxCol : b.col;
            } else {
              j = ha && b.col > i.maxCol ? i.maxCol : b.col;
              k = ha && a.col < i.minCol ? i.minCol : a.col;
            }
            i = X[m];
            ha = (ga = pa._getNodesCountByRow(m)) == 0 && i != null;
            if (e == 1) {
              j = ha && a.col < i.minCol ? i.minCol : a.col;
              k = ha && b.col > i.maxCol ? i.maxCol : b.col;
            } else {
              j = ha && b.col > i.maxCol ? i.maxCol : b.col;
              k = ha && a.col < i.minCol ? i.minCol : a.col;
            }
            for (; (k - j) * e >= 0; j += e) {
              if (o = i && i[j]) {
                if (z = v[(($ = Q[o.index]) & c) >>> 0]) {
                  if (fa !== z.texId) {
                    if (fa !== -1) {
                      E();
                    }
                    q = W[fa = z.texId];
                    oa = w[q];
                    J.material = oa;
                  }
                  if (oa) {
                    aa = o.left - I;
                    ba = o.bottom - S;
                    ca = aa + (p = z.tileset._tileSize).width;
                    da = ba + p.height;
                    if (ea = K[o.index]) {
                      if (ea.node.active) {
                        ea.node._color._fastSetA(ea.node._opacity * h / 255);
                        this.fillByTiledNode(ea.node, qa, ra, aa, ca, da, ba);
                      }
                    } else {
                      qa[_] = aa;
                      qa[_ + 1] = da;
                      ra[_ + 4] = u;
                      qa[_ + 5] = aa;
                      qa[_ + 6] = ba;
                      ra[_ + 9] = u;
                      qa[_ + 10] = ca;
                      qa[_ + 11] = da;
                      ra[_ + 14] = u;
                      qa[_ + 15] = ca;
                      qa[_ + 16] = ba;
                      ra[_ + 19] = u;
                    }
                    V(z, $);
                    qa[_ + 2] = g.x;
                    qa[_ + 3] = g.y;
                    qa[_ + 7] = F.x;
                    qa[_ + 8] = F.y;
                    qa[_ + 12] = D.x;
                    qa[_ + 13] = D.y;
                    qa[_ + 17] = H.x;
                    qa[_ + 18] = H.y;
                    _ += 20;
                    na.adjust(4, 6);
                    Y._count += 6;
                    Z++;
                    if (ga > 0) {
                      B(m, j);
                    }
                    if (Z >= l) {
                      E();
                    }
                  }
                }
              } else if (ga > 0) {
                B(m, j);
              }
            }
          }
          na.uploadData();
          if (Y._count > 0) {
            C.material = J.material;
            C.node = pa.node;
            C._flushIA(J.ia);
          }
        }
      };
      k.fillByTiledNode = function (p, b, g, e, i, j, k) {
        p._updateLocalMatrix();
        q.Mat4.copy(y, p._matrix);
        q.Vec3.set(z, -(e + I), -(k + S), 0);
        q.Mat4.transform(y, y, z);
        var a = y.m;
        var m = a[0];
        var c = a[1];
        var l = a[4];
        var h = a[5];
        var n = a[12];
        var f = a[13];
        var d = p._color._val;
        b[_] = e * m + j * l + n;
        b[_ + 1] = e * c + j * h + f;
        g[_ + 4] = d;
        b[_ + 5] = e * m + k * l + n;
        b[_ + 6] = e * c + k * h + f;
        g[_ + 9] = d;
        b[_ + 10] = i * m + j * l + n;
        b[_ + 11] = i * c + j * h + f;
        g[_ + 14] = d;
        b[_ + 15] = i * m + k * l + n;
        b[_ + 16] = i * c + k * h + f;
        g[_ + 19] = d;
      };
      return i;
    }(n.default);
    j.default = k;
    n.default.register(w, k);
    b.exports = j.default;
  }, {
    "../core/renderer/": 193,
    "../core/renderer/assembler": 190,
    "../core/renderer/render-flow": 194,
    "../core/renderer/webgl/vertex-format": 225,
    "../core/value-types": 251,
    "./CCTiledLayer": 307,
    "./CCTiledMap": 308
  }],
  316: [function (b) {
    "use strict";

    b("./cocos2d/core");
    b("./cocos2d/animation");
    b("./cocos2d/particle");
    b("./cocos2d/tilemap");
    b("./cocos2d/videoplayer/CCVideoPlayer");
    b("./cocos2d/webview/CCWebView");
    b("./cocos2d/core/components/CCStudioComponent");
    b("./extensions/ccpool/CCNodePool");
    b("./cocos2d/actions");
    b("./extensions/spine");
    b("./extensions/dragonbones");
    b("./cocos2d/deprecated");
  }, {
    "./cocos2d/actions": 7,
    "./cocos2d/animation": 16,
    "./cocos2d/core": 155,
    "./cocos2d/core/components/CCStudioComponent": undefined,
    "./cocos2d/deprecated": 263,
    "./cocos2d/particle": 267,
    "./cocos2d/particle/CCParticleAsset": 265,
    "./cocos2d/tilemap": 313,
    "./cocos2d/tilemap/CCTiledMapAsset": 309,
    "./cocos2d/videoplayer/CCVideoPlayer": undefined,
    "./cocos2d/webview/CCWebView": undefined,
    "./extensions/ccpool/CCNodePool": 317,
    "./extensions/dragonbones": undefined,
    "./extensions/spine": 320
  }],
  317: [function (c, a) {
    "use strict";

    cc.NodePool = function (b) {
      this.poolHandlerComp = b;
      this._pool = [];
    };
    cc.NodePool.prototype = {
      constructor: cc.NodePool,
      size: function () {
        return this._pool.length;
      },
      clear: function () {
        for (var c = this._pool.length, a = 0; a < c; ++a) {
          this._pool[a].destroy();
        }
        this._pool.length = 0;
      },
      put: function (c) {
        if (c && this._pool.indexOf(c) === -1) {
          c.removeFromParent(false);
          var a = this.poolHandlerComp ? c.getComponent(this.poolHandlerComp) : null;
          if (a && a.unuse) {
            a.unuse();
          }
          this._pool.push(c);
        }
      },
      get: function () {
        var d = this._pool.length - 1;
        if (d < 0) {
          return null;
        }
        var a = this._pool[d];
        this._pool.length = d;
        var b = this.poolHandlerComp ? a.getComponent(this.poolHandlerComp) : null;
        if (b && b.reuse) {
          b.reuse.apply(b, arguments);
        }
        return a;
      }
    };
    a.exports = cc.NodePool;
  }, {}],
  318: [function (c, b) {
    "use strict";

    var d;
    var l = (d = c("../../cocos2d/core/value-types/mat4")) && d.__esModule ? d : {
      default: d
    };
    var g = c("../../cocos2d/core/renderer/render-flow").FLAG_TRANSFORM;
    function i() {}
    function n(b) {
      Object.defineProperty(b, "_worldMatDirty", {
        get: function () {
          return true;
        },
        set: function () {}
      });
      b._calculWorldMatrix = i;
      b._mulMat = i;
    }
    var f = new l.default();
    var h = cc.Class({
      name: "sp.AttachUtil",
      ctor: function () {
        this._inited = false;
        this._skeleton = null;
        this._skeletonNode = null;
        this._skeletonComp = null;
        this._attachedRootNode = null;
        this._attachedNodeArray = [];
        this._boneIndexToNode = {};
      },
      init: function (b) {
        this._inited = true;
        this._skeleton = b._skeleton;
        this._skeletonNode = b.node;
        this._skeletonComp = b;
      },
      reset: function () {
        this._inited = false;
        this._skeleton = null;
        this._skeletonNode = null;
        this._skeletonComp = null;
      },
      _prepareAttachNode: function () {
        if (this._skeleton) {
          var b = this._skeletonNode.getChildByName("ATTACHED_NODE_TREE");
          if (!(b && b.isValid)) {
            b = new cc.Node("ATTACHED_NODE_TREE");
            n(b);
            this._skeletonNode.addChild(b);
          }
          if (this._skeletonComp.isAnimationCached() && this._skeletonComp._frameCache) {
            this._skeletonComp._frameCache.enableCacheAttachedInfo();
          }
          this._attachedRootNode = b;
          return b;
        }
      },
      _buildBoneAttachedNode: function (e, a) {
        var b = "ATTACHED_NODE:" + e.data.name;
        var c = new cc.Node(b);
        this._buildBoneRelation(c, e, a);
        return c;
      },
      _buildBoneRelation: function (d, a, b) {
        n(d);
        d._bone = a;
        d._boneIndex = b;
        this._attachedNodeArray.push(d);
        this._boneIndexToNode[b] = d;
      },
      getAttachedRootNode: function () {
        return this._attachedRootNode;
      },
      getAttachedNodes: function (g) {
        var a = this._attachedNodeArray;
        var b = [];
        if (!this._inited) {
          return b;
        }
        for (var c = 0, h = a.length; c < h; c++) {
          var e = a[c];
          if (e && e.isValid && e.name === "ATTACHED_NODE:" + g) {
            b.push(e);
          }
        }
        return b;
      },
      _rebuildNodeArray: function () {
        for (var g = this._boneIndexToNode = {}, a = this._attachedNodeArray, b = this._attachedNodeArray = [], c = 0, h = a.length; c < h; c++) {
          var e = a[c];
          if (e && e.isValid && !e._toRemove) {
            b.push(e);
            g[e._boneIndex] = e;
          }
        }
      },
      _sortNodeArray: function () {
        this._attachedNodeArray.sort(function (c, a) {
          if (c._boneIndex < a._boneIndex) {
            return -1;
          } else {
            return 1;
          }
        });
      },
      _getNodeByBoneIndex: function (c) {
        var a = this._boneIndexToNode[c];
        if (a && a.isValid) {
          return a;
        } else {
          return null;
        }
      },
      destroyAttachedNodes: function (g) {
        if (this._inited) {
          for (var a = this._attachedNodeArray, b = function a(g) {
              for (var b = g.children, c = 0, h = b.length; c < h; c++) {
                var e = b[c];
                if (e) {
                  a(e);
                }
              }
              g._toRemove = true;
            }, c = 0, h = a.length; c < h; c++) {
            var e = a[c];
            if (e && e.isValid && e.name.split("ATTACHED_NODE:")[1] === g) {
              b(e);
              e.removeFromParent(true);
              e.destroy();
              a[c] = null;
            }
          }
          this._rebuildNodeArray();
        }
      },
      generateAttachedNodes: function (l) {
        var b = [];
        if (!this._inited) {
          return b;
        }
        var n = this._prepareAttachNode();
        if (!n) {
          return b;
        }
        for (var d = [], e = this._skeleton.bones, f = 0, g = e.length; f < g; f++) {
          var j = e[f];
          if (j.data.name == l) {
            d.push(j);
          }
        }
        for (var o = function (e) {
            if (e) {
              var a = e.data;
              var b = this._getNodeByBoneIndex(a.index);
              if (b) {
                return b;
              }
              b = this._buildBoneAttachedNode(e, a.index);
              var f = o(e.parent) || n;
              b.parent = f;
              return b;
            }
          }.bind(this), k = 0, p = d.length; k < p; k++) {
          var m = o(d[k]);
          b.push(m);
        }
        this._sortNodeArray();
        return b;
      },
      destroyAllAttachedNodes: function () {
        this._attachedRootNode = null;
        this._attachedNodeArray.length = 0;
        this._boneIndexToNode = {};
        if (this._inited) {
          var b = this._skeletonNode.getChildByName("ATTACHED_NODE_TREE");
          if (b) {
            b.removeFromParent(true);
            b.destroy();
            b = null;
          }
        }
      },
      generateAllAttachedNodes: function () {
        if (this._inited) {
          this._boneIndexToNode = {};
          this._attachedNodeArray.length = 0;
          var a = this._prepareAttachNode();
          if (a) {
            for (var b = this._skeleton.bones, c = 0, d = b.length; c < d; c++) {
              var f = b[c];
              var i = f.data;
              var m = null;
              if (f.parent) {
                var n = f.parent.data.index;
                m = this._boneIndexToNode[n];
              } else {
                m = a;
              }
              if (m) {
                var o = m.getChildByName("ATTACHED_NODE:" + i.name);
                if (o && o.isValid) {
                  this._buildBoneRelation(o, f, i.index);
                } else {
                  o = this._buildBoneAttachedNode(f, i.index);
                  m.addChild(o);
                }
              }
            }
            return a;
          }
        }
      },
      _hasAttachedNode: function () {
        return !!this._inited && !!this._skeletonNode.getChildByName("ATTACHED_NODE_TREE");
      },
      _associateAttachedNode: function () {
        if (this._inited) {
          var c = this._skeletonNode.getChildByName("ATTACHED_NODE_TREE");
          if (c && c.isValid) {
            this._attachedRootNode = c;
            this._boneIndexToNode = {};
            this._attachedNodeArray.length = 0;
            n(c);
            if (this._skeletonComp.isAnimationCached() && this._skeletonComp._frameCache) {
              this._skeletonComp._frameCache.enableCacheAttachedInfo();
            }
            for (var a = this._skeleton.bones, b = 0, h = a.length; b < h; b++) {
              var e = a[b];
              var i = e.data;
              var l = null;
              if (e.parent) {
                var o = e.parent.data.index;
                l = this._boneIndexToNode[o];
              } else {
                l = c;
              }
              if (l) {
                var p = l.getChildByName("ATTACHED_NODE:" + i.name);
                if (p && p.isValid) {
                  this._buildBoneRelation(p, e, i.index);
                }
              }
            }
          }
        }
      },
      _syncAttachedNode: function () {
        if (this._inited) {
          var d = this._attachedRootNode;
          var b = this._attachedNodeArray;
          if (!d || !d.isValid) {
            this._attachedRootNode = null;
            b.length = 0;
            return;
          }
          var h = this._skeletonNode._worldMatrix;
          l.default.copy(d._worldMatrix, h);
          d._renderFlag &= ~g;
          var e;
          if (e = this._skeletonComp.isAnimationCached() ? this._skeletonComp._curFrame && this._skeletonComp._curFrame.boneInfos : this._skeleton.bones) {
            for (var j = this._skeletonNode._mulMat, k = function (e, a, b) {
                var c = f.m;
                c[0] = b.a;
                c[1] = b.c;
                c[4] = b.b;
                c[5] = b.d;
                c[12] = b.worldX;
                c[13] = b.worldY;
                j(e, a, f);
              }, a = false, m = 0, o = b.length; m < o; m++) {
              var p = b[m];
              if (p && p.isValid) {
                var s = e[p._boneIndex];
                if (s) {
                  k(p._worldMatrix, d._worldMatrix, s);
                  p._renderFlag &= ~g;
                } else {
                  p.removeFromParent(true);
                  p.destroy();
                  b[m] = null;
                  a = true;
                }
              } else {
                b[m] = null;
                a = true;
              }
            }
            if (a) {
              this._rebuildNodeArray();
            }
          }
        }
      }
    });
    b.exports = sp.AttachUtil = h;
  }, {
    "../../cocos2d/core/renderer/render-flow": 194,
    "../../cocos2d/core/value-types/mat4": 253
  }],
  319: [function (m, b) {
    "use strict";

    var d = m("./track-entry-listeners");
    var f = m("../../cocos2d/core/components/CCRenderComponent");
    var e = m("./lib/spine");
    var g = m("../../cocos2d/core/graphics/graphics");
    var i = m("../../cocos2d/core/renderer/render-flow").FLAG_POST_RENDER;
    var j = m("./skeleton-cache");
    var a = m("./AttachUtil");
    var k = cc.Enum({
      default: -1
    });
    var c = cc.Enum({
      "<None>": 0
    });
    var l = cc.Enum({
      REALTIME: 0,
      SHARED_CACHE: 1,
      PRIVATE_CACHE: 2
    });
    sp.Skeleton = cc.Class({
      name: "sp.Skeleton",
      extends: f,
      editor: false,
      statics: {
        AnimationCacheMode: l
      },
      properties: {
        paused: {
          default: false,
          visible: false
        },
        skeletonData: {
          default: null,
          type: sp.SkeletonData,
          notify: function () {
            this.defaultSkin = "";
            this.defaultAnimation = "";
            this._updateSkeletonData();
          },
          tooltip: false
        },
        defaultSkin: {
          default: "",
          visible: false
        },
        defaultAnimation: {
          default: "",
          visible: false
        },
        animation: {
          get: function () {
            if (this.isAnimationCached()) {
              return this._animationName;
            }
            var b = this.getCurrent(0);
            return b && b.animation.name || "";
          },
          set: function (b) {
            this.defaultAnimation = b;
            if (b) {
              this.setAnimation(0, b, this.loop);
            } else if (!this.isAnimationCached()) {
              this.clearTrack(0);
              this.setToSetupPose();
            }
          },
          visible: false
        },
        _defaultSkinIndex: {
          get: function () {
            if (this.skeletonData) {
              var c = this.skeletonData.getSkinsEnum();
              if (c) {
                if (this.defaultSkin === "") {
                  if (c.hasOwnProperty(0)) {
                    this._defaultSkinIndex = 0;
                    return 0;
                  }
                } else {
                  var a = c[this.defaultSkin];
                  if (a !== undefined) {
                    return a;
                  }
                }
              }
            }
            return 0;
          },
          set: function (d) {
            var a;
            if (this.skeletonData) {
              a = this.skeletonData.getSkinsEnum();
            }
            if (a) {
              var e = a[d];
              if (e !== undefined) {
                this.defaultSkin = e;
                this.setSkin(this.defaultSkin);
              }
            }
          },
          type: k,
          visible: true,
          animatable: false,
          displayName: "Default Skin",
          tooltip: false
        },
        _animationIndex: {
          get: function () {
            var d = this.animation;
            if (this.skeletonData && d) {
              var a = this.skeletonData.getAnimsEnum();
              if (a) {
                var b = a[d];
                if (b !== undefined) {
                  return b;
                }
              }
            }
            return 0;
          },
          set: function (d) {
            var a;
            if (d !== 0) {
              if (this.skeletonData) {
                a = this.skeletonData.getAnimsEnum();
              }
              if (a) {
                var e = a[d];
                if (e !== undefined) {
                  this.animation = e;
                }
              }
            } else {
              this.animation = "";
            }
          },
          type: c,
          visible: true,
          animatable: false,
          displayName: "Animation",
          tooltip: false
        },
        _preCacheMode: -1,
        _cacheMode: l.REALTIME,
        _defaultCacheMode: {
          default: 0,
          type: l,
          notify: function () {
            this.setAnimationCacheMode(this._defaultCacheMode);
          },
          editorOnly: true,
          visible: true,
          animatable: false,
          displayName: "Animation Cache Mode",
          tooltip: false
        },
        loop: {
          default: true,
          tooltip: false
        },
        premultipliedAlpha: {
          default: true,
          tooltip: false
        },
        timeScale: {
          default: 1,
          tooltip: false
        },
        debugSlots: {
          default: false,
          editorOnly: true,
          tooltip: false,
          notify: function () {
            this._updateDebugDraw();
          }
        },
        debugBones: {
          default: false,
          editorOnly: true,
          tooltip: false,
          notify: function () {
            this._updateDebugDraw();
          }
        },
        debugMesh: {
          default: false,
          editorOnly: true,
          tooltip: false,
          notify: function () {
            this._updateDebugDraw();
          }
        },
        useTint: {
          default: false,
          tooltip: false,
          notify: function () {
            this._updateUseTint();
          }
        },
        enableBatch: {
          default: false,
          notify: function () {
            this._updateBatch();
          },
          tooltip: false
        },
        _accTime: 0,
        _playCount: 0,
        _frameCache: null,
        _curFrame: null,
        _skeletonCache: null,
        _animationName: "",
        _animationQueue: [],
        _headAniInfo: null,
        _playTimes: 0,
        _isAniComplete: true
      },
      ctor: function () {
        this._effectDelegate = null;
        this._skeleton = null;
        this._rootBone = null;
        this._listener = null;
        this._materialCache = {};
        this._debugRenderer = null;
        this._startSlotIndex = -1;
        this._endSlotIndex = -1;
        this._startEntry = {
          animation: {
            name: ""
          },
          trackIndex: 0
        };
        this._endEntry = {
          animation: {
            name: ""
          },
          trackIndex: 0
        };
        this.attachUtil = new a();
      },
      _getDefaultMaterial: function () {
        return cc.Material.getBuiltinMaterial("2d-spine");
      },
      _updateMaterial: function () {
        var e = this.useTint || this.isAnimationCached() && true;
        var a = this.getMaterial(0);
        if (a) {
          a.define("USE_TINT", e);
          a.define("CC_USE_MODEL", !this.enableBatch);
          var b = this.premultipliedAlpha ? cc.gfx.BLEND_ONE : cc.gfx.BLEND_SRC_ALPHA;
          var c = cc.gfx.BLEND_ONE_MINUS_SRC_ALPHA;
          a.setBlend(true, cc.gfx.BLEND_FUNC_ADD, b, b, cc.gfx.BLEND_FUNC_ADD, c, c);
        }
        this._materialCache = {};
      },
      disableRender: function () {
        this._super();
        this.node._renderFlag &= ~i;
      },
      markForRender: function (b) {
        this._super(b);
        if (b) {
          this.node._renderFlag |= i;
        } else {
          this.node._renderFlag &= ~i;
        }
      },
      _updateUseTint: function () {
        var c = this.getMaterial(0);
        if (c) {
          var a = this.useTint || this.isAnimationCached() && true;
          c.define("USE_TINT", a);
        }
        this._materialCache = {};
      },
      _updateBatch: function () {
        var b = this.getMaterial(0);
        if (b) {
          b.define("CC_USE_MODEL", !this.enableBatch);
        }
        this._materialCache = {};
      },
      _validateRender: function () {
        var b = this.skeletonData;
        if (b && b.isTexturesLoaded()) {
          this._super();
        } else {
          this.disableRender();
        }
      },
      setSkeletonData: function (a) {
        if (a.width != null && a.height != null) {
          this.node.setContentSize(a.width, a.height);
        }
        if (this._cacheMode === l.SHARED_CACHE) {
          this._skeletonCache = j.sharedCache;
        } else if (this._cacheMode === l.PRIVATE_CACHE) {
          this._skeletonCache = new j();
          this._skeletonCache.enablePrivateMode();
        }
        if (this.isAnimationCached()) {
          if (!this.debugBones) {
            this.debugSlots;
          }
          var b = this._skeletonCache.getSkeletonCache(this.skeletonData._uuid, a);
          this._skeleton = b.skeleton;
          this._clipper = b.clipper;
          this._rootBone = this._skeleton.getRootBone();
        } else {
          this._skeleton = new e.Skeleton(a);
          this._clipper = new e.SkeletonClipping();
          this._rootBone = this._skeleton.getRootBone();
        }
        this.markForRender(true);
      },
      setSlotsRange: function (c, a) {
        if (!this.isAnimationCached()) {
          this._startSlotIndex = c;
          this._endSlotIndex = a;
        }
      },
      setAnimationStateData: function (c) {
        if (this.isAnimationCached()) ;else {
          var a = new e.AnimationState(c);
          if (this._listener) {
            if (this._state) {
              this._state.removeListener(this._listener);
            }
            a.addListener(this._listener);
          }
          this._state = a;
        }
      },
      __preload: function () {
        this._super();
        for (var e = this.node.children, a = 0, f = e.length; a < f; a++) {
          var c = e[a];
          if (c && c._name === "DEBUG_DRAW_NODE") {
            c.destroy();
          }
        }
        this._updateSkeletonData();
        this._updateDebugDraw();
        this._updateUseTint();
        this._updateBatch();
      },
      setAnimationCacheMode: function (b) {
        if (this._preCacheMode !== b) {
          this._cacheMode = b;
          this._updateSkeletonData();
          this._updateUseTint();
        }
      },
      isAnimationCached: function () {
        return this._cacheMode !== l.REALTIME;
      },
      update: function (e) {
        if (!this.paused) {
          e *= this.timeScale * sp.timeScale;
          if (this.isAnimationCached()) {
            if (this._isAniComplete) {
              if (this._animationQueue.length === 0 && !this._headAniInfo) {
                var f = this._frameCache;
                if (f && f.isInvalid()) {
                  f.updateToFrame();
                  var b = f.frames;
                  this._curFrame = b[b.length - 1];
                }
                return;
              }
              if (!this._headAniInfo) {
                this._headAniInfo = this._animationQueue.shift();
              }
              this._accTime += e;
              if (this._accTime > this._headAniInfo.delay) {
                var c = this._headAniInfo;
                this._headAniInfo = null;
                this.setAnimation(0, c.animationName, c.loop);
              }
              return;
            }
            this._updateCache(e);
          } else {
            this._updateRealtime(e);
          }
        }
      },
      _emitCacheCompleteEvent: function () {
        if (this._listener) {
          this._endEntry.animation.name = this._animationName;
          if (this._listener.complete) {
            this._listener.complete(this._endEntry);
          }
          if (this._listener.end) {
            this._listener.end(this._endEntry);
          }
        }
      },
      _updateCache: function (a) {
        var b = this._frameCache;
        if (b.isInited()) {
          var c = b.frames;
          var d = j.FrameTime;
          if (this._accTime == 0 && this._playCount == 0) {
            this._startEntry.animation.name = this._animationName;
            if (this._listener && this._listener.start) {
              this._listener.start(this._startEntry);
            }
          }
          this._accTime += a;
          var e = Math.floor(this._accTime / d);
          if (!b.isCompleted) {
            b.updateToFrame(e);
          }
          if (b.isCompleted && e >= c.length) {
            this._playCount++;
            if (this._playTimes > 0 && this._playCount >= this._playTimes) {
              this._curFrame = c[c.length - 1];
              this._accTime = 0;
              this._playCount = 0;
              this._isAniComplete = true;
              this._emitCacheCompleteEvent();
              return;
            }
            this._accTime = 0;
            e = 0;
            this._emitCacheCompleteEvent();
          }
          this._curFrame = c[e];
        }
      },
      _updateRealtime: function (d) {
        var a = this._skeleton;
        var b = this._state;
        if (a) {
          a.update(d);
          if (b) {
            b.update(d);
            b.apply(a);
          }
        }
      },
      setVertexEffectDelegate: function (b) {
        this._effectDelegate = b;
      },
      updateWorldTransform: function () {
        if (this.isAnimationCached() && this._skeleton) {
          this._skeleton.updateWorldTransform();
        }
      },
      setToSetupPose: function () {
        if (this._skeleton) {
          this._skeleton.setToSetupPose();
        }
      },
      setBonesToSetupPose: function () {
        if (this._skeleton) {
          this._skeleton.setBonesToSetupPose();
        }
      },
      setSlotsToSetupPose: function () {
        if (this._skeleton) {
          this._skeleton.setSlotsToSetupPose();
        }
      },
      updateAnimationCache: function (c) {
        if (this.isAnimationCached()) {
          var a = this.skeletonData._uuid;
          if (this._skeletonCache) {
            this._skeletonCache.updateAnimationCache(a, c);
          }
        }
      },
      invalidAnimationCache: function () {
        if (this.isAnimationCached() && this._skeletonCache) {
          this._skeletonCache.invalidAnimationCache(this.skeletonData._uuid);
        }
      },
      findBone: function (b) {
        if (this._skeleton) {
          return this._skeleton.findBone(b);
        } else {
          return null;
        }
      },
      findSlot: function (b) {
        if (this._skeleton) {
          return this._skeleton.findSlot(b);
        } else {
          return null;
        }
      },
      setSkin: function (b) {
        if (this._skeleton) {
          this._skeleton.setSkinByName(b);
          this._skeleton.setSlotsToSetupPose();
        }
        this.invalidAnimationCache();
      },
      getAttachment: function (c, a) {
        if (this._skeleton) {
          return this._skeleton.getAttachmentByName(c, a);
        } else {
          return null;
        }
      },
      setAttachment: function (c, a) {
        if (this._skeleton) {
          this._skeleton.setAttachment(c, a);
        }
        this.invalidAnimationCache();
      },
      getTextureAtlas: function (b) {
        return b.region;
      },
      setMix: function (d, a, b) {
        if (this._state) {
          this._state.data.setMix(d, a, b);
        }
      },
      setAnimation: function (g, a, b) {
        this._playTimes = b ? 0 : 1;
        this._animationName = a;
        if (this.isAnimationCached()) {
          if (!this._skeletonCache) {
            return null;
          }
          var c = this._skeletonCache.getAnimationCache(this.skeletonData._uuid, a);
          if (!c) {
            c = this._skeletonCache.initAnimationCache(this.skeletonData._uuid, a);
          }
          if (c) {
            this._isAniComplete = false;
            this._accTime = 0;
            this._playCount = 0;
            this._frameCache = c;
            if (this.attachUtil._hasAttachedNode()) {
              this._frameCache.enableCacheAttachedInfo();
            }
            this._frameCache.updateToFrame(0);
            this._curFrame = this._frameCache.frames[0];
          }
        } else if (this._skeleton) {
          var h = this._skeleton.data.findAnimation(a);
          if (!h) {
            return null;
          }
          var e = this._state.setAnimationWith(g, h, b);
          this._state.apply(this._skeleton);
          return e;
        }
        return null;
      },
      addAnimation: function (f, a, b, c) {
        c = c || 0;
        if (this.isAnimationCached()) {
          this._animationQueue.push({
            animationName: a,
            loop: b,
            delay: c
          });
        } else if (this._skeleton) {
          var g = this._skeleton.data.findAnimation(a);
          if (g) {
            return this._state.addAnimationWith(f, g, b, c);
          } else {
            return null;
          }
        }
        return null;
      },
      findAnimation: function (b) {
        if (this._skeleton) {
          return this._skeleton.data.findAnimation(b);
        } else {
          return null;
        }
      },
      getCurrent: function (b) {
        if (this.isAnimationCached()) ;else if (this._state) {
          return this._state.getCurrent(b);
        }
        return null;
      },
      clearTracks: function () {
        if (!this.isAnimationCached()) {
          if (this._state) {
            this._state.clearTracks();
          }
        }
      },
      clearTrack: function (b) {
        if (!this.isAnimationCached()) {
          if (this._state) {
            this._state.clearTrack(b);
          }
        }
      },
      setStartListener: function (b) {
        this._ensureListener();
        this._listener.start = b;
      },
      setInterruptListener: function (b) {
        this._ensureListener();
        this._listener.interrupt = b;
      },
      setEndListener: function (b) {
        this._ensureListener();
        this._listener.end = b;
      },
      setDisposeListener: function (b) {
        this._ensureListener();
        this._listener.dispose = b;
      },
      setCompleteListener: function (b) {
        this._ensureListener();
        this._listener.complete = b;
      },
      setEventListener: function (b) {
        this._ensureListener();
        this._listener.event = b;
      },
      setTrackStartListener: function (c, a) {
        d.getListeners(c).start = a;
      },
      setTrackInterruptListener: function (c, a) {
        d.getListeners(c).interrupt = a;
      },
      setTrackEndListener: function (c, a) {
        d.getListeners(c).end = a;
      },
      setTrackDisposeListener: function (c, a) {
        d.getListeners(c).dispose = a;
      },
      setTrackCompleteListener: function (c, e) {
        d.getListeners(c).complete = function (b) {
          var a = Math.floor(b.trackTime / b.animationEnd);
          e(b, a);
        };
      },
      setTrackEventListener: function (c, a) {
        d.getListeners(c).event = a;
      },
      getState: function () {
        return this._state;
      },
      _resetDefaultAnim: false,
      _resetDefaultSkin: false,
      _updateAnimEnum: false,
      _updateSkinEnum: false,
      _ensureListener: function () {
        if (!this._listener) {
          this._listener = new d();
          if (this._state) {
            this._state.addListener(this._listener);
          }
        }
      },
      _updateSkeletonData: function () {
        if (this.skeletonData) {
          var b = this.skeletonData.getRuntimeData();
          if (b) {
            try {
              this.setSkeletonData(b);
              if (!this.isAnimationCached()) {
                this.setAnimationStateData(new e.AnimationStateData(this._skeleton.data));
              }
              if (this.defaultSkin) {
                this.setSkin(this.defaultSkin);
              }
            } catch (b) {}
            this.attachUtil.init(this);
            this.attachUtil._associateAttachedNode();
            this._preCacheMode = this._cacheMode;
            this.animation = this.defaultAnimation;
          } else {
            this.disableRender();
          }
        } else {
          this.disableRender();
        }
      },
      _refreshInspector: function () {
        this._updateAnimEnum();
        this._updateSkinEnum();
        Editor.Utils.refreshSelectedInspector("node", this.node.uuid);
      },
      _updateDebugDraw: function () {
        if (this.debugBones || this.debugSlots) {
          if (!this._debugRenderer) {
            var c = new cc.PrivateNode();
            c.name = "DEBUG_DRAW_NODE";
            var a = c.addComponent(g);
            a.lineWidth = 1;
            a.strokeColor = cc.color(255, 0, 0, 255);
            this._debugRenderer = a;
          }
          this._debugRenderer.node.parent = this.node;
          this.isAnimationCached();
        } else if (this._debugRenderer) {
          this._debugRenderer.node.parent = null;
        }
      }
    });
    b.exports = sp.Skeleton;
  }, {
    "../../cocos2d/core/components/CCRenderComponent": 109,
    "../../cocos2d/core/graphics/graphics": 151,
    "../../cocos2d/core/renderer/render-flow": 194,
    "./AttachUtil": 318,
    "./lib/spine": 321,
    "./skeleton-cache": 322,
    "./track-entry-listeners": 326
  }],
  320: [function (c) {
    "use strict";

    var a = typeof window == "undefined" ? global : window;
    a.spine = c("./lib/spine");
    a.sp = a.sp || {};
    sp._timeScale = 1;
    Object.defineProperty(sp, "timeScale", {
      get: function () {
        return this._timeScale;
      },
      set: function (b) {
        this._timeScale = b;
      },
      configurable: true
    });
    sp.ATTACHMENT_TYPE = {
      REGION: 0,
      BOUNDING_BOX: 1,
      MESH: 2,
      SKINNED_MESH: 3
    };
    sp.AnimationEventType = cc.Enum({
      START: 0,
      INTERRUPT: 1,
      END: 2,
      DISPOSE: 3,
      COMPLETE: 4,
      EVENT: 5
    });
    sp.spine = a.spine;
    c("./skeleton-texture");
    c("./skeleton-data");
    c("./vertex-effect-delegate");
    c("./Skeleton");
    c("./spine-assembler");
  }, {
    "./Skeleton": 319,
    "./lib/spine": 321,
    "./skeleton-data": 323,
    "./skeleton-texture": 324,
    "./spine-assembler": 325,
    "./vertex-effect-delegate": 327
  }],
  321: [function (g, a) {
    "use strict";

    var h;
    var b;
    var i;
    h = function (c, a) {
      return (h = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (c, a) {
        c.__proto__ = a;
      } || function (d, a) {
        for (var b in a) {
          if (a.hasOwnProperty(b)) {
            d[b] = a[b];
          }
        }
      })(c, a);
    };
    function l(c, a) {
      function b() {
        this.constructor = c;
      }
      h(c, a);
      c.prototype = a === null ? Object.create(a) : (b.prototype = a.prototype, new b());
    }
    (function (A) {
      var C;
      var j;
      var e;
      var E = function () {
        function b(e, a, b) {
          if (e == null) {
            throw Error("name cannot be null.");
          }
          if (a == null) {
            throw Error("timelines cannot be null.");
          }
          this.name = e;
          this.timelines = a;
          this.timelineIds = [];
          for (var c = 0; c < a.length; c++) {
            this.timelineIds[a[c].getPropertyId()] = true;
          }
          this.duration = b;
        }
        b.prototype.hasTimeline = function (b) {
          return this.timelineIds[b] == 1;
        };
        b.prototype.apply = function (e, b, h, i, g, j, k, l) {
          if (e == null) {
            throw Error("skeleton cannot be null.");
          }
          if (i && this.duration != 0) {
            h %= this.duration;
            if (b > 0) {
              b %= this.duration;
            }
          }
          for (var a = this.timelines, m = 0, n = a.length; m < n; m++) {
            a[m].apply(e, b, h, g, j, k, l);
          }
        };
        b.binarySearch = function (g, a, b) {
          if (b === undefined) {
            b = 1;
          }
          var h = 0;
          var i = g.length / b - 2;
          if (i == 0) {
            return b;
          }
          for (var j = i >>> 1;;) {
            if (g[(j + 1) * b] <= a) {
              h = j + 1;
            } else {
              i = j;
            }
            if (h == i) {
              return (h + 1) * b;
            }
            j = h + i >>> 1;
          }
        };
        b.linearSearch = function (f, a, b) {
          for (var c = 0, g = f.length - b; c <= g; c += b) {
            if (f[c] > a) {
              return c;
            }
          }
          return -1;
        };
        return b;
      }();
      A.Animation = E;
      (function (b) {
        b[b.setup = 0] = "setup";
        b[b.first = 1] = "first";
        b[b.replace = 2] = "replace";
        b[b.add = 3] = "add";
      })(C = A.MixBlend || (A.MixBlend = {}));
      (function (b) {
        b[b.mixIn = 0] = "mixIn";
        b[b.mixOut = 1] = "mixOut";
      })(j = A.MixDirection || (A.MixDirection = {}));
      (function (b) {
        b[b.rotate = 0] = "rotate";
        b[b.translate = 1] = "translate";
        b[b.scale = 2] = "scale";
        b[b.shear = 3] = "shear";
        b[b.attachment = 4] = "attachment";
        b[b.color = 5] = "color";
        b[b.deform = 6] = "deform";
        b[b.event = 7] = "event";
        b[b.drawOrder = 8] = "drawOrder";
        b[b.ikConstraint = 9] = "ikConstraint";
        b[b.transformConstraint = 10] = "transformConstraint";
        b[b.pathConstraintPosition = 11] = "pathConstraintPosition";
        b[b.pathConstraintSpacing = 12] = "pathConstraintSpacing";
        b[b.pathConstraintMix = 13] = "pathConstraintMix";
        b[b.twoColor = 14] = "twoColor";
      })(e = A.TimelineType || (A.TimelineType = {}));
      var f = function () {
        function f(b) {
          if (b <= 0) {
            throw Error("frameCount must be > 0: " + b);
          }
          this.curves = A.Utils.newFloatArray((b - 1) * f.BEZIER_SIZE);
        }
        f.prototype.getFrameCount = function () {
          return this.curves.length / f.BEZIER_SIZE + 1;
        };
        f.prototype.setLinear = function (b) {
          this.curves[b * f.BEZIER_SIZE] = f.LINEAR;
        };
        f.prototype.setStepped = function (b) {
          this.curves[b * f.BEZIER_SIZE] = f.STEPPED;
        };
        f.prototype.getCurveType = function (b) {
          var a = b * f.BEZIER_SIZE;
          if (a == this.curves.length) {
            return f.LINEAR;
          }
          var c = this.curves[a];
          if (c == f.LINEAR) {
            return f.LINEAR;
          } else if (c == f.STEPPED) {
            return f.STEPPED;
          } else {
            return f.BEZIER;
          }
        };
        f.prototype.setCurve = function (b, d, e, g, h) {
          var i = (-d * 2 + g) * 0.03;
          var j = (-e * 2 + h) * 0.03;
          var a = ((d - g) * 3 + 1) * 0.006;
          var k = ((e - h) * 3 + 1) * 0.006;
          var c = i * 2 + a;
          var m = j * 2 + k;
          var n = d * 0.3 + i + a * 0.16666667;
          var o = e * 0.3 + j + k * 0.16666667;
          var q = b * f.BEZIER_SIZE;
          var u = this.curves;
          u[q++] = f.BEZIER;
          for (var v = n, x = o, A = q + f.BEZIER_SIZE - 1; q < A; q += 2) {
            u[q] = v;
            u[q + 1] = x;
            n += c;
            o += m;
            c += a;
            m += k;
            v += n;
            x += o;
          }
        };
        f.prototype.getCurvePercent = function (b, d) {
          d = A.MathUtils.clamp(d, 0, 1);
          var h = this.curves;
          var g = b * f.BEZIER_SIZE;
          var j = h[g];
          if (j == f.LINEAR) {
            return d;
          }
          if (j == f.STEPPED) {
            return 0;
          }
          for (var k = 0, n = ++g, m = g + f.BEZIER_SIZE - 1; g < m; g += 2) {
            if ((k = h[g]) >= d) {
              var c = undefined;
              var o = undefined;
              if (g == n) {
                c = 0;
                o = 0;
              } else {
                c = h[g - 2];
                o = h[g - 1];
              }
              return o + (h[g + 1] - o) * (d - c) / (k - c);
            }
          }
          var r = h[g - 1];
          return r + (1 - r) * (d - k) / (1 - k);
        };
        f.LINEAR = 0;
        f.STEPPED = 1;
        f.BEZIER = 2;
        f.BEZIER_SIZE = 19;
        return f;
      }();
      A.CurveTimeline = f;
      var i = function (d) {
        function f(b) {
          var a = d.call(this, b) || this;
          a.frames = A.Utils.newFloatArray(b << 1);
          return a;
        }
        l(f, d);
        f.prototype.getPropertyId = function () {
          return (e.rotate << 24) + this.boneIndex;
        };
        f.prototype.setFrame = function (d, e, b) {
          d <<= 1;
          this.frames[d] = e;
          this.frames[d + f.ROTATION] = b;
        };
        f.prototype.apply = function (g, a, b, e, i, j) {
          var k = this.frames;
          var c = g.bones[this.boneIndex];
          if (c.active) {
            if (b < k[0]) {
              switch (j) {
                case C.setup:
                  c.rotation = c.data.rotation;
                  return;
                case C.first:
                  var l = c.data.rotation - c.rotation;
                  c.rotation += (l - (16384 - (16384.499999999996 - l / 360 | 0)) * 360) * i;
              }
            } else if (b >= k[k.length - f.ENTRIES]) {
              var h = k[k.length + f.PREV_ROTATION];
              switch (j) {
                case C.setup:
                  c.rotation = c.data.rotation + h * i;
                  break;
                case C.first:
                case C.replace:
                  h += c.data.rotation - c.rotation;
                  h -= (16384 - (16384.499999999996 - h / 360 | 0)) * 360;
                case C.add:
                  c.rotation += h * i;
              }
            } else {
              var m = E.binarySearch(k, b, f.ENTRIES);
              var o = k[m + f.PREV_ROTATION];
              var d = k[m];
              var q = this.getCurvePercent((m >> 1) - 1, 1 - (b - d) / (k[m + f.PREV_TIME] - d));
              var p = k[m + f.ROTATION] - o;
              p = o + (p - (16384 - (16384.499999999996 - p / 360 | 0)) * 360) * q;
              switch (j) {
                case C.setup:
                  c.rotation = c.data.rotation + (p - (16384 - (16384.499999999996 - p / 360 | 0)) * 360) * i;
                  break;
                case C.first:
                case C.replace:
                  p += c.data.rotation - c.rotation;
                case C.add:
                  c.rotation += (p - (16384 - (16384.499999999996 - p / 360 | 0)) * 360) * i;
              }
            }
          }
        };
        f.ENTRIES = 2;
        f.PREV_TIME = -2;
        f.PREV_ROTATION = -1;
        f.ROTATION = 1;
        return f;
      }(f);
      A.RotateTimeline = i;
      var a = function (d) {
        function f(b) {
          var a = d.call(this, b) || this;
          a.frames = A.Utils.newFloatArray(b * f.ENTRIES);
          return a;
        }
        l(f, d);
        f.prototype.getPropertyId = function () {
          return (e.translate << 24) + this.boneIndex;
        };
        f.prototype.setFrame = function (e, g, b, c) {
          e *= f.ENTRIES;
          this.frames[e] = g;
          this.frames[e + f.X] = b;
          this.frames[e + f.Y] = c;
        };
        f.prototype.apply = function (g, a, b, e, i, j) {
          var k = this.frames;
          var c = g.bones[this.boneIndex];
          if (c.active) {
            if (b < k[0]) {
              switch (j) {
                case C.setup:
                  c.x = c.data.x;
                  c.y = c.data.y;
                  return;
                case C.first:
                  c.x += (c.data.x - c.x) * i;
                  c.y += (c.data.y - c.y) * i;
              }
            } else {
              var l = 0;
              var p = 0;
              if (b >= k[k.length - f.ENTRIES]) {
                l = k[k.length + f.PREV_X];
                p = k[k.length + f.PREV_Y];
              } else {
                var q = E.binarySearch(k, b, f.ENTRIES);
                l = k[q + f.PREV_X];
                p = k[q + f.PREV_Y];
                var n = k[q];
                var d = this.getCurvePercent(q / f.ENTRIES - 1, 1 - (b - n) / (k[q + f.PREV_TIME] - n));
                l += (k[q + f.X] - l) * d;
                p += (k[q + f.Y] - p) * d;
              }
              switch (j) {
                case C.setup:
                  c.x = c.data.x + l * i;
                  c.y = c.data.y + p * i;
                  break;
                case C.first:
                case C.replace:
                  c.x += (c.data.x + l - c.x) * i;
                  c.y += (c.data.y + p - c.y) * i;
                  break;
                case C.add:
                  c.x += l * i;
                  c.y += p * i;
              }
            }
          }
        };
        f.ENTRIES = 3;
        f.PREV_TIME = -3;
        f.PREV_X = -2;
        f.PREV_Y = -1;
        f.X = 1;
        f.Y = 2;
        return f;
      }(f);
      A.TranslateTimeline = a;
      var n = function (b) {
        function a(c) {
          return b.call(this, c) || this;
        }
        l(a, b);
        a.prototype.getPropertyId = function () {
          return (e.scale << 24) + this.boneIndex;
        };
        a.prototype.apply = function (b, e, i, k, n, c, l) {
          var h = this.frames;
          var o = b.bones[this.boneIndex];
          if (o.active) {
            if (i < h[0]) {
              switch (c) {
                case C.setup:
                  o.scaleX = o.data.scaleX;
                  o.scaleY = o.data.scaleY;
                  return;
                case C.first:
                  o.scaleX += (o.data.scaleX - o.scaleX) * n;
                  o.scaleY += (o.data.scaleY - o.scaleY) * n;
              }
            } else {
              var f = 0;
              var p = 0;
              if (i >= h[h.length - a.ENTRIES]) {
                f = h[h.length + a.PREV_X] * o.data.scaleX;
                p = h[h.length + a.PREV_Y] * o.data.scaleY;
              } else {
                var q = E.binarySearch(h, i, a.ENTRIES);
                f = h[q + a.PREV_X];
                p = h[q + a.PREV_Y];
                var s = h[q];
                var t = this.getCurvePercent(q / a.ENTRIES - 1, 1 - (i - s) / (h[q + a.PREV_TIME] - s));
                f = (f + (h[q + a.X] - f) * t) * o.data.scaleX;
                p = (p + (h[q + a.Y] - p) * t) * o.data.scaleY;
              }
              if (n == 1) {
                if (c == C.add) {
                  o.scaleX += f - o.data.scaleX;
                  o.scaleY += p - o.data.scaleY;
                } else {
                  o.scaleX = f;
                  o.scaleY = p;
                }
              } else {
                var g = 0;
                var v = 0;
                if (l == j.mixOut) {
                  switch (c) {
                    case C.setup:
                      g = o.data.scaleX;
                      v = o.data.scaleY;
                      o.scaleX = g + (Math.abs(f) * A.MathUtils.signum(g) - g) * n;
                      o.scaleY = v + (Math.abs(p) * A.MathUtils.signum(v) - v) * n;
                      break;
                    case C.first:
                    case C.replace:
                      g = o.scaleX;
                      v = o.scaleY;
                      o.scaleX = g + (Math.abs(f) * A.MathUtils.signum(g) - g) * n;
                      o.scaleY = v + (Math.abs(p) * A.MathUtils.signum(v) - v) * n;
                      break;
                    case C.add:
                      g = o.scaleX;
                      v = o.scaleY;
                      o.scaleX = g + (Math.abs(f) * A.MathUtils.signum(g) - o.data.scaleX) * n;
                      o.scaleY = v + (Math.abs(p) * A.MathUtils.signum(v) - o.data.scaleY) * n;
                  }
                } else {
                  switch (c) {
                    case C.setup:
                      g = Math.abs(o.data.scaleX) * A.MathUtils.signum(f);
                      v = Math.abs(o.data.scaleY) * A.MathUtils.signum(p);
                      o.scaleX = g + (f - g) * n;
                      o.scaleY = v + (p - v) * n;
                      break;
                    case C.first:
                    case C.replace:
                      g = Math.abs(o.scaleX) * A.MathUtils.signum(f);
                      v = Math.abs(o.scaleY) * A.MathUtils.signum(p);
                      o.scaleX = g + (f - g) * n;
                      o.scaleY = v + (p - v) * n;
                      break;
                    case C.add:
                      g = A.MathUtils.signum(f);
                      v = A.MathUtils.signum(p);
                      o.scaleX = Math.abs(o.scaleX) * g + (f - Math.abs(o.data.scaleX) * g) * n;
                      o.scaleY = Math.abs(o.scaleY) * v + (p - Math.abs(o.data.scaleY) * v) * n;
                  }
                }
              }
            }
          }
        };
        return a;
      }(a);
      A.ScaleTimeline = n;
      var c = function (c) {
        function f(a) {
          return c.call(this, a) || this;
        }
        l(f, c);
        f.prototype.getPropertyId = function () {
          return (e.shear << 24) + this.boneIndex;
        };
        f.prototype.apply = function (b, e, g, i, j, a) {
          var k = this.frames;
          var c = b.bones[this.boneIndex];
          if (c.active) {
            if (g < k[0]) {
              switch (a) {
                case C.setup:
                  c.shearX = c.data.shearX;
                  c.shearY = c.data.shearY;
                  return;
                case C.first:
                  c.shearX += (c.data.shearX - c.shearX) * j;
                  c.shearY += (c.data.shearY - c.shearY) * j;
              }
            } else {
              var l = 0;
              var p = 0;
              if (g >= k[k.length - f.ENTRIES]) {
                l = k[k.length + f.PREV_X];
                p = k[k.length + f.PREV_Y];
              } else {
                var q = E.binarySearch(k, g, f.ENTRIES);
                l = k[q + f.PREV_X];
                p = k[q + f.PREV_Y];
                var n = k[q];
                var d = this.getCurvePercent(q / f.ENTRIES - 1, 1 - (g - n) / (k[q + f.PREV_TIME] - n));
                l += (k[q + f.X] - l) * d;
                p += (k[q + f.Y] - p) * d;
              }
              switch (a) {
                case C.setup:
                  c.shearX = c.data.shearX + l * j;
                  c.shearY = c.data.shearY + p * j;
                  break;
                case C.first:
                case C.replace:
                  c.shearX += (c.data.shearX + l - c.shearX) * j;
                  c.shearY += (c.data.shearY + p - c.shearY) * j;
                  break;
                case C.add:
                  c.shearX += l * j;
                  c.shearY += p * j;
              }
            }
          }
        };
        return f;
      }(a);
      A.ShearTimeline = c;
      var o = function (d) {
        function i(b) {
          var a = d.call(this, b) || this;
          a.frames = A.Utils.newFloatArray(b * i.ENTRIES);
          return a;
        }
        l(i, d);
        i.prototype.getPropertyId = function () {
          return (e.color << 24) + this.slotIndex;
        };
        i.prototype.setFrame = function (g, h, b, c, d, e) {
          g *= i.ENTRIES;
          this.frames[g] = h;
          this.frames[g + i.R] = b;
          this.frames[g + i.G] = c;
          this.frames[g + i.B] = d;
          this.frames[g + i.A] = e;
        };
        i.prototype.apply = function (d, a, b, e, p, j) {
          var k = d.slots[this.slotIndex];
          if (k.bone.active) {
            var c = this.frames;
            if (b < c[0]) {
              switch (j) {
                case C.setup:
                  k.color.setFromColor(k.data.color);
                  return;
                case C.first:
                  var l = k.color;
                  var q = k.data.color;
                  l.add((q.r - l.r) * p, (q.g - l.g) * p, (q.b - l.b) * p, (q.a - l.a) * p);
              }
            } else {
              var n = 0;
              var u = 0;
              var v = 0;
              var w = 0;
              if (b >= c[c.length - i.ENTRIES]) {
                var x = c.length;
                n = c[x + i.PREV_R];
                u = c[x + i.PREV_G];
                v = c[x + i.PREV_B];
                w = c[x + i.PREV_A];
              } else {
                var t = E.binarySearch(c, b, i.ENTRIES);
                n = c[t + i.PREV_R];
                u = c[t + i.PREV_G];
                v = c[t + i.PREV_B];
                w = c[t + i.PREV_A];
                var g = c[t];
                var m = this.getCurvePercent(t / i.ENTRIES - 1, 1 - (b - g) / (c[t + i.PREV_TIME] - g));
                n += (c[t + i.R] - n) * m;
                u += (c[t + i.G] - u) * m;
                v += (c[t + i.B] - v) * m;
                w += (c[t + i.A] - w) * m;
              }
              if (p == 1) {
                k.color.set(n, u, v, w);
              } else {
                l = k.color;
                if (j == C.setup) {
                  l.setFromColor(k.data.color);
                }
                l.add((n - l.r) * p, (u - l.g) * p, (v - l.b) * p, (w - l.a) * p);
              }
            }
          }
        };
        i.ENTRIES = 5;
        i.PREV_TIME = -5;
        i.PREV_R = -4;
        i.PREV_G = -3;
        i.PREV_B = -2;
        i.PREV_A = -1;
        i.R = 1;
        i.G = 2;
        i.B = 3;
        i.A = 4;
        return i;
      }(f);
      A.ColorTimeline = o;
      var h = function (f) {
        function m(b) {
          var a = f.call(this, b) || this;
          a.frames = A.Utils.newFloatArray(b * m.ENTRIES);
          return a;
        }
        l(m, f);
        m.prototype.getPropertyId = function () {
          return (e.twoColor << 24) + this.slotIndex;
        };
        m.prototype.setFrame = function (d, k, b, e, f, g, h, i, j) {
          d *= m.ENTRIES;
          this.frames[d] = k;
          this.frames[d + m.R] = b;
          this.frames[d + m.G] = e;
          this.frames[d + m.B] = f;
          this.frames[d + m.A] = g;
          this.frames[d + m.R2] = h;
          this.frames[d + m.G2] = i;
          this.frames[d + m.B2] = j;
        };
        m.prototype.apply = function (b, a, d, e, f, g) {
          var i = b.slots[this.slotIndex];
          if (i.bone.active) {
            var c = this.frames;
            if (d < c[0]) {
              switch (g) {
                case C.setup:
                  i.color.setFromColor(i.data.color);
                  i.darkColor.setFromColor(i.data.darkColor);
                  return;
                case C.first:
                  var j = i.color;
                  var k = i.darkColor;
                  var l = i.data.color;
                  var n = i.data.darkColor;
                  j.add((l.r - j.r) * f, (l.g - j.g) * f, (l.b - j.b) * f, (l.a - j.a) * f);
                  k.add((n.r - k.r) * f, (n.g - k.g) * f, (n.b - k.b) * f, 0);
              }
            } else {
              var p = 0;
              var q = 0;
              var r = 0;
              var s = 0;
              var u = 0;
              var v = 0;
              var w = 0;
              if (d >= c[c.length - m.ENTRIES]) {
                var y = c.length;
                p = c[y + m.PREV_R];
                q = c[y + m.PREV_G];
                r = c[y + m.PREV_B];
                s = c[y + m.PREV_A];
                u = c[y + m.PREV_R2];
                v = c[y + m.PREV_G2];
                w = c[y + m.PREV_B2];
              } else {
                var I = E.binarySearch(c, d, m.ENTRIES);
                p = c[I + m.PREV_R];
                q = c[I + m.PREV_G];
                r = c[I + m.PREV_B];
                s = c[I + m.PREV_A];
                u = c[I + m.PREV_R2];
                v = c[I + m.PREV_G2];
                w = c[I + m.PREV_B2];
                var A = c[I];
                var x = this.getCurvePercent(I / m.ENTRIES - 1, 1 - (d - A) / (c[I + m.PREV_TIME] - A));
                p += (c[I + m.R] - p) * x;
                q += (c[I + m.G] - q) * x;
                r += (c[I + m.B] - r) * x;
                s += (c[I + m.A] - s) * x;
                u += (c[I + m.R2] - u) * x;
                v += (c[I + m.G2] - v) * x;
                w += (c[I + m.B2] - w) * x;
              }
              if (f == 1) {
                i.color.set(p, q, r, s);
                i.darkColor.set(u, v, w, 1);
              } else {
                j = i.color;
                k = i.darkColor;
                if (g == C.setup) {
                  j.setFromColor(i.data.color);
                  k.setFromColor(i.data.darkColor);
                }
                j.add((p - j.r) * f, (q - j.g) * f, (r - j.b) * f, (s - j.a) * f);
                k.add((u - k.r) * f, (v - k.g) * f, (w - k.b) * f, 0);
              }
            }
          }
        };
        m.ENTRIES = 8;
        m.PREV_TIME = -8;
        m.PREV_R = -7;
        m.PREV_G = -6;
        m.PREV_B = -5;
        m.PREV_A = -4;
        m.PREV_R2 = -3;
        m.PREV_G2 = -2;
        m.PREV_B2 = -1;
        m.R = 1;
        m.G = 2;
        m.B = 3;
        m.A = 4;
        m.R2 = 5;
        m.G2 = 6;
        m.B2 = 7;
        return m;
      }(f);
      A.TwoColorTimeline = h;
      var r = function () {
        function b(b) {
          this.frames = A.Utils.newFloatArray(b);
          this.attachmentNames = Array(b);
        }
        b.prototype.getPropertyId = function () {
          return (e.attachment << 24) + this.slotIndex;
        };
        b.prototype.getFrameCount = function () {
          return this.frames.length;
        };
        b.prototype.setFrame = function (d, a, b) {
          this.frames[d] = a;
          this.attachmentNames[d] = b;
        };
        b.prototype.apply = function (b, d, e, g, i, a, k) {
          var c = b.slots[this.slotIndex];
          if (c.bone.active) {
            if (k != j.mixOut || a != C.setup) {
              var l = this.frames;
              if (e < l[0]) {
                if (a == C.setup || a == C.first) {
                  var h = c.data.attachmentName;
                  c.setAttachment(h == null ? null : b.getAttachment(this.slotIndex, h));
                }
              } else {
                var m;
                m = e >= l[l.length - 1] ? l.length - 1 : E.binarySearch(l, e, 1) - 1;
                var p = this.attachmentNames[m];
                b.slots[this.slotIndex].setAttachment(p == null ? null : b.getAttachment(this.slotIndex, p));
              }
            } else {
              var n = c.data.attachmentName;
              c.setAttachment(n == null ? null : b.getAttachment(this.slotIndex, n));
            }
          }
        };
        return b;
      }();
      A.AttachmentTimeline = r;
      var s = null;
      var t = function (d) {
        function a(b) {
          var a = d.call(this, b) || this;
          a.frames = A.Utils.newFloatArray(b);
          a.frameVertices = Array(b);
          if (s == null) {
            s = A.Utils.newFloatArray(64);
          }
          return a;
        }
        l(a, d);
        a.prototype.getPropertyId = function () {
          return (e.deform << 27) + +this.attachment.id + this.slotIndex;
        };
        a.prototype.setFrame = function (d, a, b) {
          this.frames[d] = a;
          this.frameVertices[d] = b;
        };
        a.prototype.apply = function (b, c, e, g, i, j) {
          var m = b.slots[this.slotIndex];
          if (m.bone.active) {
            var n = m.getAttachment();
            if (n instanceof A.VertexAttachment && n.deformAttachment == this.attachment) {
              var l = m.deform;
              if (l.length == 0) {
                j = C.setup;
              }
              var h = this.frameVertices;
              var o = h[0].length;
              var f = this.frames;
              if (e < f[0]) {
                var d = n;
                switch (j) {
                  case C.setup:
                    l.length = 0;
                    return;
                  case C.first:
                    if (i == 1) {
                      l.length = 0;
                      break;
                    }
                    var p = A.Utils.setArraySize(l, o);
                    if (d.bones == null) {
                      for (var q = d.vertices, r = 0; r < o; r++) {
                        p[r] += (q[r] - p[r]) * i;
                      }
                    } else {
                      i = 1 - i;
                      r = 0;
                      i = 1 - i;
                      r = 0;
                      for (; r < o; r++) {
                        p[r] *= i;
                      }
                    }
                }
              } else {
                var t = A.Utils.setArraySize(l, o);
                if (e >= f[f.length - 1]) {
                  var u = h[f.length - 1];
                  if (i == 1) {
                    if (j == C.add) {
                      if ((d = n).bones == null) {
                        q = d.vertices;
                        for (var w = 0; w < o; w++) {
                          t[w] += u[w] - q[w];
                        }
                      } else {
                        for (var y = 0; y < o; y++) {
                          t[y] += u[y];
                        }
                      }
                    } else {
                      A.Utils.arrayCopy(u, 0, t, 0, o);
                    }
                  } else {
                    switch (j) {
                      case C.setup:
                        var z = n;
                        if (z.bones == null) {
                          q = z.vertices;
                          for (var B = 0; B < o; B++) {
                            var F = q[B];
                            t[B] = F + (u[B] - F) * i;
                          }
                        } else {
                          for (var G = 0; G < o; G++) {
                            t[G] = u[G] * i;
                          }
                        }
                        break;
                      case C.first:
                      case C.replace:
                        for (var H = 0; H < o; H++) {
                          t[H] += (u[H] - t[H]) * i;
                        }
                      case C.add:
                        if ((d = n).bones == null) {
                          q = d.vertices;
                          for (var K = 0; K < o; K++) {
                            t[K] += (u[K] - q[K]) * i;
                          }
                        } else {
                          for (var M = 0; M < o; M++) {
                            t[M] += u[M] * i;
                          }
                        }
                    }
                  }
                } else {
                  var N = E.binarySearch(f, e);
                  var R = h[N - 1];
                  var I = h[N];
                  var O = f[N];
                  var L = this.getCurvePercent(N - 1, 1 - (e - O) / (f[N - 1] - O));
                  if (i == 1) {
                    if (j == C.add) {
                      if ((d = n).bones == null) {
                        q = d.vertices;
                        for (var P = 0; P < o; P++) {
                          var S = R[P];
                          t[P] += S + (I[P] - S) * L - q[P];
                        }
                      } else {
                        for (var U = 0; U < o; U++) {
                          S = R[U];
                          t[U] += S + (I[U] - S) * L;
                        }
                      }
                    } else {
                      for (var V = 0; V < o; V++) {
                        S = R[V];
                        t[V] = S + (I[V] - S) * L;
                      }
                    }
                  } else {
                    switch (j) {
                      case C.setup:
                        var W = n;
                        if (W.bones == null) {
                          q = W.vertices;
                          for (var X = 0; X < o; X++) {
                            S = R[X];
                            F = q[X];
                            t[X] = F + (S + (I[X] - S) * L - F) * i;
                          }
                        } else {
                          for (var Z = 0; Z < o; Z++) {
                            S = R[Z];
                            t[Z] = (S + (I[Z] - S) * L) * i;
                          }
                        }
                        break;
                      case C.first:
                      case C.replace:
                        for (var da = 0; da < o; da++) {
                          S = R[da];
                          t[da] += (S + (I[da] - S) * L - t[da]) * i;
                        }
                        break;
                      case C.add:
                        if ((d = n).bones == null) {
                          q = d.vertices;
                          for (var ha = 0; ha < o; ha++) {
                            S = R[ha];
                            t[ha] += (S + (I[ha] - S) * L - q[ha]) * i;
                          }
                        } else {
                          for (var ma = 0; ma < o; ma++) {
                            S = R[ma];
                            t[ma] += (S + (I[ma] - S) * L) * i;
                          }
                        }
                    }
                  }
                }
              }
            }
          }
        };
        return a;
      }(f);
      A.DeformTimeline = t;
      var u = function () {
        function b(b) {
          this.frames = A.Utils.newFloatArray(b);
          this.events = Array(b);
        }
        b.prototype.getPropertyId = function () {
          return e.event << 24;
        };
        b.prototype.getFrameCount = function () {
          return this.frames.length;
        };
        b.prototype.setFrame = function (c, a) {
          this.frames[c] = a.time;
          this.events[c] = a;
        };
        b.prototype.apply = function (e, b, h, f, g, i, j) {
          if (f != null) {
            var a = this.frames;
            var k = this.frames.length;
            if (b > h) {
              this.apply(e, b, Number.MAX_VALUE, f, g, i, j);
              b = -1;
            } else if (b >= a[k - 1]) {
              return;
            }
            if (!(h < a[0])) {
              var c = 0;
              if (b < a[0]) {
                c = 0;
              } else {
                for (var n = a[c = E.binarySearch(a, b)]; c > 0 && a[c - 1] == n;) {
                  c--;
                }
              }
              for (; c < k && h >= a[c]; c++) {
                f.push(this.events[c]);
              }
            }
          }
        };
        return b;
      }();
      A.EventTimeline = u;
      var p = function () {
        function b(b) {
          this.frames = A.Utils.newFloatArray(b);
          this.drawOrders = Array(b);
        }
        b.prototype.getPropertyId = function () {
          return e.drawOrder << 24;
        };
        b.prototype.getFrameCount = function () {
          return this.frames.length;
        };
        b.prototype.setFrame = function (d, a, b) {
          this.frames[d] = a;
          this.drawOrders[d] = b;
        };
        b.prototype.apply = function (b, e, g, i, a, k, c) {
          var l = b.drawOrder;
          var h = b.slots;
          if (c != j.mixOut || k != C.setup) {
            var m = this.frames;
            if (g < m[0]) {
              if (!(k != C.setup && k != C.first)) {
                A.Utils.arrayCopy(b.slots, 0, b.drawOrder, 0, b.slots.length);
              }
            } else {
              var f;
              f = g >= m[m.length - 1] ? m.length - 1 : E.binarySearch(m, g) - 1;
              var n = this.drawOrders[f];
              if (n == null) {
                A.Utils.arrayCopy(h, 0, l, 0, h.length);
              } else {
                for (var o = 0, q = n.length; o < q; o++) {
                  l[o] = h[n[o]];
                }
              }
            }
          } else {
            A.Utils.arrayCopy(b.slots, 0, b.drawOrder, 0, b.slots.length);
          }
        };
        return b;
      }();
      A.DrawOrderTimeline = p;
      var v = function (d) {
        function i(c) {
          var a = d.call(this, c) || this;
          a.frames = A.Utils.newFloatArray(c * i.ENTRIES);
          return a;
        }
        l(i, d);
        i.prototype.getPropertyId = function () {
          return (e.ikConstraint << 24) + this.ikConstraintIndex;
        };
        i.prototype.setFrame = function (a, j, c, d, e, f, g) {
          a *= i.ENTRIES;
          this.frames[a] = j;
          this.frames[a + i.MIX] = c;
          this.frames[a + i.SOFTNESS] = d;
          this.frames[a + i.BEND_DIRECTION] = e;
          this.frames[a + i.COMPRESS] = f ? 1 : 0;
          this.frames[a + i.STRETCH] = g ? 1 : 0;
        };
        i.prototype.apply = function (b, e, g, m, k, a, c) {
          var l = this.frames;
          var h = b.ikConstraints[this.ikConstraintIndex];
          if (h.active) {
            if (g < l[0]) {
              switch (a) {
                case C.setup:
                  h.mix = h.data.mix;
                  h.softness = h.data.softness;
                  h.bendDirection = h.data.bendDirection;
                  h.compress = h.data.compress;
                  h.stretch = h.data.stretch;
                  return;
                case C.first:
                  h.mix += (h.data.mix - h.mix) * k;
                  h.softness += (h.data.softness - h.softness) * k;
                  h.bendDirection = h.data.bendDirection;
                  h.compress = h.data.compress;
                  h.stretch = h.data.stretch;
              }
            } else if (g >= l[l.length - i.ENTRIES]) {
              if (a == C.setup) {
                h.mix = h.data.mix + (l[l.length + i.PREV_MIX] - h.data.mix) * k;
                h.softness = h.data.softness + (l[l.length + i.PREV_SOFTNESS] - h.data.softness) * k;
                if (c == j.mixOut) {
                  h.bendDirection = h.data.bendDirection;
                  h.compress = h.data.compress;
                  h.stretch = h.data.stretch;
                } else {
                  h.bendDirection = l[l.length + i.PREV_BEND_DIRECTION];
                  h.compress = l[l.length + i.PREV_COMPRESS] != 0;
                  h.stretch = l[l.length + i.PREV_STRETCH] != 0;
                }
              } else {
                h.mix += (l[l.length + i.PREV_MIX] - h.mix) * k;
                h.softness += (l[l.length + i.PREV_SOFTNESS] - h.softness) * k;
                if (c == j.mixIn) {
                  h.bendDirection = l[l.length + i.PREV_BEND_DIRECTION];
                  h.compress = l[l.length + i.PREV_COMPRESS] != 0;
                  h.stretch = l[l.length + i.PREV_STRETCH] != 0;
                }
              }
            } else {
              var n = E.binarySearch(l, g, i.ENTRIES);
              var f = l[n + i.PREV_MIX];
              var d = l[n + i.PREV_SOFTNESS];
              var o = l[n];
              var p = this.getCurvePercent(n / i.ENTRIES - 1, 1 - (g - o) / (l[n + i.PREV_TIME] - o));
              if (a == C.setup) {
                h.mix = h.data.mix + (f + (l[n + i.MIX] - f) * p - h.data.mix) * k;
                h.softness = h.data.softness + (d + (l[n + i.SOFTNESS] - d) * p - h.data.softness) * k;
                if (c == j.mixOut) {
                  h.bendDirection = h.data.bendDirection;
                  h.compress = h.data.compress;
                  h.stretch = h.data.stretch;
                } else {
                  h.bendDirection = l[n + i.PREV_BEND_DIRECTION];
                  h.compress = l[n + i.PREV_COMPRESS] != 0;
                  h.stretch = l[n + i.PREV_STRETCH] != 0;
                }
              } else {
                h.mix += (f + (l[n + i.MIX] - f) * p - h.mix) * k;
                h.softness += (d + (l[n + i.SOFTNESS] - d) * p - h.softness) * k;
                if (c == j.mixIn) {
                  h.bendDirection = l[n + i.PREV_BEND_DIRECTION];
                  h.compress = l[n + i.PREV_COMPRESS] != 0;
                  h.stretch = l[n + i.PREV_STRETCH] != 0;
                }
              }
            }
          }
        };
        i.ENTRIES = 6;
        i.PREV_TIME = -6;
        i.PREV_MIX = -5;
        i.PREV_SOFTNESS = -4;
        i.PREV_BEND_DIRECTION = -3;
        i.PREV_COMPRESS = -2;
        i.PREV_STRETCH = -1;
        i.MIX = 1;
        i.SOFTNESS = 2;
        i.BEND_DIRECTION = 3;
        i.COMPRESS = 4;
        i.STRETCH = 5;
        return i;
      }(f);
      A.IkConstraintTimeline = v;
      var g = function (d) {
        function i(b) {
          var a = d.call(this, b) || this;
          a.frames = A.Utils.newFloatArray(b * i.ENTRIES);
          return a;
        }
        l(i, d);
        i.prototype.getPropertyId = function () {
          return (e.transformConstraint << 24) + this.transformConstraintIndex;
        };
        i.prototype.setFrame = function (g, h, b, c, d, e) {
          g *= i.ENTRIES;
          this.frames[g] = h;
          this.frames[g + i.ROTATE] = b;
          this.frames[g + i.TRANSLATE] = c;
          this.frames[g + i.SCALE] = d;
          this.frames[g + i.SHEAR] = e;
        };
        i.prototype.apply = function (d, a, b, e, f, j) {
          var k = this.frames;
          var c = d.transformConstraints[this.transformConstraintIndex];
          if (c.active) {
            if (b < k[0]) {
              var l = c.data;
              switch (j) {
                case C.setup:
                  c.rotateMix = l.rotateMix;
                  c.translateMix = l.translateMix;
                  c.scaleMix = l.scaleMix;
                  c.shearMix = l.shearMix;
                  return;
                case C.first:
                  c.rotateMix += (l.rotateMix - c.rotateMix) * f;
                  c.translateMix += (l.translateMix - c.translateMix) * f;
                  c.scaleMix += (l.scaleMix - c.scaleMix) * f;
                  c.shearMix += (l.shearMix - c.shearMix) * f;
              }
            } else {
              var p = 0;
              var q = 0;
              var u = 0;
              var w = 0;
              if (b >= k[k.length - i.ENTRIES]) {
                var x = k.length;
                p = k[x + i.PREV_ROTATE];
                q = k[x + i.PREV_TRANSLATE];
                u = k[x + i.PREV_SCALE];
                w = k[x + i.PREV_SHEAR];
              } else {
                var t = E.binarySearch(k, b, i.ENTRIES);
                p = k[t + i.PREV_ROTATE];
                q = k[t + i.PREV_TRANSLATE];
                u = k[t + i.PREV_SCALE];
                w = k[t + i.PREV_SHEAR];
                var v = k[t];
                var g = this.getCurvePercent(t / i.ENTRIES - 1, 1 - (b - v) / (k[t + i.PREV_TIME] - v));
                p += (k[t + i.ROTATE] - p) * g;
                q += (k[t + i.TRANSLATE] - q) * g;
                u += (k[t + i.SCALE] - u) * g;
                w += (k[t + i.SHEAR] - w) * g;
              }
              if (j == C.setup) {
                l = c.data;
                c.rotateMix = l.rotateMix + (p - l.rotateMix) * f;
                c.translateMix = l.translateMix + (q - l.translateMix) * f;
                c.scaleMix = l.scaleMix + (u - l.scaleMix) * f;
                c.shearMix = l.shearMix + (w - l.shearMix) * f;
              } else {
                c.rotateMix += (p - c.rotateMix) * f;
                c.translateMix += (q - c.translateMix) * f;
                c.scaleMix += (u - c.scaleMix) * f;
                c.shearMix += (w - c.shearMix) * f;
              }
            }
          }
        };
        i.ENTRIES = 5;
        i.PREV_TIME = -5;
        i.PREV_ROTATE = -4;
        i.PREV_TRANSLATE = -3;
        i.PREV_SCALE = -2;
        i.PREV_SHEAR = -1;
        i.ROTATE = 1;
        i.TRANSLATE = 2;
        i.SCALE = 3;
        i.SHEAR = 4;
        return i;
      }(f);
      A.TransformConstraintTimeline = g;
      var m = function (d) {
        function i(b) {
          var a = d.call(this, b) || this;
          a.frames = A.Utils.newFloatArray(b * i.ENTRIES);
          return a;
        }
        l(i, d);
        i.prototype.getPropertyId = function () {
          return (e.pathConstraintPosition << 24) + this.pathConstraintIndex;
        };
        i.prototype.setFrame = function (d, e, b) {
          d *= i.ENTRIES;
          this.frames[d] = e;
          this.frames[d + i.VALUE] = b;
        };
        i.prototype.apply = function (g, a, b, e, n, j) {
          var k = this.frames;
          var c = g.pathConstraints[this.pathConstraintIndex];
          if (c.active) {
            if (b < k[0]) {
              switch (j) {
                case C.setup:
                  c.position = c.data.position;
                  return;
                case C.first:
                  c.position += (c.data.position - c.position) * n;
              }
            } else {
              var l = 0;
              if (b >= k[k.length - i.ENTRIES]) {
                l = k[k.length + i.PREV_VALUE];
              } else {
                var o = E.binarySearch(k, b, i.ENTRIES);
                l = k[o + i.PREV_VALUE];
                var m = k[o];
                var f = this.getCurvePercent(o / i.ENTRIES - 1, 1 - (b - m) / (k[o + i.PREV_TIME] - m));
                l += (k[o + i.VALUE] - l) * f;
              }
              if (j == C.setup) {
                c.position = c.data.position + (l - c.data.position) * n;
              } else {
                c.position += (l - c.position) * n;
              }
            }
          }
        };
        i.ENTRIES = 2;
        i.PREV_TIME = -2;
        i.PREV_VALUE = -1;
        i.VALUE = 1;
        return i;
      }(f);
      A.PathConstraintPositionTimeline = m;
      var w = function (c) {
        function g(a) {
          return c.call(this, a) || this;
        }
        l(g, c);
        g.prototype.getPropertyId = function () {
          return (e.pathConstraintSpacing << 24) + this.pathConstraintIndex;
        };
        g.prototype.apply = function (b, e, n, i, j, a) {
          var k = this.frames;
          var c = b.pathConstraints[this.pathConstraintIndex];
          if (c.active) {
            if (n < k[0]) {
              switch (a) {
                case C.setup:
                  c.spacing = c.data.spacing;
                  return;
                case C.first:
                  c.spacing += (c.data.spacing - c.spacing) * j;
              }
            } else {
              var l = 0;
              if (n >= k[k.length - g.ENTRIES]) {
                l = k[k.length + g.PREV_VALUE];
              } else {
                var o = E.binarySearch(k, n, g.ENTRIES);
                l = k[o + g.PREV_VALUE];
                var m = k[o];
                var f = this.getCurvePercent(o / g.ENTRIES - 1, 1 - (n - m) / (k[o + g.PREV_TIME] - m));
                l += (k[o + g.VALUE] - l) * f;
              }
              if (a == C.setup) {
                c.spacing = c.data.spacing + (l - c.data.spacing) * j;
              } else {
                c.spacing += (l - c.spacing) * j;
              }
            }
          }
        };
        return g;
      }(m);
      A.PathConstraintSpacingTimeline = w;
      var x = function (d) {
        function f(b) {
          var a = d.call(this, b) || this;
          a.frames = A.Utils.newFloatArray(b * f.ENTRIES);
          return a;
        }
        l(f, d);
        f.prototype.getPropertyId = function () {
          return (e.pathConstraintMix << 24) + this.pathConstraintIndex;
        };
        f.prototype.setFrame = function (e, g, b, c) {
          e *= f.ENTRIES;
          this.frames[e] = g;
          this.frames[e + f.ROTATE] = b;
          this.frames[e + f.TRANSLATE] = c;
        };
        f.prototype.apply = function (g, a, b, e, i, j) {
          var k = this.frames;
          var c = g.pathConstraints[this.pathConstraintIndex];
          if (c.active) {
            if (b < k[0]) {
              switch (j) {
                case C.setup:
                  c.rotateMix = c.data.rotateMix;
                  c.translateMix = c.data.translateMix;
                  return;
                case C.first:
                  c.rotateMix += (c.data.rotateMix - c.rotateMix) * i;
                  c.translateMix += (c.data.translateMix - c.translateMix) * i;
              }
            } else {
              var l = 0;
              var p = 0;
              if (b >= k[k.length - f.ENTRIES]) {
                l = k[k.length + f.PREV_ROTATE];
                p = k[k.length + f.PREV_TRANSLATE];
              } else {
                var q = E.binarySearch(k, b, f.ENTRIES);
                l = k[q + f.PREV_ROTATE];
                p = k[q + f.PREV_TRANSLATE];
                var n = k[q];
                var d = this.getCurvePercent(q / f.ENTRIES - 1, 1 - (b - n) / (k[q + f.PREV_TIME] - n));
                l += (k[q + f.ROTATE] - l) * d;
                p += (k[q + f.TRANSLATE] - p) * d;
              }
              if (j == C.setup) {
                c.rotateMix = c.data.rotateMix + (l - c.data.rotateMix) * i;
                c.translateMix = c.data.translateMix + (p - c.data.translateMix) * i;
              } else {
                c.rotateMix += (l - c.rotateMix) * i;
                c.translateMix += (p - c.translateMix) * i;
              }
            }
          }
        };
        f.ENTRIES = 3;
        f.PREV_TIME = -3;
        f.PREV_ROTATE = -2;
        f.PREV_TRANSLATE = -1;
        f.ROTATE = 1;
        f.TRANSLATE = 2;
        return f;
      }(f);
      A.PathConstraintMixTimeline = x;
    })(i || (i = {}));
    (function (r) {
      var f = function () {
        function j(c) {
          this.tracks = [];
          this.timeScale = 1;
          this.events = [];
          this.listeners = [];
          this.queue = new b(this);
          this.propertyIDs = new r.IntSet();
          this.animationsChanged = false;
          this.trackEntryPool = new r.Pool(function () {
            return new a();
          });
          this.data = c;
        }
        j.prototype.update = function (a) {
          a *= this.timeScale;
          for (var c = this.tracks, d = 0, i = c.length; d < i; d++) {
            var f = c[d];
            if (f != null) {
              f.animationLast = f.nextAnimationLast;
              f.trackLast = f.nextTrackLast;
              var m = a * f.timeScale;
              if (f.delay > 0) {
                f.delay -= m;
                if (f.delay > 0) {
                  continue;
                }
                m = -f.delay;
                f.delay = 0;
              }
              var n = f.next;
              if (n != null) {
                var o = f.trackLast - n.delay;
                if (o >= 0) {
                  n.delay = 0;
                  n.trackTime += f.timeScale == 0 ? 0 : (o / f.timeScale + a) * n.timeScale;
                  f.trackTime += m;
                  this.setCurrent(d, n, true);
                  for (; n.mixingFrom != null;) {
                    n.mixTime += a;
                    n = n.mixingFrom;
                  }
                  continue;
                }
              } else if (f.trackLast >= f.trackEnd && f.mixingFrom == null) {
                c[d] = null;
                this.queue.end(f);
                this.disposeNext(f);
                continue;
              }
              if (f.mixingFrom != null && this.updateMixingFrom(f, a)) {
                var p = f.mixingFrom;
                f.mixingFrom = null;
                if (p != null) {
                  p.mixingTo = null;
                }
                for (; p != null;) {
                  this.queue.end(p);
                  p = p.mixingFrom;
                }
              }
              f.trackTime += m;
            }
          }
          this.queue.drain();
        };
        j.prototype.updateMixingFrom = function (e, a) {
          var b = e.mixingFrom;
          if (b == null) {
            return true;
          }
          var c = this.updateMixingFrom(b, a);
          b.animationLast = b.nextAnimationLast;
          b.trackLast = b.nextTrackLast;
          if (e.mixTime > 0 && e.mixTime >= e.mixDuration) {
            if (!(b.totalAlpha != 0 && e.mixDuration != 0)) {
              e.mixingFrom = b.mixingFrom;
              if (b.mixingFrom != null) {
                b.mixingFrom.mixingTo = e;
              }
              e.interruptAlpha = b.interruptAlpha;
              this.queue.end(b);
            }
            return c;
          } else {
            b.trackTime += a * b.timeScale;
            e.mixTime += a;
            return false;
          }
        };
        j.prototype.apply = function (a) {
          if (a == null) {
            throw Error("skeleton cannot be null.");
          }
          if (this.animationsChanged) {
            this._animationsChanged();
          }
          for (var b = this.events, c = this.tracks, d = false, e = 0, f = c.length; e < f; e++) {
            var g = c[e];
            if (!(g == null || g.delay > 0)) {
              d = true;
              var h = e == 0 ? r.MixBlend.first : g.mixBlend;
              var i = g.alpha;
              if (g.mixingFrom != null) {
                i *= this.applyMixingFrom(g, a, h);
              } else if (g.trackTime >= g.trackEnd && g.next == null) {
                i = 0;
              }
              var k = g.animationLast;
              var l = g.getAnimationTime();
              var m = g.animation.timelines.length;
              var p = g.animation.timelines;
              if (e == 0 && i == 1 || h == r.MixBlend.add) {
                for (var s = 0; s < m; s++) {
                  r.Utils.webkit602BugfixHelper(i, h);
                  p[s].apply(a, k, l, b, i, h, r.MixDirection.mixIn);
                }
              } else {
                var u = g.timelineMode;
                var v = g.timelinesRotation.length == 0;
                if (v) {
                  r.Utils.setArraySize(g.timelinesRotation, m << 1, null);
                }
                var y = g.timelinesRotation;
                for (s = 0; s < m; s++) {
                  var I = p[s];
                  var J = (u[s] & j.NOT_LAST - 1) == j.SUBSEQUENT ? h : r.MixBlend.setup;
                  if (I instanceof r.RotateTimeline) {
                    this.applyRotateTimeline(I, a, l, i, J, y, s << 1, v);
                  } else {
                    r.Utils.webkit602BugfixHelper(i, h);
                    I.apply(a, k, l, b, i, J, r.MixDirection.mixIn);
                  }
                }
              }
              this.queueEvents(g, l);
              b.length = 0;
              g.nextAnimationLast = l;
              g.nextTrackLast = g.trackTime;
            }
          }
          this.queue.drain();
          return d;
        };
        j.prototype.applyMixingFrom = function (a, b, e) {
          var i = a.mixingFrom;
          if (i.mixingFrom != null) {
            this.applyMixingFrom(i, b, e);
          }
          var k = 0;
          if (a.mixDuration == 0) {
            k = 1;
            if (e == r.MixBlend.first) {
              e = r.MixBlend.setup;
            }
          } else {
            if ((k = a.mixTime / a.mixDuration) > 1) {
              k = 1;
            }
            if (e != r.MixBlend.first) {
              e = i.mixBlend;
            }
          }
          var q = k < i.eventThreshold ? this.events : null;
          var t = k < i.attachmentThreshold;
          var o = k < i.drawOrderThreshold;
          var c = i.animationLast;
          var l = i.getAnimationTime();
          var h = i.animation.timelines.length;
          var u = i.animation.timelines;
          var f = i.alpha * a.interruptAlpha;
          var d = f * (1 - k);
          if (e == r.MixBlend.add) {
            for (var v = 0; v < h; v++) {
              u[v].apply(b, c, l, q, d, e, r.MixDirection.mixOut);
            }
          } else {
            var w = i.timelineMode;
            var x = i.timelineHoldMix;
            var g = i.timelinesRotation.length == 0;
            if (g) {
              r.Utils.setArraySize(i.timelinesRotation, h << 1, null);
            }
            var m = i.timelinesRotation;
            i.totalAlpha = 0;
            v = 0;
            for (; v < h; v++) {
              var y = u[v];
              var z = r.MixDirection.mixOut;
              var A = undefined;
              var C = 0;
              switch (w[v] & j.NOT_LAST - 1) {
                case j.SUBSEQUENT:
                  A = e;
                  if (!t && y instanceof r.AttachmentTimeline) {
                    if ((w[v] & j.NOT_LAST) == j.NOT_LAST) {
                      continue;
                    }
                    A = r.MixBlend.setup;
                  }
                  if (!o && y instanceof r.DrawOrderTimeline) {
                    continue;
                  }
                  C = d;
                  break;
                case j.FIRST:
                  A = r.MixBlend.setup;
                  C = d;
                  break;
                case j.HOLD:
                  A = r.MixBlend.setup;
                  C = f;
                  break;
                default:
                  A = r.MixBlend.setup;
                  var E = x[v];
                  C = f * Math.max(0, 1 - E.mixTime / E.mixDuration);
              }
              i.totalAlpha += C;
              if (y instanceof r.RotateTimeline) {
                this.applyRotateTimeline(y, b, l, C, A, m, v << 1, g);
              } else {
                r.Utils.webkit602BugfixHelper(C, e);
                if (A == r.MixBlend.setup) {
                  if (y instanceof r.AttachmentTimeline) {
                    if (t || (w[v] & j.NOT_LAST) == j.NOT_LAST) {
                      z = r.MixDirection.mixIn;
                    }
                  } else if (y instanceof r.DrawOrderTimeline && o) {
                    z = r.MixDirection.mixIn;
                  }
                }
                y.apply(b, c, l, q, C, A, z);
              }
            }
          }
          if (a.mixDuration > 0) {
            this.queueEvents(i, l);
          }
          this.events.length = 0;
          i.nextAnimationLast = l;
          i.nextTrackLast = i.trackTime;
          return k;
        };
        j.prototype.applyRotateTimeline = function (d, b, e, f, i, j, k, a) {
          if (a) {
            j[k] = 0;
          }
          if (f != 1) {
            var m = d;
            var c = m.frames;
            var l = b.bones[m.boneIndex];
            if (l.active) {
              var h = 0;
              var n = 0;
              if (e < c[0]) {
                switch (i) {
                  case r.MixBlend.setup:
                    l.rotation = l.data.rotation;
                  default:
                    return;
                  case r.MixBlend.first:
                    h = l.rotation;
                    n = l.data.rotation;
                }
              } else {
                h = i == r.MixBlend.setup ? l.data.rotation : l.rotation;
                if (e >= c[c.length - r.RotateTimeline.ENTRIES]) {
                  n = l.data.rotation + c[c.length + r.RotateTimeline.PREV_ROTATION];
                } else {
                  var o = r.Animation.binarySearch(c, e, r.RotateTimeline.ENTRIES);
                  var q = c[o + r.RotateTimeline.PREV_ROTATION];
                  var t = c[o];
                  var p = m.getCurvePercent((o >> 1) - 1, 1 - (e - t) / (c[o + r.RotateTimeline.PREV_TIME] - t));
                  n = c[o + r.RotateTimeline.ROTATION] - q;
                  n = q + (n -= (16384 - (16384.499999999996 - n / 360 | 0)) * 360) * p + l.data.rotation;
                  n -= (16384 - (16384.499999999996 - n / 360 | 0)) * 360;
                }
              }
              var u = 0;
              var v = n - h;
              if ((v -= (16384 - (16384.499999999996 - v / 360 | 0)) * 360) == 0) {
                u = j[k];
              } else {
                var x = 0;
                var y = 0;
                if (a) {
                  x = 0;
                  y = v;
                } else {
                  x = j[k];
                  y = j[k + 1];
                }
                var D = v > 0;
                var C = x >= 0;
                if (r.MathUtils.signum(y) != r.MathUtils.signum(v) && Math.abs(y) <= 90) {
                  if (Math.abs(x) > 180) {
                    x += r.MathUtils.signum(x) * 360;
                  }
                  C = D;
                }
                u = v + x - x % 360;
                if (C != D) {
                  u += r.MathUtils.signum(x) * 360;
                }
                j[k] = u;
              }
              j[k + 1] = v;
              h += u * f;
              l.rotation = h - (16384 - (16384.499999999996 - h / 360 | 0)) * 360;
            }
          } else {
            d.apply(b, 0, e, null, 1, i, r.MixDirection.mixIn);
          }
        };
        j.prototype.queueEvents = function (k, b) {
          for (var d = k.animationStart, e = k.animationEnd, f = e - d, g = k.trackLast % f, h = this.events, i = 0, l = h.length; i < l; i++) {
            var j = h[i];
            if (j.time < g) {
              break;
            }
            if (!(j.time > e)) {
              this.queue.event(k, j);
            }
          }
          for ((k.loop ? f == 0 || g > k.trackTime % f : b >= e && k.animationLast < e) && this.queue.complete(k); i < l; i++) {
            if (!(h[i].time < d)) {
              this.queue.event(k, h[i]);
            }
          }
        };
        j.prototype.clearTracks = function () {
          var d = this.queue.drainDisabled;
          this.queue.drainDisabled = true;
          for (var a = 0, e = this.tracks.length; a < e; a++) {
            this.clearTrack(a);
          }
          this.tracks.length = 0;
          this.queue.drainDisabled = d;
          this.queue.drain();
        };
        j.prototype.clearTrack = function (e) {
          if (!(e >= this.tracks.length)) {
            var a = this.tracks[e];
            if (a != null) {
              this.queue.end(a);
              this.disposeNext(a);
              for (var b = a;;) {
                var f = b.mixingFrom;
                if (f == null) {
                  break;
                }
                this.queue.end(f);
                b.mixingFrom = null;
                b.mixingTo = null;
                b = f;
              }
              this.tracks[a.trackIndex] = null;
              this.queue.drain();
            }
          }
        };
        j.prototype.setCurrent = function (e, a, b) {
          var c = this.expandToIndex(e);
          this.tracks[e] = a;
          if (c != null) {
            if (b) {
              this.queue.interrupt(c);
            }
            a.mixingFrom = c;
            c.mixingTo = a;
            a.mixTime = 0;
            if (c.mixingFrom != null && c.mixDuration > 0) {
              a.interruptAlpha *= Math.min(1, c.mixTime / c.mixDuration);
            }
            c.timelinesRotation.length = 0;
          }
          this.queue.start(a);
        };
        j.prototype.setAnimation = function (e, a, b) {
          var c = this.data.skeletonData.findAnimation(a);
          if (c == null) {
            throw Error("Animation not found: " + a);
          }
          return this.setAnimationWith(e, c, b);
        };
        j.prototype.setAnimationWith = function (g, a, b) {
          if (a == null) {
            throw Error("animation cannot be null.");
          }
          var c = true;
          var h = this.expandToIndex(g);
          if (h != null) {
            if (h.nextTrackLast == -1) {
              this.tracks[g] = h.mixingFrom;
              this.queue.interrupt(h);
              this.queue.end(h);
              this.disposeNext(h);
              h = h.mixingFrom;
              c = false;
            } else {
              this.disposeNext(h);
            }
          }
          var i = this.trackEntry(g, a, b, h);
          this.setCurrent(g, i, c);
          this.queue.drain();
          return i;
        };
        j.prototype.addAnimation = function (f, a, b, c) {
          var d = this.data.skeletonData.findAnimation(a);
          if (d == null) {
            throw Error("Animation not found: " + a);
          }
          return this.addAnimationWith(f, d, b, c);
        };
        j.prototype.addAnimationWith = function (a, b, c, d) {
          if (b == null) {
            throw Error("animation cannot be null.");
          }
          var i = this.expandToIndex(a);
          if (i != null) {
            for (; i.next != null;) {
              i = i.next;
            }
          }
          var j = this.trackEntry(a, b, c, i);
          if (i == null) {
            this.setCurrent(a, j, true);
            this.queue.drain();
          } else {
            i.next = j;
            if (d <= 0) {
              var g = i.animationEnd - i.animationStart;
              if (g != 0) {
                if (i.loop) {
                  d += g * (1 + (i.trackTime / g | 0));
                } else {
                  d += Math.max(g, i.trackTime);
                }
                d -= this.data.getMix(i.animation, b);
              } else {
                d = i.trackTime;
              }
            }
          }
          j.delay = d;
          return j;
        };
        j.prototype.setEmptyAnimation = function (d, a) {
          var b = this.setAnimationWith(d, j.emptyAnimation, false);
          b.mixDuration = a;
          b.trackEnd = a;
          return b;
        };
        j.prototype.addEmptyAnimation = function (e, a, b) {
          if (b <= 0) {
            b -= a;
          }
          var f = this.addAnimationWith(e, j.emptyAnimation, false, b);
          f.mixDuration = a;
          f.trackEnd = a;
          return f;
        };
        j.prototype.setEmptyAnimations = function (f) {
          var a = this.queue.drainDisabled;
          this.queue.drainDisabled = true;
          for (var b = 0, g = this.tracks.length; b < g; b++) {
            var d = this.tracks[b];
            if (d != null) {
              this.setEmptyAnimation(d.trackIndex, f);
            }
          }
          this.queue.drainDisabled = a;
          this.queue.drain();
        };
        j.prototype.expandToIndex = function (b) {
          if (b < this.tracks.length) {
            return this.tracks[b];
          } else {
            r.Utils.ensureArrayCapacity(this.tracks, b + 1, null);
            this.tracks.length = b + 1;
            return null;
          }
        };
        j.prototype.trackEntry = function (f, a, b, c) {
          var d = this.trackEntryPool.obtain();
          d.trackIndex = f;
          d.animation = a;
          d.loop = b;
          d.holdPrevious = false;
          d.eventThreshold = 0;
          d.attachmentThreshold = 0;
          d.drawOrderThreshold = 0;
          d.animationStart = 0;
          d.animationEnd = a.duration;
          d.animationLast = -1;
          d.nextAnimationLast = -1;
          d.delay = 0;
          d.trackTime = 0;
          d.trackLast = -1;
          d.nextTrackLast = -1;
          d.trackEnd = Number.MAX_VALUE;
          d.timeScale = 1;
          d.alpha = 1;
          d.interruptAlpha = 1;
          d.mixTime = 0;
          d.mixDuration = c == null ? 0 : this.data.getMix(c.animation, a);
          return d;
        };
        j.prototype.disposeNext = function (c) {
          for (var a = c.next; a != null;) {
            this.queue.dispose(a);
            a = a.next;
          }
          c.next = null;
        };
        j.prototype._animationsChanged = function () {
          this.animationsChanged = false;
          this.propertyIDs.clear();
          for (var d = 0, e = this.tracks.length; d < e; d++) {
            if ((b = this.tracks[d]) != null) {
              for (; b.mixingFrom != null;) {
                b = b.mixingFrom;
              }
              do {
                if (!(b.mixingFrom != null && b.mixBlend == r.MixBlend.add)) {
                  this.computeHold(b);
                }
                b = b.mixingTo;
              } while (b != null);
            }
          }
          this.propertyIDs.clear();
          d = this.tracks.length - 1;
          for (; d >= 0; d--) {
            for (var b = this.tracks[d]; b != null;) {
              this.computeNotLast(b);
              b = b.mixingFrom;
            }
          }
        };
        j.prototype.computeHold = function (f) {
          var b = f.mixingTo;
          var d = f.animation.timelines;
          var e = f.animation.timelines.length;
          var g = r.Utils.setArraySize(f.timelineMode, e);
          f.timelineHoldMix.length = 0;
          var h = r.Utils.setArraySize(f.timelineHoldMix, e);
          var a = this.propertyIDs;
          if (b != null && b.holdPrevious) {
            for (var i = 0; i < e; i++) {
              a.add(d[i].getPropertyId());
              g[i] = j.HOLD;
            }
          } else {
            t: for (i = 0; i < e; i++) {
              var k = d[i];
              var l = k.getPropertyId();
              if (a.add(l)) {
                if (b == null || k instanceof r.AttachmentTimeline || k instanceof r.DrawOrderTimeline || k instanceof r.EventTimeline || !b.animation.hasTimeline(l)) {
                  g[i] = j.FIRST;
                } else {
                  for (var m = b.mixingTo; m != null; m = m.mixingTo) {
                    if (!m.animation.hasTimeline(l)) {
                      if (f.mixDuration > 0) {
                        g[i] = j.HOLD_MIX;
                        h[i] = m;
                        continue t;
                      }
                      break;
                    }
                  }
                  g[i] = j.HOLD;
                }
              } else {
                g[i] = j.SUBSEQUENT;
              }
            }
          }
        };
        j.prototype.computeNotLast = function (c) {
          for (var b = c.animation.timelines, d = c.animation.timelines.length, e = c.timelineMode, f = this.propertyIDs, g = 0; g < d; g++) {
            if (b[g] instanceof r.AttachmentTimeline) {
              var i = b[g];
              if (!f.add(i.slotIndex)) {
                e[g] |= j.NOT_LAST;
              }
            }
          }
        };
        j.prototype.getCurrent = function (b) {
          if (b >= this.tracks.length) {
            return null;
          } else {
            return this.tracks[b];
          }
        };
        j.prototype.addListener = function (b) {
          if (b == null) {
            throw Error("listener cannot be null.");
          }
          this.listeners.push(b);
        };
        j.prototype.removeListener = function (c) {
          var a = this.listeners.indexOf(c);
          if (a >= 0) {
            this.listeners.splice(a, 1);
          }
        };
        j.prototype.clearListeners = function () {
          this.listeners.length = 0;
        };
        j.prototype.clearListenerNotifications = function () {
          this.queue.clear();
        };
        j.emptyAnimation = new r.Animation("<empty>", [], 0);
        j.SUBSEQUENT = 0;
        j.FIRST = 1;
        j.HOLD = 2;
        j.HOLD_MIX = 3;
        j.NOT_LAST = 4;
        return j;
      }();
      r.AnimationState = f;
      var a = function () {
        function b() {
          this.mixBlend = r.MixBlend.replace;
          this.timelineMode = [];
          this.timelineHoldMix = [];
          this.timelinesRotation = [];
        }
        b.prototype.reset = function () {
          this.next = null;
          this.mixingFrom = null;
          this.mixingTo = null;
          this.animation = null;
          this.listener = null;
          this.timelineMode.length = 0;
          this.timelineHoldMix.length = 0;
          this.timelinesRotation.length = 0;
        };
        b.prototype.getAnimationTime = function () {
          if (this.loop) {
            var b = this.animationEnd - this.animationStart;
            if (b == 0) {
              return this.animationStart;
            } else {
              return this.trackTime % b + this.animationStart;
            }
          }
          return Math.min(this.trackTime + this.animationStart, this.animationEnd);
        };
        b.prototype.setAnimationLast = function (b) {
          this.animationLast = b;
          this.nextAnimationLast = b;
        };
        b.prototype.isComplete = function () {
          return this.trackTime >= this.animationEnd - this.animationStart;
        };
        b.prototype.resetRotationDirections = function () {
          this.timelinesRotation.length = 0;
        };
        return b;
      }();
      r.TrackEntry = a;
      var i;
      var b = function () {
        function b(b) {
          this.objects = [];
          this.drainDisabled = false;
          this.animState = b;
        }
        b.prototype.start = function (b) {
          this.objects.push(i.start);
          this.objects.push(b);
          this.animState.animationsChanged = true;
        };
        b.prototype.interrupt = function (b) {
          this.objects.push(i.interrupt);
          this.objects.push(b);
        };
        b.prototype.end = function (b) {
          this.objects.push(i.end);
          this.objects.push(b);
          this.animState.animationsChanged = true;
        };
        b.prototype.dispose = function (b) {
          this.objects.push(i.dispose);
          this.objects.push(b);
        };
        b.prototype.complete = function (b) {
          this.objects.push(i.complete);
          this.objects.push(b);
        };
        b.prototype.event = function (c, a) {
          this.objects.push(i.event);
          this.objects.push(c);
          this.objects.push(a);
        };
        b.prototype.drain = function () {
          if (!this.drainDisabled) {
            this.drainDisabled = true;
            for (var a = this.objects, b = this.animState.listeners, c = 0; c < a.length; c += 2) {
              var d = a[c];
              var k = a[c + 1];
              switch (d) {
                case i.start:
                  if (k.listener != null && k.listener.start) {
                    k.listener.start(k);
                  }
                  for (var l = 0; l < b.length; l++) {
                    if (b[l].start) {
                      b[l].start(k);
                    }
                  }
                  break;
                case i.interrupt:
                  if (k.listener != null && k.listener.interrupt) {
                    k.listener.interrupt(k);
                  }
                  l = 0;
                  for (; l < b.length; l++) {
                    if (b[l].interrupt) {
                      b[l].interrupt(k);
                    }
                  }
                  break;
                case i.end:
                  if (k.listener != null && k.listener.end) {
                    k.listener.end(k);
                  }
                  l = 0;
                  for (; l < b.length; l++) {
                    if (b[l].end) {
                      b[l].end(k);
                    }
                  }
                case i.dispose:
                  if (k.listener != null && k.listener.dispose) {
                    k.listener.dispose(k);
                  }
                  l = 0;
                  for (; l < b.length; l++) {
                    if (b[l].dispose) {
                      b[l].dispose(k);
                    }
                  }
                  this.animState.trackEntryPool.free(k);
                  break;
                case i.complete:
                  if (k.listener != null && k.listener.complete) {
                    k.listener.complete(k);
                  }
                  l = 0;
                  for (; l < b.length; l++) {
                    if (b[l].complete) {
                      b[l].complete(k);
                    }
                  }
                  break;
                case i.event:
                  var m = a[2 + c++];
                  if (k.listener != null && k.listener.event) {
                    k.listener.event(k, m);
                  }
                  l = 0;
                  for (; l < b.length; l++) {
                    if (b[l].event) {
                      b[l].event(k, m);
                    }
                  }
              }
            }
            this.clear();
            this.drainDisabled = false;
          }
        };
        b.prototype.clear = function () {
          this.objects.length = 0;
        };
        return b;
      }();
      r.EventQueue = b;
      (function (b) {
        b[b.start = 0] = "start";
        b[b.interrupt = 1] = "interrupt";
        b[b.end = 2] = "end";
        b[b.dispose = 3] = "dispose";
        b[b.complete = 4] = "complete";
        b[b.event = 5] = "event";
      })(i = r.EventType || (r.EventType = {}));
      var d = function () {
        function b() {}
        b.prototype.start = function () {};
        b.prototype.interrupt = function () {};
        b.prototype.end = function () {};
        b.prototype.dispose = function () {};
        b.prototype.complete = function () {};
        b.prototype.event = function () {};
        return b;
      }();
      r.AnimationStateAdapter = d;
    })(i || (i = {}));
    (function (c) {
      var a = function () {
        function b(b) {
          this.animationToMixTime = {};
          this.defaultMix = 0;
          if (b == null) {
            throw Error("skeletonData cannot be null.");
          }
          this.skeletonData = b;
        }
        b.prototype.setMix = function (f, a, b) {
          var c = this.skeletonData.findAnimation(f);
          if (c == null) {
            throw Error("Animation not found: " + f);
          }
          var d = this.skeletonData.findAnimation(a);
          if (d == null) {
            throw Error("Animation not found: " + a);
          }
          this.setMixWith(c, d, b);
        };
        b.prototype.setMixWith = function (e, a, b) {
          if (e == null) {
            throw Error("from cannot be null.");
          }
          if (a == null) {
            throw Error("to cannot be null.");
          }
          var c = e.name + "." + a.name;
          this.animationToMixTime[c] = b;
        };
        b.prototype.getMix = function (e, a) {
          var b = e.name + "." + a.name;
          var c = this.animationToMixTime[b];
          if (c === undefined) {
            return this.defaultMix;
          } else {
            return c;
          }
        };
        return b;
      }();
      c.AnimationStateData = a;
    })(i || (i = {}));
    (function (e) {
      var b = function () {
        function i(c, a) {
          if (a === undefined) {
            a = "";
          }
          this.assets = {};
          this.errors = {};
          this.toLoad = 0;
          this.loaded = 0;
          this.textureLoader = c;
          this.pathPrefix = a;
        }
        i.downloadText = function (e, a, b) {
          var c = new XMLHttpRequest();
          c.open("GET", e, true);
          c.onload = function () {
            if (c.status == 200) {
              a(c.responseText);
            } else {
              b(c.status, c.responseText);
            }
          };
          c.onerror = function () {
            b(c.status, c.responseText);
          };
          c.send();
        };
        i.downloadBinary = function (e, a, b) {
          var c = new XMLHttpRequest();
          c.open("GET", e, true);
          c.responseType = "arraybuffer";
          c.onload = function () {
            if (c.status == 200) {
              a(new Uint8Array(c.response));
            } else {
              b(c.status, c.responseText);
            }
          };
          c.onerror = function () {
            b(c.status, c.responseText);
          };
          c.send();
        };
        i.prototype.loadBinary = function (e, g, h) {
          var j = this;
          if (g === undefined) {
            g = null;
          }
          if (h === undefined) {
            h = null;
          }
          e = this.pathPrefix + e;
          this.toLoad++;
          i.downloadBinary(e, function (a) {
            j.assets[e] = a;
            if (g) {
              g(e, a);
            }
            j.toLoad--;
            j.loaded++;
          }, function (a, b) {
            j.errors[e] = "Couldn't load binary " + e + ": status " + status + ", " + b;
            if (h) {
              h(e, "Couldn't load binary " + e + ": status " + status + ", " + b);
            }
            j.toLoad--;
            j.loaded++;
          });
        };
        i.prototype.loadText = function (e, g, h) {
          var j = this;
          if (g === undefined) {
            g = null;
          }
          if (h === undefined) {
            h = null;
          }
          e = this.pathPrefix + e;
          this.toLoad++;
          i.downloadText(e, function (a) {
            j.assets[e] = a;
            if (g) {
              g(e, a);
            }
            j.toLoad--;
            j.loaded++;
          }, function (a, b) {
            j.errors[e] = "Couldn't load text " + e + ": status " + status + ", " + b;
            if (h) {
              h(e, "Couldn't load text " + e + ": status " + status + ", " + b);
            }
            j.toLoad--;
            j.loaded++;
          });
        };
        i.prototype.loadTexture = function (e, g, h) {
          var i = this;
          if (g === undefined) {
            g = null;
          }
          if (h === undefined) {
            h = null;
          }
          e = this.pathPrefix + e;
          this.toLoad++;
          var d = new Image();
          d.crossOrigin = "anonymous";
          d.onload = function () {
            var a = i.textureLoader(d);
            i.assets[e] = a;
            i.toLoad--;
            i.loaded++;
            if (g) {
              g(e, d);
            }
          };
          d.onerror = function () {
            i.errors[e] = "Couldn't load image " + e;
            i.toLoad--;
            i.loaded++;
            if (h) {
              h(e, "Couldn't load image " + e);
            }
          };
          d.src = e;
        };
        i.prototype.loadTextureData = function (e, h, i, b) {
          var j = this;
          if (i === undefined) {
            i = null;
          }
          if (b === undefined) {
            b = null;
          }
          e = this.pathPrefix + e;
          this.toLoad++;
          var f = new Image();
          f.onload = function () {
            var a = j.textureLoader(f);
            j.assets[e] = a;
            j.toLoad--;
            j.loaded++;
            if (i) {
              i(e, f);
            }
          };
          f.onerror = function () {
            j.errors[e] = "Couldn't load image " + e;
            j.toLoad--;
            j.loaded++;
            if (b) {
              b(e, "Couldn't load image " + e);
            }
          };
          f.src = h;
        };
        i.prototype.loadTextureAtlas = function (k, b, l) {
          var n = this;
          if (b === undefined) {
            b = null;
          }
          if (l === undefined) {
            l = null;
          }
          var j = k.lastIndexOf("/") >= 0 ? k.substring(0, k.lastIndexOf("/")) : "";
          k = this.pathPrefix + k;
          this.toLoad++;
          i.downloadText(k, function (d) {
            var f = {
              count: 0
            };
            var g = [];
            try {
              new e.TextureAtlas(d, function (b) {
                g.push(j + "/" + b);
                var a = document.createElement("img");
                a.width = 16;
                a.height = 16;
                return new e.FakeTexture(a);
              });
            } catch (b) {
              var h = b;
              n.errors[k] = "Couldn't load texture atlas " + k + ": " + h.message;
              if (l) {
                l(k, "Couldn't load texture atlas " + k + ": " + h.message);
              }
              n.toLoad--;
              n.loaded++;
              return;
            }
            for (var a = function (a) {
                var h = false;
                n.loadTexture(a, function (a) {
                  f.count++;
                  if (f.count == g.length) {
                    if (h) {
                      n.errors[k] = "Couldn't load texture atlas page " + a + "} of atlas " + k;
                      if (l) {
                        l(k, "Couldn't load texture atlas page " + a + " of atlas " + k);
                      }
                      n.toLoad--;
                      n.loaded++;
                    } else {
                      try {
                        var c = new e.TextureAtlas(d, function (b) {
                          return n.get(j + "/" + b);
                        });
                        n.assets[k] = c;
                        if (b) {
                          b(k, c);
                        }
                        n.toLoad--;
                        n.loaded++;
                      } catch (b) {
                        var i = b;
                        n.errors[k] = "Couldn't load texture atlas " + k + ": " + i.message;
                        if (l) {
                          l(k, "Couldn't load texture atlas " + k + ": " + i.message);
                        }
                        n.toLoad--;
                        n.loaded++;
                      }
                    }
                  }
                }, function (b) {
                  h = true;
                  f.count++;
                  if (f.count == g.length) {
                    n.errors[k] = "Couldn't load texture atlas page " + b + "} of atlas " + k;
                    if (l) {
                      l(k, "Couldn't load texture atlas page " + b + " of atlas " + k);
                    }
                    n.toLoad--;
                    n.loaded++;
                  }
                });
              }, c = 0, i = g; c < i.length; c++) {
              a(i[c]);
            }
          }, function (c, a) {
            n.errors[k] = "Couldn't load texture atlas " + k + ": status " + status + ", " + a;
            if (l) {
              l(k, "Couldn't load texture atlas " + k + ": status " + status + ", " + a);
            }
            n.toLoad--;
            n.loaded++;
          });
        };
        i.prototype.get = function (b) {
          b = this.pathPrefix + b;
          return this.assets[b];
        };
        i.prototype.remove = function (c) {
          c = this.pathPrefix + c;
          var d = this.assets[c];
          if (d.dispose) {
            d.dispose();
          }
          this.assets[c] = null;
        };
        i.prototype.removeAll = function () {
          for (var c in this.assets) {
            var d = this.assets[c];
            if (d.dispose) {
              d.dispose();
            }
          }
          this.assets = {};
        };
        i.prototype.isLoadingComplete = function () {
          return this.toLoad == 0;
        };
        i.prototype.getToLoad = function () {
          return this.toLoad;
        };
        i.prototype.getLoaded = function () {
          return this.loaded;
        };
        i.prototype.dispose = function () {
          this.removeAll();
        };
        i.prototype.hasErrors = function () {
          return Object.keys(this.errors).length > 0;
        };
        i.prototype.getErrors = function () {
          return this.errors;
        };
        return i;
      }();
      e.AssetManager = b;
    })(i || (i = {}));
    (function (g) {
      var a = function () {
        function a(b) {
          this.atlas = b;
        }
        a.prototype.newRegionAttachment = function (a, b, c) {
          var d = this.atlas.findRegion(c);
          if (d == null) {
            return null;
          }
          d.renderObject = d;
          var e = new g.RegionAttachment(b);
          e.setRegion(d);
          return e;
        };
        a.prototype.newMeshAttachment = function (a, b, c) {
          var d = this.atlas.findRegion(c);
          if (d == null) {
            return null;
          }
          d.renderObject = d;
          var e = new g.MeshAttachment(b);
          e.region = d;
          return e;
        };
        a.prototype.newBoundingBoxAttachment = function (a, b) {
          return new g.BoundingBoxAttachment(b);
        };
        a.prototype.newPathAttachment = function (a, b) {
          return new g.PathAttachment(b);
        };
        a.prototype.newPointAttachment = function (a, b) {
          return new g.PointAttachment(b);
        };
        a.prototype.newClippingAttachment = function (a, b) {
          return new g.ClippingAttachment(b);
        };
        return a;
      }();
      g.AtlasAttachmentLoader = a;
    })(i || (i = {}));
    (function (b) {
      (function (b) {
        b[b.Normal = 0] = "Normal";
        b[b.Additive = 1] = "Additive";
        b[b.Multiply = 2] = "Multiply";
        b[b.Screen = 3] = "Screen";
      })(b.BlendMode || (b.BlendMode = {}));
    })(i || (i = {}));
    (function (m) {
      var b = function () {
        function b(d, a, b) {
          this.children = [];
          this.x = 0;
          this.y = 0;
          this.rotation = 0;
          this.scaleX = 0;
          this.scaleY = 0;
          this.shearX = 0;
          this.shearY = 0;
          this.ax = 0;
          this.ay = 0;
          this.arotation = 0;
          this.ascaleX = 0;
          this.ascaleY = 0;
          this.ashearX = 0;
          this.ashearY = 0;
          this.appliedValid = false;
          this.a = 0;
          this.b = 0;
          this.c = 0;
          this.d = 0;
          this.worldY = 0;
          this.worldX = 0;
          this.sorted = false;
          this.active = false;
          if (d == null) {
            throw Error("data cannot be null.");
          }
          if (a == null) {
            throw Error("skeleton cannot be null.");
          }
          this.data = d;
          this.skeleton = a;
          this.parent = b;
          this.setToSetupPose();
        }
        b.prototype.isActive = function () {
          return this.active;
        };
        b.prototype.update = function () {
          this.updateWorldTransformWith(this.x, this.y, this.rotation, this.scaleX, this.scaleY, this.shearX, this.shearY);
        };
        b.prototype.updateWorldTransform = function () {
          this.updateWorldTransformWith(this.x, this.y, this.rotation, this.scaleX, this.scaleY, this.shearX, this.shearY);
        };
        b.prototype.updateWorldTransformWith = function (c, d, e, g, h, i, j) {
          this.ax = c;
          this.ay = d;
          this.arotation = e;
          this.ascaleX = g;
          this.ascaleY = h;
          this.ashearX = i;
          this.ashearY = j;
          this.appliedValid = true;
          var a = this.parent;
          if (a == null) {
            var k = this.skeleton;
            var n = e + 90 + j;
            var o = k.scaleX;
            var p = k.scaleY;
            this.a = m.MathUtils.cosDeg(e + i) * g * o;
            this.b = m.MathUtils.cosDeg(n) * h * o;
            this.c = m.MathUtils.sinDeg(e + i) * g * p;
            this.d = m.MathUtils.sinDeg(n) * h * p;
            this.worldX = c * o + k.x;
            this.worldY = d * p + k.y;
            return;
          }
          var q = a.a;
          var r = a.b;
          var s = a.c;
          var t = a.d;
          this.worldX = q * c + r * d + a.worldX;
          this.worldY = s * c + t * d + a.worldY;
          switch (this.data.transformMode) {
            case m.TransformMode.Normal:
              n = e + 90 + j;
              var v = m.MathUtils.cosDeg(e + i) * g;
              var y = m.MathUtils.cosDeg(n) * h;
              var C = m.MathUtils.sinDeg(e + i) * g;
              var E = m.MathUtils.sinDeg(n) * h;
              this.a = q * v + r * C;
              this.b = q * y + r * E;
              this.c = s * v + t * C;
              this.d = s * y + t * E;
              return;
            case m.TransformMode.OnlyTranslation:
              n = e + 90 + j;
              this.a = m.MathUtils.cosDeg(e + i) * g;
              this.b = m.MathUtils.cosDeg(n) * h;
              this.c = m.MathUtils.sinDeg(e + i) * g;
              this.d = m.MathUtils.sinDeg(n) * h;
              break;
            case m.TransformMode.NoRotationOrReflection:
              var M = 0;
              if ((A = q * q + s * s) > 0.0001) {
                r = s * (A = Math.abs(q * t - r * s) / A);
                t = q * A;
                M = Math.atan2(s, q) * m.MathUtils.radDeg;
              } else {
                q = 0;
                s = 0;
                M = 90 - Math.atan2(t, r) * m.MathUtils.radDeg;
              }
              var O = e + i - M;
              var K = e + j - M + 90;
              v = m.MathUtils.cosDeg(O) * g;
              y = m.MathUtils.cosDeg(K) * h;
              C = m.MathUtils.sinDeg(O) * g;
              E = m.MathUtils.sinDeg(K) * h;
              this.a = q * v - r * C;
              this.b = q * y - r * E;
              this.c = s * v + t * C;
              this.d = s * y + t * E;
              break;
            case m.TransformMode.NoScale:
            case m.TransformMode.NoScaleOrReflection:
              var A;
              var R = m.MathUtils.cosDeg(e);
              var L = m.MathUtils.sinDeg(e);
              var b = (q * R + r * L) / this.skeleton.scaleX;
              var S = (s * R + t * L) / this.skeleton.scaleY;
              if ((A = Math.sqrt(b * b + S * S)) > 0.00001) {
                A = 1 / A;
              }
              A = Math.sqrt((b *= A) * b + (S *= A) * S);
              if (this.data.transformMode == m.TransformMode.NoScale && q * t - r * s < 0 != (this.skeleton.scaleX < 0 != this.skeleton.scaleY < 0)) {
                A = -A;
              }
              var T = Math.PI / 2 + Math.atan2(S, b);
              var Q = Math.cos(T) * A;
              var w = Math.sin(T) * A;
              v = m.MathUtils.cosDeg(i) * g;
              y = m.MathUtils.cosDeg(90 + j) * h;
              C = m.MathUtils.sinDeg(i) * g;
              E = m.MathUtils.sinDeg(90 + j) * h;
              this.a = b * v + Q * C;
              this.b = b * y + Q * E;
              this.c = S * v + w * C;
              this.d = S * y + w * E;
          }
          this.a *= this.skeleton.scaleX;
          this.b *= this.skeleton.scaleX;
          this.c *= this.skeleton.scaleY;
          this.d *= this.skeleton.scaleY;
        };
        b.prototype.setToSetupPose = function () {
          var b = this.data;
          this.x = b.x;
          this.y = b.y;
          this.rotation = b.rotation;
          this.scaleX = b.scaleX;
          this.scaleY = b.scaleY;
          this.shearX = b.shearX;
          this.shearY = b.shearY;
        };
        b.prototype.getWorldRotationX = function () {
          return Math.atan2(this.c, this.a) * m.MathUtils.radDeg;
        };
        b.prototype.getWorldRotationY = function () {
          return Math.atan2(this.d, this.b) * m.MathUtils.radDeg;
        };
        b.prototype.getWorldScaleX = function () {
          return Math.sqrt(this.a * this.a + this.c * this.c);
        };
        b.prototype.getWorldScaleY = function () {
          return Math.sqrt(this.b * this.b + this.d * this.d);
        };
        b.prototype.updateAppliedTransform = function () {
          this.appliedValid = true;
          var c = this.parent;
          if (c == null) {
            this.ax = this.worldX;
            this.ay = this.worldY;
            this.arotation = Math.atan2(this.c, this.a) * m.MathUtils.radDeg;
            this.ascaleX = Math.sqrt(this.a * this.a + this.c * this.c);
            this.ascaleY = Math.sqrt(this.b * this.b + this.d * this.d);
            this.ashearX = 0;
            this.ashearY = Math.atan2(this.a * this.b + this.c * this.d, this.a * this.d - this.b * this.c) * m.MathUtils.radDeg;
            return;
          }
          var b = c.a;
          var e = c.b;
          var g = c.c;
          var i = c.d;
          var j = 1 / (b * i - e * g);
          var k = this.worldX - c.worldX;
          var a = this.worldY - c.worldY;
          this.ax = k * i * j - a * e * j;
          this.ay = a * b * j - k * g * j;
          var n = j * i;
          var o = j * b;
          var l = j * e;
          var h = j * g;
          var q = n * this.a - l * this.c;
          var f = n * this.b - l * this.d;
          var d = o * this.c - h * this.a;
          var r = o * this.d - h * this.b;
          this.ashearX = 0;
          this.ascaleX = Math.sqrt(q * q + d * d);
          if (this.ascaleX > 0.0001) {
            var p = q * r - f * d;
            this.ascaleY = p / this.ascaleX;
            this.ashearY = Math.atan2(q * f + d * r, p) * m.MathUtils.radDeg;
            this.arotation = Math.atan2(d, q) * m.MathUtils.radDeg;
          } else {
            this.ascaleX = 0;
            this.ascaleY = Math.sqrt(f * f + r * r);
            this.ashearY = 0;
            this.arotation = 90 - Math.atan2(r, f) * m.MathUtils.radDeg;
          }
        };
        b.prototype.worldToLocal = function (i) {
          var b = this.a;
          var c = this.b;
          var d = this.c;
          var e = this.d;
          var f = 1 / (b * e - c * d);
          var g = i.x - this.worldX;
          var h = i.y - this.worldY;
          i.x = g * e * f - h * c * f;
          i.y = h * b * f - g * d * f;
          return i;
        };
        b.prototype.localToWorld = function (d) {
          var a = d.x;
          var b = d.y;
          d.x = a * this.a + b * this.b + this.worldX;
          d.y = a * this.c + b * this.d + this.worldY;
          return d;
        };
        b.prototype.worldToLocalRotation = function (c) {
          var a = m.MathUtils.sinDeg(c);
          var b = m.MathUtils.cosDeg(c);
          return Math.atan2(this.a * a - this.c * b, this.d * b - this.b * a) * m.MathUtils.radDeg + this.rotation - this.shearX;
        };
        b.prototype.localToWorldRotation = function (c) {
          c -= this.rotation - this.shearX;
          var e = m.MathUtils.sinDeg(c);
          var b = m.MathUtils.cosDeg(c);
          return Math.atan2(b * this.c + e * this.d, b * this.a + e * this.b) * m.MathUtils.radDeg;
        };
        b.prototype.rotateWorld = function (c) {
          var b = this.a;
          var d = this.b;
          var e = this.c;
          var f = this.d;
          var g = m.MathUtils.cosDeg(c);
          var h = m.MathUtils.sinDeg(c);
          this.a = g * b - h * e;
          this.b = g * d - h * f;
          this.c = h * b + g * e;
          this.d = h * d + g * f;
          this.appliedValid = false;
        };
        return b;
      }();
      m.Bone = b;
    })(i || (i = {}));
    (function (f) {
      var a;
      f.BoneData = function (b, c, d) {
        this.x = 0;
        this.y = 0;
        this.rotation = 0;
        this.scaleX = 1;
        this.scaleY = 1;
        this.shearX = 0;
        this.shearY = 0;
        this.transformMode = a.Normal;
        this.skinRequired = false;
        this.color = new f.Color();
        if (b < 0) {
          throw Error("index must be >= 0.");
        }
        if (c == null) {
          throw Error("name cannot be null.");
        }
        this.index = b;
        this.name = c;
        this.parent = d;
      };
      (function (b) {
        b[b.Normal = 0] = "Normal";
        b[b.OnlyTranslation = 1] = "OnlyTranslation";
        b[b.NoRotationOrReflection = 2] = "NoRotationOrReflection";
        b[b.NoScale = 3] = "NoScale";
        b[b.NoScaleOrReflection = 4] = "NoScaleOrReflection";
      })(a = f.TransformMode || (f.TransformMode = {}));
    })(i || (i = {}));
    (function (b) {
      b.ConstraintData = function (d, a, b) {
        this.name = d;
        this.order = a;
        this.skinRequired = b;
      };
    })(i || (i = {}));
    (function (b) {
      b.Event = function (c, a) {
        if (a == null) {
          throw Error("data cannot be null.");
        }
        this.time = c;
        this.data = a;
      };
    })(i || (i = {}));
    (function (b) {
      b.EventData = function (b) {
        this.name = b;
      };
    })(i || (i = {}));
    (function (p) {
      var b = function () {
        function b(d, a) {
          this.bendDirection = 0;
          this.compress = false;
          this.stretch = false;
          this.mix = 1;
          this.softness = 0;
          this.active = false;
          if (d == null) {
            throw Error("data cannot be null.");
          }
          if (a == null) {
            throw Error("skeleton cannot be null.");
          }
          this.data = d;
          this.mix = d.mix;
          this.softness = d.softness;
          this.bendDirection = d.bendDirection;
          this.compress = d.compress;
          this.stretch = d.stretch;
          this.bones = [];
          for (var b = 0; b < d.bones.length; b++) {
            this.bones.push(a.findBone(d.bones[b].name));
          }
          this.target = a.findBone(d.target.name);
        }
        b.prototype.isActive = function () {
          return this.active;
        };
        b.prototype.apply = function () {
          this.update();
        };
        b.prototype.update = function () {
          var c = this.target;
          var a = this.bones;
          switch (a.length) {
            case 1:
              this.apply1(a[0], c.worldX, c.worldY, this.compress, this.stretch, this.data.uniform, this.mix);
              break;
            case 2:
              this.apply2(a[0], a[1], c.worldX, c.worldY, this.bendDirection, this.stretch, this.softness, this.mix);
          }
        };
        b.prototype.apply1 = function (u, b, e, i, j, k, n) {
          if (!u.appliedValid) {
            u.updateAppliedTransform();
          }
          var a = u.parent;
          var o = 1 / (a.a * a.d - a.b * a.c);
          var c = b - a.worldX;
          var l = e - a.worldY;
          var h = (c * a.d - l * a.b) * o - u.ax;
          var q = (l * a.a - c * a.c) * o - u.ay;
          var f = Math.atan2(q, h) * p.MathUtils.radDeg - u.ashearX - u.arotation;
          if (u.ascaleX < 0) {
            f += 180;
          }
          if (f > 180) {
            f -= 360;
          } else if (f < -180) {
            f += 360;
          }
          var v = u.ascaleX;
          var w = u.ascaleY;
          if (i || j) {
            var x = u.data.length * v;
            var t = Math.sqrt(h * h + q * q);
            if (i && t < x || j && t > x && x > 0.0001) {
              var g = (t / x - 1) * n + 1;
              v *= g;
              if (k) {
                w *= g;
              }
            }
          }
          u.updateWorldTransformWith(u.ax, u.ay, u.arotation + f * n, v, w, u.ashearX, u.ashearY);
        };
        b.prototype.apply2 = function (b, d, e, f, g, i, k, n) {
          if (n != 0) {
            if (!b.appliedValid) {
              b.updateAppliedTransform();
            }
            if (!d.appliedValid) {
              d.updateAppliedTransform();
            }
            var o = b.ax;
            var c = b.ay;
            var l = b.ascaleX;
            var r = l;
            var s = b.ascaleY;
            var t = d.ascaleX;
            var u = 0;
            var v = 0;
            var w = 0;
            if (l < 0) {
              l = -l;
              u = 180;
              w = -1;
            } else {
              u = 0;
              w = 1;
            }
            if (s < 0) {
              s = -s;
              w = -w;
            }
            if (t < 0) {
              t = -t;
              v = 180;
            } else {
              v = 0;
            }
            var x = d.ax;
            var y = 0;
            var A = 0;
            var B = 0;
            var C = b.a;
            var E = b.b;
            var F = b.c;
            var G = b.d;
            var H = Math.abs(l - s) <= 0.0001;
            if (H) {
              A = C * x + E * (y = d.ay) + b.worldX;
              B = F * x + G * y + b.worldY;
            } else {
              y = 0;
              A = C * x + b.worldX;
              B = F * x + b.worldY;
            }
            var L = b.parent;
            C = L.a;
            E = L.b;
            F = L.c;
            var M;
            var O;
            var S = 1 / (C * (G = L.d) - E * F);
            var T = A - L.worldX;
            var V = B - L.worldY;
            var Z = (T * G - V * E) * S - o;
            var $ = (V * C - T * F) * S - c;
            var P = Math.sqrt(Z * Z + $ * $);
            var D = d.data.length * t;
            if (P < 0.0001) {
              this.apply1(b, e, f, false, i, false, n);
              d.updateWorldTransformWith(x, y, 0, d.ascaleX, d.ascaleY, d.ashearX, d.ashearY);
              return;
            }
            var _ = ((T = e - L.worldX) * G - (V = f - L.worldY) * E) * S - o;
            var aa = (V * C - T * F) * S - c;
            var ba = _ * _ + aa * aa;
            if (k != 0) {
              k *= l * (t + 1) / 2;
              var ia = Math.sqrt(ba);
              var pa = ia - P - D * l + k;
              if (pa > 0) {
                var U = Math.min(1, pa / (k * 2)) - 1;
                ba = (_ -= (U = (pa - k * (1 - U * U)) / ia) * _) * _ + (aa -= U * aa) * aa;
              }
            }
            t: if (H) {
              var ra = (ba - P * P - (D *= l) * D) / (P * 2 * D);
              if (ra < -1) {
                ra = -1;
              } else if (ra > 1) {
                ra = 1;
                if (i) {
                  r *= (Math.sqrt(ba) / (P + D) - 1) * n + 1;
                }
              }
              M = Math.atan2(aa * (C = P + D * ra) - _ * (E = D * Math.sin(O = Math.acos(ra) * g)), _ * C + aa * E);
            } else {
              var ta = (C = l * D) * C;
              var xa = (E = s * D) * E;
              var W = Math.atan2(aa, _);
              var X = xa * -2 * P;
              var Y = xa - ta;
              if ((G = X * X - Y * 4 * (F = xa * P * P + ta * ba - ta * xa)) >= 0) {
                var j = Math.sqrt(G);
                if (X < 0) {
                  j = -j;
                }
                var za = (j = -(X + j) / 2) / Y;
                var Aa = F / j;
                var K = Math.abs(za) < Math.abs(Aa) ? za : Aa;
                if (K * K <= ba) {
                  M = W - Math.atan2(V = Math.sqrt(ba - K * K) * g, K);
                  O = Math.atan2(V / s, (K - P) / l);
                  break t;
                }
              }
              var Q = p.MathUtils.PI;
              var Ka = P - C;
              var La = Ka * Ka;
              var Ma = 0;
              var Na = 0;
              var Oa = P + C;
              var Pa = Oa * Oa;
              var Qa = 0;
              if ((F = -C * P / (ta - xa)) >= -1 && F <= 1) {
                if ((G = (T = C * Math.cos(F = Math.acos(F)) + P) * T + (V = E * Math.sin(F)) * V) < La) {
                  Q = F;
                  La = G;
                  Ka = T;
                  Ma = V;
                }
                if (G > Pa) {
                  Na = F;
                  Pa = G;
                  Oa = T;
                  Qa = V;
                }
              }
              if (ba <= (La + Pa) / 2) {
                M = W - Math.atan2(Ma * g, Ka);
                O = Q * g;
              } else {
                M = W - Math.atan2(Qa * g, Oa);
                O = Na * g;
              }
            }
            var Ra = Math.atan2(y, x) * w;
            var Ia = b.arotation;
            if ((M = (M - Ra) * p.MathUtils.radDeg + u - Ia) > 180) {
              M -= 360;
            } else if (M < -180) {
              M += 360;
            }
            b.updateWorldTransformWith(o, c, Ia + M * n, r, b.ascaleY, 0, 0);
            Ia = d.arotation;
            if ((O = ((O + Ra) * p.MathUtils.radDeg - d.ashearX) * w + v - Ia) > 180) {
              O -= 360;
            } else if (O < -180) {
              O += 360;
            }
            d.updateWorldTransformWith(x, y, Ia + O * n, d.ascaleX, d.ascaleY, d.ashearX, d.ashearY);
          } else {
            d.updateWorldTransform();
          }
        };
        return b;
      }();
      p.IkConstraint = b;
    })(i || (i = {}));
    (function (c) {
      var a = function (d) {
        function a(a) {
          var b = d.call(this, a, 0, false) || this;
          b.bones = [];
          b.bendDirection = 1;
          b.compress = false;
          b.stretch = false;
          b.uniform = false;
          b.mix = 1;
          b.softness = 0;
          return b;
        }
        l(a, d);
        return a;
      }(c.ConstraintData);
      c.IkConstraintData = a;
    })(i || (i = {}));
    (function (k) {
      var b = function () {
        function b(e, a) {
          this.position = 0;
          this.spacing = 0;
          this.rotateMix = 0;
          this.translateMix = 0;
          this.spaces = [];
          this.positions = [];
          this.world = [];
          this.curves = [];
          this.lengths = [];
          this.segments = [];
          this.active = false;
          if (e == null) {
            throw Error("data cannot be null.");
          }
          if (a == null) {
            throw Error("skeleton cannot be null.");
          }
          this.data = e;
          this.bones = [];
          for (var b = 0, f = e.bones.length; b < f; b++) {
            this.bones.push(a.findBone(e.bones[b].name));
          }
          this.target = a.findSlot(e.target.name);
          this.position = e.position;
          this.spacing = e.spacing;
          this.rotateMix = e.rotateMix;
          this.translateMix = e.translateMix;
        }
        b.prototype.isActive = function () {
          return this.active;
        };
        b.prototype.apply = function () {
          this.update();
        };
        b.prototype.update = function () {
          var m = this.target.getAttachment();
          if (m instanceof k.PathAttachment) {
            var e = this.rotateMix;
            var i = this.translateMix;
            var j = e > 0;
            if (i > 0 || j) {
              var n = this.data;
              var p = n.spacingMode == k.SpacingMode.Percent;
              var a = n.rotateMode;
              var o = a == k.RotateMode.Tangent;
              var c = a == k.RotateMode.ChainScale;
              var l = this.bones.length;
              var h = o ? l : l + 1;
              var q = this.bones;
              var f = k.Utils.setArraySize(this.spaces, h);
              var d = null;
              var r = this.spacing;
              if (c || !p) {
                if (c) {
                  d = k.Utils.setArraySize(this.lengths, l);
                }
                for (var t = n.spacingMode == k.SpacingMode.Length, u = 0, v = h - 1; u < v;) {
                  var w = (I = q[u]).data.length;
                  if (w < b.epsilon) {
                    if (c) {
                      d[u] = 0;
                    }
                    f[++u] = 0;
                  } else if (p) {
                    if (c) {
                      var x = w * I.a;
                      var z = w * I.c;
                      var A = Math.sqrt(x * x + z * z);
                      d[u] = A;
                    }
                    f[++u] = r;
                  } else {
                    x = w * I.a;
                    z = w * I.c;
                    var B = Math.sqrt(x * x + z * z);
                    if (c) {
                      d[u] = B;
                    }
                    f[++u] = (t ? w + r : r) * B / w;
                  }
                }
              } else {
                for (u = 1; u < h; u++) {
                  f[u] = r;
                }
              }
              var C = this.computeWorldPositions(m, h, o, n.positionMode == k.PositionMode.Percent, p);
              var D = C[0];
              var E = C[1];
              var F = n.offsetRotation;
              var G = false;
              if (F == 0) {
                G = a == k.RotateMode.Chain;
              } else {
                G = false;
                F *= (H = this.target.bone).a * H.d - H.b * H.c > 0 ? k.MathUtils.degRad : -k.MathUtils.degRad;
              }
              u = 0;
              for (var H = 3; u < l; u++, H += 3) {
                var I;
                (I = q[u]).worldX += (D - I.worldX) * i;
                I.worldY += (E - I.worldY) * i;
                var J = (x = C[H]) - D;
                var K = (z = C[H + 1]) - E;
                if (c) {
                  var L = d[u];
                  if (L != 0) {
                    var M = (Math.sqrt(J * J + K * K) / L - 1) * e + 1;
                    I.a *= M;
                    I.c *= M;
                  }
                }
                D = x;
                E = z;
                if (j) {
                  var N = I.a;
                  var O = I.b;
                  var P = I.c;
                  var R = I.d;
                  var S = 0;
                  var T = 0;
                  var U = 0;
                  S = o ? C[H - 1] : f[u + 1] == 0 ? C[H + 2] : Math.atan2(K, J);
                  S -= Math.atan2(P, N);
                  if (G) {
                    T = Math.cos(S);
                    U = Math.sin(S);
                    var V = I.data.length;
                    D += (V * (T * N - U * P) - J) * e;
                    E += (V * (U * N + T * P) - K) * e;
                  } else {
                    S += F;
                  }
                  if (S > k.MathUtils.PI) {
                    S -= k.MathUtils.PI2;
                  } else if (S < -k.MathUtils.PI) {
                    S += k.MathUtils.PI2;
                  }
                  T = Math.cos(S *= e);
                  U = Math.sin(S);
                  I.a = T * N - U * P;
                  I.b = T * O - U * R;
                  I.c = U * N + T * P;
                  I.d = U * O + T * R;
                }
                I.appliedValid = false;
              }
            }
          }
        };
        b.prototype.computeWorldPositions = function (c, d, e, i, j) {
          var m = this.target;
          var a = this.position;
          var n = this.spaces;
          var p = k.Utils.setArraySize(this.positions, d * 3 + 2);
          var l = null;
          var q = c.closed;
          var r = c.worldVerticesLength;
          var s = r / 6;
          var t = b.NONE;
          if (!c.constantSpeed) {
            var u = c.lengths;
            var w = u[s -= q ? 1 : 2];
            if (i) {
              a *= w;
            }
            if (j) {
              for (var v = 1; v < d; v++) {
                n[v] *= w;
              }
            }
            l = k.Utils.setArraySize(this.world, 8);
            v = 0;
            for (var y = 0, z = 0; v < d; v++, y += 3) {
              var A = a += Z = n[v];
              if (q) {
                if ((A %= w) < 0) {
                  A += w;
                }
                z = 0;
              } else {
                if (A < 0) {
                  if (t != b.BEFORE) {
                    t = b.BEFORE;
                    c.computeWorldVertices(m, 2, 4, l, 0, 2);
                  }
                  this.addBeforePosition(A, l, 0, p, y);
                  continue;
                }
                if (A > w) {
                  if (t != b.AFTER) {
                    t = b.AFTER;
                    c.computeWorldVertices(m, r - 6, 4, l, 0, 2);
                  }
                  this.addAfterPosition(A - w, l, 0, p, y);
                  continue;
                }
              }
              for (;; z++) {
                var B = u[z];
                if (!(A > B)) {
                  if (z == 0) {
                    A /= B;
                  } else {
                    A = (A - (ya = u[z - 1])) / (B - ya);
                  }
                  break;
                }
              }
              if (z != t) {
                t = z;
                if (q && z == s) {
                  c.computeWorldVertices(m, r - 4, 4, l, 0, 2);
                  c.computeWorldVertices(m, 0, 4, l, 4, 2);
                } else {
                  c.computeWorldVertices(m, z * 6 + 2, 8, l, 0, 2);
                }
              }
              this.addCurvePosition(A, l[0], l[1], l[2], l[3], l[4], l[5], l[6], l[7], p, y, e || v > 0 && Z == 0);
            }
            return p;
          }
          if (q) {
            r += 2;
            l = k.Utils.setArraySize(this.world, r);
            c.computeWorldVertices(m, 2, r - 4, l, 0, 2);
            c.computeWorldVertices(m, 0, 2, l, r - 4, 2);
            l[r - 2] = l[0];
            l[r - 1] = l[1];
          } else {
            s--;
            r -= 4;
            l = k.Utils.setArraySize(this.world, r);
            c.computeWorldVertices(m, 2, r, l, 0, 2);
          }
          for (var C = k.Utils.setArraySize(this.curves, s), D = 0, E = l[0], F = l[1], H = 0, I = 0, J = 0, K = 0, L = 0, M = 0, N = 0, O = 0, P = 0, Q = 0, R = 0, S = 0, T = 0, U = 0, V = (v = 0, 2); v < s; v++, V += 6) {
            H = l[V];
            I = l[V + 1];
            J = l[V + 2];
            K = l[V + 3];
            R = (N = (E - H * 2 + J) * 0.1875) * 2 + (P = ((H - J) * 3 - E + (L = l[V + 4])) * 0.09375);
            S = (O = (F - I * 2 + K) * 0.1875) * 2 + (Q = ((I - K) * 3 - F + (M = l[V + 5])) * 0.09375);
            D += Math.sqrt((T = (H - E) * 0.75 + N + P * 0.16666667) * T + (U = (I - F) * 0.75 + O + Q * 0.16666667) * U);
            T += R;
            U += S;
            R += P;
            S += Q;
            D += Math.sqrt(T * T + U * U);
            D += Math.sqrt((T += R) * T + (U += S) * U);
            D += Math.sqrt((T += R + P) * T + (U += S + Q) * U);
            C[v] = D;
            E = L;
            F = M;
          }
          a *= i ? D : D / c.lengths[s - 1];
          if (j) {
            for (v = 1; v < d; v++) {
              n[v] *= D;
            }
          }
          for (var W = this.segments, X = 0, Y = (v = 0, y = 0, z = 0, 0); v < d; v++, y += 3) {
            var Z;
            A = a += Z = n[v];
            if (q) {
              if ((A %= D) < 0) {
                A += D;
              }
              z = 0;
            } else {
              if (A < 0) {
                this.addBeforePosition(A, l, 0, p, y);
                continue;
              }
              if (A > D) {
                this.addAfterPosition(A - D, l, r - 4, p, y);
                continue;
              }
            }
            for (;; z++) {
              var _ = C[z];
              if (!(A > _)) {
                if (z == 0) {
                  A /= _;
                } else {
                  A = (A - (ya = C[z - 1])) / (_ - ya);
                }
                break;
              }
            }
            if (z != t) {
              t = z;
              var ba = z * 6;
              E = l[ba];
              F = l[ba + 1];
              H = l[ba + 2];
              I = l[ba + 3];
              J = l[ba + 4];
              K = l[ba + 5];
              R = (N = (E - H * 2 + J) * 0.03) * 2 + (P = ((H - J) * 3 - E + (L = l[ba + 6])) * 0.006);
              S = (O = (F - I * 2 + K) * 0.03) * 2 + (Q = ((I - K) * 3 - F + (M = l[ba + 7])) * 0.006);
              X = Math.sqrt((T = (H - E) * 0.3 + N + P * 0.16666667) * T + (U = (I - F) * 0.3 + O + Q * 0.16666667) * U);
              W[0] = X;
              ba = 1;
              for (; ba < 8; ba++) {
                T += R;
                U += S;
                R += P;
                S += Q;
                X += Math.sqrt(T * T + U * U);
                W[ba] = X;
              }
              X += Math.sqrt((T += R) * T + (U += S) * U);
              W[8] = X;
              X += Math.sqrt((T += R + P) * T + (U += S + Q) * U);
              W[9] = X;
              Y = 0;
            }
            for (A *= X;; Y++) {
              var ga = W[Y];
              if (!(A > ga)) {
                var ya;
                if (Y == 0) {
                  A /= ga;
                } else {
                  A = Y + (A - (ya = W[Y - 1])) / (ga - ya);
                }
                break;
              }
            }
            this.addCurvePosition(A * 0.1, E, F, H, I, J, K, L, M, p, y, e || v > 0 && Z == 0);
          }
          return p;
        };
        b.prototype.addBeforePosition = function (k, b, d, e, f) {
          var g = b[d];
          var h = b[d + 1];
          var i = b[d + 2] - g;
          var a = b[d + 3] - h;
          var j = Math.atan2(a, i);
          e[f] = g + k * Math.cos(j);
          e[f + 1] = h + k * Math.sin(j);
          e[f + 2] = j;
        };
        b.prototype.addAfterPosition = function (k, b, d, e, f) {
          var g = b[d + 2];
          var h = b[d + 3];
          var i = g - b[d];
          var a = h - b[d + 1];
          var j = Math.atan2(a, i);
          e[f] = g + k * Math.cos(j);
          e[f + 1] = h + k * Math.sin(j);
          e[f + 2] = j;
        };
        b.prototype.addCurvePosition = function (x, b, j, e, i, k, n, q, a, o, c, l) {
          if (x == 0 || isNaN(x)) {
            o[c] = b;
            o[c + 1] = j;
            o[c + 2] = Math.atan2(i - j, e - b);
            return;
          }
          var h = x * x;
          var r = h * x;
          var f = 1 - x;
          var d = f * f;
          var s = d * f;
          var p = f * x;
          var t = p * 3;
          var g = f * t;
          var m = t * x;
          var u = b * s + e * g + k * m + q * r;
          var v = j * s + i * g + n * m + a * r;
          o[c] = u;
          o[c + 1] = v;
          if (l) {
            o[c + 2] = x < 0.001 ? Math.atan2(i - j, e - b) : Math.atan2(v - (j * d + i * p * 2 + n * h), u - (b * d + e * p * 2 + k * h));
          }
        };
        b.NONE = -1;
        b.BEFORE = -2;
        b.AFTER = -3;
        b.epsilon = 0.00001;
        return b;
      }();
      k.PathConstraint = b;
    })(i || (i = {}));
    (function (c) {
      var a = function (d) {
        function a(a) {
          var b = d.call(this, a, 0, false) || this;
          b.bones = [];
          return b;
        }
        l(a, d);
        return a;
      }(c.ConstraintData);
      c.PathConstraintData = a;
      (function (b) {
        b[b.Fixed = 0] = "Fixed";
        b[b.Percent = 1] = "Percent";
      })(c.PositionMode || (c.PositionMode = {}));
      (function (b) {
        b[b.Length = 0] = "Length";
        b[b.Fixed = 1] = "Fixed";
        b[b.Percent = 2] = "Percent";
      })(c.SpacingMode || (c.SpacingMode = {}));
      (function (b) {
        b[b.Tangent = 0] = "Tangent";
        b[b.Chain = 1] = "Chain";
        b[b.ChainScale = 2] = "ChainScale";
      })(c.RotateMode || (c.RotateMode = {}));
    })(i || (i = {}));
    (function (d) {
      var f = function () {
        function b(b) {
          this.toLoad = [];
          this.assets = {};
          this.clientId = b;
        }
        b.prototype.loaded = function () {
          var c = 0;
          for (var d in this.assets) {
            c++;
          }
          return c;
        };
        return b;
      }();
      var a = function () {
        function b(b) {
          if (b === undefined) {
            b = "";
          }
          this.clientAssets = {};
          this.queuedAssets = {};
          this.rawAssets = {};
          this.errors = {};
          this.pathPrefix = b;
        }
        b.prototype.queueAsset = function (b, a, c) {
          var d = this.clientAssets[b];
          if (d == null) {
            d = new f(b);
            this.clientAssets[b] = d;
          }
          if (a !== null) {
            d.textureLoader = a;
          }
          d.toLoad.push(c);
          return this.queuedAssets[c] !== c && (this.queuedAssets[c] = c, true);
        };
        b.prototype.loadText = function (e, a) {
          var f = this;
          a = this.pathPrefix + a;
          if (this.queueAsset(e, null, a)) {
            var c = new XMLHttpRequest();
            c.onreadystatechange = function () {
              if (c.readyState == XMLHttpRequest.DONE) {
                if (c.status >= 200 && c.status < 300) {
                  f.rawAssets[a] = c.responseText;
                } else {
                  f.errors[a] = "Couldn't load text " + a + ": status " + c.status + ", " + c.responseText;
                }
              }
            };
            c.open("GET", a, true);
            c.send();
          }
        };
        b.prototype.loadJson = function (e, a) {
          var f = this;
          a = this.pathPrefix + a;
          if (this.queueAsset(e, null, a)) {
            var c = new XMLHttpRequest();
            c.onreadystatechange = function () {
              if (c.readyState == XMLHttpRequest.DONE) {
                if (c.status >= 200 && c.status < 300) {
                  f.rawAssets[a] = JSON.parse(c.responseText);
                } else {
                  f.errors[a] = "Couldn't load text " + a + ": status " + c.status + ", " + c.responseText;
                }
              }
            };
            c.open("GET", a, true);
            c.send();
          }
        };
        b.prototype.loadTexture = function (f, a, b) {
          var g = this;
          b = this.pathPrefix + b;
          if (this.queueAsset(f, a, b)) {
            var d = new Image();
            d.src = b;
            d.crossOrigin = "anonymous";
            d.onload = function () {
              g.rawAssets[b] = d;
            };
            d.onerror = function () {
              g.errors[b] = "Couldn't load image " + b;
            };
          }
        };
        b.prototype.get = function (d, a) {
          a = this.pathPrefix + a;
          var e = this.clientAssets[d];
          return e == null || e.assets[a];
        };
        b.prototype.updateClientAssets = function (e) {
          for (var a = 0; a < e.toLoad.length; a++) {
            var f = e.toLoad[a];
            if (e.assets[f] == null) {
              var g = this.rawAssets[f];
              if (g == null) {
                continue;
              }
              if (g instanceof HTMLImageElement) {
                e.assets[f] = e.textureLoader(g);
              } else {
                e.assets[f] = g;
              }
            }
          }
        };
        b.prototype.isLoadingComplete = function (c) {
          var a = this.clientAssets[c];
          return a == null || (this.updateClientAssets(a), a.toLoad.length == a.loaded());
        };
        b.prototype.dispose = function () {};
        b.prototype.hasErrors = function () {
          return Object.keys(this.errors).length > 0;
        };
        b.prototype.getErrors = function () {
          return this.errors;
        };
        return b;
      }();
      d.SharedAssetManager = a;
    })(i || (i = {}));
    (function (l) {
      var b = function () {
        function b(a) {
          this._updateCache = [];
          this.updateCacheReset = [];
          this.time = 0;
          this.scaleX = 1;
          this.scaleY = 1;
          this.x = 0;
          this.y = 0;
          if (a == null) {
            throw Error("data cannot be null.");
          }
          this.data = a;
          this.bones = [];
          for (var b = 0; b < a.bones.length; b++) {
            var c = a.bones[b];
            var d = undefined;
            if (c.parent == null) {
              d = new l.Bone(c, this, null);
            } else {
              var h = this.bones[c.parent.index];
              d = new l.Bone(c, this, h);
              h.children.push(d);
            }
            this.bones.push(d);
          }
          this.slots = [];
          this.drawOrder = [];
          b = 0;
          for (; b < a.slots.length; b++) {
            var i = a.slots[b];
            d = this.bones[i.boneData.index];
            var n = new l.Slot(i, d);
            this.slots.push(n);
            this.drawOrder.push(n);
          }
          this.ikConstraints = [];
          b = 0;
          for (; b < a.ikConstraints.length; b++) {
            var o = a.ikConstraints[b];
            this.ikConstraints.push(new l.IkConstraint(o, this));
          }
          this.transformConstraints = [];
          b = 0;
          for (; b < a.transformConstraints.length; b++) {
            var r = a.transformConstraints[b];
            this.transformConstraints.push(new l.TransformConstraint(r, this));
          }
          this.pathConstraints = [];
          b = 0;
          for (; b < a.pathConstraints.length; b++) {
            var s = a.pathConstraints[b];
            this.pathConstraints.push(new l.PathConstraint(s, this));
          }
          this.color = new l.Color(1, 1, 1, 1);
          this.updateCache();
        }
        b.prototype.updateCache = function () {
          this._updateCache.length = 0;
          this.updateCacheReset.length = 0;
          for (var d = this.bones, b = 0, e = d.length; b < e; b++) {
            (i = d[b]).sorted = i.data.skinRequired;
            i.active = !i.sorted;
          }
          if (this.skin != null) {
            var f = this.skin.bones;
            b = 0;
            e = this.skin.bones.length;
            for (; b < e; b++) {
              var i = this.bones[f[b].index];
              do {
                i.sorted = false;
                i.active = true;
                i = i.parent;
              } while (i != null);
            }
          }
          var k = this.ikConstraints;
          var n = this.transformConstraints;
          var p = this.pathConstraints;
          var a = k.length;
          var o = n.length;
          var c = p.length;
          var l = a + o + c;
          t: for (b = 0; b < l; b++) {
            for (var h = 0; h < a; h++) {
              if ((r = k[h]).data.order == b) {
                this.sortIkConstraint(r);
                continue t;
              }
            }
            for (h = 0; h < o; h++) {
              if ((r = n[h]).data.order == b) {
                this.sortTransformConstraint(r);
                continue t;
              }
            }
            for (h = 0; h < c; h++) {
              var r;
              if ((r = p[h]).data.order == b) {
                this.sortPathConstraint(r);
                continue t;
              }
            }
          }
          b = 0;
          e = d.length;
          for (; b < e; b++) {
            this.sortBone(d[b]);
          }
        };
        b.prototype.sortIkConstraint = function (b) {
          b.active = b.target.isActive() && (!b.data.skinRequired || this.skin != null && l.Utils.contains(this.skin.constraints, b.data, true));
          if (b.active) {
            var a = b.target;
            this.sortBone(a);
            var c = b.bones;
            var d = c[0];
            this.sortBone(d);
            if (c.length > 1) {
              var e = c[c.length - 1];
              if (!(this._updateCache.indexOf(e) > -1)) {
                this.updateCacheReset.push(e);
              }
            }
            this._updateCache.push(b);
            this.sortReset(d.children);
            c[c.length - 1].sorted = true;
          }
        };
        b.prototype.sortPathConstraint = function (b) {
          b.active = b.target.bone.isActive() && (!b.data.skinRequired || this.skin != null && l.Utils.contains(this.skin.constraints, b.data, true));
          if (b.active) {
            var d = b.target;
            var e = d.data.index;
            var f = d.bone;
            if (this.skin != null) {
              this.sortPathConstraintAttachment(this.skin, e, f);
            }
            if (this.data.defaultSkin != null && this.data.defaultSkin != this.skin) {
              this.sortPathConstraintAttachment(this.data.defaultSkin, e, f);
            }
            for (var g = 0, k = this.data.skins.length; g < k; g++) {
              this.sortPathConstraintAttachment(this.data.skins[g], e, f);
            }
            var i = d.getAttachment();
            if (i instanceof l.PathAttachment) {
              this.sortPathConstraintAttachmentWith(i, f);
            }
            var a = b.bones;
            var j = a.length;
            for (g = 0; g < j; g++) {
              this.sortBone(a[g]);
            }
            this._updateCache.push(b);
            g = 0;
            for (; g < j; g++) {
              this.sortReset(a[g].children);
            }
            for (g = 0; g < j; g++) {
              a[g].sorted = true;
            }
          }
        };
        b.prototype.sortTransformConstraint = function (a) {
          a.active = a.target.isActive() && (!a.data.skinRequired || this.skin != null && l.Utils.contains(this.skin.constraints, a.data, true));
          if (a.active) {
            this.sortBone(a.target);
            var b = a.bones;
            var c = b.length;
            if (a.data.local) {
              for (var d = 0; d < c; d++) {
                var e = b[d];
                this.sortBone(e.parent);
                if (!(this._updateCache.indexOf(e) > -1)) {
                  this.updateCacheReset.push(e);
                }
              }
            } else {
              for (d = 0; d < c; d++) {
                this.sortBone(b[d]);
              }
            }
            this._updateCache.push(a);
            for (var i = 0; i < c; i++) {
              this.sortReset(b[i].children);
            }
            for (i = 0; i < c; i++) {
              b[i].sorted = true;
            }
          }
        };
        b.prototype.sortPathConstraintAttachment = function (f, a, b) {
          var c = f.attachments[a];
          if (c) {
            for (var d in c) {
              this.sortPathConstraintAttachmentWith(c[d], b);
            }
          }
        };
        b.prototype.sortPathConstraintAttachmentWith = function (a, b) {
          if (a instanceof l.PathAttachment) {
            var c = a.bones;
            if (c == null) {
              this.sortBone(b);
            } else {
              for (var d = this.bones, e = 0; e < c.length;) {
                for (var f = c[e++], g = e + f; e < g; e++) {
                  var m = c[e];
                  this.sortBone(d[m]);
                }
              }
            }
          }
        };
        b.prototype.sortBone = function (c) {
          if (!c.sorted) {
            var a = c.parent;
            if (a != null) {
              this.sortBone(a);
            }
            c.sorted = true;
            this._updateCache.push(c);
          }
        };
        b.prototype.sortReset = function (e) {
          for (var a = 0, f = e.length; a < f; a++) {
            var c = e[a];
            if (c.active) {
              if (c.sorted) {
                this.sortReset(c.children);
              }
              c.sorted = false;
            }
          }
        };
        b.prototype.updateWorldTransform = function () {
          for (var e = this.updateCacheReset, a = 0, g = e.length; a < g; a++) {
            var h = e[a];
            h.ax = h.x;
            h.ay = h.y;
            h.arotation = h.rotation;
            h.ascaleX = h.scaleX;
            h.ascaleY = h.scaleY;
            h.ashearX = h.shearX;
            h.ashearY = h.shearY;
            h.appliedValid = true;
          }
          var i = this._updateCache;
          a = 0;
          g = i.length;
          for (; a < g; a++) {
            i[a].update();
          }
        };
        b.prototype.setToSetupPose = function () {
          this.setBonesToSetupPose();
          this.setSlotsToSetupPose();
        };
        b.prototype.setBonesToSetupPose = function () {
          for (var e = this.bones, b = 0, i = e.length; b < i; b++) {
            e[b].setToSetupPose();
          }
          var k = this.ikConstraints;
          b = 0;
          i = k.length;
          for (; b < i; b++) {
            (j = k[b]).mix = j.data.mix;
            j.softness = j.data.softness;
            j.bendDirection = j.data.bendDirection;
            j.compress = j.data.compress;
            j.stretch = j.data.stretch;
          }
          var f = this.transformConstraints;
          b = 0;
          i = f.length;
          for (; b < i; b++) {
            var g = (j = f[b]).data;
            j.rotateMix = g.rotateMix;
            j.translateMix = g.translateMix;
            j.scaleMix = g.scaleMix;
            j.shearMix = g.shearMix;
          }
          var l = this.pathConstraints;
          b = 0;
          i = l.length;
          for (; b < i; b++) {
            var j;
            g = (j = l[b]).data;
            j.position = g.position;
            j.spacing = g.spacing;
            j.rotateMix = g.rotateMix;
            j.translateMix = g.translateMix;
          }
        };
        b.prototype.setSlotsToSetupPose = function () {
          var b = this.slots;
          l.Utils.arrayCopy(b, 0, this.drawOrder, 0, b.length);
          for (var a = 0, e = b.length; a < e; a++) {
            b[a].setToSetupPose();
          }
        };
        b.prototype.getRootBone = function () {
          if (this.bones.length == 0) {
            return null;
          } else {
            return this.bones[0];
          }
        };
        b.prototype.findBone = function (f) {
          if (f == null) {
            throw Error("boneName cannot be null.");
          }
          for (var a = this.bones, b = 0, g = a.length; b < g; b++) {
            var d = a[b];
            if (d.data.name == f) {
              return d;
            }
          }
          return null;
        };
        b.prototype.findBoneIndex = function (e) {
          if (e == null) {
            throw Error("boneName cannot be null.");
          }
          for (var a = this.bones, b = 0, f = a.length; b < f; b++) {
            if (a[b].data.name == e) {
              return b;
            }
          }
          return -1;
        };
        b.prototype.findSlot = function (f) {
          if (f == null) {
            throw Error("slotName cannot be null.");
          }
          for (var a = this.slots, b = 0, g = a.length; b < g; b++) {
            var d = a[b];
            if (d.data.name == f) {
              return d;
            }
          }
          return null;
        };
        b.prototype.findSlotIndex = function (e) {
          if (e == null) {
            throw Error("slotName cannot be null.");
          }
          for (var a = this.slots, b = 0, f = a.length; b < f; b++) {
            if (a[b].data.name == e) {
              return b;
            }
          }
          return -1;
        };
        b.prototype.setSkinByName = function (c) {
          var a = this.data.findSkin(c);
          if (a == null) {
            throw Error("Skin not found: " + c);
          }
          this.setSkin(a);
        };
        b.prototype.setSkin = function (a) {
          if (a != this.skin) {
            if (a != null) {
              if (this.skin != null) {
                a.attachAll(this, this.skin);
              } else {
                for (var b = this.slots, c = 0, i = b.length; c < i; c++) {
                  var e = b[c];
                  var j = e.data.attachmentName;
                  if (j != null) {
                    var k = a.getAttachment(c, j);
                    if (k != null) {
                      e.setAttachment(k);
                    }
                  }
                }
              }
            }
            this.skin = a;
            this.updateCache();
          }
        };
        b.prototype.getAttachmentByName = function (c, a) {
          return this.getAttachment(this.data.findSlotIndex(c), a);
        };
        b.prototype.getAttachment = function (d, a) {
          if (a == null) {
            throw Error("attachmentName cannot be null.");
          }
          if (this.skin != null) {
            var b = this.skin.getAttachment(d, a);
            if (b != null) {
              return b;
            }
          }
          if (this.data.defaultSkin != null) {
            return this.data.defaultSkin.getAttachment(d, a);
          } else {
            return null;
          }
        };
        b.prototype.setAttachment = function (a, b) {
          if (a == null) {
            throw Error("slotName cannot be null.");
          }
          for (var c = this.slots, d = 0, i = c.length; d < i; d++) {
            var f = c[d];
            if (f.data.name == a) {
              var j = null;
              if (b != null && (j = this.getAttachment(d, b)) == null) {
                throw Error("Attachment not found: " + b + ", for slot: " + a);
              }
              f.setAttachment(j);
              return;
            }
          }
          throw Error("Slot not found: " + a);
        };
        b.prototype.findIkConstraint = function (f) {
          if (f == null) {
            throw Error("constraintName cannot be null.");
          }
          for (var a = this.ikConstraints, b = 0, g = a.length; b < g; b++) {
            var d = a[b];
            if (d.data.name == f) {
              return d;
            }
          }
          return null;
        };
        b.prototype.findTransformConstraint = function (f) {
          if (f == null) {
            throw Error("constraintName cannot be null.");
          }
          for (var a = this.transformConstraints, b = 0, g = a.length; b < g; b++) {
            var d = a[b];
            if (d.data.name == f) {
              return d;
            }
          }
          return null;
        };
        b.prototype.findPathConstraint = function (f) {
          if (f == null) {
            throw Error("constraintName cannot be null.");
          }
          for (var a = this.pathConstraints, b = 0, g = a.length; b < g; b++) {
            var d = a[b];
            if (d.data.name == f) {
              return d;
            }
          }
          return null;
        };
        b.prototype.getBounds = function (a, b, c) {
          if (c === undefined) {
            c = [,,];
          }
          if (a == null) {
            throw Error("offset cannot be null.");
          }
          if (b == null) {
            throw Error("size cannot be null.");
          }
          for (var d = this.drawOrder, e = Infinity, f = Infinity, g = -Infinity, j = -Infinity, k = 0, m = d.length; k < m; k++) {
            var n = d[k];
            if (n.bone.active) {
              var o = 0;
              var p = null;
              var s = n.getAttachment();
              if (s instanceof l.RegionAttachment) {
                o = 8;
                p = l.Utils.setArraySize(c, o, 0);
                s.computeWorldVertices(n.bone, p, 0, 2);
              } else if (s instanceof l.MeshAttachment) {
                var u = s;
                o = u.worldVerticesLength;
                p = l.Utils.setArraySize(c, o, 0);
                u.computeWorldVertices(n, 0, o, p, 0, 2);
              }
              if (p != null) {
                for (var v = 0, y = p.length; v < y; v += 2) {
                  var z = p[v];
                  var I = p[v + 1];
                  e = Math.min(e, z);
                  f = Math.min(f, I);
                  g = Math.max(g, z);
                  j = Math.max(j, I);
                }
              }
            }
          }
          a.set(e, f);
          b.set(g - e, j - f);
        };
        b.prototype.update = function (b) {
          this.time += b;
        };
        return b;
      }();
      l.Skeleton = b;
    })(i || (i = {}));
    (function (h) {
      var c = function () {
        function d(b) {
          this.scale = 1;
          this.linkedMeshes = [];
          this.attachmentLoader = b;
        }
        d.prototype.readSkeletonData = function (b) {
          var c = this.scale;
          var e = new h.SkeletonData();
          e.name = "";
          var f = new g(b);
          e.hash = f.readString();
          e.version = f.readString();
          e.x = f.readFloat();
          e.y = f.readFloat();
          e.width = f.readFloat();
          e.height = f.readFloat();
          var i = f.readBoolean();
          if (i) {
            e.fps = f.readFloat();
            e.imagesPath = f.readString();
            e.audioPath = f.readString();
          }
          var a = 0;
          a = f.readInt(true);
          for (var j = 0; j < a; j++) {
            f.strings.push(f.readString());
          }
          a = f.readInt(true);
          j = 0;
          for (; j < a; j++) {
            var k = f.readString();
            var l = j == 0 ? null : e.bones[f.readInt(true)];
            (q = new h.BoneData(j, k, l)).rotation = f.readFloat();
            q.x = f.readFloat() * c;
            q.y = f.readFloat() * c;
            q.scaleX = f.readFloat();
            q.scaleY = f.readFloat();
            q.shearX = f.readFloat();
            q.shearY = f.readFloat();
            q.length = f.readFloat() * c;
            q.transformMode = d.TransformModeValues[f.readInt(true)];
            q.skinRequired = f.readBoolean();
            if (i) {
              h.Color.rgba8888ToColor(q.color, f.readInt32());
            }
            e.bones.push(q);
          }
          a = f.readInt(true);
          j = 0;
          for (; j < a; j++) {
            var n = f.readString();
            var p = e.bones[f.readInt(true)];
            var q = new h.SlotData(j, n, p);
            h.Color.rgba8888ToColor(q.color, f.readInt32());
            var u = f.readInt32();
            if (u != -1) {
              h.Color.rgb888ToColor(q.darkColor = new h.Color(), u);
            }
            q.attachmentName = f.readStringRef();
            q.blendMode = d.BlendModeValues[f.readInt(true)];
            e.slots.push(q);
          }
          a = f.readInt(true);
          j = 0;
          for (var v = undefined; j < a; j++) {
            (q = new h.IkConstraintData(f.readString())).order = f.readInt(true);
            q.skinRequired = f.readBoolean();
            v = f.readInt(true);
            for (var y = 0; y < v; y++) {
              q.bones.push(e.bones[f.readInt(true)]);
            }
            q.target = e.bones[f.readInt(true)];
            q.mix = f.readFloat();
            q.softness = f.readFloat() * c;
            q.bendDirection = f.readByte();
            q.compress = f.readBoolean();
            q.stretch = f.readBoolean();
            q.uniform = f.readBoolean();
            e.ikConstraints.push(q);
          }
          a = f.readInt(true);
          j = 0;
          v = undefined;
          for (; j < a; j++) {
            (q = new h.TransformConstraintData(f.readString())).order = f.readInt(true);
            q.skinRequired = f.readBoolean();
            v = f.readInt(true);
            y = 0;
            for (; y < v; y++) {
              q.bones.push(e.bones[f.readInt(true)]);
            }
            q.target = e.bones[f.readInt(true)];
            q.local = f.readBoolean();
            q.relative = f.readBoolean();
            q.offsetRotation = f.readFloat();
            q.offsetX = f.readFloat() * c;
            q.offsetY = f.readFloat() * c;
            q.offsetScaleX = f.readFloat();
            q.offsetScaleY = f.readFloat();
            q.offsetShearY = f.readFloat();
            q.rotateMix = f.readFloat();
            q.translateMix = f.readFloat();
            q.scaleMix = f.readFloat();
            q.shearMix = f.readFloat();
            e.transformConstraints.push(q);
          }
          a = f.readInt(true);
          j = 0;
          v = undefined;
          for (; j < a; j++) {
            (q = new h.PathConstraintData(f.readString())).order = f.readInt(true);
            q.skinRequired = f.readBoolean();
            v = f.readInt(true);
            y = 0;
            for (; y < v; y++) {
              q.bones.push(e.bones[f.readInt(true)]);
            }
            q.target = e.slots[f.readInt(true)];
            q.positionMode = d.PositionModeValues[f.readInt(true)];
            q.spacingMode = d.SpacingModeValues[f.readInt(true)];
            q.rotateMode = d.RotateModeValues[f.readInt(true)];
            q.offsetRotation = f.readFloat();
            q.position = f.readFloat();
            if (q.positionMode == h.PositionMode.Fixed) {
              q.position *= c;
            }
            q.spacing = f.readFloat();
            if (!(q.spacingMode != h.SpacingMode.Length && q.spacingMode != h.SpacingMode.Fixed)) {
              q.spacing *= c;
            }
            q.rotateMix = f.readFloat();
            q.translateMix = f.readFloat();
            e.pathConstraints.push(q);
          }
          var E = this.readSkin(f, e, true, i);
          if (E != null) {
            e.defaultSkin = E;
            e.skins.push(E);
          }
          j = e.skins.length;
          h.Utils.setArraySize(e.skins, a = j + f.readInt(true));
          for (; j < a; j++) {
            e.skins[j] = this.readSkin(f, e, false, i);
          }
          a = this.linkedMeshes.length;
          j = 0;
          for (; j < a; j++) {
            var D = this.linkedMeshes[j];
            var H = D.skin == null ? e.defaultSkin : e.findSkin(D.skin);
            if (H == null) {
              throw Error("Skin not found: " + D.skin);
            }
            var I = H.getAttachment(D.slotIndex, D.parent);
            if (I == null) {
              throw Error("Parent mesh not found: " + D.parent);
            }
            D.mesh.deformAttachment = D.inheritDeform ? I : D.mesh;
            D.mesh.setParentMesh(I);
            D.mesh.updateUVs();
          }
          this.linkedMeshes.length = 0;
          a = f.readInt(true);
          j = 0;
          for (; j < a; j++) {
            (q = new h.EventData(f.readStringRef())).intValue = f.readInt(false);
            q.floatValue = f.readFloat();
            q.stringValue = f.readString();
            q.audioPath = f.readString();
            if (q.audioPath != null) {
              q.volume = f.readFloat();
              q.balance = f.readFloat();
            }
            e.events.push(q);
          }
          a = f.readInt(true);
          j = 0;
          for (; j < a; j++) {
            e.animations.push(this.readAnimation(f, f.readString(), e));
          }
          return e;
        };
        d.prototype.readSkin = function (a, b, c, d) {
          var e = null;
          var f = 0;
          if (c) {
            if ((f = a.readInt(true)) == 0) {
              return null;
            }
            e = new h.Skin("default");
          } else {
            (e = new h.Skin(a.readStringRef())).bones.length = a.readInt(true);
            for (var g = 0, i = e.bones.length; g < i; g++) {
              e.bones[g] = b.bones[a.readInt(true)];
            }
            g = 0;
            i = a.readInt(true);
            for (; g < i; g++) {
              e.constraints.push(b.ikConstraints[a.readInt(true)]);
            }
            g = 0;
            i = a.readInt(true);
            for (; g < i; g++) {
              e.constraints.push(b.transformConstraints[a.readInt(true)]);
            }
            g = 0;
            i = a.readInt(true);
            for (; g < i; g++) {
              e.constraints.push(b.pathConstraints[a.readInt(true)]);
            }
            f = a.readInt(true);
          }
          for (g = 0; g < f; g++) {
            for (var j = a.readInt(true), l = 0, o = a.readInt(true); l < o; l++) {
              var s = a.readStringRef();
              var u = this.readAttachment(a, b, e, j, s, d);
              if (u != null) {
                e.setAttachment(j, s, u);
              }
            }
          }
          return e;
        };
        d.prototype.readAttachment = function (f, e, i, j, m, n) {
          var o = this.scale;
          var c = f.readStringRef();
          if (c == null) {
            c = m;
          }
          var p = f.readByte();
          switch (d.AttachmentTypeValues[p]) {
            case h.AttachmentType.Region:
              var q = f.readStringRef();
              var r = f.readFloat();
              var s = f.readFloat();
              var w = f.readFloat();
              var x = f.readFloat();
              var y = f.readFloat();
              var v = f.readFloat();
              var A = f.readFloat();
              var F = f.readInt32();
              if (q == null) {
                q = c;
              }
              var H = this.attachmentLoader.newRegionAttachment(i, c, q);
              if (H == null) {
                return null;
              } else {
                H.path = q;
                H.x = s * o;
                H.y = w * o;
                H.scaleX = x;
                H.scaleY = y;
                H.rotation = r;
                H.width = v * o;
                H.height = A * o;
                h.Color.rgba8888ToColor(H.color, F);
                H.updateOffset();
                return H;
              }
            case h.AttachmentType.BoundingBox:
              var M = f.readInt(true);
              var Q = this.readVertices(f, M);
              F = n ? f.readInt32() : 0;
              var T = this.attachmentLoader.newBoundingBoxAttachment(i, c);
              if (T == null) {
                return null;
              } else {
                T.worldVerticesLength = M << 1;
                T.vertices = Q.vertices;
                T.bones = Q.bones;
                if (n) {
                  h.Color.rgba8888ToColor(T.color, F);
                }
                return T;
              }
            case h.AttachmentType.Mesh:
              q = f.readStringRef();
              F = f.readInt32();
              M = f.readInt(true);
              var U = this.readFloatArray(f, M << 1, 1);
              var C = this.readShortArray(f);
              Q = this.readVertices(f, M);
              var b = f.readInt(true);
              var S = null;
              v = 0;
              A = 0;
              if (n) {
                S = this.readShortArray(f);
                v = f.readFloat();
                A = f.readFloat();
              }
              if (q == null) {
                q = c;
              }
              if ((X = this.attachmentLoader.newMeshAttachment(i, c, q)) == null) {
                return null;
              } else {
                X.path = q;
                h.Color.rgba8888ToColor(X.color, F);
                X.bones = Q.bones;
                X.vertices = Q.vertices;
                X.worldVerticesLength = M << 1;
                X.triangles = C;
                X.regionUVs = U;
                X.updateUVs();
                X.hullLength = b << 1;
                if (n) {
                  X.edges = S;
                  X.width = v * o;
                  X.height = A * o;
                }
                return X;
              }
            case h.AttachmentType.LinkedMesh:
              q = f.readStringRef();
              F = f.readInt32();
              var X;
              var _ = f.readStringRef();
              var Z = f.readStringRef();
              var I = f.readBoolean();
              v = 0;
              A = 0;
              if (n) {
                v = f.readFloat();
                A = f.readFloat();
              }
              if (q == null) {
                q = c;
              }
              if ((X = this.attachmentLoader.newMeshAttachment(i, c, q)) == null) {
                return null;
              } else {
                X.path = q;
                h.Color.rgba8888ToColor(X.color, F);
                if (n) {
                  X.width = v * o;
                  X.height = A * o;
                }
                this.linkedMeshes.push(new a(X, _, j, Z, I));
                return X;
              }
            case h.AttachmentType.Path:
              for (var O = f.readBoolean(), L = f.readBoolean(), P = (M = f.readInt(true), Q = this.readVertices(f, M), h.Utils.newArray(M / 3, 0)), D = 0, aa = P.length; D < aa; D++) {
                P[D] = f.readFloat() * o;
              }
              F = n ? f.readInt32() : 0;
              if ((q = this.attachmentLoader.newPathAttachment(i, c)) == null) {
                return null;
              } else {
                q.closed = O;
                q.constantSpeed = L;
                q.worldVerticesLength = M << 1;
                q.vertices = Q.vertices;
                q.bones = Q.bones;
                q.lengths = P;
                if (n) {
                  h.Color.rgba8888ToColor(q.color, F);
                }
                return q;
              }
            case h.AttachmentType.Point:
              r = f.readFloat();
              s = f.readFloat();
              w = f.readFloat();
              F = n ? f.readInt32() : 0;
              var $ = this.attachmentLoader.newPointAttachment(i, c);
              if ($ == null) {
                return null;
              } else {
                $.x = s * o;
                $.y = w * o;
                $.rotation = r;
                if (n) {
                  h.Color.rgba8888ToColor($.color, F);
                }
                return $;
              }
            case h.AttachmentType.Clipping:
              var B = f.readInt(true);
              M = f.readInt(true);
              Q = this.readVertices(f, M);
              F = n ? f.readInt32() : 0;
              var V = this.attachmentLoader.newClippingAttachment(i, c);
              if (V == null) {
                return null;
              } else {
                V.endSlot = e.slots[B];
                V.worldVerticesLength = M << 1;
                V.vertices = Q.vertices;
                V.bones = Q.bones;
                if (n) {
                  h.Color.rgba8888ToColor(V.color, F);
                }
                return V;
              }
          }
          return null;
        };
        d.prototype.readVertices = function (f, b) {
          var d = b << 1;
          var e = new j();
          var g = this.scale;
          if (!f.readBoolean()) {
            e.vertices = this.readFloatArray(f, d, g);
            return e;
          }
          for (var i = [], a = [], k = 0; k < b; k++) {
            var l = f.readInt(true);
            a.push(l);
            for (var o = 0; o < l; o++) {
              a.push(f.readInt(true));
              i.push(f.readFloat() * g);
              i.push(f.readFloat() * g);
              i.push(f.readFloat());
            }
          }
          e.vertices = h.Utils.toFloatArray(i);
          e.bones = a;
          return e;
        };
        d.prototype.readFloatArray = function (f, a, b) {
          var c = Array(a);
          if (b == 1) {
            for (var d = 0; d < a; d++) {
              c[d] = f.readFloat();
            }
          } else {
            for (d = 0; d < a; d++) {
              c[d] = f.readFloat() * b;
            }
          }
          return c;
        };
        d.prototype.readShortArray = function (e) {
          for (var a = e.readInt(true), b = Array(a), c = 0; c < a; c++) {
            b[c] = e.readShort();
          }
          return b;
        };
        d.prototype.readAnimation = function (b, e, f) {
          for (var g = [], i = this.scale, j = 0, k = new h.Color(), m = new h.Color(), c = 0, n = b.readInt(true); c < n; c++) {
            for (var o = b.readInt(true), p = 0, q = b.readInt(true); p < q; p++) {
              var r = b.readByte();
              var s = b.readInt(true);
              switch (r) {
                case d.SLOT_ATTACHMENT:
                  (w = new h.AttachmentTimeline(s)).slotIndex = o;
                  for (var t = 0; t < s; t++) {
                    w.setFrame(t, b.readFloat(), b.readStringRef());
                  }
                  g.push(w);
                  j = Math.max(j, w.frames[s - 1]);
                  break;
                case d.SLOT_COLOR:
                  (w = new h.ColorTimeline(s)).slotIndex = o;
                  t = 0;
                  for (; t < s; t++) {
                    var u = b.readFloat();
                    h.Color.rgba8888ToColor(k, b.readInt32());
                    w.setFrame(t, u, k.r, k.g, k.b, k.a);
                    if (t < s - 1) {
                      this.readCurve(b, t, w);
                    }
                  }
                  g.push(w);
                  j = Math.max(j, w.frames[(s - 1) * h.ColorTimeline.ENTRIES]);
                  break;
                case d.SLOT_TWO_COLOR:
                  (w = new h.TwoColorTimeline(s)).slotIndex = o;
                  t = 0;
                  for (; t < s; t++) {
                    u = b.readFloat();
                    h.Color.rgba8888ToColor(k, b.readInt32());
                    h.Color.rgb888ToColor(m, b.readInt32());
                    w.setFrame(t, u, k.r, k.g, k.b, k.a, m.r, m.g, m.b);
                    if (t < s - 1) {
                      this.readCurve(b, t, w);
                    }
                  }
                  g.push(w);
                  j = Math.max(j, w.frames[(s - 1) * h.TwoColorTimeline.ENTRIES]);
              }
            }
          }
          c = 0;
          n = b.readInt(true);
          for (; c < n; c++) {
            var v = b.readInt(true);
            p = 0;
            q = b.readInt(true);
            for (; p < q; p++) {
              r = b.readByte();
              s = b.readInt(true);
              switch (r) {
                case d.BONE_ROTATE:
                  (w = new h.RotateTimeline(s)).boneIndex = v;
                  t = 0;
                  for (; t < s; t++) {
                    w.setFrame(t, b.readFloat(), b.readFloat());
                    if (t < s - 1) {
                      this.readCurve(b, t, w);
                    }
                  }
                  g.push(w);
                  j = Math.max(j, w.frames[(s - 1) * h.RotateTimeline.ENTRIES]);
                  break;
                case d.BONE_TRANSLATE:
                case d.BONE_SCALE:
                case d.BONE_SHEAR:
                  var w = undefined;
                  var x = 1;
                  if (r == d.BONE_SCALE) {
                    w = new h.ScaleTimeline(s);
                  } else if (r == d.BONE_SHEAR) {
                    w = new h.ShearTimeline(s);
                  } else {
                    w = new h.TranslateTimeline(s);
                    x = i;
                  }
                  w.boneIndex = v;
                  t = 0;
                  for (; t < s; t++) {
                    w.setFrame(t, b.readFloat(), b.readFloat() * x, b.readFloat() * x);
                    if (t < s - 1) {
                      this.readCurve(b, t, w);
                    }
                  }
                  g.push(w);
                  j = Math.max(j, w.frames[(s - 1) * h.TranslateTimeline.ENTRIES]);
              }
            }
          }
          c = 0;
          n = b.readInt(true);
          for (; c < n; c++) {
            var y = b.readInt(true);
            s = b.readInt(true);
            (w = new h.IkConstraintTimeline(s)).ikConstraintIndex = y;
            t = 0;
            for (; t < s; t++) {
              w.setFrame(t, b.readFloat(), b.readFloat(), b.readFloat() * i, b.readByte(), b.readBoolean(), b.readBoolean());
              if (t < s - 1) {
                this.readCurve(b, t, w);
              }
            }
            g.push(w);
            j = Math.max(j, w.frames[(s - 1) * h.IkConstraintTimeline.ENTRIES]);
          }
          c = 0;
          n = b.readInt(true);
          for (; c < n; c++) {
            y = b.readInt(true);
            s = b.readInt(true);
            (w = new h.TransformConstraintTimeline(s)).transformConstraintIndex = y;
            t = 0;
            for (; t < s; t++) {
              w.setFrame(t, b.readFloat(), b.readFloat(), b.readFloat(), b.readFloat(), b.readFloat());
              if (t < s - 1) {
                this.readCurve(b, t, w);
              }
            }
            g.push(w);
            j = Math.max(j, w.frames[(s - 1) * h.TransformConstraintTimeline.ENTRIES]);
          }
          c = 0;
          n = b.readInt(true);
          for (; c < n; c++) {
            y = b.readInt(true);
            var z = f.pathConstraints[y];
            p = 0;
            q = b.readInt(true);
            for (; p < q; p++) {
              r = b.readByte();
              s = b.readInt(true);
              switch (r) {
                case d.PATH_POSITION:
                case d.PATH_SPACING:
                  w = undefined;
                  x = 1;
                  if (r == d.PATH_SPACING) {
                    w = new h.PathConstraintSpacingTimeline(s);
                    if (!(z.spacingMode != h.SpacingMode.Length && z.spacingMode != h.SpacingMode.Fixed)) {
                      x = i;
                    }
                  } else {
                    w = new h.PathConstraintPositionTimeline(s);
                    if (z.positionMode == h.PositionMode.Fixed) {
                      x = i;
                    }
                  }
                  w.pathConstraintIndex = y;
                  t = 0;
                  for (; t < s; t++) {
                    w.setFrame(t, b.readFloat(), b.readFloat() * x);
                    if (t < s - 1) {
                      this.readCurve(b, t, w);
                    }
                  }
                  g.push(w);
                  j = Math.max(j, w.frames[(s - 1) * h.PathConstraintPositionTimeline.ENTRIES]);
                  break;
                case d.PATH_MIX:
                  (w = new h.PathConstraintMixTimeline(s)).pathConstraintIndex = y;
                  t = 0;
                  for (; t < s; t++) {
                    w.setFrame(t, b.readFloat(), b.readFloat(), b.readFloat());
                    if (t < s - 1) {
                      this.readCurve(b, t, w);
                    }
                  }
                  g.push(w);
                  j = Math.max(j, w.frames[(s - 1) * h.PathConstraintMixTimeline.ENTRIES]);
              }
            }
          }
          c = 0;
          n = b.readInt(true);
          for (; c < n; c++) {
            var A = f.skins[b.readInt(true)];
            p = 0;
            q = b.readInt(true);
            for (; p < q; p++) {
              o = b.readInt(true);
              for (var C = 0, D = b.readInt(true); C < D; C++) {
                var E = A.getAttachment(o, b.readStringRef());
                var G = E.bones != null;
                var I = E.vertices;
                var L = G ? I.length / 3 * 2 : I.length;
                s = b.readInt(true);
                (w = new h.DeformTimeline(s)).slotIndex = o;
                w.attachment = E;
                t = 0;
                for (; t < s; t++) {
                  u = b.readFloat();
                  var M = undefined;
                  var N = b.readInt(true);
                  if (N == 0) {
                    M = G ? h.Utils.newFloatArray(L) : I;
                  } else {
                    M = h.Utils.newFloatArray(L);
                    var O = b.readInt(true);
                    N += O;
                    if (i == 1) {
                      for (var P = O; P < N; P++) {
                        M[P] = b.readFloat();
                      }
                    } else {
                      for (P = O; P < N; P++) {
                        M[P] = b.readFloat() * i;
                      }
                    }
                    if (!G) {
                      P = 0;
                      for (var R = M.length; P < R; P++) {
                        M[P] += I[P];
                      }
                    }
                  }
                  w.setFrame(t, u, M);
                  if (t < s - 1) {
                    this.readCurve(b, t, w);
                  }
                }
                g.push(w);
                j = Math.max(j, w.frames[s - 1]);
              }
            }
          }
          var S = b.readInt(true);
          if (S > 0) {
            w = new h.DrawOrderTimeline(S);
            var T = f.slots.length;
            for (c = 0; c < S; c++) {
              u = b.readFloat();
              var F = b.readInt(true);
              var U = h.Utils.newArray(T, 0);
              for (p = T - 1; p >= 0; p--) {
                U[p] = -1;
              }
              var V = h.Utils.newArray(T - F, 0);
              var W = 0;
              var X = 0;
              for (p = 0; p < F; p++) {
                for (o = b.readInt(true); W != o;) {
                  V[X++] = W++;
                }
                U[W + b.readInt(true)] = W++;
              }
              for (; W < T;) {
                V[X++] = W++;
              }
              for (p = T - 1; p >= 0; p--) {
                if (U[p] == -1) {
                  U[p] = V[--X];
                }
              }
              w.setFrame(c, u, U);
            }
            g.push(w);
            j = Math.max(j, w.frames[S - 1]);
          }
          var _ = b.readInt(true);
          if (_ > 0) {
            w = new h.EventTimeline(_);
            c = 0;
            for (; c < _; c++) {
              u = b.readFloat();
              var ta = f.events[b.readInt(true)];
              var ya = new h.Event(u, ta);
              ya.intValue = b.readInt(false);
              ya.floatValue = b.readFloat();
              ya.stringValue = b.readBoolean() ? b.readString() : ta.stringValue;
              if (ya.data.audioPath != null) {
                ya.volume = b.readFloat();
                ya.balance = b.readFloat();
              }
              w.setFrame(c, ya);
            }
            g.push(w);
            j = Math.max(j, w.frames[_ - 1]);
          }
          return new h.Animation(e, g, j);
        };
        d.prototype.readCurve = function (e, a, b) {
          switch (e.readByte()) {
            case d.CURVE_STEPPED:
              b.setStepped(a);
              break;
            case d.CURVE_BEZIER:
              this.setCurve(b, a, e.readFloat(), e.readFloat(), e.readFloat(), e.readFloat());
          }
        };
        d.prototype.setCurve = function (g, a, b, c, d, e) {
          g.setCurve(a, b, c, d, e);
        };
        d.AttachmentTypeValues = [0, 1, 2, 3, 4, 5, 6];
        d.TransformModeValues = [h.TransformMode.Normal, h.TransformMode.OnlyTranslation, h.TransformMode.NoRotationOrReflection, h.TransformMode.NoScale, h.TransformMode.NoScaleOrReflection];
        d.PositionModeValues = [h.PositionMode.Fixed, h.PositionMode.Percent];
        d.SpacingModeValues = [h.SpacingMode.Length, h.SpacingMode.Fixed, h.SpacingMode.Percent];
        d.RotateModeValues = [h.RotateMode.Tangent, h.RotateMode.Chain, h.RotateMode.ChainScale];
        d.BlendModeValues = [h.BlendMode.Normal, h.BlendMode.Additive, h.BlendMode.Multiply, h.BlendMode.Screen];
        d.BONE_ROTATE = 0;
        d.BONE_TRANSLATE = 1;
        d.BONE_SCALE = 2;
        d.BONE_SHEAR = 3;
        d.SLOT_ATTACHMENT = 0;
        d.SLOT_COLOR = 1;
        d.SLOT_TWO_COLOR = 2;
        d.PATH_POSITION = 0;
        d.PATH_SPACING = 1;
        d.PATH_MIX = 2;
        d.CURVE_LINEAR = 0;
        d.CURVE_STEPPED = 1;
        d.CURVE_BEZIER = 2;
        return d;
      }();
      h.SkeletonBinary = c;
      var g = function () {
        function b(e, a, f, g) {
          if (a === undefined) {
            a = [];
          }
          if (f === undefined) {
            f = 0;
          }
          if (g === undefined) {
            g = new DataView(e.buffer);
          }
          this.strings = a;
          this.index = f;
          this.buffer = g;
        }
        b.prototype.readByte = function () {
          return this.buffer.getInt8(this.index++);
        };
        b.prototype.readShort = function () {
          var b = this.buffer.getInt16(this.index);
          this.index += 2;
          return b;
        };
        b.prototype.readInt32 = function () {
          var b = this.buffer.getInt32(this.index);
          this.index += 4;
          return b;
        };
        b.prototype.readInt = function (d) {
          var a = this.readByte();
          var e = a & 127;
          if ((a & 128) != 0) {
            e |= ((a = this.readByte()) & 127) << 7;
            if ((a & 128) != 0) {
              e |= ((a = this.readByte()) & 127) << 14;
              if ((a & 128) != 0) {
                e |= ((a = this.readByte()) & 127) << 21;
                if ((a & 128) != 0) {
                  e |= ((a = this.readByte()) & 127) << 28;
                }
              }
            }
          }
          if (d) {
            return e;
          } else {
            return e >>> 1 ^ -(e & 1);
          }
        };
        b.prototype.readStringRef = function () {
          var b = this.readInt(true);
          if (b == 0) {
            return null;
          } else {
            return this.strings[b - 1];
          }
        };
        b.prototype.readString = function () {
          var e = this.readInt(true);
          switch (e) {
            case 0:
              return null;
            case 1:
              return "";
          }
          e--;
          for (var f = "", g = 0; g < e;) {
            var h = this.readByte();
            switch (h >> 4) {
              case 12:
              case 13:
                f += String.fromCharCode((h & 31) << 6 | this.readByte() & 63);
                g += 2;
                break;
              case 14:
                f += String.fromCharCode((h & 15) << 12 | (this.readByte() & 63) << 6 | this.readByte() & 63);
                g += 3;
                break;
              default:
                f += String.fromCharCode(h);
                g++;
            }
          }
          return f;
        };
        b.prototype.readFloat = function () {
          var b = this.buffer.getFloat32(this.index);
          this.index += 4;
          return b;
        };
        b.prototype.readBoolean = function () {
          return this.readByte() != 0;
        };
        return b;
      }();
      function a(f, a, b, c, d) {
        this.mesh = f;
        this.skin = a;
        this.slotIndex = b;
        this.parent = c;
        this.inheritDeform = d;
      }
      function j(c, d) {
        if (c === undefined) {
          c = null;
        }
        if (d === undefined) {
          d = null;
        }
        this.bones = c;
        this.vertices = d;
      }
    })(i || (i = {}));
    (function (c) {
      var a = function () {
        function a() {
          this.minX = 0;
          this.minY = 0;
          this.maxX = 0;
          this.maxY = 0;
          this.boundingBoxes = [];
          this.polygons = [];
          this.polygonPool = new c.Pool(function () {
            return c.Utils.newFloatArray(16);
          });
        }
        a.prototype.update = function (a, b) {
          if (a == null) {
            throw Error("skeleton cannot be null.");
          }
          var d = this.boundingBoxes;
          var e = this.polygons;
          var f = this.polygonPool;
          var g = a.slots;
          var h = g.length;
          d.length = 0;
          f.freeAll(e);
          e.length = 0;
          for (var i = 0; i < h; i++) {
            var j = g[i];
            if (j.bone.active) {
              var k = j.getAttachment();
              if (k instanceof c.BoundingBoxAttachment) {
                var l = k;
                d.push(l);
                var r = f.obtain();
                if (r.length != l.worldVerticesLength) {
                  r = c.Utils.newFloatArray(l.worldVerticesLength);
                }
                e.push(r);
                l.computeWorldVertices(j, 0, l.worldVerticesLength, r, 0, 2);
              }
            }
          }
          if (b) {
            this.aabbCompute();
          } else {
            this.minX = Infinity;
            this.minY = Infinity;
            this.maxX = -Infinity;
            this.maxY = -Infinity;
          }
        };
        a.prototype.aabbCompute = function () {
          for (var c = Infinity, e = Infinity, f = -Infinity, h = -Infinity, i = this.polygons, k = 0, l = i.length; k < l; k++) {
            for (var n = i[k], o = n, p = 0, s = n.length; p < s; p += 2) {
              var t = o[p];
              var u = o[p + 1];
              c = Math.min(c, t);
              e = Math.min(e, u);
              f = Math.max(f, t);
              h = Math.max(h, u);
            }
          }
          this.minX = c;
          this.minY = e;
          this.maxX = f;
          this.maxY = h;
        };
        a.prototype.aabbContainsPoint = function (c, a) {
          return c >= this.minX && c <= this.maxX && a >= this.minY && a <= this.maxY;
        };
        a.prototype.aabbIntersectsSegment = function (h, b, d, e) {
          var f = this.minX;
          var g = this.minY;
          var i = this.maxX;
          var j = this.maxY;
          if (h <= f && d <= f || b <= g && e <= g || h >= i && d >= i || b >= j && e >= j) {
            return false;
          }
          var a = (e - b) / (d - h);
          var k = a * (f - h) + b;
          if (k > g && k < j) {
            return true;
          }
          if ((k = a * (i - h) + b) > g && k < j) {
            return true;
          }
          var l = (g - b) / a + h;
          return l > f && l < i || (l = (j - b) / a + h) > f && l < i;
        };
        a.prototype.aabbIntersectsSkeleton = function (b) {
          return this.minX < b.maxX && this.maxX > b.minX && this.minY < b.maxY && this.maxY > b.minY;
        };
        a.prototype.containsPoint = function (f, a) {
          for (var b = this.polygons, c = 0, g = b.length; c < g; c++) {
            if (this.containsPointPolygon(b[c], f, a)) {
              return this.boundingBoxes[c];
            }
          }
          return null;
        };
        a.prototype.containsPointPolygon = function (a, b, c) {
          for (var d = a, e = a.length, f = e - 2, g = false, h = 0; h < e; h += 2) {
            var l = d[h + 1];
            var o = d[f + 1];
            if (l < c && o >= c || o < c && l >= c) {
              var q = d[h];
              if (q + (c - l) / (o - l) * (d[f] - q) < b) {
                g = !g;
              }
            }
            f = h;
          }
          return g;
        };
        a.prototype.intersectsSegment = function (a, b, c, d) {
          for (var e = this.polygons, f = 0, i = e.length; f < i; f++) {
            if (this.intersectsSegmentPolygon(e[f], a, b, c, d)) {
              return this.boundingBoxes[f];
            }
          }
          return null;
        };
        a.prototype.intersectsSegmentPolygon = function (d, b, f, e, g) {
          for (var h = d, i = d.length, j = b - e, a = f - g, k = b * g - f * e, c = h[i - 2], m = h[i - 1], n = 0; n < i; n += 2) {
            var o = h[n];
            var p = h[n + 1];
            var q = c * p - m * o;
            var u = c - o;
            var v = m - p;
            var y = j * v - a * u;
            var E = (k * u - j * q) / y;
            if ((E >= c && E <= o || E >= o && E <= c) && (E >= b && E <= e || E >= e && E <= b)) {
              var F = (k * v - a * q) / y;
              if ((F >= m && F <= p || F >= p && F <= m) && (F >= f && F <= g || F >= g && F <= f)) {
                return true;
              }
            }
            c = o;
            m = p;
          }
          return false;
        };
        a.prototype.getPolygon = function (c) {
          if (c == null) {
            throw Error("boundingBox cannot be null.");
          }
          var a = this.boundingBoxes.indexOf(c);
          if (a == -1) {
            return null;
          } else {
            return this.polygons[a];
          }
        };
        a.prototype.getWidth = function () {
          return this.maxX - this.minX;
        };
        a.prototype.getHeight = function () {
          return this.maxY - this.minY;
        };
        return a;
      }();
      c.SkeletonBounds = a;
    })(i || (i = {}));
    (function (c) {
      var b = function () {
        function d() {
          this.triangulator = new c.Triangulator();
          this.clippingPolygon = [];
          this.clipOutput = [];
          this.clippedVertices = [];
          this.clippedTriangles = [];
          this.scratch = [];
        }
        d.prototype.clipStart = function (b, e) {
          if (this.clipAttachment != null) {
            return 0;
          }
          this.clipAttachment = e;
          var f = e.worldVerticesLength;
          var g = c.Utils.setArraySize(this.clippingPolygon, f);
          e.computeWorldVertices(b, 0, f, g, 0, 2);
          var h = this.clippingPolygon;
          d.makeClockwise(h);
          for (var i = this.clippingPolygons = this.triangulator.decompose(h, this.triangulator.triangulate(h)), a = 0, j = i.length; a < j; a++) {
            var m = i[a];
            d.makeClockwise(m);
            m.push(m[0]);
            m.push(m[1]);
          }
          return i.length;
        };
        d.prototype.clipEndWithSlot = function (b) {
          if (this.clipAttachment != null && this.clipAttachment.endSlot == b.data) {
            this.clipEnd();
          }
        };
        d.prototype.clipEnd = function () {
          if (this.clipAttachment != null) {
            this.clipAttachment = null;
            this.clippingPolygons = null;
            this.clippedVertices.length = 0;
            this.clippedTriangles.length = 0;
            this.clippingPolygon.length = 0;
          }
        };
        d.prototype.isClipping = function () {
          return this.clipAttachment != null;
        };
        d.prototype.clipTriangles = function (b, d, e, f, h, i, j, a, k, n, o, q) {
          var r = this.clipOutput;
          var s = this.clippedVertices;
          var t = this.clippedTriangles;
          var u = this.clippingPolygons;
          var p = this.clippingPolygons.length;
          var v = a ? 12 : 8;
          var g = 0;
          n = n || 0;
          o = o || 0;
          q = q || 0;
          s.length = 0;
          t.length = 0;
          t: for (var w = n, x = n + f; w < x; w += 3) {
            var y = e[w] * k;
            var z = y + o;
            var A = y + q;
            var B = b[z];
            var C = b[z + 1];
            var D = h[A];
            var F = h[A + 1];
            A = (y = e[w + 1] * k) + q;
            var G = b[z = y + o];
            var H = b[z + 1];
            var I = h[A];
            var J = h[A + 1];
            A = (y = e[w + 2] * k) + q;
            for (var K = b[z = y + o], L = b[z + 1], M = h[A], N = h[A + 1], O = 0; O < p; O++) {
              var P = s.length;
              if (!this.clip(B, C, G, H, K, L, u[O], r)) {
                (Y = c.Utils.setArraySize(s, P + v * 3))[P] = B;
                Y[P + 1] = C;
                Y[P + 2] = i.r;
                Y[P + 3] = i.g;
                Y[P + 4] = i.b;
                Y[P + 5] = i.a;
                if (a) {
                  Y[P + 6] = D;
                  Y[P + 7] = F;
                  Y[P + 8] = j.r;
                  Y[P + 9] = j.g;
                  Y[P + 10] = j.b;
                  Y[P + 11] = j.a;
                  Y[P + 12] = G;
                  Y[P + 13] = H;
                  Y[P + 14] = i.r;
                  Y[P + 15] = i.g;
                  Y[P + 16] = i.b;
                  Y[P + 17] = i.a;
                  Y[P + 18] = I;
                  Y[P + 19] = J;
                  Y[P + 20] = j.r;
                  Y[P + 21] = j.g;
                  Y[P + 22] = j.b;
                  Y[P + 23] = j.a;
                  Y[P + 24] = K;
                  Y[P + 25] = L;
                  Y[P + 26] = i.r;
                  Y[P + 27] = i.g;
                  Y[P + 28] = i.b;
                  Y[P + 29] = i.a;
                  Y[P + 30] = M;
                  Y[P + 31] = N;
                  Y[P + 32] = j.r;
                  Y[P + 33] = j.g;
                  Y[P + 34] = j.b;
                  Y[P + 35] = j.a;
                } else {
                  Y[P + 6] = D;
                  Y[P + 7] = F;
                  Y[P + 8] = G;
                  Y[P + 9] = H;
                  Y[P + 10] = i.r;
                  Y[P + 11] = i.g;
                  Y[P + 12] = i.b;
                  Y[P + 13] = i.a;
                  Y[P + 14] = I;
                  Y[P + 15] = J;
                  Y[P + 16] = K;
                  Y[P + 17] = L;
                  Y[P + 18] = i.r;
                  Y[P + 19] = i.g;
                  Y[P + 20] = i.b;
                  Y[P + 21] = i.a;
                  Y[P + 22] = M;
                  Y[P + 23] = N;
                }
                P = t.length;
                (Qa = c.Utils.setArraySize(t, P + 3))[P] = g;
                Qa[P + 1] = g + 1;
                Qa[P + 2] = g + 2;
                g += 3;
                continue t;
              }
              var Q = r.length;
              if (Q != 0) {
                for (var R = H - L, S = K - G, T = B - K, U = L - C, V = 1 / (R * T + S * (C - L)), W = Q >> 1, X = this.clipOutput, Y = c.Utils.setArraySize(s, P + W * v), Z = 0; Z < Q; Z += 2) {
                  var $ = X[Z];
                  var _ = X[Z + 1];
                  Y[P] = $;
                  Y[P + 1] = _;
                  Y[P + 2] = i.r;
                  Y[P + 3] = i.g;
                  Y[P + 4] = i.b;
                  Y[P + 5] = i.a;
                  var ca = $ - K;
                  var da = _ - L;
                  var fa = (R * ca + S * da) * V;
                  var Oa = (U * ca + T * da) * V;
                  var Pa = 1 - fa - Oa;
                  Y[P + 6] = D * fa + I * Oa + M * Pa;
                  Y[P + 7] = F * fa + J * Oa + N * Pa;
                  if (a) {
                    Y[P + 8] = j.r;
                    Y[P + 9] = j.g;
                    Y[P + 10] = j.b;
                    Y[P + 11] = j.a;
                  }
                  P += v;
                }
                P = t.length;
                var Qa = c.Utils.setArraySize(t, P + (W - 2) * 3);
                W--;
                Z = 1;
                for (; Z < W; Z++) {
                  Qa[P] = g;
                  Qa[P + 1] = g + Z;
                  Qa[P + 2] = g + Z + 1;
                  P += 3;
                }
                g += W + 1;
              }
            }
          }
        };
        d.prototype.clip = function (b, d, g, e, h, i, j, k) {
          var l = k;
          var m = false;
          var n = null;
          if (j.length % 4 >= 2) {
            n = k;
            k = this.scratch;
          } else {
            n = this.scratch;
          }
          n.length = 0;
          n.push(b);
          n.push(d);
          n.push(g);
          n.push(e);
          n.push(h);
          n.push(i);
          n.push(b);
          n.push(d);
          k.length = 0;
          for (var o = j, p = j.length - 4, q = 0;; q += 2) {
            for (var r = o[q], s = o[q + 1], u = o[q + 2], v = o[q + 3], w = r - u, x = s - v, y = n, z = n.length - 2, A = k.length, C = 0; C < z; C += 2) {
              var D = y[C];
              var E = y[C + 1];
              var I = y[C + 2];
              var L = y[C + 3];
              var M = w * (L - v) - x * (I - u) > 0;
              if (w * (E - v) - x * (D - u) > 0) {
                if (M) {
                  k.push(I);
                  k.push(L);
                  continue;
                }
                if (Math.abs(S = (P = L - E) * (u - r) - (R = I - D) * (v - s)) > 0.000001) {
                  var O = (R * (s - E) - P * (r - D)) / S;
                  k.push(r + (u - r) * O);
                  k.push(s + (v - s) * O);
                } else {
                  k.push(r);
                  k.push(s);
                }
              } else if (M) {
                var P;
                var R;
                var S;
                if (Math.abs(S = (P = L - E) * (u - r) - (R = I - D) * (v - s)) > 0.000001) {
                  O = (R * (s - E) - P * (r - D)) / S;
                  k.push(r + (u - r) * O);
                  k.push(s + (v - s) * O);
                } else {
                  k.push(r);
                  k.push(s);
                }
                k.push(I);
                k.push(L);
              }
              m = true;
            }
            if (A == k.length) {
              l.length = 0;
              return true;
            }
            k.push(k[0]);
            k.push(k[1]);
            if (q == p) {
              break;
            }
            var T = k;
            (k = n).length = 0;
            n = T;
          }
          if (l != k) {
            l.length = 0;
            q = 0;
            for (var _ = k.length - 2; q < _; q++) {
              l[q] = k[q];
            }
          } else {
            l.length = l.length - 2;
          }
          return m;
        };
        d.makeClockwise = function (a) {
          for (var b = a, c = a.length, d = b[c - 2] * b[1] - b[0] * b[c - 1], e = 0, f = 0, h = 0, n = 0, o = c - 3; n < o; n += 2) {
            e = b[n];
            f = b[n + 1];
            h = b[n + 2];
            d += e * b[n + 3] - h * f;
          }
          if (!(d < 0)) {
            n = 0;
            var r = c - 2;
            for (o = c >> 1; n < o; n += 2) {
              var q = b[n];
              var s = b[n + 1];
              var u = r - n;
              b[n] = b[u];
              b[n + 1] = b[u + 1];
              b[u] = q;
              b[u + 1] = s;
            }
          }
        };
        return d;
      }();
      c.SkeletonClipping = b;
    })(i || (i = {}));
    (function (c) {
      var a = function () {
        function b() {
          this.bones = [];
          this.slots = [];
          this.skins = [];
          this.events = [];
          this.animations = [];
          this.ikConstraints = [];
          this.transformConstraints = [];
          this.pathConstraints = [];
          this.fps = 0;
        }
        b.prototype.findBone = function (f) {
          if (f == null) {
            throw Error("boneName cannot be null.");
          }
          for (var a = this.bones, b = 0, g = a.length; b < g; b++) {
            var d = a[b];
            if (d.name == f) {
              return d;
            }
          }
          return null;
        };
        b.prototype.findBoneIndex = function (e) {
          if (e == null) {
            throw Error("boneName cannot be null.");
          }
          for (var a = this.bones, b = 0, f = a.length; b < f; b++) {
            if (a[b].name == e) {
              return b;
            }
          }
          return -1;
        };
        b.prototype.findSlot = function (f) {
          if (f == null) {
            throw Error("slotName cannot be null.");
          }
          for (var a = this.slots, b = 0, g = a.length; b < g; b++) {
            var d = a[b];
            if (d.name == f) {
              return d;
            }
          }
          return null;
        };
        b.prototype.findSlotIndex = function (e) {
          if (e == null) {
            throw Error("slotName cannot be null.");
          }
          for (var a = this.slots, b = 0, f = a.length; b < f; b++) {
            if (a[b].name == e) {
              return b;
            }
          }
          return -1;
        };
        b.prototype.findSkin = function (f) {
          if (f == null) {
            throw Error("skinName cannot be null.");
          }
          for (var a = this.skins, b = 0, g = a.length; b < g; b++) {
            var d = a[b];
            if (d.name == f) {
              return d;
            }
          }
          return null;
        };
        b.prototype.findEvent = function (f) {
          if (f == null) {
            throw Error("eventDataName cannot be null.");
          }
          for (var a = this.events, b = 0, g = a.length; b < g; b++) {
            var d = a[b];
            if (d.name == f) {
              return d;
            }
          }
          return null;
        };
        b.prototype.findAnimation = function (f) {
          if (f == null) {
            throw Error("animationName cannot be null.");
          }
          for (var a = this.animations, b = 0, g = a.length; b < g; b++) {
            var d = a[b];
            if (d.name == f) {
              return d;
            }
          }
          return null;
        };
        b.prototype.findIkConstraint = function (f) {
          if (f == null) {
            throw Error("constraintName cannot be null.");
          }
          for (var a = this.ikConstraints, b = 0, g = a.length; b < g; b++) {
            var d = a[b];
            if (d.name == f) {
              return d;
            }
          }
          return null;
        };
        b.prototype.findTransformConstraint = function (f) {
          if (f == null) {
            throw Error("constraintName cannot be null.");
          }
          for (var a = this.transformConstraints, b = 0, g = a.length; b < g; b++) {
            var d = a[b];
            if (d.name == f) {
              return d;
            }
          }
          return null;
        };
        b.prototype.findPathConstraint = function (f) {
          if (f == null) {
            throw Error("constraintName cannot be null.");
          }
          for (var a = this.pathConstraints, b = 0, g = a.length; b < g; b++) {
            var d = a[b];
            if (d.name == f) {
              return d;
            }
          }
          return null;
        };
        b.prototype.findPathConstraintIndex = function (e) {
          if (e == null) {
            throw Error("pathConstraintName cannot be null.");
          }
          for (var a = this.pathConstraints, b = 0, f = a.length; b < f; b++) {
            if (a[b].name == e) {
              return b;
            }
          }
          return -1;
        };
        return b;
      }();
      c.SkeletonData = a;
    })(i || (i = {}));
    (function (c) {
      var d = function () {
        function b(b) {
          this.scale = 1;
          this.linkedMeshes = [];
          this.attachmentLoader = b;
        }
        b.prototype.readSkeletonData = function (a) {
          var d = this.scale;
          var e = new c.SkeletonData();
          var f = typeof a == "string" ? JSON.parse(a) : a;
          var g = f.skeleton;
          if (g != null) {
            e.hash = g.hash;
            e.version = g.spine;
            e.x = g.x;
            e.y = g.y;
            e.width = g.width;
            e.height = g.height;
            e.fps = g.fps;
            e.imagesPath = g.images;
          }
          if (f.bones) {
            for (var h = 0; h < f.bones.length; h++) {
              var i = f.bones[h];
              var j = null;
              var k = this.getValue(i, "parent", null);
              if (k != null && (j = e.findBone(k)) == null) {
                throw Error("Parent bone not found: " + k);
              }
              (o = new c.BoneData(e.bones.length, i.name, j)).length = this.getValue(i, "length", 0) * d;
              o.x = this.getValue(i, "x", 0) * d;
              o.y = this.getValue(i, "y", 0) * d;
              o.rotation = this.getValue(i, "rotation", 0);
              o.scaleX = this.getValue(i, "scaleX", 1);
              o.scaleY = this.getValue(i, "scaleY", 1);
              o.shearX = this.getValue(i, "shearX", 0);
              o.shearY = this.getValue(i, "shearY", 0);
              o.transformMode = b.transformModeFromString(this.getValue(i, "transform", "normal"));
              o.skinRequired = this.getValue(i, "skin", false);
              e.bones.push(o);
            }
          }
          if (f.slots) {
            for (h = 0; h < f.slots.length; h++) {
              var l = (O = f.slots[h]).name;
              var m = O.bone;
              var n = e.findBone(m);
              if (n == null) {
                throw Error("Slot bone not found: " + m);
              }
              var o = new c.SlotData(e.slots.length, l, n);
              var p = this.getValue(O, "color", null);
              if (p != null) {
                o.color.setFromString(p);
              }
              var u = this.getValue(O, "dark", null);
              if (u != null) {
                o.darkColor = new c.Color(1, 1, 1, 1);
                o.darkColor.setFromString(u);
              }
              o.attachmentName = this.getValue(O, "attachment", null);
              o.blendMode = b.blendModeFromString(this.getValue(O, "blend", "normal"));
              e.slots.push(o);
            }
          }
          if (f.ik) {
            for (h = 0; h < f.ik.length; h++) {
              var v = f.ik[h];
              (o = new c.IkConstraintData(v.name)).order = this.getValue(v, "order", 0);
              o.skinRequired = this.getValue(v, "skin", false);
              for (var w = 0; w < v.bones.length; w++) {
                m = v.bones[w];
                if ((I = e.findBone(m)) == null) {
                  throw Error("IK bone not found: " + m);
                }
                o.bones.push(I);
              }
              var x = v.target;
              o.target = e.findBone(x);
              if (o.target == null) {
                throw Error("IK target bone not found: " + x);
              }
              o.mix = this.getValue(v, "mix", 1);
              o.softness = this.getValue(v, "softness", 0) * d;
              o.bendDirection = this.getValue(v, "bendPositive", true) ? 1 : -1;
              o.compress = this.getValue(v, "compress", false);
              o.stretch = this.getValue(v, "stretch", false);
              o.uniform = this.getValue(v, "uniform", false);
              e.ikConstraints.push(o);
            }
          }
          if (f.transform) {
            for (h = 0; h < f.transform.length; h++) {
              v = f.transform[h];
              (o = new c.TransformConstraintData(v.name)).order = this.getValue(v, "order", 0);
              o.skinRequired = this.getValue(v, "skin", false);
              w = 0;
              for (; w < v.bones.length; w++) {
                m = v.bones[w];
                if ((I = e.findBone(m)) == null) {
                  throw Error("Transform constraint bone not found: " + m);
                }
                o.bones.push(I);
              }
              x = v.target;
              o.target = e.findBone(x);
              if (o.target == null) {
                throw Error("Transform constraint target bone not found: " + x);
              }
              o.local = this.getValue(v, "local", false);
              o.relative = this.getValue(v, "relative", false);
              o.offsetRotation = this.getValue(v, "rotation", 0);
              o.offsetX = this.getValue(v, "x", 0) * d;
              o.offsetY = this.getValue(v, "y", 0) * d;
              o.offsetScaleX = this.getValue(v, "scaleX", 0);
              o.offsetScaleY = this.getValue(v, "scaleY", 0);
              o.offsetShearY = this.getValue(v, "shearY", 0);
              o.rotateMix = this.getValue(v, "rotateMix", 1);
              o.translateMix = this.getValue(v, "translateMix", 1);
              o.scaleMix = this.getValue(v, "scaleMix", 1);
              o.shearMix = this.getValue(v, "shearMix", 1);
              e.transformConstraints.push(o);
            }
          }
          if (f.path) {
            for (h = 0; h < f.path.length; h++) {
              v = f.path[h];
              (o = new c.PathConstraintData(v.name)).order = this.getValue(v, "order", 0);
              o.skinRequired = this.getValue(v, "skin", false);
              w = 0;
              for (; w < v.bones.length; w++) {
                m = v.bones[w];
                if ((I = e.findBone(m)) == null) {
                  throw Error("Transform constraint bone not found: " + m);
                }
                o.bones.push(I);
              }
              x = v.target;
              o.target = e.findSlot(x);
              if (o.target == null) {
                throw Error("Path target slot not found: " + x);
              }
              o.positionMode = b.positionModeFromString(this.getValue(v, "positionMode", "percent"));
              o.spacingMode = b.spacingModeFromString(this.getValue(v, "spacingMode", "length"));
              o.rotateMode = b.rotateModeFromString(this.getValue(v, "rotateMode", "tangent"));
              o.offsetRotation = this.getValue(v, "rotation", 0);
              o.position = this.getValue(v, "position", 0);
              if (o.positionMode == c.PositionMode.Fixed) {
                o.position *= d;
              }
              o.spacing = this.getValue(v, "spacing", 0);
              if (!(o.spacingMode != c.SpacingMode.Length && o.spacingMode != c.SpacingMode.Fixed)) {
                o.spacing *= d;
              }
              o.rotateMix = this.getValue(v, "rotateMix", 1);
              o.translateMix = this.getValue(v, "translateMix", 1);
              e.pathConstraints.push(o);
            }
          }
          if (f.skins) {
            var y = f.skins;
            if (!(y instanceof Array)) {
              var A = [];
              for (var B in y) {
                A.push({
                  name: B,
                  attachments: y[B]
                });
              }
              y = A;
            }
            for (h = 0; h < y.length; h++) {
              var C = y[h];
              var D = new c.Skin(C.name);
              if (C.bones) {
                for (var F = 0; F < C.bones.length; F++) {
                  var I;
                  if ((I = e.findBone(C.bones[F])) == null) {
                    throw Error("Skin bone not found: " + C.bones[h]);
                  }
                  D.bones.push(I);
                }
              }
              if (C.ik) {
                for (F = 0; F < C.ik.length; F++) {
                  if ((M = e.findIkConstraint(C.ik[F])) == null) {
                    throw Error("Skin IK constraint not found: " + C.ik[h]);
                  }
                  D.constraints.push(M);
                }
              }
              if (C.transform) {
                for (F = 0; F < C.transform.length; F++) {
                  if ((M = e.findTransformConstraint(C.transform[F])) == null) {
                    throw Error("Skin transform constraint not found: " + C.transform[h]);
                  }
                  D.constraints.push(M);
                }
              }
              if (C.path) {
                for (F = 0; F < C.path.length; F++) {
                  var M;
                  if ((M = e.findPathConstraint(C.path[F])) == null) {
                    throw Error("Skin path constraint not found: " + C.path[h]);
                  }
                  D.constraints.push(M);
                }
              }
              for (var l in C.attachments) {
                var N = e.findSlot(l);
                if (N == null) {
                  throw Error("Slot not found: " + l);
                }
                var O = C.attachments[l];
                for (var P in O) {
                  var R = this.readAttachment(O[P], D, N.index, P, e);
                  if (R != null) {
                    D.setAttachment(N.index, P, R);
                  }
                }
              }
              e.skins.push(D);
              if (D.name == "default") {
                e.defaultSkin = D;
              }
            }
          }
          h = 0;
          for (var S = this.linkedMeshes.length; h < S; h++) {
            var T = this.linkedMeshes[h];
            if ((D = T.skin == null ? e.defaultSkin : e.findSkin(T.skin)) == null) {
              throw Error("Skin not found: " + T.skin);
            }
            var V = D.getAttachment(T.slotIndex, T.parent);
            if (V == null) {
              throw Error("Parent mesh not found: " + T.parent);
            }
            T.mesh.deformAttachment = T.inheritDeform ? V : T.mesh;
            T.mesh.setParentMesh(V);
            T.mesh.updateUVs();
          }
          this.linkedMeshes.length = 0;
          if (f.events) {
            for (var Z in f.events) {
              var _ = f.events[Z];
              (o = new c.EventData(Z)).intValue = this.getValue(_, "int", 0);
              o.floatValue = this.getValue(_, "float", 0);
              o.stringValue = this.getValue(_, "string", "");
              o.audioPath = this.getValue(_, "audio", null);
              if (o.audioPath != null) {
                o.volume = this.getValue(_, "volume", 1);
                o.balance = this.getValue(_, "balance", 0);
              }
              e.events.push(o);
            }
          }
          if (f.animations) {
            for (var aa in f.animations) {
              var ja = f.animations[aa];
              this.readAnimation(ja, aa, e);
            }
          }
          return e;
        };
        b.prototype.readAttachment = function (b, i, e, j, s) {
          var n = this.scale;
          j = this.getValue(b, "name", j);
          switch (this.getValue(b, "type", "region")) {
            case "region":
              var v = this.getValue(b, "path", j);
              var y = this.attachmentLoader.newRegionAttachment(i, j, v);
              if (y == null) {
                return null;
              } else {
                y.path = v;
                y.x = this.getValue(b, "x", 0) * n;
                y.y = this.getValue(b, "y", 0) * n;
                y.scaleX = this.getValue(b, "scaleX", 1);
                y.scaleY = this.getValue(b, "scaleY", 1);
                y.rotation = this.getValue(b, "rotation", 0);
                y.width = b.width * n;
                y.height = b.height * n;
                if ((g = this.getValue(b, "color", null)) != null) {
                  y.color.setFromString(g);
                }
                y.updateOffset();
                return y;
              }
            case "boundingbox":
              var q = this.attachmentLoader.newBoundingBoxAttachment(i, j);
              if (q == null) {
                return null;
              } else {
                this.readVertices(b, q, b.vertexCount << 1);
                if ((g = this.getValue(b, "color", null)) != null) {
                  q.color.setFromString(g);
                }
                return q;
              }
            case "mesh":
            case "linkedmesh":
              v = this.getValue(b, "path", j);
              var l = this.attachmentLoader.newMeshAttachment(i, j, v);
              if (l == null) {
                return null;
              }
              l.path = v;
              if ((g = this.getValue(b, "color", null)) != null) {
                l.color.setFromString(g);
              }
              l.width = this.getValue(b, "width", 0) * n;
              l.height = this.getValue(b, "height", 0) * n;
              var h = this.getValue(b, "parent", null);
              if (h != null) {
                this.linkedMeshes.push(new a(l, this.getValue(b, "skin", null), e, h, this.getValue(b, "deform", true)));
                return l;
              }
              var r = b.uvs;
              this.readVertices(b, l, r.length);
              l.triangles = b.triangles;
              l.regionUVs = r;
              l.updateUVs();
              l.edges = this.getValue(b, "edges", null);
              l.hullLength = this.getValue(b, "hull", 0) * 2;
              return l;
            case "path":
              if ((v = this.attachmentLoader.newPathAttachment(i, j)) == null) {
                return null;
              }
              v.closed = this.getValue(b, "closed", false);
              v.constantSpeed = this.getValue(b, "constantSpeed", true);
              var f = b.vertexCount;
              this.readVertices(b, v, f << 1);
              for (var z = c.Utils.newArray(f / 3, 0), t = 0; t < b.lengths.length; t++) {
                z[t] = b.lengths[t] * n;
              }
              v.lengths = z;
              if ((g = this.getValue(b, "color", null)) != null) {
                v.color.setFromString(g);
              }
              return v;
            case "point":
              var A = this.attachmentLoader.newPointAttachment(i, j);
              if (A == null) {
                return null;
              } else {
                A.x = this.getValue(b, "x", 0) * n;
                A.y = this.getValue(b, "y", 0) * n;
                A.rotation = this.getValue(b, "rotation", 0);
                if ((g = this.getValue(b, "color", null)) != null) {
                  A.color.setFromString(g);
                }
                return A;
              }
            case "clipping":
              var u = this.attachmentLoader.newClippingAttachment(i, j);
              if (u == null) {
                return null;
              }
              var g;
              var B = this.getValue(b, "end", null);
              if (B != null) {
                var w = s.findSlot(B);
                if (w == null) {
                  throw Error("Clipping end slot not found: " + B);
                }
                u.endSlot = w;
              }
              f = b.vertexCount;
              this.readVertices(b, u, f << 1);
              if ((g = this.getValue(b, "color", null)) != null) {
                u.color.setFromString(g);
              }
              return u;
          }
          return null;
        };
        b.prototype.readVertices = function (f, b, d) {
          var e = this.scale;
          b.worldVerticesLength = d;
          var g = f.vertices;
          if (d != g.length) {
            var i = [];
            var j = [];
            n = 0;
            q = g.length;
            for (; n < q;) {
              var a = g[n++];
              j.push(a);
              for (var l = n + a * 4; n < l; n += 4) {
                j.push(g[n]);
                i.push(g[n + 1] * e);
                i.push(g[n + 2] * e);
                i.push(g[n + 3]);
              }
            }
            b.bones = j;
            b.vertices = c.Utils.toFloatArray(i);
          } else {
            var p = c.Utils.toFloatArray(g);
            if (e != 1) {
              for (var n = 0, q = g.length; n < q; n++) {
                p[n] *= e;
              }
            }
            b.vertices = p;
          }
        };
        b.prototype.readAnimation = function (a, b, d) {
          var e = this.scale;
          var f = [];
          var g = 0;
          if (a.slots) {
            for (var h in a.slots) {
              var i = a.slots[h];
              if ((aa = d.findSlotIndex(h)) == -1) {
                throw Error("Slot not found: " + h);
              }
              for (var j in i) {
                var k = i[j];
                if (j == "attachment") {
                  (v = new c.AttachmentTimeline(k.length)).slotIndex = aa;
                  for (var l = 0, m = 0; m < k.length; m++) {
                    var n = k[m];
                    v.setFrame(l++, this.getValue(n, "time", 0), n.name);
                  }
                  f.push(v);
                  g = Math.max(g, v.frames[v.getFrameCount() - 1]);
                } else if (j == "color") {
                  (v = new c.ColorTimeline(k.length)).slotIndex = aa;
                  l = 0;
                  m = 0;
                  for (; m < k.length; m++) {
                    n = k[m];
                    var o = new c.Color();
                    o.setFromString(n.color);
                    v.setFrame(l, this.getValue(n, "time", 0), o.r, o.g, o.b, o.a);
                    this.readCurve(n, v, l);
                    l++;
                  }
                  f.push(v);
                  g = Math.max(g, v.frames[(v.getFrameCount() - 1) * c.ColorTimeline.ENTRIES]);
                } else {
                  if (j != "twoColor") {
                    throw Error("Invalid timeline type for a slot: " + j + " (" + h + ")");
                  }
                  (v = new c.TwoColorTimeline(k.length)).slotIndex = aa;
                  l = 0;
                  m = 0;
                  for (; m < k.length; m++) {
                    n = k[m];
                    var p = new c.Color();
                    var q = new c.Color();
                    p.setFromString(n.light);
                    q.setFromString(n.dark);
                    v.setFrame(l, this.getValue(n, "time", 0), p.r, p.g, p.b, p.a, q.r, q.g, q.b);
                    this.readCurve(n, v, l);
                    l++;
                  }
                  f.push(v);
                  g = Math.max(g, v.frames[(v.getFrameCount() - 1) * c.TwoColorTimeline.ENTRIES]);
                }
              }
            }
          }
          if (a.bones) {
            for (var r in a.bones) {
              var t = a.bones[r];
              var u = d.findBoneIndex(r);
              if (u == -1) {
                throw Error("Bone not found: " + r);
              }
              for (var j in t) {
                k = t[j];
                if (j === "rotate") {
                  (v = new c.RotateTimeline(k.length)).boneIndex = u;
                  l = 0;
                  m = 0;
                  for (; m < k.length; m++) {
                    n = k[m];
                    v.setFrame(l, this.getValue(n, "time", 0), this.getValue(n, "angle", 0));
                    this.readCurve(n, v, l);
                    l++;
                  }
                  f.push(v);
                  g = Math.max(g, v.frames[(v.getFrameCount() - 1) * c.RotateTimeline.ENTRIES]);
                } else {
                  if (j !== "translate" && j !== "scale" && j !== "shear") {
                    throw Error("Invalid timeline type for a bone: " + j + " (" + r + ")");
                  }
                  var v = null;
                  var w = 1;
                  var x = 0;
                  if (j === "scale") {
                    v = new c.ScaleTimeline(k.length);
                    x = 1;
                  } else if (j === "shear") {
                    v = new c.ShearTimeline(k.length);
                  } else {
                    v = new c.TranslateTimeline(k.length);
                    w = e;
                  }
                  v.boneIndex = u;
                  l = 0;
                  m = 0;
                  for (; m < k.length; m++) {
                    n = k[m];
                    var y = this.getValue(n, "x", x);
                    var z = this.getValue(n, "y", x);
                    v.setFrame(l, this.getValue(n, "time", 0), y * w, z * w);
                    this.readCurve(n, v, l);
                    l++;
                  }
                  f.push(v);
                  g = Math.max(g, v.frames[(v.getFrameCount() - 1) * c.TranslateTimeline.ENTRIES]);
                }
              }
            }
          }
          if (a.ik) {
            for (var A in a.ik) {
              var B = a.ik[A];
              var C = d.findIkConstraint(A);
              (v = new c.IkConstraintTimeline(B.length)).ikConstraintIndex = d.ikConstraints.indexOf(C);
              l = 0;
              m = 0;
              for (; m < B.length; m++) {
                n = B[m];
                v.setFrame(l, this.getValue(n, "time", 0), this.getValue(n, "mix", 1), this.getValue(n, "softness", 0) * e, this.getValue(n, "bendPositive", true) ? 1 : -1, this.getValue(n, "compress", false), this.getValue(n, "stretch", false));
                this.readCurve(n, v, l);
                l++;
              }
              f.push(v);
              g = Math.max(g, v.frames[(v.getFrameCount() - 1) * c.IkConstraintTimeline.ENTRIES]);
            }
          }
          if (a.transform) {
            for (var A in a.transform) {
              B = a.transform[A];
              C = d.findTransformConstraint(A);
              (v = new c.TransformConstraintTimeline(B.length)).transformConstraintIndex = d.transformConstraints.indexOf(C);
              l = 0;
              m = 0;
              for (; m < B.length; m++) {
                n = B[m];
                v.setFrame(l, this.getValue(n, "time", 0), this.getValue(n, "rotateMix", 1), this.getValue(n, "translateMix", 1), this.getValue(n, "scaleMix", 1), this.getValue(n, "shearMix", 1));
                this.readCurve(n, v, l);
                l++;
              }
              f.push(v);
              g = Math.max(g, v.frames[(v.getFrameCount() - 1) * c.TransformConstraintTimeline.ENTRIES]);
            }
          }
          var D = a.path || a.paths;
          if (D) {
            for (var A in D) {
              B = D[A];
              var E = d.findPathConstraintIndex(A);
              if (E == -1) {
                throw Error("Path constraint not found: " + A);
              }
              var F = d.pathConstraints[E];
              for (var j in B) {
                k = B[j];
                if (j === "position" || j === "spacing") {
                  v = null;
                  w = 1;
                  if (j === "spacing") {
                    v = new c.PathConstraintSpacingTimeline(k.length);
                    if (!(F.spacingMode != c.SpacingMode.Length && F.spacingMode != c.SpacingMode.Fixed)) {
                      w = e;
                    }
                  } else {
                    v = new c.PathConstraintPositionTimeline(k.length);
                    if (F.positionMode == c.PositionMode.Fixed) {
                      w = e;
                    }
                  }
                  v.pathConstraintIndex = E;
                  l = 0;
                  m = 0;
                  for (; m < k.length; m++) {
                    n = k[m];
                    v.setFrame(l, this.getValue(n, "time", 0), this.getValue(n, j, 0) * w);
                    this.readCurve(n, v, l);
                    l++;
                  }
                  f.push(v);
                  g = Math.max(g, v.frames[(v.getFrameCount() - 1) * c.PathConstraintPositionTimeline.ENTRIES]);
                } else if (j === "mix") {
                  (v = new c.PathConstraintMixTimeline(k.length)).pathConstraintIndex = E;
                  l = 0;
                  m = 0;
                  for (; m < k.length; m++) {
                    n = k[m];
                    v.setFrame(l, this.getValue(n, "time", 0), this.getValue(n, "rotateMix", 1), this.getValue(n, "translateMix", 1));
                    this.readCurve(n, v, l);
                    l++;
                  }
                  f.push(v);
                  g = Math.max(g, v.frames[(v.getFrameCount() - 1) * c.PathConstraintMixTimeline.ENTRIES]);
                }
              }
            }
          }
          if (a.deform) {
            for (var G in a.deform) {
              var H = a.deform[G];
              var I = d.findSkin(G);
              if (I == null) {
                throw Error("Skin not found: " + G);
              }
              for (var h in H) {
                i = H[h];
                if ((aa = d.findSlotIndex(h)) == -1) {
                  throw Error("Slot not found: " + i.name);
                }
                for (var j in i) {
                  k = i[j];
                  var J = I.getAttachment(aa, j);
                  if (J != null) {
                    var K = J.bones != null;
                    var L = J.vertices;
                    var N = K ? L.length / 3 * 2 : L.length;
                    (v = new c.DeformTimeline(k.length)).slotIndex = aa;
                    v.attachment = J;
                    l = 0;
                    for (var O = 0; O < k.length; O++) {
                      n = k[O];
                      var P = undefined;
                      var Q = this.getValue(n, "vertices", null);
                      if (Q == null) {
                        P = K ? c.Utils.newFloatArray(N) : L;
                      } else {
                        P = c.Utils.newFloatArray(N);
                        var R = this.getValue(n, "offset", 0);
                        c.Utils.arrayCopy(Q, 0, P, R, Q.length);
                        if (e != 1) {
                          for (var S = (m = R) + Q.length; m < S; m++) {
                            P[m] *= e;
                          }
                        }
                        if (!K) {
                          for (m = 0; m < N; m++) {
                            P[m] += L[m];
                          }
                        }
                      }
                      v.setFrame(l, this.getValue(n, "time", 0), P);
                      this.readCurve(n, v, l);
                      l++;
                    }
                    f.push(v);
                    g = Math.max(g, v.frames[v.getFrameCount() - 1]);
                  }
                }
              }
            }
          }
          var T = a.drawOrder;
          if (T == null) {
            T = a.draworder;
          }
          if (T != null) {
            v = new c.DrawOrderTimeline(T.length);
            var U = d.slots.length;
            l = 0;
            O = 0;
            for (; O < T.length; O++) {
              var V = T[O];
              var X = null;
              var Y = this.getValue(V, "offsets", null);
              if (Y != null) {
                X = c.Utils.newArray(U, -1);
                var Z = c.Utils.newArray(U - Y.length, 0);
                var $ = 0;
                var _ = 0;
                for (m = 0; m < Y.length; m++) {
                  var aa;
                  var wa = Y[m];
                  if ((aa = d.findSlotIndex(wa.slot)) == -1) {
                    throw Error("Slot not found: " + wa.slot);
                  }
                  for (; $ != aa;) {
                    Z[_++] = $++;
                  }
                  X[$ + wa.offset] = $++;
                }
                for (; $ < U;) {
                  Z[_++] = $++;
                }
                for (m = U - 1; m >= 0; m--) {
                  if (X[m] == -1) {
                    X[m] = Z[--_];
                  }
                }
              }
              v.setFrame(l++, this.getValue(V, "time", 0), X);
            }
            f.push(v);
            g = Math.max(g, v.frames[v.getFrameCount() - 1]);
          }
          if (a.events) {
            v = new c.EventTimeline(a.events.length);
            l = 0;
            m = 0;
            for (; m < a.events.length; m++) {
              var La = a.events[m];
              var Wa = d.findEvent(La.name);
              if (Wa == null) {
                throw Error("Event not found: " + La.name);
              }
              var Xa = new c.Event(c.Utils.toSinglePrecision(this.getValue(La, "time", 0)), Wa);
              Xa.intValue = this.getValue(La, "int", Wa.intValue);
              Xa.floatValue = this.getValue(La, "float", Wa.floatValue);
              Xa.stringValue = this.getValue(La, "string", Wa.stringValue);
              if (Xa.data.audioPath != null) {
                Xa.volume = this.getValue(La, "volume", 1);
                Xa.balance = this.getValue(La, "balance", 0);
              }
              v.setFrame(l++, Xa);
            }
            f.push(v);
            g = Math.max(g, v.frames[v.getFrameCount() - 1]);
          }
          if (isNaN(g)) {
            throw Error("Error while parsing animation, duration is NaN");
          }
          d.animations.push(new c.Animation(b, f, g));
        };
        b.prototype.readCurve = function (e, a, b) {
          var c = e.curve;
          if (c) {
            if (c == "stepped") {
              a.setStepped(b);
            } else if (Object.prototype.toString.call(c) === "[object Array]") {
              a.setCurve(b, c[0], c[1], c[2], c[3]);
            } else {
              a.setCurve(b, c, this.getValue(e, "c2", 0), this.getValue(e, "c3", 1), this.getValue(e, "c4", 1));
            }
          }
        };
        b.prototype.getValue = function (d, a, b) {
          if (d[a] !== undefined) {
            return d[a];
          } else {
            return b;
          }
        };
        b.blendModeFromString = function (b) {
          if ((b = b.toLowerCase()) == "normal") {
            return c.BlendMode.Normal;
          }
          if (b == "additive") {
            return c.BlendMode.Additive;
          }
          if (b == "multiply") {
            return c.BlendMode.Multiply;
          }
          if (b == "screen") {
            return c.BlendMode.Screen;
          }
          throw Error("Unknown blend mode: " + b);
        };
        b.positionModeFromString = function (b) {
          if ((b = b.toLowerCase()) == "fixed") {
            return c.PositionMode.Fixed;
          }
          if (b == "percent") {
            return c.PositionMode.Percent;
          }
          throw Error("Unknown position mode: " + b);
        };
        b.spacingModeFromString = function (b) {
          if ((b = b.toLowerCase()) == "length") {
            return c.SpacingMode.Length;
          }
          if (b == "fixed") {
            return c.SpacingMode.Fixed;
          }
          if (b == "percent") {
            return c.SpacingMode.Percent;
          }
          throw Error("Unknown position mode: " + b);
        };
        b.rotateModeFromString = function (b) {
          if ((b = b.toLowerCase()) == "tangent") {
            return c.RotateMode.Tangent;
          }
          if (b == "chain") {
            return c.RotateMode.Chain;
          }
          if (b == "chainscale") {
            return c.RotateMode.ChainScale;
          }
          throw Error("Unknown rotate mode: " + b);
        };
        b.transformModeFromString = function (b) {
          if ((b = b.toLowerCase()) == "normal") {
            return c.TransformMode.Normal;
          }
          if (b == "onlytranslation") {
            return c.TransformMode.OnlyTranslation;
          }
          if (b == "norotationorreflection") {
            return c.TransformMode.NoRotationOrReflection;
          }
          if (b == "noscale") {
            return c.TransformMode.NoScale;
          }
          if (b == "noscaleorreflection") {
            return c.TransformMode.NoScaleOrReflection;
          }
          throw Error("Unknown transform mode: " + b);
        };
        return b;
      }();
      c.SkeletonJson = d;
      function a(f, a, b, c, d) {
        this.mesh = f;
        this.skin = a;
        this.slotIndex = b;
        this.parent = c;
        this.inheritDeform = d;
      }
    })(i || (i = {}));
    (function (d) {
      function g(d, a, b) {
        this.slotIndex = d;
        this.name = a;
        this.attachment = b;
      }
      d.SkinEntry = g;
      var a = function () {
        function a(b) {
          this.attachments = [];
          this.bones = [];
          this.constraints = [];
          if (b == null) {
            throw Error("name cannot be null.");
          }
          this.name = b;
        }
        a.prototype.setAttachment = function (e, a, b) {
          if (b == null) {
            throw Error("attachment cannot be null.");
          }
          var c = this.attachments;
          if (e >= c.length) {
            c.length = e + 1;
          }
          if (!c[e]) {
            c[e] = {};
          }
          c[e][a] = b;
        };
        a.prototype.addSkin = function (e) {
          for (var b = 0; b < e.bones.length; b++) {
            for (var i = e.bones[b], k = false, l = 0; l < this.bones.length; l++) {
              if (this.bones[l] == i) {
                k = true;
                break;
              }
            }
            if (!k) {
              this.bones.push(i);
            }
          }
          for (b = 0; b < e.constraints.length; b++) {
            var m = e.constraints[b];
            k = false;
            l = 0;
            for (; l < this.constraints.length; l++) {
              if (this.constraints[l] == m) {
                k = true;
                break;
              }
            }
            if (!k) {
              this.constraints.push(m);
            }
          }
          var n = e.getAttachments();
          for (b = 0; b < n.length; b++) {
            var j = n[b];
            this.setAttachment(j.slotIndex, j.name, j.attachment);
          }
        };
        a.prototype.copySkin = function (a) {
          for (var b = 0; b < a.bones.length; b++) {
            for (var c = a.bones[b], i = false, l = 0; l < this.bones.length; l++) {
              if (this.bones[l] == c) {
                i = true;
                break;
              }
            }
            if (!i) {
              this.bones.push(c);
            }
          }
          for (b = 0; b < a.constraints.length; b++) {
            var m = a.constraints[b];
            i = false;
            l = 0;
            for (; l < this.constraints.length; l++) {
              if (this.constraints[l] == m) {
                i = true;
                break;
              }
            }
            if (!i) {
              this.constraints.push(m);
            }
          }
          var n = a.getAttachments();
          for (b = 0; b < n.length; b++) {
            var j = n[b];
            if (j.attachment != null) {
              if (j.attachment instanceof d.MeshAttachment) {
                j.attachment = j.attachment.newLinkedMesh();
                this.setAttachment(j.slotIndex, j.name, j.attachment);
              } else {
                j.attachment = j.attachment.copy();
                this.setAttachment(j.slotIndex, j.name, j.attachment);
              }
            }
          }
        };
        a.prototype.getAttachment = function (d, a) {
          var b = this.attachments[d];
          if (b) {
            return b[a];
          } else {
            return null;
          }
        };
        a.prototype.removeAttachment = function (d, a) {
          var b = this.attachments[d];
          if (b) {
            b[a] = null;
          }
        };
        a.prototype.getAttachments = function () {
          for (var b = [], a = 0; a < this.attachments.length; a++) {
            var h = this.attachments[a];
            if (h) {
              for (var i in h) {
                var j = h[i];
                if (j) {
                  b.push(new g(a, i, j));
                }
              }
            }
          }
          return b;
        };
        a.prototype.getAttachmentsForSlot = function (b, a) {
          var c = this.attachments[b];
          if (c) {
            for (var d in c) {
              var h = c[d];
              if (h) {
                a.push(new g(b, d, h));
              }
            }
          }
        };
        a.prototype.clear = function () {
          this.attachments.length = 0;
          this.bones.length = 0;
          this.constraints.length = 0;
        };
        a.prototype.attachAll = function (a, b) {
          for (var c = 0, d = 0; d < a.slots.length; d++) {
            var i = a.slots[d];
            var m = i.getAttachment();
            if (m && c < b.attachments.length) {
              var n = b.attachments[c];
              for (var o in n) {
                if (m == n[o]) {
                  var p = this.getAttachment(c, o);
                  if (p != null) {
                    i.setAttachment(p);
                  }
                  break;
                }
              }
            }
            c++;
          }
        };
        return a;
      }();
      d.Skin = a;
    })(i || (i = {}));
    (function (d) {
      var a = function () {
        function a(a, b) {
          this.deform = [];
          if (a == null) {
            throw Error("data cannot be null.");
          }
          if (b == null) {
            throw Error("bone cannot be null.");
          }
          this.data = a;
          this.bone = b;
          this.color = new d.Color();
          this.darkColor = a.darkColor == null ? null : new d.Color();
          this.setToSetupPose();
        }
        a.prototype.getSkeleton = function () {
          return this.bone.skeleton;
        };
        a.prototype.getAttachment = function () {
          return this.attachment;
        };
        a.prototype.setAttachment = function (b) {
          if (this.attachment != b) {
            this.attachment = b;
            this.attachmentTime = this.bone.skeleton.time;
            this.deform.length = 0;
          }
        };
        a.prototype.setAttachmentTime = function (b) {
          this.attachmentTime = this.bone.skeleton.time - b;
        };
        a.prototype.getAttachmentTime = function () {
          return this.bone.skeleton.time - this.attachmentTime;
        };
        a.prototype.setToSetupPose = function () {
          this.color.setFromColor(this.data.color);
          if (this.darkColor != null) {
            this.darkColor.setFromColor(this.data.darkColor);
          }
          if (this.data.attachmentName == null) {
            this.attachment = null;
          } else {
            this.attachment = null;
            this.setAttachment(this.bone.skeleton.getAttachment(this.data.index, this.data.attachmentName));
          }
        };
        return a;
      }();
      d.Slot = a;
    })(i || (i = {}));
    (function (e) {
      e.SlotData = function (a, b, c) {
        this.color = new e.Color(1, 1, 1, 1);
        if (a < 0) {
          throw Error("index must be >= 0.");
        }
        if (b == null) {
          throw Error("name cannot be null.");
        }
        if (c == null) {
          throw Error("boneData cannot be null.");
        }
        this.index = a;
        this.name = b;
        this.boneData = c;
      };
    })(i || (i = {}));
    (function (e) {
      var f;
      var h;
      var a = function () {
        function b(b) {
          this._image = b;
        }
        b.prototype.getImage = function () {
          return this._image;
        };
        b.filterFromString = function (b) {
          switch (b.toLowerCase()) {
            case "nearest":
              return f.Nearest;
            case "linear":
              return f.Linear;
            case "mipmap":
              return f.MipMap;
            case "mipmapnearestnearest":
              return f.MipMapNearestNearest;
            case "mipmaplinearnearest":
              return f.MipMapLinearNearest;
            case "mipmapnearestlinear":
              return f.MipMapNearestLinear;
            case "mipmaplinearlinear":
              return f.MipMapLinearLinear;
            default:
              throw Error("Unknown texture filter " + b);
          }
        };
        b.wrapFromString = function (b) {
          switch (b.toLowerCase()) {
            case "mirroredtepeat":
              return h.MirroredRepeat;
            case "clamptoedge":
              return h.ClampToEdge;
            case "repeat":
              return h.Repeat;
            default:
              throw Error("Unknown texture wrap " + b);
          }
        };
        return b;
      }();
      e.Texture = a;
      (function (b) {
        b[b.Nearest = 9728] = "Nearest";
        b[b.Linear = 9729] = "Linear";
        b[b.MipMap = 9987] = "MipMap";
        b[b.MipMapNearestNearest = 9984] = "MipMapNearestNearest";
        b[b.MipMapLinearNearest = 9985] = "MipMapLinearNearest";
        b[b.MipMapNearestLinear = 9986] = "MipMapNearestLinear";
        b[b.MipMapLinearLinear = 9987] = "MipMapLinearLinear";
      })(f = e.TextureFilter || (e.TextureFilter = {}));
      (function (b) {
        b[b.MirroredRepeat = 33648] = "MirroredRepeat";
        b[b.ClampToEdge = 33071] = "ClampToEdge";
        b[b.Repeat = 10497] = "Repeat";
      })(h = e.TextureWrap || (e.TextureWrap = {}));
      e.TextureRegion = function () {
        this.u = 0;
        this.v = 0;
        this.u2 = 0;
        this.v2 = 0;
        this.width = 0;
        this.height = 0;
        this.rotate = false;
        this.offsetX = 0;
        this.offsetY = 0;
        this.originalWidth = 0;
        this.originalHeight = 0;
      };
      var d = function (c) {
        function a() {
          return c !== null && c.apply(this, arguments) || this;
        }
        l(a, c);
        a.prototype.setFilters = function () {};
        a.prototype.setWraps = function () {};
        a.prototype.dispose = function () {};
        return a;
      }(a);
      e.FakeTexture = d;
    })(i || (i = {}));
    (function (c) {
      var b = function () {
        function b(c, a) {
          this.pages = [];
          this.regions = [];
          this.load(c, a);
        }
        b.prototype.load = function (b, e) {
          if (e == null) {
            throw Error("textureLoader cannot be null.");
          }
          var h = new f(b);
          var i = [,,,,];
          var a = null;
          for (;;) {
            var j = h.readLine();
            if (j == null) {
              break;
            }
            if ((j = j.trim()).length == 0) {
              a = null;
            } else if (a) {
              var k = new d();
              k.name = j;
              k.page = a;
              var l = h.readValue();
              if (l.toLocaleLowerCase() == "true") {
                k.degrees = 90;
              } else if (l.toLocaleLowerCase() == "false") {
                k.degrees = 0;
              } else {
                k.degrees = parseFloat(l);
              }
              k.rotate = k.degrees == 90;
              h.readTuple(i);
              var p = parseInt(i[0]);
              var u = parseInt(i[1]);
              h.readTuple(i);
              var v = parseInt(i[0]);
              var y = parseInt(i[1]);
              k.u = p / a.width;
              k.v = u / a.height;
              if (k.rotate) {
                k.u2 = (p + y) / a.width;
                k.v2 = (u + v) / a.height;
              } else {
                k.u2 = (p + v) / a.width;
                k.v2 = (u + y) / a.height;
              }
              k.x = p;
              k.y = u;
              k.width = Math.abs(v);
              k.height = Math.abs(y);
              if (h.readTuple(i) == 4 && h.readTuple(i) == 4) {
                h.readTuple(i);
              }
              k.originalWidth = parseInt(i[0]);
              k.originalHeight = parseInt(i[1]);
              h.readTuple(i);
              k.offsetX = parseInt(i[0]);
              k.offsetY = parseInt(i[1]);
              k.index = parseInt(h.readValue());
              k.texture = a.texture;
              this.regions.push(k);
            } else {
              (a = new g()).name = j;
              if (h.readTuple(i) == 2) {
                a.width = parseInt(i[0]);
                a.height = parseInt(i[1]);
                h.readTuple(i);
              }
              h.readTuple(i);
              a.minFilter = c.Texture.filterFromString(i[0]);
              a.magFilter = c.Texture.filterFromString(i[1]);
              var z = h.readValue();
              a.uWrap = c.TextureWrap.ClampToEdge;
              a.vWrap = c.TextureWrap.ClampToEdge;
              if (z == "x") {
                a.uWrap = c.TextureWrap.Repeat;
              } else if (z == "y") {
                a.vWrap = c.TextureWrap.Repeat;
              } else if (z == "xy") {
                a.uWrap = a.vWrap = c.TextureWrap.Repeat;
              }
              a.texture = e(j);
              a.texture.setFilters(a.minFilter, a.magFilter);
              a.texture.setWraps(a.uWrap, a.vWrap);
              a.width = a.texture.getImage().width;
              a.height = a.texture.getImage().height;
              this.pages.push(a);
            }
          }
        };
        b.prototype.findRegion = function (c) {
          for (var a = 0; a < this.regions.length; a++) {
            if (this.regions[a].name == c) {
              return this.regions[a];
            }
          }
          return null;
        };
        b.prototype.dispose = function () {
          for (var b = 0; b < this.pages.length; b++) {
            this.pages[b].texture.dispose();
          }
        };
        return b;
      }();
      c.TextureAtlas = b;
      var f = function () {
        function b(b) {
          this.index = 0;
          this.lines = b.split(/\r\n|\r|\n/);
        }
        b.prototype.readLine = function () {
          if (this.index >= this.lines.length) {
            return null;
          } else {
            return this.lines[this.index++];
          }
        };
        b.prototype.readValue = function () {
          var c = this.readLine();
          var a = c.indexOf(":");
          if (a == -1) {
            throw Error("Invalid line: " + c);
          }
          return c.substring(a + 1).trim();
        };
        b.prototype.readTuple = function (g) {
          var a = this.readLine();
          var b = a.indexOf(":");
          if (b == -1) {
            throw Error("Invalid line: " + a);
          }
          for (var c = 0, h = b + 1; c < 3; c++) {
            var i = a.indexOf(",", h);
            if (i == -1) {
              break;
            }
            g[c] = a.substr(h, i - h).trim();
            h = i + 1;
          }
          g[c] = a.substring(h).trim();
          return c + 1;
        };
        return b;
      }();
      function g() {}
      c.TextureAtlasPage = g;
      var d = function (c) {
        function a() {
          return c !== null && c.apply(this, arguments) || this;
        }
        l(a, c);
        return a;
      }(c.TextureRegion);
      c.TextureAtlasRegion = d;
    })(i || (i = {}));
    (function (g) {
      var b = function () {
        function b(d, a) {
          this.rotateMix = 0;
          this.translateMix = 0;
          this.scaleMix = 0;
          this.shearMix = 0;
          this.temp = new g.Vector2();
          this.active = false;
          if (d == null) {
            throw Error("data cannot be null.");
          }
          if (a == null) {
            throw Error("skeleton cannot be null.");
          }
          this.data = d;
          this.rotateMix = d.rotateMix;
          this.translateMix = d.translateMix;
          this.scaleMix = d.scaleMix;
          this.shearMix = d.shearMix;
          this.bones = [];
          for (var b = 0; b < d.bones.length; b++) {
            this.bones.push(a.findBone(d.bones[b].name));
          }
          this.target = a.findBone(d.target.name);
        }
        b.prototype.isActive = function () {
          return this.active;
        };
        b.prototype.apply = function () {
          this.update();
        };
        b.prototype.update = function () {
          if (this.data.local) {
            if (this.data.relative) {
              this.applyRelativeLocal();
            } else {
              this.applyAbsoluteLocal();
            }
          } else if (this.data.relative) {
            this.applyRelativeWorld();
          } else {
            this.applyAbsoluteWorld();
          }
        };
        b.prototype.applyAbsoluteWorld = function () {
          for (var b = this.rotateMix, j = this.translateMix, e = this.scaleMix, i = this.shearMix, k = this.target, m = k.a, n = k.b, a = k.c, o = k.d, c = m * o - n * a > 0 ? g.MathUtils.degRad : -g.MathUtils.degRad, l = this.data.offsetRotation * c, h = this.data.offsetShearY * c, q = this.bones, f = 0, r = q.length; f < r; f++) {
            var s = q[f];
            var t = false;
            if (b != 0) {
              var v = s.a;
              var x = s.b;
              var y = s.c;
              var A = s.d;
              if ((P = Math.atan2(a, m) - Math.atan2(y, v) + l) > g.MathUtils.PI) {
                P -= g.MathUtils.PI2;
              } else if (P < -g.MathUtils.PI) {
                P += g.MathUtils.PI2;
              }
              var C = Math.cos(P *= b);
              var E = Math.sin(P);
              s.a = C * v - E * y;
              s.b = C * x - E * A;
              s.c = E * v + C * y;
              s.d = E * x + C * A;
              t = true;
            }
            if (j != 0) {
              var M = this.temp;
              k.localToWorld(M.set(this.data.offsetX, this.data.offsetY));
              s.worldX += (M.x - s.worldX) * j;
              s.worldY += (M.y - s.worldY) * j;
              t = true;
            }
            if (e > 0) {
              var N = Math.sqrt(s.a * s.a + s.c * s.c);
              var O = Math.sqrt(m * m + a * a);
              if (N > 0.00001) {
                N = (N + (O - N + this.data.offsetScaleX) * e) / N;
              }
              s.a *= N;
              s.c *= N;
              N = Math.sqrt(s.b * s.b + s.d * s.d);
              O = Math.sqrt(n * n + o * o);
              if (N > 0.00001) {
                N = (N + (O - N + this.data.offsetScaleY) * e) / N;
              }
              s.b *= N;
              s.d *= N;
              t = true;
            }
            if (i > 0) {
              x = s.b;
              A = s.d;
              var P;
              var Q = Math.atan2(A, x);
              if ((P = Math.atan2(o, n) - Math.atan2(a, m) - (Q - Math.atan2(s.c, s.a))) > g.MathUtils.PI) {
                P -= g.MathUtils.PI2;
              } else if (P < -g.MathUtils.PI) {
                P += g.MathUtils.PI2;
              }
              P = Q + (P + h) * i;
              N = Math.sqrt(x * x + A * A);
              s.b = Math.cos(P) * N;
              s.d = Math.sin(P) * N;
              t = true;
            }
            if (t) {
              s.appliedValid = false;
            }
          }
        };
        b.prototype.applyRelativeWorld = function () {
          for (var b = this.rotateMix, j = this.translateMix, e = this.scaleMix, i = this.shearMix, k = this.target, m = k.a, n = k.b, a = k.c, o = k.d, c = m * o - n * a > 0 ? g.MathUtils.degRad : -g.MathUtils.degRad, l = this.data.offsetRotation * c, h = this.data.offsetShearY * c, q = this.bones, f = 0, r = q.length; f < r; f++) {
            var s;
            var t = q[f];
            var v = false;
            if (b != 0) {
              var x = t.a;
              var y = t.b;
              var A = t.c;
              var C = t.d;
              if ((s = Math.atan2(a, m) + l) > g.MathUtils.PI) {
                s -= g.MathUtils.PI2;
              } else if (s < -g.MathUtils.PI) {
                s += g.MathUtils.PI2;
              }
              var E = Math.cos(s *= b);
              var K = Math.sin(s);
              t.a = E * x - K * A;
              t.b = E * y - K * C;
              t.c = K * x + E * A;
              t.d = K * y + E * C;
              v = true;
            }
            if (j != 0) {
              var L = this.temp;
              k.localToWorld(L.set(this.data.offsetX, this.data.offsetY));
              t.worldX += L.x * j;
              t.worldY += L.y * j;
              v = true;
            }
            if (e > 0) {
              var M = (Math.sqrt(m * m + a * a) - 1 + this.data.offsetScaleX) * e + 1;
              t.a *= M;
              t.c *= M;
              M = (Math.sqrt(n * n + o * o) - 1 + this.data.offsetScaleY) * e + 1;
              t.b *= M;
              t.d *= M;
              v = true;
            }
            if (i > 0) {
              if ((s = Math.atan2(o, n) - Math.atan2(a, m)) > g.MathUtils.PI) {
                s -= g.MathUtils.PI2;
              } else if (s < -g.MathUtils.PI) {
                s += g.MathUtils.PI2;
              }
              y = t.b;
              C = t.d;
              s = Math.atan2(C, y) + (s - g.MathUtils.PI / 2 + h) * i;
              M = Math.sqrt(y * y + C * C);
              t.b = Math.cos(s) * M;
              t.d = Math.sin(s) * M;
              v = true;
            }
            if (v) {
              t.appliedValid = false;
            }
          }
        };
        b.prototype.applyAbsoluteLocal = function () {
          var a = this.rotateMix;
          var b = this.translateMix;
          var c = this.scaleMix;
          var d = this.shearMix;
          var e = this.target;
          if (!e.appliedValid) {
            e.updateAppliedTransform();
          }
          for (var f = this.bones, g = 0, h = f.length; g < h; g++) {
            var i = f[g];
            if (!i.appliedValid) {
              i.updateAppliedTransform();
            }
            var j = i.arotation;
            if (a != 0) {
              var k = e.arotation - j + this.data.offsetRotation;
              j += (k -= (16384 - (16384.499999999996 - k / 360 | 0)) * 360) * a;
            }
            var l = i.ax;
            var n = i.ay;
            if (b != 0) {
              l += (e.ax - l + this.data.offsetX) * b;
              n += (e.ay - n + this.data.offsetY) * b;
            }
            var p = i.ascaleX;
            var u = i.ascaleY;
            if (c != 0) {
              if (p > 0.00001) {
                p = (p + (e.ascaleX - p + this.data.offsetScaleX) * c) / p;
              }
              if (u > 0.00001) {
                u = (u + (e.ascaleY - u + this.data.offsetScaleY) * c) / u;
              }
            }
            var y = i.ashearY;
            if (d != 0) {
              k = e.ashearY - y + this.data.offsetShearY;
              k -= (16384 - (16384.499999999996 - k / 360 | 0)) * 360;
              i.shearY += k * d;
            }
            i.updateWorldTransformWith(l, n, j, p, u, i.ashearX, y);
          }
        };
        b.prototype.applyRelativeLocal = function () {
          var a = this.rotateMix;
          var b = this.translateMix;
          var c = this.scaleMix;
          var d = this.shearMix;
          var e = this.target;
          if (!e.appliedValid) {
            e.updateAppliedTransform();
          }
          for (var f = this.bones, g = 0, h = f.length; g < h; g++) {
            var i = f[g];
            if (!i.appliedValid) {
              i.updateAppliedTransform();
            }
            var j = i.arotation;
            if (a != 0) {
              j += (e.arotation + this.data.offsetRotation) * a;
            }
            var k = i.ax;
            var l = i.ay;
            if (b != 0) {
              k += (e.ax + this.data.offsetX) * b;
              l += (e.ay + this.data.offsetY) * b;
            }
            var n = i.ascaleX;
            var u = i.ascaleY;
            if (c != 0) {
              if (n > 0.00001) {
                n *= (e.ascaleX - 1 + this.data.offsetScaleX) * c + 1;
              }
              if (u > 0.00001) {
                u *= (e.ascaleY - 1 + this.data.offsetScaleY) * c + 1;
              }
            }
            var w = i.ashearY;
            if (d != 0) {
              w += (e.ashearY + this.data.offsetShearY) * d;
            }
            i.updateWorldTransformWith(k, l, j, n, u, i.ashearX, w);
          }
        };
        return b;
      }();
      g.TransformConstraint = b;
    })(i || (i = {}));
    (function (c) {
      var a = function (d) {
        function a(a) {
          var b = d.call(this, a, 0, false) || this;
          b.bones = [];
          b.rotateMix = 0;
          b.translateMix = 0;
          b.scaleMix = 0;
          b.shearMix = 0;
          b.offsetRotation = 0;
          b.offsetX = 0;
          b.offsetY = 0;
          b.offsetScaleX = 0;
          b.offsetScaleY = 0;
          b.offsetShearY = 0;
          b.relative = false;
          b.local = false;
          return b;
        }
        l(a, d);
        return a;
      }(c.ConstraintData);
      c.TransformConstraintData = a;
    })(i || (i = {}));
    (function (c) {
      var a = function () {
        function a() {
          this.convexPolygons = [];
          this.convexPolygonsIndices = [];
          this.indicesArray = [];
          this.isConcaveArray = [];
          this.triangles = [];
          this.polygonPool = new c.Pool(function () {
            return [];
          });
          this.polygonIndicesPool = new c.Pool(function () {
            return [];
          });
        }
        a.prototype.triangulate = function (b) {
          var d = b;
          var e = b.length >> 1;
          var f = this.indicesArray;
          f.length = 0;
          for (var g = 0; g < e; g++) {
            f[g] = g;
          }
          var h = this.isConcaveArray;
          h.length = 0;
          g = 0;
          for (var j = e; g < j; ++g) {
            h[g] = a.isConcave(g, e, d, f);
          }
          var k = this.triangles;
          for (k.length = 0; e > 3;) {
            var l = e - 1;
            g = 0;
            var m = 1;
            for (;;) {
              t: if (!h[g]) {
                for (var n = f[l] << 1, o = f[g] << 1, p = f[m] << 1, q = d[n], s = d[n + 1], t = d[o], u = d[o + 1], v = d[p], x = d[p + 1], y = (m + 1) % e; y != l; y = (y + 1) % e) {
                  if (h[y]) {
                    var A = f[y] << 1;
                    var C = d[A];
                    var E = d[A + 1];
                    if (a.positiveArea(v, x, q, s, C, E) && a.positiveArea(q, s, t, u, C, E) && a.positiveArea(t, u, v, x, C, E)) {
                      break t;
                    }
                  }
                }
                break;
              }
              if (m == 0) {
                do {
                  if (!h[g]) {
                    break;
                  }
                  g--;
                } while (g > 0);
                break;
              }
              l = g;
              g = m;
              m = (m + 1) % e;
            }
            k.push(f[(e + g - 1) % e]);
            k.push(f[g]);
            k.push(f[(g + 1) % e]);
            f.splice(g, 1);
            h.splice(g, 1);
            var R = (--e + g - 1) % e;
            var S = g == e ? 0 : g;
            h[R] = a.isConcave(R, e, d, f);
            h[S] = a.isConcave(S, e, d, f);
          }
          if (e == 3) {
            k.push(f[2]);
            k.push(f[0]);
            k.push(f[1]);
          }
          return k;
        };
        a.prototype.decompose = function (b, c) {
          var d = b;
          var e = this.convexPolygons;
          this.polygonPool.freeAll(e);
          e.length = 0;
          var f = this.convexPolygonsIndices;
          this.polygonIndicesPool.freeAll(f);
          f.length = 0;
          var g = this.polygonIndicesPool.obtain();
          g.length = 0;
          var h = this.polygonPool.obtain();
          h.length = 0;
          for (var i = -1, j = 0, k = 0, l = c.length; k < l; k += 3) {
            var m = c[k] << 1;
            var n = c[k + 1] << 1;
            var o = c[k + 2] << 1;
            var p = d[m];
            var q = d[m + 1];
            var r = d[n];
            var u = d[n + 1];
            var v = d[o];
            var w = d[o + 1];
            var x = false;
            if (i == m) {
              var y = h.length - 4;
              var z = a.winding(h[y], h[y + 1], h[y + 2], h[y + 3], v, w);
              var A = a.winding(v, w, h[0], h[1], h[2], h[3]);
              if (z == j && A == j) {
                h.push(v);
                h.push(w);
                g.push(o);
                x = true;
              }
            }
            if (!x) {
              if (h.length > 0) {
                e.push(h);
                f.push(g);
              } else {
                this.polygonPool.free(h);
                this.polygonIndicesPool.free(g);
              }
              (h = this.polygonPool.obtain()).length = 0;
              h.push(p);
              h.push(q);
              h.push(r);
              h.push(u);
              h.push(v);
              h.push(w);
              (g = this.polygonIndicesPool.obtain()).length = 0;
              g.push(m);
              g.push(n);
              g.push(o);
              j = a.winding(p, q, r, u, v, w);
              i = m;
            }
          }
          if (h.length > 0) {
            e.push(h);
            f.push(g);
          }
          k = 0;
          l = e.length;
          for (; k < l; k++) {
            if ((g = f[k]).length != 0) {
              for (var B = g[0], C = g[g.length - 1], D = (h = e[k])[y = h.length - 4], E = h[y + 1], F = h[y + 2], I = h[y + 3], L = h[0], M = h[1], N = h[2], O = h[3], P = a.winding(D, E, F, I, L, M), R = 0; R < l; R++) {
                if (R != k) {
                  var S = f[R];
                  if (S.length == 3) {
                    var T = S[0];
                    var U = S[1];
                    var V = S[2];
                    var _ = e[R];
                    v = _[_.length - 2];
                    w = _[_.length - 1];
                    if (T == B && U == C) {
                      z = a.winding(D, E, F, I, v, w);
                      A = a.winding(v, w, L, M, N, O);
                      if (z == P && A == P) {
                        _.length = 0;
                        S.length = 0;
                        h.push(v);
                        h.push(w);
                        g.push(V);
                        D = F;
                        E = I;
                        F = v;
                        I = w;
                        R = 0;
                      }
                    }
                  }
                }
              }
            }
          }
          for (k = e.length - 1; k >= 0; k--) {
            if ((h = e[k]).length == 0) {
              e.splice(k, 1);
              this.polygonPool.free(h);
              g = f[k];
              f.splice(k, 1);
              this.polygonIndicesPool.free(g);
            }
          }
          return e;
        };
        a.isConcave = function (a, b, c, d) {
          var e = d[(b + a - 1) % b] << 1;
          var f = d[a] << 1;
          var g = d[(a + 1) % b] << 1;
          return !this.positiveArea(c[e], c[e + 1], c[f], c[f + 1], c[g], c[g + 1]);
        };
        a.positiveArea = function (g, a, b, c, d, e) {
          return g * (e - c) + b * (a - e) + d * (c - a) >= 0;
        };
        a.winding = function (i, b, c, d, e, f) {
          var g = c - i;
          var h = d - b;
          if (e * h - f * g + g * b - i * h >= 0) {
            return 1;
          } else {
            return -1;
          }
        };
        return a;
      }();
      c.Triangulator = a;
    })(i || (i = {}));
    (function (d) {
      var b = function () {
        function b() {
          this.array = [];
        }
        b.prototype.add = function (c) {
          var a = this.contains(c);
          this.array[c | 0] = c | 0;
          return !a;
        };
        b.prototype.contains = function (b) {
          return this.array[b | 0] != null;
        };
        b.prototype.remove = function (b) {
          this.array[b | 0] = undefined;
        };
        b.prototype.clear = function () {
          this.array.length = 0;
        };
        return b;
      }();
      d.IntSet = b;
      var f = function () {
        function b(e, f, g, h) {
          if (e === undefined) {
            e = 0;
          }
          if (f === undefined) {
            f = 0;
          }
          if (g === undefined) {
            g = 0;
          }
          if (h === undefined) {
            h = 0;
          }
          this.r = e;
          this.g = f;
          this.b = g;
          this.a = h;
        }
        b.prototype.set = function (e, a, b, c) {
          this.r = e;
          this.g = a;
          this.b = b;
          this.a = c;
          this.clamp();
          return this;
        };
        b.prototype.setFromColor = function (b) {
          this.r = b.r;
          this.g = b.g;
          this.b = b.b;
          this.a = b.a;
          return this;
        };
        b.prototype.setFromString = function (b) {
          b = b.charAt(0) == "#" ? b.substr(1) : b;
          this.r = parseInt(b.substr(0, 2), 16) / 255;
          this.g = parseInt(b.substr(2, 2), 16) / 255;
          this.b = parseInt(b.substr(4, 2), 16) / 255;
          this.a = (b.length != 8 ? 255 : parseInt(b.substr(6, 2), 16)) / 255;
          return this;
        };
        b.prototype.add = function (e, a, b, c) {
          this.r += e;
          this.g += a;
          this.b += b;
          this.a += c;
          this.clamp();
          return this;
        };
        b.prototype.clamp = function () {
          if (this.r < 0) {
            this.r = 0;
          } else if (this.r > 1) {
            this.r = 1;
          }
          if (this.g < 0) {
            this.g = 0;
          } else if (this.g > 1) {
            this.g = 1;
          }
          if (this.b < 0) {
            this.b = 0;
          } else if (this.b > 1) {
            this.b = 1;
          }
          if (this.a < 0) {
            this.a = 0;
          } else if (this.a > 1) {
            this.a = 1;
          }
          return this;
        };
        b.rgba8888ToColor = function (c, a) {
          c.r = ((a & 4278190080) >>> 24) / 255;
          c.g = ((a & 16711680) >>> 16) / 255;
          c.b = ((a & 65280) >>> 8) / 255;
          c.a = (a & 255) / 255;
        };
        b.rgb888ToColor = function (c, a) {
          c.r = ((a & 16711680) >>> 16) / 255;
          c.g = ((a & 65280) >>> 8) / 255;
          c.b = (a & 255) / 255;
        };
        b.WHITE = new b(1, 1, 1, 1);
        b.RED = new b(1, 0, 0, 1);
        b.GREEN = new b(0, 1, 0, 1);
        b.BLUE = new b(0, 0, 1, 1);
        b.MAGENTA = new b(1, 0, 1, 1);
        return b;
      }();
      d.Color = f;
      var e = function () {
        function d() {}
        d.clamp = function (d, a, b) {
          if (d < a) {
            return a;
          } else if (d > b) {
            return b;
          } else {
            return d;
          }
        };
        d.cosDeg = function (a) {
          return Math.cos(a * d.degRad);
        };
        d.sinDeg = function (a) {
          return Math.sin(a * d.degRad);
        };
        d.signum = function (b) {
          if (b > 0) {
            return 1;
          } else if (b < 0) {
            return -1;
          } else {
            return 0;
          }
        };
        d.toInt = function (b) {
          if (b > 0) {
            return Math.floor(b);
          } else {
            return Math.ceil(b);
          }
        };
        d.cbrt = function (c) {
          var a = Math.pow(Math.abs(c), 1 / 3);
          if (c < 0) {
            return -a;
          } else {
            return a;
          }
        };
        d.randomTriangular = function (a, b) {
          return d.randomTriangularWith(a, b, (a + b) * 0.5);
        };
        d.randomTriangularWith = function (f, a, b) {
          var c = Math.random();
          var d = a - f;
          if (c <= (b - f) / d) {
            return f + Math.sqrt(c * d * (b - f));
          } else {
            return a - Math.sqrt((1 - c) * d * (a - b));
          }
        };
        d.PI = 3.1415927;
        d.PI2 = d.PI * 2;
        d.radiansToDegrees = 180 / d.PI;
        d.radDeg = d.radiansToDegrees;
        d.degreesToRadians = d.PI / 180;
        d.degRad = d.degreesToRadians;
        return d;
      }();
      d.MathUtils = e;
      var g = function () {
        function b() {}
        b.prototype.apply = function (d, a, b) {
          return d + (a - d) * this.applyInternal(b);
        };
        return b;
      }();
      d.Interpolation = g;
      var i = function (d) {
        function a(a) {
          var b = d.call(this) || this;
          b.power = 2;
          b.power = a;
          return b;
        }
        l(a, d);
        a.prototype.applyInternal = function (b) {
          if (b <= 0.5) {
            return Math.pow(b * 2, this.power) / 2;
          } else {
            return Math.pow((b - 1) * 2, this.power) / (this.power % 2 == 0 ? -2 : 2) + 1;
          }
        };
        return a;
      }(g);
      d.Pow = i;
      var j = function (c) {
        function a(a) {
          return c.call(this, a) || this;
        }
        l(a, c);
        a.prototype.applyInternal = function (b) {
          return Math.pow(b - 1, this.power) * (this.power % 2 == 0 ? -1 : 1) + 1;
        };
        return a;
      }(i);
      d.PowOut = j;
      var a = function () {
        function e() {}
        e.arrayCopy = function (a, b, c, d, e) {
          for (var f = b, i = d; f < b + e; f++, i++) {
            c[i] = a[f];
          }
        };
        e.setArraySize = function (f, a, b) {
          if (b === undefined) {
            b = 0;
          }
          var g = f.length;
          if (g == a) {
            return f;
          }
          f.length = a;
          if (g < a) {
            for (var d = g; d < a; d++) {
              f[d] = b;
            }
          }
          return f;
        };
        e.ensureArrayCapacity = function (a, b, c) {
          if (c === undefined) {
            c = 0;
          }
          if (a.length >= b) {
            return a;
          } else {
            return e.setArraySize(a, b, c);
          }
        };
        e.newArray = function (e, a) {
          for (var b = Array(e), c = 0; c < e; c++) {
            b[c] = a;
          }
          return b;
        };
        e.newFloatArray = function (a) {
          if (e.SUPPORTS_TYPED_ARRAYS) {
            return new Float32Array(a);
          }
          for (var b = Array(a), c = 0; c < b.length; c++) {
            b[c] = 0;
          }
          return b;
        };
        e.newShortArray = function (a) {
          if (e.SUPPORTS_TYPED_ARRAYS) {
            return new Int16Array(a);
          }
          for (var b = Array(a), c = 0; c < b.length; c++) {
            b[c] = 0;
          }
          return b;
        };
        e.toFloatArray = function (a) {
          if (e.SUPPORTS_TYPED_ARRAYS) {
            return new Float32Array(a);
          } else {
            return a;
          }
        };
        e.toSinglePrecision = function (a) {
          if (e.SUPPORTS_TYPED_ARRAYS) {
            return Math.fround(a);
          } else {
            return a;
          }
        };
        e.webkit602BugfixHelper = function () {};
        e.contains = function (e, a, b) {
          if (b === undefined) {
            b = true;
          }
          for (var f = 0; f < e.length; f++) {
            if (e[f] == a) {
              return true;
            }
          }
          return false;
        };
        e.SUPPORTS_TYPED_ARRAYS = typeof Float32Array != "undefined";
        return e;
      }();
      d.Utils = a;
      var k = function () {
        function b() {}
        b.logBones = function (c) {
          for (var a = 0; a < c.bones.length; a++) {
            c.bones[a];
          }
        };
        return b;
      }();
      d.DebugUtils = k;
      var c = function () {
        function b(b) {
          this.items = [];
          this.instantiator = b;
        }
        b.prototype.obtain = function () {
          if (this.items.length > 0) {
            return this.items.pop();
          } else {
            return this.instantiator();
          }
        };
        b.prototype.free = function (b) {
          if (b.reset) {
            b.reset();
          }
          this.items.push(b);
        };
        b.prototype.freeAll = function (c) {
          for (var a = 0; a < c.length; a++) {
            if (c[a].reset) {
              c[a].reset();
            }
            this.items[a] = c[a];
          }
        };
        b.prototype.clear = function () {
          this.items.length = 0;
        };
        return b;
      }();
      d.Pool = c;
      var m = function () {
        function b(c, d) {
          if (c === undefined) {
            c = 0;
          }
          if (d === undefined) {
            d = 0;
          }
          this.x = c;
          this.y = d;
        }
        b.prototype.set = function (c, a) {
          this.x = c;
          this.y = a;
          return this;
        };
        b.prototype.length = function () {
          var c = this.x;
          var a = this.y;
          return Math.sqrt(c * c + a * a);
        };
        b.prototype.normalize = function () {
          var b = this.length();
          if (b != 0) {
            this.x /= b;
            this.y /= b;
          }
          return this;
        };
        return b;
      }();
      d.Vector2 = m;
      var h = function () {
        function b() {
          this.maxDelta = 0.064;
          this.framesPerSecond = 0;
          this.delta = 0;
          this.totalTime = 0;
          this.lastTime = Date.now() / 1000;
          this.frameCount = 0;
          this.frameTime = 0;
        }
        b.prototype.update = function () {
          var b = Date.now() / 1000;
          this.delta = b - this.lastTime;
          this.frameTime += this.delta;
          this.totalTime += this.delta;
          if (this.delta > this.maxDelta) {
            this.delta = this.maxDelta;
          }
          this.lastTime = b;
          this.frameCount++;
          if (this.frameTime > 1) {
            this.framesPerSecond = this.frameCount / this.frameTime;
            this.frameTime = 0;
            this.frameCount = 0;
          }
        };
        return b;
      }();
      d.TimeKeeper = h;
      var n = function () {
        function b(b) {
          if (b === undefined) {
            b = 32;
          }
          this.addedValues = 0;
          this.lastValue = 0;
          this.mean = 0;
          this.dirty = true;
          this.values = Array(b);
        }
        b.prototype.hasEnoughData = function () {
          return this.addedValues >= this.values.length;
        };
        b.prototype.addValue = function (b) {
          if (this.addedValues < this.values.length) {
            this.addedValues++;
          }
          this.values[this.lastValue++] = b;
          if (this.lastValue > this.values.length - 1) {
            this.lastValue = 0;
          }
          this.dirty = true;
        };
        b.prototype.getMean = function () {
          if (this.hasEnoughData()) {
            if (this.dirty) {
              for (var c = 0, d = 0; d < this.values.length; d++) {
                c += this.values[d];
              }
              this.mean = c / this.values.length;
              this.dirty = false;
            }
            return this.mean;
          }
          return 0;
        };
        return b;
      }();
      d.WindowedMean = n;
    })(i || (i = {}));
    if (!Math.fround) {
      b = new Float32Array(1);
      Math.fround = function (c) {
        b[0] = c;
        return b[0];
      };
    }
    (function (d) {
      function a(b) {
        if (b == null) {
          throw Error("name cannot be null.");
        }
        this.name = b;
      }
      d.Attachment = a;
      var b = function (e) {
        function b(c) {
          var a = e.call(this, c) || this;
          a.id = (b.nextID++ & 65535) << 11;
          a.worldVerticesLength = 0;
          a.deformAttachment = a;
          return a;
        }
        l(b, e);
        b.prototype.computeWorldVertices = function (c, f, g, h, i, j) {
          g = i + (g >> 1) * j;
          var k = c.bone.skeleton;
          var n = c.deform;
          var a = this.vertices;
          var p = this.bones;
          if (p != null) {
            for (var q = 0, r = 0, s = 0; s < f; s += 2) {
              q += (w = p[q]) + 1;
              r += w;
            }
            var t = k.bones;
            if (n.length == 0) {
              R = i;
              A = r * 3;
              R = i;
              A = r * 3;
              for (; R < g; R += j) {
                var u = 0;
                var v = 0;
                var w = p[q++];
                for (w += q; q < w; q++, A += 3) {
                  I = t[p[q]];
                  T = a[A];
                  U = a[A + 1];
                  var y = a[A + 2];
                  u += (T * I.a + U * I.b + I.worldX) * y;
                  v += (T * I.c + U * I.d + I.worldY) * y;
                }
                h[R] = u;
                h[R + 1] = v;
              }
            } else {
              for (var C = n, D = (R = i, A = r * 3, r << 1); R < g; R += j) {
                u = 0;
                v = 0;
                w = p[q++];
                w += q;
                for (; q < w; q++, A += 3, D += 2) {
                  I = t[p[q]];
                  T = a[A] + C[D];
                  U = a[A + 1] + C[D + 1];
                  y = a[A + 2];
                  u += (T * I.a + U * I.b + I.worldX) * y;
                  v += (T * I.c + U * I.d + I.worldY) * y;
                }
                h[R] = u;
                h[R + 1] = v;
              }
            }
          } else {
            if (n.length > 0) {
              a = n;
            }
            for (var I, J = (I = c.bone).worldX, L = I.worldY, E = I.a, A = I.b, M = I.c, N = I.d, b = f, R = i; R < g; b += 2, R += j) {
              var T = a[b];
              var U = a[b + 1];
              h[R] = T * E + U * A + J;
              h[R + 1] = T * M + U * N + L;
            }
          }
        };
        b.prototype.copyTo = function (a) {
          if (this.bones != null) {
            a.bones = Array(this.bones.length);
            d.Utils.arrayCopy(this.bones, 0, a.bones, 0, this.bones.length);
          } else {
            a.bones = null;
          }
          if (this.vertices != null) {
            a.vertices = d.Utils.newFloatArray(this.vertices.length);
            d.Utils.arrayCopy(this.vertices, 0, a.vertices, 0, this.vertices.length);
          } else {
            a.vertices = null;
          }
          a.worldVerticesLength = this.worldVerticesLength;
          a.deformAttachment = this.deformAttachment;
        };
        b.nextID = 0;
        return b;
      }(a);
      d.VertexAttachment = b;
    })(i || (i = {}));
    (function (b) {
      (function (b) {
        b[b.Region = 0] = "Region";
        b[b.BoundingBox = 1] = "BoundingBox";
        b[b.Mesh = 2] = "Mesh";
        b[b.LinkedMesh = 3] = "LinkedMesh";
        b[b.Path = 4] = "Path";
        b[b.Point = 5] = "Point";
        b[b.Clipping = 6] = "Clipping";
      })(b.AttachmentType || (b.AttachmentType = {}));
    })(i || (i = {}));
    (function (e) {
      var a = function (a) {
        function b(b) {
          var c = a.call(this, b) || this;
          c.color = new e.Color(1, 1, 1, 1);
          return c;
        }
        l(b, a);
        b.prototype.copy = function () {
          var c = new b(name);
          this.copyTo(c);
          c.color.setFromColor(this.color);
          return c;
        };
        return b;
      }(e.VertexAttachment);
      e.BoundingBoxAttachment = a;
    })(i || (i = {}));
    (function (e) {
      var a = function (a) {
        function b(b) {
          var c = a.call(this, b) || this;
          c.color = new e.Color(0.2275, 0.2275, 0.8078, 1);
          return c;
        }
        l(b, a);
        b.prototype.copy = function () {
          var c = new b(name);
          this.copyTo(c);
          c.endSlot = this.endSlot;
          c.color.setFromColor(this.color);
          return c;
        };
        return b;
      }(e.VertexAttachment);
      e.ClippingAttachment = a;
    })(i || (i = {}));
    (function (n) {
      var b = function (b) {
        function d(a) {
          var c = b.call(this, a) || this;
          c.color = new n.Color(1, 1, 1, 1);
          c.tempColor = new n.Color(0, 0, 0, 0);
          return c;
        }
        l(d, b);
        d.prototype.updateUVs = function () {
          var a = this.regionUVs;
          if (!(this.uvs != null && this.uvs.length == a.length)) {
            this.uvs = n.Utils.newFloatArray(a.length);
          }
          var b = this.uvs;
          var d = this.uvs.length;
          var e = this.region.u;
          var f = this.region.v;
          var o = 0;
          var p = 0;
          if (this.region instanceof n.TextureAtlasRegion) {
            var q = this.region;
            var m = q.texture.getImage().width;
            var c = q.texture.getImage().height;
            switch (q.degrees) {
              case 90:
                e -= (q.originalHeight - q.offsetY - q.height) / m;
                f -= (q.originalWidth - q.offsetX - q.width) / c;
                o = q.originalHeight / m;
                p = q.originalWidth / c;
                for (var l = 0; l < d; l += 2) {
                  b[l] = e + a[l + 1] * o;
                  b[l + 1] = f + (1 - a[l]) * p;
                }
                return;
              case 180:
                e -= (q.originalWidth - q.offsetX - q.width) / m;
                f -= q.offsetY / c;
                o = q.originalWidth / m;
                p = q.originalHeight / c;
                l = 0;
                for (; l < d; l += 2) {
                  b[l] = e + (1 - a[l]) * o;
                  b[l + 1] = f + (1 - a[l + 1]) * p;
                }
                return;
              case 270:
                e -= q.offsetY / m;
                f -= q.offsetX / c;
                o = q.originalHeight / m;
                p = q.originalWidth / c;
                l = 0;
                for (; l < d; l += 2) {
                  b[l] = e + (1 - a[l + 1]) * o;
                  b[l + 1] = f + a[l] * p;
                }
                return;
            }
            e -= q.offsetX / m;
            f -= (q.originalHeight - q.offsetY - q.height) / c;
            o = q.originalWidth / m;
            p = q.originalHeight / c;
          } else if (this.region == null) {
            e = f = 0;
            o = p = 1;
          } else {
            o = this.region.u2 - e;
            p = this.region.v2 - f;
          }
          for (l = 0; l < d; l += 2) {
            b[l] = e + a[l] * o;
            b[l + 1] = f + a[l + 1] * p;
          }
        };
        d.prototype.getParentMesh = function () {
          return this.parentMesh;
        };
        d.prototype.setParentMesh = function (b) {
          this.parentMesh = b;
          if (b != null) {
            this.bones = b.bones;
            this.vertices = b.vertices;
            this.worldVerticesLength = b.worldVerticesLength;
            this.regionUVs = b.regionUVs;
            this.triangles = b.triangles;
            this.hullLength = b.hullLength;
            this.worldVerticesLength = b.worldVerticesLength;
          }
        };
        d.prototype.copy = function () {
          if (this.parentMesh != null) {
            return this.newLinkedMesh();
          }
          var b = new d(this.name);
          b.region = this.region;
          b.path = this.path;
          b.color.setFromColor(this.color);
          this.copyTo(b);
          b.regionUVs = Array(this.regionUVs.length);
          n.Utils.arrayCopy(this.regionUVs, 0, b.regionUVs, 0, this.regionUVs.length);
          b.uvs = Array(this.uvs.length);
          n.Utils.arrayCopy(this.uvs, 0, b.uvs, 0, this.uvs.length);
          b.triangles = Array(this.triangles.length);
          n.Utils.arrayCopy(this.triangles, 0, b.triangles, 0, this.triangles.length);
          b.hullLength = this.hullLength;
          if (this.edges != null) {
            b.edges = Array(this.edges.length);
            n.Utils.arrayCopy(this.edges, 0, b.edges, 0, this.edges.length);
          }
          b.width = this.width;
          b.height = this.height;
          return b;
        };
        d.prototype.newLinkedMesh = function () {
          var b = new d(this.name);
          b.region = this.region;
          b.path = this.path;
          b.color.setFromColor(this.color);
          b.deformAttachment = this.deformAttachment;
          b.setParentMesh(this.parentMesh != null ? this.parentMesh : this);
          b.updateUVs();
          return b;
        };
        return d;
      }(n.VertexAttachment);
      n.MeshAttachment = b;
    })(i || (i = {}));
    (function (e) {
      var a = function (a) {
        function d(b) {
          var c = a.call(this, b) || this;
          c.closed = false;
          c.constantSpeed = false;
          c.color = new e.Color(1, 1, 1, 1);
          return c;
        }
        l(d, a);
        d.prototype.copy = function () {
          var a = new d(name);
          this.copyTo(a);
          a.lengths = Array(this.lengths.length);
          e.Utils.arrayCopy(this.lengths, 0, a.lengths, 0, this.lengths.length);
          a.closed = closed;
          a.constantSpeed = this.constantSpeed;
          a.color.setFromColor(this.color);
          return a;
        };
        return d;
      }(e.VertexAttachment);
      e.PathAttachment = a;
    })(i || (i = {}));
    (function (g) {
      var a = function (a) {
        function b(b) {
          var c = a.call(this, b) || this;
          c.color = new g.Color(0.38, 0.94, 0, 1);
          return c;
        }
        l(b, a);
        b.prototype.computeWorldPosition = function (c, a) {
          a.x = this.x * c.a + this.y * c.b + c.worldX;
          a.y = this.x * c.c + this.y * c.d + c.worldY;
          return a;
        };
        b.prototype.computeWorldRotation = function (a) {
          var b = g.MathUtils.cosDeg(this.rotation);
          var c = g.MathUtils.sinDeg(this.rotation);
          var d = b * a.a + c * a.b;
          var e = b * a.c + c * a.d;
          return Math.atan2(e, d) * g.MathUtils.radDeg;
        };
        b.prototype.copy = function () {
          var c = new b(name);
          c.x = this.x;
          c.y = this.y;
          c.rotation = this.rotation;
          c.color.setFromColor(this.color);
          return c;
        };
        return b;
      }(g.VertexAttachment);
      g.PointAttachment = a;
    })(i || (i = {}));
    (function (e) {
      var a = function (a) {
        function u(b) {
          var c = a.call(this, b) || this;
          c.x = 0;
          c.y = 0;
          c.scaleX = 1;
          c.scaleY = 1;
          c.rotation = 0;
          c.width = 0;
          c.height = 0;
          c.color = new e.Color(1, 1, 1, 1);
          c.offset = e.Utils.newFloatArray(8);
          c.uvs = e.Utils.newFloatArray(8);
          c.tempColor = new e.Color(1, 1, 1, 1);
          return c;
        }
        l(u, a);
        u.prototype.updateOffset = function () {
          var j = this.width / this.region.originalWidth * this.scaleX;
          var b = this.height / this.region.originalHeight * this.scaleY;
          var i = -this.width / 2 * this.scaleX + this.region.offsetX * j;
          var e = -this.height / 2 * this.scaleY + this.region.offsetY * b;
          var k = i + this.region.width * j;
          var m = e + this.region.height * b;
          var n = this.rotation * Math.PI / 180;
          var a = Math.cos(n);
          var o = Math.sin(n);
          var c = i * a + this.x;
          var l = i * o;
          var h = e * a + this.y;
          var q = e * o;
          var f = k * a + this.x;
          var d = k * o;
          var r = m * a + this.y;
          var p = m * o;
          var s = this.offset;
          s[u.OX1] = c - q;
          s[u.OY1] = h + l;
          s[u.OX2] = c - p;
          s[u.OY2] = r + l;
          s[u.OX3] = f - p;
          s[u.OY3] = r + d;
          s[u.OX4] = f - q;
          s[u.OY4] = h + d;
        };
        u.prototype.setRegion = function (c) {
          this.region = c;
          var a = this.uvs;
          if (c.rotate) {
            a[2] = c.u;
            a[3] = c.v2;
            a[4] = c.u;
            a[5] = c.v;
            a[6] = c.u2;
            a[7] = c.v;
            a[0] = c.u2;
            a[1] = c.v2;
          } else {
            a[0] = c.u;
            a[1] = c.v2;
            a[2] = c.u;
            a[3] = c.v;
            a[4] = c.u2;
            a[5] = c.v;
            a[6] = c.u2;
            a[7] = c.v2;
          }
        };
        u.prototype.computeWorldVertices = function (d, b, f, g) {
          var i = this.offset;
          var j = d.worldX;
          var k = d.worldY;
          var a = d.a;
          var m = d.b;
          var c = d.c;
          var l = d.d;
          var h = 0;
          var n = 0;
          h = i[u.OX1];
          n = i[u.OY1];
          b[f] = h * a + n * m + j;
          b[f + 1] = h * c + n * l + k;
          f += g;
          h = i[u.OX2];
          n = i[u.OY2];
          b[f] = h * a + n * m + j;
          b[f + 1] = h * c + n * l + k;
          f += g;
          h = i[u.OX3];
          n = i[u.OY3];
          b[f] = h * a + n * m + j;
          b[f + 1] = h * c + n * l + k;
          f += g;
          h = i[u.OX4];
          n = i[u.OY4];
          b[f] = h * a + n * m + j;
          b[f + 1] = h * c + n * l + k;
        };
        u.prototype.copy = function () {
          var a = new u(name);
          a.region = this.region;
          a.rendererObject = this.rendererObject;
          a.path = this.path;
          a.x = this.x;
          a.y = this.y;
          a.scaleX = this.scaleX;
          a.scaleY = this.scaleY;
          a.rotation = this.rotation;
          a.width = this.width;
          a.height = this.height;
          e.Utils.arrayCopy(this.uvs, 0, a.uvs, 0, 8);
          e.Utils.arrayCopy(this.offset, 0, a.offset, 0, 8);
          a.color.setFromColor(this.color);
          return a;
        };
        u.OX1 = 0;
        u.OY1 = 1;
        u.OX2 = 2;
        u.OY2 = 3;
        u.OX3 = 4;
        u.OY3 = 5;
        u.OX4 = 6;
        u.OY4 = 7;
        u.X1 = 0;
        u.Y1 = 1;
        u.C1R = 2;
        u.C1G = 3;
        u.C1B = 4;
        u.C1A = 5;
        u.U1 = 6;
        u.V1 = 7;
        u.X2 = 8;
        u.Y2 = 9;
        u.C2R = 10;
        u.C2G = 11;
        u.C2B = 12;
        u.C2A = 13;
        u.U2 = 14;
        u.V2 = 15;
        u.X3 = 16;
        u.Y3 = 17;
        u.C3R = 18;
        u.C3G = 19;
        u.C3B = 20;
        u.C3A = 21;
        u.U3 = 22;
        u.V3 = 23;
        u.X4 = 24;
        u.Y4 = 25;
        u.C4R = 26;
        u.C4G = 27;
        u.C4B = 28;
        u.C4A = 29;
        u.U4 = 30;
        u.V4 = 31;
        return u;
      }(e.Attachment);
      e.RegionAttachment = a;
    })(i || (i = {}));
    (function (c) {
      var a = function () {
        function a(c, a) {
          this.jitterX = 0;
          this.jitterY = 0;
          this.jitterX = c;
          this.jitterY = a;
        }
        a.prototype.begin = function () {};
        a.prototype.transform = function (a) {
          a.x += c.MathUtils.randomTriangular(-this.jitterX, this.jitterY);
          a.y += c.MathUtils.randomTriangular(-this.jitterX, this.jitterY);
        };
        a.prototype.end = function () {};
        return a;
      }();
      c.JitterEffect = a;
    })(i || (i = {}));
    (function (c) {
      var b = function () {
        function b(c, a) {
          this.centerX = 0;
          this.centerY = 0;
          this.radius = 0;
          this.angle = 0;
          this.worldX = 0;
          this.worldY = 0;
          this.radius = c;
          this.interpolation = a;
        }
        b.prototype.begin = function (b) {
          this.worldX = b.x + this.centerX;
          this.worldY = b.y + this.centerY;
        };
        b.prototype.transform = function (b) {
          var d = this.angle * c.MathUtils.degreesToRadians;
          var e = b.x - this.worldX;
          var f = b.y - this.worldY;
          var g = Math.sqrt(e * e + f * f);
          if (g < this.radius) {
            var h = this.interpolation.apply(0, d, (this.radius - g) / this.radius);
            var i = Math.cos(h);
            var a = Math.sin(h);
            b.x = i * e - a * f + this.worldX;
            b.y = a * e + i * f + this.worldY;
          }
        };
        b.prototype.end = function () {};
        b.interpolation = new c.PowOut(2);
        return b;
      }();
      c.SwirlEffect = b;
    })(i || (i = {}));
    a.exports = i;
  }, {}],
  322: [function (a, d) {
    "use strict";

    var m;
    var x;
    var y;
    var A;
    var C;
    var E;
    var i = a("./track-entry-listeners");
    var k = a("./lib/spine");
    var f = [];
    var c = [];
    var e = 0;
    var v = 0;
    var H = 0;
    var J = null;
    var S = null;
    var w = 0;
    var T = 0;
    var X = 0;
    var Z = 0;
    var $ = null;
    var _ = null;
    var aa = 0;
    var ba = 0;
    var ca = new k.Color(1, 1, 1, 1);
    var W = new k.Color(1, 1, 1, 1);
    var b = [0, 1, 2, 2, 3, 0];
    var g = cc.Class({
      ctor: function () {
        this._privateMode = false;
        this._inited = false;
        this._invalid = true;
        this._enableCacheAttachedInfo = false;
        this.frames = [];
        this.totalTime = 0;
        this._frameIdx = -1;
        this.isCompleted = false;
        this._skeletonInfo = null;
        this._animationName = null;
        this._tempSegments = null;
        this._tempColors = null;
        this._tempBoneInfos = null;
      },
      init: function (c, a) {
        this._inited = true;
        this._animationName = a;
        this._skeletonInfo = c;
      },
      clear: function () {
        this._inited = false;
        for (var c = 0, d = this.frames.length; c < d; c++) {
          this.frames[c].segments.length = 0;
        }
        this.invalidAllFrame();
      },
      bind: function (c) {
        var a = function (b) {
          if (b && b.animation.name === this._animationName) {
            this.isCompleted = true;
          }
        }.bind(this);
        c.complete = a;
      },
      unbind: function (b) {
        b.complete = null;
      },
      begin: function () {
        if (this._invalid) {
          var g = this._skeletonInfo;
          var a = g.curAnimationCache;
          if (a && a !== this) {
            if (this._privateMode) {
              a.invalidAllFrame();
            } else {
              a.updateToFrame();
            }
          }
          var b = g.skeleton;
          var c = g.listener;
          var d = g.state;
          var e = b.data.findAnimation(this._animationName);
          d.setAnimationWith(0, e, false);
          this.bind(c);
          g.curAnimationCache = this;
          this._frameIdx = -1;
          this.isCompleted = false;
          this.totalTime = 0;
          this._invalid = false;
        }
      },
      end: function () {
        if (!this._needToUpdate()) {
          this._skeletonInfo.curAnimationCache = null;
          this.frames.length = this._frameIdx + 1;
          this.isCompleted = true;
          this.unbind(this._skeletonInfo.listener);
        }
      },
      _needToUpdate: function (b) {
        return !this.isCompleted && this.totalTime < 30 && (b == null || this._frameIdx < b);
      },
      updateToFrame: function (f) {
        if (this._inited && (this.begin(), this._needToUpdate(f))) {
          var a = this._skeletonInfo;
          var b = a.skeleton;
          var c = a.clipper;
          var d = a.state;
          do {
            b.update(1 / 60);
            d.update(1 / 60);
            d.apply(b);
            b.updateWorldTransform();
            this._frameIdx++;
            this._updateFrame(b, c, this._frameIdx);
            this.totalTime += 1 / 60;
          } while (this._needToUpdate(f));
          this.end();
        }
      },
      isInited: function () {
        return this._inited;
      },
      isInvalid: function () {
        return this._invalid;
      },
      invalidAllFrame: function () {
        this.isCompleted = false;
        this._invalid = true;
      },
      updateAllFrame: function () {
        this.invalidAllFrame();
        this.updateToFrame();
      },
      enableCacheAttachedInfo: function () {
        if (!this._enableCacheAttachedInfo) {
          this._enableCacheAttachedInfo = true;
          this.invalidAllFrame();
        }
      },
      _updateFrame: function (b, d, h) {
        H = 0;
        e = 0;
        v = 0;
        J = null;
        S = null;
        w = 0;
        T = 0;
        X = 0;
        Z = 0;
        $ = null;
        _ = null;
        this.frames[h] = this.frames[h] || {
          segments: [],
          colors: [],
          boneInfos: [],
          vertices: null,
          uintVert: null,
          indices: null
        };
        var g = this.frames[h];
        var i = this._tempSegments = g.segments;
        var j = this._tempColors = g.colors;
        var k = this._tempBoneInfos = g.boneInfos;
        this._traverseSkeleton(b, d);
        if (Z > 0) {
          j[Z - 1].vfOffset = H;
        }
        j.length = Z;
        k.length = e;
        var l = X - 1;
        if (l >= 0) {
          if (T > 0) {
            var a = i[l];
            a.indexCount = T;
            a.vfCount = w * 6;
            a.vertexCount = w;
            i.length = X;
          } else {
            i.length = X - 1;
          }
        }
        if (i.length != 0) {
          var m = g.vertices;
          var n = g.uintVert;
          if (!m || m.length < H) {
            m = g.vertices = new Float32Array(H);
            n = g.uintVert = new Uint32Array(m.buffer);
          }
          for (var u = 0, x = 0; u < H;) {
            m[u++] = f[x++];
            m[u++] = f[x++];
            m[u++] = f[x++];
            m[u++] = f[x++];
            n[u++] = f[x++];
            n[u++] = f[x++];
          }
          var y = g.indices;
          if (!y || y.length < v) {
            y = g.indices = new Uint16Array(v);
          }
          for (var z = 0; z < v; z++) {
            y[z] = c[z];
          }
          g.vertices = m;
          g.uintVert = n;
          g.indices = y;
        }
      },
      fillVertices: function (b, a, d, e, h) {
        A = d.a * a.a * b.a * 255;
        m = a.r * b.r * 255;
        x = a.g * b.g * 255;
        y = a.b * b.b * 255;
        ca.r = m * d.r;
        ca.g = x * d.g;
        ca.b = y * d.b;
        ca.a = A;
        if (h.darkColor == null) {
          W.set(0, 0, 0, 1);
        } else {
          W.r = h.darkColor.r * m;
          W.g = h.darkColor.g * x;
          W.b = h.darkColor.b * y;
        }
        W.a = 0;
        C = (ca.a << 24 >>> 0) + (ca.b << 16) + (ca.g << 8) + ca.r;
        E = (W.a << 24 >>> 0) + (W.b << 16) + (W.g << 8) + W.r;
        if ($ !== C || _ !== E) {
          var i = this._tempColors;
          $ = C;
          _ = E;
          if (Z > 0) {
            i[Z - 1].vfOffset = H;
          }
          i[Z++] = {
            fr: ca.r,
            fg: ca.g,
            fb: ca.b,
            fa: ca.a,
            dr: W.r,
            dg: W.g,
            db: W.b,
            da: W.a,
            vfOffset: 0
          };
        }
        if (e.isClipping()) {
          e.clipTriangles(f, aa, c, ba, f, ca, W, true, 6, v, H, H + 2);
          var j = e.clippedVertices;
          var k = e.clippedTriangles;
          ba = k.length;
          aa = j.length / 12 * 6;
          for (var l = 0, q = v, t = k.length; l < t;) {
            c[q++] = k[l++];
          }
          for (var o = 0, u = j.length, r = H; o < u; o += 12, r += 6) {
            f[r] = j[o];
            f[r + 1] = j[o + 1];
            f[r + 2] = j[o + 6];
            f[r + 3] = j[o + 7];
            f[r + 4] = C;
            f[r + 5] = E;
          }
        } else {
          for (var z = H, B = H + aa; z < B; z += 6) {
            f[z + 4] = C;
            f[z + 5] = E;
          }
        }
      },
      _traverseSkeleton: function (a, d) {
        var h;
        var i;
        var l;
        var n;
        var o;
        var r;
        var s;
        var t;
        var u;
        var z;
        var A;
        var D;
        var E = this._tempSegments;
        var F = this._tempBoneInfos;
        var G = a.color;
        var I = a.bones;
        if (this._enableCacheAttachedInfo) {
          for (var K = 0, L = I.length; K < L; K++, e++) {
            var M = I[K];
            var N = F[e];
            if (!N) {
              N = F[e] = {};
            }
            N.a = M.a;
            N.b = M.b;
            N.c = M.c;
            N.d = M.d;
            N.worldX = M.worldX;
            N.worldY = M.worldY;
          }
        }
        for (var O = 0, P = a.drawOrder.length; O < P; O++) {
          if ((D = a.drawOrder[O]).bone.active) {
            aa = 0;
            ba = 0;
            if (h = D.getAttachment()) {
              r = h instanceof k.RegionAttachment;
              s = h instanceof k.MeshAttachment;
              if (h instanceof k.ClippingAttachment) {
                d.clipStart(D, h);
              } else if (r || s) {
                if (t = h.region.texture._texture) {
                  A = D.data.blendMode;
                  if (!(J === t.nativeUrl && S === A)) {
                    J = t.nativeUrl;
                    S = A;
                    if ((u = X - 1) >= 0) {
                      if (T > 0) {
                        (z = E[u]).indexCount = T;
                        z.vertexCount = w;
                        z.vfCount = w * 6;
                      } else {
                        X--;
                      }
                    }
                    E[X] = {
                      tex: t,
                      blendMode: A,
                      indexCount: 0,
                      vertexCount: 0,
                      vfCount: 0
                    };
                    X++;
                    T = 0;
                    w = 0;
                  }
                  if (r) {
                    o = b;
                    aa = 24;
                    ba = 6;
                    h.computeWorldVertices(D.bone, f, H, 6);
                  } else if (s) {
                    o = h.triangles;
                    aa = (h.worldVerticesLength >> 1) * 6;
                    ba = o.length;
                    h.computeWorldVertices(D, 0, h.worldVerticesLength, f, H, 6);
                  }
                  if (aa != 0 && ba != 0) {
                    for (var U = 0, V = v, W = o.length; U < W;) {
                      c[V++] = o[U++];
                    }
                    n = h.uvs;
                    for (var Y = H, $ = H + aa, _ = 0; Y < $; Y += 6, _ += 2) {
                      f[Y + 2] = n[_];
                      f[Y + 3] = n[_ + 1];
                    }
                    i = h.color;
                    l = D.color;
                    this.fillVertices(G, i, l, d, D);
                    if (ba > 0) {
                      for (var fa = v, na = v + ba; fa < na; fa++) {
                        c[fa] += w;
                      }
                      v += ba;
                      H += aa;
                      T += ba;
                      w += aa / 6;
                    }
                    d.clipEndWithSlot(D);
                  } else {
                    d.clipEndWithSlot(D);
                  }
                } else {
                  d.clipEndWithSlot(D);
                }
              } else {
                d.clipEndWithSlot(D);
              }
            } else {
              d.clipEndWithSlot(D);
            }
          }
        }
        d.clipEnd();
      }
    });
    var j = cc.Class({
      ctor: function () {
        this._privateMode = false;
        this._animationPool = {};
        this._skeletonCache = {};
      },
      enablePrivateMode: function () {
        this._privateMode = true;
      },
      clear: function () {
        this._animationPool = {};
        this._skeletonCache = {};
      },
      removeSkeleton: function (f) {
        var a = this._skeletonCache[f];
        if (a) {
          var b = a.animationsCache;
          for (var c in b) {
            var g = b[c];
            if (g) {
              this._animationPool[f + "#" + c] = g;
              g.clear();
            }
          }
          delete this._skeletonCache[f];
        }
      },
      getSkeletonCache: function (j, b) {
        var c = this._skeletonCache[j];
        if (!c) {
          var l = new k.Skeleton(b);
          var e = new k.SkeletonClipping();
          var f = new k.AnimationStateData(l.data);
          var g = new k.AnimationState(f);
          var h = new i();
          g.addListener(h);
          this._skeletonCache[j] = c = {
            skeleton: l,
            clipper: e,
            state: g,
            listener: h,
            animationsCache: {},
            curAnimationCache: null
          };
        }
        return c;
      },
      getAnimationCache: function (d, a) {
        var b = this._skeletonCache[d];
        if (b) {
          return b.animationsCache[a];
        } else {
          return null;
        }
      },
      invalidAnimationCache: function (e) {
        var a = this._skeletonCache[e];
        if (a && a.skeleton) {
          var b = a.animationsCache;
          for (var c in b) {
            b[c].invalidAllFrame();
          }
        }
      },
      initAnimationCache: function (a, b) {
        if (!b) {
          return null;
        }
        var c = this._skeletonCache[a];
        var d = c && c.skeleton;
        if (!d) {
          return null;
        }
        if (!d.data.findAnimation(b)) {
          return null;
        }
        var e = c.animationsCache;
        var f = e[b];
        if (!f) {
          var i = a + "#" + b;
          if (f = this._animationPool[i]) {
            delete this._animationPool[i];
          } else {
            (f = new g())._privateMode = this._privateMode;
          }
          f.init(c, b);
          e[b] = f;
        }
        return f;
      },
      updateAnimationCache: function (g, a) {
        if (a) {
          var b = this.initAnimationCache(g, a);
          if (!b) {
            return null;
          }
          b.updateAllFrame();
        } else {
          var c = this._skeletonCache[g];
          if (!c || !c.skeleton) {
            return;
          }
          var d = c.animationsCache;
          for (var e in d) {
            d[e].updateAllFrame();
          }
        }
      }
    });
    j.FrameTime = 1 / 60;
    j.sharedCache = new j();
    d.exports = j;
  }, {
    "./lib/spine": 321,
    "./track-entry-listeners": 326
  }],
  323: [function (e, a) {
    "use strict";

    var b = e("./skeleton-cache").sharedCache;
    var c = cc.Class({
      name: "sp.SkeletonData",
      extends: cc.Asset,
      ctor: function () {
        this.reset();
      },
      properties: {
        _skeletonJson: null,
        skeletonJsonStr: {
          get: function () {
            if (this._skeletonJson) {
              return JSON.stringify(this._skeletonJson);
            } else {
              return "";
            }
          }
        },
        skeletonJson: {
          get: function () {
            return this._skeletonJson;
          },
          set: function (b) {
            this.reset();
            this._skeletonJson = typeof b == "string" ? JSON.parse(b) : b;
            if (!this._uuid && b.skeleton) {
              this._uuid = b.skeleton.hash;
            }
          }
        },
        _atlasText: "",
        atlasText: {
          get: function () {
            return this._atlasText;
          },
          set: function (b) {
            this._atlasText = b;
            this.reset();
          }
        },
        atlas: {
          default: null,
          type: cc.TextAsset
        },
        textures: {
          default: [],
          type: [cc.Texture2D]
        },
        textureNames: {
          default: [],
          type: [cc.String]
        },
        scale: 1,
        _nativeAsset: {
          get: function () {
            return this._buffer;
          },
          set: function (b) {
            this._buffer = b.buffer || b;
            this.reset();
          },
          override: true
        }
      },
      statics: {
        preventDeferredLoadDependents: true
      },
      createNode: false,
      reset: function () {
        this._skeletonCache = null;
        this._atlasCache = null;
      },
      ensureTexturesLoaded: function (a, j) {
        var c = this.textures;
        var d = c.length;
        if (d != 0) {
          for (var e = 0, k = function () {
              if (++e >= d) {
                if (a) {
                  a.call(j, true);
                }
                a = null;
              }
            }, g = 0; g < d; g++) {
            var l = c[g];
            if (l.loaded) {
              k();
            } else {
              l.once("load", k);
            }
          }
        } else {
          a.call(j, false);
        }
      },
      isTexturesLoaded: function () {
        for (var d = this.textures, a = d.length, b = 0; b < a; b++) {
          if (!d[b].loaded) {
            return false;
          }
        }
        return true;
      },
      getRuntimeData: function (f) {
        if (this._skeletonCache) {
          return this._skeletonCache;
        }
        if (!(this.textures && this.textures.length > 0) && this.textureNames && this.textureNames.length > 0) {
          return null;
        }
        var a = this._getAtlas(f);
        if (!a) {
          return null;
        }
        var b = new sp.spine.AtlasAttachmentLoader(a);
        var c = null;
        var g = null;
        if (this.skeletonJson) {
          g = new sp.spine.SkeletonJson(b);
          c = this.skeletonJson;
        } else {
          g = new sp.spine.SkeletonBinary(b);
          c = new Uint8Array(this._nativeAsset);
        }
        g.scale = this.scale;
        this._skeletonCache = g.readSkeletonData(c);
        a.dispose();
        return this._skeletonCache;
      },
      getSkinsEnum: false,
      getAnimsEnum: false,
      _getTexture: function (f) {
        for (var a = this.textureNames, b = 0; b < a.length; b++) {
          if (a[b] === f) {
            var g = this.textures[b];
            var h = new sp.SkeletonTexture({
              width: g.width,
              height: g.height
            });
            h.setRealTexture(g);
            return h;
          }
        }
        return null;
      },
      _getAtlas: function () {
        if (this._atlasCache) {
          return this._atlasCache;
        }
        var b = this.atlasText;
        if (!b && this.atlas) {
          b = this.atlas.text;
        }
        if (b) {
          return this._atlasCache = new sp.spine.TextureAtlas(b, this._getTexture.bind(this));
        } else {
          return null;
        }
      },
      destroy: function () {
        b.removeSkeleton(this._uuid);
        this._super();
      }
    });
    sp.SkeletonData = a.exports = c;
  }, {
    "./skeleton-cache": 322
  }],
  324: [function () {
    "use strict";

    sp.SkeletonTexture = cc.Class({
      name: "sp.SkeletonTexture",
      extends: sp.spine.Texture,
      _texture: null,
      _material: null,
      setRealTexture: function (b) {
        this._texture = b;
      },
      getRealTexture: function () {
        return this._texture;
      },
      setFilters: function (c, a) {
        if (this._texture) {
          this._texture.setFilters(c, a);
        }
      },
      setWraps: function (c, a) {
        if (this._texture) {
          this._texture.setWrapMode(c, a);
        }
      },
      dispose: function () {}
    });
  }, {}],
  325: [function (a, c, d) {
    "use strict";

    d.__esModule = true;
    d.default = undefined;
    var e;
    var f = (e = a("../../cocos2d/core/renderer/assembler")) && e.__esModule ? e : {
      default: e
    };
    function g(c, a) {
      return (g = Object.setPrototypeOf || function (c, a) {
        c.__proto__ = a;
        return c;
      })(c, a);
    }
    var l;
    var s;
    var k;
    var m;
    var B;
    var n;
    var o;
    var p;
    var u;
    var E;
    var F;
    var G;
    var h;
    var j;
    var q;
    var I;
    var U;
    var t = a("./Skeleton");
    var v = a("./lib/spine");
    var y = a("../../cocos2d/core/renderer/render-flow");
    var x = a("../../cocos2d/core/renderer/webgl/vertex-format");
    var z = x.vfmtPosUvColor;
    var A = x.vfmtPosUvTwoColor;
    var b = cc.gfx;
    var C = 0;
    var H = [0, 1, 2, 2, 3, 0];
    var R = cc.color(0, 0, 255, 255);
    var M = cc.color(255, 0, 0, 255);
    var w = cc.color(0, 255, 0, 255);
    var J = cc.color(255, 255, 0, 255);
    var K = null;
    var L = null;
    var D = null;
    var O = null;
    K = new v.Color(1, 1, 1, 1);
    L = new v.Color(1, 1, 1, 1);
    D = new v.Vector2();
    O = new v.Vector2();
    var Q;
    var S;
    var T;
    var V;
    var ta;
    var W;
    var X;
    var ba;
    var ua;
    var Z;
    var kb;
    var lb;
    var $;
    var Y;
    var _;
    var aa;
    var mb;
    var nb;
    var ob;
    var pb;
    var qb;
    var rb;
    var sb;
    var tb;
    var ub;
    var vb;
    var wb;
    var xb;
    var yb;
    var zb = 0;
    var Ab = 0;
    var Bb = 0;
    var Cb = 0;
    var Db = 0;
    var Eb = 0;
    var Fb = 0;
    function Gb(i, a) {
      var k;
      var m;
      switch (a) {
        case v.BlendMode.Additive:
          k = l ? cc.macro.ONE : cc.macro.SRC_ALPHA;
          m = cc.macro.ONE;
          break;
        case v.BlendMode.Multiply:
          k = cc.macro.DST_COLOR;
          m = cc.macro.ONE_MINUS_SRC_ALPHA;
          break;
        case v.BlendMode.Screen:
          k = cc.macro.ONE;
          m = cc.macro.ONE_MINUS_SRC_COLOR;
          break;
        case v.BlendMode.Normal:
        default:
          k = l ? cc.macro.ONE : cc.macro.SRC_ALPHA;
          m = cc.macro.ONE_MINUS_SRC_ALPHA;
      }
      var n = !tb.enableBatch;
      var f = tb._materials[0];
      if (!f) {
        return null;
      }
      var g = i.getId() + k + m + B + n;
      var h = tb._materialCache;
      var j = h[g];
      if (!j) {
        if (h.baseMaterial) {
          j = cc.MaterialVariant.create(f);
        } else {
          j = f;
          h.baseMaterial = f;
        }
        j.define("CC_USE_MODEL", n);
        j.define("USE_TINT", B);
        j.setProperty("texture", i);
        j.setBlend(true, b.BLEND_FUNC_ADD, k, m, b.BLEND_FUNC_ADD, k, m);
        h[g] = j;
      }
      return j;
    }
    function gb(b) {
      pb = b.fa * G;
      Y = u * (s = l ? pb / 255 : 1);
      _ = E * s;
      aa = F * s;
      mb = b.fr * Y;
      nb = b.fg * _;
      ob = b.fb * aa;
      h = (pb << 24 >>> 0) + (ob << 16) + (nb << 8) + mb;
      qb = b.dr * Y;
      rb = b.dg * _;
      sb = b.db * aa;
      j = ((l ? 255 : 0) << 24 >>> 0) + (sb << 16) + (rb << 8) + qb;
    }
    function hb(b) {
      return (b.a << 24 >>> 0) + (b.b << 16) + (b.g << 8) + b.r;
    }
    var ib = function (e) {
      var a;
      var i;
      function r() {
        return e.apply(this, arguments) || this;
      }
      i = e;
      (a = r).prototype = Object.create(i.prototype);
      a.prototype.constructor = a;
      g(a, i);
      var d = r.prototype;
      d.updateRenderData = function (c) {
        if (!c.isAnimationCached()) {
          var a = c._skeleton;
          if (a) {
            a.updateWorldTransform();
          }
        }
      };
      d.fillVertices = function (b, a, c, e, g) {
        var i;
        var r = ub._vData;
        var w = ub._iData;
        var x = ub._uintVData;
        K.a = c.a * a.a * b.a * G * 255;
        s = l ? K.a : 255;
        Q = u * a.r * b.r * s;
        S = E * a.g * b.g * s;
        T = F * a.b * b.b * s;
        K.r = Q * c.r;
        K.g = S * c.g;
        K.b = T * c.b;
        if (g.darkColor == null) {
          L.set(0, 0, 0, 1);
        } else {
          L.r = g.darkColor.r * Q;
          L.g = g.darkColor.g * S;
          L.b = g.darkColor.b * T;
        }
        L.a = l ? 255 : 0;
        if (e.isClipping()) {
          var H = r.subarray(Bb + 2);
          e.clipTriangles(r.subarray(Bb), zb, w.subarray(Eb), Db, H, K, L, B, I);
          var o = new Float32Array(e.clippedVertices);
          var f = e.clippedTriangles;
          Db = f.length;
          zb = o.length / U * I;
          i = ub.request(zb / I, Db);
          Eb = i.indiceOffset;
          Cb = i.vertexOffset;
          Bb = i.byteOffset >> 2;
          r = ub._vData;
          w = ub._iData;
          x = ub._uintVData;
          w.set(f, Eb);
          if (yb) {
            for (var d = 0, J = o.length, q = Bb; d < J; d += U, q += I) {
              D.x = o[d];
              D.y = o[d + 1];
              K.set(o[d + 2], o[d + 3], o[d + 4], o[d + 5]);
              O.x = o[d + 6];
              O.y = o[d + 7];
              if (B) {
                L.set(o[d + 8], o[d + 9], o[d + 10], o[d + 11]);
              } else {
                L.set(0, 0, 0, 0);
              }
              yb.transform(D, O, K, L);
              r[q] = D.x;
              r[q + 1] = D.y;
              r[q + 2] = O.x;
              r[q + 3] = O.y;
              x[q + 4] = hb(K);
              if (B) {
                x[q + 5] = hb(L);
              }
            }
          } else {
            for (var M = 0, N = o.length, y = Bb; M < N; M += U, y += I) {
              r[y] = o[M];
              r[y + 1] = o[M + 1];
              r[y + 2] = o[M + 6];
              r[y + 3] = o[M + 7];
              h = (o[M + 5] << 24 >>> 0) + (o[M + 4] << 16) + (o[M + 3] << 8) + o[M + 2];
              x[y + 4] = h;
              if (B) {
                j = (o[M + 11] << 24 >>> 0) + (o[M + 10] << 16) + (o[M + 9] << 8) + o[M + 8];
                x[y + 5] = j;
              }
            }
          }
        } else if (yb) {
          for (var P = Bb, R = Bb + zb; P < R; P += I) {
            D.x = r[P];
            D.y = r[P + 1];
            O.x = r[P + 2];
            O.y = r[P + 3];
            yb.transform(D, O, K, L);
            r[P] = D.x;
            r[P + 1] = D.y;
            r[P + 2] = O.x;
            r[P + 3] = O.y;
            x[P + 4] = hb(K);
            if (B) {
              x[P + 5] = hb(L);
            }
          }
        } else {
          h = hb(K);
          j = hb(L);
          for (var V = Bb, W = Bb + zb; V < W; V += I) {
            x[V + 4] = h;
            if (B) {
              x[V + 5] = j;
            }
          }
        }
      };
      d.realTimeTraverse = function (a) {
        var c;
        var e;
        var g;
        var i;
        var r;
        var s;
        var z;
        var D;
        var F;
        var G;
        var L;
        var O;
        var S = tb._skeleton;
        var _ = S.color;
        var y = tb._debugRenderer;
        var K = tb._clipper;
        var x = null;
        k = tb._startSlotIndex;
        m = tb._endSlotIndex;
        V = false;
        if (k == -1) {
          V = true;
        }
        n = tb.debugSlots;
        o = tb.debugBones;
        p = tb.debugMesh;
        if (y && (o || n || p)) {
          y.clear();
          y.lineWidth = 2;
        }
        U = B ? 12 : 8;
        zb = 0;
        Bb = 0;
        Cb = 0;
        Db = 0;
        Eb = 0;
        for (var fa = 0, ga = S.drawOrder.length; fa < ga; fa++) {
          if ((L = S.drawOrder[fa]) != null && L.bone.active) {
            if (k >= 0 && k == L.data.index) {
              V = true;
            }
            if (V) {
              if (m >= 0 && m == L.data.index) {
                V = false;
              }
              zb = 0;
              Db = 0;
              if (g = L.getAttachment()) {
                D = g instanceof v.RegionAttachment;
                F = g instanceof v.MeshAttachment;
                if (g instanceof v.ClippingAttachment) {
                  K.clipStart(L, g);
                } else if (D || F) {
                  if (x = Gb(g.region.texture._texture, L.data.blendMode)) {
                    if (ta || x.getHash() !== vb.material.getHash()) {
                      ta = false;
                      vb._flush();
                      vb.node = wb;
                      vb.material = x;
                    }
                    if (D) {
                      z = H;
                      zb = I * 4;
                      Db = 6;
                      G = ub.request(4, 6);
                      Eb = G.indiceOffset;
                      Cb = G.vertexOffset;
                      Bb = G.byteOffset >> 2;
                      c = ub._vData;
                      e = ub._iData;
                      g.computeWorldVertices(L.bone, c, Bb, I);
                      if (y && n) {
                        y.strokeColor = R;
                        y.moveTo(c[Bb], c[Bb + 1]);
                        for (var P = Bb + I, ha = Bb + zb; P < ha; P += I) {
                          y.lineTo(c[P], c[P + 1]);
                        }
                        y.close();
                        y.stroke();
                      }
                    } else if (F && (z = g.triangles, zb = (g.worldVerticesLength >> 1) * I, Db = z.length, G = ub.request(zb / I, Db), Eb = G.indiceOffset, Cb = G.vertexOffset, Bb = G.byteOffset >> 2, c = ub._vData, e = ub._iData, g.computeWorldVertices(L, 0, g.worldVerticesLength, c, Bb, I), y && p)) {
                      y.strokeColor = J;
                      for (var ia = 0, ja = z.length; ia < ja; ia += 3) {
                        var ka = z[ia] * I + Bb;
                        var ra = z[ia + 1] * I + Bb;
                        var sa = z[ia + 2] * I + Bb;
                        y.moveTo(c[ka], c[ka + 1]);
                        y.lineTo(c[ra], c[ra + 1]);
                        y.lineTo(c[sa], c[sa + 1]);
                        y.close();
                        y.stroke();
                      }
                    }
                    if (zb != 0 && Db != 0) {
                      e.set(z, Eb);
                      s = g.uvs;
                      for (var va = Bb, wa = Bb + zb, xa = 0; va < wa; va += I, xa += 2) {
                        c[va + 2] = s[xa];
                        c[va + 3] = s[xa + 1];
                      }
                      i = g.color;
                      r = L.color;
                      this.fillVertices(_, i, r, K, L);
                      c = ub._vData;
                      e = ub._iData;
                      if (Db > 0) {
                        for (var ya = Eb, za = Eb + Db; ya < za; ya++) {
                          e[ya] += Cb;
                        }
                        if (a) {
                          O = a.m;
                          ba = O[0];
                          ua = O[4];
                          Z = O[12];
                          kb = O[1];
                          lb = O[5];
                          $ = O[13];
                          for (var Aa = Bb, Ba = Bb + zb; Aa < Ba; Aa += I) {
                            W = c[Aa];
                            X = c[Aa + 1];
                            c[Aa] = W * ba + X * ua + Z;
                            c[Aa + 1] = W * kb + X * lb + $;
                          }
                        }
                        ub.adjust(zb / I, Db);
                      }
                      K.clipEndWithSlot(L);
                    } else {
                      K.clipEndWithSlot(L);
                    }
                  } else {
                    K.clipEndWithSlot(L);
                  }
                } else {
                  K.clipEndWithSlot(L);
                }
              } else {
                K.clipEndWithSlot(L);
              }
            } else {
              K.clipEndWithSlot(L);
            }
          }
        }
        K.clipEnd();
        if (y && o) {
          var Ca;
          y.strokeColor = M;
          y.fillColor = R;
          for (var Da = 0, Ea = S.bones.length; Da < Ea; Da++) {
            var pa = (Ca = S.bones[Da]).data.length * Ca.a + Ca.worldX;
            var Fa = Ca.data.length * Ca.c + Ca.worldY;
            y.moveTo(Ca.worldX, Ca.worldY);
            y.lineTo(pa, Fa);
            y.stroke();
            y.circle(Ca.worldX, Ca.worldY, Math.PI * 1.5);
            y.fill();
            if (Da === 0) {
              y.fillColor = w;
            }
          }
        }
      };
      d.cacheTraverse = function (a) {
        var b = tb._curFrame;
        if (b) {
          var c = b.segments;
          if (c.length != 0) {
            var d;
            var e;
            var f;
            var k;
            var n;
            var o;
            var r = b.vertices;
            var s = b.indices;
            var l = 0;
            var u = 0;
            var v = 0;
            if (a) {
              o = a.m;
              ba = o[0];
              kb = o[1];
              ua = o[4];
              lb = o[5];
              Z = o[12];
              $ = o[13];
            }
            var w = C & 16;
            var A = w && ba === 1 && kb === 0 && ua === 0 && lb === 1;
            var B = 0;
            var D = b.colors;
            var E = D[B++];
            var H = E.vfOffset;
            gb(E);
            for (var I = 0, J = c.length; I < J; I++) {
              var L = c[I];
              if (k = Gb(L.tex, L.blendMode)) {
                if (ta || k.getHash() !== vb.material.getHash()) {
                  ta = false;
                  vb._flush();
                  vb.node = wb;
                  vb.material = k;
                }
                Ab = L.vertexCount;
                Db = L.indexCount;
                n = ub.request(Ab, Db);
                Eb = n.indiceOffset;
                Cb = n.vertexOffset;
                Fb = n.byteOffset >> 2;
                d = ub._vData;
                e = ub._iData;
                f = ub._uintVData;
                for (var M = Eb, O = Eb + Db; M < O; M++) {
                  e[M] = Cb + s[u++];
                }
                v = L.vfCount;
                d.set(r.subarray(l, l + v), Fb);
                l += v;
                if (A) {
                  for (var P = Fb, Q = Fb + v; P < Q; P += 6) {
                    d[P] += Z;
                    d[P + 1] += $;
                  }
                } else if (w) {
                  for (var R = Fb, S = Fb + v; R < S; R += 6) {
                    W = d[R];
                    X = d[R + 1];
                    d[R] = W * ba + X * ua + Z;
                    d[R + 1] = W * kb + X * lb + $;
                  }
                }
                ub.adjust(Ab, Db);
                if (xb) {
                  for (var T = l - v, ca = Fb + 4, da = Fb + 4 + v; ca < da; ca += 6, T += 6) {
                    if (T >= H) {
                      gb(E = D[B++]);
                      H = E.vfOffset;
                    }
                    f[ca] = h;
                    f[ca + 1] = j;
                  }
                }
              }
            }
          }
        }
      };
      d.fillBuffers = function (f, a) {
        var b = f.node;
        b._renderFlag |= y.FLAG_UPDATE_RENDER_DATA;
        if (f._skeleton) {
          var c = b._color;
          u = c.r / 255;
          E = c.g / 255;
          F = c.b / 255;
          G = c.a / 255;
          B = f.useTint || f.isAnimationCached();
          q = B ? A : z;
          I = B ? 6 : 5;
          wb = f.node;
          ub = a.getBuffer("spine", q);
          vb = a;
          tb = f;
          ta = true;
          l = f.premultipliedAlpha;
          s = 1;
          C = 0;
          xb = false;
          yb = f._effectDelegate && f._effectDelegate._vertexEffect;
          if (c._val !== 4294967295 || l) {
            xb = true;
          }
          if (B) {
            C |= 1;
          }
          var d = undefined;
          if (tb.enableBatch) {
            d = wb._worldMatrix;
            ta = false;
            C |= 16;
          }
          if (f.isAnimationCached()) {
            this.cacheTraverse(d);
          } else {
            if (yb) {
              yb.begin(f._skeleton);
            }
            this.realTimeTraverse(d);
            if (yb) {
              yb.end();
            }
          }
          a.worldMatDirty++;
          f.attachUtil._syncAttachedNode();
          wb = undefined;
          ub = undefined;
          vb = undefined;
          tb = undefined;
          yb = null;
        }
      };
      d.postFillBuffers = function (c, a) {
        a.worldMatDirty--;
      };
      return r;
    }(f.default);
    d.default = ib;
    f.default.register(t, ib);
    c.exports = d.default;
  }, {
    "../../cocos2d/core/renderer/assembler": 190,
    "../../cocos2d/core/renderer/render-flow": 194,
    "../../cocos2d/core/renderer/webgl/vertex-format": 225,
    "./Skeleton": 319,
    "./lib/spine": 321
  }],
  326: [function (d, a) {
    "use strict";

    function b() {
      this.start = null;
      this.end = null;
      this.complete = null;
      this.event = null;
      this.interrupt = null;
      this.dispose = null;
    }
    b.getListeners = function (c) {
      if (!c.listener) {
        c.listener = new b();
      }
      return c.listener;
    };
    a.exports = b;
  }, {}],
  327: [function (d, a) {
    "use strict";

    var e = d("./lib/spine");
    sp.VertexEffectDelegate = cc.Class({
      name: "sp.VertexEffectDelegate",
      ctor: function () {
        this._vertexEffect = null;
        this._interpolation = null;
        this._effectType = "none";
      },
      clear: function () {
        this._vertexEffect = null;
        this._interpolation = null;
        this._effectType = "none";
      },
      initJitter: function (c, a) {
        this._effectType = "jitter";
        this._vertexEffect = new e.JitterEffect(c, a);
        return this._vertexEffect;
      },
      initSwirlWithPow: function (c, a) {
        this._interpolation = new e.Pow(a);
        this._vertexEffect = new e.SwirlEffect(c, this._interpolation);
        return this._vertexEffect;
      },
      initSwirlWithPowOut: function (c, a) {
        this._interpolation = new e.PowOut(a);
        this._vertexEffect = new e.SwirlEffect(c, this._interpolation);
        return this._vertexEffect;
      },
      getJitterVertexEffect: function () {
        return this._vertexEffect;
      },
      getSwirlVertexEffect: function () {
        return this._vertexEffect;
      },
      getVertexEffect: function () {
        return this._vertexEffect;
      },
      getEffectType: function () {
        return this._effectType;
      }
    });
    a.exports = sp.VertexEffectDelegate;
  }, {
    "./lib/spine": 321
  }],
  328: [function (d, a) {
    "use strict";

    var b = typeof window == "undefined" ? global : window;
    b.cc = b.cc || {};
    cc.internal = cc.internal || {};
    d("./predefine");
    d("./polyfill/typescript");
    d("./cocos2d/core/predefine");
    d("./cocos2d");
    d("./extends");
    a.exports = b.cc;
  }, {
    "./cocos2d": 264,
    "./cocos2d/core/predefine": 187,
    "./extends": 316,
    "./package": undefined,
    "./polyfill/typescript": undefined,
    "./predefine": 329
  }],
  329: [function () {
    "use strict";

    var g = typeof window == "undefined" ? global : window;
    function a(a, b) {
      if (g[a] === undefined) {
        Object.defineProperty(g, a, {
          get: function () {
            return b;
          }
        });
      }
    }
    function b(a) {
      return typeof g[a] == "object";
    }
    (function (a, b) {
      if (g[a] === undefined) {
        g[a] = b;
      }
    })("CC_DEBUG", true);
    g.CC_BUILD = true;
    g.CC_DEV = false;
    g.CC_DEBUG = false;
    g.CC_JSB = false;
    g.CC_NATIVERENDERER = false;
    g.CC_SUPPORT_JIT = true;
    g.CC_PHYSICS_BUILTIN = false;
    g.CC_PHYSICS_CANNON = false;
    g.CC_EDITOR = false;
    g.CC_PREVIEW = false;
    g.CC_TEST = false;
    g.CC_RUNTIME = false;
    g.CC_JSB = false;
    var c = !(!b("wx") || !wx.getSharedCanvas);
    var d = !(!b("wx") || !wx.getSystemInfoSync && !wx.getSharedCanvas);
    var e = b("bk");
    a("CC_WECHATGAMESUB", c);
    a("CC_WECHATGAME", d);
    a("CC_QQPLAY", e);
    g.CocosEngine = cc.ENGINE_VERSION = "6.5.0-rc.3";
    g.PG_Engine = "6.5.0-rc.3";
  }, {}]
}, {}, [328]);