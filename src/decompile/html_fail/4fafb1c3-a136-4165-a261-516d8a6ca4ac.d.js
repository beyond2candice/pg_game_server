(function (t, e, i) {
  function n(i) {
    var r = e[i];
    if (!r) {
      var s = t[i];
      if (!s) {
        return;
      }
      var a = {};
      r = e[i] = {
        exports: a
      };
      s[0](function (t) {
        return n(s[1][t] || t);
      }, r, a);
    }
    return r.exports;
  }
  for (var r = 0; r < i.length; r++) {
    n(i[r]);
  }
})({
  1: [function (t) {
    "use strict";

    t("../core/platform/CCClass");
    var e = t("../core/utils/misc");
    cc.Action = cc.Class({
      name: "cc.Action",
      ctor: function () {
        this.originalTarget = null;
        this.target = null;
        this.tag = cc.Action.TAG_INVALID;
      },
      clone: function () {
        var t = new cc.Action();
        t.originalTarget = null;
        t.target = null;
        t.tag = this.tag;
        return t;
      },
      isDone: function () {
        return true;
      },
      startWithTarget: function (t) {
        this.originalTarget = t;
        this.target = t;
      },
      stop: function () {
        this.target = null;
      },
      step: function () {},
      update: function () {},
      getTarget: function () {
        return this.target;
      },
      setTarget: function (t) {
        this.target = t;
      },
      getOriginalTarget: function () {
        return this.originalTarget;
      },
      setOriginalTarget: function (t) {
        this.originalTarget = t;
      },
      getTag: function () {
        return this.tag;
      },
      setTag: function (t) {
        this.tag = t;
      },
      retain: function () {},
      release: function () {}
    });
    cc.Action.TAG_INVALID = -1;
    cc.FiniteTimeAction = cc.Class({
      name: "cc.FiniteTimeAction",
      extends: cc.Action,
      ctor: function () {
        this._duration = 0;
      },
      getDuration: function () {
        return this._duration * (this._timesForRepeat || 1);
      },
      setDuration: function (t) {
        this._duration = t;
      },
      reverse: function () {
        return null;
      },
      clone: function () {
        return new cc.FiniteTimeAction();
      }
    });
    cc.Speed = cc.Class({
      name: "cc.Speed",
      extends: cc.Action,
      ctor: function (t, e) {
        this._speed = 0;
        this._innerAction = null;
        if (t) {
          this.initWithAction(t, e);
        }
      },
      getSpeed: function () {
        return this._speed;
      },
      setSpeed: function (t) {
        this._speed = t;
      },
      initWithAction: function (t, e) {
        return !!t && (this._innerAction = t, this._speed = e, true);
      },
      clone: function () {
        var t = new cc.Speed();
        t.initWithAction(this._innerAction.clone(), this._speed);
        return t;
      },
      startWithTarget: function (t) {
        cc.Action.prototype.startWithTarget.call(this, t);
        this._innerAction.startWithTarget(t);
      },
      stop: function () {
        this._innerAction.stop();
        cc.Action.prototype.stop.call(this);
      },
      step: function (t) {
        this._innerAction.step(t * this._speed);
      },
      isDone: function () {
        return this._innerAction.isDone();
      },
      reverse: function () {
        return new cc.Speed(this._innerAction.reverse(), this._speed);
      },
      setInnerAction: function (t) {
        if (this._innerAction !== t) {
          this._innerAction = t;
        }
      },
      getInnerAction: function () {
        return this._innerAction;
      }
    });
    cc.speed = function (t, e) {
      return new cc.Speed(t, e);
    };
    cc.Follow = cc.Class({
      name: "cc.Follow",
      extends: cc.Action,
      ctor: function (t, e) {
        this._followedNode = null;
        this._boundarySet = false;
        this._boundaryFullyCovered = false;
        this._halfScreenSize = null;
        this._fullScreenSize = null;
        this.leftBoundary = 0;
        this.rightBoundary = 0;
        this.topBoundary = 0;
        this.bottomBoundary = 0;
        this._worldRect = cc.rect(0, 0, 0, 0);
        if (t) {
          if (e) {
            this.initWithTarget(t, e);
          } else {
            this.initWithTarget(t);
          }
        }
      },
      clone: function () {
        var t = new cc.Follow();
        var e = this._worldRect;
        var i = new cc.Rect(e.x, e.y, e.width, e.height);
        t.initWithTarget(this._followedNode, i);
        return t;
      },
      isBoundarySet: function () {
        return this._boundarySet;
      },
      setBoundarySet: function (t) {
        this._boundarySet = t;
      },
      setBoudarySet: function (t) {
        this.setBoundarySet(t);
      },
      initWithTarget: function (t, e) {
        if (!t) {
          return false;
        }
        e = e || cc.rect(0, 0, 0, 0);
        this._followedNode = t;
        this._worldRect = e;
        this._boundarySet = !(0 === e.width && 0 === e.height);
        this._boundaryFullyCovered = false;
        var i = cc.winSize;
        this._fullScreenSize = cc.v2(i.width, i.height);
        this._halfScreenSize = this._fullScreenSize.mul(.5);
        if (this._boundarySet) {
          this.leftBoundary = -(e.x + e.width - this._fullScreenSize.x);
          this.rightBoundary = -e.x;
          this.topBoundary = -e.y;
          this.bottomBoundary = -(e.y + e.height - this._fullScreenSize.y);
          if (this.rightBoundary < this.leftBoundary) {
            this.rightBoundary = this.leftBoundary = (this.leftBoundary + this.rightBoundary) / 2;
          }
          if (this.topBoundary < this.bottomBoundary) {
            this.topBoundary = this.bottomBoundary = (this.topBoundary + this.bottomBoundary) / 2;
          }
          if (this.topBoundary === this.bottomBoundary && this.leftBoundary === this.rightBoundary) {
            this._boundaryFullyCovered = true;
          }
        }
        return true;
      },
      step: function () {
        var t = this.target.convertToWorldSpaceAR(cc.Vec2.ZERO);
        var i = this._followedNode.convertToWorldSpaceAR(cc.Vec2.ZERO);
        var n = t.sub(i);
        var r = this.target.parent.convertToNodeSpaceAR(n.add(this._halfScreenSize));
        if (this._boundarySet) {
          if (this._boundaryFullyCovered) {
            return;
          }
          this.target.setPosition(e.clampf(r.x, this.leftBoundary, this.rightBoundary), e.clampf(r.y, this.bottomBoundary, this.topBoundary));
        } else {
          this.target.setPosition(r.x, r.y);
        }
      },
      isDone: function () {
        return !this._followedNode.activeInHierarchy;
      },
      stop: function () {
        this.target = null;
        cc.Action.prototype.stop.call(this);
      }
    });
    cc.follow = function (t, e) {
      return new cc.Follow(t, e);
    };
  }, {
    "../core/platform/CCClass": 162,
    "../core/utils/misc": 236
  }],
  2: [function () {
    "use strict";

    function t(t, e) {
      return t[Math.min(t.length - 1, Math.max(e, 0))];
    }
    function e(t) {
      var e = [];
      for (var i = t.length - 1; i >= 0; i--) {
        e.push(cc.v2(t[i].x, t[i].y));
      }
      return e;
    }
    function i(t) {
      var e = [];
      for (var i = 0; i < t.length; i++) {
        e.push(cc.v2(t[i].x, t[i].y));
      }
      return e;
    }
    cc.CardinalSplineTo = cc.Class({
      name: "cc.CardinalSplineTo",
      extends: cc.ActionInterval,
      ctor: function (t, e, i) {
        this._points = [];
        this._deltaT = 0;
        this._tension = 0;
        this._previousPosition = null;
        this._accumulatedDiff = null;
        if (undefined !== i) {
          cc.CardinalSplineTo.prototype.initWithDuration.call(this, t, e, i);
        }
      },
      initWithDuration: function (t, e, i) {
        return !(!e || 0 === e.length || !cc.ActionInterval.prototype.initWithDuration.call(this, t) || (this.setPoints(e), this._tension = i, 0));
      },
      clone: function () {
        var t = new cc.CardinalSplineTo();
        t.initWithDuration(this._duration, i(this._points), this._tension);
        return t;
      },
      startWithTarget: function (t) {
        cc.ActionInterval.prototype.startWithTarget.call(this, t);
        this._deltaT = 1 / (this._points.length - 1);
        this._previousPosition = cc.v2(this.target.x, this.target.y);
        this._accumulatedDiff = cc.v2(0, 0);
      },
      update: function (e) {
        var i;
        var n;
        e = this._computeEaseTime(e);
        var r = this._points;
        if (1 === e) {
          i = r.length - 1;
          n = 1;
        } else {
          var s = this._deltaT;
          n = (e - s * (i = 0 | e / s)) / s;
        }
        var a;
        var o;
        var c;
        var l;
        var h;
        var u;
        var f;
        var d;
        var _;
        var p;
        var v;
        var g;
        var m;
        var y;
        var T;
        var E;
        a = t(r, i - 1);
        o = t(r, i - 0);
        c = t(r, i + 1);
        l = t(r, i + 2);
        _ = (d = (1 - this._tension) / 2) * (2 * (u = (h = n) * h) - (f = u * h) - h);
        p = d * (-f + u) + (2 * f - 3 * u) + 1;
        v = d * (f - 2 * u + h) + -2 * f + 3 * u;
        g = d * (f - u);
        m = a.x * _ + o.x * p + c.x * v + l.x * g;
        y = a.y * _ + o.y * p + c.y * v + l.y * g;
        var A = cc.v2(m, y);
        if (cc.macro.ENABLE_STACKABLE_ACTIONS && (T = this.target.x - this._previousPosition.x, E = this.target.y - this._previousPosition.y, 0 !== T || 0 !== E)) {
          var x = this._accumulatedDiff;
          T = x.x + T;
          E = x.y + E;
          x.x = T;
          x.y = E;
          A.x += T;
          A.y += E;
        }
        this.updatePosition(A);
      },
      reverse: function () {
        var t = e(this._points);
        return cc.cardinalSplineTo(this._duration, t, this._tension);
      },
      updatePosition: function (t) {
        this.target.setPosition(t);
        this._previousPosition = t;
      },
      getPoints: function () {
        return this._points;
      },
      setPoints: function (t) {
        this._points = t;
      }
    });
    cc.cardinalSplineTo = function (t, e, i) {
      return new cc.CardinalSplineTo(t, e, i);
    };
    cc.CardinalSplineBy = cc.Class({
      name: "cc.CardinalSplineBy",
      extends: cc.CardinalSplineTo,
      ctor: function (t, e, i) {
        this._startPosition = cc.v2(0, 0);
        if (undefined !== i) {
          this.initWithDuration(t, e, i);
        }
      },
      startWithTarget: function (t) {
        cc.CardinalSplineTo.prototype.startWithTarget.call(this, t);
        this._startPosition.x = t.x;
        this._startPosition.y = t.y;
      },
      reverse: function () {
        var t;
        var i = this._points.slice();
        var n = i[0];
        for (var r = 1; r < i.length; ++r) {
          t = i[r];
          i[r] = t.sub(n);
          n = t;
        }
        var s = e(i);
        n = s[s.length - 1];
        s.pop();
        n.x = -n.x;
        n.y = -n.y;
        s.unshift(n);
        for (r = 1; r < s.length; ++r) {
          (t = s[r]).x = -t.x;
          t.y = -t.y;
          t.x += n.x;
          t.y += n.y;
          s[r] = t;
          n = t;
        }
        return cc.cardinalSplineBy(this._duration, s, this._tension);
      },
      updatePosition: function (t) {
        var e = this._startPosition;
        var i = t.x + e.x;
        var n = t.y + e.y;
        this._previousPosition.x = i;
        this._previousPosition.y = n;
        this.target.setPosition(i, n);
      },
      clone: function () {
        var t = new cc.CardinalSplineBy();
        t.initWithDuration(this._duration, i(this._points), this._tension);
        return t;
      }
    });
    cc.cardinalSplineBy = function (t, e, i) {
      return new cc.CardinalSplineBy(t, e, i);
    };
    cc.CatmullRomTo = cc.Class({
      name: "cc.CatmullRomTo",
      extends: cc.CardinalSplineTo,
      ctor: function (t, e) {
        if (e) {
          this.initWithDuration(t, e);
        }
      },
      initWithDuration: function (t, e) {
        return cc.CardinalSplineTo.prototype.initWithDuration.call(this, t, e, .5);
      },
      clone: function () {
        var t = new cc.CatmullRomTo();
        t.initWithDuration(this._duration, i(this._points));
        return t;
      }
    });
    cc.catmullRomTo = function (t, e) {
      return new cc.CatmullRomTo(t, e);
    };
    cc.CatmullRomBy = cc.Class({
      name: "cc.CatmullRomBy",
      extends: cc.CardinalSplineBy,
      ctor: function (t, e) {
        if (e) {
          this.initWithDuration(t, e);
        }
      },
      initWithDuration: function (t, e) {
        return cc.CardinalSplineTo.prototype.initWithDuration.call(this, t, e, .5);
      },
      clone: function () {
        var t = new cc.CatmullRomBy();
        t.initWithDuration(this._duration, i(this._points));
        return t;
      }
    });
    cc.catmullRomBy = function (t, e) {
      return new cc.CatmullRomBy(t, e);
    };
  }, {}],
  3: [function () {
    "use strict";

    cc.easeIn = function (t) {
      return {
        _rate: t,
        easing: function (t) {
          return Math.pow(t, this._rate);
        },
        reverse: function () {
          return cc.easeIn(1 / this._rate);
        }
      };
    };
    cc.easeOut = function (t) {
      return {
        _rate: t,
        easing: function (t) {
          return Math.pow(t, 1 / this._rate);
        },
        reverse: function () {
          return cc.easeOut(1 / this._rate);
        }
      };
    };
    cc.easeInOut = function (t) {
      return {
        _rate: t,
        easing: function (t) {
          return (t *= 2) < 1 ? .5 * Math.pow(t, this._rate) : 1 - .5 * Math.pow(2 - t, this._rate);
        },
        reverse: function () {
          return cc.easeInOut(this._rate);
        }
      };
    };
    var t = {
      easing: function (t) {
        return 0 === t ? 0 : Math.pow(2, 10 * (t - 1));
      },
      reverse: function () {
        return e;
      }
    };
    cc.easeExponentialIn = function () {
      return t;
    };
    var e = {
      easing: function (t) {
        return 1 === t ? 1 : 1 - Math.pow(2, -10 * t);
      },
      reverse: function () {
        return t;
      }
    };
    cc.easeExponentialOut = function () {
      return e;
    };
    var i = {
      easing: function (t) {
        return 1 !== t && 0 !== t ? (t *= 2) < 1 ? .5 * Math.pow(2, 10 * (t - 1)) : .5 * (2 - Math.pow(2, -10 * (t - 1))) : t;
      },
      reverse: function () {
        return i;
      }
    };
    cc.easeExponentialInOut = function () {
      return i;
    };
    var n = {
      easing: function (t) {
        return 0 === t || 1 === t ? t : -1 * Math.cos(t * Math.PI / 2) + 1;
      },
      reverse: function () {
        return r;
      }
    };
    cc.easeSineIn = function () {
      return n;
    };
    var r = {
      easing: function (t) {
        return 0 === t || 1 === t ? t : Math.sin(t * Math.PI / 2);
      },
      reverse: function () {
        return n;
      }
    };
    cc.easeSineOut = function () {
      return r;
    };
    var s = {
      easing: function (t) {
        return 0 === t || 1 === t ? t : -.5 * (Math.cos(Math.PI * t) - 1);
      },
      reverse: function () {
        return s;
      }
    };
    cc.easeSineInOut = function () {
      return s;
    };
    var a = {
      easing: function (t) {
        return 0 === t || 1 === t ? t : -Math.pow(2, 10 * (t -= 1)) * Math.sin((t - .075) * Math.PI * 2 / .3);
      },
      reverse: function () {
        return o;
      }
    };
    cc.easeElasticIn = function (t) {
      return t && .3 !== t ? {
        _period: t,
        easing: function (t) {
          return 0 === t || 1 === t ? t : -Math.pow(2, 10 * (t -= 1)) * Math.sin((t - this._period / 4) * Math.PI * 2 / this._period);
        },
        reverse: function () {
          return cc.easeElasticOut(this._period);
        }
      } : a;
    };
    var o = {
      easing: function (t) {
        return 0 === t || 1 === t ? t : Math.pow(2, -10 * t) * Math.sin((t - .075) * Math.PI * 2 / .3) + 1;
      },
      reverse: function () {
        return a;
      }
    };
    function c(t) {
      return t < 0.36363636363636365 ? 7.5625 * t * t : t < 0.7272727272727273 ? 7.5625 * (t -= 0.5454545454545454) * t + .75 : t < 0.9090909090909091 ? 7.5625 * (t -= 0.8181818181818182) * t + .9375 : 7.5625 * (t -= 0.9545454545454546) * t + .984375;
    }
    cc.easeElasticOut = function (t) {
      return t && .3 !== t ? {
        _period: t,
        easing: function (t) {
          return 0 === t || 1 === t ? t : Math.pow(2, -10 * t) * Math.sin((t - this._period / 4) * Math.PI * 2 / this._period) + 1;
        },
        reverse: function () {
          return cc.easeElasticIn(this._period);
        }
      } : o;
    };
    cc.easeElasticInOut = function (t) {
      return {
        _period: t = t || .3,
        easing: function (t) {
          var e = 0;
          var i = this._period;
          if (0 === t || 1 === t) {
            e = t;
          } else {
            t *= 2;
            if (!i) {
              i = this._period = 0.44999999999999996;
            }
            var n = i / 4;
            e = (t -= 1) < 0 ? -.5 * Math.pow(2, 10 * t) * Math.sin((t - n) * Math.PI * 2 / i) : Math.pow(2, -10 * t) * Math.sin((t - n) * Math.PI * 2 / i) * .5 + 1;
          }
          return e;
        },
        reverse: function () {
          return cc.easeElasticInOut(this._period);
        }
      };
    };
    var l = {
      easing: function (t) {
        return 1 - c(1 - t);
      },
      reverse: function () {
        return h;
      }
    };
    cc.easeBounceIn = function () {
      return l;
    };
    var h = {
      easing: function (t) {
        return c(t);
      },
      reverse: function () {
        return l;
      }
    };
    cc.easeBounceOut = function () {
      return h;
    };
    var u = {
      easing: function (t) {
        return t < .5 ? .5 * (1 - c(1 - (t *= 2))) : .5 * c(2 * t - 1) + .5;
      },
      reverse: function () {
        return u;
      }
    };
    cc.easeBounceInOut = function () {
      return u;
    };
    var f = {
      easing: function (t) {
        return 0 === t || 1 === t ? t : t * t * (2.70158 * t - 1.70158);
      },
      reverse: function () {
        return d;
      }
    };
    cc.easeBackIn = function () {
      return f;
    };
    var d = {
      easing: function (t) {
        return 0 === t ? 0 : (t -= 1) * t * (2.70158 * t + 1.70158) + 1;
      },
      reverse: function () {
        return f;
      }
    };
    cc.easeBackOut = function () {
      return d;
    };
    var _ = {
      easing: function (t) {
        return (t *= 2) < 1 ? t * t * (3.5949095 * t - 2.5949095) / 2 : (t -= 2) * t * (3.5949095 * t + 2.5949095) / 2 + 1;
      },
      reverse: function () {
        return _;
      }
    };
    cc.easeBackInOut = function () {
      return _;
    };
    cc.easeBezierAction = function (t, e, i, n) {
      return {
        easing: function (r) {
          return Math.pow(1 - r, 3) * t + 3 * r * Math.pow(1 - r, 2) * e + 3 * Math.pow(r, 2) * (1 - r) * i + Math.pow(r, 3) * n;
        },
        reverse: function () {
          return cc.easeBezierAction(n, i, e, t);
        }
      };
    };
    var p = {
      easing: function (t) {
        return Math.pow(t, 2);
      },
      reverse: function () {
        return p;
      }
    };
    cc.easeQuadraticActionIn = function () {
      return p;
    };
    var v = {
      easing: function (t) {
        return -t * (t - 2);
      },
      reverse: function () {
        return v;
      }
    };
    cc.easeQuadraticActionOut = function () {
      return v;
    };
    var g = {
      easing: function (t) {
        return (t *= 2) < 1 ? t * t * .5 : -.5 * (--t * (t - 2) - 1);
      },
      reverse: function () {
        return g;
      }
    };
    cc.easeQuadraticActionInOut = function () {
      return g;
    };
    var m = {
      easing: function (t) {
        return t * t * t * t;
      },
      reverse: function () {
        return m;
      }
    };
    cc.easeQuarticActionIn = function () {
      return m;
    };
    var y = {
      easing: function (t) {
        return -((t -= 1) * t * t * t - 1);
      },
      reverse: function () {
        return y;
      }
    };
    cc.easeQuarticActionOut = function () {
      return y;
    };
    var T = {
      easing: function (t) {
        return (t *= 2) < 1 ? .5 * t * t * t * t : -.5 * ((t -= 2) * t * t * t - 2);
      },
      reverse: function () {
        return T;
      }
    };
    cc.easeQuarticActionInOut = function () {
      return T;
    };
    var E = {
      easing: function (t) {
        return t * t * t * t * t;
      },
      reverse: function () {
        return E;
      }
    };
    cc.easeQuinticActionIn = function () {
      return E;
    };
    var A = {
      easing: function (t) {
        return (t -= 1) * t * t * t * t + 1;
      },
      reverse: function () {
        return A;
      }
    };
    cc.easeQuinticActionOut = function () {
      return A;
    };
    var x = {
      easing: function (t) {
        return (t *= 2) < 1 ? .5 * t * t * t * t * t : .5 * ((t -= 2) * t * t * t * t + 2);
      },
      reverse: function () {
        return x;
      }
    };
    cc.easeQuinticActionInOut = function () {
      return x;
    };
    var C = {
      easing: function (t) {
        return -1 * (Math.sqrt(1 - t * t) - 1);
      },
      reverse: function () {
        return C;
      }
    };
    cc.easeCircleActionIn = function () {
      return C;
    };
    var b = {
      easing: function (t) {
        return Math.sqrt(1 - (t -= 1) * t);
      },
      reverse: function () {
        return b;
      }
    };
    cc.easeCircleActionOut = function () {
      return b;
    };
    var S = {
      easing: function (t) {
        return (t *= 2) < 1 ? -.5 * (Math.sqrt(1 - t * t) - 1) : .5 * (Math.sqrt(1 - (t -= 2) * t) + 1);
      },
      reverse: function () {
        return S;
      }
    };
    cc.easeCircleActionInOut = function () {
      return S;
    };
    var R = {
      easing: function (t) {
        return t * t * t;
      },
      reverse: function () {
        return R;
      }
    };
    cc.easeCubicActionIn = function () {
      return R;
    };
    var M = {
      easing: function (t) {
        return (t -= 1) * t * t + 1;
      },
      reverse: function () {
        return M;
      }
    };
    cc.easeCubicActionOut = function () {
      return M;
    };
    var w = {
      easing: function (t) {
        return (t *= 2) < 1 ? .5 * t * t * t : .5 * ((t -= 2) * t * t + 2);
      },
      reverse: function () {
        return w;
      }
    };
    cc.easeCubicActionInOut = function () {
      return w;
    };
  }, {}],
  4: [function () {
    "use strict";

    cc.ActionInstant = cc.Class({
      name: "cc.ActionInstant",
      extends: cc.FiniteTimeAction,
      isDone: function () {
        return true;
      },
      step: function () {
        this.update(1);
      },
      update: function () {},
      reverse: function () {
        return this.clone();
      },
      clone: function () {
        return new cc.ActionInstant();
      }
    });
    cc.Show = cc.Class({
      name: "cc.Show",
      extends: cc.ActionInstant,
      update: function () {
        var t = this.target.getComponentsInChildren(cc.RenderComponent);
        for (var e = 0; e < t.length; ++e) {
          t[e].enabled = true;
        }
      },
      reverse: function () {
        return new cc.Hide();
      },
      clone: function () {
        return new cc.Show();
      }
    });
    cc.show = function () {
      return new cc.Show();
    };
    cc.Hide = cc.Class({
      name: "cc.Hide",
      extends: cc.ActionInstant,
      update: function () {
        var t = this.target.getComponentsInChildren(cc.RenderComponent);
        for (var e = 0; e < t.length; ++e) {
          t[e].enabled = false;
        }
      },
      reverse: function () {
        return new cc.Show();
      },
      clone: function () {
        return new cc.Hide();
      }
    });
    cc.hide = function () {
      return new cc.Hide();
    };
    cc.ToggleVisibility = cc.Class({
      name: "cc.ToggleVisibility",
      extends: cc.ActionInstant,
      update: function () {
        var t = this.target.getComponentsInChildren(cc.RenderComponent);
        for (var e = 0; e < t.length; ++e) {
          var i = t[e];
          i.enabled = !i.enabled;
        }
      },
      reverse: function () {
        return new cc.ToggleVisibility();
      },
      clone: function () {
        return new cc.ToggleVisibility();
      }
    });
    cc.toggleVisibility = function () {
      return new cc.ToggleVisibility();
    };
    cc.RemoveSelf = cc.Class({
      name: "cc.RemoveSelf",
      extends: cc.ActionInstant,
      ctor: function (t) {
        this._isNeedCleanUp = true;
        if (undefined !== t) {
          this.init(t);
        }
      },
      update: function () {
        this.target.removeFromParent(this._isNeedCleanUp);
      },
      init: function (t) {
        this._isNeedCleanUp = t;
        return true;
      },
      reverse: function () {
        return new cc.RemoveSelf(this._isNeedCleanUp);
      },
      clone: function () {
        return new cc.RemoveSelf(this._isNeedCleanUp);
      }
    });
    cc.removeSelf = function (t) {
      return new cc.RemoveSelf(t);
    };
    cc.DestroySelf = cc.Class({
      name: "cc.DestroySelf",
      extends: cc.ActionInstant,
      update: function () {
        this.target.destroy();
      },
      reverse: function () {
        return new cc.DestroySelf();
      },
      clone: function () {
        return new cc.DestroySelf();
      }
    });
    cc.destroySelf = function () {
      return new cc.DestroySelf();
    };
    cc.FlipX = cc.Class({
      name: "cc.FlipX",
      extends: cc.ActionInstant,
      ctor: function (t) {
        this._flippedX = false;
        if (undefined !== t) {
          this.initWithFlipX(t);
        }
      },
      initWithFlipX: function (t) {
        this._flippedX = t;
        return true;
      },
      update: function () {
        this.target.scaleX = Math.abs(this.target.scaleX) * (this._flippedX ? -1 : 1);
      },
      reverse: function () {
        return new cc.FlipX(!this._flippedX);
      },
      clone: function () {
        var t = new cc.FlipX();
        t.initWithFlipX(this._flippedX);
        return t;
      }
    });
    cc.flipX = function (t) {
      return new cc.FlipX(t);
    };
    cc.FlipY = cc.Class({
      name: "cc.FlipY",
      extends: cc.ActionInstant,
      ctor: function (t) {
        this._flippedY = false;
        if (undefined !== t) {
          this.initWithFlipY(t);
        }
      },
      initWithFlipY: function (t) {
        this._flippedY = t;
        return true;
      },
      update: function () {
        this.target.scaleY = Math.abs(this.target.scaleY) * (this._flippedY ? -1 : 1);
      },
      reverse: function () {
        return new cc.FlipY(!this._flippedY);
      },
      clone: function () {
        var t = new cc.FlipY();
        t.initWithFlipY(this._flippedY);
        return t;
      }
    });
    cc.flipY = function (t) {
      return new cc.FlipY(t);
    };
    cc.Place = cc.Class({
      name: "cc.Place",
      extends: cc.ActionInstant,
      ctor: function (t, e) {
        this._x = 0;
        this._y = 0;
        if (undefined !== t) {
          if (undefined !== t.x) {
            e = t.y;
            t = t.x;
          }
          this.initWithPosition(t, e);
        }
      },
      initWithPosition: function (t, e) {
        this._x = t;
        this._y = e;
        return true;
      },
      update: function () {
        this.target.setPosition(this._x, this._y);
      },
      clone: function () {
        var t = new cc.Place();
        t.initWithPosition(this._x, this._y);
        return t;
      }
    });
    cc.place = function (t, e) {
      return new cc.Place(t, e);
    };
    cc.CallFunc = cc.Class({
      name: "cc.CallFunc",
      extends: cc.ActionInstant,
      ctor: function (t, e, i) {
        this._selectorTarget = null;
        this._function = null;
        this._data = null;
        this.initWithFunction(t, e, i);
      },
      initWithFunction: function (t, e, i) {
        if (t) {
          this._function = t;
        }
        if (e) {
          this._selectorTarget = e;
        }
        if (undefined !== i) {
          this._data = i;
        }
        return true;
      },
      execute: function () {
        if (this._function) {
          this._function.call(this._selectorTarget, this.target, this._data);
        }
      },
      update: function () {
        this.execute();
      },
      getTargetCallback: function () {
        return this._selectorTarget;
      },
      setTargetCallback: function (t) {
        if (t !== this._selectorTarget) {
          if (this._selectorTarget) {
            this._selectorTarget = null;
          }
          this._selectorTarget = t;
        }
      },
      clone: function () {
        var t = new cc.CallFunc();
        t.initWithFunction(this._function, this._selectorTarget, this._data);
        return t;
      }
    });
    cc.callFunc = function (t, e, i) {
      return new cc.CallFunc(t, e, i);
    };
  }, {}],
  5: [function () {
    "use strict";

    function t(t, e, i, n, r) {
      return Math.pow(1 - r, 3) * t + 3 * r * Math.pow(1 - r, 2) * e + 3 * Math.pow(r, 2) * (1 - r) * i + Math.pow(r, 3) * n;
    }
    cc.ActionInterval = cc.Class({
      name: "cc.ActionInterval",
      extends: cc.FiniteTimeAction,
      ctor: function (t) {
        this.MAX_VALUE = 2;
        this._elapsed = 0;
        this._firstTick = false;
        this._easeList = null;
        this._speed = 1;
        this._timesForRepeat = 1;
        this._repeatForever = false;
        this._repeatMethod = false;
        this._speedMethod = false;
        if (undefined !== t) {
          cc.ActionInterval.prototype.initWithDuration.call(this, t);
        }
      },
      getElapsed: function () {
        return this._elapsed;
      },
      initWithDuration: function (t) {
        this._duration = 0 === t ? cc.macro.FLT_EPSILON : t;
        this._elapsed = 0;
        this._firstTick = true;
        return true;
      },
      isDone: function () {
        return this._elapsed >= this._duration;
      },
      _cloneDecoration: function (t) {
        t._repeatForever = this._repeatForever;
        t._speed = this._speed;
        t._timesForRepeat = this._timesForRepeat;
        t._easeList = this._easeList;
        t._speedMethod = this._speedMethod;
        t._repeatMethod = this._repeatMethod;
      },
      _reverseEaseList: function (t) {
        if (this._easeList) {
          t._easeList = [];
          for (var e = 0; e < this._easeList.length; e++) {
            t._easeList.push(this._easeList[e].reverse());
          }
        }
      },
      clone: function () {
        var t = new cc.ActionInterval(this._duration);
        this._cloneDecoration(t);
        return t;
      },
      easing: function () {
        if (this._easeList) {
          this._easeList.length = 0;
        } else {
          this._easeList = [];
        }
        for (var t = 0; t < arguments.length; t++) {
          this._easeList.push(arguments[t]);
        }
        return this;
      },
      _computeEaseTime: function (t) {
        var e = this._easeList;
        if (!e || 0 === e.length) {
          return t;
        }
        var i = 0;
        for (var n = e.length; i < n; i++) {
          t = e[i].easing(t);
        }
        return t;
      },
      step: function (t) {
        if (this._firstTick) {
          this._firstTick = false;
          this._elapsed = 0;
        } else {
          this._elapsed += t;
        }
        var e = this._elapsed / (this._duration > 1.192092896e-7 ? this._duration : 1.192092896e-7);
        e = 1 > e ? e : 1;
        this.update(e > 0 ? e : 0);
        if (this._repeatMethod && this._timesForRepeat > 1 && this.isDone()) {
          if (!this._repeatForever) {
            this._timesForRepeat--;
          }
          this.startWithTarget(this.target);
          this.step(this._elapsed - this._duration);
        }
      },
      startWithTarget: function (t) {
        cc.Action.prototype.startWithTarget.call(this, t);
        this._elapsed = 0;
        this._firstTick = true;
      },
      reverse: function () {
        return null;
      },
      setAmplitudeRate: function () {},
      getAmplitudeRate: function () {
        return 0;
      },
      speed: function (t) {
        return t <= 0 ? this : (this._speedMethod = true, this._speed *= t, this);
      },
      getSpeed: function () {
        return this._speed;
      },
      setSpeed: function (t) {
        this._speed = t;
        return this;
      },
      repeat: function (t) {
        return isNaN(t = Math.round(t)) || t < 1 ? this : (this._repeatMethod = true, this._timesForRepeat *= t, this);
      },
      repeatForever: function () {
        this._repeatMethod = true;
        this._timesForRepeat = this.MAX_VALUE;
        this._repeatForever = true;
        return this;
      }
    });
    cc.actionInterval = function (t) {
      return new cc.ActionInterval(t);
    };
    cc.Sequence = cc.Class({
      name: "cc.Sequence",
      extends: cc.ActionInterval,
      ctor: function (t) {
        this._actions = [];
        this._split = null;
        this._last = 0;
        this._reversed = false;
        var e = t instanceof Array ? t : arguments;
        if (1 !== e.length) {
          var i = e.length - 1;
          if (i >= 0) {
            e[i];
          }
          if (i >= 0) {
            var n;
            var r = e[0];
            for (var s = 1; s < i; s++) {
              if (e[s]) {
                n = r;
                r = cc.Sequence._actionOneTwo(n, e[s]);
              }
            }
            this.initWithTwoActions(r, e[i]);
          }
        }
      },
      initWithTwoActions: function (t, e) {
        if (!t || !e) {
          return false;
        }
        var i = t._duration;
        var n = e._duration;
        var r = (i *= t._repeatMethod ? t._timesForRepeat : 1) + (n *= e._repeatMethod ? e._timesForRepeat : 1);
        this.initWithDuration(r);
        this._actions[0] = t;
        this._actions[1] = e;
        return true;
      },
      clone: function () {
        var t = new cc.Sequence();
        this._cloneDecoration(t);
        t.initWithTwoActions(this._actions[0].clone(), this._actions[1].clone());
        return t;
      },
      startWithTarget: function (t) {
        cc.ActionInterval.prototype.startWithTarget.call(this, t);
        this._split = this._actions[0]._duration / this._duration;
        this._split *= this._actions[0]._repeatMethod ? this._actions[0]._timesForRepeat : 1;
        this._last = -1;
      },
      stop: function () {
        if (-1 !== this._last) {
          this._actions[this._last].stop();
        }
        cc.Action.prototype.stop.call(this);
      },
      update: function (t) {
        var e;
        var i;
        var n = 0;
        var r = this._split;
        var s = this._actions;
        var a = this._last;
        if ((t = this._computeEaseTime(t)) < r) {
          e = 0 !== r ? t / r : 1;
          if (0 === n && 1 === a && this._reversed) {
            s[1].update(0);
            s[1].stop();
          }
        } else {
          n = 1;
          e = 1 === r ? 1 : (t - r) / (1 - r);
          if (-1 === a) {
            s[0].startWithTarget(this.target);
            s[0].update(1);
            s[0].stop();
          }
          if (0 === a) {
            s[0].update(1);
            s[0].stop();
          }
        }
        i = s[n];
        if (!(a === n && i.isDone())) {
          if (a !== n) {
            i.startWithTarget(this.target);
          }
          e *= i._timesForRepeat;
          i.update(e > 1 ? e % 1 : e);
          this._last = n;
        }
      },
      reverse: function () {
        var t = cc.Sequence._actionOneTwo(this._actions[1].reverse(), this._actions[0].reverse());
        this._cloneDecoration(t);
        this._reverseEaseList(t);
        t._reversed = true;
        return t;
      }
    });
    cc.sequence = function (t) {
      var e = t instanceof Array ? t : arguments;
      if (1 === e.length) {
        return null;
      }
      var i = e.length - 1;
      if (i >= 0) {
        e[i];
      }
      var n = null;
      if (i >= 0) {
        n = e[0];
        for (var r = 1; r <= i; r++) {
          if (e[r]) {
            n = cc.Sequence._actionOneTwo(n, e[r]);
          }
        }
      }
      return n;
    };
    cc.Sequence._actionOneTwo = function (t, e) {
      var i = new cc.Sequence();
      i.initWithTwoActions(t, e);
      return i;
    };
    cc.Repeat = cc.Class({
      name: "cc.Repeat",
      extends: cc.ActionInterval,
      ctor: function (t, e) {
        this._times = 0;
        this._total = 0;
        this._nextDt = 0;
        this._actionInstant = false;
        this._innerAction = null;
        if (undefined !== e) {
          this.initWithAction(t, e);
        }
      },
      initWithAction: function (t, e) {
        var i = t._duration * e;
        return !!this.initWithDuration(i) && (this._times = e, this._innerAction = t, t instanceof cc.ActionInstant && (this._actionInstant = true, this._times -= 1), this._total = 0, true);
      },
      clone: function () {
        var t = new cc.Repeat();
        this._cloneDecoration(t);
        t.initWithAction(this._innerAction.clone(), this._times);
        return t;
      },
      startWithTarget: function (t) {
        this._total = 0;
        this._nextDt = this._innerAction._duration / this._duration;
        cc.ActionInterval.prototype.startWithTarget.call(this, t);
        this._innerAction.startWithTarget(t);
      },
      stop: function () {
        this._innerAction.stop();
        cc.Action.prototype.stop.call(this);
      },
      update: function (t) {
        t = this._computeEaseTime(t);
        var e = this._innerAction;
        var i = this._duration;
        var n = this._times;
        var r = this._nextDt;
        if (t >= r) {
          for (; t > r && this._total < n;) {
            e.update(1);
            this._total++;
            e.stop();
            e.startWithTarget(this.target);
            r += e._duration / i;
            this._nextDt = r > 1 ? 1 : r;
          }
          if (t >= 1 && this._total < n) {
            e.update(1);
            this._total++;
          }
          if (!this._actionInstant) {
            if (this._total === n) {
              e.stop();
            } else {
              e.update(t - (r - e._duration / i));
            }
          }
        } else {
          e.update(t * n % 1);
        }
      },
      isDone: function () {
        return this._total === this._times;
      },
      reverse: function () {
        var t = new cc.Repeat(this._innerAction.reverse(), this._times);
        this._cloneDecoration(t);
        this._reverseEaseList(t);
        return t;
      },
      setInnerAction: function (t) {
        if (this._innerAction !== t) {
          this._innerAction = t;
        }
      },
      getInnerAction: function () {
        return this._innerAction;
      }
    });
    cc.repeat = function (t, e) {
      return new cc.Repeat(t, e);
    };
    cc.repeatForever = function (t) {
      return new cc.RepeatForever(t);
    };
    cc.RepeatForever = cc.Class({
      name: "cc.RepeatForever",
      extends: cc.ActionInterval,
      ctor: function (t) {
        this._innerAction = null;
        if (t) {
          this.initWithAction(t);
        }
      },
      initWithAction: function (t) {
        return !!t && (this._innerAction = t, true);
      },
      clone: function () {
        var t = new cc.RepeatForever();
        this._cloneDecoration(t);
        t.initWithAction(this._innerAction.clone());
        return t;
      },
      startWithTarget: function (t) {
        cc.ActionInterval.prototype.startWithTarget.call(this, t);
        this._innerAction.startWithTarget(t);
      },
      step: function (t) {
        var e = this._innerAction;
        e.step(t);
        if (e.isDone()) {
          e.startWithTarget(this.target);
          e.step(e.getElapsed() - e._duration);
        }
      },
      isDone: function () {
        return false;
      },
      reverse: function () {
        var t = new cc.RepeatForever(this._innerAction.reverse());
        this._cloneDecoration(t);
        this._reverseEaseList(t);
        return t;
      },
      setInnerAction: function (t) {
        if (this._innerAction !== t) {
          this._innerAction = t;
        }
      },
      getInnerAction: function () {
        return this._innerAction;
      }
    });
    cc.repeatForever = function (t) {
      return new cc.RepeatForever(t);
    };
    cc.Spawn = cc.Class({
      name: "cc.Spawn",
      extends: cc.ActionInterval,
      ctor: function (t) {
        this._one = null;
        this._two = null;
        var e = t instanceof Array ? t : arguments;
        if (1 !== e.length) {
          var i = e.length - 1;
          if (i >= 0) {
            e[i];
          }
          if (i >= 0) {
            var n;
            var r = e[0];
            for (var s = 1; s < i; s++) {
              if (e[s]) {
                n = r;
                r = cc.Spawn._actionOneTwo(n, e[s]);
              }
            }
            this.initWithTwoActions(r, e[i]);
          }
        }
      },
      initWithTwoActions: function (t, e) {
        if (!t || !e) {
          return false;
        }
        var i = false;
        var n = t._duration;
        var r = e._duration;
        if (this.initWithDuration(Math.max(n, r))) {
          this._one = t;
          this._two = e;
          if (n > r) {
            this._two = cc.Sequence._actionOneTwo(e, cc.delayTime(n - r));
          } else if (n < r) {
            this._one = cc.Sequence._actionOneTwo(t, cc.delayTime(r - n));
          }
          i = true;
        }
        return i;
      },
      clone: function () {
        var t = new cc.Spawn();
        this._cloneDecoration(t);
        t.initWithTwoActions(this._one.clone(), this._two.clone());
        return t;
      },
      startWithTarget: function (t) {
        cc.ActionInterval.prototype.startWithTarget.call(this, t);
        this._one.startWithTarget(t);
        this._two.startWithTarget(t);
      },
      stop: function () {
        this._one.stop();
        this._two.stop();
        cc.Action.prototype.stop.call(this);
      },
      update: function (t) {
        t = this._computeEaseTime(t);
        if (this._one) {
          this._one.update(t);
        }
        if (this._two) {
          this._two.update(t);
        }
      },
      reverse: function () {
        var t = cc.Spawn._actionOneTwo(this._one.reverse(), this._two.reverse());
        this._cloneDecoration(t);
        this._reverseEaseList(t);
        return t;
      }
    });
    cc.spawn = function (t) {
      var e = t instanceof Array ? t : arguments;
      if (1 === e.length) {
        return null;
      }
      if (e.length > 0) {
        e[e.length - 1];
      }
      var i = e[0];
      for (var n = 1; n < e.length; n++) {
        if (null != e[n]) {
          i = cc.Spawn._actionOneTwo(i, e[n]);
        }
      }
      return i;
    };
    cc.Spawn._actionOneTwo = function (t, e) {
      var i = new cc.Spawn();
      i.initWithTwoActions(t, e);
      return i;
    };
    cc.RotateTo = cc.Class({
      name: "cc.RotateTo",
      extends: cc.ActionInterval,
      statics: {
        _reverse: false
      },
      ctor: function (t, e) {
        this._startAngle = 0;
        this._dstAngle = 0;
        this._angle = 0;
        if (undefined !== e) {
          this.initWithDuration(t, e);
        }
      },
      initWithDuration: function (t, e) {
        return !!cc.ActionInterval.prototype.initWithDuration.call(this, t) && (this._dstAngle = e, true);
      },
      clone: function () {
        var t = new cc.RotateTo();
        this._cloneDecoration(t);
        t.initWithDuration(this._duration, this._dstAngle);
        return t;
      },
      startWithTarget: function (t) {
        cc.ActionInterval.prototype.startWithTarget.call(this, t);
        var e = t.angle % 360;
        var i = cc.RotateTo._reverse ? this._dstAngle - e : this._dstAngle + e;
        if (i > 180) {
          i -= 360;
        }
        if (i < -180) {
          i += 360;
        }
        this._startAngle = e;
        this._angle = cc.RotateTo._reverse ? i : -i;
      },
      reverse: function () {},
      update: function (t) {
        t = this._computeEaseTime(t);
        if (this.target) {
          this.target.angle = this._startAngle + this._angle * t;
        }
      }
    });
    cc.rotateTo = function (t, e) {
      return new cc.RotateTo(t, e);
    };
    cc.RotateBy = cc.Class({
      name: "cc.RotateBy",
      extends: cc.ActionInterval,
      statics: {
        _reverse: false
      },
      ctor: function (t, e) {
        e *= cc.RotateBy._reverse ? 1 : -1;
        this._deltaAngle = 0;
        this._startAngle = 0;
        if (undefined !== e) {
          this.initWithDuration(t, e);
        }
      },
      initWithDuration: function (t, e) {
        return !!cc.ActionInterval.prototype.initWithDuration.call(this, t) && (this._deltaAngle = e, true);
      },
      clone: function () {
        var t = new cc.RotateBy();
        this._cloneDecoration(t);
        t.initWithDuration(this._duration, this._deltaAngle);
        return t;
      },
      startWithTarget: function (t) {
        cc.ActionInterval.prototype.startWithTarget.call(this, t);
        this._startAngle = t.angle;
      },
      update: function (t) {
        t = this._computeEaseTime(t);
        if (this.target) {
          this.target.angle = this._startAngle + this._deltaAngle * t;
        }
      },
      reverse: function () {
        var t = new cc.RotateBy();
        t.initWithDuration(this._duration, -this._deltaAngle);
        this._cloneDecoration(t);
        this._reverseEaseList(t);
        return t;
      }
    });
    cc.rotateBy = function (t, e) {
      return new cc.RotateBy(t, e);
    };
    cc.MoveBy = cc.Class({
      name: "cc.MoveBy",
      extends: cc.ActionInterval,
      ctor: function (t, e, i) {
        this._positionDelta = cc.v2(0, 0);
        this._startPosition = cc.v2(0, 0);
        this._previousPosition = cc.v2(0, 0);
        if (undefined !== e) {
          cc.MoveBy.prototype.initWithDuration.call(this, t, e, i);
        }
      },
      initWithDuration: function (t, e, i) {
        return !!cc.ActionInterval.prototype.initWithDuration.call(this, t) && (undefined !== e.x && (i = e.y, e = e.x), this._positionDelta.x = e, this._positionDelta.y = i, true);
      },
      clone: function () {
        var t = new cc.MoveBy();
        this._cloneDecoration(t);
        t.initWithDuration(this._duration, this._positionDelta);
        return t;
      },
      startWithTarget: function (t) {
        cc.ActionInterval.prototype.startWithTarget.call(this, t);
        var e = t.x;
        var i = t.y;
        this._previousPosition.x = e;
        this._previousPosition.y = i;
        this._startPosition.x = e;
        this._startPosition.y = i;
      },
      update: function (t) {
        t = this._computeEaseTime(t);
        if (this.target) {
          var e = this._positionDelta.x * t;
          var i = this._positionDelta.y * t;
          var n = this._startPosition;
          if (cc.macro.ENABLE_STACKABLE_ACTIONS) {
            var r = this.target.x;
            var s = this.target.y;
            var a = this._previousPosition;
            n.x = n.x + r - a.x;
            n.y = n.y + s - a.y;
            e += n.x;
            i += n.y;
            a.x = e;
            a.y = i;
            this.target.setPosition(e, i);
          } else {
            this.target.setPosition(n.x + e, n.y + i);
          }
        }
      },
      reverse: function () {
        var t = new cc.MoveBy(this._duration, cc.v2(-this._positionDelta.x, -this._positionDelta.y));
        this._cloneDecoration(t);
        this._reverseEaseList(t);
        return t;
      }
    });
    cc.moveBy = function (t, e, i) {
      return new cc.MoveBy(t, e, i);
    };
    cc.MoveTo = cc.Class({
      name: "cc.MoveTo",
      extends: cc.MoveBy,
      ctor: function (t, e, i) {
        this._endPosition = cc.v2(0, 0);
        if (undefined !== e) {
          this.initWithDuration(t, e, i);
        }
      },
      initWithDuration: function (t, e, i) {
        return !!cc.MoveBy.prototype.initWithDuration.call(this, t, e, i) && (undefined !== e.x && (i = e.y, e = e.x), this._endPosition.x = e, this._endPosition.y = i, true);
      },
      clone: function () {
        var t = new cc.MoveTo();
        this._cloneDecoration(t);
        t.initWithDuration(this._duration, this._endPosition);
        return t;
      },
      startWithTarget: function (t) {
        cc.MoveBy.prototype.startWithTarget.call(this, t);
        this._positionDelta.x = this._endPosition.x - t.x;
        this._positionDelta.y = this._endPosition.y - t.y;
      }
    });
    cc.moveTo = function (t, e, i) {
      return new cc.MoveTo(t, e, i);
    };
    cc.SkewTo = cc.Class({
      name: "cc.SkewTo",
      extends: cc.ActionInterval,
      ctor: function (t, e, i) {
        this._skewX = 0;
        this._skewY = 0;
        this._startSkewX = 0;
        this._startSkewY = 0;
        this._endSkewX = 0;
        this._endSkewY = 0;
        this._deltaX = 0;
        this._deltaY = 0;
        if (undefined !== i) {
          cc.SkewTo.prototype.initWithDuration.call(this, t, e, i);
        }
      },
      initWithDuration: function (t, e, i) {
        var n = false;
        if (cc.ActionInterval.prototype.initWithDuration.call(this, t)) {
          this._endSkewX = e;
          this._endSkewY = i;
          n = true;
        }
        return n;
      },
      clone: function () {
        var t = new cc.SkewTo();
        this._cloneDecoration(t);
        t.initWithDuration(this._duration, this._endSkewX, this._endSkewY);
        return t;
      },
      startWithTarget: function (t) {
        cc.ActionInterval.prototype.startWithTarget.call(this, t);
        this._startSkewX = t.skewX % 180;
        this._deltaX = this._endSkewX - this._startSkewX;
        if (this._deltaX > 180) {
          this._deltaX -= 360;
        }
        if (this._deltaX < -180) {
          this._deltaX += 360;
        }
        this._startSkewY = t.skewY % 360;
        this._deltaY = this._endSkewY - this._startSkewY;
        if (this._deltaY > 180) {
          this._deltaY -= 360;
        }
        if (this._deltaY < -180) {
          this._deltaY += 360;
        }
      },
      update: function (t) {
        t = this._computeEaseTime(t);
        this.target.skewX = this._startSkewX + this._deltaX * t;
        this.target.skewY = this._startSkewY + this._deltaY * t;
      }
    });
    cc.skewTo = function (t, e, i) {
      return new cc.SkewTo(t, e, i);
    };
    cc.SkewBy = cc.Class({
      name: "cc.SkewBy",
      extends: cc.SkewTo,
      ctor: function (t, e, i) {
        if (undefined !== i) {
          this.initWithDuration(t, e, i);
        }
      },
      initWithDuration: function (t, e, i) {
        var n = false;
        if (cc.SkewTo.prototype.initWithDuration.call(this, t, e, i)) {
          this._skewX = e;
          this._skewY = i;
          n = true;
        }
        return n;
      },
      clone: function () {
        var t = new cc.SkewBy();
        this._cloneDecoration(t);
        t.initWithDuration(this._duration, this._skewX, this._skewY);
        return t;
      },
      startWithTarget: function (t) {
        cc.SkewTo.prototype.startWithTarget.call(this, t);
        this._deltaX = this._skewX;
        this._deltaY = this._skewY;
        this._endSkewX = this._startSkewX + this._deltaX;
        this._endSkewY = this._startSkewY + this._deltaY;
      },
      reverse: function () {
        var t = new cc.SkewBy(this._duration, -this._skewX, -this._skewY);
        this._cloneDecoration(t);
        this._reverseEaseList(t);
        return t;
      }
    });
    cc.skewBy = function (t, e, i) {
      return new cc.SkewBy(t, e, i);
    };
    cc.JumpBy = cc.Class({
      name: "cc.JumpBy",
      extends: cc.ActionInterval,
      ctor: function (t, e, i, n, r) {
        this._startPosition = cc.v2(0, 0);
        this._previousPosition = cc.v2(0, 0);
        this._delta = cc.v2(0, 0);
        this._height = 0;
        this._jumps = 0;
        if (undefined !== n) {
          cc.JumpBy.prototype.initWithDuration.call(this, t, e, i, n, r);
        }
      },
      initWithDuration: function (t, e, i, n, r) {
        return !!cc.ActionInterval.prototype.initWithDuration.call(this, t) && (undefined === r && (r = n, n = i, i = e.y, e = e.x), this._delta.x = e, this._delta.y = i, this._height = n, this._jumps = r, true);
      },
      clone: function () {
        var t = new cc.JumpBy();
        this._cloneDecoration(t);
        t.initWithDuration(this._duration, this._delta, this._height, this._jumps);
        return t;
      },
      startWithTarget: function (t) {
        cc.ActionInterval.prototype.startWithTarget.call(this, t);
        var e = t.x;
        var i = t.y;
        this._previousPosition.x = e;
        this._previousPosition.y = i;
        this._startPosition.x = e;
        this._startPosition.y = i;
      },
      update: function (t) {
        t = this._computeEaseTime(t);
        if (this.target) {
          var e = t * this._jumps % 1;
          var i = 4 * this._height * e * (1 - e);
          i += this._delta.y * t;
          var n = this._delta.x * t;
          var r = this._startPosition;
          if (cc.macro.ENABLE_STACKABLE_ACTIONS) {
            var s = this.target.x;
            var a = this.target.y;
            var o = this._previousPosition;
            r.x = r.x + s - o.x;
            r.y = r.y + a - o.y;
            n += r.x;
            i += r.y;
            o.x = n;
            o.y = i;
            this.target.setPosition(n, i);
          } else {
            this.target.setPosition(r.x + n, r.y + i);
          }
        }
      },
      reverse: function () {
        var t = new cc.JumpBy(this._duration, cc.v2(-this._delta.x, -this._delta.y), this._height, this._jumps);
        this._cloneDecoration(t);
        this._reverseEaseList(t);
        return t;
      }
    });
    cc.jumpBy = function (t, e, i, n, r) {
      return new cc.JumpBy(t, e, i, n, r);
    };
    cc.JumpTo = cc.Class({
      name: "cc.JumpTo",
      extends: cc.JumpBy,
      ctor: function (t, e, i, n, r) {
        this._endPosition = cc.v2(0, 0);
        if (undefined !== n) {
          this.initWithDuration(t, e, i, n, r);
        }
      },
      initWithDuration: function (t, e, i, n, r) {
        return !!cc.JumpBy.prototype.initWithDuration.call(this, t, e, i, n, r) && (undefined === r && (i = e.y, e = e.x), this._endPosition.x = e, this._endPosition.y = i, true);
      },
      startWithTarget: function (t) {
        cc.JumpBy.prototype.startWithTarget.call(this, t);
        this._delta.x = this._endPosition.x - this._startPosition.x;
        this._delta.y = this._endPosition.y - this._startPosition.y;
      },
      clone: function () {
        var t = new cc.JumpTo();
        this._cloneDecoration(t);
        t.initWithDuration(this._duration, this._endPosition, this._height, this._jumps);
        return t;
      }
    });
    cc.jumpTo = function (t, e, i, n, r) {
      return new cc.JumpTo(t, e, i, n, r);
    };
    cc.BezierBy = cc.Class({
      name: "cc.BezierBy",
      extends: cc.ActionInterval,
      ctor: function (t, e) {
        this._config = [];
        this._startPosition = cc.v2(0, 0);
        this._previousPosition = cc.v2(0, 0);
        if (e) {
          cc.BezierBy.prototype.initWithDuration.call(this, t, e);
        }
      },
      initWithDuration: function (t, e) {
        return !!cc.ActionInterval.prototype.initWithDuration.call(this, t) && (this._config = e, true);
      },
      clone: function () {
        var t = new cc.BezierBy();
        this._cloneDecoration(t);
        var e = [];
        for (var i = 0; i < this._config.length; i++) {
          var n = this._config[i];
          e.push(cc.v2(n.x, n.y));
        }
        t.initWithDuration(this._duration, e);
        return t;
      },
      startWithTarget: function (t) {
        cc.ActionInterval.prototype.startWithTarget.call(this, t);
        var e = t.x;
        var i = t.y;
        this._previousPosition.x = e;
        this._previousPosition.y = i;
        this._startPosition.x = e;
        this._startPosition.y = i;
      },
      update: function (e) {
        e = this._computeEaseTime(e);
        if (this.target) {
          var i = this._config;
          var n = i[0].x;
          var r = i[1].x;
          var s = i[2].x;
          var a = i[0].y;
          var o = i[1].y;
          var c = i[2].y;
          var l = t(0, n, r, s, e);
          var h = t(0, a, o, c, e);
          var u = this._startPosition;
          if (cc.macro.ENABLE_STACKABLE_ACTIONS) {
            var f = this.target.x;
            var d = this.target.y;
            var _ = this._previousPosition;
            u.x = u.x + f - _.x;
            u.y = u.y + d - _.y;
            l += u.x;
            h += u.y;
            _.x = l;
            _.y = h;
            this.target.setPosition(l, h);
          } else {
            this.target.setPosition(u.x + l, u.y + h);
          }
        }
      },
      reverse: function () {
        var t = this._config;
        var e = t[0].x;
        var i = t[0].y;
        var n = t[1].x;
        var r = t[1].y;
        var s = t[2].x;
        var a = t[2].y;
        var o = [cc.v2(n - s, r - a), cc.v2(e - s, i - a), cc.v2(-s, -a)];
        var c = new cc.BezierBy(this._duration, o);
        this._cloneDecoration(c);
        this._reverseEaseList(c);
        return c;
      }
    });
    cc.bezierBy = function (t, e) {
      return new cc.BezierBy(t, e);
    };
    cc.BezierTo = cc.Class({
      name: "cc.BezierTo",
      extends: cc.BezierBy,
      ctor: function (t, e) {
        this._toConfig = [];
        if (e) {
          this.initWithDuration(t, e);
        }
      },
      initWithDuration: function (t, e) {
        return !!cc.ActionInterval.prototype.initWithDuration.call(this, t) && (this._toConfig = e, true);
      },
      clone: function () {
        var t = new cc.BezierTo();
        this._cloneDecoration(t);
        t.initWithDuration(this._duration, this._toConfig);
        return t;
      },
      startWithTarget: function (t) {
        cc.BezierBy.prototype.startWithTarget.call(this, t);
        var e = this._startPosition;
        var i = this._toConfig;
        var n = this._config;
        n[0] = i[0].sub(e);
        n[1] = i[1].sub(e);
        n[2] = i[2].sub(e);
      }
    });
    cc.bezierTo = function (t, e) {
      return new cc.BezierTo(t, e);
    };
    cc.ScaleTo = cc.Class({
      name: "cc.ScaleTo",
      extends: cc.ActionInterval,
      ctor: function (t, e, i) {
        this._scaleX = 1;
        this._scaleY = 1;
        this._startScaleX = 1;
        this._startScaleY = 1;
        this._endScaleX = 0;
        this._endScaleY = 0;
        this._deltaX = 0;
        this._deltaY = 0;
        if (undefined !== e) {
          cc.ScaleTo.prototype.initWithDuration.call(this, t, e, i);
        }
      },
      initWithDuration: function (t, e, i) {
        return !!cc.ActionInterval.prototype.initWithDuration.call(this, t) && (this._endScaleX = e, this._endScaleY = null != i ? i : e, true);
      },
      clone: function () {
        var t = new cc.ScaleTo();
        this._cloneDecoration(t);
        t.initWithDuration(this._duration, this._endScaleX, this._endScaleY);
        return t;
      },
      startWithTarget: function (t) {
        cc.ActionInterval.prototype.startWithTarget.call(this, t);
        this._startScaleX = t.scaleX;
        this._startScaleY = t.scaleY;
        this._deltaX = this._endScaleX - this._startScaleX;
        this._deltaY = this._endScaleY - this._startScaleY;
      },
      update: function (t) {
        t = this._computeEaseTime(t);
        if (this.target) {
          this.target.scaleX = this._startScaleX + this._deltaX * t;
          this.target.scaleY = this._startScaleY + this._deltaY * t;
        }
      }
    });
    cc.scaleTo = function (t, e, i) {
      return new cc.ScaleTo(t, e, i);
    };
    cc.ScaleBy = cc.Class({
      name: "cc.ScaleBy",
      extends: cc.ScaleTo,
      startWithTarget: function (t) {
        cc.ScaleTo.prototype.startWithTarget.call(this, t);
        this._deltaX = this._startScaleX * this._endScaleX - this._startScaleX;
        this._deltaY = this._startScaleY * this._endScaleY - this._startScaleY;
      },
      reverse: function () {
        var t = new cc.ScaleBy(this._duration, 1 / this._endScaleX, 1 / this._endScaleY);
        this._cloneDecoration(t);
        this._reverseEaseList(t);
        return t;
      },
      clone: function () {
        var t = new cc.ScaleBy();
        this._cloneDecoration(t);
        t.initWithDuration(this._duration, this._endScaleX, this._endScaleY);
        return t;
      }
    });
    cc.scaleBy = function (t, e, i) {
      return new cc.ScaleBy(t, e, i);
    };
    cc.Blink = cc.Class({
      name: "cc.Blink",
      extends: cc.ActionInterval,
      ctor: function (t, e) {
        this._times = 0;
        this._originalState = false;
        if (undefined !== e) {
          this.initWithDuration(t, e);
        }
      },
      initWithDuration: function (t, e) {
        return !!cc.ActionInterval.prototype.initWithDuration.call(this, t) && (this._times = e, true);
      },
      clone: function () {
        var t = new cc.Blink();
        this._cloneDecoration(t);
        t.initWithDuration(this._duration, this._times);
        return t;
      },
      update: function (t) {
        t = this._computeEaseTime(t);
        if (this.target && !this.isDone()) {
          var e = 1 / this._times;
          var i = t % e;
          this.target.opacity = i > e / 2 ? 255 : 0;
        }
      },
      startWithTarget: function (t) {
        cc.ActionInterval.prototype.startWithTarget.call(this, t);
        this._originalState = t.opacity;
      },
      stop: function () {
        this.target.opacity = this._originalState;
        cc.ActionInterval.prototype.stop.call(this);
      },
      reverse: function () {
        var t = new cc.Blink(this._duration, this._times);
        this._cloneDecoration(t);
        this._reverseEaseList(t);
        return t;
      }
    });
    cc.blink = function (t, e) {
      return new cc.Blink(t, e);
    };
    cc.FadeTo = cc.Class({
      name: "cc.FadeTo",
      extends: cc.ActionInterval,
      ctor: function (t, e) {
        this._toOpacity = 0;
        this._fromOpacity = 0;
        if (undefined !== e) {
          cc.FadeTo.prototype.initWithDuration.call(this, t, e);
        }
      },
      initWithDuration: function (t, e) {
        return !!cc.ActionInterval.prototype.initWithDuration.call(this, t) && (this._toOpacity = e, true);
      },
      clone: function () {
        var t = new cc.FadeTo();
        this._cloneDecoration(t);
        t.initWithDuration(this._duration, this._toOpacity);
        return t;
      },
      update: function (t) {
        t = this._computeEaseTime(t);
        var e = undefined !== this._fromOpacity ? this._fromOpacity : 255;
        this.target.opacity = e + (this._toOpacity - e) * t;
      },
      startWithTarget: function (t) {
        cc.ActionInterval.prototype.startWithTarget.call(this, t);
        this._fromOpacity = t.opacity;
      }
    });
    cc.fadeTo = function (t, e) {
      return new cc.FadeTo(t, e);
    };
    cc.FadeIn = cc.Class({
      name: "cc.FadeIn",
      extends: cc.FadeTo,
      ctor: function (t) {
        if (null == t) {
          t = 0;
        }
        this._reverseAction = null;
        this.initWithDuration(t, 255);
      },
      reverse: function () {
        var t = new cc.FadeOut();
        t.initWithDuration(this._duration, 0);
        this._cloneDecoration(t);
        this._reverseEaseList(t);
        return t;
      },
      clone: function () {
        var t = new cc.FadeIn();
        this._cloneDecoration(t);
        t.initWithDuration(this._duration, this._toOpacity);
        return t;
      },
      startWithTarget: function (t) {
        if (this._reverseAction) {
          this._toOpacity = this._reverseAction._fromOpacity;
        }
        cc.FadeTo.prototype.startWithTarget.call(this, t);
      }
    });
    cc.fadeIn = function (t) {
      return new cc.FadeIn(t);
    };
    cc.FadeOut = cc.Class({
      name: "cc.FadeOut",
      extends: cc.FadeTo,
      ctor: function (t) {
        if (null == t) {
          t = 0;
        }
        this._reverseAction = null;
        this.initWithDuration(t, 0);
      },
      reverse: function () {
        var t = new cc.FadeIn();
        t._reverseAction = this;
        t.initWithDuration(this._duration, 255);
        this._cloneDecoration(t);
        this._reverseEaseList(t);
        return t;
      },
      clone: function () {
        var t = new cc.FadeOut();
        this._cloneDecoration(t);
        t.initWithDuration(this._duration, this._toOpacity);
        return t;
      }
    });
    cc.fadeOut = function (t) {
      return new cc.FadeOut(t);
    };
    cc.TintTo = cc.Class({
      name: "cc.TintTo",
      extends: cc.ActionInterval,
      ctor: function (t, e, i, n) {
        this._to = cc.color(0, 0, 0);
        this._from = cc.color(0, 0, 0);
        if (e instanceof cc.Color) {
          n = e.b;
          i = e.g;
          e = e.r;
        }
        if (undefined !== n) {
          this.initWithDuration(t, e, i, n);
        }
      },
      initWithDuration: function (t, e, i, n) {
        return !!cc.ActionInterval.prototype.initWithDuration.call(this, t) && (this._to = cc.color(e, i, n), true);
      },
      clone: function () {
        var t = new cc.TintTo();
        this._cloneDecoration(t);
        var e = this._to;
        t.initWithDuration(this._duration, e.r, e.g, e.b);
        return t;
      },
      startWithTarget: function (t) {
        cc.ActionInterval.prototype.startWithTarget.call(this, t);
        this._from = this.target.color;
      },
      update: function (t) {
        t = this._computeEaseTime(t);
        var e = this._from;
        var i = this._to;
        if (e) {
          this.target.color = cc.color(e.r + (i.r - e.r) * t, e.g + (i.g - e.g) * t, e.b + (i.b - e.b) * t);
        }
      }
    });
    cc.tintTo = function (t, e, i, n) {
      return new cc.TintTo(t, e, i, n);
    };
    cc.TintBy = cc.Class({
      name: "cc.TintBy",
      extends: cc.ActionInterval,
      ctor: function (t, e, i, n) {
        this._deltaR = 0;
        this._deltaG = 0;
        this._deltaB = 0;
        this._fromR = 0;
        this._fromG = 0;
        this._fromB = 0;
        if (undefined !== n) {
          this.initWithDuration(t, e, i, n);
        }
      },
      initWithDuration: function (t, e, i, n) {
        return !!cc.ActionInterval.prototype.initWithDuration.call(this, t) && (this._deltaR = e, this._deltaG = i, this._deltaB = n, true);
      },
      clone: function () {
        var t = new cc.TintBy();
        this._cloneDecoration(t);
        t.initWithDuration(this._duration, this._deltaR, this._deltaG, this._deltaB);
        return t;
      },
      startWithTarget: function (t) {
        cc.ActionInterval.prototype.startWithTarget.call(this, t);
        var e = t.color;
        this._fromR = e.r;
        this._fromG = e.g;
        this._fromB = e.b;
      },
      update: function (t) {
        t = this._computeEaseTime(t);
        this.target.color = cc.color(this._fromR + this._deltaR * t, this._fromG + this._deltaG * t, this._fromB + this._deltaB * t);
      },
      reverse: function () {
        var t = new cc.TintBy(this._duration, -this._deltaR, -this._deltaG, -this._deltaB);
        this._cloneDecoration(t);
        this._reverseEaseList(t);
        return t;
      }
    });
    cc.tintBy = function (t, e, i, n) {
      return new cc.TintBy(t, e, i, n);
    };
    cc.DelayTime = cc.Class({
      name: "cc.DelayTime",
      extends: cc.ActionInterval,
      update: function () {},
      reverse: function () {
        var t = new cc.DelayTime(this._duration);
        this._cloneDecoration(t);
        this._reverseEaseList(t);
        return t;
      },
      clone: function () {
        var t = new cc.DelayTime();
        this._cloneDecoration(t);
        t.initWithDuration(this._duration);
        return t;
      }
    });
    cc.delayTime = function (t) {
      return new cc.DelayTime(t);
    };
    cc.ReverseTime = cc.Class({
      name: "cc.ReverseTime",
      extends: cc.ActionInterval,
      ctor: function (t) {
        this._other = null;
        if (t) {
          this.initWithAction(t);
        }
      },
      initWithAction: function (t) {
        return !!t && t !== this._other && !!cc.ActionInterval.prototype.initWithDuration.call(this, t._duration) && (this._other = t, true);
      },
      clone: function () {
        var t = new cc.ReverseTime();
        this._cloneDecoration(t);
        t.initWithAction(this._other.clone());
        return t;
      },
      startWithTarget: function (t) {
        cc.ActionInterval.prototype.startWithTarget.call(this, t);
        this._other.startWithTarget(t);
      },
      update: function (t) {
        t = this._computeEaseTime(t);
        if (this._other) {
          this._other.update(1 - t);
        }
      },
      reverse: function () {
        return this._other.clone();
      },
      stop: function () {
        this._other.stop();
        cc.Action.prototype.stop.call(this);
      }
    });
    cc.reverseTime = function (t) {
      return new cc.ReverseTime(t);
    };
    cc.TargetedAction = cc.Class({
      name: "cc.TargetedAction",
      extends: cc.ActionInterval,
      ctor: function (t, e) {
        this._action = null;
        this._forcedTarget = null;
        if (e) {
          this.initWithTarget(t, e);
        }
      },
      initWithTarget: function (t, e) {
        return !!this.initWithDuration(e._duration) && (this._forcedTarget = t, this._action = e, true);
      },
      clone: function () {
        var t = new cc.TargetedAction();
        this._cloneDecoration(t);
        t.initWithTarget(this._forcedTarget, this._action.clone());
        return t;
      },
      startWithTarget: function (t) {
        cc.ActionInterval.prototype.startWithTarget.call(this, t);
        this._action.startWithTarget(this._forcedTarget);
      },
      stop: function () {
        this._action.stop();
      },
      update: function (t) {
        t = this._computeEaseTime(t);
        this._action.update(t);
      },
      getForcedTarget: function () {
        return this._forcedTarget;
      },
      setForcedTarget: function (t) {
        if (this._forcedTarget !== t) {
          this._forcedTarget = t;
        }
      }
    });
    cc.targetedAction = function (t, e) {
      return new cc.TargetedAction(t, e);
    };
  }, {}],
  6: [function (t) {
    "use strict";

    t("../core/platform/CCClass");
    var e = t("../core/platform/js");
    var i = function () {
      this.actions = [];
      this.target = null;
      this.actionIndex = 0;
      this.currentAction = null;
      this.paused = false;
      this.lock = false;
    };
    cc.ActionManager = function () {
      this._hashTargets = e.createMap(true);
      this._arrayTargets = [];
      this._currentTarget = null;
      if (cc.director._scheduler) {
        cc.director._scheduler.enableForTarget(this);
      }
    };
    cc.ActionManager.prototype = {
      constructor: cc.ActionManager,
      _elementPool: [],
      _searchElementByTarget: function (t, e) {
        for (var i = 0; i < t.length; i++) {
          if (e === t[i].target) {
            return t[i];
          }
        }
        return null;
      },
      _getElement: function (t, e) {
        var n = this._elementPool.pop();
        if (!n) {
          n = new i();
        }
        n.target = t;
        n.paused = !!e;
        return n;
      },
      _putElement: function (t) {
        t.actions.length = 0;
        t.actionIndex = 0;
        t.currentAction = null;
        t.paused = false;
        t.target = null;
        t.lock = false;
        this._elementPool.push(t);
      },
      addAction: function (t, e, i) {
        if (t && e) {
          var n = this._hashTargets[e._id];
          if (n) {
            if (!n.actions) {
              n.actions = [];
            }
          } else {
            n = this._getElement(e, i);
            this._hashTargets[e._id] = n;
            this._arrayTargets.push(n);
          }
          n.actions.push(t);
          t.startWithTarget(e);
        }
      },
      removeAllActions: function () {
        var t = this._arrayTargets;
        for (var i = 0; i < t.length; i++) {
          var n = t[i];
          if (n) {
            this._putElement(n);
          }
        }
        this._arrayTargets.length = 0;
        this._hashTargets = e.createMap(true);
      },
      removeAllActionsFromTarget: function (t) {
        if (null != t) {
          var e = this._hashTargets[t._id];
          if (e) {
            e.actions.length = 0;
            this._deleteHashElement(e);
          }
        }
      },
      removeAction: function (t) {
        if (t) {
          var e = t.getOriginalTarget();
          var i = this._hashTargets[e._id];
          if (i) {
            for (var n = 0; n < i.actions.length; n++) {
              if (i.actions[n] === t) {
                i.actions.splice(n, 1);
                if (i.actionIndex >= n) {
                  i.actionIndex--;
                }
                break;
              }
            }
          }
        }
      },
      _removeActionByTag: function (t, e, i) {
        var n = 0;
        for (var r = e.actions.length; n < r; ++n) {
          var s = e.actions[n];
          if (s && s.getTag() === t) {
            if (i && s.getOriginalTarget() !== i) {
              continue;
            }
            this._removeActionAtIndex(n, e);
            break;
          }
        }
      },
      _removeAllActionsByTag: function (t, e, i) {
        for (var n = e.actions.length - 1; n >= 0; --n) {
          var r = e.actions[n];
          if (r && r.getTag() === t) {
            if (i && r.getOriginalTarget() !== i) {
              continue;
            }
            this._removeActionAtIndex(n, e);
          }
        }
      },
      removeActionByTag: function (t, e) {
        cc.Action.TAG_INVALID;
        var i = this._hashTargets;
        if (e) {
          var n = i[e._id];
          if (n) {
            this._removeActionByTag(t, n, e);
          }
        } else {
          for (var r in i) {
            var s = i[r];
            this._removeActionByTag(t, s);
          }
        }
      },
      removeAllActionsByTag: function (t, e) {
        cc.Action.TAG_INVALID;
        var i = this._hashTargets;
        if (e) {
          var n = i[e._id];
          if (n) {
            this._removeAllActionsByTag(t, n, e);
          }
        } else {
          for (var r in i) {
            var s = i[r];
            this._removeAllActionsByTag(t, s);
          }
        }
      },
      getActionByTag: function (t, e) {
        cc.Action.TAG_INVALID;
        var i = this._hashTargets[e._id];
        if (i && null != i.actions) {
          for (var n = 0; n < i.actions.length; ++n) {
            var r = i.actions[n];
            if (r && r.getTag() === t) {
              return r;
            }
          }
        }
        return null;
      },
      getNumberOfRunningActionsInTarget: function (t) {
        var e = this._hashTargets[t._id];
        return e && e.actions ? e.actions.length : 0;
      },
      pauseTarget: function (t) {
        var e = this._hashTargets[t._id];
        if (e) {
          e.paused = true;
        }
      },
      resumeTarget: function (t) {
        var e = this._hashTargets[t._id];
        if (e) {
          e.paused = false;
        }
      },
      pauseAllRunningActions: function () {
        var t = [];
        var e = this._arrayTargets;
        for (var i = 0; i < e.length; i++) {
          var n = e[i];
          if (n && !n.paused) {
            n.paused = true;
            t.push(n.target);
          }
        }
        return t;
      },
      resumeTargets: function (t) {
        if (t) {
          for (var e = 0; e < t.length; e++) {
            if (t[e]) {
              this.resumeTarget(t[e]);
            }
          }
        }
      },
      pauseTargets: function (t) {
        if (t) {
          for (var e = 0; e < t.length; e++) {
            if (t[e]) {
              this.pauseTarget(t[e]);
            }
          }
        }
      },
      purgeSharedManager: function () {
        cc.director.getScheduler().unscheduleUpdate(this);
      },
      _removeActionAtIndex: function (t, e) {
        e.actions[t];
        e.actions.splice(t, 1);
        if (e.actionIndex >= t) {
          e.actionIndex--;
        }
        if (0 === e.actions.length) {
          this._deleteHashElement(e);
        }
      },
      _deleteHashElement: function (t) {
        var e = false;
        if (t && !t.lock && this._hashTargets[t.target._id]) {
          delete this._hashTargets[t.target._id];
          var i = this._arrayTargets;
          var n = 0;
          for (var r = i.length; n < r; n++) {
            if (i[n] === t) {
              i.splice(n, 1);
              break;
            }
          }
          this._putElement(t);
          e = true;
        }
        return e;
      },
      update: function (t) {
        var e;
        var i = this._arrayTargets;
        for (var n = 0; n < i.length; n++) {
          this._currentTarget = i[n];
          if (!(e = this._currentTarget).paused && e.actions) {
            e.lock = true;
            for (e.actionIndex = 0; e.actionIndex < e.actions.length; e.actionIndex++) {
              e.currentAction = e.actions[e.actionIndex];
              if (e.currentAction) {
                e.currentAction.step(t * (e.currentAction._speedMethod ? e.currentAction._speed : 1));
                if (e.currentAction && e.currentAction.isDone()) {
                  e.currentAction.stop();
                  var r = e.currentAction;
                  e.currentAction = null;
                  this.removeAction(r);
                }
                e.currentAction = null;
              }
            }
            e.lock = false;
          }
          if (0 === e.actions.length && this._deleteHashElement(e)) {
            n--;
          }
        }
      }
    };
  }, {
    "../core/platform/CCClass": 162,
    "../core/platform/js": 183
  }],
  7: [function (t) {
    "use strict";

    t("./CCActionManager");
    t("./CCAction");
    t("./CCActionInterval");
    t("./CCActionInstant");
    t("./CCActionEase");
    t("./CCActionCatmullRom");
    t("./tween");
  }, {
    "./CCAction": 1,
    "./CCActionCatmullRom": 2,
    "./CCActionEase": 3,
    "./CCActionInstant": 4,
    "./CCActionInterval": 5,
    "./CCActionManager": 6,
    "./tween": 8
  }],
  8: [function (t) {
    "use strict";

    var e = t("../animation/bezier");
    var i = 0;
    var n = cc.Class({
      name: "cc.TweenAction",
      extends: cc.ActionInterval,
      ctor: function (t, e, i) {
        this._opts = i = i || Object.create(null);
        this._props = Object.create(null);
        i.progress = i.progress || this.progress;
        if (i.easing && "string" == typeof i.easing) {
          var n = i.easing;
          i.easing = cc.easing[n];
          i.easing;
        }
        var r = this._opts.relative;
        for (var s in e) {
          var a = e[s];
          var o = undefined;
          var c = undefined;
          if (undefined !== a.value && (a.easing || a.progress)) {
            o = "string" == typeof a.easing ? cc.easing[a.easing] : a.easing;
            c = a.progress;
            a = a.value;
          }
          if ("number" == typeof a || a.lerp && (!r || a.add || a.mul) && a.clone) {
            var l = Object.create(null);
            l.value = a;
            l.easing = o;
            l.progress = c;
            this._props[s] = l;
          }
        }
        this._originProps = e;
        this.initWithDuration(t);
      },
      clone: function () {
        var t = new n(this._duration, this._originProps, this._opts);
        this._cloneDecoration(t);
        return t;
      },
      startWithTarget: function (t) {
        cc.ActionInterval.prototype.startWithTarget.call(this, t);
        var e = !!this._opts.relative;
        var i = this._props;
        for (var n in i) {
          var r = t[n];
          var s = i[n];
          if ("number" == typeof r) {
            s.start = r;
            s.current = r;
            s.end = e ? r + s.value : s.value;
          } else {
            s.start = r.clone();
            s.current = r.clone();
            s.end = e ? (r.add || r.mul).call(r, s.value) : s.value;
          }
        }
      },
      update: function (t) {
        var e = this._opts;
        var i = t;
        if (e.easing) {
          i = e.easing(t);
        }
        var n = this.target;
        if (n) {
          var r = this._props;
          var s = e.progress;
          for (var a in r) {
            var o = r[a];
            var c = o.easing ? o.easing(t) : i;
            var l = o.current = (o.progress || s)(o.start, o.end, o.current, c);
            n[a] = l;
          }
          var h = e.onUpdate;
          if (h) {
            h(n, t);
          }
        }
      },
      progress: function (t, e, i, n) {
        if ("number" == typeof t) {
          i = t + (e - t) * n;
        } else {
          t.lerp(e, n, i);
        }
        return i;
      }
    });
    var r = cc.Class({
      name: "cc.SetAction",
      extends: cc.ActionInstant,
      ctor: function (t) {
        this._props = {};
        if (undefined !== t) {
          this.init(t);
        }
      },
      init: function (t) {
        for (var e in t) this._props[e] = t[e];
        return true;
      },
      update: function () {
        var t = this._props;
        var e = this.target;
        for (var i in t) e[i] = t[i];
      },
      clone: function () {
        var t = new r();
        t.init(this._props);
        return t;
      }
    });
    function s(t) {
      this._actions = [];
      this._finalAction = null;
      this._target = t;
      this._tag = cc.Action.TAG_INVALID;
    }
    s.stopAll = function () {
      cc.director.getActionManager().removeAllActions();
    };
    s.stopAllByTag = function (t) {
      cc.director.getActionManager().removeAllActionsByTag(t);
    };
    s.stopAllByTarget = function (t) {
      cc.director.getActionManager().removeAllActionsFromTarget(t);
    };
    s.prototype.then = function (t) {
      if (t instanceof cc.Action) {
        this._actions.push(t.clone());
      } else {
        this._actions.push(t._union());
      }
      return this;
    };
    s.prototype.target = function (t) {
      this._target = t;
      return this;
    };
    s.prototype.start = function () {
      var t = this._target;
      return t ? t instanceof cc.Object && !t.isValid ? undefined : (this._finalAction && cc.director.getActionManager().removeAction(this._finalAction), this._finalAction = this._union(), undefined === t._id && (t._id = ++i), this._finalAction.setTag(this._tag), cc.director.getActionManager().addAction(this._finalAction, t, false), this) : this;
    };
    s.prototype.stop = function () {
      if (this._finalAction) {
        cc.director.getActionManager().removeAction(this._finalAction);
        this._finalAction = null;
      }
      return this;
    };
    s.prototype.tag = function (t) {
      this._tag = t;
      return this;
    };
    s.prototype.clone = function (t) {
      var e = this._union();
      return cc.tween(t).then(e.clone());
    };
    s.prototype.union = function () {
      var t = this._union();
      this._actions.length = 0;
      this._actions.push(t);
      return this;
    };
    s.prototype._union = function () {
      var t = this._actions;
      return 1 === t.length ? t[0] : cc.sequence(t);
    };
    Object.assign(s.prototype, {
      bezierTo: function (t, i, n, r, s) {
        var a = i.x;
        var o = i.y;
        var c = n.x;
        var l = n.y;
        (s = s || Object.create(null)).progress = function (t, i, n, r) {
          0;
          n.x = e.bezier(t.x, a, c, i.x, r);
          0;
          n.y = e.bezier(t.y, o, l, i.y, r);
          return n;
        };
        return this.to(t, {
          position: r
        }, s);
      },
      bezierBy: function (t, i, n, r, s) {
        var a = i.x;
        var o = i.y;
        var c = n.x;
        var l = n.y;
        (s = s || Object.create(null)).progress = function (t, i, n, r) {
          var s = t.x;
          var h = t.y;
          0;
          n.x = e.bezier(s, a + s, c + s, i.x, r);
          0;
          n.y = e.bezier(h, o + h, l + h, i.y, r);
          return n;
        };
        return this.by(t, {
          position: r
        }, s);
      },
      flipX: function () {
        var t = this;
        return this.call(function () {
          t._target.scaleX *= -1;
        }, this);
      },
      flipY: function () {
        var t = this;
        return this.call(function () {
          t._target.scaleY *= -1;
        }, this);
      },
      blink: function (t, e, i) {
        var n = 1 / e;
        (i = i || Object.create(null)).progress = function (t, e, i, r) {
          return r >= 1 ? t : r % n > n / 2 ? 255 : 0;
        };
        return this.to(t, {
          opacity: 1
        }, i);
      }
    });
    var a = [];
    function o(t) {
      return function () {
        a.length = 0;
        var e = arguments.length;
        for (var i = 0; i < e; i++) {
          var n = a[i] = arguments[i];
          if (n instanceof s) {
            a[i] = n._union();
          }
        }
        return t.apply(this, a);
      };
    }
    var c = {
      to: function (t, e, i) {
        (i = i || Object.create(null)).relative = false;
        return new n(t, e, i);
      },
      by: function (t, e, i) {
        (i = i || Object.create(null)).relative = true;
        return new n(t, e, i);
      },
      set: function (t) {
        return new r(t);
      },
      delay: cc.delayTime,
      call: cc.callFunc,
      hide: cc.hide,
      show: cc.show,
      removeSelf: cc.removeSelf,
      sequence: o(cc.sequence),
      parallel: o(cc.spawn)
    };
    var l = {
      repeat: cc.repeat,
      repeatForever: cc.repeatForever,
      reverseTime: cc.reverseTime
    };
    var h = Object.keys(c);
    var u = function (t) {
      var e = h[t];
      s.prototype[e] = function () {
        var t = c[e].apply(this, arguments);
        this._actions.push(t);
        return this;
      };
    };
    for (var f = 0; f < h.length; f++) {
      u(f);
    }
    h = Object.keys(l);
    var d = function (t) {
      var e = h[t];
      s.prototype[e] = function () {
        var t = this._actions;
        var i = arguments[arguments.length - 1];
        var n = arguments.length - 1;
        if (i instanceof cc.Tween) {
          i = i._union();
        } else if (!(i instanceof cc.Action)) {
          i = t[t.length - 1];
          t.length -= 1;
          n += 1;
        }
        var r = [i];
        for (var s = 0; s < n; s++) {
          r.push(arguments[s]);
        }
        i = l[e].apply(this, r);
        t.push(i);
        return this;
      };
    };
    for (var _ = 0; _ < h.length; _++) {
      d(_);
    }
    cc.tween = function (t) {
      return new s(t);
    };
    cc.Tween = s;
  }, {
    "../animation/bezier": 14
  }],
  9: [function (t, e) {
    "use strict";

    var i = cc.js;
    var n = t("./playable");
    var r = t("./animation-curves");
    var s = r.EventAnimCurve;
    var a = r.EventInfo;
    var o = t("./types").WrapModeMask;
    var c = t("../core/utils/binary-search").binarySearchEpsilon;
    function l(t, e) {
      n.call(this);
      this.target = t;
      this.animation = e;
      this._anims = new i.array.MutableForwardIterator([]);
    }
    i.extend(l, n);
    var h = l.prototype;
    function u(t, e) {
      var i = e.clip;
      e.duration = i.duration;
      e.speed = i.speed;
      e.wrapMode = i.wrapMode;
      e.frameRate = i.sample;
      if ((e.wrapMode & o.Loop) === o.Loop) {
        e.repeatCount = Infinity;
      } else {
        e.repeatCount = 1;
      }
      var n = e.curves = i.createCurves(e, t);
      var r = i.events;
      if (r) {
        var l;
        var h = 0;
        for (var u = r.length; h < u; h++) {
          if (!l) {
            (l = new s()).target = t;
            n.push(l);
          }
          var f = r[h];
          var d = f.frame / e.duration;
          var _ = undefined;
          var p = c(l.ratios, d);
          if (p >= 0) {
            _ = l.events[p];
          } else {
            _ = new a();
            l.ratios.push(d);
            l.events.push(_);
          }
          _.add(f.func, f.params);
        }
      }
    }
    h.playState = function (t, e) {
      if (t.clip) {
        if (!t.curveLoaded) {
          u(this.target, t);
        }
        t.animator = this;
        t.play();
        if ("number" == typeof e) {
          t.setTime(e);
        }
        this.play();
      }
    };
    h.stopStatesExcept = function (t) {
      var e = this._anims;
      var i = e.array;
      for (e.i = 0; e.i < i.length; ++e.i) {
        var n = i[e.i];
        if (n !== t) {
          this.stopState(n);
        }
      }
    };
    h.addAnimation = function (t) {
      if (-1 === this._anims.array.indexOf(t)) {
        this._anims.push(t);
      }
      t._setEventTarget(this.animation);
    };
    h.removeAnimation = function (t) {
      var e = this._anims.array.indexOf(t);
      if (e >= 0) {
        this._anims.fastRemoveAt(e);
        if (0 === this._anims.array.length) {
          this.stop();
        }
      }
      t.animator = null;
    };
    h.sample = function () {
      var t = this._anims;
      var e = t.array;
      for (t.i = 0; t.i < e.length; ++t.i) {
        e[t.i].sample();
      }
    };
    h.stopState = function (t) {
      if (t) {
        t.stop();
      }
    };
    h.pauseState = function (t) {
      if (t) {
        t.pause();
      }
    };
    h.resumeState = function (t) {
      if (t) {
        t.resume();
      }
      if (this.isPaused) {
        this.resume();
      }
    };
    h.setStateTime = function (t, e) {
      if (undefined !== e) {
        if (t) {
          t.setTime(e);
          t.sample();
        }
      } else {
        e = t;
        var i = this._anims.array;
        for (var n = 0; n < i.length; ++n) {
          var r = i[n];
          r.setTime(e);
          r.sample();
        }
      }
    };
    h.onStop = function () {
      var t = this._anims;
      var e = t.array;
      for (t.i = 0; t.i < e.length; ++t.i) {
        e[t.i].stop();
      }
    };
    h.onPause = function () {
      var t = this._anims.array;
      for (var e = 0; e < t.length; ++e) {
        var i = t[e];
        i.pause();
        i.animator = null;
      }
    };
    h.onResume = function () {
      var t = this._anims.array;
      for (var e = 0; e < t.length; ++e) {
        var i = t[e];
        i.animator = this;
        i.resume();
      }
    };
    h._reloadClip = function (t) {
      u(this.target, t);
    };
    e.exports = l;
  }, {
    "../core/utils/binary-search": 229,
    "./animation-curves": 11,
    "./playable": 18,
    "./types": 19
  }],
  10: [function (t, e) {
    "use strict";

    var i = t("./types").WrapMode;
    var n = t("./animation-curves");
    var r = n.DynamicAnimCurve;
    var s = n.quickFindIndex;
    var a = t("./motion-path-helper").sampleMotionPaths;
    var o = t("../core/utils/binary-search").binarySearchEpsilon;
    var c = cc.Class({
      name: "cc.AnimationClip",
      extends: cc.Asset,
      properties: {
        _duration: {
          default: 0,
          type: cc.Float
        },
        duration: {
          get: function () {
            return this._duration;
          }
        },
        sample: {
          default: 60
        },
        speed: {
          default: 1
        },
        wrapMode: {
          default: i.Normal
        },
        curveData: {
          default: {},
          visible: false
        },
        events: {
          default: [],
          visible: false
        }
      },
      statics: {
        createWithSpriteFrames: function (t, e) {
          if (!Array.isArray(t)) {
            return null;
          }
          var i = new c();
          i.sample = e || i.sample;
          i._duration = t.length / i.sample;
          var n = [];
          var r = 1 / i.sample;
          var s = 0;
          for (var a = t.length; s < a; s++) {
            n[s] = {
              frame: s * r,
              value: t[s]
            };
          }
          i.curveData = {
            comps: {
              "cc.Sprite": {
                spriteFrame: n
              }
            }
          };
          return i;
        }
      },
      onLoad: function () {
        this._duration = Number.parseFloat(this.duration);
        this.speed = Number.parseFloat(this.speed);
        this.wrapMode = Number.parseInt(this.wrapMode);
        this.frameRate = Number.parseFloat(this.sample);
      },
      createPropCurve: function (t, e, i) {
        var n = [];
        var c = t instanceof cc.Node && "position" === e;
        var l = new r();
        l.target = t;
        l.prop = e;
        var h = 0;
        for (var u = i.length; h < u; h++) {
          var f = i[h];
          var d = f.frame / this.duration;
          l.ratios.push(d);
          if (c) {
            n.push(f.motionPath);
          }
          var _ = f.value;
          l.values.push(_);
          var p = f.curve;
          if (p) {
            if ("string" == typeof p) {
              l.types.push(p);
              continue;
            }
            if (Array.isArray(p)) {
              if (p[0] === p[1] && p[2] === p[3]) {
                l.types.push(r.Linear);
              } else {
                l.types.push(r.Bezier(p));
              }
              continue;
            }
          }
          l.types.push(r.Linear);
        }
        if (c) {
          a(n, l, this.duration, this.sample, t);
        }
        var v;
        var g;
        var m = l.ratios;
        var y = true;
        var T = 1;
        for (var E = m.length; T < E; T++) {
          v = m[T] - m[T - 1];
          if (1 === T) {
            g = v;
          } else if (Math.abs(v - g) > 1e-6) {
            y = false;
            break;
          }
        }
        l._findFrameIndex = y ? s : o;
        var A = l.values[0];
        if (!(null == A || l._lerp)) {
          if ("number" == typeof A) {
            l._lerp = r.prototype._lerpNumber;
          } else if (A instanceof cc.Quat) {
            l._lerp = r.prototype._lerpQuat;
          } else if (A instanceof cc.Vec2) {
            l._lerp = r.prototype._lerpVector2;
          } else if (A instanceof cc.Vec3) {
            l._lerp = r.prototype._lerpVector3;
          } else if (A.lerp) {
            l._lerp = r.prototype._lerpObject;
          }
        }
        return l;
      },
      createTargetCurves: function (t, e, i) {
        var n = e.props;
        var r = e.comps;
        if (n) {
          for (var s in n) {
            var a = n[s];
            var o = this.createPropCurve(t, s, a);
            i.push(o);
          }
        }
        if (r) {
          for (var c in r) {
            var l = t.getComponent(c);
            if (l) {
              var h = r[c];
              for (var u in h) {
                var f = h[u];
                var d = this.createPropCurve(l, u, f);
                i.push(d);
              }
            }
          }
        }
      },
      createCurves: function (t, e) {
        var i = this.curveData;
        var n = i.paths;
        var r = [];
        this.createTargetCurves(e, i, r);
        for (var s in n) {
          var a = cc.find(s, e);
          if (a) {
            var o = n[s];
            this.createTargetCurves(a, o, r);
          }
        }
        return r;
      }
    });
    cc.AnimationClip = e.exports = c;
  }, {
    "../core/utils/binary-search": 229,
    "./animation-curves": 11,
    "./motion-path-helper": 17,
    "./types": 19
  }],
  11: [function (t, e) {
    "use strict";

    var i = t("./bezier").bezierByTime;
    var n = t("../core/utils/binary-search").binarySearchEpsilon;
    var r = t("./types").WrapModeMask;
    var s = t("./types").WrappedInfo;
    function a(t, e) {
      if ("string" == typeof e) {
        var n = cc.easing[e];
        if (n) {
          t = n(t);
        }
      } else if (Array.isArray(e)) {
        t = i(e, t);
      }
      return t;
    }
    var o = cc.Class({
      name: "cc.AnimCurve",
      sample: function () {},
      onTimeChangedManually: undefined
    });
    var c;
    c = cc.quat();
    var l = cc.Class({
      name: "cc.DynamicAnimCurve",
      extends: o,
      ctor: function () {
        this._cachedIndex = 0;
      },
      properties: {
        target: null,
        prop: "",
        values: [],
        ratios: [],
        types: []
      },
      _findFrameIndex: n,
      _lerp: undefined,
      _lerpNumber: function (t, e, i) {
        return t + (e - t) * i;
      },
      _lerpObject: function (t, e, i) {
        return t.lerp(e, i);
      },
      _lerpQuat: function (t, e, i) {
        return t.lerp(e, i, c);
      },
      _lerpVector2: function () {
        var t = cc.v2();
        return function (e, i, n) {
          return e.lerp(i, n, t);
        };
      }(),
      _lerpVector3: function () {
        var t = cc.v3();
        return function (e, i, n) {
          return e.lerp(i, n, t);
        };
      }(),
      sample: function (t, e) {
        var i = this.values;
        var n = this.ratios;
        var r = n.length;
        if (0 !== r) {
          var s;
          var o = true;
          var c = this._cachedIndex;
          if (c < 0 && (c = ~c) > 0 && c < n.length) {
            var l = n[c - 1];
            var h = n[c];
            if (e > l && e < h) {
              o = false;
            }
          }
          if (o) {
            this._cachedIndex = this._findFrameIndex(n, e);
          }
          var u = this._cachedIndex;
          if (u < 0) {
            if ((u = ~u) <= 0) {
              s = i[0];
            } else if (u >= r) {
              s = i[r - 1];
            } else {
              var f = i[u - 1];
              if (this._lerp) {
                var d = n[u - 1];
                var _ = n[u];
                var p = this.types[u - 1];
                var v = (e - d) / (_ - d);
                if (p) {
                  v = a(v, p);
                }
                var g = i[u];
                s = this._lerp(f, g, v);
              } else {
                s = f;
              }
            }
          } else {
            s = i[u];
          }
          this.target[this.prop] = s;
        }
      }
    });
    l.Linear = null;
    l.Bezier = function (t) {
      return t;
    };
    var h = function () {
      this.events = [];
    };
    h.prototype.add = function (t, e) {
      this.events.push({
        func: t || "",
        params: e || []
      });
    };
    var u = cc.Class({
      name: "cc.EventAnimCurve",
      extends: o,
      properties: {
        target: null,
        ratios: [],
        events: [],
        _wrappedInfo: {
          default: function () {
            return new s();
          }
        },
        _lastWrappedInfo: null,
        _ignoreIndex: NaN
      },
      _wrapIterations: function (t) {
        if (t - (0 | t) == 0) {
          t -= 1;
        }
        return 0 | t;
      },
      sample: function (t, e, i) {
        var a = this.ratios.length;
        var o = i.getWrappedInfo(i.time, this._wrappedInfo);
        var c = o.direction;
        var l = n(this.ratios, o.ratio);
        if (l < 0) {
          l = ~l - 1;
          if (c < 0) {
            l += 1;
          }
        }
        if (this._ignoreIndex !== l) {
          this._ignoreIndex = NaN;
        }
        o.frameIndex = l;
        if (!this._lastWrappedInfo) {
          this._fireEvent(l);
          return void (this._lastWrappedInfo = new s(o));
        }
        var h = i.wrapMode;
        var u = this._wrapIterations(o.iterations);
        var f = this._lastWrappedInfo;
        var d = this._wrapIterations(f.iterations);
        var _ = f.frameIndex;
        var p = f.direction;
        var v = -1 !== d && u !== d;
        if (_ === l && v && 1 === a) {
          this._fireEvent(0);
        } else if (_ !== l || v) {
          c = p;
          do {
            if (_ !== l) {
              if (-1 === c && 0 === _ && l > 0) {
                if ((h & r.PingPong) === r.PingPong) {
                  c *= -1;
                } else {
                  _ = a;
                }
                d++;
              } else if (1 === c && _ === a - 1 && l < a - 1) {
                if ((h & r.PingPong) === r.PingPong) {
                  c *= -1;
                } else {
                  _ = -1;
                }
                d++;
              }
              if (_ === l) {
                break;
              }
              if (d > u) {
                break;
              }
            }
            _ += c;
            cc.director.getAnimationManager().pushDelayEvent(this, "_fireEvent", [_]);
          } while (_ !== l && _ > -1 && _ < a);
        }
        this._lastWrappedInfo.set(o);
      },
      _fireEvent: function (t) {
        if (!(t < 0 || t >= this.events.length || this._ignoreIndex === t)) {
          var e = this.events[t].events;
          if (this.target.isValid) {
            var i = this.target._components;
            for (var n = 0; n < e.length; n++) {
              var r = e[n];
              var s = r.func;
              for (var a = 0; a < i.length; a++) {
                var o = i[a];
                var c = o[s];
                if (c) {
                  c.apply(o, r.params);
                }
              }
            }
          }
        }
      },
      onTimeChangedManually: function (t, e) {
        this._lastWrappedInfo = null;
        this._ignoreIndex = NaN;
        var i = e.getWrappedInfo(t, this._wrappedInfo);
        var r = i.direction;
        var s = n(this.ratios, i.ratio);
        if (s < 0) {
          s = ~s - 1;
          if (r < 0) {
            s += 1;
          }
          this._ignoreIndex = s;
        }
      }
    });
    e.exports = {
      AnimCurve: o,
      DynamicAnimCurve: l,
      EventAnimCurve: u,
      EventInfo: h,
      computeRatioByType: a,
      quickFindIndex: function (t, e) {
        var i = t.length - 1;
        if (0 === i) {
          return 0;
        }
        var n = t[0];
        if (e < n) {
          return 0;
        }
        var r = t[i];
        if (e > r) {
          return ~t.length;
        }
        var s = (e = (e - n) / (r - n)) / (1 / i);
        var a = 0 | s;
        return s - a < 1e-6 ? a : a + 1 - s < 1e-6 ? a + 1 : ~(a + 1);
      }
    };
  }, {
    "../core/utils/binary-search": 229,
    "./bezier": 14,
    "./types": 19
  }],
  12: [function (t, e) {
    "use strict";

    var i = cc.js;
    var n = cc.Class({
      ctor: function () {
        this._anims = new i.array.MutableForwardIterator([]);
        this._delayEvents = [];
        if (cc.director._scheduler) {
          cc.director._scheduler.enableForTarget(this);
        }
      },
      update: function (t) {
        var e = this._anims;
        var i = e.array;
        for (e.i = 0; e.i < i.length; ++e.i) {
          var n = i[e.i];
          if (n._isPlaying && !n._isPaused) {
            n.update(t);
          }
        }
        var r = this._delayEvents;
        for (var s = 0; s < r.length; s++) {
          var a = r[s];
          a.target[a.func].apply(a.target, a.args);
        }
        r.length = 0;
      },
      destruct: function () {},
      addAnimation: function (t) {
        if (-1 === this._anims.array.indexOf(t)) {
          this._anims.push(t);
        }
      },
      removeAnimation: function (t) {
        var e = this._anims.array.indexOf(t);
        if (e >= 0) {
          this._anims.fastRemoveAt(e);
        }
      },
      pushDelayEvent: function (t, e, i) {
        this._delayEvents.push({
          target: t,
          func: e,
          args: i
        });
      }
    });
    cc.AnimationManager = e.exports = n;
  }, {}],
  13: [function (t, e) {
    "use strict";

    var i = cc.js;
    var n = t("./playable");
    var r = t("./types");
    var s = r.WrappedInfo;
    var a = r.WrapMode;
    var o = r.WrapModeMask;
    function c(t, e) {
      n.call(this);
      this._currentFramePlayed = false;
      this._delay = 0;
      this._delayTime = 0;
      this._wrappedInfo = new s();
      this._lastWrappedInfo = null;
      this._process = h;
      this._clip = t;
      this._name = e || t && t.name;
      this.animator = null;
      this.curves = [];
      this.delay = 0;
      this.repeatCount = 1;
      this.duration = 1;
      this.speed = 1;
      this.wrapMode = a.Normal;
      this.time = 0;
      this._target = null;
      this._lastframeEventOn = false;
      this.emit = function () {
        var t = Array(arguments.length);
        var e = 0;
        for (var i = t.length; e < i; e++) {
          t[e] = arguments[e];
        }
        cc.director.getAnimationManager().pushDelayEvent(this, "_emit", t);
      };
    }
    i.extend(c, n);
    var l = c.prototype;
    function h() {
      var t;
      var e = this.sample();
      if (this._lastframeEventOn) {
        t = this._lastWrappedInfo ? this._lastWrappedInfo : this._lastWrappedInfo = new s(e);
        if (this.repeatCount > 1 && (0 | e.iterations) > (0 | t.iterations)) {
          this.emit("lastframe", this);
        }
        t.set(e);
      }
      if (e.stopped) {
        this.stop();
        this.emit("finished", this);
      }
    }
    function u() {
      var t = this.time;
      var e = this.duration;
      if (t > e) {
        if (0 == (t %= e)) {
          t = e;
        }
      } else if (t < 0 && 0 != (t %= e)) {
        t += e;
      }
      var i = t / e;
      var n = this.curves;
      var r = 0;
      for (var s = n.length; r < s; r++) {
        n[r].sample(t, i, this);
      }
      if (this._lastframeEventOn) {
        if (undefined === this._lastIterations) {
          this._lastIterations = i;
        }
        if (this.time > 0 && this._lastIterations > i || this.time < 0 && this._lastIterations < i) {
          this.emit("lastframe", this);
        }
        this._lastIterations = i;
      }
    }
    l._emit = function (t, e) {
      if (this._target && this._target.isValid) {
        this._target.emit(t, t, e);
      }
    };
    l.on = function (t, e, i) {
      return this._target && this._target.isValid ? ("lastframe" === t && (this._lastframeEventOn = true), this._target.on(t, e, i)) : null;
    };
    l.once = function (t, e, i) {
      if (this._target && this._target.isValid) {
        if ("lastframe" === t) {
          this._lastframeEventOn = true;
        }
        var n = this;
        return this._target.once(t, function (t) {
          e.call(i, t);
          n._lastframeEventOn = false;
        });
      }
      return null;
    };
    l.off = function (t, e, i) {
      if (this._target && this._target.isValid) {
        if ("lastframe" === t) {
          if (!this._target.hasEventListener(t)) {
            this._lastframeEventOn = false;
          }
        }
        this._target.off(t, e, i);
      }
    };
    l._setEventTarget = function (t) {
      this._target = t;
    };
    l.onPlay = function () {
      this.setTime(0);
      this._delayTime = this._delay;
      cc.director.getAnimationManager().addAnimation(this);
      if (this.animator) {
        this.animator.addAnimation(this);
      }
      this.emit("play", this);
    };
    l.onStop = function () {
      if (!this.isPaused) {
        cc.director.getAnimationManager().removeAnimation(this);
      }
      if (this.animator) {
        this.animator.removeAnimation(this);
      }
      this.emit("stop", this);
    };
    l.onResume = function () {
      cc.director.getAnimationManager().addAnimation(this);
      this.emit("resume", this);
    };
    l.onPause = function () {
      cc.director.getAnimationManager().removeAnimation(this);
      this.emit("pause", this);
    };
    l.setTime = function (t) {
      this._currentFramePlayed = false;
      this.time = t || 0;
      var e = this.curves;
      var i = 0;
      for (var n = e.length; i < n; i++) {
        var r = e[i];
        if (r.onTimeChangedManually) {
          r.onTimeChangedManually(t, this);
        }
      }
    };
    l.update = function (t) {
      if (!(this._delayTime > 0 && (this._delayTime -= t, this._delayTime > 0))) {
        if (this._currentFramePlayed) {
          this.time += t * this.speed;
        } else {
          this._currentFramePlayed = true;
        }
        this._process();
      }
    };
    l._needRevers = function (t) {
      var e = this.wrapMode;
      var i = false;
      if ((e & o.PingPong) === o.PingPong) {
        if (t - (0 | t) == 0 && t > 0) {
          t -= 1;
        }
        if (1 & t) {
          i = !i;
        }
      }
      if ((e & o.Reverse) === o.Reverse) {
        i = !i;
      }
      return i;
    };
    l.getWrappedInfo = function (t, e) {
      e = e || new s();
      var i = false;
      var n = this.duration;
      var r = this.repeatCount;
      var a = t > 0 ? t / n : -t / n;
      if (a >= r) {
        a = r;
        i = true;
        var c = r - (0 | r);
        if (0 === c) {
          c = 1;
        }
        t = c * n * (t > 0 ? 1 : -1);
      }
      if (t > n) {
        var l = t % n;
        t = 0 === l ? n : l;
      } else if (t < 0 && 0 != (t %= n)) {
        t += n;
      }
      var h = false;
      var u = this._wrapMode & o.ShouldWrap;
      if (u) {
        h = this._needRevers(a);
      }
      var f = h ? -1 : 1;
      if (this.speed < 0) {
        f *= -1;
      }
      if (u && h) {
        t = n - t;
      }
      e.ratio = t / n;
      e.time = t;
      e.direction = f;
      e.stopped = i;
      e.iterations = a;
      return e;
    };
    l.sample = function () {
      var t = this.getWrappedInfo(this.time, this._wrappedInfo);
      var e = this.curves;
      var i = 0;
      for (var n = e.length; i < n; i++) {
        e[i].sample(t.time, t.ratio, this);
      }
      return t;
    };
    i.get(l, "clip", function () {
      return this._clip;
    });
    i.get(l, "name", function () {
      return this._name;
    });
    i.obsolete(l, "AnimationState.length", "duration");
    i.getset(l, "curveLoaded", function () {
      return this.curves.length > 0;
    }, function () {
      this.curves.length = 0;
    });
    i.getset(l, "wrapMode", function () {
      return this._wrapMode;
    }, function (t) {
      this._wrapMode = t;
      this.time = 0;
      if (t & o.Loop) {
        this.repeatCount = Infinity;
      } else {
        this.repeatCount = 1;
      }
    });
    i.getset(l, "repeatCount", function () {
      return this._repeatCount;
    }, function (t) {
      this._repeatCount = t;
      var e = this._wrapMode & o.ShouldWrap;
      var i = (this.wrapMode & o.Reverse) === o.Reverse;
      this._process = Infinity !== t || e || i ? h : u;
    });
    i.getset(l, "delay", function () {
      return this._delay;
    }, function (t) {
      this._delayTime = this._delay = t;
    });
    cc.AnimationState = e.exports = c;
  }, {
    "./playable": 18,
    "./types": 19
  }],
  14: [function (t, e) {
    "use strict";

    var i = Math.cos;
    var n = Math.acos;
    var r = Math.max;
    var a = Math.sqrt;
    function c(t, e) {
      var c;
      var l;
      var h;
      var u;
      var f = e - 0;
      var d = e - t[0];
      var _ = 3 * f;
      var p = 3 * d;
      var v = 3 * (e - t[2]);
      var g = 1 / (-f + p - v + (e - 1));
      var m = (_ - 6 * d + v) * g;
      var y = m * 0.3333333333333333;
      var T = (-_ + p) * g;
      var E = 0.3333333333333333 * (3 * T - m * m);
      var A = E * 0.3333333333333333;
      var x = (2 * m * m * m - 9 * m * T + f * g * 27) / 27;
      var C = x / 2;
      var b = C * C + A * A * A;
      if (b < 0) {
        var S = 0.3333333333333333 * -E;
        var R = a(S * S * S);
        var M = -x / (2 * R);
        var w = n(M < -1 ? -1 : M > 1 ? 1 : M);
        var I = 2 * (R < 0 ? -Math.pow(-R, 0.3333333333333333) : Math.pow(R, 0.3333333333333333));
        l = I * i(w * 0.3333333333333333) - y;
        h = I * i((w + 6.283185307179586) * 0.3333333333333333) - y;
        u = I * i((w + 12.566370614359172) * 0.3333333333333333) - y;
        return 0 <= l && l <= 1 ? 0 <= h && h <= 1 ? 0 <= u && u <= 1 ? r(l, h, u) : r(l, h) : 0 <= u && u <= 1 ? r(l, u) : l : 0 <= h && h <= 1 ? 0 <= u && u <= 1 ? r(h, u) : h : u;
      }
      if (0 === b) {
        h = -(c = C < 0 ? -C < 0 ? -Math.pow(- -C, 0.3333333333333333) : Math.pow(-C, 0.3333333333333333) : -(C < 0 ? -Math.pow(-C, 0.3333333333333333) : Math.pow(C, 0.3333333333333333))) - y;
        return 0 <= (l = 2 * c - y) && l <= 1 ? 0 <= h && h <= 1 ? r(l, h) : l : h;
      }
      var O = a(b);
      return (c = -C + O < 0 ? -Math.pow(-(-C + O), 0.3333333333333333) : Math.pow(-C + O, 0.3333333333333333)) - (C + O < 0 ? -Math.pow(-(C + O), 0.3333333333333333) : Math.pow(C + O, 0.3333333333333333)) - y;
    }
    e.exports = {
      bezier: function (t, e, i, n, r) {
        var s = 1 - r;
        return s * (s * (t + (3 * e - t) * r) + 3 * i * r * r) + n * r * r * r;
      },
      bezierByTime: function (t, e) {
        var i = c(t, e);
        var n = t[1];
        return ((1 - i) * (n + (t[3] - n) * i) * 3 + i * i) * i;
      }
    };
  }, {}],
  15: [function (t, e) {
    "use strict";

    var i = {
      constant: function () {
        return 0;
      },
      linear: function (t) {
        return t;
      },
      quadIn: function (t) {
        return t * t;
      },
      quadOut: function (t) {
        return t * (2 - t);
      },
      quadInOut: function (t) {
        return (t *= 2) < 1 ? .5 * t * t : -.5 * (--t * (t - 2) - 1);
      },
      cubicIn: function (t) {
        return t * t * t;
      },
      cubicOut: function (t) {
        return --t * t * t + 1;
      },
      cubicInOut: function (t) {
        return (t *= 2) < 1 ? .5 * t * t * t : .5 * ((t -= 2) * t * t + 2);
      },
      quartIn: function (t) {
        return t * t * t * t;
      },
      quartOut: function (t) {
        return 1 - --t * t * t * t;
      },
      quartInOut: function (t) {
        return (t *= 2) < 1 ? .5 * t * t * t * t : -.5 * ((t -= 2) * t * t * t - 2);
      },
      quintIn: function (t) {
        return t * t * t * t * t;
      },
      quintOut: function (t) {
        return --t * t * t * t * t + 1;
      },
      quintInOut: function (t) {
        return (t *= 2) < 1 ? .5 * t * t * t * t * t : .5 * ((t -= 2) * t * t * t * t + 2);
      },
      sineIn: function (t) {
        return 1 - Math.cos(t * Math.PI / 2);
      },
      sineOut: function (t) {
        return Math.sin(t * Math.PI / 2);
      },
      sineInOut: function (t) {
        return .5 * (1 - Math.cos(Math.PI * t));
      },
      expoIn: function (t) {
        return 0 === t ? 0 : Math.pow(1024, t - 1);
      },
      expoOut: function (t) {
        return 1 === t ? 1 : 1 - Math.pow(2, -10 * t);
      },
      expoInOut: function (t) {
        return 0 === t ? 0 : 1 === t ? 1 : (t *= 2) < 1 ? .5 * Math.pow(1024, t - 1) : .5 * (2 - Math.pow(2, -10 * (t - 1)));
      },
      circIn: function (t) {
        return 1 - Math.sqrt(1 - t * t);
      },
      circOut: function (t) {
        return Math.sqrt(1 - --t * t);
      },
      circInOut: function (t) {
        return (t *= 2) < 1 ? -.5 * (Math.sqrt(1 - t * t) - 1) : .5 * (Math.sqrt(1 - (t -= 2) * t) + 1);
      },
      elasticIn: function (t) {
        var e;
        var i = .1;
        return 0 === t ? 0 : 1 === t ? 1 : (!i || i < 1 ? (i = 1, e = .1) : e = .4 * Math.asin(1 / i) / (2 * Math.PI), -i * Math.pow(2, 10 * (t -= 1)) * Math.sin(2 * Math.PI * (t - e) / .4));
      },
      elasticOut: function (t) {
        var e;
        var i = .1;
        return 0 === t ? 0 : 1 === t ? 1 : (!i || i < 1 ? (i = 1, e = .1) : e = .4 * Math.asin(1 / i) / (2 * Math.PI), i * Math.pow(2, -10 * t) * Math.sin(2 * Math.PI * (t - e) / .4) + 1);
      },
      elasticInOut: function (t) {
        var e;
        var i = .1;
        return 0 === t ? 0 : 1 === t ? 1 : (!i || i < 1 ? (i = 1, e = .1) : e = .4 * Math.asin(1 / i) / (2 * Math.PI), (t *= 2) < 1 ? i * Math.pow(2, 10 * (t -= 1)) * Math.sin(2 * Math.PI * (t - e) / .4) * -.5 : i * Math.pow(2, -10 * (t -= 1)) * Math.sin(2 * Math.PI * (t - e) / .4) * .5 + 1);
      },
      backIn: function (t) {
        return t * t * (2.70158 * t - 1.70158);
      },
      backOut: function (t) {
        return --t * t * (2.70158 * t + 1.70158) + 1;
      },
      backInOut: function (t) {
        return (t *= 2) < 1 ? t * t * (3.5949095 * t - 2.5949095) * .5 : .5 * ((t -= 2) * t * (3.5949095 * t + 2.5949095) + 2);
      },
      bounceIn: function (t) {
        return 1 - i.bounceOut(1 - t);
      },
      bounceOut: function (t) {
        return t < 0.36363636363636365 ? 7.5625 * t * t : t < 0.7272727272727273 ? 7.5625 * (t -= 0.5454545454545454) * t + .75 : t < 0.9090909090909091 ? 7.5625 * (t -= 0.8181818181818182) * t + .9375 : 7.5625 * (t -= 0.9545454545454546) * t + .984375;
      },
      bounceInOut: function (t) {
        return t < .5 ? .5 * (1 - i.bounceOut(1 - 2 * t)) : .5 * i.bounceOut(2 * t - 1) + .5;
      },
      smooth: function (t) {
        return t <= 0 ? 0 : t >= 1 ? 1 : t * t * (3 - 2 * t);
      },
      fade: function (t) {
        return t <= 0 ? 0 : t >= 1 ? 1 : t * t * t * (t * (6 * t - 15) + 10);
      }
    };
    function n(t, e) {
      return function (i) {
        return i < .5 ? e(2 * i) / 2 : t(2 * i - 1) / 2 + .5;
      };
    }
    i.quadOutIn = n(i.quadIn, i.quadOut);
    i.cubicOutIn = n(i.cubicIn, i.cubicOut);
    i.quartOutIn = n(i.quartIn, i.quartOut);
    i.quintOutIn = n(i.quintIn, i.quintOut);
    i.sineOutIn = n(i.sineIn, i.sineOut);
    i.expoOutIn = n(i.expoIn, i.expoOut);
    i.circOutIn = n(i.circIn, i.circOut);
    i.backOutIn = n(i.backIn, i.backOut);
    i.bounceIn = function (t) {
      return 1 - i.bounceOut(1 - t);
    };
    i.bounceInOut = function (t) {
      return t < .5 ? .5 * (1 - i.bounceOut(1 - 2 * t)) : .5 * i.bounceOut(2 * t - 1) + .5;
    };
    i.bounceOutIn = n(i.bounceIn, i.bounceOut);
    cc.easing = e.exports = i;
  }, {}],
  16: [function (t) {
    "use strict";

    t("./bezier");
    t("./easing");
    t("./types");
    t("./motion-path-helper");
    t("./animation-curves");
    t("./animation-clip");
    t("./animation-manager");
    t("./animation-state");
    t("./animation-animator");
  }, {
    "./animation-animator": 9,
    "./animation-clip": 10,
    "./animation-curves": 11,
    "./animation-manager": 12,
    "./animation-state": 13,
    "./bezier": 14,
    "./easing": 15,
    "./motion-path-helper": 17,
    "./types": 19
  }],
  17: [function (t, e) {
    "use strict";

    var i = t("./animation-curves").DynamicAnimCurve;
    var n = t("./animation-curves").computeRatioByType;
    var r = t("./bezier").bezier;
    var s = t("../core/utils/binary-search").binarySearchEpsilon;
    var a = cc.v2;
    function o(t) {
      this.points = t || [];
      this.beziers = [];
      this.ratios = [];
      this.progresses = [];
      this.length = 0;
      this.computeBeziers();
    }
    function c() {
      this.start = a();
      this.end = a();
      this.startCtrlPoint = a();
      this.endCtrlPoint = a();
    }
    function l(t) {
      if (!Array.isArray(t)) {
        return false;
      }
      var e = 0;
      for (var i = t.length; e < i; e++) {
        var n = t[e];
        if (!Array.isArray(n) || 6 !== n.length) {
          return false;
        }
      }
      return true;
    }
    o.prototype.computeBeziers = function () {
      var t;
      this.beziers.length = 0;
      this.ratios.length = 0;
      this.progresses.length = 0;
      this.length = 0;
      for (var e = 1; e < this.points.length; e++) {
        var i = this.points[e - 1];
        var n = this.points[e];
        (t = new c()).start = i.pos;
        t.startCtrlPoint = i.out;
        t.end = n.pos;
        t.endCtrlPoint = n.in;
        this.beziers.push(t);
        this.length += t.getLength();
      }
      var r = 0;
      for (e = 0; e < this.beziers.length; e++) {
        t = this.beziers[e];
        this.ratios[e] = t.getLength() / this.length;
        this.progresses[e] = r += this.ratios[e];
      }
      return this.beziers;
    };
    c.prototype.getPointAt = function (t) {
      var e = this.getUtoTmapping(t);
      return this.getPoint(e);
    };
    c.prototype.getPoint = function (t) {
      var e = r(this.start.x, this.startCtrlPoint.x, this.endCtrlPoint.x, this.end.x, t);
      var i = r(this.start.y, this.startCtrlPoint.y, this.endCtrlPoint.y, this.end.y, t);
      return new a(e, i);
    };
    c.prototype.getLength = function () {
      var t = this.getLengths();
      return t[t.length - 1];
    };
    c.prototype.getLengths = function (t) {
      if (!t) {
        t = this.__arcLengthDivisions ? this.__arcLengthDivisions : 200;
      }
      if (this.cacheArcLengths && this.cacheArcLengths.length === t + 1) {
        return this.cacheArcLengths;
      }
      var e;
      var i;
      var n = [];
      var r = this.getPoint(0);
      var s = a();
      var o = 0;
      n.push(0);
      for (i = 1; i <= t; i++) {
        e = this.getPoint(i / t);
        s.x = r.x - e.x;
        s.y = r.y - e.y;
        o += s.mag();
        n.push(o);
        r = e;
      }
      this.cacheArcLengths = n;
      return n;
    };
    c.prototype.getUtoTmapping = function (t, e) {
      var i;
      var n = this.getLengths();
      var r = 0;
      var s = n.length;
      i = e || t * n[s - 1];
      var a;
      var o = 0;
      for (var c = s - 1; o <= c;) {
        if ((a = n[r = Math.floor(o + (c - o) / 2)] - i) < 0) {
          o = r + 1;
        } else {
          if (!(a > 0)) {
            c = r;
            break;
          }
          c = r - 1;
        }
      }
      if (n[r = c] === i) {
        return r / (s - 1);
      }
      var l = n[r];
      return (r + (i - l) / (n[r + 1] - l)) / (s - 1);
    };
    e.exports = {
      sampleMotionPaths: function (t, e, r, c) {
        var u = e.values = e.values.map(function (t) {
          if (Array.isArray(t)) {
            t = 2 === t.length ? cc.v2(t[0], t[1]) : cc.v3(t[0], t[1], t[2]);
          }
          return t;
        });
        if (0 !== t.length && 0 !== u.length) {
          var f = false;
          for (var d = 0; d < t.length; d++) {
            var _ = t[d];
            if (_ && !l(_)) {
              _ = null;
            }
            if (_ && _.length > 0) {
              f = true;
              break;
            }
          }
          if (f && 1 !== u.length) {
            var p = e.types;
            var v = e.ratios;
            var g = e.values = [];
            var m = e.types = [];
            var y = e.ratios = [];
            var T = 0;
            var E = i.Linear;
            var A = 0;
            for (var x = t.length; A < x - 1; A++) {
              var C;
              var b = t[A];
              var S = v[A];
              var R = v[A + 1] - S;
              var M = u[A];
              var w = u[A + 1];
              var I = p[A];
              var O = [];
              var L = T / R;
              var P = 1 / (R * r * c);
              if (b && b.length > 0) {
                var D = [];
                D.push(M instanceof cc.Vec2 ? {
                  in: M,
                  pos: M,
                  out: M
                } : Array.isArray(M) && 6 === M.length ? {
                  in: a(M[2], M[3]),
                  pos: a(M[0], M[1]),
                  out: a(M[4], M[5])
                } : {
                  in: cc.Vec2.ZERO,
                  pos: cc.Vec2.ZERO,
                  out: cc.Vec2.ZERO
                });
                var N = 0;
                for (var F = b.length; N < F; N++) {
                  var B = b[N] instanceof cc.Vec2 ? {
                    in: b[N],
                    pos: b[N],
                    out: b[N]
                  } : Array.isArray(b[N]) && 6 === b[N].length ? {
                    in: a(b[N][2], b[N][3]),
                    pos: a(b[N][0], b[N][1]),
                    out: a(b[N][4], b[N][5])
                  } : {
                    in: cc.Vec2.ZERO,
                    pos: cc.Vec2.ZERO,
                    out: cc.Vec2.ZERO
                  };
                  D.push(B);
                }
                D.push(w instanceof cc.Vec2 ? {
                  in: w,
                  pos: w,
                  out: w
                } : Array.isArray(w) && 6 === w.length ? {
                  in: a(w[2], w[3]),
                  pos: a(w[0], w[1]),
                  out: a(w[4], w[5])
                } : {
                  in: cc.Vec2.ZERO,
                  pos: cc.Vec2.ZERO,
                  out: cc.Vec2.ZERO
                });
                var V = new o(D);
                V.computeBeziers();
                for (var k = V.progresses; 1 - L > 1e-6;) {
                  var U;
                  var z;
                  var G;
                  var H;
                  if ((C = n(C = L, I)) < 0) {
                    H = (0 - C) * (z = V.beziers[0]).getLength();
                    G = z.start.sub(z.endCtrlPoint).normalize();
                    U = z.start.add(G.mul(H));
                  } else if (C > 1) {
                    H = (C - 1) * (z = V.beziers[V.beziers.length - 1]).getLength();
                    G = z.end.sub(z.startCtrlPoint).normalize();
                    U = z.end.add(G.mul(H));
                  } else {
                    var W = s(k, C);
                    if (W < 0) {
                      W = ~W;
                    }
                    C -= W > 0 ? k[W - 1] : 0;
                    C /= V.ratios[W];
                    U = V.beziers[W].getPointAt(C);
                  }
                  O.push(U);
                  L += P;
                }
              } else {
                for (; 1 - L > 1e-6;) {
                  C = n(C = L, I);
                  O.push(M.lerp(w, C));
                  L += P;
                }
              }
              E = "constant" === I ? I : i.Linear;
              N = 0;
              for (F = O.length; N < F; N++) {
                var X = S + T + P * N * R;
                Y(O[N], E, X);
              }
              T = Math.abs(L - 1) > 1e-6 ? (L - 1) * R : 0;
            }
            if (v[v.length - 1] !== y[y.length - 1]) {
              Y(u[u.length - 1], E, v[v.length - 1]);
            }
          }
        }
        function Y(t, e, i) {
          g.push(t);
          m.push(e);
          y.push(i);
        }
      },
      Curve: o,
      Bezier: c
    };
  }, {
    "../core/utils/binary-search": 229,
    "./animation-curves": 11,
    "./bezier": 14
  }],
  18: [function (t, e) {
    "use strict";

    var i = cc.js;
    var n = t("../core/CCDebug");
    function r() {
      this._isPlaying = false;
      this._isPaused = false;
      this._stepOnce = false;
    }
    var s = r.prototype;
    i.get(s, "isPlaying", function () {
      return this._isPlaying;
    }, true);
    i.get(s, "isPaused", function () {
      return this._isPaused;
    }, true);
    var a = function () {};
    s.onPlay = a;
    s.onPause = a;
    s.onResume = a;
    s.onStop = a;
    s.onError = a;
    s.play = function () {
      if (this._isPlaying) {
        if (this._isPaused) {
          this._isPaused = false;
          this.onResume();
        } else {
          this.onError(n.getError(3912));
        }
      } else {
        this._isPlaying = true;
        this.onPlay();
      }
    };
    s.stop = function () {
      if (this._isPlaying) {
        this._isPlaying = false;
        this.onStop();
        this._isPaused = false;
      }
    };
    s.pause = function () {
      if (this._isPlaying && !this._isPaused) {
        this._isPaused = true;
        this.onPause();
      }
    };
    s.resume = function () {
      if (this._isPlaying && this._isPaused) {
        this._isPaused = false;
        this.onResume();
      }
    };
    s.step = function () {
      this.pause();
      this._stepOnce = true;
      if (!this._isPlaying) {
        this.play();
      }
    };
    e.exports = r;
  }, {
    "../core/CCDebug": 23
  }],
  19: [function (t, e) {
    "use strict";

    var i = {
      Loop: 2,
      ShouldWrap: 4,
      PingPong: 22,
      Reverse: 36
    };
    var n = cc.Enum({
      Default: 0,
      Normal: 1,
      Reverse: 36,
      Loop: 2,
      LoopReverse: 38,
      PingPong: 22,
      PingPongReverse: 54
    });
    function r(t) {
      if (t) {
        this.set(t);
      } else {
        this.ratio = 0;
        this.time = 0;
        this.direction = 1;
        this.stopped = true;
        this.iterations = 0;
        this.frameIndex = undefined;
      }
    }
    cc.WrapMode = n;
    r.prototype.set = function (t) {
      this.ratio = t.ratio;
      this.time = t.time;
      this.direction = t.direction;
      this.stopped = t.stopped;
      this.iterations = t.iterations;
      this.frameIndex = t.frameIndex;
    };
    e.exports = {
      WrapModeMask: i,
      WrapMode: n,
      WrappedInfo: r
    };
  }, {}],
  20: [function (t, e) {
    "use strict";

    var i;
    var n = t("../core/event/event-target");
    var r = t("../core/platform/CCSys");
    var s = function t(e) {
      n.call(this);
      this._shouldRecycleOnEnded = false;
      this._src = e;
      this._element = null;
      this._state = t.State.INITIALZING;
      var i = this;
      this._onended = function () {
        i._state = t.State.STOPPED;
        i.emit("ended");
      };
      this._onendedSecond = function () {
        i._unbindEnded(i._onendedSecond);
        i._bindEnded();
      };
    };
    function a(t) {
      t.onended = undefined;
      t.stop(0);
      if (s.ScratchAudioBuffer) {
        try {
          t.buffer = s.ScratchAudioBuffer;
        } catch (e) {}
      }
    }
    cc.js.extend(s, n);
    s.State = {
      ERROR: -1,
      INITIALZING: 0,
      PLAYING: 1,
      PAUSED: 2,
      STOPPED: 3
    };
    s.ScratchAudioBuffer = undefined;
    (i = s.prototype)._bindEnded = function (t) {
      if (!(t = t || this._onended)._binded) {
        t._binded = true;
        var e = this._element;
        if (this._src && e instanceof HTMLAudioElement) {
          e.addEventListener("ended", this._onended);
        } else {
          e.onended = this._onended;
        }
      }
    };
    i._unbindEnded = function (t) {
      if ((t = t || this._onended)._binded) {
        t._binded = false;
        var e = this._element;
        if (e instanceof HTMLAudioElement) {
          e.removeEventListener("ended", t);
        } else if (e) {
          e.onended = null;
        }
      }
    };
    i._onLoaded = function () {
      this._createElement();
      this._state = s.State.INITIALZING;
      this.setVolume(1);
      this.setLoop(false);
    };
    i._createElement = function () {
      var t = this._src._nativeAsset;
      if (t instanceof HTMLAudioElement) {
        if (!this._element) {
          this._element = document.createElement("audio");
        }
        this._element.src = t.src;
      } else {
        this._element = new o(t, this);
      }
    };
    i.play = function (t, e) {
      var i = this;
      if (this._src) {
        this._src._ensureLoaded(function () {
          i._state = s.State.PLAYING;
          i._offset = i._length = 0;
          i._bindEnded();
          var n = i._element.play(t, e);
          if (window.Promise && n instanceof Promise) {
            n.catch(function () {});
          }
        });
      }
    };
    i.destroy = function () {
      this._element = null;
    };
    i.pause = function () {
      if (this.getState() === s.State.PLAYING) {
        var t = this;
        if (this._src) {
          this._src._ensureLoaded(function () {
            t._unbindEnded();
            t._element.pause();
            t._state = s.State.PAUSED;
          });
        }
      }
    };
    i.resume = function () {
      if (this.getState() === s.State.PAUSED) {
        var t = this;
        if (this._src) {
          this._src._ensureLoaded(function () {
            t._bindEnded();
            t._element.play();
            t._state = s.State.PLAYING;
          });
        }
      }
    };
    i.stop = function () {
      var t = this;
      if (this._src) {
        this._src._ensureLoaded(function () {
          t._element._rateParam = undefined;
          t._element.pause();
          t._element.currentTime = 0;
          t._unbindEnded();
          t._state = s.State.STOPPED;
          t.emit("stop");
        });
      }
    };
    i.setLoop = function (t) {
      var e = this;
      if (this._src) {
        this._src._ensureLoaded(function () {
          e._element.loop = t;
        });
      }
    };
    i.isLoop = function () {
      return !!this._element && this._element.loop;
    };
    i.setVolume = function (t) {
      var e = this;
      if (this._src) {
        this._src._ensureLoaded(function () {
          e._element.volume = t;
        });
      }
    };
    i.getVolume = function () {
      return this._element ? this._element.volume : 1;
    };
    i.setCurrentTime = function (t) {
      var e = this;
      if (this._src) {
        this._src._ensureLoaded(function () {
          e._unbindEnded();
          e._bindEnded(e._onendedSecond);
          e._element.currentTime = t;
        });
      }
    };
    i.getCurrentTime = function () {
      return this._element ? this._element.currentTime : 0;
    };
    i.getDuration = function () {
      return this._src ? this._src.duration : 0;
    };
    i.getState = function (t) {
      if (undefined === t) {
        t = true;
      }
      if (t) {
        this._forceUpdatingState();
      }
      return this._state;
    };
    i._forceUpdatingState = function () {
      var t = this._element;
      if (t) {
        if (s.State.PLAYING === this._state && t.paused) {
          this._state = s.State.STOPPED;
        } else if (!(s.State.STOPPED !== this._state || t.paused)) {
          this._state = s.State.PLAYING;
        }
      }
    };
    Object.defineProperty(i, "src", {
      get: function () {
        return this._src;
      },
      set: function (t) {
        this._unbindEnded();
        if (t && t.isValid) {
          if (t !== this._src) {
            this._src = t;
            if (t.loaded) {
              this._onLoaded();
            } else {
              var e = this;
              t.once("load", function () {
                if (t === e._src) {
                  e._onLoaded();
                }
              });
            }
          }
        } else {
          this._src = null;
          if (this._element instanceof o) {
            this._element = null;
          } else if (this._element) {
            this._element.src = "";
          }
          this._state = s.State.INITIALZING;
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(i, "paused", {
      get: function () {
        return !this._element || this._element.paused;
      },
      enumerable: true,
      configurable: true
    });
    if (!(cc.sys.browserType === cc.sys.BROWSER_TYPE_EDGE || cc.sys.browserType === cc.sys.BROWSER_TYPE_BAIDU)) {
      cc.sys.browserType;
      cc.sys.BROWSER_TYPE_UC;
    }
    var o = function (t, e) {
      this._audio = e;
      this._context = r.__audioSupport.context;
      this._buffer = t;
      this._gainObj = this._context.createGain();
      this.volume = 1;
      this._useSetTarget = undefined !== this._gainObj.gain.setValueAtTime;
      if (this._useSetTarget) {
        this._gainObj.gain.setValueAtTime(1, this._context.currentTime);
      } else {
        this._gainObj.gain.value = 1;
      }
      this._gainObj.connect(this._context.destination);
      this._loop = false;
      this._startTime = -1;
      this._currentSource = null;
      this.playedLength = 0;
      this._offset = 0;
      this._duration = t.duration;
      this._fadeParam = undefined;
      this._rateParam = undefined;
      this._endCallback = function () {
        var t = this._currentSource;
        if (t) {
          this._currentSource = null;
          a(t);
        }
        if (this._fadeParam) {
          if (this._fadeParam.callback) {
            this._fadeParam.callback();
          }
          this._fadeParam.callback = undefined;
          this._stopFade(true);
        }
        this._rateParam = undefined;
        if (this.onended) {
          this.onended(this);
        }
      }.bind(this);
    };
    (function (t) {
      t.play = function (t, e) {
        if (undefined === t) {
          t = 0;
        }
        if (undefined === e) {
          e = 0;
        }
        if (!this.paused) {
          a(this._currentSource);
          this.playedLength = 0;
          this._stopFade(true);
        }
        var i = this.playedLength;
        if (t || e) {
          this._offset = t;
          if (e) {
            this._duration = e;
          } else {
            e = this._duration = this._buffer.duration - t;
          }
        } else {
          t = this._offset + i;
          e = this._duration - i;
        }
        if ("suspended" === this._context.state) {
          this._context.resume();
        }
        var n = this._context.createBufferSource();
        n.buffer = this._buffer;
        n.connect(this._gainObj);
        this._startTime = this._context.currentTime - i;
        if (this._loop) {
          n.loop = true;
          n.loopStart = this._offset;
          n.loopEnd = this._offset + this._duration;
          if (n.start) {
            n.start(0, t);
          } else if (n.noteGrainOn) {
            n.noteGrainOn(0, t);
          } else {
            n.noteOn(0, t);
          }
        } else if (n.start) {
          n.start(0, t, e);
        } else if (n.noteGrainOn) {
          n.noteGrainOn(0, t, e);
        } else {
          n.noteOn(0, t, e);
        }
        if (this._rateParam && undefined === this._rateParam.applyTime) {
          if (1 === this._rateParam.rate) {
            this._rateParam = undefined;
          } else {
            n.playbackRate.value = this._rateParam.rate;
            this._rateParam.applyTime = this._context.currentTime;
          }
        }
        this._resumeFade();
        this._currentSource = n;
        n.onended = this._endCallback;
        var r = cc.sys;
        if (r.os === r.OS_IOS && r.isBrowser && r.isMobile && ("suspended" === n.context.state && 0 !== this._context.currentTime || "interrupted" === n.context.state)) {
          n.context.resume();
        }
      };
      t.pause = function () {
        if (!this.paused) {
          var t = this._context.currentTime - this._startTime;
          var e = this._currentSource;
          this._currentSource = null;
          this._startTime = -1;
          if (e) {
            a(e);
            if (this._rateParam && undefined !== this._rateParam.applyTime) {
              t += this._instantRateOffset();
              this._rateParam.applyTime = undefined;
              this._rateParam.offset = 0;
            }
          }
          this.playedLength = t % this._duration;
          this._pauseFade();
        }
      };
      Object.defineProperty(t, "paused", {
        get: function () {
          if (this._currentSource && this._currentSource.loop) {
            return false;
          }
          if (-1 === this._startTime) {
            return true;
          }
          var t = this._context.currentTime - this._startTime;
          if (this._rateParam && undefined !== this._rateParam.applyTime) {
            t += this._instantRateOffset();
          }
          return t > this._duration;
        },
        enumerable: true,
        configurable: true
      });
      t.fade = function (t, e, i, n) {
        if (this.paused || t === e || 0 === i) {
          this.volume = e;
        } else {
          var r = i;
          if (this._rateParam) {
            i /= this._rateParam.rate;
          }
          this.volume = t;
          this._gainObj.gain.linearRampToValueAtTime(e, this._context.currentTime + i);
          this._volume = e;
          this._fadeParam = {
            from: t,
            to: e,
            duration: r,
            callback: n,
            cancel: setTimeout(this._fadeComplete.bind(this), 1e3 * i)
          };
        }
      };
      t._stopFade = function (t) {
        if (undefined !== this._fadeParam) {
          if (undefined !== this._fadeParam.cancel) {
            clearTimeout(this._fadeParam.cancel);
          }
          this._gainObj.gain.cancelScheduledValues(this._context.currentTime);
          if (t) {
            this._volume = this._fadeParam.to;
            if (this._useSetTarget) {
              this._gainObj.gain.setValueAtTime(this._volume, this._context.currentTime);
            } else {
              this._gainObj.gain.value = this._volume;
            }
          }
          this._fadeParam = undefined;
        }
      };
      t._pauseFade = function () {
        if (undefined !== this._fadeParam && this._fadeParam.cancel) {
          clearTimeout(this._fadeParam.cancel);
          this._fadeParam.cancel = undefined;
          this._gainObj.gain.cancelScheduledValues(this._context.currentTime);
        }
      };
      t._resumeFade = function () {
        if (undefined !== this._fadeParam && !this._fadeParam.cancel) {
          var t = this._fadeParam.to;
          var e = this._fadeParam.from;
          var i = this._fadeParam.duration;
          var n = t - e;
          var r = (this._gainObj.gain.value - e) / n;
          if (r < 0 || r > 1) {
            r = 0;
            this._gainObj.gain.value = e;
          }
          var s = i * (1 - r);
          if (this._rateParam && this._rateParam.applyTime) {
            s /= this._rateParam.rate;
          }
          this._volume = t;
          this._gainObj.gain.linearRampToValueAtTime(t, this._context.currentTime + s);
          this._fadeParam.cancel = setTimeout(this._fadeComplete.bind(this), 1e3 * s);
        }
      };
      t._fadeComplete = function () {
        if (this._fadeParam) {
          if (this._fadeParam.callback) {
            this._fadeParam.callback();
          }
          this._fadeParam = undefined;
        }
      };
      t._instantRateOffset = function () {
        if (this._rateParam && this._rateParam.applyTime) {
          var t = (this._context.currentTime - this._rateParam.applyTime) * (this._rateParam.rate - 1);
          return this._rateParam.offset + t;
        }
        return 0;
      };
      Object.defineProperty(t, "loop", {
        get: function () {
          return this._loop;
        },
        set: function (t) {
          if (this._loop !== t) {
            if (this.paused) {
              this._loop = t;
            } else {
              this.pause();
              this._loop = t;
              this.play();
            }
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(t, "volume", {
        get: function () {
          return this._volume;
        },
        set: function (t) {
          this._stopFade(false);
          this._volume = t;
          if (this._useSetTarget) {
            this._gainObj.gain.setValueAtTime(t, this._context.currentTime);
          } else {
            this._gainObj.gain.value = t;
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(t, "currentTime", {
        get: function () {
          if (this.paused) {
            return this.playedLength;
          }
          var t = this._context.currentTime - this._startTime;
          if (this._rateParam && undefined !== this._rateParam.applyTime) {
            t += this._instantRateOffset();
          }
          return t % this._duration;
        },
        set: function (t) {
          this._stopFade(true);
          if (this.paused) {
            this.playedLength = t;
          } else {
            if (this._rateParam && undefined !== this._rateParam.applyTime) {
              this._rateParam.applyTime = undefined;
              this._rateParam.offset = 0;
            }
            this.pause();
            this.playedLength = t;
            this.play();
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(t, "duration", {
        get: function () {
          return this._duration;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(t, "rate", {
        get: function () {
          return this._rateParam ? this._rateParam.rate : 1;
        },
        set: function (t) {
          if (!(t <= 0)) {
            var e = null !== this._currentSource;
            if (undefined === this._rateParam) {
              this._rateParam = {
                applyTime: e ? this._context.currentTime : undefined,
                rate: t,
                offset: 0
              };
            } else {
              if (this._rateParam.rate === t) {
                return;
              }
              if (undefined !== this._rateParam.applyTime && e) {
                this._rateParam.offset = this._instantRateOffset();
                this._rateParam.applyTime = this._context.currentTime;
              }
              this._rateParam.rate = t;
            }
            if (undefined !== this._rateParam.applyTime && e) {
              this._currentSource.playbackRate.value = t;
              this._pauseFade();
              this._resumeFade();
            }
          }
        },
        enumerable: true,
        configurable: true
      });
    })(o.prototype);
    var c = window.shell && window.shell.WebAudio ? window.shell.WebAudio : s;
    e.exports = cc._Audio = c;
  }, {
    "../core/event/event-target": 134,
    "../core/platform/CCSys": 171
  }],
  21: [function (t, e) {
    "use strict";

    var i = {
      name: "Jacob__Codec"
    };
    i.Base64 = t("./base64");
    i.unzip = function () {
      return i.GZip.gunzip.apply(i.GZip, arguments);
    };
    i.unzipBase64 = function () {
      var t = i.Base64.decode.apply(i.Base64, arguments);
      try {
        return i.GZip.gunzip.call(i.GZip, t);
      } catch (e) {
        return t.slice(7);
      }
    };
    i.unzipBase64AsArray = function (t, e) {
      e = e || 1;
      var i;
      var n;
      var r;
      var s = this.unzipBase64(t);
      var a = [];
      i = 0;
      for (r = s.length / e; i < r; i++) {
        a[i] = 0;
        for (n = e - 1; n >= 0; --n) {
          a[i] += s.charCodeAt(i * e + n) << 8 * n;
        }
      }
      return a;
    };
    i.unzipAsArray = function (t, e) {
      e = e || 1;
      var i;
      var n;
      var r;
      var s = this.unzip(t);
      var a = [];
      i = 0;
      for (r = s.length / e; i < r; i++) {
        a[i] = 0;
        for (n = e - 1; n >= 0; --n) {
          a[i] += s.charCodeAt(i * e + n) << 8 * n;
        }
      }
      return a;
    };
    cc.codec = e.exports = i;
  }, {
    "./base64": 22
  }],
  22: [function (t, e) {
    "use strict";

    var i = t("../core/utils/misc").BASE64_VALUES;
    var n = {
      name: "Jacob__Codec__Base64",
      decode: function (t) {
        var e;
        var n;
        var r;
        var s;
        var a;
        var o;
        var c = [];
        var l = 0;
        for (t = t.replace(/[^A-Za-z0-9\+\/\=]/g, ""); l < t.length;) {
          e = i[t.charCodeAt(l++)] << 2 | (s = i[t.charCodeAt(l++)]) >> 4;
          n = (15 & s) << 4 | (a = i[t.charCodeAt(l++)]) >> 2;
          r = (3 & a) << 6 | (o = i[t.charCodeAt(l++)]);
          c.push(String.fromCharCode(e));
          if (64 !== a) {
            c.push(String.fromCharCode(n));
          }
          if (64 !== o) {
            c.push(String.fromCharCode(r));
          }
        }
        return c.join("");
      },
      decodeAsArray: function (t, e) {
        var i;
        var n;
        var r;
        var s = this.decode(t);
        var a = [];
        i = 0;
        for (r = s.length / e; i < r; i++) {
          a[i] = 0;
          for (n = e - 1; n >= 0; --n) {
            a[i] += s.charCodeAt(i * e + n) << 8 * n;
          }
        }
        return a;
      }
    };
    e.exports = n;
  }, {
    "../core/utils/misc": 236
  }],
  23: [function (t, e) {
    "use strict";

    var i;
    var n = t("./platform/utils");
    t("../../DebugInfos");
    var r = ("undefined" == typeof window ? global : window).console;
    cc.log = cc.warn = cc.error = cc.assert = r.log.bind ? r.log.bind(r) : r.log;
    cc._throw = function (t) {
      n.callInNextTick(function () {
        throw t;
      });
    };
    cc.logID = function () {};
    cc.warnID = function () {};
    cc.errorID = function () {};
    cc.assertID = function () {};
    var a = cc.Enum({
      NONE: 0,
      INFO: 1,
      WARN: 2,
      ERROR: 3,
      INFO_FOR_WEB_PAGE: 4,
      WARN_FOR_WEB_PAGE: 5,
      ERROR_FOR_WEB_PAGE: 6
    });
    "ERROR";
    e.exports = cc.debug = {
      DebugMode: a,
      _resetDebugSetting: function (t) {
        cc.log = cc.warn = cc.error = cc.assert = function () {};
        if (t !== a.NONE) {
          if (t > a.ERROR) {
            var e = function (t) {
              if (cc.game.canvas) {
                if (!i) {
                  var e = document.createElement("Div");
                  e.setAttribute("id", "logInfoDiv");
                  e.setAttribute("width", "200");
                  e.setAttribute("height", cc.game.canvas.height);
                  var n = e.style;
                  n.zIndex = "99999";
                  n.position = "absolute";
                  n.top = n.left = "0";
                  (i = document.createElement("textarea")).setAttribute("rows", "20");
                  i.setAttribute("cols", "30");
                  i.setAttribute("disabled", "true");
                  var r = i.style;
                  r.backgroundColor = "transparent";
                  r.borderBottom = "1px solid #cccccc";
                  r.borderTopWidth = r.borderLeftWidth = r.borderRightWidth = "0px";
                  r.borderTopStyle = r.borderLeftStyle = r.borderRightStyle = "none";
                  r.padding = "0px";
                  r.margin = 0;
                  e.appendChild(i);
                  cc.game.canvas.parentNode.appendChild(e);
                }
                i.value = i.value + t + "\r\n";
                i.scrollTop = i.scrollHeight;
              }
            };
            cc.error = function () {
              e("ERROR :  " + cc.js.formatStr.apply(null, arguments));
            };
            cc.assert = function (t, i) {
              if (!t && i) {
                i = cc.js.formatStr.apply(null, cc.js.shiftArguments.apply(null, arguments));
                e("ASSERT: " + i);
              }
            };
            if (t !== a.ERROR_FOR_WEB_PAGE) {
              cc.warn = function () {
                e("WARN :  " + cc.js.formatStr.apply(null, arguments));
              };
            }
            if (t === a.INFO_FOR_WEB_PAGE) {
              cc.log = function () {
                e(cc.js.formatStr.apply(null, arguments));
              };
            }
          } else if (r && r.log.apply) {
            if (!r.error) {
              r.error = r.log;
            }
            if (!r.warn) {
              r.warn = r.log;
            }
            if (r.error.bind) {
              cc.error = r.error.bind(r);
            } else {
              cc.error = function () {
                return r.error.apply(r, arguments);
              };
            }
            cc.assert = function (t, e) {
              if (!t) {
                if (e) {
                  e = cc.js.formatStr.apply(null, cc.js.shiftArguments.apply(null, arguments));
                }
                throw Error(e);
              }
            };
          }
          if (t !== a.ERROR) {
            if (r.warn.bind) {
              cc.warn = r.warn.bind(r);
            } else {
              cc.warn = function () {
                return r.warn.apply(r, arguments);
              };
            }
          }
          if (t === a.INFO) {
            if (r.log.bind) {
              cc.log = r.log.bind(r);
            } else {
              cc.log = function () {
                return r.log.apply(r, arguments);
              };
            }
          }
        }
      },
      getError: function () {
        var t = arguments[0];
        var e = "ERROR " + t + ".";
        if (1 === arguments.length) {
          return e;
        }
        if (2 === arguments.length) {
          return e + " Arguments: " + arguments[1];
        }
        var i = cc.js.shiftArguments.apply(null, arguments);
        return e + " Arguments: " + i.join(", ");
      },
      isDisplayStats: function () {
        return !!cc.profiler && cc.profiler.isShowingStats();
      },
      setDisplayStats: function (t) {
        if (cc.profiler && cc.game.renderType !== cc.game.RENDER_TYPE_CANVAS) {
          if (t) {
            cc.profiler.showStats();
          } else {
            cc.profiler.hideStats();
          }
          cc.game.config.showFPS = !!t;
        }
      }
    };
  }, {
    "../../DebugInfos": undefined,
    "./platform/utils": 186
  }],
  24: [function (t, e) {
    "use strict";

    var i = t("./event/event-target");
    var n = t("./component-scheduler");
    var r = t("./node-activator");
    var s = t("./platform/CCObject");
    var a = t("./CCGame");
    var o = t("./renderer");
    var c = t("./event-manager");
    var l = t("./CCScheduler");
    cc.Director = function () {
      i.call(this);
      this._invalid = false;
      this._paused = false;
      this._purgeDirectorInNextLoop = false;
      this._winSizeInPoints = null;
      this._scene = null;
      this._loadingScene = "";
      this._totalFrames = 0;
      this._lastUpdate = 0;
      this._deltaTime = 0;
      this._startTime = 0;
      this._maxParticleDeltaTime = 0;
      this._timeScale = 1;
      this._scheduler = null;
      this._compScheduler = null;
      this._nodeActivator = null;
      this._actionManager = null;
      var t = this;
      a.on(a.EVENT_SHOW, function () {
        t._lastUpdate = performance.now();
      });
      a.once(a.EVENT_ENGINE_INITED, this.init, this);
    };
    cc.Director.prototype = {
      constructor: cc.Director,
      init: function () {
        this._totalFrames = 0;
        this._lastUpdate = performance.now();
        this._startTime = this._lastUpdate;
        this._paused = false;
        this._purgeDirectorInNextLoop = false;
        this._winSizeInPoints = cc.size(0, 0);
        this._scheduler = new l();
        this.sharedInit();
        return true;
      },
      sharedInit: function () {
        this._compScheduler = new n();
        this._nodeActivator = new r();
        if (c) {
          c.setEnabled(true);
        }
        if (cc.ActionManager) {
          this._actionManager = new cc.ActionManager();
          this._scheduler.scheduleUpdate(this._actionManager, l.PRIORITY_SYSTEM, false);
        } else {
          this._actionManager = null;
        }
        if (cc.AnimationManager) {
          this._animationManager = new cc.AnimationManager();
          this._scheduler.scheduleUpdate(this._animationManager, l.PRIORITY_SYSTEM, false);
        } else {
          this._animationManager = null;
        }
        if (cc.CollisionManager) {
          this._collisionManager = new cc.CollisionManager();
          this._scheduler.scheduleUpdate(this._collisionManager, l.PRIORITY_SYSTEM, false);
        } else {
          this._collisionManager = null;
        }
        if (cc.PhysicsManager) {
          this._physicsManager = new cc.PhysicsManager();
          this._scheduler.scheduleUpdate(this._physicsManager, l.PRIORITY_SYSTEM, false);
        } else {
          this._physicsManager = null;
        }
        cc.Physics3DManager;
        this._physics3DManager = null;
        if (cc._widgetManager) {
          cc._widgetManager.init(this);
        }
      },
      calculateDeltaTime: function (t) {
        if (!t) {
          t = performance.now();
        }
        this._deltaTime = t > this._lastUpdate ? (t - this._lastUpdate) / 1e3 : 0;
        this._lastUpdate = t;
      },
      convertToGL: function (t) {
        var e = a.container;
        var i = cc.view;
        var n = e.getBoundingClientRect();
        var r = n.left + window.pageXOffset - e.clientLeft;
        var s = n.top + window.pageYOffset - e.clientTop;
        var o = i._devicePixelRatio * (t.x - r);
        var c = i._devicePixelRatio * (s + n.height - t.y);
        return i._isRotated ? cc.v2(i._viewportRect.width - c, o) : cc.v2(o, c);
      },
      convertToUI: function (t) {
        var e = a.container;
        var i = cc.view;
        var n = e.getBoundingClientRect();
        var r = n.left + window.pageXOffset - e.clientLeft;
        var s = n.top + window.pageYOffset - e.clientTop;
        var o = cc.v2(0, 0);
        if (i._isRotated) {
          o.x = r + t.y / i._devicePixelRatio;
          o.y = s + n.height - (i._viewportRect.width - t.x) / i._devicePixelRatio;
        } else {
          o.x = r + t.x * i._devicePixelRatio;
          o.y = s + n.height - t.y * i._devicePixelRatio;
        }
        return o;
      },
      end: function () {
        this._purgeDirectorInNextLoop = true;
      },
      getWinSize: function () {
        return cc.size(cc.winSize);
      },
      getWinSizeInPixels: function () {
        return cc.size(cc.winSize);
      },
      pause: function () {
        if (!this._paused) {
          this._paused = true;
        }
      },
      purgeCachedData: function () {
        cc.assetManager.releaseAll();
      },
      purgeDirector: function () {
        this._scheduler.unscheduleAll();
        this._compScheduler.unscheduleAll();
        this._nodeActivator.reset();
        if (c) {
          c.setEnabled(false);
        }
        if (cc.isValid(this._scene)) {
          this._scene.destroy();
        }
        this._scene = null;
        cc.renderer.clear();
        cc.assetManager.builtins.clear();
        this.stopAnimation();
        cc.assetManager.releaseAll();
      },
      reset: function () {
        this.purgeDirector();
        if (c) {
          c.setEnabled(true);
        }
        if (this._actionManager) {
          this._scheduler.scheduleUpdate(this._actionManager, cc.Scheduler.PRIORITY_SYSTEM, false);
        }
        if (this._animationManager) {
          this._scheduler.scheduleUpdate(this._animationManager, cc.Scheduler.PRIORITY_SYSTEM, false);
        }
        if (this._collisionManager) {
          this._scheduler.scheduleUpdate(this._collisionManager, cc.Scheduler.PRIORITY_SYSTEM, false);
        }
        if (this._physicsManager) {
          this._scheduler.scheduleUpdate(this._physicsManager, cc.Scheduler.PRIORITY_SYSTEM, false);
        }
        this._resetDeltaTime();
        this.startAnimation();
      },
      runSceneImmediate: function (t, e, i) {
        if (t instanceof cc.SceneAsset) {
          t = t.scene;
        }
        t._load();
        this.emit(cc.Director.EVENT_BEFORE_SCENE_DESTROY, t);
        var n = Object.keys(a._persistRootNodes).map(function (t) {
          return a._persistRootNodes[t];
        });
        for (var r = 0; r < n.length; r++) {
          var o = n[r];
          var c = t.getChildByUuid(o.uuid);
          if (c) {
            var l = c.getSiblingIndex();
            c._destroyImmediate();
            t.insertChild(o, l);
          } else {
            o.parent = t;
          }
        }
        var h = this._scene;
        cc.assetManager._releaseManager._autoRelease(h, t, a._persistRootNodes);
        if (cc.isValid(h)) {
          h.destroy();
        }
        this._scene = null;
        s._deferredDestroy();
        if (e) {
          e();
        }
        this.emit(cc.Director.EVENT_BEFORE_SCENE_LAUNCH, t);
        this._scene = t;
        t._activate();
        this.startAnimation();
        if (i) {
          i(null, t);
        }
        this.emit(cc.Director.EVENT_AFTER_SCENE_LAUNCH, t);
      },
      runScene: function (t, e, i) {
        if (t instanceof cc.SceneAsset) {
          t = t.scene;
        }
        t._load();
        this.once(cc.Director.EVENT_AFTER_DRAW, function () {
          this.runSceneImmediate(t, e, i);
        }, this);
      },
      loadScene: function (t, e, i) {
        if (this._loadingScene) {
          return false;
        }
        var n = cc.assetManager.bundles.find(function (e) {
          return e.getSceneInfo(t);
        });
        if (n) {
          this.emit(cc.Director.EVENT_BEFORE_SCENE_LOADING, t);
          this._loadingScene = t;
          var r = this;
          n.loadScene(t, function (t, n) {
            r._loadingScene = "";
            if (t) {
              t = "Failed to load scene: " + t;
              if (e) {
                e(t);
              }
            } else {
              r.runSceneImmediate(n, i, e);
            }
          });
          return true;
        }
        return false;
      },
      preloadScene: function (t, e, i) {
        var n = cc.assetManager.bundles.find(function (e) {
          return e.getSceneInfo(t);
        });
        if (!n) {
          return null;
        }
        n.preloadScene(t, null, e, i);
      },
      resume: function () {
        if (this._paused) {
          this._lastUpdate = performance.now();
          this._lastUpdate;
          this._paused = false;
          this._deltaTime = 0;
        }
      },
      setDepthTest: function (t) {
        if (cc.Camera.main) {
          cc.Camera.main.depth = !!t;
        }
      },
      setClearColor: function (t) {
        if (cc.Camera.main) {
          cc.Camera.main.backgroundColor = t;
        }
      },
      getRunningScene: function () {
        return this._scene;
      },
      getScene: function () {
        return this._scene;
      },
      getAnimationInterval: function () {
        return 1e3 / a.getFrameRate();
      },
      setAnimationInterval: function (t) {
        a.setFrameRate(Math.round(1e3 / t));
      },
      getDeltaTime: function () {
        return this._deltaTime;
      },
      getTotalTime: function () {
        return performance.now() - this._startTime;
      },
      getTotalFrames: function () {
        return this._totalFrames;
      },
      isPaused: function () {
        return this._paused;
      },
      getScheduler: function () {
        return this._scheduler;
      },
      setScheduler: function (t) {
        if (this._scheduler !== t) {
          this._scheduler = t;
        }
      },
      getActionManager: function () {
        return this._actionManager;
      },
      setActionManager: function (t) {
        if (this._actionManager !== t) {
          if (this._actionManager) {
            this._scheduler.unscheduleUpdate(this._actionManager);
          }
          this._actionManager = t;
          this._scheduler.scheduleUpdate(this._actionManager, cc.Scheduler.PRIORITY_SYSTEM, false);
        }
      },
      getAnimationManager: function () {
        return this._animationManager;
      },
      getCollisionManager: function () {
        return this._collisionManager;
      },
      getPhysicsManager: function () {
        return this._physicsManager;
      },
      getPhysics3DManager: function () {
        return this._physics3DManager;
      },
      startAnimation: function () {
        this._invalid = false;
      },
      stopAnimation: function () {
        this._invalid = true;
      },
      _resetDeltaTime: function () {
        this._lastUpdate = performance.now();
        this._deltaTime = 0;
      },
      setTimeScale: function (t) {
        this._timeScale = t;
      },
      getTimeScale: function () {
        return this._timeScale;
      },
      mainLoop: function (t) {
        if (this._purgeDirectorInNextLoop) {
          this._purgeDirectorInNextLoop = false;
          this.purgeDirector();
        } else if (!this._invalid) {
          this.calculateDeltaTime(t);
          var e = this._deltaTime;
          if (1 !== this._timeScale) {
            e *= this._timeScale;
          }
          if (!this._paused) {
            this.emit(cc.Director.EVENT_BEFORE_UPDATE);
            this._compScheduler.startPhase();
            this._compScheduler.updatePhase(e);
            this._scheduler.update(e);
            this._compScheduler.lateUpdatePhase(e);
            this.emit(cc.Director.EVENT_AFTER_UPDATE);
            s._deferredDestroy();
          }
          this.emit(cc.Director.EVENT_BEFORE_DRAW);
          o.render(this._scene, e);
          this.emit(cc.Director.EVENT_AFTER_DRAW);
          c.frameUpdateListeners();
          this._totalFrames++;
        }
      },
      __fastOn: function (t, e, i) {
        this.on(t, e, i);
      },
      __fastOff: function (t, e, i) {
        this.off(t, e, i);
      }
    };
    cc.js.addon(cc.Director.prototype, i.prototype);
    cc.Director.EVENT_PROJECTION_CHANGED = "director_projection_changed";
    cc.Director.EVENT_BEFORE_SCENE_LOADING = "director_before_scene_loading";
    cc.Director.EVENT_BEFORE_SCENE_DESTROY = "director_before_scene_destroy";
    cc.Director.EVENT_BEFORE_SCENE_LAUNCH = "director_before_scene_launch";
    cc.Director.EVENT_AFTER_SCENE_LAUNCH = "director_after_scene_launch";
    cc.Director.EVENT_BEFORE_UPDATE = "director_before_update";
    cc.Director.EVENT_AFTER_UPDATE = "director_after_update";
    cc.Director.EVENT_BEFORE_VISIT = "director_before_draw";
    cc.Director.EVENT_AFTER_VISIT = "director_before_draw";
    cc.Director.EVENT_BEFORE_DRAW = "director_before_draw";
    cc.Director.EVENT_AFTER_DRAW = "director_after_draw";
    cc.Director.PROJECTION_2D = 0;
    cc.Director.PROJECTION_3D = 1;
    cc.Director.PROJECTION_CUSTOM = 3;
    cc.Director.PROJECTION_DEFAULT = cc.Director.PROJECTION_2D;
    cc.Director.EVENT_BEFORE_PHYSICS = "director_before_physics";
    cc.Director.EVENT_AFTER_PHYSICS = "director_after_physics";
    cc.director = new cc.Director();
    e.exports = cc.director;
  }, {
    "./CCGame": 25,
    "./CCScheduler": 29,
    "./component-scheduler": 95,
    "./event-manager": 133,
    "./event/event-target": 134,
    "./node-activator": 161,
    "./platform/CCObject": 168,
    "./renderer": 193
  }],
  25: [function (t, e) {
    "use strict";

    var i = t("./utils/text-utils");
    var n = t("./event/event-target");
    var r = t("./CCDebug");
    var s = t("./renderer");
    var a = t("../core/renderer/utils/dynamic-atlas/manager");
    var o = {
      EVENT_HIDE: "game_on_hide",
      EVENT_SHOW: "game_on_show",
      EVENT_RESTART: "game_on_restart",
      EVENT_GAME_INITED: "game_inited",
      EVENT_ENGINE_INITED: "engine_inited",
      EVENT_RENDERER_INITED: "engine_inited",
      RENDER_TYPE_CANVAS: 0,
      RENDER_TYPE_WEBGL: 1,
      RENDER_TYPE_OPENGL: 2,
      _persistRootNodes: {},
      _paused: true,
      _configLoaded: false,
      _isCloning: false,
      _prepared: false,
      _rendererInitialized: false,
      _renderContext: null,
      _intervalId: null,
      _lastTime: null,
      _frameTime: null,
      frame: null,
      container: null,
      canvas: null,
      renderType: -1,
      config: null,
      onStart: null,
      setFrameRate: function (t) {
        this.config.frameRate = t;
        this._setAnimFrame();
        if (!this._paused) {
          if (this._intervalId) {
            window.cancelAnimFrame(this._intervalId);
          }
          this._intervalId = 0;
          this._runMainLoop();
        }
      },
      getFrameRate: function () {
        return this.config.frameRate;
      },
      step: function () {
        cc.director.mainLoop();
      },
      pause: function () {
        if (!this._paused) {
          this._paused = true;
          if (this._intervalId) {
            window.cancelAnimFrame(this._intervalId);
          }
          this._intervalId = 0;
          this.emit("game_on_hide", this);
        }
      },
      resume: function () {
        if (this._paused) {
          this._paused = false;
          cc.director._resetDeltaTime();
          this._runMainLoop();
          this.emit("game_on_show", this);
        }
      },
      isPaused: function () {
        return this._paused;
      },
      restart: function () {
        cc.director.once(cc.Director.EVENT_AFTER_DRAW, function () {
          for (var t in o._persistRootNodes) o.removePersistRootNode(o._persistRootNodes[t]);
          cc.director.getScene().destroy();
          cc.Object._deferredDestroy();
          cc.director.reset();
          o.pause();
          cc.assetManager.builtins.init(function (t) {
            if (t) {
              throw t;
            }
            null();
            o.emit("game_on_restart");
          });
        });
      },
      end: function () {
        close();
      },
      _initEngine: function () {
        if (!this._rendererInitialized) {
          this._initRenderer();
          this._initEvents();
          this.emit(this.EVENT_ENGINE_INITED);
        }
      },
      _loadPreviewScript: function (t) {
        t();
      },
      _prepareFinished: function (t) {
        var e = this;
        try {
          this._initEngine();
        } catch (i) {
          return void (t && t(i));
        }
        this._setAnimFrame();
        cc.assetManager.builtins.init(function (i) {
          if (i) {
            if (t) {
              t(i);
            }
          } else {
            e._prepared = true;
            e._runMainLoop();
            e._paused = false;
            e.emit(e.EVENT_GAME_INITED);
            if (t) {
              t();
            }
          }
        });
      },
      eventTargetOn: n.prototype.on,
      eventTargetOnce: n.prototype.once,
      on: function (t, e, i, n) {
        if (this._prepared && t === this.EVENT_ENGINE_INITED || !this._paused && t === this.EVENT_GAME_INITED) {
          e.call(i);
        } else {
          this.eventTargetOn(t, e, i, n);
        }
      },
      once: function (t, e, i) {
        if (this._prepared && t === this.EVENT_ENGINE_INITED || !this._paused && t === this.EVENT_GAME_INITED) {
          e.call(i);
        } else {
          this.eventTargetOnce(t, e, i);
        }
      },
      prepare: function (t) {
        var e = this;
        if (this._prepared) {
          if (t) {
            t();
          }
        } else {
          this._loadPreviewScript(function () {
            e._prepareFinished(t);
          });
        }
      },
      run: function (t, e) {
        this._initConfig(t);
        this.onStart = e;
        this.prepare(null && null.bind(o));
      },
      addPersistRootNode: function (t) {
        if (cc.Node.isNode(t) && t.uuid) {
          var e = t.uuid;
          if (!this._persistRootNodes[e]) {
            var i = cc.director._scene;
            if (cc.isValid(i)) {
              if (t.parent) {
                if (!(t.parent instanceof cc.Scene)) {
                  return;
                }
                if (t.parent !== i) {
                  return;
                }
              } else {
                t.parent = i;
              }
            }
            this._persistRootNodes[e] = t;
            t._persistNode = true;
            cc.assetManager._releaseManager._addPersistNodeRef(t);
          }
        }
      },
      removePersistRootNode: function (t) {
        var e = t.uuid || "";
        if (t === this._persistRootNodes[e]) {
          delete this._persistRootNodes[e];
          t._persistNode = false;
          cc.assetManager._releaseManager._removePersistNodeRef(t);
        }
      },
      isPersistRootNode: function (t) {
        return t._persistNode;
      },
      _setAnimFrame: function () {
        this._lastTime = performance.now();
        var t = null.frameRate;
        this._frameTime = 1e3 / t;
        cc.director._maxParticleDeltaTime = this._frameTime / 1e3 * 2;
        var e = window.requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame;
        if (60 !== t && 30 !== t) {
          window.requestAnimFrame = e ? this._stTimeWithRAF : this._stTime;
          window.cancelAnimFrame = this._ctTime;
        } else {
          window.requestAnimFrame = e || this._stTime;
          window.cancelAnimFrame = window.cancelAnimationFrame || window.cancelRequestAnimationFrame || window.msCancelRequestAnimationFrame || window.mozCancelRequestAnimationFrame || window.oCancelRequestAnimationFrame || window.webkitCancelRequestAnimationFrame || window.msCancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.oCancelAnimationFrame || this._ctTime;
        }
      },
      _stTimeWithRAF: function (t) {
        var e = performance.now();
        var i = Math.max(0, null - (e - null));
        var n = window.setTimeout(function () {
          window.requestAnimationFrame(t);
        }, i);
        o._lastTime = e + i;
        return n;
      },
      _stTime: function (t) {
        var e = performance.now();
        var i = Math.max(0, null - (e - null));
        var n = window.setTimeout(function () {
          t();
        }, i);
        o._lastTime = e + i;
        return n;
      },
      _ctTime: function (t) {
        window.clearTimeout(t);
      },
      _runMainLoop: function () {
        if (this._prepared) {
          var t;
          var e = this;
          var i = e.config;
          var n = cc.director;
          var s = true;
          var a = i.frameRate;
          r.setDisplayStats(i.showFPS);
          t = function (i) {
            if (!e._paused) {
              e._intervalId = window.requestAnimFrame(t);
              if (30 === a && (s = !s)) {
                return;
              }
              n.mainLoop(i);
            }
          };
          e._intervalId = window.requestAnimFrame(t);
        }
      },
      _initConfig: function (t) {
        if ("number" != typeof t.debugMode) {
          t.debugMode = 0;
        }
        t.exposeClassName = !!t.exposeClassName;
        if ("number" != typeof t.frameRate) {
          t.frameRate = 60;
        }
        var e = t.renderMode;
        if ("number" != typeof e || e > 2 || e < 0) {
          t.renderMode = 0;
        }
        if ("boolean" != typeof t.registerSystemEvent) {
          t.registerSystemEvent = true;
        }
        t.showFPS = 1 !== e && !!t.showFPS;
        this.collisionMatrix = t.collisionMatrix || [];
        this.groupList = t.groupList || [];
        r._resetDebugSetting(t.debugMode);
        this.config = t;
        this._configLoaded = true;
      },
      _determineRenderType: function () {
        var t = this.config;
        var e = parseInt(t.renderMode) || 0;
        this.renderType = this.RENDER_TYPE_CANVAS;
        var i = false;
        if (0 === e) {
          if (cc.sys.capabilities.opengl) {
            this.renderType = this.RENDER_TYPE_WEBGL;
            i = true;
          } else if (cc.sys.capabilities.canvas) {
            this.renderType = this.RENDER_TYPE_CANVAS;
            i = true;
          }
        } else if (1 === e && cc.sys.capabilities.canvas) {
          this.renderType = this.RENDER_TYPE_CANVAS;
          i = true;
        } else if (2 === e && cc.sys.capabilities.opengl) {
          this.renderType = this.RENDER_TYPE_WEBGL;
          i = true;
        }
        if (!i) {
          throw Error(r.getError(3820, e));
        }
      },
      _initRenderer: function () {
        if (!this._rendererInitialized) {
          var t;
          var e;
          var n;
          var r;
          var o = this.config;
          var c = o.id;
          var l = c instanceof HTMLElement ? c : document.querySelector(c) || document.querySelector("#" + c);
          if ("CANVAS" === l.tagName) {
            t = l.width;
            e = l.height;
            this.canvas = n = l;
            this.container = r = document.createElement("DIV");
            if (n.parentNode) {
              n.parentNode.insertBefore(r, n);
            }
          } else {
            l.tagName;
            t = l.clientWidth;
            e = l.clientHeight;
            this.canvas = n = document.createElement("CANVAS");
            this.container = r = document.createElement("DIV");
            l.appendChild(r);
          }
          r.setAttribute("id", "Cocos2dGameContainer");
          r.appendChild(n);
          this.frame = r.parentNode === document.body ? document.documentElement : r.parentNode;
          (function (t) {
            if (!((" " + t.className + " ").indexOf(" gameCanvas ") > -1)) {
              if (t.className) {
                t.className += " ";
              }
              t.className += "gameCanvas";
            }
          })(n);
          n.setAttribute("width", t || 480);
          n.setAttribute("height", e || 320);
          n.setAttribute("tabindex", 99);
          this._determineRenderType();
          if (this.renderType === this.RENDER_TYPE_WEBGL) {
            var h = {
              stencil: true,
              antialias: cc.macro.ENABLE_WEBGL_ANTIALIAS,
              alpha: cc.macro.ENABLE_TRANSPARENT_CANVAS
            };
            s.initWebGL(n, h);
            this._renderContext = s.device._gl;
            if (!cc.macro.CLEANUP_IMAGE_CACHE && a) {
              a.enabled = true;
            }
          }
          if (!this._renderContext) {
            this.renderType = this.RENDER_TYPE_CANVAS;
            s.initCanvas(n);
            this._renderContext = s.device._ctx;
          }
          this.canvas.oncontextmenu = function () {
            if (!cc._isContextMenuEnable) {
              return false;
            }
          };
          i.setRegexLang(o.localeHint);
          this._rendererInitialized = true;
        }
      },
      _initEvents: function () {
        var t;
        var i = this;
        if (this.config.registerSystemEvent) {
          cc.internal.inputManager.registerSystemEvent(this.canvas);
        }
        if (undefined !== document.hidden) {
          t = "hidden";
        } else if (undefined !== document.mozHidden) {
          t = "mozHidden";
        } else if (undefined !== document.msHidden) {
          t = "msHidden";
        } else if (undefined !== document.webkitHidden) {
          t = "webkitHidden";
        }
        var n = false;
        function r() {
          if (!(n || i._paused)) {
            n = true;
            i.pause();
          }
        }
        function s() {
          if (n) {
            n = false;
            i.resume();
          }
        }
        if (t) {
          var a = ["visibilitychange", "mozvisibilitychange", "msvisibilitychange", "webkitvisibilitychange", "qbrowserVisibilityChange"];
          var o = function (e) {
            var i = document[t];
            if (i = i || e.hidden) {
              r();
            } else {
              s();
            }
          };
          for (var c = 0; c < a.length; c++) {
            document.addEventListener(a[c], o);
          }
        } else {
          window.addEventListener("blur", r);
          window.addEventListener("focus", s);
        }
        if (navigator.userAgent.indexOf("MicroMessenger") > -1) {
          window.onfocus = s;
        }
        if ("onpageshow" in window && "onpagehide" in window) {
          window.addEventListener("pagehide", r);
          window.addEventListener("pageshow", s);
          document.addEventListener("pagehide", r);
          document.addEventListener("pageshow", s);
        }
      }
    };
    n.call(o);
    cc.js.addon(o, n.prototype);
    cc.game = e.exports = o;
  }, {
    "../core/renderer/utils/dynamic-atlas/manager": 196,
    "./CCDebug": 23,
    "./event/event-target": 134,
    "./renderer": 193,
    "./utils/text-utils": 243
  }],
  26: [function (t, e) {
    "use strict";

    var i = t("./value-types");
    var n = t("./value-types/utils");
    var r = t("./utils/base-node");
    var s = t("./utils/prefab-helper");
    var a = t("./utils/trans-pool").NodeMemPool;
    var o = t("./utils/affine-transform");
    var c = t("./event-manager");
    var l = t("./platform/CCMacro");
    var h = t("./platform/js");
    t("./event/event");
    var u = t("./event/event-target");
    var f = t("./renderer/render-flow");
    var d = cc.Object.Flags.Destroying;
    var _ = Math.PI / 180;
    var p = !!cc.ActionManager;
    var v = function () {};
    var g = new i.Vec3();
    var m = new i.Quat();
    var y = new i.Vec3();
    var T = new i.Vec3();
    var E = new i.Quat();
    var A = new i.Quat();
    var x = new i.Vec3();
    var C = new i.Vec3();
    var b = new i.Vec3();
    var S = new i.Vec3();
    var R = new i.Vec3();
    var M = new i.Quat();
    var w = new i.Quat();
    var I = new i.Vec3();
    var O = new i.Quat();
    var L = new i.Vec3();
    var P = new i.Quat();
    var D = new i.Vec3();
    var N = new i.Vec3();
    var F = new i.Quat();
    var B = new i.Quat();
    new i.Quat();
    var V = cc.mat4();
    var k = new i.Vec3();
    var U = new h.Pool();
    U.get = function () {
      return this._get() || [];
    };
    var z = cc.Enum({
      DEBUG: 31
    });
    var G = cc.Enum({
      POSITION: 1,
      SCALE: 2,
      ROTATION: 4,
      SKEW: 8,
      TRS: 7,
      RS: 6,
      TRSS: 15,
      PHYSICS_POSITION: 16,
      PHYSICS_SCALE: 32,
      PHYSICS_ROTATION: 64,
      PHYSICS_TRS: 112,
      PHYSICS_RS: 96,
      ALL_POSITION: 17,
      ALL_SCALE: 34,
      ALL_ROTATION: 68,
      ALL_TRS: 119,
      ALL: 65535
    });
    var H = cc.Enum({
      TOUCH_START: "touchstart",
      TOUCH_MOVE: "touchmove",
      TOUCH_END: "touchend",
      TOUCH_CANCEL: "touchcancel",
      MOUSE_DOWN: "mousedown",
      MOUSE_MOVE: "mousemove",
      MOUSE_ENTER: "mouseenter",
      MOUSE_LEAVE: "mouseleave",
      MOUSE_UP: "mouseup",
      MOUSE_WHEEL: "mousewheel",
      POSITION_CHANGED: "position-changed",
      ROTATION_CHANGED: "rotation-changed",
      SCALE_CHANGED: "scale-changed",
      SIZE_CHANGED: "size-changed",
      ANCHOR_CHANGED: "anchor-changed",
      COLOR_CHANGED: "color-changed",
      CHILD_ADDED: "child-added",
      CHILD_REMOVED: "child-removed",
      CHILD_REORDER: "child-reorder",
      GROUP_CHANGED: "group-changed",
      SIBLING_ORDER_CHANGED: "sibling-order-changed"
    });
    var W = [H.TOUCH_START, H.TOUCH_MOVE, H.TOUCH_END, H.TOUCH_CANCEL];
    var X = [H.MOUSE_DOWN, H.MOUSE_ENTER, H.MOUSE_MOVE, H.MOUSE_LEAVE, H.MOUSE_UP, H.MOUSE_WHEEL];
    var Y = null;
    var j = function (t, e) {
      var i = t.getLocation();
      var n = this.owner;
      return !!n._hitTest(i, this) && (e.type = H.TOUCH_START, e.touch = t, e.bubbles = true, n.dispatchEvent(e), true);
    };
    var q = function (t, e) {
      var i = this.owner;
      e.type = H.TOUCH_MOVE;
      e.touch = t;
      e.bubbles = true;
      i.dispatchEvent(e);
    };
    var Z = function (t, e) {
      var i = t.getLocation();
      var n = this.owner;
      if (n._hitTest(i, this)) {
        e.type = H.TOUCH_END;
      } else {
        e.type = H.TOUCH_CANCEL;
      }
      e.touch = t;
      e.bubbles = true;
      n.dispatchEvent(e);
    };
    var K = function (t, e) {
      t.getLocation();
      var i = this.owner;
      e.type = H.TOUCH_CANCEL;
      e.touch = t;
      e.bubbles = true;
      i.dispatchEvent(e);
    };
    var Q = function (t) {
      var e = t.getLocation();
      var i = this.owner;
      if (i._hitTest(e, this)) {
        t.type = H.MOUSE_DOWN;
        t.bubbles = true;
        i.dispatchEvent(t);
      }
    };
    var J = function (t) {
      var e = t.getLocation();
      var i = this.owner;
      if (i._hitTest(e, this)) {
        if (!this._previousIn) {
          if (Y && Y._mouseListener) {
            t.type = H.MOUSE_LEAVE;
            Y.dispatchEvent(t);
            Y._mouseListener._previousIn = false;
          }
          Y = this.owner;
          t.type = H.MOUSE_ENTER;
          i.dispatchEvent(t);
          this._previousIn = true;
        }
        t.type = H.MOUSE_MOVE;
        t.bubbles = true;
        i.dispatchEvent(t);
      } else {
        if (!this._previousIn) {
          return;
        }
        t.type = H.MOUSE_LEAVE;
        i.dispatchEvent(t);
        this._previousIn = false;
        Y = null;
      }
      t.stopPropagation();
    };
    var $ = function (t) {
      var e = t.getLocation();
      var i = this.owner;
      if (i._hitTest(e, this)) {
        t.type = H.MOUSE_UP;
        t.bubbles = true;
        i.dispatchEvent(t);
        t.stopPropagation();
      }
    };
    var tt = function (t) {
      var e = t.getLocation();
      var i = this.owner;
      if (i._hitTest(e, this)) {
        t.type = H.MOUSE_WHEEL;
        t.bubbles = true;
        i.dispatchEvent(t);
        t.stopPropagation();
      }
    };
    function et(t, e) {
      if (e) {
        var i = 0;
        var n = null;
        for (var r = t; r && cc.Node.isNode(r); r = r._parent, ++i) {
          if (r.getComponent(e)) {
            var s = {
              index: i,
              node: r
            };
            if (n) {
              n.push(s);
            } else {
              n = [s];
            }
          }
        }
        return n;
      }
      return null;
    }
    function it(t, e) {
      if (!(t._objFlags & d)) {
        if (t._bubblingListeners) {
          var i = 0;
          for (var n = e.length; i < n; ++i) {
            if (t._bubblingListeners.hasEventListener(e[i])) {
              return true;
            }
          }
        }
        if (t._capturingListeners) {
          var r = 0;
          for (var s = e.length; r < s; ++r) {
            if (t._capturingListeners.hasEventListener(e[r])) {
              return true;
            }
          }
        }
        return false;
      }
      return true;
    }
    function nt(t, e, i) {
      var n;
      var r;
      e.target = t;
      i.length = 0;
      t._getCapturingTargets(e.type, i);
      e.eventPhase = 1;
      for (r = i.length - 1; r >= 0; --r) {
        if ((n = i[r])._capturingListeners && (e.currentTarget = n, n._capturingListeners.emit(e.type, e, i), e._propagationStopped)) {
          return void (i.length = 0);
        }
      }
      i.length = 0;
      e.eventPhase = 2;
      e.currentTarget = t;
      if (t._capturingListeners) {
        t._capturingListeners.emit(e.type, e);
      }
      if (!e._propagationImmediateStopped && t._bubblingListeners) {
        t._bubblingListeners.emit(e.type, e);
      }
      if (!e._propagationStopped && e.bubbles) {
        t._getBubblingTargets(e.type, i);
        e.eventPhase = 3;
        for (r = 0; r < i.length; ++r) {
          if ((n = i[r])._bubblingListeners && (e.currentTarget = n, n._bubblingListeners.emit(e.type, e), e._propagationStopped)) {
            return void (i.length = 0);
          }
        }
      }
      i.length = 0;
    }
    function rt(t) {
      var e = t.groupIndex;
      if (0 === e && t.parent) {
        e = rt(t.parent);
      }
      return e;
    }
    function st(t) {
      var e = rt(t);
      t._cullingMask = 1 << e;
      for (var i = 0; i < t._children.length; i++) {
        st(t._children[i]);
      }
    }
    function at() {
      if (this._localMatDirty & G.TRSS) {
        var t = this._matrix;
        var e = t.m;
        i.Trs.toMat4(t, this._trs);
        if (this._skewX || this._skewY) {
          var n = e[0];
          var r = e[1];
          var s = e[4];
          var a = e[5];
          var o = Math.tan(this._skewX * _);
          var c = Math.tan(this._skewY * _);
          if (Infinity === o) {
            o = 99999999;
          }
          if (Infinity === c) {
            c = 99999999;
          }
          e[0] = n + s * c;
          e[1] = r + a * c;
          e[4] = s + n * o;
          e[5] = a + r * o;
        }
        this._localMatDirty &= ~G.TRSS;
        this._worldMatDirty = true;
      }
    }
    function ot() {
      var t = this._localMatDirty;
      if (t & G.TRSS) {
        var e = this._matrix.m;
        var i = this._trs;
        if (t & (G.RS | G.SKEW)) {
          var n = -this._eulerAngles.z;
          var r = this._skewX || this._skewY;
          var s = i[7];
          var a = i[8];
          if (n || r) {
            var o = 1;
            var c = 0;
            var l = 0;
            var h = 1;
            if (n) {
              var u = n * _;
              l = Math.sin(u);
              o = h = Math.cos(u);
              c = -l;
            }
            e[0] = o *= s;
            e[1] = c *= s;
            e[4] = l *= a;
            e[5] = h *= a;
            if (r) {
              var f = e[0];
              var d = e[1];
              var p = e[4];
              var v = e[5];
              var g = Math.tan(this._skewX * _);
              var m = Math.tan(this._skewY * _);
              if (Infinity === g) {
                g = 99999999;
              }
              if (Infinity === m) {
                m = 99999999;
              }
              e[0] = f + p * m;
              e[1] = d + v * m;
              e[4] = p + f * g;
              e[5] = v + d * g;
            }
          } else {
            e[0] = s;
            e[1] = 0;
            e[4] = 0;
            e[5] = a;
          }
        }
        e[12] = i[0];
        e[13] = i[1];
        this._localMatDirty &= ~G.TRSS;
        this._worldMatDirty = true;
      }
    }
    function ct() {
      if (this._localMatDirty & G.TRSS) {
        this._updateLocalMatrix();
      }
      if (this._parent) {
        var t = this._parent._worldMatrix;
        i.Mat4.mul(this._worldMatrix, t, this._matrix);
      } else {
        i.Mat4.copy(this._worldMatrix, this._matrix);
      }
      this._worldMatDirty = false;
    }
    function lt() {
      if (this._localMatDirty & G.TRSS) {
        this._updateLocalMatrix();
      }
      var t = this._parent;
      if (t) {
        this._mulMat(this._worldMatrix, t._worldMatrix, this._matrix);
      } else {
        i.Mat4.copy(this._worldMatrix, this._matrix);
      }
      this._worldMatDirty = false;
    }
    function ht(t, e, i) {
      var n = e.m;
      var r = i.m;
      var s = t.m;
      var a = n[0];
      var o = n[1];
      var c = n[4];
      var l = n[5];
      var h = n[12];
      var u = n[13];
      var f = r[0];
      var d = r[1];
      var _ = r[4];
      var p = r[5];
      var v = r[12];
      var g = r[13];
      if (0 !== o || 0 !== c) {
        s[0] = f * a + d * c;
        s[1] = f * o + d * l;
        s[4] = _ * a + p * c;
        s[5] = _ * o + p * l;
        s[12] = a * v + c * g + h;
        s[13] = o * v + l * g + u;
      } else {
        s[0] = f * a;
        s[1] = d * l;
        s[4] = _ * a;
        s[5] = p * l;
        s[12] = a * v + h;
        s[13] = l * g + u;
      }
    }
    var ut = i.Mat4.mul;
    var ft = {
      name: "cc.Node",
      extends: r,
      properties: {
        _opacity: 255,
        _color: cc.Color.WHITE,
        _contentSize: cc.Size,
        _anchorPoint: cc.v2(.5, .5),
        _position: undefined,
        _scale: undefined,
        _trs: null,
        _eulerAngles: cc.Vec3,
        _skewX: 0,
        _skewY: 0,
        _zIndex: {
          default: undefined,
          type: cc.Integer
        },
        _localZOrder: {
          default: 0,
          serializable: false
        },
        _is3DNode: false,
        _groupIndex: {
          default: 0,
          formerlySerializedAs: "groupIndex"
        },
        groupIndex: {
          get: function () {
            return this._groupIndex;
          },
          set: function (t) {
            this._groupIndex = t;
            st(this);
            this.emit(H.GROUP_CHANGED, this);
          }
        },
        group: {
          get: function () {
            return cc.game.groupList[this.groupIndex] || "";
          },
          set: function (t) {
            this.groupIndex = cc.game.groupList.indexOf(t);
          }
        },
        x: {
          get: function () {
            return this._trs[0];
          },
          set: function (t) {
            var e = this._trs;
            if (t !== e[0]) {
              e[0] = t;
              this.setLocalDirty(G.ALL_POSITION);
              if (1 & this._eventMask) {
                this.emit(H.POSITION_CHANGED);
              }
            }
          }
        },
        y: {
          get: function () {
            return this._trs[1];
          },
          set: function (t) {
            var e = this._trs;
            if (t !== e[1]) {
              e[1] = t;
              this.setLocalDirty(G.ALL_POSITION);
              if (1 & this._eventMask) {
                this.emit(H.POSITION_CHANGED);
              }
            }
          }
        },
        z: {
          get: function () {
            return this._trs[2];
          },
          set: function (t) {
            var e = this._trs;
            if (t !== e[2]) {
              e[2] = t;
              this.setLocalDirty(G.ALL_POSITION);
              this._renderFlag |= f.FLAG_WORLD_TRANSFORM;
              if (1 & this._eventMask) {
                this.emit(H.POSITION_CHANGED);
              }
            }
          }
        },
        rotation: {
          get: function () {
            return -this.angle;
          },
          set: function (t) {
            this.angle = -t;
          }
        },
        angle: {
          get: function () {
            return this._eulerAngles.z;
          },
          set: function (t) {
            i.Vec3.set(this._eulerAngles, 0, 0, t);
            i.Trs.fromAngleZ(this._trs, t);
            this.setLocalDirty(G.ALL_ROTATION);
            if (4 & this._eventMask) {
              this.emit(H.ROTATION_CHANGED);
            }
          }
        },
        rotationX: {
          get: function () {
            return this._eulerAngles.x;
          },
          set: function (t) {
            if (this._eulerAngles.x !== t) {
              this._eulerAngles.x = t;
              if (this._eulerAngles.x === this._eulerAngles.y) {
                i.Trs.fromAngleZ(this._trs, -t);
              } else {
                i.Trs.fromEulerNumber(this._trs, t, this._eulerAngles.y, 0);
              }
              this.setLocalDirty(G.ALL_ROTATION);
              if (4 & this._eventMask) {
                this.emit(H.ROTATION_CHANGED);
              }
            }
          }
        },
        rotationY: {
          get: function () {
            return this._eulerAngles.y;
          },
          set: function (t) {
            if (this._eulerAngles.y !== t) {
              this._eulerAngles.y = t;
              if (this._eulerAngles.x === this._eulerAngles.y) {
                i.Trs.fromAngleZ(this._trs, -t);
              } else {
                i.Trs.fromEulerNumber(this._trs, this._eulerAngles.x, t, 0);
              }
              this.setLocalDirty(G.ALL_ROTATION);
              if (4 & this._eventMask) {
                this.emit(H.ROTATION_CHANGED);
              }
            }
          }
        },
        eulerAngles: {
          get: function () {
            return i.Trs.toEuler(this._eulerAngles, this._trs);
          },
          set: function (t) {
            i.Trs.fromEuler(this._trs, t);
            this.setLocalDirty(G.ALL_ROTATION);
            this._renderFlag |= f.FLAG_TRANSFORM;
            if (4 & this._eventMask) {
              this.emit(H.ROTATION_CHANGED);
            }
          }
        },
        quat: {
          get: function () {
            var t = this._trs;
            return new i.Quat(t[3], t[4], t[5], t[6]);
          },
          set: function (t) {
            this.setRotation(t);
          }
        },
        scale: {
          get: function () {
            return this._trs[7];
          },
          set: function (t) {
            this.setScale(t);
          }
        },
        scaleX: {
          get: function () {
            return this._trs[7];
          },
          set: function (t) {
            if (this._trs[7] !== t) {
              this._trs[7] = t;
              this.setLocalDirty(G.ALL_SCALE);
              if (2 & this._eventMask) {
                this.emit(H.SCALE_CHANGED);
              }
            }
          }
        },
        scaleY: {
          get: function () {
            return this._trs[8];
          },
          set: function (t) {
            if (this._trs[8] !== t) {
              this._trs[8] = t;
              this.setLocalDirty(G.ALL_SCALE);
              if (2 & this._eventMask) {
                this.emit(H.SCALE_CHANGED);
              }
            }
          }
        },
        scaleZ: {
          get: function () {
            return this._trs[9];
          },
          set: function (t) {
            if (this._trs[9] !== t) {
              this._trs[9] = t;
              this.setLocalDirty(G.ALL_SCALE);
              this._renderFlag |= f.FLAG_TRANSFORM;
              if (2 & this._eventMask) {
                this.emit(H.SCALE_CHANGED);
              }
            }
          }
        },
        skewX: {
          get: function () {
            return this._skewX;
          },
          set: function (t) {
            this._skewX = t;
            this.setLocalDirty(G.SKEW);
          }
        },
        skewY: {
          get: function () {
            return this._skewY;
          },
          set: function (t) {
            this._skewY = t;
            this.setLocalDirty(G.SKEW);
          }
        },
        opacity: {
          get: function () {
            return this._opacity;
          },
          set: function (t) {
            if (this._opacity !== t) {
              this._opacity = t;
              this._renderFlag |= f.FLAG_OPACITY_COLOR;
            }
          },
          range: [0, 255]
        },
        color: {
          get: function () {
            return this._color.clone();
          },
          set: function (t) {
            if (!this._color.equals(t)) {
              this._color.set(t);
              this._renderFlag |= f.FLAG_COLOR;
              if (32 & this._eventMask) {
                this.emit(H.COLOR_CHANGED, t);
              }
            }
          }
        },
        anchorX: {
          get: function () {
            return this._anchorPoint.x;
          },
          set: function (t) {
            var e = this._anchorPoint;
            if (e.x !== t) {
              e.x = t;
              if (16 & this._eventMask) {
                this.emit(H.ANCHOR_CHANGED);
              }
            }
          }
        },
        anchorY: {
          get: function () {
            return this._anchorPoint.y;
          },
          set: function (t) {
            var e = this._anchorPoint;
            if (e.y !== t) {
              e.y = t;
              if (16 & this._eventMask) {
                this.emit(H.ANCHOR_CHANGED);
              }
            }
          }
        },
        width: {
          get: function () {
            return this._contentSize.width;
          },
          set: function (t) {
            if (t !== this._contentSize.width) {
              this._contentSize.width = t;
              if (8 & this._eventMask) {
                this.emit(H.SIZE_CHANGED);
              }
            }
          }
        },
        height: {
          get: function () {
            return this._contentSize.height;
          },
          set: function (t) {
            if (t !== this._contentSize.height) {
              this._contentSize.height = t;
              if (8 & this._eventMask) {
                this.emit(H.SIZE_CHANGED);
              }
            }
          }
        },
        zIndex: {
          get: function () {
            return this._localZOrder >> 16;
          },
          set: function (t) {
            if (t > l.MAX_ZINDEX) {
              t = l.MAX_ZINDEX;
            } else if (t < l.MIN_ZINDEX) {
              t = l.MIN_ZINDEX;
            }
            if (this.zIndex !== t) {
              this._localZOrder = 65535 & this._localZOrder | t << 16;
              this.emit(H.SIBLING_ORDER_CHANGED);
              this._onSiblingIndexChanged();
            }
          }
        },
        swallowTouches: {
          get: function () {
            return this._swallowTouches;
          },
          set: function (t) {
            this._swallowTouches = t;
            if (this._touchListener) {
              this._touchListener.setSwallowTouches(t);
            }
          }
        },
        is3DNode: {
          get: function () {
            return this._is3DNode;
          },
          set: function (t) {
            if (this._is3DNode !== t) {
              this._is3DNode = t;
              this._update3DFunction();
            }
          }
        },
        up: {
          get: function () {
            return i.Vec3.transformQuat(L, i.Vec3.UP, this.getWorldRotation(P)).clone();
          }
        },
        right: {
          get: function () {
            return i.Vec3.transformQuat(L, i.Vec3.RIGHT, this.getWorldRotation(P)).clone();
          }
        },
        forward: {
          get: function () {
            return i.Vec3.transformQuat(L, i.Vec3.FORWARD, this.getWorldRotation(P)).clone();
          }
        }
      },
      ctor: function () {
        this._reorderChildDirty = false;
        this._widget = null;
        this._renderComponent = null;
        this._capturingListeners = null;
        this._bubblingListeners = null;
        this._touchListener = null;
        this._mouseListener = null;
        this._initDataFromPool();
        this._eventMask = 0;
        this._cullingMask = 1;
        this._childArrivalOrder = 1;
        this._swallowTouches = true;
        this._renderFlag = f.FLAG_TRANSFORM | f.FLAG_OPACITY_COLOR;
      },
      statics: {
        EventType: H,
        _LocalDirtyFlag: G,
        isNode: function (t) {
          return t instanceof dt && (t.constructor === dt || !(t instanceof cc.Scene));
        },
        BuiltinGroupIndex: z
      },
      _onSiblingIndexChanged: function () {
        if (this._parent) {
          this._parent._delaySort();
        }
      },
      _onPreDestroy: function () {
        this._onPreDestroyBase();
        if (p) {
          cc.director.getActionManager().removeAllActionsFromTarget(this);
        }
        if (Y === this) {
          Y = null;
        }
        if (this._bubblingListeners) {
          this._bubblingListeners.clear();
        }
        if (this._capturingListeners) {
          this._capturingListeners.clear();
        }
        if (this._touchListener || this._mouseListener) {
          c.removeListeners(this);
          if (this._touchListener) {
            this._touchListener.owner = null;
            this._touchListener.mask = null;
            this._touchListener = null;
          }
          if (this._mouseListener) {
            this._mouseListener.owner = null;
            this._mouseListener.mask = null;
            this._mouseListener = null;
          }
        }
        this._backDataIntoPool();
        if (this._reorderChildDirty) {
          cc.director.__fastOff(cc.Director.EVENT_AFTER_UPDATE, this.sortAllChildren, this);
        }
      },
      _onPostActivated: function (t) {
        var e = p ? cc.director.getActionManager() : null;
        if (t) {
          this._renderFlag |= f.FLAG_WORLD_TRANSFORM;
          if (e) {
            e.resumeTarget(this);
          }
          c.resumeTarget(this);
          this._checkListenerMask();
        } else {
          if (e) {
            e.pauseTarget(this);
          }
          c.pauseTarget(this);
        }
      },
      _onHierarchyChanged: function (t) {
        this._updateOrderOfArrival();
        st(this);
        if (this._parent) {
          this._parent._delaySort();
        }
        this._renderFlag |= f.FLAG_WORLD_TRANSFORM | f.FLAG_OPACITY_COLOR;
        this._onHierarchyChangedBase(t);
        if (cc._widgetManager) {
          cc._widgetManager._nodesOrderDirty = true;
        }
        if (t && this._activeInHierarchy) {
          this._checkListenerMask();
        }
      },
      _update3DFunction: function () {
        if (this._is3DNode) {
          this._updateLocalMatrix = at;
          this._calculWorldMatrix = ct;
          this._mulMat = ut;
        } else {
          this._updateLocalMatrix = ot;
          this._calculWorldMatrix = lt;
          this._mulMat = ht;
        }
        if (this._renderComponent && this._renderComponent._on3DNodeChanged) {
          this._renderComponent._on3DNodeChanged();
        }
        this._renderFlag |= f.FLAG_TRANSFORM;
        this._localMatDirty = G.ALL;
      },
      _initDataFromPool: function () {
        if (!this._spaceInfo) {
          this._spaceInfo = a.pop();
        }
        var t = this._spaceInfo;
        this._matrix = cc.mat4(t.localMat);
        i.Mat4.identity(this._matrix);
        this._worldMatrix = cc.mat4(t.worldMat);
        i.Mat4.identity(this._worldMatrix);
        this._localMatDirty = G.ALL;
        this._worldMatDirty = true;
        var e = this._trs = t.trs;
        e[0] = 0;
        e[1] = 0;
        e[2] = 0;
        e[3] = 0;
        e[4] = 0;
        e[5] = 0;
        e[6] = 1;
        e[7] = 1;
        e[8] = 1;
        e[9] = 1;
      },
      _backDataIntoPool: function () {
        a.push(this._spaceInfo);
        this._matrix = null;
        this._worldMatrix = null;
        this._trs = null;
        this._spaceInfo = null;
      },
      _toEuler: function () {
        if (this.is3DNode) {
          i.Trs.toEuler(this._eulerAngles, this._trs);
        } else {
          var t = Math.asin(this._trs[5]) / _ * 2;
          i.Vec3.set(this._eulerAngles, 0, 0, t);
        }
      },
      _fromEuler: function () {
        if (this.is3DNode) {
          i.Trs.fromEuler(this._trs, this._eulerAngles);
        } else {
          i.Trs.fromAngleZ(this._trs, this._eulerAngles.z);
        }
      },
      _initProperties: function () {
        if (this._is3DNode) {
          this._update3DFunction();
        }
        var t = this._trs;
        if (t) {
          var e = t;
          t = this._trs = this._spaceInfo.trs;
          if (11 === e.length) {
            t.set(e.subarray(1));
          } else {
            t.set(e);
          }
        } else {
          t = this._trs = this._spaceInfo.trs;
        }
        this._fromEuler();
      },
      _onBatchCreated: function (t) {
        this._initProperties();
        this._cullingMask = 1 << rt(this);
        if (!this._activeInHierarchy) {
          if (p) {
            cc.director.getActionManager().pauseTarget(this);
          }
          c.pauseTarget(this);
        }
        var e = this._children;
        var i = 0;
        for (var n = e.length; i < n; i++) {
          var r = e[i];
          if (!t) {
            var a = r._prefab;
            if (a && a.sync && a.root === r) {
              s.syncWithPrefab(r);
            }
            r._updateOrderOfArrival();
          }
          r._onBatchCreated(t);
        }
        if (e.length > 0) {
          this._renderFlag |= f.FLAG_CHILDREN;
        }
      },
      _checkListenerMask: function () {
        if (this._touchListener) {
          var t = this._touchListener.mask = et(this, cc.Mask);
          if (this._mouseListener) {
            this._mouseListener.mask = t;
          }
        } else if (this._mouseListener) {
          this._mouseListener.mask = et(this, cc.Mask);
        }
      },
      _checknSetupSysEvent: function (t) {
        var e = false;
        var i = false;
        if (-1 !== W.indexOf(t)) {
          if (!this._touchListener) {
            this._touchListener = cc.EventListener.create({
              event: cc.EventListener.TOUCH_ONE_BY_ONE,
              swallowTouches: this._swallowTouches,
              owner: this,
              mask: et(this, cc.Mask),
              onTouchBegan: j,
              onTouchMoved: q,
              onTouchEnded: Z,
              onTouchCancelled: K
            });
            c.addListener(this._touchListener, this);
            e = true;
          }
          i = true;
        } else if (-1 !== X.indexOf(t)) {
          if (!this._mouseListener) {
            this._mouseListener = cc.EventListener.create({
              event: cc.EventListener.MOUSE,
              _previousIn: false,
              owner: this,
              mask: et(this, cc.Mask),
              onMouseDown: Q,
              onMouseMove: J,
              onMouseUp: $,
              onMouseScroll: tt
            });
            c.addListener(this._mouseListener, this);
            e = true;
          }
          i = true;
        }
        if (e && !this._activeInHierarchy) {
          cc.director.getScheduler().schedule(function () {
            if (!this._activeInHierarchy) {
              c.pauseTarget(this);
            }
          }, this, 0, 0, 0, false);
        }
        return i;
      },
      on: function (t, e, i, n) {
        return this._realon(t, e, i, n, false);
      },
      _realon: function (t, e, i, n, r) {
        if ("boolean" == typeof i) {
          n = i;
          i = undefined;
        } else {
          n = !!n;
        }
        if (e) {
          if (this._checknSetupSysEvent(t)) {
            return this._onDispatch(t, e, i, n, r);
          }
          switch (t) {
            case H.POSITION_CHANGED:
              this._eventMask |= 1;
              break;
            case H.SCALE_CHANGED:
              this._eventMask |= 2;
              break;
            case H.ROTATION_CHANGED:
              this._eventMask |= 4;
              break;
            case H.SIZE_CHANGED:
              this._eventMask |= 8;
              break;
            case H.ANCHOR_CHANGED:
              this._eventMask |= 16;
              break;
            case H.COLOR_CHANGED:
              this._eventMask |= 32;
          }
          return this._onDispatch(t, e, i, false, r);
        }
      },
      once: function (t, e, i, n) {
        this._realon(t, e, i, n, true);
      },
      _onDispatch: function (t, e, i, n, r) {
        var s = null;
        if (!(s = n ? this._capturingListeners = this._capturingListeners || new u() : this._bubblingListeners = this._bubblingListeners || new u()).hasEventListener(t, e, i)) {
          s.on(t, e, i, r);
          if (i && i.__eventTargets) {
            i.__eventTargets.push(this);
          }
        }
        return e;
      },
      off: function (t, e, i, n) {
        if ("boolean" == typeof i) {
          n = i;
          i = undefined;
        } else {
          n = !!n;
        }
        var r = -1 !== W.indexOf(t);
        var s = !r && -1 !== X.indexOf(t);
        if (r || s) {
          this._offDispatch(t, e, i, n);
          if (r) {
            if (this._touchListener && !it(this, W)) {
              c.removeListener(this._touchListener);
              this._touchListener = null;
            }
          } else if (s && this._mouseListener && !it(this, X)) {
            c.removeListener(this._mouseListener);
            this._mouseListener = null;
          }
        } else if (this._bubblingListeners && (this._offDispatch(t, e, i, false), !this._bubblingListeners.hasEventListener(t))) {
          switch (t) {
            case H.POSITION_CHANGED:
              this._eventMask &= -2;
              break;
            case H.SCALE_CHANGED:
              this._eventMask &= -3;
              break;
            case H.ROTATION_CHANGED:
              this._eventMask &= -5;
              break;
            case H.SIZE_CHANGED:
              this._eventMask &= -9;
              break;
            case H.ANCHOR_CHANGED:
              this._eventMask &= -17;
              break;
            case H.COLOR_CHANGED:
              this._eventMask &= -33;
          }
        }
      },
      _offDispatch: function (t, e, i, n) {
        if (e) {
          var r = n ? this._capturingListeners : this._bubblingListeners;
          if (r && r.off(t, e, i) && i && i.__eventTargets) {
            h.array.fastRemove(i.__eventTargets, this);
          }
        } else {
          if (this._capturingListeners) {
            this._capturingListeners.removeAll(t);
          }
          if (this._bubblingListeners) {
            this._bubblingListeners.removeAll(t);
          }
        }
      },
      targetOff: function (t) {
        var e = this._bubblingListeners;
        if (e) {
          e.targetOff(t);
          if (1 & this._eventMask && !e.hasEventListener(H.POSITION_CHANGED)) {
            this._eventMask &= -2;
          }
          if (2 & this._eventMask && !e.hasEventListener(H.SCALE_CHANGED)) {
            this._eventMask &= -3;
          }
          if (4 & this._eventMask && !e.hasEventListener(H.ROTATION_CHANGED)) {
            this._eventMask &= -5;
          }
          if (8 & this._eventMask && !e.hasEventListener(H.SIZE_CHANGED)) {
            this._eventMask &= -9;
          }
          if (16 & this._eventMask && !e.hasEventListener(H.ANCHOR_CHANGED)) {
            this._eventMask &= -17;
          }
          if (32 & this._eventMask && !e.hasEventListener(H.COLOR_CHANGED)) {
            this._eventMask &= -33;
          }
        }
        if (this._capturingListeners) {
          this._capturingListeners.targetOff(t);
        }
        if (t && t.__eventTargets) {
          h.array.fastRemoveAll(t.__eventTargets, this);
        }
        if (this._touchListener && !it(this, W)) {
          c.removeListener(this._touchListener);
          this._touchListener = null;
        }
        if (this._mouseListener && !it(this, X)) {
          c.removeListener(this._mouseListener);
          this._mouseListener = null;
        }
      },
      hasEventListener: function (t) {
        var e = false;
        if (this._bubblingListeners) {
          e = this._bubblingListeners.hasEventListener(t);
        }
        if (!e && this._capturingListeners) {
          e = this._capturingListeners.hasEventListener(t);
        }
        return e;
      },
      emit: function (t, e, i, n, r, s) {
        if (this._bubblingListeners) {
          this._bubblingListeners.emit(t, e, i, n, r, s);
        }
      },
      dispatchEvent: function (t) {
        var e = U.get();
        nt(this, t, e);
        U.put(e);
      },
      pauseSystemEvents: function (t) {
        c.pauseTarget(this, t);
      },
      resumeSystemEvents: function (t) {
        c.resumeTarget(this, t);
      },
      _hitTest: function (t, e) {
        var n = this._contentSize.width;
        var r = this._contentSize.height;
        var o = cc.Camera.findCamera(this);
        if (o) {
          o.getScreenToWorldPoint(t, D);
        } else {
          D.set(t);
        }
        this._updateWorldMatrix();
        if (!i.Mat4.invert(V, this._worldMatrix)) {
          return false;
        }
        i.Vec2.transformMat4(N, D, V);
        N.x += this._anchorPoint.x * n;
        N.y += this._anchorPoint.y * r;
        var c = false;
        if (N.x >= 0 && N.y >= 0 && N.x <= n && N.y <= r && (c = true, e && e.mask)) {
          var l = e.mask;
          var h = this;
          var u = l ? l.length : 0;
          var f = 0;
          for (var d = 0; h && d < u; ++f, h = h.parent) {
            var _ = l[d];
            if (f === _.index) {
              if (h !== _.node) {
                l.length = d;
                break;
              }
              var p = h.getComponent(cc.Mask);
              if (p && p._enabled && !p._hitTest(D)) {
                c = false;
                break;
              }
              d++;
            } else if (f > _.index) {
              l.length = d;
              break;
            }
          }
        }
        return c;
      },
      _getCapturingTargets: function (t, e) {
        for (var i = this.parent; i;) {
          if (i._capturingListeners && i._capturingListeners.hasEventListener(t)) {
            e.push(i);
          }
          i = i.parent;
        }
      },
      _getBubblingTargets: function (t, e) {
        for (var i = this.parent; i;) {
          if (i._bubblingListeners && i._bubblingListeners.hasEventListener(t)) {
            e.push(i);
          }
          i = i.parent;
        }
      },
      runAction: p ? function (t) {
        if (this.active) {
          var e = cc.director.getActionManager();
          if (!e._suppressDeprecation) {
            e._suppressDeprecation = true;
          }
          e.addAction(t, this, false);
          return t;
        }
      } : v,
      pauseAllActions: p ? function () {
        cc.director.getActionManager().pauseTarget(this);
      } : v,
      resumeAllActions: p ? function () {
        cc.director.getActionManager().resumeTarget(this);
      } : v,
      stopAllActions: p ? function () {
        cc.director.getActionManager().removeAllActionsFromTarget(this);
      } : v,
      stopAction: p ? function (t) {
        cc.director.getActionManager().removeAction(t);
      } : v,
      stopActionByTag: p ? function (t) {
        if (t !== cc.Action.TAG_INVALID) {
          cc.director.getActionManager().removeActionByTag(t, this);
        }
      } : v,
      getActionByTag: p ? function (t) {
        return t === cc.Action.TAG_INVALID ? null : cc.director.getActionManager().getActionByTag(t, this);
      } : function () {
        return null;
      },
      getNumberOfRunningActions: p ? function () {
        return cc.director.getActionManager().getNumberOfRunningActionsInTarget(this);
      } : function () {
        return 0;
      },
      getPosition: function (t) {
        t = t || new i.Vec3();
        return i.Trs.toPosition(t, this._trs);
      },
      setPosition: function (t, e, i) {
        var n;
        if (undefined === e) {
          n = t.x;
          e = t.y;
          i = t.z;
        } else {
          n = t;
        }
        var r = this._trs;
        if (undefined === i) {
          i = r[2];
        }
        if (r[0] !== n || r[1] !== e || r[2] !== i) {
          r[0] = n;
          r[1] = e;
          r[2] = i;
          this.setLocalDirty(G.ALL_POSITION);
          this._renderFlag |= f.FLAG_WORLD_TRANSFORM;
          if (1 & this._eventMask) {
            this.emit(H.POSITION_CHANGED);
          }
        }
      },
      getScale: function (t) {
        return undefined !== t ? i.Trs.toScale(t, this._trs) : this._trs[7];
      },
      setScale: function (t, e, i) {
        var n;
        if (t && "number" != typeof t) {
          n = t.x;
          e = t.y;
          i = t.z;
        } else if (undefined !== t && undefined === e) {
          n = t;
          e = t;
          i = t;
        } else {
          n = t;
        }
        var r = this._trs;
        if (undefined === i) {
          i = r[9];
        }
        if (!(r[7] === n && r[8] === e && r[9] === i)) {
          r[7] = n;
          r[8] = e;
          r[9] = i;
          this.setLocalDirty(G.ALL_SCALE);
          this._renderFlag |= f.FLAG_TRANSFORM;
          if (2 & this._eventMask) {
            this.emit(H.SCALE_CHANGED);
          }
        }
      },
      getRotation: function (t) {
        return t instanceof i.Quat ? i.Trs.toRotation(t, this._trs) : -this.angle;
      },
      setRotation: function (t, e, i, n) {
        if ("number" == typeof t && undefined === e) {
          this.angle = -t;
        } else {
          var r = t;
          if (undefined === e) {
            r = t.x;
            e = t.y;
            i = t.z;
            n = t.w;
          }
          var s = this._trs;
          if (!(s[3] === r && s[4] === e && s[5] === i && s[6] === n)) {
            s[3] = r;
            s[4] = e;
            s[5] = i;
            s[6] = n;
            this.setLocalDirty(G.ALL_ROTATION);
            if (4 & this._eventMask) {
              this.emit(H.ROTATION_CHANGED);
            }
          }
        }
      },
      getContentSize: function () {
        return cc.size(this._contentSize.width, this._contentSize.height);
      },
      setContentSize: function (t, e) {
        var i = this._contentSize;
        if (undefined === e) {
          0;
          if (n.approx(t.width, i.width) && (0, n.approx)(t.height, i.height)) {
            return;
          }
          i.width = t.width;
          i.height = t.height;
        } else {
          0;
          if (n.approx(t, i.width) && (0, n.approx)(e, i.height)) {
            return;
          }
          i.width = t;
          i.height = e;
        }
        if (8 & this._eventMask) {
          this.emit(H.SIZE_CHANGED);
        }
      },
      getAnchorPoint: function () {
        return cc.v2(this._anchorPoint);
      },
      setAnchorPoint: function (t, e) {
        var i = this._anchorPoint;
        if (undefined === e) {
          if (t.x === i.x && t.y === i.y) {
            return;
          }
          i.x = t.x;
          i.y = t.y;
        } else {
          if (t === i.x && e === i.y) {
            return;
          }
          i.x = t;
          i.y = e;
        }
        this.setLocalDirty(G.ALL_POSITION);
        if (16 & this._eventMask) {
          this.emit(H.ANCHOR_CHANGED);
        }
      },
      _invTransformPoint: function (t, e) {
        if (this._parent) {
          this._parent._invTransformPoint(t, e);
        } else {
          i.Vec3.copy(t, e);
        }
        var n = this._trs;
        i.Trs.toPosition(y, n);
        i.Vec3.sub(t, t, y);
        i.Trs.toRotation(E, n);
        i.Quat.conjugate(A, E);
        i.Vec3.transformQuat(t, t, A);
        i.Trs.toScale(y, n);
        i.Vec3.inverseSafe(T, y);
        i.Vec3.mul(t, t, T);
        return t;
      },
      getWorldPosition: function (t) {
        i.Trs.toPosition(t, this._trs);
        var e;
        for (var n = this._parent; n;) {
          e = n._trs;
          i.Trs.toScale(g, e);
          i.Vec3.mul(t, t, g);
          i.Trs.toRotation(m, e);
          i.Vec3.transformQuat(t, t, m);
          i.Trs.toPosition(g, e);
          i.Vec3.add(t, t, g);
          n = n._parent;
        }
        return t;
      },
      setWorldPosition: function (t) {
        var e = this._trs;
        if (this._parent) {
          this._parent._invTransformPoint(x, t);
        } else {
          i.Vec3.copy(x, t);
        }
        i.Trs.fromPosition(e, x);
        this.setLocalDirty(G.ALL_POSITION);
        if (1 & this._eventMask) {
          this.emit(H.POSITION_CHANGED);
        }
      },
      getWorldRotation: function (t) {
        i.Trs.toRotation(F, this._trs);
        i.Quat.copy(t, F);
        for (var e = this._parent; e;) {
          i.Trs.toRotation(F, e._trs);
          i.Quat.mul(t, F, t);
          e = e._parent;
        }
        return t;
      },
      setWorldRotation: function (t) {
        if (this._parent) {
          this._parent.getWorldRotation(B);
          i.Quat.conjugate(B, B);
          i.Quat.mul(B, B, t);
        } else {
          i.Quat.copy(B, t);
        }
        i.Trs.fromRotation(this._trs, B);
        this.setLocalDirty(G.ALL_ROTATION);
      },
      getWorldScale: function (t) {
        i.Trs.toScale(C, this._trs);
        i.Vec3.copy(t, C);
        for (var e = this._parent; e;) {
          i.Trs.toScale(C, e._trs);
          i.Vec3.mul(t, t, C);
          e = e._parent;
        }
        return t;
      },
      setWorldScale: function (t) {
        if (this._parent) {
          this._parent.getWorldScale(b);
          i.Vec3.div(b, t, b);
        } else {
          i.Vec3.copy(b, t);
        }
        i.Trs.fromScale(this._trs, b);
        this.setLocalDirty(G.ALL_SCALE);
      },
      getWorldRT: function (t) {
        var r = this._trs;
        i.Trs.toPosition(S, r);
        i.Trs.toRotation(M, r);
        for (var s = this._parent; s;) {
          r = s._trs;
          i.Trs.toScale(R, r);
          i.Vec3.mul(S, S, R);
          i.Trs.toRotation(w, r);
          i.Vec3.transformQuat(S, S, w);
          i.Trs.toPosition(R, r);
          i.Vec3.add(S, S, R);
          i.Quat.mul(M, w, M);
          s = s._parent;
        }
        i.Mat4.fromRT(t, M, S);
        return t;
      },
      lookAt: function (t, e) {
        this.getWorldPosition(I);
        i.Vec3.sub(I, I, t);
        i.Vec3.normalize(I, I);
        i.Quat.fromViewUp(O, I, e);
        this.setWorldRotation(O);
      },
      _updateLocalMatrix: ot,
      _calculWorldMatrix: function () {
        if (this._localMatDirty & G.TRSS) {
          this._updateLocalMatrix();
        }
        var t = this._parent;
        if (t) {
          this._mulMat(this._worldMatrix, t._worldMatrix, this._matrix);
        } else {
          i.Mat4.copy(this._worldMatrix, this._matrix);
        }
        this._worldMatDirty = false;
      },
      _mulMat: ht,
      _updateWorldMatrix: function () {
        if (this._parent) {
          this._parent._updateWorldMatrix();
        }
        if (this._worldMatDirty) {
          this._calculWorldMatrix();
          var t = this._children;
          var e = 0;
          for (var i = t.length; e < i; e++) {
            t[e]._worldMatDirty = true;
          }
        }
      },
      setLocalDirty: function (t) {
        this._localMatDirty |= t;
        this._worldMatDirty = true;
        if (t === G.ALL_POSITION || t === G.POSITION) {
          this._renderFlag |= f.FLAG_WORLD_TRANSFORM;
        } else {
          this._renderFlag |= f.FLAG_TRANSFORM;
        }
      },
      setWorldDirty: function () {
        this._worldMatDirty = true;
      },
      getLocalMatrix: function (t) {
        this._updateLocalMatrix();
        return i.Mat4.copy(t, this._matrix);
      },
      getWorldMatrix: function (t) {
        this._updateWorldMatrix();
        return i.Mat4.copy(t, this._worldMatrix);
      },
      convertToNodeSpaceAR: function (t, e) {
        this._updateWorldMatrix();
        i.Mat4.invert(V, this._worldMatrix);
        return t instanceof cc.Vec2 ? (e = e || new cc.Vec2(), i.Vec2.transformMat4(e, t, V)) : (e = e || new cc.Vec3(), i.Vec3.transformMat4(e, t, V));
      },
      convertToWorldSpaceAR: function (t, e) {
        this._updateWorldMatrix();
        return t instanceof cc.Vec2 ? (e = e || new cc.Vec2(), i.Vec2.transformMat4(e, t, this._worldMatrix)) : (e = e || new cc.Vec3(), i.Vec3.transformMat4(e, t, this._worldMatrix));
      },
      convertToNodeSpace: function (t) {
        this._updateWorldMatrix();
        i.Mat4.invert(V, this._worldMatrix);
        var e = new cc.Vec2();
        i.Vec2.transformMat4(e, t, V);
        e.x += this._anchorPoint.x * this._contentSize.width;
        e.y += this._anchorPoint.y * this._contentSize.height;
        return e;
      },
      convertToWorldSpace: function (t) {
        this._updateWorldMatrix();
        var e = new cc.Vec2(t.x - this._anchorPoint.x * this._contentSize.width, t.y - this._anchorPoint.y * this._contentSize.height);
        return i.Vec2.transformMat4(e, e, this._worldMatrix);
      },
      getNodeToParentTransform: function (t) {
        if (!t) {
          t = o.identity();
        }
        this._updateLocalMatrix();
        var e = this._contentSize;
        k.x = -this._anchorPoint.x * e.width;
        k.y = -this._anchorPoint.y * e.height;
        i.Mat4.copy(V, this._matrix);
        i.Mat4.transform(V, V, k);
        return o.fromMat4(t, V);
      },
      getNodeToParentTransformAR: function (t) {
        if (!t) {
          t = o.identity();
        }
        this._updateLocalMatrix();
        return o.fromMat4(t, this._matrix);
      },
      getNodeToWorldTransform: function (t) {
        if (!t) {
          t = o.identity();
        }
        this._updateWorldMatrix();
        var e = this._contentSize;
        k.x = -this._anchorPoint.x * e.width;
        k.y = -this._anchorPoint.y * e.height;
        i.Mat4.copy(V, this._worldMatrix);
        i.Mat4.transform(V, V, k);
        return o.fromMat4(t, V);
      },
      getNodeToWorldTransformAR: function (t) {
        if (!t) {
          t = o.identity();
        }
        this._updateWorldMatrix();
        return o.fromMat4(t, this._worldMatrix);
      },
      getParentToNodeTransform: function (t) {
        if (!t) {
          t = o.identity();
        }
        this._updateLocalMatrix();
        i.Mat4.invert(V, this._matrix);
        return o.fromMat4(t, V);
      },
      getWorldToNodeTransform: function (t) {
        if (!t) {
          t = o.identity();
        }
        this._updateWorldMatrix();
        i.Mat4.invert(V, this._worldMatrix);
        return o.fromMat4(t, V);
      },
      convertTouchToNodeSpace: function (t) {
        return this.convertToNodeSpace(t.getLocation());
      },
      convertTouchToNodeSpaceAR: function (t) {
        return this.convertToNodeSpaceAR(t.getLocation());
      },
      getBoundingBox: function () {
        this._updateLocalMatrix();
        var t = this._contentSize.width;
        var e = this._contentSize.height;
        var i = cc.rect(-this._anchorPoint.x * t, -this._anchorPoint.y * e, t, e);
        return i.transformMat4(i, this._matrix);
      },
      getBoundingBoxToWorld: function () {
        return this._parent ? (this._parent._updateWorldMatrix(), this._getBoundingBoxTo()) : this.getBoundingBox();
      },
      _getBoundingBoxTo: function () {
        var t = this._contentSize.width;
        var e = this._contentSize.height;
        var i = cc.rect(-this._anchorPoint.x * t, -this._anchorPoint.y * e, t, e);
        this._calculWorldMatrix();
        i.transformMat4(i, this._worldMatrix);
        if (!this._children) {
          return i;
        }
        var n = this._children;
        for (var r = 0; r < n.length; r++) {
          var s = n[r];
          if (s && s.active) {
            var a = s._getBoundingBoxTo();
            if (a) {
              i.union(i, a);
            }
          }
        }
        return i;
      },
      _updateOrderOfArrival: function () {
        var t = this._parent ? ++this._parent._childArrivalOrder : 0;
        this._localZOrder = 4294901760 & this._localZOrder | t;
        this.emit(H.SIBLING_ORDER_CHANGED);
      },
      setSelfGroupIndex: function (t) {
        this._groupIndex = t || 0;
        this._cullingMask = 1 << t;
      },
      addChild: function (t, e, i) {
        t.parent = this;
        if (undefined !== e) {
          t.zIndex = e;
        }
        if (undefined !== i) {
          t.name = i;
        }
      },
      cleanup: function () {
        if (p) {
          cc.director.getActionManager().removeAllActionsFromTarget(this);
        }
        c.removeListeners(this);
        var t;
        var e;
        var i = this._children.length;
        for (t = 0; t < i; ++t) {
          if (e = this._children[t]) {
            e.cleanup();
          }
        }
      },
      sortAllChildren: function () {
        if (this._reorderChildDirty) {
          this._reorderChildDirty = false;
          var t = this._children;
          this._childArrivalOrder = 1;
          var e = 0;
          for (var i = t.length; e < i; e++) {
            t[e]._updateOrderOfArrival();
          }
          c._setDirtyForNode(this);
          if (t.length > 1) {
            var n;
            var r;
            var s = 1;
            for (var a = t.length; s < a; s++) {
              n = t[s];
              for (var o = s; o > 0 && (r = t[o - 1])._localZOrder > n._localZOrder; o--) {
                t[o] = r;
              }
              t[o] = n;
            }
            this.emit(H.CHILD_REORDER, this);
          }
          cc.director.__fastOff(cc.Director.EVENT_AFTER_UPDATE, this.sortAllChildren, this);
        }
      },
      _delaySort: function () {
        if (!this._reorderChildDirty) {
          this._reorderChildDirty = true;
          cc.director.__fastOn(cc.Director.EVENT_AFTER_UPDATE, this.sortAllChildren, this);
        }
      },
      _restoreProperties: false,
      onRestore: false
    };
    var dt = cc.Class(ft);
    var _t = dt.prototype;
    h.getset(_t, "position", _t.getPosition, _t.setPosition, false, true);
    cc.Node = e.exports = dt;
  }, {
    "./event-manager": 133,
    "./event/event": 135,
    "./event/event-target": 134,
    "./platform/CCMacro": 167,
    "./platform/js": 183,
    "./renderer/render-flow": 194,
    "./utils/affine-transform": 227,
    "./utils/base-node": 228,
    "./utils/prefab-helper": 239,
    "./utils/trans-pool": 245,
    "./value-types": 251,
    "./value-types/utils": 258
  }],
  27: [function (t, e) {
    "use strict";

    var i = t("./CCNode");
    var n = t("./renderer/render-flow");
    cc.Object.Flags.HideInHierarchy;
    var r = i._LocalDirtyFlag;
    var s = cc.Class({
      name: "cc.PrivateNode",
      extends: i,
      properties: {
        x: {
          get: function () {
            return this._originPos.x;
          },
          set: function (t) {
            var e = this._originPos;
            if (t !== e.x) {
              e.x = t;
              this._posDirty(true);
            }
          },
          override: true
        },
        y: {
          get: function () {
            return this._originPos.y;
          },
          set: function (t) {
            var e = this._originPos;
            if (t !== e.y) {
              e.y = t;
              this._posDirty(true);
            }
          },
          override: true
        },
        zIndex: {
          get: function () {
            return cc.macro.MIN_ZINDEX;
          },
          set: function () {},
          override: true
        },
        showInEditor: {
          default: false,
          editorOnly: true,
          override: true
        }
      },
      ctor: function () {
        this._localZOrder = cc.macro.MIN_ZINDEX << 16;
        this._originPos = cc.v2();
      },
      _posDirty: function (t) {
        this.setLocalDirty(r.POSITION);
        this._renderFlag |= n.FLAG_TRANSFORM;
        if (true === t && 1 & this._eventMask) {
          this.emit(i.EventType.POSITION_CHANGED);
        }
      },
      _updateLocalMatrix: function () {
        if (this._localMatDirty) {
          var t = this.parent;
          if (t) {
            this._trs[0] = this._originPos.x - (t._anchorPoint.x - .5) * t._contentSize.width;
            this._trs[1] = this._originPos.y - (t._anchorPoint.y - .5) * t._contentSize.height;
          }
          this._super();
        }
      },
      getPosition: function () {
        return new cc.Vec2(this._originPos);
      },
      setPosition: function (t, e) {
        if (undefined === e) {
          e = (t = t.x).y;
        }
        var i = this._originPos;
        if (!(i.x === t && i.y === e)) {
          i.x = t;
          i.y = e;
          this._posDirty(true);
        }
      },
      setParent: function (t) {
        var e = this._parent;
        this._super(t);
        if (e !== t) {
          if (e) {
            e.off(i.EventType.ANCHOR_CHANGED, this._posDirty, this);
          }
          if (t) {
            t.on(i.EventType.ANCHOR_CHANGED, this._posDirty, this);
          }
        }
      },
      _updateOrderOfArrival: function () {}
    });
    var a = s.prototype;
    cc.js.getset(a, "parent", a.getParent, a.setParent);
    cc.js.getset(a, "position", a.getPosition, a.setPosition);
    cc.PrivateNode = e.exports = s;
  }, {
    "./CCNode": 26,
    "./renderer/render-flow": 194
  }],
  28: [function (t, e) {
    "use strict";

    cc.Scene = cc.Class({
      name: "cc.Scene",
      extends: t("./CCNode"),
      properties: {
        _is3DNode: {
          default: true,
          override: true
        },
        autoReleaseAssets: false
      },
      ctor: function () {
        this._anchorPoint.x = 0;
        this._anchorPoint.y = 0;
        this._activeInHierarchy = false;
        this._inited = !cc.game._isCloning;
        this.dependAssets = null;
      },
      destroy: function () {
        if (cc.Object.prototype.destroy.call(this)) {
          var t = this._children;
          for (var e = 0; e < t.length; ++e) {
            t[e].active = false;
          }
        }
        this._active = false;
        this._activeInHierarchy = false;
      },
      _onHierarchyChanged: function () {},
      _instantiate: null,
      _load: function () {
        if (!this._inited) {
          this._onBatchCreated(false);
          this._inited = true;
        }
      },
      _activate: function (t) {
        t = false !== t;
        cc.director._nodeActivator.activateNode(this, t);
      }
    });
    e.exports = cc.Scene;
  }, {
    "./CCNode": 26
  }],
  29: [function (t, e) {
    "use strict";

    var i = t("./platform/js");
    var n = new (t("./platform/id-generater"))("Scheduler");
    var r = function (t, e, i, n) {
      this.target = t;
      this.priority = e;
      this.paused = i;
      this.markedForDeletion = n;
    };
    var s = [];
    r.get = function (t, e, i, n) {
      var a = s.pop();
      if (a) {
        a.target = t;
        a.priority = e;
        a.paused = i;
        a.markedForDeletion = n;
      } else {
        a = new r(t, e, i, n);
      }
      return a;
    };
    r.put = function (t) {
      if (s.length < 20) {
        t.target = null;
        s.push(t);
      }
    };
    var a = function (t, e, i, n) {
      this.list = t;
      this.entry = e;
      this.target = i;
      this.callback = n;
    };
    var o = [];
    a.get = function (t, e, i, n) {
      var r = o.pop();
      if (r) {
        r.list = t;
        r.entry = e;
        r.target = i;
        r.callback = n;
      } else {
        r = new a(t, e, i, n);
      }
      return r;
    };
    a.put = function (t) {
      if (o.length < 20) {
        t.list = t.entry = t.target = t.callback = null;
        o.push(t);
      }
    };
    var c = function (t, e, i, n) {
      this.timers = t;
      this.target = e;
      this.timerIndex = i;
      this.paused = n;
    };
    var l = [];
    function h() {
      this._lock = false;
      this._scheduler = null;
      this._elapsed = -1;
      this._runForever = false;
      this._useDelay = false;
      this._timesExecuted = 0;
      this._repeat = 0;
      this._delay = 0;
      this._interval = 0;
      this._target = null;
      this._callback = null;
    }
    c.get = function (t, e, i, n) {
      var r = l.pop();
      if (r) {
        r.timers = t;
        r.target = e;
        r.timerIndex = i;
        r.paused = n;
      } else {
        r = new c(t, e, i, n);
      }
      return r;
    };
    c.put = function (t) {
      if (l.length < 20) {
        t.timers = t.target = null;
        l.push(t);
      }
    };
    var u = h.prototype;
    u.initWithCallback = function (t, e, i, n, r, s) {
      this._lock = false;
      this._scheduler = t;
      this._target = i;
      this._callback = e;
      this._elapsed = -1;
      this._interval = n;
      this._delay = s;
      this._useDelay = this._delay > 0;
      this._repeat = r;
      this._runForever = this._repeat === cc.macro.REPEAT_FOREVER;
      return true;
    };
    u.getInterval = function () {
      return this._interval;
    };
    u.setInterval = function (t) {
      this._interval = t;
    };
    u.update = function (t) {
      if (-1 === this._elapsed) {
        this._elapsed = 0;
        this._timesExecuted = 0;
      } else {
        this._elapsed += t;
        if (this._runForever && !this._useDelay) {
          if (this._elapsed >= this._interval) {
            this.trigger();
            this._elapsed = 0;
          }
        } else {
          if (this._useDelay) {
            if (this._elapsed >= this._delay) {
              this.trigger();
              this._elapsed -= this._delay;
              this._timesExecuted += 1;
              this._useDelay = false;
            }
          } else if (this._elapsed >= this._interval) {
            this.trigger();
            this._elapsed = 0;
            this._timesExecuted += 1;
          }
          if (this._callback && !this._runForever && this._timesExecuted > this._repeat) {
            this.cancel();
          }
        }
      }
    };
    u.getCallback = function () {
      return this._callback;
    };
    u.trigger = function () {
      if (this._target && this._callback) {
        this._lock = true;
        this._callback.call(this._target, this._elapsed);
        this._lock = false;
      }
    };
    u.cancel = function () {
      this._scheduler.unschedule(this._callback, this._target);
    };
    var f = [];
    function d() {}
    function _(t) {
      var e = t._id;
      if (!e) {
        if (t.__instanceId) {
          e = t._id = t.__instanceId;
        }
      }
      return e;
    }
    h.get = function () {
      return f.pop() || new h();
    };
    h.put = function (t) {
      if (f.length < 20 && !t._lock) {
        t._scheduler = t._target = t._callback = null;
        f.push(t);
      }
    };
    cc.Scheduler = function () {
      this._timeScale = 1;
      this._updatesNegList = [];
      this._updates0List = [];
      this._updatesPosList = [];
      this._hashForUpdates = i.createMap(true);
      this._hashForTimers = i.createMap(true);
      this._currentTarget = null;
      this._currentTargetSalvaged = false;
      this._updateHashLocked = false;
      this._arrayForTimers = [];
    };
    cc.Scheduler.prototype = {
      constructor: cc.Scheduler,
      _removeHashElement: function (t) {
        delete this._hashForTimers[t.target._id];
        var e = this._arrayForTimers;
        var i = 0;
        for (var n = e.length; i < n; i++) {
          if (e[i] === t) {
            e.splice(i, 1);
            break;
          }
        }
        c.put(t);
      },
      _removeUpdateFromHash: function (t) {
        var e = t.target._id;
        var i = this._hashForUpdates[e];
        if (i) {
          var n = i.list;
          var s = i.entry;
          var o = 0;
          for (var c = n.length; o < c; o++) {
            if (n[o] === s) {
              n.splice(o, 1);
              break;
            }
          }
          delete this._hashForUpdates[e];
          r.put(s);
          a.put(i);
        }
      },
      _priorityIn: function (t, e, i) {
        var n = 0;
        for (var r = t.length; n < r; n++) {
          if (i < t[n].priority) {
            return void t.splice(n, 0, e);
          }
        }
        t.push(e);
      },
      _appendIn: function (t, e) {
        t.push(e);
      },
      enableForTarget: function (t) {
        if (!(t._id || t.__instanceId)) {
          t._id = n.getNewId();
        }
      },
      setTimeScale: function (t) {
        this._timeScale = t;
      },
      getTimeScale: function () {
        return this._timeScale;
      },
      update: function (t) {
        var e;
        var i;
        var n;
        var r;
        this._updateHashLocked = true;
        if (1 !== this._timeScale) {
          t *= this._timeScale;
        }
        for (i = this._updatesNegList; null != i;) {
          e = 0;
          for (n = i.length; e < n; e++) {
            if (!((r = i[e]).paused || r.markedForDeletion)) {
              r.target.update(t);
            }
          }
          i = i === this._updatesNegList ? this._updates0List : i === this._updates0List ? this._updatesPosList : null;
        }
        var s;
        var a = this._arrayForTimers;
        for (e = 0; e < a.length; e++) {
          s = a[e];
          this._currentTarget = s;
          this._currentTargetSalvaged = false;
          if (!s.paused) {
            for (s.timerIndex = 0; s.timerIndex < s.timers.length; ++s.timerIndex) {
              s.timers[s.timerIndex].update(t);
            }
          }
          if (this._currentTargetSalvaged && 0 === this._currentTarget.timers.length) {
            this._removeHashElement(this._currentTarget);
            --e;
          }
        }
        for (i = this._updatesNegList; null != i;) {
          for (e = 0; e < i.length;) {
            if ((r = i[e]).markedForDeletion) {
              this._removeUpdateFromHash(r);
            } else {
              e++;
            }
          }
          i = i === this._updatesNegList ? this._updates0List : i === this._updates0List ? this._updatesPosList : null;
        }
        this._updateHashLocked = false;
        this._currentTarget = null;
      },
      schedule: function (t, e, i, n, r, s) {
        if ("function" != typeof t) {
          var a = t;
          t = e;
          e = a;
        }
        if (!(4 !== arguments.length && 5 !== arguments.length)) {
          s = !!n;
          n = cc.macro.REPEAT_FOREVER;
          r = 0;
        }
        var o;
        var l;
        var u = _(e);
        var f = this._hashForTimers[u];
        if (f) {
          f.paused;
        } else {
          f = c.get(null, e, 0, s);
          this._arrayForTimers.push(f);
          this._hashForTimers[u] = f;
        }
        if (null == f.timers) {
          f.timers = [];
        } else {
          for (l = 0; l < f.timers.length; ++l) {
            if ((o = f.timers[l]) && t === o._callback) {
              return void (o._interval = i);
            }
          }
        }
        (o = h.get()).initWithCallback(this, t, e, i, n, r);
        f.timers.push(o);
        if (this._currentTarget === f && this._currentTargetSalvaged) {
          this._currentTargetSalvaged = false;
        }
      },
      scheduleUpdate: function (t, e, i) {
        var n = _(t);
        var s = this._hashForUpdates[n];
        if (s && s.entry) {
          if (s.entry.priority === e) {
            s.entry.markedForDeletion = false;
            return void (s.entry.paused = i);
          }
          if (this._updateHashLocked) {
            s.entry.markedForDeletion = false;
            return void (s.entry.paused = i);
          }
          this.unscheduleUpdate(t);
        }
        var o;
        var c = r.get(t, e, i, false);
        if (0 === e) {
          o = this._updates0List;
          this._appendIn(o, c);
        } else {
          o = e < 0 ? this._updatesNegList : this._updatesPosList;
          this._priorityIn(o, c, e);
        }
        this._hashForUpdates[n] = a.get(o, c, t, null);
      },
      unschedule: function (t, e) {
        if (1 === arguments.length && "function" != typeof t) {
          e = t;
          t = d;
        }
        if (e && t) {
          var i = _(e);
          var n = this;
          var r = n._hashForTimers[i];
          if (r) {
            var s = r.timers;
            var a = 0;
            for (var o = s.length; a < o; a++) {
              var c = s[a];
              if ((t === d || t === c._callback) && (h.put(c), t !== d)) {
                s.splice(a, 1);
                if (r.timerIndex >= a) {
                  r.timerIndex--;
                }
                break;
              }
            }
            if (t === d) {
              s.length = 0;
            }
            if (0 === s.length) {
              if (n._currentTarget === r) {
                n._currentTargetSalvaged = true;
              } else {
                n._removeHashElement(r);
              }
            }
          }
        }
      },
      unscheduleUpdate: function (t) {
        if (t) {
          var e = _(t);
          var i = this._hashForUpdates[e];
          if (i) {
            if (this._updateHashLocked) {
              i.entry.markedForDeletion = true;
            } else {
              this._removeUpdateFromHash(i.entry);
            }
          }
        }
      },
      unscheduleAllForTarget: function (t) {
        if (t) {
          this.unschedule(t);
          this.unscheduleUpdate(t);
        }
      },
      unscheduleAll: function () {
        var t;
        var e;
        var i = this._arrayForTimers;
        for (t = i.length - 1; t >= 0; t--) {
          e = i[t];
          this.unschedule(e.target);
        }
        this.unscheduleAllWithMinPriority(cc.Scheduler.PRIORITY_SYSTEM);
      },
      unscheduleAllWithMinPriority: function (t) {
        var e;
        var i;
        var n;
        var r = 0;
        for (i = t < 0 ? this._updatesNegList : 0 === t ? this._updates0List : this._updatesPosList; null != i;) {
          for (n = 0; n < i.length;) {
            r = i.length;
            if ((e = i[n]) && e.priority >= t) {
              this.unscheduleUpdate(e.target);
            }
            if (r === i.length) {
              n++;
            }
          }
          i = i === this._updatesNegList ? this._updates0List : i === this._updates0List ? this._updatesPosList : null;
        }
      },
      isScheduled: function (t, e) {
        var i = _(e);
        var n = this._hashForTimers[i];
        if (!n) {
          return false;
        }
        if (null == n.timers) {
          return false;
        }
        var r = n.timers;
        for (var s = 0; s < r.length; ++s) {
          if (t === r[s]._callback) {
            return true;
          }
        }
        return false;
      },
      pauseAllTargets: function () {
        this._setPausedForAllTimers(true);
        this._setPausedForAllTargetsWithMinPriority(cc.Scheduler.PRIORITY_SYSTEM, true);
      },
      pauseAllTargetsWithMinPriority: function (t) {
        this._setPausedForAllTargetsWithMinPriority(t, true);
      },
      resumeAllTargets: function () {
        this._setPausedForAllTimers(false);
        this._setPausedForAllTargetsWithMinPriority(cc.Scheduler.PRIORITY_SYSTEM, false);
      },
      resumeAllTargetsWithMinPriority: function (t) {
        this._setPausedForAllTargetsWithMinPriority(t, false);
      },
      _setPausedForAllTimers: function (t) {
        var e;
        var i;
        var n;
        var r = this._arrayForTimers;
        i = 0;
        for (n = r.length; i < n; i++) {
          if (e = r[i]) {
            e.paused = t;
          }
        }
      },
      _setPausedForAllTargetsWithMinPriority: function (t, e) {
        var i;
        var n;
        var r;
        for (r = t < 0 ? this._updatesNegList : 0 === t ? this._updates0List : this._updatesPosList; null != r;) {
          for (n = 0; n < r.length; n++) {
            if ((i = r[n]) && i.priority >= t) {
              i.paused = e;
            }
          }
          r = r === this._updatesNegList ? this._updates0List : r === this._updates0List ? this._updatesPosList : null;
        }
      },
      pauseTarget: function (t) {
        var e = _(t);
        var i = this._hashForTimers[e];
        if (i) {
          i.paused = true;
        }
        var n = this._hashForUpdates[e];
        if (n) {
          n.entry.paused = true;
        }
      },
      resumeTarget: function (t) {
        var e = _(t);
        var i = this._hashForTimers[e];
        if (i) {
          i.paused = false;
        }
        var n = this._hashForUpdates[e];
        if (n) {
          n.entry.paused = false;
        }
      },
      isTargetPaused: function (t) {
        var e = _(t);
        var i = this._hashForTimers[e];
        if (i) {
          return i.paused;
        }
        var n = this._hashForUpdates[e];
        return !!n && n.entry.paused;
      }
    };
    cc.Scheduler.PRIORITY_SYSTEM = -2147483648;
    cc.Scheduler.PRIORITY_NON_SYSTEM = cc.Scheduler.PRIORITY_SYSTEM + 1;
    e.exports = cc.Scheduler;
  }, {
    "./platform/id-generater": 179,
    "./platform/js": 183
  }],
  30: [function (t, e) {
    "use strict";

    var i = t("./preprocess");
    var n = t("./fetch");
    var r = t("./cache");
    var s = t("./helper");
    var a = t("./releaseManager");
    var o = t("./depend-util");
    var c = t("./load");
    var l = t("./pipeline");
    var h = t("./task");
    var u = t("./request-item");
    var f = t("./downloader");
    var d = t("./parser");
    var _ = t("./pack-manager");
    var p = t("./bundle");
    var v = t("./builtins");
    var g = t("./factory");
    var m = t("./urlTransformer");
    var y = m.parse;
    var T = m.combine;
    var E = t("./utilities");
    var A = E.parseParameters;
    var x = E.asyncify;
    var C = E.parseLoadResArgs;
    var b = t("./shared");
    var S = b.assets;
    var R = b.files;
    var M = b.parsed;
    var w = b.pipeline;
    var I = b.transformPipeline;
    var O = b.fetchPipeline;
    var L = b.RequestType;
    var P = b.bundles;
    var D = b.BuiltinBundleName;
    function N() {
      this._preprocessPipe = i;
      this._fetchPipe = n;
      this._loadPipe = c;
      this.pipeline = w.append(i).append(c);
      this.fetchPipeline = O.append(i).append(n);
      this.transformPipeline = I.append(y).append(T);
      this.bundles = P;
      this.assets = S;
      this._files = R;
      this._parsed = M;
      this.generalImportBase = "";
      this.generalNativeBase = "";
      this.dependUtil = o;
      this._releaseManager = a;
      this.cacheAsset = true;
      this.force = false;
      this.utils = s;
      this.downloader = f;
      this.parser = d;
      this.builtins = v;
      this.packManager = _;
      this.factory = g;
      this.cacheManager = null;
      this.presets = {
        default: {
          priority: 0
        },
        preload: {
          maxConcurrency: 2,
          maxRequestsPerFrame: 2,
          priority: -1
        },
        scene: {
          maxConcurrency: 8,
          maxRequestsPerFrame: 8,
          priority: 1
        },
        bundle: {
          maxConcurrency: 8,
          maxRequestsPerFrame: 8,
          priority: 2
        },
        script: {
          maxConcurrency: 1024,
          maxRequestsPerFrame: 1024,
          priority: 2
        }
      };
      this._parseLoadResArgs = C;
      this._onProgress = null;
    }
    N.Pipeline = l;
    N.Task = h;
    N.Cache = r;
    N.RequestItem = u;
    N.Bundle = p;
    N.BuiltinBundleName = D;
    N.prototype = {
      constructor: N,
      get main() {
        return P.get(D.MAIN);
      },
      get resources() {
        return P.get(D.RESOURCES);
      },
      get internal() {
        return P.get(D.INTERNAL);
      },
      init: function (t) {
        t = t || Object.create(null);
        this._files.clear();
        this._parsed.clear();
        this._releaseManager.init();
        this.assets.clear();
        this.bundles.clear();
        this.packManager.init();
        this.downloader.init(t.bundleVers, t.server);
        this.parser.init();
        this.dependUtil.init();
        this.generalImportBase = t.importBase;
        this.generalNativeBase = t.nativeBase;
      },
      getBundle: function (t) {
        return P.get(t);
      },
      removeBundle: function (t) {
        t._destroy();
        P.remove(t.name);
      },
      loadAny: function (t, e, i, n) {
        var r = A(e, i, n);
        e = r.options;
        i = r.onProgress;
        n = r.onComplete;
        e.preset = e.preset || "default";
        i = i || this._onProgress;
        t = Array.isArray(t) ? t.concat() : t;
        var s = new h({
          input: t,
          onProgress: i,
          onComplete: x(n),
          options: e
        });
        w.async(s);
      },
      preloadAny: function (t, e, i, n) {
        var r = A(e, i, n);
        e = r.options;
        i = r.onProgress;
        n = r.onComplete;
        e.preset = e.preset || "preload";
        i = i || this._onProgress;
        t = Array.isArray(t) ? t.concat() : t;
        var s = new h({
          input: t,
          onProgress: i,
          onComplete: x(n),
          options: e
        });
        O.async(s);
      },
      postLoadNative: function (t, e, i) {
        if (!(t instanceof cc.Asset)) {
          throw Error("input is not asset");
        }
        var n = A(e, undefined, i);
        e = n.options;
        i = n.onComplete;
        if (!t._native || t._nativeAsset) {
          return x(i)(null);
        }
        var r = o.getNativeDep(t._uuid);
        if (r) {
          if (!P.has(r.bundle)) {
            var s = P.find(function (e) {
              return e.getAssetInfo(t._uuid);
            });
            if (s) {
              r.bundle = s.name;
            }
          }
          this.loadAny(r, e, function (e, n) {
            if (!e) {
              if (t.isValid && !t._nativeAsset) {
                t._nativeAsset = n;
              }
            }
            if (i) {
              i(e);
            }
          });
        }
      },
      loadRemote: function (t, e, i) {
        var n = A(e, undefined, i);
        e = n.options;
        i = n.onComplete;
        if (this.assets.has(t)) {
          return x(i)(null, this.assets.get(t));
        }
        e.__isNative__ = true;
        e.preset = e.preset || "remote";
        this.loadAny({
          url: t
        }, e, null, function (n, r) {
          if (n) {
            if (i) {
              i(n, null);
            }
          } else {
            g.create(t, r, e.ext || cc.path.extname(t), e, function (t, e) {
              if (i) {
                i(t, e);
              }
            });
          }
        });
      },
      loadScript: function (t, e, i) {
        var n = A(e, undefined, i);
        e = n.options;
        i = n.onComplete;
        e.__requestType__ = L.URL;
        e.preset = e.preset || "script";
        this.loadAny(t, e, i);
      },
      loadBundle: function (t, e, i) {
        var n = A(e, undefined, i);
        e = n.options;
        i = n.onComplete;
        var r = cc.path.basename(t);
        if (this.bundles.has(r)) {
          return x(i)(null, this.getBundle(r));
        }
        e.preset = e.preset || "bundle";
        e.ext = "bundle";
        this.loadRemote(t, e, i);
      },
      releaseAsset: function (t) {
        a.tryRelease(t, true);
      },
      releaseUnusedAssets: function () {
        S.forEach(function (t) {
          a.tryRelease(t);
        });
      },
      releaseAll: function () {
        S.forEach(function (t) {
          a.tryRelease(t, true);
        });
      },
      _transform: function (t, e) {
        var i = h.create({
          input: t,
          options: e
        });
        var n = [];
        try {
          var r = I.sync(i);
          var s = 0;
          for (var a = r.length; s < a; s++) {
            var o = r[s];
            var c = o.url;
            o.recycle();
            n.push(c);
          }
        } catch (l) {
          s = 0;
          for (a = i.output.length; s < a; s++) {
            i.output[s].recycle();
          }
        }
        i.recycle();
        return n.length > 1 ? n : n[0];
      }
    };
    cc.AssetManager = N;
    cc.assetManager = new N();
    Object.defineProperty(cc, "resources", {
      get: function () {
        return P.get(D.RESOURCES);
      }
    });
    e.exports = cc.assetManager;
  }, {
    "./builtins": 31,
    "./bundle": 32,
    "./cache": 33,
    "./depend-util": 35,
    "./downloader": 40,
    "./factory": 41,
    "./fetch": 42,
    "./helper": 44,
    "./load": 46,
    "./pack-manager": 47,
    "./parser": 48,
    "./pipeline": 49,
    "./preprocess": 50,
    "./releaseManager": 51,
    "./request-item": 52,
    "./shared": 53,
    "./task": 54,
    "./urlTransformer": 55,
    "./utilities": 56
  }],
  31: [function (t, e) {
    "use strict";

    var i = t("./cache");
    var n = t("./releaseManager");
    var r = t("./shared").BuiltinBundleName;
    var s = {
      _assets: new i({
        material: new i(),
        effect: new i()
      }),
      _loadBuiltins: function (t, e) {
        var i = t + "s";
        var n = this._assets.get(t);
        return cc.assetManager.internal.loadDir(i, null, null, function (t, i) {
          if (t) {
            e(t);
          } else {
            for (var r = 0; r < i.length; r++) {
              var s = i[r];
              n.add(s.name, s.addRef());
            }
            e();
          }
        });
      },
      init: function (t) {
        var e = this;
        this.clear();
        if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS || !cc.assetManager.bundles.has(r.INTERNAL)) {
          return t && t();
        }
        this._loadBuiltins("effect", function (i) {
          if (i) {
            if (t) {
              t(i);
            }
          } else {
            e._loadBuiltins("material", t);
          }
        });
      },
      getBuiltin: function (t, e) {
        return 0 === arguments.length ? this._assets : 1 === arguments.length ? this._assets.get(t) : this._assets.get(t).get(e);
      },
      clear: function () {
        this._assets.forEach(function (t) {
          t.forEach(function (t) {
            n.tryRelease(t, true);
          });
          t.clear();
        });
      }
    };
    e.exports = s;
  }, {
    "./cache": 33,
    "./releaseManager": 51,
    "./shared": 53
  }],
  32: [function (t, e) {
    "use strict";

    var i = t("./config");
    var n = t("./releaseManager");
    var r = t("./utilities");
    var s = r.parseParameters;
    var a = r.parseLoadResArgs;
    var o = t("./shared");
    var c = o.RequestType;
    var l = o.assets;
    var h = o.bundles;
    function u() {
      this._config = new i();
    }
    u.prototype = {
      constructor: u,
      get name() {
        return this._config.name;
      },
      get deps() {
        return this._config.deps;
      },
      get base() {
        return this._config.base;
      },
      getInfoWithPath: function (t, e) {
        return this._config.getInfoWithPath(t, e);
      },
      getDirWithPath: function (t, e, i) {
        return this._config.getDirWithPath(t, e, i);
      },
      getAssetInfo: function (t) {
        return this._config.getAssetInfo(t);
      },
      getSceneInfo: function (t) {
        return this._config.getSceneInfo(t);
      },
      init: function (t) {
        this._config.init(t);
        h.add(t.name, this);
      },
      load: function (t, e, i, n) {
        var r = a(e, i, n);
        e = r.type;
        i = r.onProgress;
        n = r.onComplete;
        cc.assetManager.loadAny(t, {
          __requestType__: c.PATH,
          type: e,
          bundle: this.name,
          __outputAsArray__: Array.isArray(t)
        }, i, n);
      },
      preload: function (t, e, i, n) {
        var r = a(e, i, n);
        e = r.type;
        i = r.onProgress;
        n = r.onComplete;
        cc.assetManager.preloadAny(t, {
          __requestType__: c.PATH,
          type: e,
          bundle: this.name
        }, i, n);
      },
      loadDir: function (t, e, i, n) {
        var r = a(e, i, n);
        e = r.type;
        i = r.onProgress;
        n = r.onComplete;
        cc.assetManager.loadAny(t, {
          __requestType__: c.DIR,
          type: e,
          bundle: this.name,
          __outputAsArray__: true
        }, i, n);
      },
      preloadDir: function (t, e, i, n) {
        var r = a(e, i, n);
        e = r.type;
        i = r.onProgress;
        n = r.onComplete;
        cc.assetManager.preloadAny(t, {
          __requestType__: c.DIR,
          type: e,
          bundle: this.name
        }, i, n);
      },
      loadScene: function (t, e, i, n) {
        var r = s(e, i, n);
        e = r.options;
        i = r.onProgress;
        n = r.onComplete;
        e.preset = e.preset || "scene";
        e.bundle = this.name;
        cc.assetManager.loadAny({
          scene: t
        }, e, i, function (t, e) {
          if (t) {
            if (n) {
              n(t);
            }
          } else if (e instanceof cc.SceneAsset) {
            var i = e.scene;
            i._id = e._uuid;
            i._name = e._name;
            if (n) {
              n(null, e);
            }
          } else if (n) {
            n(Error("The asset " + e._uuid + " is not a scene"));
          }
        });
      },
      preloadScene: function (t, e, i, n) {
        var r = s(e, i, n);
        e = r.options;
        i = r.onProgress;
        n = r.onComplete;
        e.bundle = this.name;
        cc.assetManager.preloadAny({
          scene: t
        }, e, i, function (t) {
          if (n) {
            n(t);
          }
        });
      },
      get: function (t, e) {
        var i = this.getInfoWithPath(t, e);
        return l.get(i && i.uuid);
      },
      release: function (t, e) {
        n.tryRelease(this.get(t, e), true);
      },
      releaseUnusedAssets: function () {
        var t = this;
        l.forEach(function (e) {
          var i = t.getAssetInfo(e._uuid);
          if (i && !i.redirect) {
            n.tryRelease(e);
          }
        });
      },
      releaseAll: function () {
        var t = this;
        l.forEach(function (e) {
          var i = t.getAssetInfo(e._uuid);
          if (i && !i.redirect) {
            n.tryRelease(e, true);
          }
        });
      },
      _destroy: function () {
        this._config.destroy();
      }
    };
    e.exports = u;
  }, {
    "./config": 34,
    "./releaseManager": 51,
    "./shared": 53,
    "./utilities": 56
  }],
  33: [function (t, e) {
    "use strict";

    var i = t("../platform/js");
    function n(t) {
      if (t) {
        this._map = t;
        this._count = Object.keys(t).length;
      } else {
        this._map = i.createMap(true);
        this._count = 0;
      }
    }
    n.prototype = {
      constructor: n,
      add: function (t, e) {
        if (!(t in this._map)) {
          this._count++;
        }
        return this._map[t] = e;
      },
      get: function (t) {
        return this._map[t];
      },
      has: function (t) {
        return t in this._map;
      },
      remove: function (t) {
        var e = this._map[t];
        if (t in this._map) {
          delete this._map[t];
          this._count--;
        }
        return e;
      },
      clear: function () {
        if (0 !== this._count) {
          this._map = i.createMap(true);
          this._count = 0;
        }
      },
      forEach: function (t) {
        for (var e in this._map) t(this._map[e], e);
      },
      find: function (t) {
        for (var e in this._map) if (t(this._map[e], e)) {
          return this._map[e];
        }
        return null;
      },
      get count() {
        return this._count;
      },
      destroy: function () {
        this._map = null;
      }
    };
    e.exports = n;
  }, {
    "../platform/js": 183
  }],
  34: [function (t, e) {
    "use strict";

    var i = t("../platform/js");
    var n = t("./cache");
    var r = t("./helper").normalize;
    var s = t("./utilities").processOptions;
    function a() {
      this.name = "";
      this.base = "";
      this.importBase = "";
      this.nativeBase = "";
      this.deps = null;
      this.assetInfos = new n();
      this.scenes = new n();
      this.paths = new n();
    }
    a.prototype = {
      constructor: a,
      init: function (t) {
        s(t);
        this.importBase = t.importBase || "";
        this.nativeBase = t.nativeBase || "";
        this.base = t.base || "";
        this.name = t.name || "";
        this.deps = t.deps || [];
        this._initUuid(t.uuids);
        this._initPath(t.paths);
        this._initScene(t.scenes);
        this._initPackage(t.packs);
        this._initVersion(t.versions);
        this._initRedirect(t.redirect);
      },
      _initUuid: function (t) {
        if (t) {
          this.assetInfos.clear();
          var e = 0;
          for (var i = t.length; e < i; e++) {
            var n = t[e];
            this.assetInfos.add(n, {
              uuid: n
            });
          }
        }
      },
      _initPath: function (t) {
        if (t) {
          var e = this.paths;
          e.clear();
          for (var n in t) {
            var r = t[n];
            var s = r[0];
            var a = r[1];
            var o = 3 === r.length;
            var c = this.assetInfos.get(n);
            c.path = s;
            c.ctor = i._getClassById(a);
            if (e.has(s)) {
              if (o) {
                e.get(s).push(c);
              } else {
                e.get(s).unshift(c);
              }
            } else {
              e.add(s, [c]);
            }
          }
        }
      },
      _initScene: function (t) {
        if (t) {
          var e = this.scenes;
          e.clear();
          var i = this.assetInfos;
          for (var n in t) {
            var r = t[n];
            var s = i.get(r);
            s.url = n;
            e.add(n, s);
          }
        }
      },
      _initPackage: function (t) {
        if (t) {
          var e = this.assetInfos;
          for (var i in t) {
            var n = t[i];
            var r = {
              uuid: i,
              packs: n,
              ext: ".json"
            };
            e.add(i, r);
            var s = 0;
            for (var a = n.length; s < a; s++) {
              var o = n[s];
              var c = e.get(o);
              var l = c.packs;
              if (l) {
                if (1 === a) {
                  l.unshift(r);
                } else {
                  l.push(r);
                }
              } else {
                c.packs = [r];
              }
            }
          }
        }
      },
      _initVersion: function (t) {
        if (t) {
          var e = this.assetInfos;
          var i = t.import;
          if (i) {
            var n = 0;
            for (var r = i.length; n < r; n += 2) {
              var s = i[n];
              e.get(s).ver = i[n + 1];
            }
          }
          if (i = t.native) {
            n = 0;
            for (r = i.length; n < r; n += 2) {
              s = i[n];
              e.get(s).nativeVer = i[n + 1];
            }
          }
        }
      },
      _initRedirect: function (t) {
        if (t) {
          var e = this.assetInfos;
          var i = 0;
          for (var n = t.length; i < n; i += 2) {
            var r = t[i];
            e.get(r).redirect = t[i + 1];
          }
        }
      },
      getInfoWithPath: function (t, e) {
        if (!t) {
          return null;
        }
        t = r(t);
        var n = this.paths.get(t);
        if (n) {
          if (!e) {
            return n[0];
          }
          var s = 0;
          for (var a = n.length; s < a; s++) {
            var o = n[s];
            if (i.isChildClassOf(o.ctor, e)) {
              return o;
            }
          }
        }
        return null;
      },
      getDirWithPath: function (t, e, n) {
        if ("/" === (t = r(t))[t.length - 1]) {
          t = t.slice(0, -1);
        }
        var s = n || [];
        this.paths.forEach(function (n, r) {
          if (r.startsWith(t) && (!(r.length > t.length) || 47 === r.charCodeAt(t.length)) || !t) {
            var o = 0;
            for (var c = n.length; o < c; o++) {
              var l = n[o];
              if (!(e && !i.isChildClassOf(l.ctor, e))) {
                s.push(l);
              }
            }
          }
        });
        return s;
      },
      getAssetInfo: function (t) {
        return this.assetInfos.get(t);
      },
      getSceneInfo: function (t) {
        if (!t.endsWith(".fire")) {
          t += ".fire";
        }
        if (!("/" === t[0] || t.startsWith("db://"))) {
          t = "/" + t;
        }
        return this.scenes.find(function (e, i) {
          return i.endsWith(t);
        });
      },
      destroy: function () {
        this.paths.destroy();
        this.scenes.destroy();
        this.assetInfos.destroy();
      }
    };
    e.exports = a;
  }, {
    "../platform/js": 183,
    "./cache": 33,
    "./helper": 44,
    "./utilities": 56
  }],
  35: [function (t, e) {
    "use strict";

    var i = function (t) {
      if (t && t.__esModule) {
        return t;
      }
      if (null === t || "object" != typeof t && "function" != typeof t) {
        return {
          default: t
        };
      }
      var e = n(undefined);
      if (e && e.has(t)) {
        return e.get(t);
      }
      var i = {};
      var r = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var s in t) if ("default" !== s && Object.prototype.hasOwnProperty.call(t, s)) {
        var a = r ? Object.getOwnPropertyDescriptor(t, s) : null;
        if (a && (a.get || a.set)) {
          Object.defineProperty(i, s, a);
        } else {
          i[s] = t[s];
        }
      }
      i.default = t;
      if (e) {
        e.set(t, i);
      }
      return i;
    }(t("../platform/deserialize-compiled"));
    function n(t) {
      if ("function" != typeof WeakMap) {
        return null;
      }
      var e = new WeakMap();
      var i = new WeakMap();
      return (n = function (t) {
        return t ? i : e;
      })(t);
    }
    var r = t("./cache");
    var s = t("./deserialize");
    var a = t("./shared");
    var o = a.files;
    var c = a.parsed;
    var l = {
      _depends: new r(),
      init: function () {
        this._depends.clear();
      },
      getNativeDep: function (t) {
        var e = this._depends.get(t);
        return e ? e.nativeDep && Object.assign({}, e.nativeDep) : null;
      },
      getDeps: function (t) {
        return this._depends.has(t) ? this._depends.get(t).deps : [];
      },
      getDepsRecursively: function (t) {
        var e = Object.create(null);
        var i = [];
        this._descend(t, e, i);
        return i;
      },
      _descend: function (t, e, i) {
        var n = this.getDeps(t);
        for (var r = 0; r < n.length; r++) {
          var s = n[r];
          if (!e[s]) {
            e[s] = true;
            i.push(s);
            this._descend(s, e, i);
          }
        }
      },
      remove: function (t) {
        this._depends.remove(t);
      },
      parse: function (t, e) {
        var n = null;
        if (Array.isArray(e) || e.__type__) {
          if (n = this._depends.get(t)) {
            return n;
          }
          if (Array.isArray(e) && !(0, i.hasNativeDep)(e)) {
            n = {
              deps: this._parseDepsFromJson(e)
            };
          } else {
            try {
              var r = s(e);
              if ((n = this._parseDepsFromAsset(r)).nativeDep) {
                n.nativeDep.uuid = t;
              }
              c.add(t + "@import", r);
            } catch (a) {
              o.remove(t + "@import");
              n = {
                deps: []
              };
            }
          }
        } else {
          if ((n = this._depends.get(t)) && n.parsedFromExistAsset) {
            return n;
          }
          n = this._parseDepsFromAsset(e);
        }
        this._depends.add(t, n);
        return n;
      },
      _parseDepsFromAsset: function (t) {
        var e = {
          deps: [],
          parsedFromExistAsset: true,
          preventPreloadNativeObject: t.constructor.preventPreloadNativeObject,
          preventDeferredLoadDependents: t.constructor.preventDeferredLoadDependents
        };
        var i = t.__depends__;
        var n = 0;
        for (var r = i.length; n < r; n++) {
          var s = i[n].uuid;
          e.deps.push(s);
        }
        if (t.__nativeDepend__) {
          e.nativeDep = t._nativeDep;
        }
        return e;
      },
      _parseDepsFromJson: function (t) {
        0;
        var e = i.getDependUuidList(t);
        e.forEach(function (t, i) {
          return e[i] = cc.assetManager.utils.decodeUuid(t);
        });
        return e;
      }
    };
    e.exports = l;
  }, {
    "../platform/deserialize-compiled": 177,
    "./cache": 33,
    "./deserialize": 36,
    "./shared": 53
  }],
  36: [function (t, e) {
    "use strict";

    var i = t("./helper");
    t("../platform/deserialize");
    e.exports = function (t, e) {
      var n;
      n = cc._MissingScript.safeFindClass;
      var r;
      var s = null;
      var a = (s = cc.deserialize.Details.pool).get();
      try {
        r = cc.deserialize(t, a, {
          classFinder: n,
          customEnv: e
        });
      } catch (d) {
        s.put(a);
        throw d;
      }
      var o = a.uuidList;
      var c = a.uuidObjList;
      var l = a.uuidPropList;
      var h = [];
      for (var u = 0; u < o.length; u++) {
        var f = o[u];
        h[u] = {
          uuid: i.decodeUuid(f),
          owner: c[u],
          prop: l[u]
        };
      }
      r.__depends__ = h;
      if (r._native) {
        r.__nativeDepend__ = true;
      }
      s.put(a);
      return r;
    };
  }, {
    "../platform/deserialize": 178,
    "../platform/deserialize-compiled": 177,
    "../platform/deserialize-editor": undefined,
    "./helper": 44
  }],
  37: [function (t, e) {
    "use strict";

    var i = t("./utilities").parseParameters;
    var n = t("./download-file").downloadFile;
    e.exports = function (t, e, r) {
      var s = i(e, undefined, r);
      var a = s.options;
      var o = s.onComplete;
      a.responseType = "blobURL";
      n(t, a, function (e, i) {
        if (e) {
          if (o) {
            o(e);
          }
        } else {
          var n = new Image();
          n.addEventListener("load", r);
          n.addEventListener("error", s);
          n.src = i;
        }
        function r() {
          n.removeEventListener("load", r);
          n.removeEventListener("error", s);
          URL.revokeObjectURL(i);
          if (o) {
            o(null, n);
          }
        }
        function s() {
          n.removeEventListener("load", r);
          n.removeEventListener("error", s);
          URL.revokeObjectURL(i);
          if (o) {
            o(Error(cc.debug.getError(4930, t)));
          }
        }
      });
    };
  }, {
    "./download-file": 38,
    "./utilities": 56
  }],
  38: [function (t, e) {
    "use strict";

    var i = t("./utilities").parseParameters;
    var n = "undefined" == typeof window ? global : window;
    var r = n.shell || Object.create(null);
    var s = r.fetch || n.fetch;
    var a = r.fetchBlobURL || function (t, e) {
      return s(t, e).then(function (t) {
        if (!t.ok) {
          throw t.status;
        }
        return t.blob().then(function (t) {
          return URL.createObjectURL(t);
        });
      });
    };
    var o = r.unregisterBlobURL || function () {
      return null;
    };
    var c = function (t) {
      return r.authenticate ? r.authenticate(t) : t;
    };
    cc.setAuthenticateUrl = function (t) {
      c = t;
    };
    var l = function () {
      function t() {
        this._aborted = false;
      }
      var e = t.prototype;
      e.abort = function () {
        this._aborted = true;
      };
      e.isAborted = function () {
        return this._aborted;
      };
      return t;
    }();
    function h(t, e) {
      var i = +t.headers.get("Content-Length");
      if (!Number.isInteger(i)) {
        return t;
      }
      var n = t.body.getReader();
      var r = 0;
      var s = [];
      return n.read().then(function a(o) {
        return o.done ? new Response(new Blob(s, {
          type: t.headers.get("Content-Type")
        }), {
          status: t.status
        }) : (r += o.value.length, s.push(o.value), e(r, i), n.read().then(a));
      });
    }
    function u(t) {
      var e = Object.create(null);
      if (true === t.withCredentials) {
        e.credentials = "include";
      } else if (false === t.withCredentials) {
        e.credentials = "omit";
      }
      if (t.header) {
        e.headers = t.header;
      }
      return e;
    }
    function f(t, e, i) {
      var n = u(e);
      var r = new l();
      a(t, n).then(function (e) {
        if (r.isAborted()) {
          throw [4928, t + "(abort)"];
        }
        var n = i;
        i = null;
        n(null, e);
      }).catch(function (e) {
        if (i) {
          if (!Array.isArray(e)) {
            e = [4928, t + "(error)"];
          }
          if (r.isAborted()) {
            e[1] = "(abort)";
          }
          i(Error(cc.debug.getError(e[0], e[1])));
        }
      });
      return r;
    }
    function d(t, e, i, n) {
      var r = undefined !== e.responseType ? e.responseType : "text";
      var a = u(e);
      var o = new l();
      s(t, a).then(function (e) {
        if (o.isAborted()) {
          throw [4928, t + "(abort)"];
        }
        if (!e.ok) {
          throw [4928, t + "(wrong status)"];
        }
        return i ? h(e, i) : e;
      }).then(function (e) {
        if (o.isAborted()) {
          throw [4928, t + "(abort)"];
        }
        var i;
        switch (r) {
          case "json":
            i = e.json();
            break;
          case "arraybuffer":
            i = e.arrayBuffer();
            break;
          case "blob":
            i = e.blob();
            break;
          default:
            i = e.text();
        }
        return i.then(function (e) {
          if (o.isAborted()) {
            throw [4928, t + "(abort)"];
          }
          var i = n;
          n = null;
          i(null, e);
        });
      }).catch(function (e) {
        if (n) {
          if (!Array.isArray(e)) {
            e = [4928, t + "(error)"];
          }
          n(Error(cc.debug.getError(e[0]), e[1]));
        }
      });
      return o;
    }
    e.exports = {
      downloadFile: function (t, e, n, r) {
        var s = i(e, n, r);
        var a = s.options;
        var o = s.onProgress;
        var l = s.onComplete;
        var h = c(t);
        return "blobURL" === a.responseType ? f(h, a, l) : d(h, a, o, l);
      },
      unregisterBlobURL: o
    };
  }, {
    "./utilities": 56
  }],
  39: [function (t, e) {
    "use strict";

    var i = t("./utilities").parseParameters;
    var n = t("./download-file");
    var r = n.downloadFile;
    var s = n.unregisterBlobURL;
    var a = {};
    e.exports = function (t, e, n) {
      var o = i(e, undefined, n);
      e = o.options;
      n = o.onComplete;
      if (a[t]) {
        return n && n(null);
      }
      e.responseType = "blobURL";
      r(t, e, function (e, i) {
        if (e) {
          return n && n(e);
        }
        var r = document.createElement("script");
        r.async = true;
        r.src = i;
        r.addEventListener("load", function () {
          document.head.removeChild(r);
          URL.revokeObjectURL(i);
          a[t] = true;
          if (n) {
            n(null);
          }
        }, false);
        r.addEventListener("error", function () {
          document.head.removeChild(r);
          URL.revokeObjectURL(i);
          s(i);
          if (n) {
            n(Error(cc.debug.getError(4928, t)));
          }
        }, false);
        document.head.appendChild(r);
      });
    };
  }, {
    "./download-file": 38,
    "./utilities": 56
  }],
  40: [function (t, e) {
    "use strict";

    function i() {
      return (i = Object.assign || function (t) {
        for (var e = 1; e < arguments.length; e++) {
          var i = arguments[e];
          for (var n in i) if (Object.prototype.hasOwnProperty.call(i, n)) {
            t[n] = i[n];
          }
        }
        return t;
      }).apply(this, arguments);
    }
    var n = t("../platform/js");
    var r = t("../CCDebug");
    var s = t("./font-loader").loadFont;
    var a = t("../platform/utils").callInNextTick;
    var o = t("./download-dom-image");
    var c = t("./download-file").downloadFile;
    var l = t("./download-script.js");
    var h = t("./cache");
    var u = t("./shared").files;
    var f = t("../platform/CCSys");
    var d = f.__audioSupport;
    var _ = f.capabilities;
    var p = t("./utilities").retry;
    var v = /^(?:\w+:\/\/|\.+\/).+/;
    var g = d.format || [];
    var m = function (t, e, i) {
      i(Error(r.getError(4927)));
    };
    var y = function (t, e, i) {
      if (g.length > 0) {
        x(t, e, i);
      } else {
        m(0, 0, i);
      }
    };
    var T = function () {
      var t = _.imageBitmap && cc.macro.ALLOW_IMAGE_BITMAP ? E : o;
      t.apply(this, arguments);
    };
    var E = function (t, e, i) {
      e.responseType = "blob";
      c(t, e, e.onFileProgress, i);
    };
    var A = function (t, e, i) {
      e.responseType = "json";
      c(t, e, e.onFileProgress, function (t, e) {
        if (!t && "string" == typeof e) {
          try {
            e = JSON.parse(e);
          } catch (n) {
            t = n;
          }
        }
        if (i) {
          i(t, e);
        }
      });
    };
    var x = function (t, e, i) {
      e.responseType = "arraybuffer";
      c(t, e, e.onFileProgress, i);
    };
    var C = function (t, e, i) {
      e.responseType = "text";
      c(t, e, e.onFileProgress, i);
    };
    var b = function (t, e, i) {
      i(null, t);
    };
    var S = new h();
    var R = [];
    var M = false;
    var w = 0;
    var I = 0;
    var O = -1;
    var L = false;
    var P = function () {
      var t = Date.now();
      var e = cc.director._deltaTime > 0.03333333333333333 ? 0.03333333333333333 : cc.director._deltaTime;
      if (t - O > 1e3 * e) {
        I = 0;
        O = t;
      }
    };
    var D = function t(e, i) {
      L = false;
      for (P(); R.length > 0 && w < e && I < i;) {
        if (M) {
          R.sort(function (t, e) {
            return t.priority - e.priority;
          });
          M = false;
        }
        var n = R.pop();
        if (!n) {
          break;
        }
        w++;
        I++;
        n.invoke();
      }
      if (R.length > 0 && w < e) {
        a(t, e, i);
        L = true;
      }
    };
    var N = {
      _remoteServerAddress: "",
      _maxInterval: 0.03333333333333333,
      get remoteServerAddress() {
        return this._remoteServerAddress;
      },
      maxConcurrency: 6,
      maxRequestsPerFrame: 6,
      maxRetryCount: 3,
      limited: true,
      retryInterval: 2e3,
      bundleVers: null,
      downloadFile: c,
      downloadScript: l,
      init: function (t, e) {
        S.clear();
        R.length = 0;
        this._remoteServerAddress = e || "";
        if (this._remoteServerAddress && !this._remoteServerAddress.endsWith("/")) {
          this._remoteServerAddress += "/";
        }
        this.bundleVers = t || Object.create(null);
      },
      register: function (t, e) {
        if ("object" == typeof t) {
          n.mixin(F, t);
        } else {
          F[t] = e;
        }
      },
      download: function (t, e, n, r, s) {
        var o = F[n] || F.default;
        r = i({
          remoteServerAddress: this.remoteServerAddress
        }, r);
        var c;
        var l;
        var h = this;
        if (c = u.get(t)) {
          s(null, c);
        } else if (l = S.get(t)) {
          l.push(s);
          var f = 0;
          for (var d = R.length; f < d; f++) {
            var _ = R[f];
            if (_.id === t) {
              var v = r.priority || 0;
              return void (_.priority < v && (_.priority = v, M = true));
            }
          }
        } else {
          var g = undefined !== r.maxRetryCount ? r.maxRetryCount : this.maxRetryCount;
          var m = undefined !== r.maxConcurrency ? r.maxConcurrency : this.maxConcurrency;
          var y = undefined !== r.maxRequestsPerFrame ? r.maxRequestsPerFrame : this.maxRequestsPerFrame;
          p(function (i, n) {
            if (0 === i) {
              S.add(t, [s]);
            }
            if (!h.limited) {
              return o(e, r, n);
            }
            function c() {
              o(e, r, function () {
                w--;
                if (!L && R.length > 0) {
                  a(D, m, y);
                  L = true;
                }
                n.apply(this, arguments);
              });
            }
            P();
            if (w < m && I < y) {
              c();
              w++;
              I++;
            } else {
              R.push({
                id: t,
                priority: r.priority || 0,
                invoke: c
              });
              M = true;
              if (!L && w < m) {
                a(D, m, y);
                L = true;
              }
            }
          }, g, this.retryInterval, function (e, i) {
            if (!e) {
              u.add(t, i);
            }
            var n = S.remove(t);
            var r = 0;
            for (var s = n.length; r < s; r++) {
              n[r](e, i);
            }
          });
        }
      }
    };
    var F = {
      ".png": T,
      ".jpg": T,
      ".bmp": T,
      ".jpeg": T,
      ".gif": T,
      ".ico": T,
      ".tiff": T,
      ".webp": T,
      ".image": T,
      ".pvr": x,
      ".pkm": x,
      ".astc": x,
      ".mp3": y,
      ".ogg": y,
      ".wav": y,
      ".m4a": y,
      ".txt": C,
      ".xml": C,
      ".vsh": C,
      ".fsh": C,
      ".atlas": C,
      ".tmx": C,
      ".tsx": C,
      ".json": A,
      ".ExportJson": A,
      ".plist": C,
      ".fnt": C,
      ".font": s,
      ".eot": s,
      ".ttf": s,
      ".woff": s,
      ".svg": s,
      ".ttc": s,
      ".mp4": b,
      ".avi": b,
      ".mov": b,
      ".mpg": b,
      ".mpeg": b,
      ".rm": b,
      ".rmvb": b,
      ".binary": x,
      ".bin": x,
      ".dbbin": x,
      ".skel": x,
      ".js": l,
      bundle: function (t, e, i) {
        var n = cc.path.basename(t);
        var r = t;
        if (!v.test(r)) {
          r = e.remoteServerAddress ? e.remoteServerAddress + "assets/" + n : "assets/" + n;
        }
        var s;
        var a;
        var o = e.version || null[n];
        var c = 0;
        if ("string" == typeof o) {
          s = a = o;
        } else if (o) {
          s = o.config;
          a = o.index;
        }
        var h = null;
        var u = null;
        A(r + "/config." + (s ? s + "." : "") + "json", e, function (t, e) {
          if (t) {
            u = t;
          }
          if (h = e) {
            h.base = r + "/";
          }
          if (2 == ++c) {
            i(u, h);
          }
        });
        l(r + "/index." + (a ? a + "." : "") + "js", e, function (t) {
          if (t) {
            u = t;
          }
          if (2 == ++c) {
            i(u, h);
          }
        });
      },
      default: C
    };
    N._downloaders = F;
    e.exports = N;
  }, {
    "../CCDebug": 23,
    "../platform/CCSys": 171,
    "../platform/js": 183,
    "../platform/utils": 186,
    "./cache": 33,
    "./download-dom-image": 37,
    "./download-file": 38,
    "./download-script.js": 39,
    "./font-loader": 43,
    "./shared": 53,
    "./utilities": 56
  }],
  41: [function (t, e) {
    "use strict";

    var i = t("./bundle");
    var n = t("./cache");
    var r = t("./shared");
    var s = r.assets;
    var a = r.bundles;
    var o = new n();
    function c(t, e, i, n) {
      var r = null;
      var s = null;
      try {
        (r = new cc.Texture2D())._nativeUrl = t;
        r._nativeAsset = e;
      } catch (a) {
        s = a;
      }
      if (n) {
        n(s, r);
      }
    }
    function l(t, e, i, n) {
      var r = new cc.AudioClip();
      r._nativeUrl = t;
      r._nativeAsset = e;
      r.duration = e.duration;
      if (n) {
        n(null, r);
      }
    }
    function h(t, e, i, n) {
      var r = new cc.VideoClip();
      r._nativeUrl = t;
      r._nativeAsset = e;
      if (n) {
        n(null, r);
      }
    }
    function u(t, e, i, n) {
      var r = new cc.JsonAsset();
      r.json = e;
      if (n) {
        n(null, r);
      }
    }
    function f(t, e, i, n) {
      var r = new cc.TextAsset();
      r.text = e;
      if (n) {
        n(null, r);
      }
    }
    function d(t, e, i, n) {
      var r = new cc.TTFFont();
      r._nativeUrl = t;
      r._nativeAsset = e;
      if (n) {
        n(null, r);
      }
    }
    function _(t, e, i, n) {
      var r = new cc.BufferAsset();
      r._nativeUrl = t;
      r._nativeAsset = e;
      if (n) {
        n(null, r);
      }
    }
    var p = {
      register: function (t, e) {
        if ("object" == typeof t) {
          cc.js.mixin(v, t);
        } else {
          v[t] = e;
        }
      },
      create: function (t, e, i, n, r) {
        var a;
        var c;
        var l = v[i] || v.default;
        if (a = s.get(t)) {
          r(null, a);
        } else if (c = o.get(t)) {
          c.push(r);
        } else {
          o.add(t, [r]);
          l(t, e, n, function (e, i) {
            if (!e && i instanceof cc.Asset) {
              i._uuid = t;
              s.add(t, i);
            }
            var n = o.remove(t);
            var r = 0;
            for (var a = n.length; r < a; r++) {
              n[r](e, i);
            }
          });
        }
      }
    };
    var v = {
      ".png": c,
      ".jpg": c,
      ".bmp": c,
      ".jpeg": c,
      ".gif": c,
      ".ico": c,
      ".tiff": c,
      ".webp": c,
      ".image": c,
      ".pvr": c,
      ".pkm": c,
      ".astc": c,
      ".mp3": l,
      ".ogg": l,
      ".wav": l,
      ".m4a": l,
      ".mp4": h,
      ".avi": h,
      ".mov": h,
      ".mpg": h,
      ".mpeg": h,
      ".rm": h,
      ".rmvb": h,
      ".txt": f,
      ".xml": f,
      ".vsh": f,
      ".fsh": f,
      ".atlas": f,
      ".tmx": f,
      ".tsx": f,
      ".fnt": f,
      ".json": u,
      ".ExportJson": u,
      ".font": d,
      ".eot": d,
      ".ttf": d,
      ".woff": d,
      ".svg": d,
      ".ttc": d,
      ".binary": _,
      ".bin": _,
      ".dbbin": _,
      ".skel": _,
      bundle: function (t, e, n, r) {
        var s = a.get(e.name);
        if (!s) {
          s = new i();
          e.base = e.base || t + "/";
          s.init(e);
        }
        if (r) {
          r(null, s);
        }
      },
      default: function (t, e, i, n) {
        var r = new cc.Asset();
        r._nativeUrl = t;
        r._nativeAsset = e;
        if (n) {
          n(null, r);
        }
      }
    };
    e.exports = p;
  }, {
    "./bundle": 32,
    "./cache": 33,
    "./shared": 53
  }],
  42: [function (t, e) {
    "use strict";

    var i = t("./pack-manager");
    var n = t("./task");
    var r = t("./utilities");
    var s = r.getDepends;
    var a = r.clear;
    var o = r.forEach;
    var c = t("./shared");
    var l = c.assets;
    var h = c.fetchPipeline;
    function u(t) {
      var e = t.output;
      var i = 0;
      for (var n = e.length; i < n; i++) {
        if (e[i].content) {
          e[i].content.decRef(false);
        }
      }
    }
    function f(t, e, i, n, r, a, o) {
      var c = e.options.__exclude__;
      var l = e.progress;
      t.content = i;
      t.file = n;
      e.output.push(t);
      if (r) {
        c[t.uuid] = true;
        s(t.uuid, n || i, c, a, true, false, t.config);
        l.total = o + a.length;
      }
      if (l.canInvoke) {
        e.dispatch("progress", ++l.finish, l.total, t);
      }
    }
    e.exports = function (t, e) {
      var r = false;
      if (!t.progress) {
        t.progress = {
          finish: 0,
          total: t.input.length,
          canInvoke: true
        };
        r = true;
      }
      var s = t.options;
      var c = [];
      var d = t.progress;
      var _ = d.total;
      s.__exclude__ = s.__exclude__ || Object.create(null);
      t.output = [];
      o(t.input, function (n, s) {
        if (!n.isNative && l.has(n.uuid)) {
          var a = l.get(n.uuid);
          a.addRef();
          f(n, t, a, null, a.__asyncLoadAssets__, c, _);
          return s();
        }
        i.load(n, t.options, function (i, a) {
          if (i) {
            if (!t.isFinish) {
              if (!cc.assetManager.force || r) {
                d.canInvoke = false;
                e(i);
              } else {
                f(n, t, null, null, false, c, _);
              }
            }
          } else if (!t.isFinish) {
            f(n, t, null, a, !n.isNative, c, _);
          }
          s();
        });
      }, function () {
        if (t.isFinish) {
          a(t, true);
          return t.dispatch("error");
        }
        if (c.length > 0) {
          var i = n.create({
            name: t.name + " dependencies",
            input: c,
            progress: d,
            options: s,
            onProgress: t.onProgress,
            onError: n.prototype.recycle,
            onComplete: function (n) {
              if (!n) {
                t.output.push.apply(t.output, this.output);
                i.recycle();
              }
              if (r) {
                u(t);
              }
              e(n);
            }
          });
          h.async(i);
        } else {
          if (r) {
            u(t);
          }
          e();
        }
      });
    };
  }, {
    "./pack-manager": 47,
    "./shared": 53,
    "./task": 54,
    "./utilities": 56
  }],
  43: [function (t, e) {
    "use strict";

    var i;
    var n = t("../utils/text-utils");
    var r = null;
    var a = Object.create(null);
    var o = -1;
    var c = [];
    i = undefined;
    var h = function () {
      if (undefined === i) {
        if (window.FontFace) {
          var t = /Gecko.*Firefox\/(\d+)/.exec(window.navigator.userAgent);
          var e = /OS X.*Version\/10\..*Safari/.exec(window.navigator.userAgent) && /Apple/.exec(window.navigator.vendor);
          i = t ? parseInt(t[1], 10) > 42 : !e;
        } else {
          i = false;
        }
      }
      return i;
    };
    function u() {
      var t = true;
      var e = Date.now();
      for (var i = c.length - 1; i >= 0; i--) {
        var a = c[i];
        var h = a.fontFamilyName;
        if (e - a.startTime > 3e3) {
          a.onComplete(null, h);
          c.splice(i, 1);
        } else {
          var u = a.refWidth;
          var f = "40px " + h;
          r.font = f;
          if (u !== n.safeMeasureText(r, "BES bswy:->@123丁ぁᄁ", f)) {
            c.splice(i, 1);
            a.onComplete(null, h);
          } else {
            t = false;
          }
        }
      }
      if (t) {
        clearInterval(o);
        o = -1;
      }
    }
    var f = {
      loadFont: function (t, e, i) {
        var d = f._getFontFamily(t);
        if (a[d]) {
          return i(null, d);
        }
        if (!r) {
          var _ = document.createElement("canvas");
          _.width = 100;
          _.height = 100;
          r = _.getContext("2d");
        }
        var p = "40px " + d;
        r.font = p;
        var v = n.safeMeasureText(r, "BES bswy:->@123丁ぁᄁ", p);
        var g = document.createElement("style");
        g.type = "text/css";
        var m = "";
        m += isNaN(d - 0) ? "@font-face { font-family:" + d + "; src:" : "@font-face { font-family:'" + d + "'; src:";
        m += "url('" + t + "');";
        g.textContent = m + "}";
        document.body.appendChild(g);
        var y;
        var T;
        var E;
        var A;
        var x;
        var C;
        var b = document.createElement("div");
        var S = b.style;
        S.fontFamily = d;
        b.innerHTML = ".";
        S.position = "absolute";
        S.left = "-100px";
        S.top = "-100px";
        document.body.appendChild(b);
        if (h()) {
          y = Date.now();
          T = d;
          E = i;
          A = new Promise(function (t, e) {
            (function i() {
              if (Date.now() - y >= 3e3) {
                e();
              } else {
                document.fonts.load("40px " + T).then(function (e) {
                  if (e.length >= 1) {
                    t();
                  } else {
                    setTimeout(i, 100);
                  }
                }, function () {
                  e();
                });
              }
            })();
          });
          x = null;
          C = new Promise(function (t, e) {
            x = setTimeout(e, 3e3);
          });
          Promise.race([C, A]).then(function () {
            if (x) {
              clearTimeout(x);
              x = null;
            }
            E(null, T);
          }, function () {
            E(null, T);
          });
        } else {
          var R = {
            fontFamilyName: d,
            refWidth: v,
            onComplete: i,
            startTime: Date.now()
          };
          c.push(R);
          if (-1 === o) {
            o = setInterval(u, 100);
          }
        }
        a[d] = g;
      },
      _getFontFamily: function (t) {
        var e = t.lastIndexOf(".ttf");
        if (-1 === e) {
          return t;
        }
        var i;
        var n = t.lastIndexOf("/");
        if (-1 !== (i = -1 === n ? t.substring(0, e) + "_LABEL" : t.substring(n + 1, e) + "_LABEL").indexOf(" ")) {
          i = "\"" + i + "\"";
        }
        return i;
      }
    };
    e.exports = f;
  }, {
    "../utils/text-utils": 243
  }],
  44: [function (t, e) {
    "use strict";

    var i;
    var n = t("./shared").bundles;
    i = /.*[/\\][0-9a-fA-F]{2}[/\\]([0-9a-fA-F-]{8,})/;
    var r = {
      decodeUuid: t("../utils/decode-uuid"),
      getUuidFromURL: function (t) {
        var e = t.match(i);
        return e ? e[1] : "";
      },
      getUrlWithUuid: function (t, e) {
        (e = e || Object.create(null)).__isNative__ = e.isNative;
        e.ext = e.nativeExt;
        var i = n.find(function (e) {
          return e.getAssetInfo(t);
        });
        if (i) {
          e.bundle = i.name;
        }
        return cc.assetManager._transform(t, e);
      },
      isScene: function (t) {
        return t && (t.constructor === cc.SceneAsset || t instanceof cc.Scene);
      },
      normalize: function (t) {
        if (t) {
          if (46 === t.charCodeAt(0) && 47 === t.charCodeAt(1)) {
            t = t.slice(2);
          } else if (47 === t.charCodeAt(0)) {
            t = t.slice(1);
          }
        }
        return t;
      }
    };
    e.exports = r;
  }, {
    "../utils/decode-uuid": 231,
    "./shared": 53
  }],
  45: [function (t) {
    "use strict";

    t("./CCAssetManager");
  }, {
    "./CCAssetManager": 30
  }],
  46: [function (t, e) {
    "use strict";

    var i = t("./pack-manager");
    var n = t("./pipeline");
    var r = t("./parser");
    var s = t("./utilities");
    var a = s.getDepends;
    var o = s.cache;
    var c = s.gatherAsset;
    var l = s.setProperties;
    var h = s.forEach;
    var u = s.clear;
    var f = s.checkCircleReference;
    var d = t("./shared");
    var _ = d.assets;
    var p = d.files;
    var v = d.parsed;
    var g = d.pipeline;
    var m = t("./task");
    var y = new n("loadOneAsset", [function (t, e) {
      var n = t.output = t.input;
      var r = n.options;
      var s = n.isNative;
      var a = n.uuid;
      var o = n.file;
      var c = r.reload;
      if (o || !c && !s && _.has(a)) {
        return e();
      }
      i.load(n, t.options, function (t, i) {
        n.file = i;
        e(t);
      });
    }, function (t, e) {
      var i = t.output = t.input;
      var n = t.progress;
      var s = t.options.__exclude__;
      var a = i.id;
      var o = i.file;
      var c = i.options;
      if (i.isNative) {
        r.parse(a, o, i.ext, c, function (r, s) {
          if (r) {
            return e(r);
          }
          i.content = s;
          if (n.canInvoke) {
            t.dispatch("progress", ++n.finish, n.total, i);
          }
          p.remove(a);
          v.remove(a);
          e();
        });
      } else {
        var l = i.uuid;
        if (l in s) {
          var h = s[l];
          var u = h.finish;
          var d = h.content;
          var g = h.err;
          var m = h.callbacks;
          if (n.canInvoke) {
            t.dispatch("progress", ++n.finish, n.total, i);
          }
          if (u || f(l, l, s)) {
            if (d && d.addRef) {
              d.addRef();
            }
            i.content = d;
            e(g);
          } else {
            m.push({
              done: e,
              item: i
            });
          }
        } else if (!c.reload && _.has(l)) {
          var y = _.get(l);
          if (c.__asyncLoadAssets__ || !y.__asyncLoadAssets__) {
            i.content = y.addRef();
            if (n.canInvoke) {
              t.dispatch("progress", ++n.finish, n.total, i);
            }
            e();
          } else {
            T(t, y, e, false);
          }
        } else {
          r.parse(a, o, "import", c, function (i, n) {
            if (i) {
              return e(i);
            }
            n._uuid = l;
            T(t, n, e, true);
          });
        }
      }
    }]);
    function T(t, e, i, n) {
      var r = t.input;
      var s = t.progress;
      var c = r.uuid;
      var h = r.id;
      var u = r.options;
      var f = r.config;
      var d = u.__asyncLoadAssets__;
      var _ = u.cacheAsset;
      var y = [];
      if (e.addRef) {
        e.addRef();
      }
      a(c, e, Object.create(null), y, false, d, f);
      if (s.canInvoke) {
        t.dispatch("progress", ++s.finish, s.total += y.length, r);
      }
      var T = t.options.__exclude__[c] = {
        content: e,
        finish: false,
        callbacks: [{
          done: i,
          item: r
        }]
      };
      var E = m.create({
        input: y,
        options: t.options,
        onProgress: t.onProgress,
        onError: m.prototype.recycle,
        progress: s,
        onComplete: function (t) {
          if (e.decRef) {
            e.decRef(false);
          }
          e.__asyncLoadAssets__ = d;
          T.finish = true;
          T.err = t;
          if (!t) {
            var i = Array.isArray(E.output) ? E.output : [E.output];
            var r = Object.create(null);
            var s = 0;
            for (var a = i.length; s < a; s++) {
              var u = i[s];
              if (u) {
                r[u instanceof cc.Asset ? u._uuid + "@import" : c + "@native"] = u;
              }
            }
            if (n) {
              if (!l(c, e, r) && !e.__onLoadInvoked__) {
                try {
                  if (e.onLoad) {
                    e.onLoad();
                  }
                  e.__onLoadInvoked__ = true;
                } catch (A) {}
              }
              p.remove(h);
              v.remove(h);
              o(c, e, undefined !== _ ? _ : cc.assetManager.cacheAsset);
            } else if (e.__nativeDepend__ && !e._nativeAsset && !l(c, e, r) && !e.__onLoadInvoked__) {
              try {
                if (e.onLoad) {
                  e.onLoad();
                }
                e.__onLoadInvoked__ = true;
              } catch (A) {}
            }
            E.recycle();
          }
          var f = T.callbacks;
          var g = 0;
          for (var m = f.length; g < m; g++) {
            var y = f[g];
            if (e.addRef) {
              e.addRef();
            }
            y.item.content = e;
            y.done(t);
          }
          f.length = 0;
        }
      });
      g.async(E);
    }
    e.exports = function (t, e) {
      var i = false;
      if (!t.progress) {
        t.progress = {
          finish: 0,
          total: t.input.length,
          canInvoke: true
        };
        i = true;
      }
      var n = t.options;
      var r = t.progress;
      n.__exclude__ = n.__exclude__ || Object.create(null);
      t.output = [];
      h(t.input, function (s, a) {
        var o = m.create({
          input: s,
          onProgress: t.onProgress,
          options: n,
          progress: r,
          onComplete: function (n, s) {
            if (n && !t.isFinish) {
              if (!cc.assetManager.force || i) {
                r.canInvoke = false;
                e(n);
              } else if (r.canInvoke) {
                t.dispatch("progress", ++r.finish, r.total, s);
              }
            }
            t.output.push(s);
            o.recycle();
            a();
          }
        });
        y.async(o);
      }, function () {
        n.__exclude__ = null;
        if (t.isFinish) {
          u(t, true);
          return t.dispatch("error");
        }
        c(t);
        u(t, true);
        e();
      });
    };
  }, {
    "./pack-manager": 47,
    "./parser": 48,
    "./pipeline": 49,
    "./shared": 53,
    "./task": 54,
    "./utilities": 56
  }],
  47: [function (t, e) {
    "use strict";

    var i = t("../platform/deserialize-compiled");
    var n = t("./downloader");
    var r = t("./cache");
    var s = t("../platform/js");
    var a = t("./shared").files;
    var o = new r();
    function c(t) {
      return o.has(t.uuid);
    }
    var l = {
      unpackJson: function (t, e, n, r) {
        var a = s.createMap(true);
        var o = null;
        if (Array.isArray(e)) {
          0;
          (e = i.unpackJSONs(e)).length;
          t.length;
          for (var c = 0; c < t.length; c++) {
            a[t[c] + "@import"] = e[c];
          }
        } else {
          var l = s._getClassId(cc.Texture2D);
          if (e.type === l) {
            if (e.data) {
              var h = e.data.split("|");
              h.length;
              t.length;
              if (!cc.sys.capabilities.webp) {
                var u = 0;
                for (var f = h.length; u < f; u++) {
                  var d = h[u];
                  var _ = d.indexOf(",");
                  var p = d.substring(0, _);
                  p = p.replace("4_", "");
                  h[u] = p + d.substring(_);
                }
              }
              for (var v = 0; v < t.length; v++) {
                0;
                a[t[v] + "@import"] = i.packCustomObjData(l, h[v], true);
              }
            }
          } else {
            o = Error("unmatched type pack!");
            a = null;
          }
        }
        if (r) {
          r(o, a);
        }
      },
      init: function () {
        o.clear();
      },
      register: function (t, e) {
        if ("object" == typeof t) {
          s.mixin(h, t);
        } else {
          h[t] = e;
        }
      },
      unpack: function (t, e, i, n, r) {
        if (e) {
          0;
          h[i](t, e, n, r);
        } else if (r) {
          r(Error("package data is wrong!"));
        }
      },
      load: function (t, e, i) {
        if (t.isNative || !t.info || !t.info.packs) {
          return n.download(t.id, t.url, t.ext, t.options, i);
        }
        if (a.has(t.id)) {
          return i(null, a.get(t.id));
        }
        var r = t.info.packs;
        var s = r.find(c);
        if (s) {
          return o.get(s.uuid).push({
            onComplete: i,
            id: t.id
          });
        }
        s = r[0];
        o.add(s.uuid, [{
          onComplete: i,
          id: t.id
        }]);
        var h = cc.assetManager._transform(s.uuid, {
          ext: s.ext,
          bundle: t.config.name
        });
        n.download(s.uuid, h, s.ext, t.options, function (e, i) {
          a.remove(s.uuid);
          l.unpack(s.packs, i, s.ext, t.options, function (t, e) {
            if (t) {
              t.message = "unpack " + h + " failed! details: " + t.message;
            } else {
              for (var i in e) a.add(i, e[i]);
            }
            var n = o.remove(s.uuid);
            var r = 0;
            for (var c = n.length; r < c; r++) {
              var l = n[r];
              if (t) {
                l.onComplete(t);
              } else {
                var u = e[l.id];
                if (u) {
                  l.onComplete(null, u);
                } else {
                  l.onComplete(Error("can not retrieve data from package"));
                }
              }
            }
          });
        });
      }
    };
    var h = {
      ".json": l.unpackJson
    };
    e.exports = l;
  }, {
    "../platform/deserialize-compiled": 177,
    "../platform/js": 183,
    "./cache": 33,
    "./downloader": 40,
    "./shared": 53
  }],
  48: [function (t, e) {
    "use strict";

    var i = t("../platform/CCSAXParser").plistParser;
    var n = t("../platform/js");
    var r = t("./deserialize");
    var s = t("./cache");
    var a = t("./helper").isScene;
    var o = t("./shared");
    var c = o.parsed;
    var l = o.files;
    var h = t("../platform/CCSys");
    var u = h.__audioSupport;
    var f = h.capabilities;
    var d = new s();
    var _ = {
      parseImage: function (t, e, i) {
        if (f.imageBitmap && t instanceof Blob) {
          var n = {
            imageOrientation: e.__flipY__ ? "flipY" : "none",
            premultiplyAlpha: e.__premultiplyAlpha__ ? "premultiply" : "none"
          };
          createImageBitmap(t, n).then(function (t) {
            t.flipY = !!e.__flipY__;
            t.premultiplyAlpha = !!e.__premultiplyAlpha__;
            if (i) {
              i(null, t);
            }
          }, function (t) {
            if (i) {
              i(t, null);
            }
          });
        } else if (i) {
          i(null, t);
        }
      },
      parseAudio: function (t, e, i) {
        if (t instanceof ArrayBuffer && u.WEB_AUDIO) {
          u.context.decodeAudioData(t, function (t) {
            if (i) {
              i(null, t);
            }
          }, function (t) {
            if (i) {
              i(t, null);
            }
          });
        } else if (i) {
          i(null, t);
        }
      },
      parsePVRTex: function (t, e, i) {
        var n = null;
        var r = null;
        try {
          var s = t instanceof ArrayBuffer ? t : t.buffer;
          var a = new Int32Array(s, 0, 13);
          if (55727696 != a[0]) {
            throw Error("Invalid magic number in PVR header");
          }
          var o = a[7];
          var c = a[6];
          var l = a[12] + 52;
          r = {
            _data: new Uint8Array(s, l),
            _compressed: true,
            width: o,
            height: c
          };
        } catch (h) {
          n = h;
        }
        if (i) {
          i(n, r);
        }
      },
      parsePKMTex: function () {
        function t(t, e) {
          return t[e] << 8 | t[e + 1];
        }
        return function (e, i, n) {
          var r = null;
          var s = null;
          try {
            var a = e instanceof ArrayBuffer ? e : e.buffer;
            var o = new Uint8Array(a);
            var c = t(o, 6);
            if (0 !== c && 1 !== c && 3 !== c) {
              return Error("Invalid magic number in ETC header");
            }
            var l = t(o, 12);
            var h = t(o, 14);
            t(o, 8);
            t(o, 10);
            s = {
              _data: new Uint8Array(a, 16),
              _compressed: true,
              width: l,
              height: h
            };
          } catch (u) {
            r = u;
          }
          if (n) {
            n(r, s);
          }
        };
      }(),
      parseASTCTex: function () {
        function t(t, e) {
          return 4 === t ? cc.Texture2D.PixelFormat.RGBA_ASTC_4x4 : 5 === t ? 4 === e ? cc.Texture2D.PixelFormat.RGBA_ASTC_5x4 : cc.Texture2D.PixelFormat.RGBA_ASTC_5x5 : 6 === t ? 5 === e ? cc.Texture2D.PixelFormat.RGBA_ASTC_6x5 : cc.Texture2D.PixelFormat.RGBA_ASTC_6x6 : 8 === t ? 5 === e ? cc.Texture2D.PixelFormat.RGBA_ASTC_8x5 : 6 === e ? cc.Texture2D.PixelFormat.RGBA_ASTC_8x6 : cc.Texture2D.PixelFormat.RGBA_ASTC_8x8 : 10 === t ? 5 === e ? cc.Texture2D.PixelFormat.RGBA_ASTC_10x5 : 6 === e ? cc.Texture2D.PixelFormat.RGBA_ASTC_10x6 : 8 === e ? cc.Texture2D.PixelFormat.RGBA_ASTC_10x8 : cc.Texture2D.PixelFormat.RGBA_ASTC_10x10 : 10 === e ? cc.Texture2D.PixelFormat.RGBA_ASTC_12x10 : cc.Texture2D.PixelFormat.RGBA_ASTC_12x12;
        }
        return function (e, i, n) {
          var r = null;
          var s = null;
          try {
            var a = e instanceof ArrayBuffer ? e : e.buffer;
            var o = new Uint8Array(a);
            if (1554098963 !== o[0] + (o[1] << 8) + (o[2] << 16) + (o[3] << 24)) {
              return Error("Invalid magic number in ASTC header");
            }
            var c = o[4];
            var l = o[5];
            var h = o[6];
            if ((c < 3 || c > 6 || l < 3 || l > 6 || h < 3 || h > 6) && (c < 4 || 7 === c || 9 === c || 11 === c || c > 12 || l < 4 || 7 === l || 9 === l || 11 === l || l > 12 || 1 !== h)) {
              return Error("Invalid block number in ASTC header");
            }
            var u = t(c, l);
            var f = o[7] + (o[8] << 8) + (o[9] << 16);
            var d = o[10] + (o[11] << 8) + (o[12] << 16);
            o[13];
            o[14];
            o[15];
            s = {
              _data: new Uint8Array(a, 16),
              _compressed: true,
              width: f,
              height: d,
              format: u
            };
          } catch (_) {
            r = _;
          }
          n(r, s);
        };
      }(),
      parsePlist: function (t, e, n) {
        var r = null;
        var s = i.parse(t);
        if (!s) {
          r = Error("parse failed");
        }
        if (n) {
          n(r, s);
        }
      },
      parseImport: function (t, e, i) {
        if (!t) {
          return i && i(Error("Json is empty"));
        }
        var n;
        var s = null;
        try {
          n = r(t, e);
        } catch (a) {
          s = a;
        }
        if (i) {
          i(s, n);
        }
      },
      init: function () {
        d.clear();
      },
      register: function (t, e) {
        if ("object" == typeof t) {
          n.mixin(p, t);
        } else {
          p[t] = e;
        }
      },
      parse: function (t, e, i, n, r) {
        var s;
        var o;
        var h;
        if (s = c.get(t)) {
          r(null, s);
        } else if (o = d.get(t)) {
          o.push(r);
        } else if (h = p[i]) {
          d.add(t, [r]);
          h(e, n, function (e, i) {
            if (e) {
              l.remove(t);
            } else if (!a(i)) {
              c.add(t, i);
            }
            var n = d.remove(t);
            var r = 0;
            for (var s = n.length; r < s; r++) {
              n[r](e, i);
            }
          });
        } else {
          r(null, e);
        }
      }
    };
    var p = {
      ".png": _.parseImage,
      ".jpg": _.parseImage,
      ".bmp": _.parseImage,
      ".jpeg": _.parseImage,
      ".gif": _.parseImage,
      ".ico": _.parseImage,
      ".tiff": _.parseImage,
      ".webp": _.parseImage,
      ".image": _.parseImage,
      ".pvr": _.parsePVRTex,
      ".pkm": _.parsePKMTex,
      ".astc": _.parseASTCTex,
      ".mp3": _.parseAudio,
      ".ogg": _.parseAudio,
      ".wav": _.parseAudio,
      ".m4a": _.parseAudio,
      ".plist": _.parsePlist,
      import: _.parseImport
    };
    e.exports = _;
  }, {
    "../platform/CCSAXParser": 169,
    "../platform/CCSys": 171,
    "../platform/js": 183,
    "./cache": 33,
    "./deserialize": 36,
    "./helper": 44,
    "./shared": 53
  }],
  49: [function (t, e) {
    "use strict";

    var i = t("./task");
    var n = 0;
    function r(t, e) {
      if (Array.isArray(e)) {
        this.id = n++;
        this.name = t;
        this.pipes = [];
        var i = 0;
        for (var r = e.length; i < r; i++) {
          if ("function" == typeof e[i]) {
            this.pipes.push(e[i]);
          }
        }
      }
    }
    r.prototype = {
      constructor: r,
      insert: function (t, e) {
        if (!("function" != typeof t || e > this.pipes.length)) {
          this.pipes.splice(e, 0, t);
          return this;
        }
      },
      append: function (t) {
        if ("function" == typeof t) {
          this.pipes.push(t);
          return this;
        }
      },
      remove: function (t) {
        if ("number" == typeof t) {
          this.pipes.splice(t, 1);
          return this;
        }
      },
      sync: function (t) {
        var e = this.pipes;
        if (t instanceof i && 0 !== e.length) {
          if (null != t.output) {
            t.input = t.output;
            t.output = null;
          }
          t._isFinish = false;
          var n = 0;
          for (var r = e.length; n < r;) {
            0;
            var s = e[n](t);
            if (s) {
              t._isFinish = true;
              return s;
            }
            if (++n !== r) {
              t.input = t.output;
              t.output = null;
            }
          }
          t._isFinish = true;
          return t.output;
        }
      },
      async: function (t) {
        var e = this.pipes;
        if (t instanceof i && 0 !== e.length) {
          if (null != t.output) {
            t.input = t.output;
            t.output = null;
          }
          t._isFinish = false;
          this._flow(0, t);
        }
      },
      _flow: function (t, e) {
        var i = this;
        0;
        this.pipes[t](e, function (n) {
          if (n) {
            e._isFinish = true;
            if (e.onComplete) {
              e.onComplete(n);
            }
          } else if (++t < i.pipes.length) {
            e.input = e.output;
            e.output = null;
            i._flow(t, e);
          } else {
            e._isFinish = true;
            if (e.onComplete) {
              e.onComplete(n, e.output);
            }
          }
        });
      }
    };
    e.exports = r;
  }, {
    "./task": 54
  }],
  50: [function (t, e) {
    "use strict";

    var i = t("./task");
    var n = t("./shared");
    var r = n.transformPipeline;
    var s = n.RequestType;
    e.exports = function (t, e) {
      var n = t.options;
      var a = Object.create(null);
      var o = Object.create(null);
      for (var c in n) switch (c) {
        case s.PATH:
        case s.UUID:
        case s.DIR:
        case s.SCENE:
        case s.URL:
          break;
        case "__requestType__":
        case "__isNative__":
        case "ext":
        case "type":
        case "__nativeName__":
        case "audioLoadMode":
        case "bundle":
          a[c] = n[c];
          break;
        case "__exclude__":
        case "__outputAsArray__":
          o[c] = n[c];
          break;
        default:
          a[c] = n[c];
          o[c] = n[c];
      }
      t.options = o;
      var l = i.create({
        input: t.input,
        options: a
      });
      var h = null;
      try {
        t.output = t.source = r.sync(l);
      } catch (d) {
        h = d;
        var u = 0;
        for (var f = l.output.length; u < f; u++) {
          l.output[u].recycle();
        }
      }
      l.recycle();
      e(h);
    };
  }, {
    "./shared": 53,
    "./task": 54
  }],
  51: [function (t, e) {
    "use strict";

    var i = t("./depend-util");
    var n = t("./cache");
    t("../assets/CCAsset");
    var r = t("./shared").assets;
    var s = t("../platform/utils").callInNextTick;
    function a(t, e) {
      if (t._uuid) {
        e.push(t._uuid);
      }
    }
    function o(t, e) {
      var i = Object.getOwnPropertyNames(t);
      for (var n = 0; n < i.length; n++) {
        var r = i[n];
        if ("node" !== r && "__eventTargets" !== r) {
          var s = t[r];
          if ("object" == typeof s && s) {
            if (Array.isArray(s)) {
              for (var o = 0; o < s.length; o++) {
                var c = s[o];
                if (c instanceof cc.Asset) {
                  a(c, e);
                }
              }
            } else if (s.constructor && s.constructor !== Object) {
              if (s instanceof cc.Asset) {
                a(s, e);
              }
            } else {
              var l = Object.getOwnPropertyNames(s);
              for (var h = 0; h < l.length; h++) {
                var u = s[l[h]];
                if (u instanceof cc.Asset) {
                  a(u, e);
                }
              }
            }
          }
        }
      }
    }
    var c = [];
    function l(t, e) {
      for (var i = 0; i < t._components.length; i++) {
        o(t._components[i], e);
      }
      for (var n = 0; n < t._children.length; n++) {
        l(t._children[n], e);
      }
    }
    function h(t, e, n, s) {
      n.push(t._uuid);
      var a = i.getDeps(t._uuid);
      var o = 0;
      for (var c = a.length; o < c; o++) {
        var l = r.get(a[o]);
        if (l) {
          var u = l._uuid;
          if (u in e) {
            e[u] += s;
          } else {
            e[u] = l.refCount + s;
          }
          if (n.includes(u)) {
            continue;
          }
          h(l, e, n, s);
        }
      }
    }
    function u(t) {
      var e = Object.create(null);
      e[t._uuid] = t.refCount;
      h(t, e, c, -1);
      c.length = 0;
      if (0 !== e[t._uuid]) {
        return e[t._uuid];
      }
      for (var i in e) if (0 !== e[i]) {
        h(r.get(i), e, c, 1);
      }
      c.length = 0;
      return e[t._uuid];
    }
    var f = new n();
    var d = new n();
    var _ = false;
    function p() {
      _ = false;
      d.forEach(function (t) {
        v._free(t);
      });
      d.clear();
    }
    var v = {
      init: function () {
        f.clear();
        d.clear();
      },
      _addPersistNodeRef: function (t) {
        var e = [];
        l(t, e);
        var i = 0;
        for (var n = e.length; i < n; i++) {
          var s = r.get(e[i]);
          if (s) {
            s.addRef();
          }
        }
        f.add(t.uuid, e);
      },
      _removePersistNodeRef: function (t) {
        if (f.has(t.uuid)) {
          var e = f.get(t.uuid);
          var i = 0;
          for (var n = e.length; i < n; i++) {
            var s = r.get(e[i]);
            if (s) {
              s.decRef();
            }
          }
          f.remove(t.uuid);
        }
      },
      _autoRelease: function (t, e, n) {
        if (t) {
          var s = i.getDeps(t._id);
          var a = 0;
          for (var o = s.length; a < o; a++) {
            var c = r.get(s[a]);
            if (c) {
              c.decRef(t.autoReleaseAssets);
            }
          }
          var l = i._depends.get(t._id);
          if (l && l.persistDeps) {
            var h = l.persistDeps;
            var u = 0;
            for (var d = h.length; u < d; u++) {
              var _ = r.get(h[u]);
              if (_) {
                _.decRef(t.autoReleaseAssets);
              }
            }
          }
          if (t._id !== e._id) {
            i.remove(t._id);
          }
        }
        var p = i._depends.get(e._id);
        if (p) {
          p.persistDeps = [];
        }
        for (var v in n) {
          var g = n[v];
          var m = f.get(g.uuid);
          var y = 0;
          for (var T = m.length; y < T; y++) {
            var E = r.get(m[y]);
            if (E) {
              E.addRef();
            }
          }
          if (p) {
            p.persistDeps.push.apply(p.persistDeps, m);
          }
        }
      },
      _free: function (t, e) {
        d.remove(t._uuid);
        if (cc.isValid(t, true) && !(!e && t.refCount > 0 && u(t) > 0)) {
          r.remove(t._uuid);
          var n = i.getDeps(t._uuid);
          var s = 0;
          for (var a = n.length; s < a; s++) {
            var o = r.get(n[s]);
            if (o) {
              o.decRef(false);
              v._free(o, false);
            }
          }
          t.destroy();
          i.remove(t._uuid);
        }
      },
      tryRelease: function (t, e) {
        if (t instanceof cc.Asset) {
          if (e) {
            v._free(t, e);
          } else {
            d.add(t._uuid, t);
            if (!_) {
              _ = true;
              s(p);
            }
          }
        }
      }
    };
    e.exports = v;
  }, {
    "../assets/CCAsset": 57,
    "../platform/utils": 186,
    "./cache": 33,
    "./depend-util": 35,
    "./shared": 53
  }],
  52: [function (t, e) {
    "use strict";

    var i = [];
    function n() {
      this._id = "";
      this.uuid = "";
      this.url = "";
      this.ext = ".json";
      this.content = null;
      this.file = null;
      this.info = null;
      this.config = null;
      this.isNative = false;
      this.options = Object.create(null);
    }
    n.prototype = {
      constructor: n,
      get id() {
        if (!this._id) {
          this._id = this.uuid + "@" + (this.isNative ? "native" : "import");
        }
        return this._id;
      },
      recycle: function () {
        if (500 !== i.length) {
          this._id = "";
          this.uuid = "";
          this.url = "";
          this.ext = ".json";
          this.content = null;
          this.file = null;
          this.info = null;
          this.config = null;
          this.isNative = false;
          this.options = Object.create(null);
          i.push(this);
        }
      }
    };
    n.create = function () {
      return 0 !== i.length ? i.pop() : new n();
    };
    e.exports = n;
  }, {}],
  53: [function (t, e) {
    "use strict";

    var i = t("./cache");
    var n = t("./pipeline");
    var r = new i();
    var s = new i();
    var a = new i();
    var o = new i();
    var c = new n("normal load", []);
    var l = new n("fetch", []);
    var h = new n("transform url", []);
    e.exports = {
      assets: r,
      files: s,
      parsed: a,
      pipeline: c,
      fetchPipeline: l,
      transformPipeline: h,
      RequestType: {
        UUID: "uuid",
        PATH: "path",
        DIR: "dir",
        URL: "url",
        SCENE: "scene"
      },
      bundles: o,
      BuiltinBundleName: {
        RESOURCES: "resources",
        INTERNAL: "internal",
        MAIN: "main",
        START_SCENE: "start-scene"
      }
    };
  }, {
    "./cache": 33,
    "./pipeline": 49
  }],
  54: [function (t, e) {
    "use strict";

    var i = 0;
    var n = [];
    function r(t) {
      this.id = i++;
      this._isFinish = true;
      this.onComplete = null;
      this.onProgress = null;
      this.onError = null;
      this.source = null;
      this.output = null;
      this.input = null;
      this.progress = null;
      this.options = null;
      this.set(t);
    }
    r.prototype = {
      constructor: r,
      set: function (t) {
        t = t || Object.create(null);
        this.onComplete = t.onComplete;
        this.onProgress = t.onProgress;
        this.onError = t.onError;
        this.source = this.input = t.input;
        this.output = null;
        this.progress = t.progress;
        this.options = t.options || Object.create(null);
      },
      dispatch: function (t, e, i, n, r) {
        switch (t) {
          case "complete":
            if (this.onComplete) {
              this.onComplete(e, i, n, r);
            }
            break;
          case "progress":
            if (this.onProgress) {
              this.onProgress(e, i, n, r);
            }
            break;
          case "error":
            if (this.onError) {
              this.onError(e, i, n, r);
            }
            break;
          default:
            var s = "on" + t[0].toUpperCase() + t.substr(1);
            if ("function" == typeof this[s]) {
              this[s](e, i, n, r);
            }
        }
      },
      recycle: function () {
        if (500 !== n.length) {
          this.onComplete = null;
          this.onProgress = null;
          this.onError = null;
          this.source = this.output = this.input = null;
          this.progress = null;
          this.options = null;
          n.push(this);
        }
      },
      get isFinish() {
        return this._isFinish;
      }
    };
    r.create = function (t) {
      var e = null;
      if (0 !== n.length) {
        (e = n.pop()).set(t);
      } else {
        e = new r(t);
      }
      return e;
    };
    e.exports = r;
  }, {}],
  55: [function (t, e) {
    "use strict";

    var i = t("./helper").decodeUuid;
    var n = t("./request-item");
    var r = t("./shared");
    var s = r.RequestType;
    var a = r.bundles;
    e.exports = {
      parse: function (t) {
        var e = t.input;
        var r = t.options;
        e = Array.isArray(e) ? e : [e];
        t.output = [];
        for (var o = 0; o < e.length; o++) {
          var c = e[o];
          var l = n.create();
          if ("string" == typeof c) {
            (c = Object.create(null))[r.__requestType__ || s.UUID] = e[o];
          }
          if ("object" == typeof c) {
            cc.js.addon(c, r);
            if (c.preset) {
              cc.js.addon(c, cc.assetManager.presets[c.preset]);
            }
            for (var h in c) {
              switch (h) {
                case s.UUID:
                  var u = l.uuid = i(c.uuid);
                  if (a.has(c.bundle)) {
                    if ((p = (v = a.get(c.bundle)._config).getAssetInfo(u)) && p.redirect) {
                      if (!a.has(p.redirect)) {
                        throw Error("Please load bundle " + p.redirect + " first");
                      }
                      p = (v = a.get(p.redirect)._config).getAssetInfo(u);
                    }
                    l.config = v;
                    l.info = p;
                  }
                  l.ext = c.ext || ".json";
                  break;
                case "__requestType__":
                case "ext":
                case "bundle":
                case "preset":
                case "type":
                  break;
                case s.DIR:
                  if (a.has(c.bundle)) {
                    var f = [];
                    a.get(c.bundle)._config.getDirWithPath(c.dir, c.type, f);
                    var d = 0;
                    for (var _ = f.length; d < _; d++) {
                      var p = f[d];
                      e.push({
                        uuid: p.uuid,
                        __isNative__: false,
                        ext: ".json",
                        bundle: c.bundle
                      });
                    }
                  }
                  l.recycle();
                  l = null;
                  break;
                case s.PATH:
                  if (a.has(c.bundle)) {
                    if ((p = (v = a.get(c.bundle)._config).getInfoWithPath(c.path, c.type)) && p.redirect) {
                      if (!a.has(p.redirect)) {
                        throw Error("you need to load bundle " + p.redirect + " first");
                      }
                      p = (v = a.get(p.redirect)._config).getAssetInfo(p.uuid);
                    }
                    if (!p) {
                      l.recycle();
                      throw Error("Bundle " + c.bundle + " doesn't contain " + c.path);
                    }
                    l.config = v;
                    l.uuid = p.uuid;
                    l.info = p;
                  }
                  l.ext = c.ext || ".json";
                  break;
                case s.SCENE:
                  if (a.has(c.bundle)) {
                    var v;
                    if ((p = (v = a.get(c.bundle)._config).getSceneInfo(c.scene)) && p.redirect) {
                      if (!a.has(p.redirect)) {
                        throw Error("you need to load bundle " + p.redirect + " first");
                      }
                      p = (v = a.get(p.redirect)._config).getAssetInfo(p.uuid);
                    }
                    if (!p) {
                      l.recycle();
                      throw Error("Bundle " + v.name + " doesn't contain scene " + c.scene);
                    }
                    l.config = v;
                    l.uuid = p.uuid;
                    l.info = p;
                  }
                  break;
                case "__isNative__":
                  l.isNative = c.__isNative__;
                  break;
                case s.URL:
                  l.url = c.url;
                  l.uuid = c.uuid || c.url;
                  l.ext = c.ext || cc.path.extname(c.url);
                  l.isNative = undefined === c.__isNative__ || c.__isNative__;
                  break;
                default:
                  l.options[h] = c[h];
              }
              if (!l) {
                break;
              }
            }
          }
          if (l && (t.output.push(l), !l.uuid && !l.url)) {
            throw Error("Can not parse this input:" + JSON.stringify(c));
          }
        }
        return null;
      },
      combine: function (t) {
        var e = t.output = t.input;
        for (var i = 0; i < e.length; i++) {
          var n = e[i];
          if (!n.url) {
            var r;
            var s;
            var a = n.config;
            s = n.isNative ? a && a.nativeBase ? a.base + a.nativeBase : cc.assetManager.generalNativeBase : a && a.importBase ? a.base + a.importBase : cc.assetManager.generalImportBase;
            var o = n.uuid;
            var c = "";
            if (n.info) {
              c = n.isNative ? n.info.nativeVer ? "." + n.info.nativeVer : "" : n.info.ver ? "." + n.info.ver : "";
            }
            r = ".ttf" === n.ext ? s + "/" + o.slice(0, 2) + "/" + o + c + "/" + n.options.__nativeName__ : s + "/" + o.slice(0, 2) + "/" + o + c + n.ext;
            n.url = r;
          }
        }
        return null;
      }
    };
  }, {
    "./helper": 44,
    "./request-item": 52,
    "./shared": 53
  }],
  56: [function (t, e) {
    "use strict";

    var i = t("./depend-util");
    var n = t("./helper");
    var r = n.isScene;
    var s = n.decodeUuid;
    var a = t("./shared").assets;
    var o = t("../platform/utils").callInNextTick;
    t("../assets/CCAsset");
    var c = {
      processOptions: function (t) {
        var e = t.uuids;
        var i = t.paths;
        var n = t.types;
        var r = t.deps;
        var a = t.paths = Object.create(null);
        if (false === t.debug) {
          var o = 0;
          for (var c = e.length; o < c; o++) {
            e[o] = s(e[o]);
          }
          for (var l in i) {
            var h = i[l];
            var u = h[1];
            h[1] = n[u];
          }
        } else {
          var f = Object.create(null);
          var d = 0;
          for (var _ = e.length; d < _; d++) {
            var p = e[d];
            e[d] = f[p] = s(p);
          }
          e = f;
        }
        for (var v in i) {
          var g = i[v];
          a[e[v]] = g;
        }
        var m = t.scenes;
        for (var y in m) {
          var T = m[y];
          m[y] = e[T];
        }
        var E = t.packs;
        for (var A in E) {
          var x = E[A];
          for (var C = 0; C < x.length; ++C) {
            x[C] = e[x[C]];
          }
        }
        var b = t.versions;
        if (b) {
          for (var S in b) {
            var R = b[S];
            for (var M = 0; M < R.length; M += 2) {
              var w = R[M];
              R[M] = e[w] || w;
            }
          }
        }
        var I = t.redirect;
        if (I) {
          for (var O = 0; O < I.length; O += 2) {
            I[O] = e[I[O]];
            I[O + 1] = r[I[O + 1]];
          }
        }
      },
      clear: function (t, e) {
        var i = 0;
        for (var n = t.input.length; i < n; i++) {
          var r = t.input[i];
          if (e && !r.isNative && r.content && r.content.decRef) {
            r.content.decRef(false);
          }
          r.recycle();
        }
        t.input = null;
      },
      retry: function (t, e, i, n, r) {
        t(r = r || 0, function (s, a) {
          r++;
          if (!s || r > e) {
            if (n) {
              n(s, a);
            }
          } else {
            setTimeout(function () {
              c.retry(t, e, i, n, r);
            }, i);
          }
        });
      },
      getDepends: function (t, e, n, r, s, a, o) {
        try {
          var c = i.parse(t, e);
          var l = true;
          if (e instanceof cc.Asset && (!e.__nativeDepend__ || e._nativeAsset)) {
            l = false;
          }
          if (s) {
            var h = 0;
            for (var u = c.deps.length; h < u; h++) {
              var f = c.deps[h];
              if (!(f in n)) {
                n[f] = true;
                r.push({
                  uuid: f,
                  bundle: o && o.name
                });
              }
            }
            if (l && c.nativeDep) {
              if (o) {
                c.nativeDep.bundle = o.name;
              }
              r.push(Object.assign({}, c.nativeDep));
            }
          } else {
            a = !!e.asyncLoadAssets || a && !c.preventDeferredLoadDependents;
            var d = 0;
            for (var _ = c.deps.length; d < _; d++) {
              var p = c.deps[d];
              if (!(p in n)) {
                n[p] = true;
                r.push({
                  uuid: p,
                  __asyncLoadAssets__: a,
                  bundle: o && o.name
                });
              }
            }
            if (l && !a && !c.preventPreloadNativeObject && c.nativeDep) {
              if (o) {
                c.nativeDep.bundle = o.name;
              }
              r.push(Object.assign({}, c.nativeDep));
            }
          }
        } catch (v) {}
      },
      cache: function (t, e, i) {
        if (e) {
          if (!r(e) && i) {
            a.add(t, e);
          }
        }
      },
      setProperties: function (t, e, i) {
        var n = false;
        var r = e.__depends__;
        if (r) {
          var s = 0;
          for (var a = r.length; s < a; s++) {
            var o = r[s];
            var c = i[o.uuid + "@import"];
            if (c) {
              o.owner[o.prop] = c.addRef();
            } else {
              n = true;
            }
          }
          e.__depends__ = undefined;
        }
        if (e.__nativeDepend__) {
          if (!e._nativeAsset) {
            if (i[t + "@native"]) {
              e._nativeAsset = i[t + "@native"];
            } else {
              n = true;
            }
          }
          e.__nativeDepend__ = undefined;
        }
        return n;
      },
      gatherAsset: function (t) {
        var e = t.source;
        if (t.options.__outputAsArray__ || 1 !== e.length) {
          var i = t.output = [];
          var n = 0;
          for (var r = e.length; n < r; n++) {
            i.push(e[n].content);
          }
        } else {
          t.output = e[0].content;
        }
      },
      forEach: function (t, e, i) {
        var n = 0;
        var r = [];
        if (0 === t.length && i) {
          i(r);
        }
        var s = 0;
        for (var a = t.length; s < a; s++) {
          e(t[s], function (t) {
            if (t) {
              r.push(t);
            }
            if (++n === a && i) {
              i(r);
            }
          });
        }
      },
      parseParameters: function (t, e, i) {
        if (undefined === i) {
          var n = "function" == typeof t;
          if (e) {
            i = e;
            if (!n) {
              e = null;
            }
          } else if (undefined === e && n) {
            i = t;
            t = null;
            e = null;
          }
          if (undefined !== e && n) {
            e = t;
            t = null;
          }
        }
        return {
          options: t = t || Object.create(null),
          onProgress: e,
          onComplete: i
        };
      },
      parseLoadResArgs: function (t, e, i) {
        if (undefined === i) {
          var n = cc.js.isChildClassOf(t, cc.Asset);
          if (e) {
            i = e;
            if (n) {
              e = null;
            }
          } else if (!(undefined !== e || n)) {
            i = t;
            e = null;
            t = null;
          }
          if (!(undefined === e || n)) {
            e = t;
            t = null;
          }
        }
        return {
          type: t,
          onProgress: e,
          onComplete: i
        };
      },
      checkCircleReference: function (t, e, n, r) {
        if (!r) {
          r = Object.create(null);
        }
        if (!n[e] || r[e]) {
          return false;
        }
        r[e] = true;
        var s = false;
        var a = i.getDeps(e);
        if (a) {
          var o = 0;
          for (var l = a.length; o < l; o++) {
            var h = a[o];
            if (h === t || c.checkCircleReference(t, h, n, r)) {
              s = true;
              break;
            }
          }
        }
        return s;
      },
      asyncify: function (t) {
        return function (e, i) {
          if (t) {
            var n = [];
            if (Array.isArray(i)) {
              i.forEach(function (t) {
                return t instanceof cc.Asset && n.push(t.addRef());
              });
            } else if (i instanceof cc.Asset) {
              n.push(i.addRef());
            }
            o(function () {
              n.forEach(function (t) {
                return t.decRef(false);
              });
              t(e, i);
            });
          }
        };
      }
    };
    e.exports = c;
  }, {
    "../assets/CCAsset": 57,
    "../platform/utils": 186,
    "./depend-util": 35,
    "./helper": 44,
    "./shared": 53
  }],
  57: [function (t, e) {
    "use strict";

    var i = t("../platform/CCObject");
    cc.Asset = cc.Class({
      name: "cc.Asset",
      extends: i,
      ctor: function () {
        Object.defineProperty(this, "_uuid", {
          value: "",
          writable: true
        });
        this.loaded = true;
        this._nativeUrl = "";
        this._ref = 0;
      },
      properties: {
        nativeUrl: {
          get: function () {
            if (!this._nativeUrl && this._native) {
              var t = this._native;
              if (47 === t.charCodeAt(0)) {
                return t.slice(1);
              }
              if (46 === t.charCodeAt(0)) {
                this._nativeUrl = cc.assetManager.utils.getUrlWithUuid(this._uuid, {
                  nativeExt: t,
                  isNative: true
                });
              } else {
                this._nativeUrl = cc.assetManager.utils.getUrlWithUuid(this._uuid, {
                  __nativeName__: t,
                  nativeExt: cc.path.extname(t),
                  isNative: true
                });
              }
            }
            return this._nativeUrl;
          },
          visible: false
        },
        refCount: {
          get: function () {
            return this._ref;
          }
        },
        _native: "",
        _nativeAsset: {
          get: function () {
            return this._$nativeAsset;
          },
          set: function (t) {
            this._$nativeAsset = t;
          }
        },
        _nativeDep: {
          get: function () {
            if (this._native) {
              return {
                __isNative__: true,
                uuid: this._uuid,
                ext: this._native
              };
            }
          }
        }
      },
      statics: {
        deserialize: false,
        preventDeferredLoadDependents: false,
        preventPreloadNativeObject: false
      },
      toString: function () {
        return this.nativeUrl;
      },
      serialize: false,
      createNode: null,
      _setRawAsset: function (t, e) {
        this._native = false !== e ? t || undefined : "/" + t;
      },
      addRef: function () {
        this._ref++;
        return this;
      },
      decRef: function (t) {
        if (this._ref > 0) {
          this._ref--;
        }
        if (false !== t) {
          cc.assetManager._releaseManager.tryRelease(this);
        }
        return this;
      },
      destroy: function () {
        this.loaded = false;
        return this._super();
      }
    });
    e.exports = cc.Asset;
  }, {
    "../platform/CCObject": 168
  }],
  58: [function (t, e) {
    "use strict";

    var i = t("./CCAsset");
    var n = t("../event/event-target");
    var r = cc.Enum({
      WEB_AUDIO: 0,
      DOM_AUDIO: 1
    });
    var s = cc.Class({
      name: "cc.AudioClip",
      extends: i,
      mixins: [n],
      ctor: function () {
        this._loading = false;
        this.loaded = false;
        this._audio = null;
      },
      properties: {
        duration: 0,
        loadMode: {
          default: r.WEB_AUDIO,
          type: r
        },
        _nativeAsset: {
          get: function () {
            return this._audio;
          },
          set: function (t) {
            if (t instanceof cc.AudioClip) {
              this._audio = t._nativeAsset;
            } else {
              this._audio = t;
            }
            if (this._audio) {
              this.loaded = true;
              this.emit("load");
            }
          },
          override: true
        },
        _nativeDep: {
          get: function () {
            return {
              uuid: this._uuid,
              audioLoadMode: this.loadMode,
              ext: cc.path.extname(this._native),
              __isNative__: true
            };
          },
          override: true
        }
      },
      statics: {
        LoadMode: r,
        _loadByUrl: null
      },
      _ensureLoaded: function (t) {
        if (this.isValid) {
          if (this.loaded) {
            return t && t();
          }
          if (t) {
            this.once("load", t);
          }
          if (!this._loading) {
            this._loading = true;
            var e = this;
            cc.assetManager.postLoadNative(this, function () {
              e._loading = false;
            });
          }
        }
      }
    });
    cc.AudioClip = s;
    e.exports = s;
  }, {
    "../event/event-target": 134,
    "./CCAsset": 57
  }],
  59: [function (t, e) {
    "use strict";

    var i = function () {
      this.u = 0;
      this.v = 0;
      this.w = 0;
      this.h = 0;
      this.offsetX = 0;
      this.offsetY = 0;
      this.textureID = 0;
      this.valid = false;
      this.xAdvance = 0;
    };
    var n = function (t) {
      this._letterDefinitions = {};
      this._texture = t;
    };
    n.prototype = {
      constructor: n,
      addLetterDefinitions: function (t, e) {
        this._letterDefinitions[t] = e;
      },
      cloneLetterDefinition: function () {
        var t = {};
        for (var e in this._letterDefinitions) {
          var n = new i();
          cc.js.mixin(n, this._letterDefinitions[e]);
          t[e] = n;
        }
        return t;
      },
      getTexture: function () {
        return this._texture;
      },
      getLetter: function (t) {
        return this._letterDefinitions[t];
      },
      getLetterDefinitionForChar: function (t) {
        var e = t.charCodeAt(0);
        return this._letterDefinitions.hasOwnProperty(e) ? this._letterDefinitions[e] : null;
      },
      clear: function () {
        this._letterDefinitions = {};
      }
    };
    var r = cc.Class({
      name: "cc.BitmapFont",
      extends: cc.Font,
      properties: {
        fntDataStr: {
          default: ""
        },
        spriteFrame: {
          default: null,
          type: cc.SpriteFrame
        },
        fontSize: {
          default: -1
        },
        _fntConfig: null,
        _fontDefDictionary: null
      },
      onLoad: function () {
        var t = this.spriteFrame;
        if (!this._fontDefDictionary) {
          this._fontDefDictionary = new n();
          if (t) {
            this._fontDefDictionary._texture = t._texture;
          }
        }
        var e = this._fntConfig;
        if (e) {
          var r = e.fontDefDictionary;
          for (var s in r) {
            var a = new i();
            var o = r[s].rect;
            a.offsetX = r[s].xOffset;
            a.offsetY = r[s].yOffset;
            a.w = o.width;
            a.h = o.height;
            a.u = o.x;
            a.v = o.y;
            a.textureID = 0;
            a.valid = true;
            a.xAdvance = r[s].xAdvance;
            this._fontDefDictionary.addLetterDefinitions(s, a);
          }
        }
      }
    });
    cc.BitmapFont = r;
    cc.BitmapFont.FontLetterDefinition = i;
    cc.BitmapFont.FontAtlas = n;
    e.exports = r;
  }, {}],
  60: [function (t, e) {
    "use strict";

    var i = cc.Class({
      name: "cc.BufferAsset",
      extends: cc.Asset,
      ctor: function () {
        this._buffer = null;
      },
      properties: {
        _nativeAsset: {
          get: function () {
            return this._buffer;
          },
          set: function (t) {
            this._buffer = t.buffer || t;
          },
          override: true
        },
        buffer: function () {
          return this._buffer;
        }
      }
    });
    cc.BufferAsset = e.exports = i;
  }, {}],
  61: [function (t, e) {
    "use strict";

    var i = cc.Class({
      name: "cc.Font",
      extends: cc.Asset
    });
    cc.Font = e.exports = i;
  }, {}],
  62: [function (t, e) {
    "use strict";

    var i = cc.Class({
      name: "cc.JsonAsset",
      extends: cc.Asset,
      properties: {
        json: null
      }
    });
    e.exports = cc.JsonAsset = i;
  }, {}],
  63: [function (t, e) {
    "use strict";

    var i = cc.Class({
      name: "cc.LabelAtlas",
      extends: cc.BitmapFont,
      onLoad: function () {
        if (this.spriteFrame && this._fntConfig) {
          this._super();
        }
      }
    });
    cc.LabelAtlas = i;
    e.exports = i;
  }, {}],
  64: [function (t, e) {
    "use strict";

    var i = cc.Enum({
      AUTO: 0,
      SINGLE_INSTANCE: 1,
      MULTI_INSTANCE: 2
    });
    var n = cc.Class({
      name: "cc.Prefab",
      extends: cc.Asset,
      ctor: function () {
        this._createFunction = null;
        this._instantiatedTimes = 0;
      },
      properties: {
        data: null,
        optimizationPolicy: i.AUTO,
        asyncLoadAssets: false,
        readonly: {
          default: false,
          editorOnly: true
        }
      },
      statics: {
        OptimizationPolicy: i,
        OptimizationPolicyThreshold: 3
      },
      createNode: false,
      compileCreateFunction: function () {
        var e = t("../platform/instantiate-jit");
        this._createFunction = e.compile(this.data);
      },
      _doInstantiate: function (t) {
        this.data._prefab;
        if (!this._createFunction) {
          this.compileCreateFunction();
        }
        return this._createFunction(t);
      },
      _instantiate: function () {
        var t;
        if (this.optimizationPolicy !== i.SINGLE_INSTANCE && (this.optimizationPolicy === i.MULTI_INSTANCE || this._instantiatedTimes + 1 >= n.OptimizationPolicyThreshold)) {
          t = this._doInstantiate();
          this.data._instantiate(t);
        } else {
          t = this.data._instantiate();
        }
        ++this._instantiatedTimes;
        return t;
      },
      destroy: function () {
        if (this.data) {
          this.data.destroy();
        }
        this._super();
      }
    });
    cc.Prefab = e.exports = n;
    cc.js.obsolete(cc, "cc._Prefab", "Prefab");
  }, {
    "../platform/instantiate-jit": 181
  }],
  65: [function (t, e) {
    "use strict";

    var i;
    var n = (i = t("../../renderer/gfx")) && i.__esModule ? i : {
      default: i
    };
    var r = t("../renderer");
    var s = t("./CCTexture2D");
    var a = cc.Enum({
      RB_FMT_D24S8: n.default.RB_FMT_D24S8,
      RB_FMT_S8: n.default.RB_FMT_S8,
      RB_FMT_D16: n.default.RB_FMT_D16
    });
    var o = cc.Class({
      name: "cc.RenderTexture",
      extends: s,
      statics: {
        DepthStencilFormat: a
      },
      ctor: function () {
        this._framebuffer = null;
      },
      initWithSize: function (t, e, i) {
        this.width = Math.floor(t || cc.visibleRect.width);
        this.height = Math.floor(e || cc.visibleRect.height);
        this._resetUnderlyingMipmaps();
        var s;
        var a = {
          colors: [this._texture]
        };
        if (this._depthStencilBuffer) {
          this._depthStencilBuffer.destroy();
        }
        if (i) {
          s = new n.default.RenderBuffer(r.device, i, t, e);
          if (i === n.default.RB_FMT_D24S8) {
            a.depthStencil = s;
          } else if (i === n.default.RB_FMT_S8) {
            a.stencil = s;
          } else if (i === n.default.RB_FMT_D16) {
            a.depth = s;
          }
        }
        this._depthStencilBuffer = s;
        if (this._framebuffer) {
          this._framebuffer.destroy();
        }
        this._framebuffer = new n.default.FrameBuffer(r.device, t, e, a);
        this._packable = false;
        this.loaded = true;
        this.emit("load");
      },
      updateSize: function (t, e) {
        this.width = Math.floor(t || cc.visibleRect.width);
        this.height = Math.floor(e || cc.visibleRect.height);
        this._resetUnderlyingMipmaps();
        var i = this._depthStencilBuffer;
        if (i) {
          i.update(this.width, this.height);
        }
        this._framebuffer._width = t;
        this._framebuffer._height = e;
      },
      drawTextureAt: function (t, e, i) {
        if (t._image && 0 !== t._image.width) {
          this._texture.updateSubImage({
            x: e,
            y: i,
            image: t._image,
            width: t.width,
            height: t.height,
            level: 0,
            flipY: false,
            premultiplyAlpha: t._premultiplyAlpha
          });
        }
      },
      readPixels: function (t, e, i, n, r) {
        if (!this._framebuffer || !this._texture) {
          return t;
        }
        e = e || 0;
        i = i || 0;
        var s = n || this.width;
        var a = r || this.height;
        t = t || new Uint8Array(s * a * 4);
        var o = cc.game._renderContext;
        var c = o.getParameter(o.FRAMEBUFFER_BINDING);
        o.bindFramebuffer(o.FRAMEBUFFER, this._framebuffer.getHandle());
        o.readPixels(e, i, s, a, o.RGBA, o.UNSIGNED_BYTE, t);
        o.bindFramebuffer(o.FRAMEBUFFER, c);
        return t;
      },
      destroy: function () {
        this._super();
        if (this._framebuffer) {
          this._framebuffer.destroy();
          this._framebuffer = null;
        }
      }
    });
    cc.RenderTexture = e.exports = o;
  }, {
    "../../renderer/gfx": 282,
    "../renderer": 193,
    "./CCTexture2D": 72
  }],
  66: [function (t, e) {
    "use strict";

    var i = cc.Class({
      name: "cc.SceneAsset",
      extends: cc.Asset,
      properties: {
        scene: null,
        asyncLoadAssets: undefined
      }
    });
    cc.SceneAsset = i;
    e.exports = i;
  }, {}],
  67: [function () {
    "use strict";

    var t = cc.Class({
      name: "cc.Script",
      extends: cc.Asset
    });
    cc._Script = t;
    var e = cc.Class({
      name: "cc.JavaScript",
      extends: t
    });
    cc._JavaScript = e;
    var i = cc.Class({
      name: "cc.TypeScript",
      extends: t
    });
    cc._TypeScript = i;
  }, {}],
  68: [function (t, e) {
    "use strict";

    var i = cc.Class({
      name: "cc.SpriteAtlas",
      extends: cc.Asset,
      properties: {
        _spriteFrames: {
          default: {}
        }
      },
      getTexture: function () {
        var t = Object.keys(this._spriteFrames);
        if (t.length > 0) {
          var e = this._spriteFrames[t[0]];
          return e ? e.getTexture() : null;
        }
        return null;
      },
      getSpriteFrame: function (t) {
        var e = this._spriteFrames[t];
        return e ? (e.name || (e.name = t), e) : null;
      },
      getSpriteFrames: function () {
        var t = [];
        var e = this._spriteFrames;
        for (var i in e) t.push(this.getSpriteFrame(i));
        return t;
      }
    });
    cc.SpriteAtlas = i;
    e.exports = i;
  }, {}],
  69: [function (t, e) {
    "use strict";

    var i = t("../event/event-target");
    var n = [{
      u: 0,
      v: 0
    }, {
      u: 0,
      v: 0
    }, {
      u: 0,
      v: 0
    }, {
      u: 0,
      v: 0
    }];
    var r = cc.Class({
      name: "cc.SpriteFrame",
      extends: t("../assets/CCAsset"),
      mixins: [i],
      properties: {
        _textureSetter: {
          set: function (t) {
            if (t && this._texture !== t) {
              this._refreshTexture(t);
            }
          }
        },
        insetTop: {
          get: function () {
            return this._capInsets[1];
          },
          set: function (t) {
            this._capInsets[1] = t;
            if (this._texture) {
              this._calculateSlicedUV();
            }
          }
        },
        insetBottom: {
          get: function () {
            return this._capInsets[3];
          },
          set: function (t) {
            this._capInsets[3] = t;
            if (this._texture) {
              this._calculateSlicedUV();
            }
          }
        },
        insetLeft: {
          get: function () {
            return this._capInsets[0];
          },
          set: function (t) {
            this._capInsets[0] = t;
            if (this._texture) {
              this._calculateSlicedUV();
            }
          }
        },
        insetRight: {
          get: function () {
            return this._capInsets[2];
          },
          set: function (t) {
            this._capInsets[2] = t;
            if (this._texture) {
              this._calculateSlicedUV();
            }
          }
        }
      },
      ctor: function () {
        i.call(this);
        var t = arguments[0];
        var e = arguments[1];
        var n = arguments[2];
        var r = arguments[3];
        var s = arguments[4];
        this._rect = null;
        this.uv = [];
        this._texture = null;
        this._original = null;
        this._offset = null;
        this._originalSize = null;
        this._rotated = false;
        this._flipX = false;
        this._flipY = false;
        this.vertices = null;
        this._capInsets = [0, 0, 0, 0];
        this.uvSliced = [];
        if (undefined !== t) {
          this.setTexture(t, e, n, r, s);
        }
      },
      textureLoaded: function () {
        return this._texture && this._texture.loaded;
      },
      onTextureLoaded: function (t, e) {
        return this.textureLoaded() ? (t.call(e), true) : (this.once("load", t, e), this.ensureLoadTexture(), false);
      },
      isRotated: function () {
        return this._rotated;
      },
      setRotated: function (t) {
        this._rotated = t;
        if (this._texture) {
          this._calculateUV();
        }
      },
      isFlipX: function () {
        return this._flipX;
      },
      isFlipY: function () {
        return this._flipY;
      },
      setFlipX: function (t) {
        this._flipX = t;
        if (this._texture) {
          this._calculateUV();
        }
      },
      setFlipY: function (t) {
        this._flipY = t;
        if (this._texture) {
          this._calculateUV();
        }
      },
      getRect: function () {
        return cc.rect(this._rect);
      },
      setRect: function (t) {
        this._rect = t;
        if (this._texture) {
          this._calculateUV();
        }
      },
      getOriginalSize: function () {
        return cc.size(this._originalSize);
      },
      setOriginalSize: function (t) {
        if (this._originalSize) {
          this._originalSize.width = t.width;
          this._originalSize.height = t.height;
        } else {
          this._originalSize = cc.size(t);
        }
      },
      getTexture: function () {
        return this._texture;
      },
      _textureLoadedCallback: function () {
        var t = this._texture;
        if (t) {
          var e = t.width;
          var i = t.height;
          if (this._rect) {
            this._checkRect(this._texture);
          } else {
            this._rect = cc.rect(0, 0, e, i);
          }
          if (!this._originalSize) {
            this._originalSize = cc.size(e, i);
          }
          if (!this._offset) {
            this._offset = cc.v2(0, 0);
          }
          this._calculateUV();
          this.emit("load");
        }
      },
      _refreshTexture: function (t) {
        this._texture = t;
        if (t.loaded) {
          this._textureLoadedCallback();
        } else {
          t.once("load", this._textureLoadedCallback, this);
        }
      },
      getOffset: function () {
        return cc.v2(this._offset);
      },
      setOffset: function (t) {
        this._offset = cc.v2(t);
      },
      clone: function () {
        return new r(this._texture, this.getRect(), this._rotated, this.getOffset(), this.getOriginalSize());
      },
      setTexture: function (t, e, i, n, r) {
        if ((1 !== arguments.length || t !== this._texture) && (this._rect = e || null, n ? this.setOffset(n) : this._offset = null, r ? this.setOriginalSize(r) : this._originalSize = null, this._rotated = i || false, "string" != typeof t)) {
          if (t instanceof cc.Texture2D) {
            this._refreshTexture(t);
          }
          return true;
        }
      },
      ensureLoadTexture: function () {
        if (this._texture) {
          if (!this._texture.loaded) {
            this._refreshTexture(this._texture);
            cc.assetManager.postLoadNative(this._texture);
          }
        }
      },
      _checkRect: function (t) {
        var e = this._rect;
        e.x;
        e.y;
        if (this._rotated) {
          e.height;
          e.width;
        } else {
          e.width;
          e.height;
        }
        t.width;
        t.height;
      },
      _flipXY: function (t) {
        if (this._flipX) {
          var e = t[0];
          t[0] = t[1];
          t[1] = e;
          e = t[2];
          t[2] = t[3];
          t[3] = e;
        }
        if (this._flipY) {
          var i = t[0];
          t[0] = t[2];
          t[2] = i;
          i = t[1];
          t[1] = t[3];
          t[3] = i;
        }
      },
      _calculateSlicedUV: function () {
        var t = this._rect;
        var e = this._texture.width;
        var i = this._texture.height;
        var r = this._capInsets[0];
        var s = this._capInsets[2];
        var a = t.width - r - s;
        var o = this._capInsets[1];
        var c = this._capInsets[3];
        var l = t.height - o - c;
        var h = this.uvSliced;
        h.length = 0;
        if (this._rotated) {
          n[0].u = t.x / e;
          n[1].u = (t.x + c) / e;
          n[2].u = (t.x + c + l) / e;
          n[3].u = (t.x + t.height) / e;
          n[3].v = t.y / i;
          n[2].v = (t.y + r) / i;
          n[1].v = (t.y + r + a) / i;
          n[0].v = (t.y + t.width) / i;
          this._flipXY(n);
          for (var u = 0; u < 4; ++u) {
            var f = n[u];
            for (var d = 0; d < 4; ++d) {
              var _ = n[3 - d];
              h.push({
                u: f.u,
                v: _.v
              });
            }
          }
        } else {
          n[0].u = t.x / e;
          n[1].u = (t.x + r) / e;
          n[2].u = (t.x + r + a) / e;
          n[3].u = (t.x + t.width) / e;
          n[3].v = t.y / i;
          n[2].v = (t.y + o) / i;
          n[1].v = (t.y + o + l) / i;
          n[0].v = (t.y + t.height) / i;
          this._flipXY(n);
          for (var p = 0; p < 4; ++p) {
            var v = n[p];
            for (var g = 0; g < 4; ++g) {
              var m = n[g];
              h.push({
                u: m.u,
                v: v.v
              });
            }
          }
        }
      },
      _setDynamicAtlasFrame: function (t) {
        if (t) {
          this._original = {
            _texture: this._texture,
            _x: this._rect.x,
            _y: this._rect.y
          };
          this._texture = t.texture;
          this._rect.x = t.x;
          this._rect.y = t.y;
          this._calculateUV();
        }
      },
      _resetDynamicAtlasFrame: function () {
        if (this._original) {
          this._rect.x = this._original._x;
          this._rect.y = this._original._y;
          this._texture = this._original._texture;
          this._original = null;
          if (this._texture.loaded) {
            this._calculateUV();
          } else {
            this.ensureLoadTexture();
          }
        }
      },
      _calculateUV: function () {
        var t = this._rect;
        var e = this._texture;
        var i = this.uv;
        var n = e.width;
        var r = e.height;
        if (this._rotated) {
          var s = 0 === n ? 0 : t.x / n;
          var a = 0 === n ? 0 : (t.x + t.height) / n;
          var o = 0 === r ? 0 : (t.y + t.width) / r;
          var c = 0 === r ? 0 : t.y / r;
          i[0] = s;
          i[1] = c;
          i[2] = s;
          i[3] = o;
          i[4] = a;
          i[5] = c;
          i[6] = a;
          i[7] = o;
        } else {
          var l = 0 === n ? 0 : t.x / n;
          var h = 0 === n ? 0 : (t.x + t.width) / n;
          var u = 0 === r ? 0 : (t.y + t.height) / r;
          var f = 0 === r ? 0 : t.y / r;
          i[0] = l;
          i[1] = u;
          i[2] = h;
          i[3] = u;
          i[4] = l;
          i[5] = f;
          i[6] = h;
          i[7] = f;
        }
        if (this._flipX) {
          var d = i[0];
          i[0] = i[2];
          i[2] = d;
          d = i[1];
          i[1] = i[3];
          i[3] = d;
          d = i[4];
          i[4] = i[6];
          i[6] = d;
          d = i[5];
          i[5] = i[7];
          i[7] = d;
        }
        if (this._flipY) {
          var _ = i[0];
          i[0] = i[4];
          i[4] = _;
          _ = i[1];
          i[1] = i[5];
          i[5] = _;
          _ = i[2];
          i[2] = i[6];
          i[6] = _;
          _ = i[3];
          i[3] = i[7];
          i[7] = _;
        }
        var p = this.vertices;
        if (p) {
          p.nu.length = 0;
          p.nv.length = 0;
          for (var v = 0; v < p.u.length; v++) {
            p.nu[v] = p.u[v] / n;
            p.nv[v] = p.v[v] / r;
          }
        }
        this._calculateSlicedUV();
      },
      _serialize: false,
      _deserialize: function (t) {
        var e = t.rect;
        if (e) {
          this._rect = new cc.Rect(e[0], e[1], e[2], e[3]);
        }
        if (t.offset) {
          this.setOffset(new cc.Vec2(t.offset[0], t.offset[1]));
        }
        if (t.originalSize) {
          this.setOriginalSize(new cc.Size(t.originalSize[0], t.originalSize[1]));
        }
        this._rotated = 1 === t.rotated;
        this._name = t.name;
        var i = t.capInsets;
        if (i) {
          this._capInsets[0] = i[0];
          this._capInsets[1] = i[1];
          this._capInsets[2] = i[2];
          this._capInsets[3] = i[3];
        }
        this.vertices = t.vertices;
        if (this.vertices) {
          this.vertices.nu = [];
          this.vertices.nv = [];
        }
      }
    });
    var s = r.prototype;
    s.copyWithZone = s.clone;
    s.copy = s.clone;
    s.initWithTexture = s.setTexture;
    cc.SpriteFrame = r;
    e.exports = r;
  }, {
    "../assets/CCAsset": 57,
    "../event/event-target": 134
  }],
  70: [function (t, e) {
    "use strict";

    var i = t("./CCFont");
    var n = cc.Class({
      name: "cc.TTFFont",
      extends: i,
      properties: {
        _fontFamily: null,
        _nativeAsset: {
          type: cc.String,
          get: function () {
            return this._fontFamily;
          },
          set: function (t) {
            this._fontFamily = t || "Arial";
          },
          override: true
        },
        _nativeDep: {
          get: function () {
            return {
              uuid: this._uuid,
              __nativeName__: this._native,
              ext: cc.path.extname(this._native),
              __isNative__: true
            };
          },
          override: true
        }
      }
    });
    cc.TTFFont = e.exports = n;
  }, {
    "./CCFont": 61
  }],
  71: [function (t, e) {
    "use strict";

    var i = cc.Class({
      name: "cc.TextAsset",
      extends: cc.Asset,
      properties: {
        text: ""
      },
      toString: function () {
        return this.text;
      }
    });
    e.exports = cc.TextAsset = i;
  }, {}],
  72: [function (t, e) {
    "use strict";

    var i;
    var n = (i = t("../../renderer/gfx")) && i.__esModule ? i : {
      default: i
    };
    var r = t("../event/event-target");
    var s = t("../renderer");
    t("../platform/CCClass");
    var a = new (t("../platform/id-generater"))("Tex");
    var o = 1024;
    var c = cc.Enum({
      RGB565: n.default.TEXTURE_FMT_R5_G6_B5,
      RGB5A1: n.default.TEXTURE_FMT_R5_G5_B5_A1,
      RGBA4444: n.default.TEXTURE_FMT_R4_G4_B4_A4,
      RGB888: n.default.TEXTURE_FMT_RGB8,
      RGBA8888: n.default.TEXTURE_FMT_RGBA8,
      RGBA32F: n.default.TEXTURE_FMT_RGBA32F,
      A8: n.default.TEXTURE_FMT_A8,
      I8: n.default.TEXTURE_FMT_L8,
      AI8: n.default.TEXTURE_FMT_L8_A8,
      RGB_PVRTC_2BPPV1: n.default.TEXTURE_FMT_RGB_PVRTC_2BPPV1,
      RGBA_PVRTC_2BPPV1: n.default.TEXTURE_FMT_RGBA_PVRTC_2BPPV1,
      RGB_A_PVRTC_2BPPV1: o++,
      RGB_PVRTC_4BPPV1: n.default.TEXTURE_FMT_RGB_PVRTC_4BPPV1,
      RGBA_PVRTC_4BPPV1: n.default.TEXTURE_FMT_RGBA_PVRTC_4BPPV1,
      RGB_A_PVRTC_4BPPV1: o++,
      RGB_ETC1: n.default.TEXTURE_FMT_RGB_ETC1,
      RGBA_ETC1: o++,
      RGB_ETC2: n.default.TEXTURE_FMT_RGB_ETC2,
      RGBA_ETC2: n.default.TEXTURE_FMT_RGBA_ETC2,
      RGBA_ASTC_4x4: n.default.TEXTURE_FMT_RGBA_ASTC_4X4,
      RGBA_ASTC_5x4: n.default.TEXTURE_FMT_RGBA_ASTC_5X4,
      RGBA_ASTC_5x5: n.default.TEXTURE_FMT_RGBA_ASTC_5X5,
      RGBA_ASTC_6x5: n.default.TEXTURE_FMT_RGBA_ASTC_6X5,
      RGBA_ASTC_6x6: n.default.TEXTURE_FMT_RGBA_ASTC_6X6,
      RGBA_ASTC_8x5: n.default.TEXTURE_FMT_RGBA_ASTC_8X5,
      RGBA_ASTC_8x6: n.default.TEXTURE_FMT_RGBA_ASTC_8X6,
      RGBA_ASTC_8x8: n.default.TEXTURE_FMT_RGBA_ASTC_8X8,
      RGBA_ASTC_10x5: n.default.TEXTURE_FMT_RGBA_ASTC_10X5,
      RGBA_ASTC_10x6: n.default.TEXTURE_FMT_RGBA_ASTC_10X6,
      RGBA_ASTC_10x8: n.default.TEXTURE_FMT_RGBA_ASTC_10X8,
      RGBA_ASTC_10x10: n.default.TEXTURE_FMT_RGBA_ASTC_10X10,
      RGBA_ASTC_12x10: n.default.TEXTURE_FMT_RGBA_ASTC_12X10,
      RGBA_ASTC_12x12: n.default.TEXTURE_FMT_RGBA_ASTC_12X12
    });
    var l = cc.Enum({
      REPEAT: 10497,
      CLAMP_TO_EDGE: 33071,
      MIRRORED_REPEAT: 33648
    });
    var h = cc.Enum({
      LINEAR: 9729,
      NEAREST: 9728
    });
    var u = {
      9728: 0,
      9729: 1
    };
    var f = [];
    var d = {
      width: undefined,
      height: undefined,
      minFilter: undefined,
      magFilter: undefined,
      wrapS: undefined,
      wrapT: undefined,
      format: undefined,
      genMipmaps: undefined,
      images: undefined,
      image: undefined,
      flipY: undefined,
      premultiplyAlpha: undefined
    };
    function _() {
      for (var t in d) d[t] = undefined;
      f.length = 0;
      d.images = f;
      return d;
    }
    var p = cc.Class({
      name: "cc.Texture2D",
      extends: t("../assets/CCAsset"),
      mixins: [r],
      properties: {
        _nativeAsset: {
          get: function () {
            return this._image;
          },
          set: function (t) {
            if (t._compressed && t._data) {
              this.initWithData(t._data, this._format, t.width, t.height);
            } else {
              this.initWithElement(t);
            }
          },
          override: true
        },
        _format: c.RGBA8888,
        _premultiplyAlpha: false,
        _flipY: false,
        _minFilter: h.LINEAR,
        _magFilter: h.LINEAR,
        _mipFilter: h.LINEAR,
        _wrapS: l.CLAMP_TO_EDGE,
        _wrapT: l.CLAMP_TO_EDGE,
        _isAlphaAtlas: false,
        _genMipmaps: false,
        genMipmaps: {
          get: function () {
            return this._genMipmaps;
          },
          set: function (t) {
            if (this._genMipmaps !== t) {
              var e = _();
              e.genMipmaps = t;
              this.update(e);
            }
          }
        },
        _packable: true,
        packable: {
          get: function () {
            return this._packable;
          },
          set: function (t) {
            this._packable = t;
          }
        },
        _nativeDep: {
          get: function () {
            return {
              __isNative__: true,
              uuid: this._uuid,
              ext: this._native,
              __flipY__: this._flipY,
              __premultiplyAlpha__: this._premultiplyAlpha
            };
          },
          override: true
        }
      },
      statics: {
        PixelFormat: c,
        WrapMode: l,
        Filter: h,
        _FilterIndex: u,
        extnames: [".png", ".jpg", ".jpeg", ".bmp", ".webp", ".pvr", ".pkm", ".astc"],
        _parseExt: function (t, e) {
          var i = cc.renderer.device;
          var n = t.split("_");
          var r = "";
          var s = "";
          var a = 999;
          var o = e;
          var l = cc.macro.SUPPORT_TEXTURE_FORMATS;
          for (var h = 0; h < n.length; h++) {
            var u = n[h].split("@");
            var f = u[0];
            f = p.extnames[f.charCodeAt(0) - 48] || f;
            var d = l.indexOf(f);
            if (-1 !== d && d < a) {
              var _ = u[1] ? parseInt(u[1]) : e;
              if (".astc" === f && !i.ext("WEBGL_compressed_texture_astc")) {
                continue;
              }
              if (".pvr" === f && !i.ext("WEBGL_compressed_texture_pvrtc")) {
                continue;
              }
              if (!(_ !== c.RGB_ETC1 && _ !== c.RGBA_ETC1 || i.ext("WEBGL_compressed_texture_etc1"))) {
                continue;
              }
              if (!(_ !== c.RGB_ETC2 && _ !== c.RGBA_ETC2 || i.ext("WEBGL_compressed_texture_etc"))) {
                continue;
              }
              if (".webp" === f && !cc.sys.capabilities.webp) {
                continue;
              }
              a = d;
              s = f;
              o = _;
            } else if (!r) {
              r = f;
            }
          }
          return {
            bestExt: s,
            bestFormat: o,
            defaultExt: r
          };
        }
      },
      ctor: function () {
        this._id = a.getNewId();
        this.loaded = false;
        this.width = 0;
        this.height = 0;
        this._hashDirty = true;
        this._hash = 0;
        this._texture = null;
      },
      getImpl: function () {
        if (!this._texture) {
          this._texture = new s.Texture2D(s.device, {});
        }
        return this._texture;
      },
      getId: function () {
        return this._id;
      },
      toString: function () {
        return this.nativeUrl || "";
      },
      update: function (t) {
        if (t) {
          var e = false;
          if (undefined !== t.width) {
            this.width = t.width;
          }
          if (undefined !== t.height) {
            this.height = t.height;
          }
          if (undefined !== t.minFilter) {
            this._minFilter = t.minFilter;
            t.minFilter = u[t.minFilter];
          }
          if (undefined !== t.magFilter) {
            this._magFilter = t.magFilter;
            t.magFilter = u[t.magFilter];
          }
          if (undefined !== t.mipFilter) {
            this._mipFilter = t.mipFilter;
            t.mipFilter = u[t.mipFilter];
          }
          if (undefined !== t.wrapS) {
            this._wrapS = t.wrapS;
          }
          if (undefined !== t.wrapT) {
            this._wrapT = t.wrapT;
          }
          if (undefined !== t.format) {
            this._format = t.format;
          }
          if (undefined !== t.flipY) {
            this._flipY = t.flipY;
            e = true;
          }
          if (undefined !== t.premultiplyAlpha) {
            this._premultiplyAlpha = t.premultiplyAlpha;
            e = true;
          }
          if (undefined !== t.genMipmaps) {
            this._genMipmaps = t.genMipmaps;
          }
          if (cc.sys.capabilities.imageBitmap && this._image instanceof ImageBitmap) {
            this._checkImageBitmap(this._upload.bind(this, t, e));
          } else {
            this._upload(t, e);
          }
        }
      },
      _upload: function (t, e) {
        if (e && this._image) {
          t.image = this._image;
        }
        if (t.images && t.images.length > 0) {
          this._image = t.images[0];
        } else if (undefined !== t.image) {
          this._image = t.image;
          if (!t.images) {
            f.length = 0;
            t.images = f;
          }
          t.images.push(t.image);
        }
        if (this._texture) {
          this._texture.update(t);
        }
        this._hashDirty = true;
      },
      initWithElement: function (t) {
        if (t) {
          this._image = t;
          if (t.complete || t instanceof HTMLCanvasElement) {
            this.handleLoadedTexture();
          } else if (cc.sys.capabilities.imageBitmap && t instanceof ImageBitmap) {
            this._checkImageBitmap(this.handleLoadedTexture.bind(this));
          } else {
            var e = this;
            t.addEventListener("load", function () {
              e.handleLoadedTexture();
            });
            t.addEventListener("error", function () {});
          }
        }
      },
      initWithData: function (t, e, i, n) {
        var r = _();
        r.image = t;
        r.images = [r.image];
        r.genMipmaps = this._genMipmaps;
        r.premultiplyAlpha = this._premultiplyAlpha;
        r.flipY = this._flipY;
        r.minFilter = u[this._minFilter];
        r.magFilter = u[this._magFilter];
        r.wrapS = this._wrapS;
        r.wrapT = this._wrapT;
        r.format = this._getGFXPixelFormat(e);
        r.width = i;
        r.height = n;
        if (this._texture) {
          this._texture.update(r);
        } else {
          this._texture = new s.Texture2D(s.device, r);
        }
        this.width = i;
        this.height = n;
        this._updateFormat();
        this._checkPackable();
        this.loaded = true;
        this.emit("load");
        return true;
      },
      getHtmlElementObj: function () {
        return this._image;
      },
      destroy: function () {
        if (cc.sys.capabilities.imageBitmap && this._image instanceof ImageBitmap && this._image.close) {
          this._image.close();
        }
        if (this._packable && cc.dynamicAtlasManager) {
          cc.dynamicAtlasManager.deleteAtlasTexture(this);
        }
        this._image = null;
        if (this._texture) {
          this._texture.destroy();
        }
        this._super();
      },
      getPixelFormat: function () {
        return this._format;
      },
      hasPremultipliedAlpha: function () {
        return this._premultiplyAlpha || false;
      },
      isAlphaAtlas: function () {
        return this._isAlphaAtlas;
      },
      handleLoadedTexture: function () {
        if (this._image && this._image.width && this._image.height) {
          this.width = this._image.width;
          this.height = this._image.height;
          var t = _();
          t.image = this._image;
          t.images = [t.image];
          t.width = this.width;
          t.height = this.height;
          t.genMipmaps = this._genMipmaps;
          t.format = this._getGFXPixelFormat(this._format);
          t.premultiplyAlpha = this._premultiplyAlpha;
          t.flipY = this._flipY;
          t.minFilter = u[this._minFilter];
          t.magFilter = u[this._magFilter];
          t.wrapS = this._wrapS;
          t.wrapT = this._wrapT;
          if (this._texture) {
            this._texture.update(t);
          } else {
            this._texture = new s.Texture2D(s.device, t);
          }
          this._updateFormat();
          this._checkPackable();
          this.loaded = true;
          this.emit("load");
          if (cc.macro.CLEANUP_IMAGE_CACHE) {
            this._cleanupImageCache();
          }
        }
      },
      _cleanupImageCache: function () {
        if (this._image instanceof HTMLImageElement) {
          this._clearImage();
        } else if (cc.sys.capabilities.imageBitmap && this._image instanceof ImageBitmap && this._image.close) {
          this._image.close();
        }
      },
      description: function () {
        return "<cc.Texture2D | Name = " + this.nativeUrl + " | Dimensions = " + this.width + " x " + this.height + ">";
      },
      releaseTexture: function () {
        this._image = null;
        if (this._texture) {
          this._texture.destroy();
        }
      },
      setWrapMode: function (t, e) {
        if (this._wrapS !== t || this._wrapT !== e) {
          var i = _();
          i.wrapS = t;
          i.wrapT = e;
          this.update(i);
        }
      },
      setFilters: function (t, e) {
        if (this._minFilter !== t || this._magFilter !== e) {
          var i = _();
          i.minFilter = t;
          i.magFilter = e;
          this.update(i);
        }
      },
      setFlipY: function (t) {
        if (this._flipY !== t) {
          var e = _();
          e.flipY = t;
          e.premultiplyAlpha = this._premultiplyAlpha;
          this.update(e);
        }
      },
      setPremultiplyAlpha: function (t) {
        if (this._premultiplyAlpha !== t) {
          var e = _();
          e.flipY = this._flipY;
          e.premultiplyAlpha = t;
          this.update(e);
        }
      },
      _updateFormat: function () {
        this._isAlphaAtlas = this._format === c.RGBA_ETC1 || this._format === c.RGB_A_PVRTC_4BPPV1 || this._format === c.RGB_A_PVRTC_2BPPV1;
      },
      _checkPackable: function () {
        var t = cc.dynamicAtlasManager;
        if (t) {
          if (this._isCompressed()) {
            this._packable = false;
          } else {
            var e = this.width;
            var i = this.height;
            if (!this._image || e > t.maxFrameSize || i > t.maxFrameSize || this._getHash() !== t.Atlas.DEFAULT_HASH) {
              this._packable = false;
            } else if (this._image && this._image instanceof HTMLCanvasElement) {
              this._packable = true;
            }
          }
        }
      },
      _getOpts: function () {
        var t = _();
        t.width = this.width;
        t.height = this.height;
        t.genMipmaps = this._genMipmaps;
        t.format = this._format;
        t.premultiplyAlpha = this._premultiplyAlpha;
        t.anisotropy = this._anisotropy;
        t.flipY = this._flipY;
        t.minFilter = u[this._minFilter];
        t.magFilter = u[this._magFilter];
        t.mipFilter = u[this._mipFilter];
        t.wrapS = this._wrapS;
        t.wrapT = this._wrapT;
        return t;
      },
      _getGFXPixelFormat: function (t) {
        if (t === c.RGBA_ETC1) {
          t = c.RGB_ETC1;
        } else if (t === c.RGB_A_PVRTC_4BPPV1) {
          t = c.RGB_PVRTC_4BPPV1;
        } else if (t === c.RGB_A_PVRTC_2BPPV1) {
          t = c.RGB_PVRTC_2BPPV1;
        }
        return t;
      },
      _resetUnderlyingMipmaps: function (t) {
        var e = this._getOpts();
        e.images = t || [null];
        if (this._texture) {
          this._texture.update(e);
        } else {
          this._texture = new s.Texture2D(s.device, e);
        }
      },
      _serialize: false,
      _deserialize: function (t) {
        var e = t.split(",");
        var i = e[0];
        if (i) {
          var n = p._parseExt(i, this._format);
          if (n.bestExt) {
            this._setRawAsset(n.bestExt);
            this._format = n.bestFormat;
          } else {
            if (!n.defaultExt) {
              throw Error(cc.debug.getError(3121));
            }
            this._setRawAsset(n.defaultExt);
          }
        }
        if (8 === e.length) {
          this._minFilter = parseInt(e[1]);
          this._magFilter = parseInt(e[2]);
          this._wrapS = parseInt(e[3]);
          this._wrapT = parseInt(e[4]);
          this._premultiplyAlpha = 49 === e[5].charCodeAt(0);
          this._genMipmaps = 49 === e[6].charCodeAt(0);
          this._packable = 49 === e[7].charCodeAt(0);
        }
      },
      _getHash: function () {
        if (!this._hashDirty) {
          return this._hash;
        }
        var t = this._genMipmaps ? 1 : 0;
        var e = this._premultiplyAlpha ? 1 : 0;
        var i = this._flipY ? 1 : 0;
        var n = this._minFilter === h.LINEAR ? 1 : 2;
        var r = this._magFilter === h.LINEAR ? 1 : 2;
        var s = this._wrapS === l.REPEAT ? 1 : this._wrapS === l.CLAMP_TO_EDGE ? 2 : 3;
        var a = this._wrapT === l.REPEAT ? 1 : this._wrapT === l.CLAMP_TO_EDGE ? 2 : 3;
        var o = this._format;
        this._image;
        this._hash = +("" + n + r + o + s + a + t + e + i);
        this._hashDirty = false;
        return this._hash;
      },
      _isCompressed: function () {
        return this._format < c.A8 || this._format > c.RGBA32F;
      },
      _clearImage: function () {
        this._image.src = "";
      },
      _checkImageBitmap: function (t) {
        var e = this;
        var i = this._image;
        var n = this._flipY;
        var r = this._premultiplyAlpha;
        if (this._flipY !== i.flipY || this._premultiplyAlpha !== i.premultiplyAlpha) {
          createImageBitmap(i, {
            imageOrientation: n !== i.flipY ? "flipY" : "none",
            premultiplyAlpha: r ? "premultiply" : "none"
          }).then(function (s) {
            if (i.close) {
              i.close();
            }
            s.flipY = n;
            s.premultiplyAlpha = r;
            e._image = s;
            t();
          }, function () {});
        } else {
          t();
        }
      }
    });
    cc.Texture2D = e.exports = p;
  }, {
    "../../renderer/gfx": 282,
    "../assets/CCAsset": 57,
    "../event/event-target": 134,
    "../platform/CCClass": 162,
    "../platform/id-generater": 179,
    "../renderer": 193
  }],
  73: [function (t, e) {
    "use strict";

    var i = t("./CCAsset");
    var n = t("../event/event-target");
    var r = cc.Class({
      name: "cc.VideoClip",
      extends: i,
      mixins: [n]
    });
    cc.VideoClip = r;
    e.exports = r;
  }, {
    "../event/event-target": 134,
    "./CCAsset": 57
  }],
  74: [function (t) {
    "use strict";

    t("./CCAsset");
    t("./CCFont");
    t("./CCPrefab");
    t("./CCAudioClip");
    t("./CCVideoClip");
    t("./CCScripts");
    t("./CCSceneAsset");
    t("./CCSpriteFrame");
    t("./CCTexture2D");
    t("./CCRenderTexture");
    t("./CCTTFFont");
    t("./CCSpriteAtlas");
    t("./CCBitmapFont");
    t("./CCLabelAtlas");
    t("./CCTextAsset");
    t("./CCJsonAsset");
    t("./CCBufferAsset");
    t("./material");
  }, {
    "./CCAsset": 57,
    "./CCAudioClip": 58,
    "./CCBitmapFont": 59,
    "./CCBufferAsset": 60,
    "./CCFont": 61,
    "./CCJsonAsset": 62,
    "./CCLabelAtlas": 63,
    "./CCPrefab": 64,
    "./CCRenderTexture": 65,
    "./CCSceneAsset": 66,
    "./CCScripts": 67,
    "./CCSpriteAtlas": 68,
    "./CCSpriteFrame": 69,
    "./CCTTFFont": 70,
    "./CCTextAsset": 71,
    "./CCTexture2D": 72,
    "./CCVideoClip": 73,
    "./material": 81
  }],
  75: [function (t, e) {
    "use strict";

    var i;
    var n = (i = t("../CCAsset")) && i.__esModule ? i : {
      default: i
    };
    var r = t("./effect-parser");
    var s = cc.Class({
      name: "cc.EffectAsset",
      extends: n.default,
      ctor: function () {
        this._effect = null;
      },
      properties: {
        properties: Object,
        techniques: [],
        shaders: []
      },
      onLoad: function () {
        if (cc.game.renderType !== cc.game.RENDER_TYPE_CANVAS) {
          var t = cc.renderer._forward._programLib;
          for (var e = 0; e < this.shaders.length; e++) {
            t.define(this.shaders[e]);
          }
          this._initEffect();
        }
      },
      _initEffect: function () {
        if (!this._effect) {
          0;
          this._effect = r.parseEffect(this);
          Object.freeze(this._effect);
        }
      },
      getInstantiatedEffect: function () {
        this._initEffect();
        return this._effect.clone();
      },
      getEffect: function () {
        this._initEffect();
        return this._effect;
      }
    });
    e.exports = cc.EffectAsset = s;
  }, {
    "../CCAsset": 57,
    "./effect-parser": 78
  }],
  76: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n = t("../CCAsset");
    var r = t("../CCTexture2D");
    r.PixelFormat;
    var s = t("./CCEffectAsset");
    t("../../utils/texture-util");
    var a = cc.gfx;
    var o = cc.Enum({
      SPRITE: "2d-sprite",
      GRAY_SPRITE: "2d-gray-sprite",
      UNLIT: "unlit"
    });
    var c = cc.Class({
      name: "cc.Material",
      extends: n,
      ctor: function () {
        this.loaded = false;
        this._manualHash = false;
        this._dirty = true;
        this._effect = null;
      },
      properties: {
        _defines: {
          default: undefined,
          type: Object
        },
        _props: {
          default: undefined,
          type: Object
        },
        _effectAsset: {
          type: s,
          default: null
        },
        _techniqueIndex: 0,
        _techniqueData: Object,
        effectName: undefined,
        effectAsset: {
          get: function () {
            return this._effectAsset;
          },
          set: function (t) {
            if (cc.game.renderType !== cc.game.RENDER_TYPE_CANVAS) {
              this._effectAsset = t;
              if (t) {
                this._effect = this._effectAsset.getInstantiatedEffect();
              }
            }
          }
        },
        effect: {
          get: function () {
            return this._effect;
          }
        },
        techniqueIndex: {
          get: function () {
            return this._techniqueIndex;
          },
          set: function (t) {
            this._techniqueIndex = t;
            this._effect.switchTechnique(t);
          }
        }
      },
      statics: {
        getBuiltinMaterial: function (t) {
          return cc.game.renderType === cc.game.RENDER_TYPE_CANVAS ? new cc.Material() : cc.assetManager.builtins.getBuiltin("material", "builtin-" + t);
        },
        BUILTIN_NAME: o,
        createWithBuiltin: function (t, e) {
          if (undefined === e) {
            e = 0;
          }
          var i = cc.assetManager.builtins.getBuiltin("effect", "builtin-" + t);
          return c.create(i, e);
        },
        create: function (t, e) {
          if (undefined === e) {
            e = 0;
          }
          if (!t) {
            return null;
          }
          var i = new c();
          i.effectAsset = t;
          i.techniqueIndex = e;
          return i;
        }
      },
      setProperty: function (t, e, i, n) {
        if (cc.game.renderType !== cc.game.RENDER_TYPE_CANVAS) {
          if ("string" == typeof i) {
            i = parseInt(i);
          }
          if (e instanceof r) {
            var s = e.isAlphaAtlas();
            var a = "CC_USE_ALPHA_ATLAS_" + t;
            var o = this.getDefine(a, i);
            if (s || o) {
              this.define(a, s);
            }
            if (!e.loaded) {
              cc.assetManager.postLoadNative(e);
            }
          }
          this._effect.setProperty(t, e, i, n);
        }
      },
      getProperty: function (t, e) {
        if ("string" == typeof e) {
          e = parseInt(e);
        }
        return this._effect.getProperty(t, e);
      },
      define: function (t, e, i, n) {
        if (cc.game.renderType !== cc.game.RENDER_TYPE_CANVAS) {
          if ("string" == typeof i) {
            i = parseInt(i);
          }
          this._effect.define(t, e, i, n);
        }
      },
      getDefine: function (t, e) {
        if ("string" == typeof e) {
          e = parseInt(e);
        }
        return this._effect.getDefine(t, e);
      },
      setCullMode: function (t, e) {
        if (undefined === t) {
          t = a.CULL_BACK;
        }
        this._effect.setCullMode(t, e);
      },
      setDepth: function (t, e, i, n) {
        if (undefined === t) {
          t = false;
        }
        if (undefined === e) {
          e = false;
        }
        if (undefined === i) {
          i = a.DS_FUNC_LESS;
        }
        this._effect.setDepth(t, e, i, n);
      },
      setBlend: function (t, e, i, n, r, s, o, c, l) {
        if (undefined === t) {
          t = false;
        }
        if (undefined === e) {
          e = a.BLEND_FUNC_ADD;
        }
        if (undefined === i) {
          i = a.BLEND_SRC_ALPHA;
        }
        if (undefined === n) {
          n = a.BLEND_ONE_MINUS_SRC_ALPHA;
        }
        if (undefined === r) {
          r = a.BLEND_FUNC_ADD;
        }
        if (undefined === s) {
          s = a.BLEND_SRC_ALPHA;
        }
        if (undefined === o) {
          o = a.BLEND_ONE_MINUS_SRC_ALPHA;
        }
        if (undefined === c) {
          c = 4294967295;
        }
        this._effect.setBlend(t, e, i, n, r, s, o, c, l);
      },
      setStencilEnabled: function (t, e) {
        if (undefined === t) {
          t = a.STENCIL_INHERIT;
        }
        this._effect.setStencilEnabled(t, e);
      },
      setStencil: function (t, e, i, n, r, s, o, c, l) {
        if (undefined === t) {
          t = a.STENCIL_INHERIT;
        }
        if (undefined === e) {
          e = a.DS_FUNC_ALWAYS;
        }
        if (undefined === i) {
          i = 0;
        }
        if (undefined === n) {
          n = 255;
        }
        if (undefined === r) {
          r = a.STENCIL_OP_KEEP;
        }
        if (undefined === s) {
          s = a.STENCIL_OP_KEEP;
        }
        if (undefined === o) {
          o = a.STENCIL_OP_KEEP;
        }
        if (undefined === c) {
          c = 255;
        }
        this._effect.setStencil(t, e, i, n, r, s, o, c, l);
      },
      updateHash: function (t) {
        this._manualHash = t;
        if (this._effect) {
          this._effect.updateHash(t);
        }
      },
      getHash: function () {
        return this._manualHash || this._effect && this._effect.getHash();
      },
      onLoad: function () {
        this.effectAsset = this._effectAsset;
        if (this._effect) {
          if (this._techniqueIndex) {
            this._effect.switchTechnique(this._techniqueIndex);
          }
          this._techniqueData = this._techniqueData || {};
          var t = this._techniqueData;
          for (var e in t) {
            var i = t[e = parseInt(e)];
            if (i) {
              for (var n in i.defines) this.define(n, i.defines[n], e);
              for (var r in i.props) this.setProperty(r, i.props[r], e);
            }
          }
        }
      }
    });
    i.default = c;
    cc.Material = c;
    e.exports = i.default;
  }, {
    "../../utils/texture-util": 244,
    "../CCAsset": 57,
    "../CCTexture2D": 72,
    "./CCEffectAsset": 75
  }],
  77: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n = t("../../../renderer/core/pass") && t("../../../renderer/core/pass").__esModule ? t("../../../renderer/core/pass") : {
      default: t("../../../renderer/core/pass")
    };
    var r = t("../../../renderer/enums") && t("../../../renderer/enums").__esModule ? t("../../../renderer/enums") : {
      default: t("../../../renderer/enums")
    };
    function a(t, e) {
      for (var i = 0; i < e.length; i++) {
        var n = e[i];
        n.enumerable = n.enumerable || false;
        n.configurable = true;
        if ("value" in n) {
          n.writable = true;
        }
        Object.defineProperty(t, n.key, n);
      }
    }
    var o = cc.gfx;
    var c = function () {
      function t() {
        this._dirty = true;
        this._name = "";
        this._technique = null;
      }
      var i;
      var s = t.prototype;
      s._createPassProp = function (t, e) {
        var i = e._properties[t];
        if (i) {
          var n = Object.create(null);
          n.name = t;
          n.type = i.type;
          if (i.value instanceof Float32Array) {
            n.value = new Float32Array(i.value);
          } else if (i.value instanceof Float64Array) {
            n.value = new Float64Array(i.value);
          } else {
            n.value = i.value;
          }
          e._properties[t] = n;
          return n;
        }
      };
      s._setPassProperty = function (t, e, i, s) {
        var a = i._properties;
        if (!a.hasOwnProperty(t)) {
          this._createPassProp(t, i);
        }
        var o = a[t];
        var c = e;
        if (o.type === r.default.PARAM_TEXTURE_2D) {
          c = e && e.getImpl();
        }
        return o.value === c || (this._dirty = true, n.default.prototype.setProperty.call(i, t, e, s));
      };
      s.setProperty = function (t, e, i, n) {
        var r = this.passes;
        var s = 0;
        var a = r.length;
        if (undefined !== i) {
          s = i;
          a = i + 1;
        }
        for (var o = s; o < a; o++) {
          this._setPassProperty(t, e, r[o], n);
        }
      };
      s.getProperty = function (t, e) {
        var i = this.passes;
        if (!(e >= i.length)) {
          var n = 0;
          var r = i.length;
          if (undefined !== e) {
            n = e;
            r = e + 1;
          }
          for (var s = n; s < r; s++) {
            var a = i[s].getProperty(t);
            if (undefined !== a) {
              return a;
            }
          }
        }
      };
      s.define = function (t, e, i, n) {
        var r = this.passes;
        var s = 0;
        var a = r.length;
        if (undefined !== i) {
          s = i;
          a = i + 1;
        }
        for (var o = s; o < a; o++) {
          r[o].define(t, e, n);
        }
      };
      s.getDefine = function (t, e) {
        var i = this.passes;
        if (!(e >= i.length)) {
          var n = 0;
          var r = i.length;
          if (undefined !== e) {
            n = e;
            r = e + 1;
          }
          for (var s = n; s < r; s++) {
            var a = i[s].getDefine(t);
            if (undefined !== a) {
              return a;
            }
          }
        }
      };
      s.setCullMode = function (t, e) {
        if (undefined === t) {
          t = o.CULL_BACK;
        }
        var i = this.passes;
        var n = 0;
        var r = i.length;
        if (undefined !== e) {
          n = e;
          r = e + 1;
        }
        for (var s = n; s < r; s++) {
          i[s].setCullMode(t);
        }
        this._dirty = true;
      };
      s.setDepth = function (t, e, i, n) {
        var r = this.passes;
        var s = 0;
        var a = r.length;
        if (undefined !== n) {
          s = n;
          a = n + 1;
        }
        for (var o = s; o < a; o++) {
          r[o].setDepth(t, e, i);
        }
        this._dirty = true;
      };
      s.setBlend = function (t, e, i, n, r, s, a, o, c) {
        var l = this.passes;
        var h = 0;
        var u = l.length;
        if (undefined !== c) {
          h = c;
          u = c + 1;
        }
        for (var f = h; f < u; f++) {
          l[f].setBlend(t, e, i, n, r, s, a, o);
        }
        this._dirty = true;
      };
      s.setStencilEnabled = function (t, e) {
        if (undefined === t) {
          t = o.STENCIL_INHERIT;
        }
        var i = this.passes;
        var n = 0;
        var r = i.length;
        if (undefined !== e) {
          n = e;
          r = e + 1;
        }
        for (var s = n; s < r; s++) {
          i[s].setStencilEnabled(t);
        }
        this._dirty = true;
      };
      s.setStencil = function (t, e, i, n, r, s, a, o, c) {
        var l = this.passes;
        var h = 0;
        var u = l.length;
        if (undefined !== c) {
          h = c;
          u = c + 1;
        }
        for (var f = h; f < u; f++) {
          var d = l[f];
          d.setStencilFront(t, e, i, n, r, s, a, o);
          d.setStencilBack(t, e, i, n, r, s, a, o);
        }
        this._dirty = true;
      };
      if (i = [{
        key: "name",
        get: function () {
          return this._name;
        }
      }, {
        key: "technique",
        get: function () {
          return this._technique;
        }
      }, {
        key: "passes",
        get: function () {
          return [];
        }
      }]) {
        a(t.prototype, i);
      }
      Object.defineProperty(t, "prototype", {
        writable: false
      });
      return t;
    }();
    i.default = c;
    cc.EffectBase = c;
    e.exports = i.default;
  }, {
    "../../../renderer/core/pass": 273,
    "../../../renderer/enums": 277
  }],
  78: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.parseEffect = function (t) {
      var e = f(t);
      return new a.default(t.name, e, 0, t);
    };
    var n = t("../../../renderer/core/pass") && t("../../../renderer/core/pass").__esModule ? t("../../../renderer/core/pass") : {
      default: t("../../../renderer/core/pass")
    };
    var r = t("../../../renderer/types");
    var s = t("../../../renderer/enums") && t("../../../renderer/enums").__esModule ? t("../../../renderer/enums") : {
      default: t("../../../renderer/enums")
    };
    var a = t("./effect") && t("./effect").__esModule ? t("./effect") : {
      default: t("./effect")
    };
    var o = t("../../../renderer/core/technique") && t("../../../renderer/core/technique").__esModule ? t("../../../renderer/core/technique") : {
      default: t("../../../renderer/core/technique")
    };
    function h(t, e) {
      var i = e.properties || {};
      var n = cc.renderer._forward._programLib.getTemplate(e.program);
      var a = function (t) {
        if (!n.uniforms.find(function (e) {
          return e.name === t;
        })) {
          return "continue";
        }
      };
      for (var o in i) a(o);
      var c = {};
      n.uniforms.forEach(function (t) {
        var e;
        var n = t.name;
        var a = c[n] = Object.assign({}, t);
        var o = i[n];
        if (undefined === (e = o ? o.type === s.default.PARAM_TEXTURE_2D ? null : o.type === s.default.PARAM_INT || o.type === s.default.PARAM_FLOAT ? Array.isArray(o.value) ? o.value[0] : o.value : new Float32Array(o.value) : r.enums2default[t.type])) {
          e = null;
        }
        a.value = e;
      });
      return c;
    }
    function u(t) {
      var e = {};
      cc.renderer._forward._programLib.getTemplate(t.program).defines.forEach(function (t) {
        e[t.name] = r.enums2default[t.type];
      });
      return e;
    }
    function f(t) {
      var e = t.techniques.length;
      var i = Array(e);
      for (var r = 0; r < e; ++r) {
        var s = t.techniques[r];
        var a = s.name || r;
        var c = s.passes.length;
        var l = Array(c);
        for (var f = 0; f < c; ++f) {
          var d = s.passes[f];
          var _ = d.name || f;
          var p = t.name + "-" + a + "-" + _;
          var v = d.stage || "opaque";
          var g = h(0, d);
          var m = u(d);
          var y = l[f] = new n.default(_, p, d.program, v, g, m);
          if (d.rasterizerState) {
            y.setCullMode(d.rasterizerState.cullMode);
          }
          var T = d.blendState && d.blendState.targets[0];
          if (T) {
            y.setBlend(T.blend, T.blendEq, T.blendSrc, T.blendDst, T.blendAlphaEq, T.blendSrcAlpha, T.blendDstAlpha, T.blendColor);
          }
          var E = d.depthStencilState;
          if (E) {
            y.setDepth(E.depthTest, E.depthWrite, E.depthFunc);
            y.setStencilFront(E.stencilTest, E.stencilFuncFront, E.stencilRefFront, E.stencilMaskFront, E.stencilFailOpFront, E.stencilZFailOpFront, E.stencilZPassOpFront, E.stencilWriteMaskFront);
            y.setStencilBack(E.stencilTest, E.stencilFuncBack, E.stencilRefBack, E.stencilMaskBack, E.stencilFailOpBack, E.stencilZFailOpBack, E.stencilZPassOpBack, E.stencilWriteMaskBack);
          }
        }
        i[r] = new o.default(a, l);
      }
      return i;
    }
  }, {
    "../../../renderer/core/pass": 273,
    "../../../renderer/core/technique": 275,
    "../../../renderer/enums": 277,
    "../../../renderer/types": 305,
    "./effect": 80
  }],
  79: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n = t("../../../renderer/murmurhash2_gc") && t("../../../renderer/murmurhash2_gc").__esModule ? t("../../../renderer/murmurhash2_gc") : {
      default: t("../../../renderer/murmurhash2_gc")
    };
    var r = t("./utils") && t("./utils").__esModule ? t("./utils") : {
      default: t("./utils")
    };
    var s = t("./effect-base") && t("./effect-base").__esModule ? t("./effect-base") : {
      default: t("./effect-base")
    };
    function o(t, e) {
      for (var i = 0; i < e.length; i++) {
        var n = e[i];
        n.enumerable = n.enumerable || false;
        n.configurable = true;
        if ("value" in n) {
          n.writable = true;
        }
        Object.defineProperty(t, n.key, n);
      }
    }
    function c(t, e) {
      return (c = Object.setPrototypeOf || function (t, e) {
        t.__proto__ = e;
        return t;
      })(t, e);
    }
    cc.gfx;
    var l = function (t) {
      function s(e) {
        var i;
        (i = t.call(this) || this)._effect = undefined;
        i._passes = [];
        i._stagePasses = {};
        i._hash = 0;
        i.init(e);
        return i;
      }
      s.prototype = Object.create(t.prototype);
      s.prototype.constructor = s;
      c(s, t);
      var l;
      var h = s.prototype;
      h._onEffectChanged = function () {};
      h.init = function (t) {
        if (t instanceof s) {
          t = t.effect;
        }
        this._effect = t;
        this._dirty = true;
        if (t) {
          var e = t.passes;
          var i = this._passes;
          i.length = 0;
          var n = this._stagePasses = {};
          for (var r = 0; r < e.length; r++) {
            var a = i[r] = Object.setPrototypeOf({}, e[r]);
            a._properties = Object.setPrototypeOf({}, e[r]._properties);
            a._defines = Object.setPrototypeOf({}, e[r]._defines);
            if (!n[a._stage]) {
              n[a._stage] = [];
            }
            n[a._stage].push(a);
          }
        }
      };
      h.updateHash = function () {};
      h.getHash = function () {
        if (!this._dirty) {
          return this._hash;
        }
        this._dirty = false;
        var t = "";
        t += r.default.serializePasses(this._passes);
        var e = this._effect;
        if (e) {
          t += r.default.serializePasses(e.passes);
        }
        0;
        this._hash = n.default(t, 666);
        this.updateHash(this._hash);
        return this._hash;
      };
      if (l = [{
        key: "effect",
        get: function () {
          return this._effect;
        }
      }, {
        key: "name",
        get: function () {
          return this._effect && this._effect.name + " (variant)";
        }
      }, {
        key: "passes",
        get: function () {
          return this._passes;
        }
      }, {
        key: "stagePasses",
        get: function () {
          return this._stagePasses;
        }
      }]) {
        o(s.prototype, l);
      }
      Object.defineProperty(s, "prototype", {
        writable: false
      });
      return s;
    }(s.default);
    i.default = l;
    cc.EffectVariant = l;
    e.exports = i.default;
  }, {
    "../../../renderer/murmurhash2_gc": 300,
    "./effect-base": 77,
    "./utils": 84
  }],
  80: [function (t, e, i) {
    "use strict";

    var n;
    function r(t, e) {
      for (var i = 0; i < e.length; i++) {
        var n = e[i];
        n.enumerable = n.enumerable || false;
        n.configurable = true;
        if ("value" in n) {
          n.writable = true;
        }
        Object.defineProperty(t, n.key, n);
      }
    }
    function s(t, e) {
      return (s = Object.setPrototypeOf || function (t, e) {
        t.__proto__ = e;
        return t;
      })(t, e);
    }
    i.__esModule = true;
    i.default = undefined;
    var a = function (t) {
      function n(e, i, n, r) {
        var s;
        (s = t.call(this) || this)._techniques = [];
        s._asset = null;
        s.init(e, i, n, r, true);
        return s;
      }
      n.prototype = Object.create(t.prototype);
      n.prototype.constructor = n;
      s(n, t);
      var o;
      var c = n.prototype;
      c.init = function (t, e, i, n) {
        this._name = t;
        this._techniques = e;
        this._technique = e[i];
        this._asset = n;
      };
      c.switchTechnique = function (t) {
        if (!(t >= this._techniques.length)) {
          this._technique = this._techniques[t];
        }
      };
      c.clear = function () {
        this._techniques = [];
      };
      c.clone = function () {
        var t = [];
        for (var e = 0; e < this._techniques.length; e++) {
          t.push(this._techniques[e].clone());
        }
        var i = this._techniques.indexOf(this._technique);
        return new n(this._name, t, i, this._asset);
      };
      if (o = [{
        key: "technique",
        get: function () {
          return this._technique;
        }
      }, {
        key: "passes",
        get: function () {
          return this._technique.passes;
        }
      }]) {
        r(n.prototype, o);
      }
      Object.defineProperty(n, "prototype", {
        writable: false
      });
      return n;
    }(((n = t("./effect-base")) && n.__esModule ? n : {
      default: n
    }).default);
    i.default = a;
    cc.Effect = a;
    e.exports = i.default;
  }, {
    "./effect-base": 77
  }],
  81: [function (t) {
    "use strict";

    t("./CCEffectAsset");
    t("./CCMaterial");
    t("./material-variant");
  }, {
    "./CCEffectAsset": 75,
    "./CCMaterial": 76,
    "./material-variant": 83
  }],
  82: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n = t("./utils") && t("./utils").__esModule ? t("./utils") : {
      default: t("./utils")
    };
    var r = t("../../utils/pool") && t("../../utils/pool").__esModule ? t("../../utils/pool") : {
      default: t("../../utils/pool")
    };
    function a(t, e) {
      return (a = Object.setPrototypeOf || function (t, e) {
        t.__proto__ = e;
        return t;
      })(t, e);
    }
    var o = new (function (t) {
      function r() {
        var e;
        var i = arguments.length;
        var n = Array(i);
        for (var r = 0; r < i; r++) {
          n[r] = arguments[r];
        }
        (e = t.call.apply(t, [this].concat(n)) || this).enabled = false;
        e._pool = {};
        return e;
      }
      r.prototype = Object.create(t.prototype);
      r.prototype.constructor = r;
      a(r, t);
      var s = r.prototype;
      s.get = function (t, e) {
        var i;
        var r = this._pool;
        if (t instanceof cc.MaterialVariant) {
          if (!t._owner) {
            t._owner = e;
            return t;
          }
          if (t._owner === e) {
            return t;
          }
          t = t.material;
        }
        if (this.enabled) {
          var s = t.effectAsset._uuid;
          if (r[s]) {
            var a = n.default.serializeDefines(t._effect._defines) + n.default.serializeTechniques(t._effect._techniques);
            i = r[s][a] && r[s][a].pop();
          }
        }
        if (i) {
          this.count--;
        } else {
          (i = new cc.MaterialVariant(t))._name = t._name + " (Instance)";
          i._uuid = t._uuid;
        }
        i._owner = e;
        return i;
      };
      s.put = function (t) {
        if (this.enabled && t._owner) {
          var e = this._pool;
          var i = t.effectAsset._uuid;
          if (!e[i]) {
            e[i] = {};
          }
          var r = n.default.serializeDefines(t._effect._defines) + n.default.serializeTechniques(t._effect._techniques);
          if (!e[i][r]) {
            e[i][r] = [];
          }
          if (!(this.count > this.maxSize)) {
            this._clean(t);
            e[i][r].push(t);
            this.count++;
          }
        }
      };
      s.clear = function () {
        this._pool = {};
        this.count = 0;
      };
      s._clean = function (t) {
        t._owner = null;
      };
      return r;
    }(r.default))();
    r.default.register("material", o);
    i.default = o;
    e.exports = i.default;
  }, {
    "../../utils/pool": 238,
    "./utils": 84
  }],
  83: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n;
    var r = t("./CCMaterial") && t("./CCMaterial").__esModule ? t("./CCMaterial") : {
      default: t("./CCMaterial")
    };
    var s = t("./effect-variant") && t("./effect-variant").__esModule ? t("./effect-variant") : {
      default: t("./effect-variant")
    };
    var a = t("./material-pool") && t("./material-pool").__esModule ? t("./material-pool") : {
      default: t("./material-pool")
    };
    function c(t, e) {
      for (var i = 0; i < e.length; i++) {
        var n = e[i];
        n.enumerable = n.enumerable || false;
        n.configurable = true;
        if ("value" in n) {
          n.writable = true;
        }
        Object.defineProperty(t, n.key, n);
      }
    }
    function l(t, e) {
      return (l = Object.setPrototypeOf || function (t, e) {
        t.__proto__ = e;
        return t;
      })(t, e);
    }
    0;
    var h = cc._decorator.ccclass("cc.MaterialVariant")(n = function (t) {
      var o;
      function h(e) {
        var i;
        (i = t.call(this) || this)._owner = null;
        i._material = null;
        i.init(e);
        return i;
      }
      h.prototype = Object.create(t.prototype);
      h.prototype.constructor = h;
      l(h, t);
      h.createWithBuiltin = function (t, e) {
        return h.create(r.default.getBuiltinMaterial(t), e);
      };
      h.create = function (t, e) {
        return t ? a.default.get(t, e) : null;
      };
      h.prototype.init = function (t) {
        this._effect = new s.default(t.effect);
        this._effectAsset = t._effectAsset;
        this._material = t;
      };
      if (o = [{
        key: "uuid",
        get: function () {
          return this._material._uuid;
        }
      }, {
        key: "owner",
        get: function () {
          return this._owner;
        }
      }, {
        key: "material",
        get: function () {
          return this._material;
        }
      }]) {
        c(h.prototype, o);
      }
      Object.defineProperty(h, "prototype", {
        writable: false
      });
      return h;
    }(r.default)) || n;
    i.default = h;
    cc.MaterialVariant = h;
    e.exports = i.default;
  }, {
    "./CCMaterial": 76,
    "./effect-variant": 79,
    "./material-pool": 82
  }],
  84: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n;
    var r = (n = t("../../../renderer/enums")) && n.__esModule ? n : {
      default: n
    };
    var s = [];
    function a(t, e) {
      var i = e.length;
      for (var n = 0; n < i; n++) {
        var r = e[n];
        s[n] = r + t[r];
      }
      s.length = i;
      return s.join("");
    }
    function o(t, e) {
      var i = 0;
      var n = 0;
      for (var a = e.length; n < a; n++) {
        var o = t[e[n]];
        var c = o.value;
        if (c) {
          if (o.type === r.default.PARAM_TEXTURE_2D || o.type === r.default.PARAM_TEXTURE_CUBE) {
            s[i] = c._id;
          } else {
            s[i] = c.toString();
          }
          i++;
        }
      }
      s.length = i;
      return s.join(";");
    }
    var c = {
      serializeDefines: a,
      serializePasses: function (t) {
        var e;
        var i;
        var n = "";
        for (var r = 0; r < t.length; r++) {
          undefined;
          i = undefined;
          i = (e = t[r])._programName + e._cullMode;
          if (e._blend) {
            i += e._blendEq + e._blendAlphaEq + e._blendSrc + e._blendDst + e._blendSrcAlpha + e._blendDstAlpha + e._blendColor;
          }
          if (e._depthTest) {
            i += e._depthWrite + e._depthFunc;
          }
          if (e._stencilTest) {
            i += e._stencilFuncFront + e._stencilRefFront + e._stencilMaskFront + e._stencilFailOpFront + e._stencilZFailOpFront + e._stencilZPassOpFront + e._stencilWriteMaskFront + e._stencilFuncBack + e._stencilRefBack + e._stencilMaskBack + e._stencilFailOpBack + e._stencilZFailOpBack + e._stencilZPassOpBack + e._stencilWriteMaskBack;
          }
          i += o(e._properties, e._propertyNames);
          n += i += a(e._defines, e._defineNames);
        }
        return n;
      },
      serializeUniforms: o
    };
    i.default = c;
    e.exports = i.default;
  }, {
    "../../../renderer/enums": 277
  }],
  85: [function (t, e) {
    "use strict";

    t("../CCNode").EventType;
    var r = cc.Enum({
      ONCE: 0,
      ON_WINDOW_RESIZE: 1,
      ALWAYS: 2
    });
    function s(t, e, i, n) {
      var r = t._parent.scaleX;
      var s = t._parent.scaleY;
      var a = 0;
      var o = 0;
      for (var c = t._parent;;) {
        a += c.x;
        o += c.y;
        if (!(c = c._parent)) {
          i.x = i.y = 0;
          return void (n.x = n.y = 1);
        }
        if (c === e) {
          break;
        }
        var l = c.scaleX;
        var h = c.scaleY;
        a *= l;
        o *= h;
        r *= l;
        s *= h;
      }
      n.x = 0 !== r ? 1 / r : 1;
      n.y = 0 !== s ? 1 / s : 1;
      i.x = -a;
      i.y = -o;
    }
    var a = cc.Vec2.ZERO;
    var o = cc.Vec2.ONE;
    function c(t, e) {
      var r;
      var c;
      var l;
      var h = e._target;
      if (h) {
        s(t, r = h, c = a, l = o);
      } else {
        r = t._parent;
      }
      var u;
      var f = (u = r) instanceof cc.Scene ? cc.visibleRect : u._contentSize;
      var d = r._anchorPoint;
      var _ = r instanceof cc.Scene;
      var p = t.x;
      var v = t.y;
      var g = t._anchorPoint;
      if (e._alignFlags & 56) {
        var m;
        var y;
        var T = f.width;
        if (_) {
          m = cc.visibleRect.left.x;
          y = cc.visibleRect.right.x;
        } else {
          y = (m = -d.x * T) + T;
        }
        m += e._isAbsLeft ? e._left : e._left * T;
        y -= e._isAbsRight ? e._right : e._right * T;
        if (h) {
          m += c.x;
          m *= l.x;
          y += c.x;
          y *= l.x;
        }
        var E;
        var A = g.x;
        var x = t.scaleX;
        if (x < 0) {
          A = 1 - A;
          x = -x;
        }
        if (e.isStretchWidth) {
          E = y - m;
          if (0 !== x) {
            t.width = E / x;
          }
          p = m + A * E;
        } else {
          E = t.width * x;
          if (e.isAlignHorizontalCenter) {
            var C = e._isAbsHorizontalCenter ? e._horizontalCenter : e._horizontalCenter * T;
            var b = (.5 - d.x) * f.width;
            if (h) {
              C *= l.x;
              b += c.x;
              b *= l.x;
            }
            p = b + (A - .5) * E + C;
          } else {
            p = e.isAlignLeft ? m + A * E : y + (A - 1) * E;
          }
        }
      }
      if (e._alignFlags & 7) {
        var S;
        var R;
        var M = f.height;
        if (_) {
          R = cc.visibleRect.bottom.y;
          S = cc.visibleRect.top.y;
        } else {
          S = (R = -d.y * M) + M;
        }
        R += e._isAbsBottom ? e._bottom : e._bottom * M;
        S -= e._isAbsTop ? e._top : e._top * M;
        if (h) {
          R += c.y;
          R *= l.y;
          S += c.y;
          S *= l.y;
        }
        var w;
        var I = g.y;
        var O = t.scaleY;
        if (O < 0) {
          I = 1 - I;
          O = -O;
        }
        if (e.isStretchHeight) {
          w = S - R;
          if (0 !== O) {
            t.height = w / O;
          }
          v = R + I * w;
        } else {
          w = t.height * O;
          if (e.isAlignVerticalCenter) {
            var L = e._isAbsVerticalCenter ? e._verticalCenter : e._verticalCenter * M;
            var P = (.5 - d.y) * f.height;
            if (h) {
              L *= l.y;
              P += c.y;
              P *= l.y;
            }
            v = P + (I - .5) * w + L;
          } else {
            v = e.isAlignBottom ? R + I * w : S + (I - 1) * w;
          }
        }
      }
      t.setPosition(p, v);
    }
    function l(t) {
      var e = t._widget;
      if (e) {
        c(t, e);
        if (e.alignMode !== r.ALWAYS) {
          f.remove(e);
        } else {
          u.push(e);
        }
      }
      var i = t._children;
      for (var n = 0; n < i.length; n++) {
        var s = i[n];
        if (s._active) {
          l(s);
        }
      }
    }
    function h() {
      var t = cc.director.getScene();
      if (t) {
        f.isAligning = true;
        if (f._nodesOrderDirty) {
          u.length = 0;
          l(t);
          f._nodesOrderDirty = false;
        } else {
          var e;
          var i = f._activeWidgetsIterator;
          for (i.i = 0; i.i < u.length; ++i.i) {
            c((e = u[i.i]).node, e);
          }
        }
        f.isAligning = false;
      }
    }
    var u = [];
    var f = cc._widgetManager = e.exports = {
      _AlignFlags: {
        TOP: 1,
        MID: 2,
        BOT: 4,
        LEFT: 8,
        CENTER: 16,
        RIGHT: 32
      },
      isAligning: false,
      _nodesOrderDirty: false,
      _activeWidgetsIterator: new cc.js.array.MutableForwardIterator(u),
      init: function (t) {
        t.on(cc.Director.EVENT_AFTER_UPDATE, h);
        var e = this.onResized.bind(this);
        cc.view.on("canvas-resize", e);
        window.addEventListener("orientationchange", e);
      },
      add: function (t) {
        t.node._widget = t;
        this._nodesOrderDirty = true;
      },
      remove: function (t) {
        t.node._widget = null;
        this._activeWidgetsIterator.remove(t);
      },
      onResized: function () {
        var t = cc.director.getScene();
        if (t) {
          this.refreshWidgetOnResized(t);
        }
      },
      refreshWidgetOnResized: function (t) {
        var e = cc.Node.isNode(t) && t.getComponent(cc.Widget);
        if (e && e.enabled && e.alignMode === r.ON_WINDOW_RESIZE) {
          this.add(e);
        }
        var i = t._children;
        for (var n = 0; n < i.length; n++) {
          var s = i[n];
          this.refreshWidgetOnResized(s);
        }
      },
      updateAlignment: function t(e) {
        var i = e._parent;
        if (cc.Node.isNode(i)) {
          t(i);
        }
        var n = e._widget || e.getComponent(cc.Widget);
        if (n && i) {
          c(e, n);
        }
      },
      AlignMode: r
    };
  }, {
    "../CCNode": 26
  }],
  86: [function (t, e) {
    "use strict";

    var i = t("../value-types");
    var n = t("../geom-utils");
    var r = t("../utils/affine-transform");
    var s = t("../renderer/index");
    var a = t("../renderer/render-flow");
    var o = t("../CCGame");
    var c = null;
    c = t("../../renderer/scene/camera");
    var l = cc.mat4();
    var h = cc.mat4();
    var u = cc.v3();
    var f = cc.v3();
    var d = cc.v3();
    var _ = [];
    function p() {
      var t = 0;
      for (var e = Number.MAX_VALUE; t < _.length; t++) {
        var i = _[t];
        if (i._depth < e) {
          T.main = i;
          e = i._depth;
        }
      }
    }
    var v = null;
    function g() {
      if (v) {
        var t = v.getNode();
        var e = cc.game.canvas;
        t.z = e.height / 1.1566;
        t.x = e.width / 2;
        t.y = e.height / 2;
      }
    }
    var m = cc.Enum({
      COLOR: 1,
      DEPTH: 2,
      STENCIL: 4
    });
    var y = cc.Enum({
      OPAQUE: 1,
      TRANSPARENT: 2
    });
    var T = cc.Class({
      name: "cc.Camera",
      extends: cc.Component,
      ctor: function () {
        if (o.renderType !== o.RENDER_TYPE_CANVAS) {
          var t = new c();
          t.setStages(["opaque"]);
          t.dirty = true;
          this._inited = false;
          this._camera = t;
        } else {
          this._inited = true;
        }
      },
      editor: false,
      properties: {
        _cullingMask: 4294967295,
        _clearFlags: m.DEPTH | m.STENCIL,
        _backgroundColor: cc.color(0, 0, 0, 255),
        _depth: 0,
        _zoomRatio: 1,
        _targetTexture: null,
        _fov: 60,
        _orthoSize: 10,
        _nearClip: 1,
        _farClip: 4096,
        _ortho: true,
        _rect: cc.rect(0, 0, 1, 1),
        _renderStages: 1,
        _alignWithScreen: true,
        zoomRatio: {
          get: function () {
            return this._zoomRatio;
          },
          set: function (t) {
            this._zoomRatio = t;
          },
          tooltip: false
        },
        fov: {
          get: function () {
            return this._fov;
          },
          set: function (t) {
            this._fov = t;
          },
          tooltip: false
        },
        orthoSize: {
          get: function () {
            return this._orthoSize;
          },
          set: function (t) {
            this._orthoSize = t;
          },
          tooltip: false
        },
        nearClip: {
          get: function () {
            return this._nearClip;
          },
          set: function (t) {
            this._nearClip = t;
            this._updateClippingpPlanes();
          },
          tooltip: false
        },
        farClip: {
          get: function () {
            return this._farClip;
          },
          set: function (t) {
            this._farClip = t;
            this._updateClippingpPlanes();
          },
          tooltip: false
        },
        ortho: {
          get: function () {
            return this._ortho;
          },
          set: function (t) {
            this._ortho = t;
            this._updateProjection();
          },
          tooltip: false
        },
        rect: {
          get: function () {
            return this._rect;
          },
          set: function (t) {
            this._rect = t;
            this._updateRect();
          },
          tooltip: false
        },
        cullingMask: {
          get: function () {
            return this._cullingMask;
          },
          set: function (t) {
            this._cullingMask = t;
            this._updateCameraMask();
          },
          tooltip: false
        },
        clearFlags: {
          get: function () {
            return this._clearFlags;
          },
          set: function (t) {
            this._clearFlags = t;
            if (this._camera) {
              this._camera.setClearFlags(t);
            }
          },
          tooltip: false
        },
        backgroundColor: {
          get: function () {
            return this._backgroundColor;
          },
          set: function (t) {
            if (!this._backgroundColor.equals(t)) {
              this._backgroundColor.set(t);
              this._updateBackgroundColor();
            }
          },
          tooltip: false
        },
        depth: {
          get: function () {
            return this._depth;
          },
          set: function (t) {
            if (T.main === this) {
              if (this._depth < t) {
                p();
              }
            } else if (T.main && t < T.main._depth && _.includes(this)) {
              T.main = this;
            }
            this._depth = t;
            if (this._camera) {
              this._camera.setPriority(t);
            }
          },
          tooltip: false
        },
        targetTexture: {
          get: function () {
            return this._targetTexture;
          },
          set: function (t) {
            this._targetTexture = t;
            this._updateTargetTexture();
          },
          tooltip: false
        },
        renderStages: {
          get: function () {
            return this._renderStages;
          },
          set: function (t) {
            this._renderStages = t;
            this._updateStages();
          },
          tooltip: false
        },
        alignWithScreen: {
          get: function () {
            return this._alignWithScreen;
          },
          set: function (t) {
            this._alignWithScreen = t;
          }
        },
        _is3D: {
          get: function () {
            return this.node && this.node._is3DNode;
          }
        }
      },
      statics: {
        main: null,
        cameras: _,
        ClearFlags: m,
        findCamera: function (t) {
          var e = 0;
          for (var i = _.length; e < i; e++) {
            var n = _[e];
            if (n.containsNode(t)) {
              return n;
            }
          }
          return null;
        },
        _findRendererCamera: function (t) {
          var e = s.scene._cameras;
          for (var i = 0; i < e._count; i++) {
            if (e._data[i]._cullingMask & t._cullingMask) {
              return e._data[i];
            }
          }
          return null;
        },
        _setupDebugCamera: function () {
          if (!v && o.renderType !== o.RENDER_TYPE_CANVAS) {
            var t = new c();
            v = t;
            t.setStages(["opaque"]);
            t.setFov(60 * Math.PI / 180);
            t.setNear(.1);
            t.setFar(4096);
            t.dirty = true;
            t.cullingMask = 1 << cc.Node.BuiltinGroupIndex.DEBUG;
            t.setPriority(cc.macro.MAX_ZINDEX);
            t.setClearFlags(0);
            t.setColor(0, 0, 0, 0);
            var e = new cc.Node();
            t.setNode(e);
            g();
            cc.view.on("design-resolution-changed", g);
            s.scene.addCamera(t);
          }
        }
      },
      _updateCameraMask: function () {
        if (this._camera) {
          var t = this._cullingMask & ~(1 << cc.Node.BuiltinGroupIndex.DEBUG);
          this._camera.cullingMask = t;
        }
      },
      _updateBackgroundColor: function () {
        if (this._camera) {
          var t = this._backgroundColor;
          this._camera.setColor(t.r / 255, t.g / 255, t.b / 255, t.a / 255);
        }
      },
      _updateTargetTexture: function () {
        if (this._camera) {
          var t = this._targetTexture;
          this._camera.setFrameBuffer(t ? t._framebuffer : null);
        }
      },
      _updateClippingpPlanes: function () {
        if (this._camera) {
          this._camera.setNear(this._nearClip);
          this._camera.setFar(this._farClip);
        }
      },
      _updateProjection: function () {
        if (this._camera) {
          var t = this._ortho ? 1 : 0;
          this._camera.setType(t);
        }
      },
      _updateRect: function () {
        if (this._camera) {
          var t = this._rect;
          this._camera.setRect(t.x, t.y, t.width, t.height);
        }
      },
      _updateStages: function () {
        var t = this._renderStages;
        var e = [];
        if (t & y.OPAQUE) {
          e.push("opaque");
        }
        if (t & y.TRANSPARENT) {
          e.push("transparent");
        }
        this._camera.setStages(e);
      },
      _init: function () {
        if (!this._inited) {
          this._inited = true;
          var t = this._camera;
          if (t) {
            t.setNode(this.node);
            t.setClearFlags(this._clearFlags);
            t.setPriority(this._depth);
            this._updateBackgroundColor();
            this._updateCameraMask();
            this._updateTargetTexture();
            this._updateClippingpPlanes();
            this._updateProjection();
            this._updateStages();
            this._updateRect();
            this.beforeDraw();
          }
        }
      },
      __preload: function () {
        this._init();
      },
      onEnable: function () {
        if (o.renderType !== o.RENDER_TYPE_CANVAS) {
          cc.director.on(cc.Director.EVENT_BEFORE_DRAW, this.beforeDraw, this);
          s.scene.addCamera(this._camera);
        }
        _.push(this);
        if (!T.main || this._depth < T.main._depth) {
          T.main = this;
        }
      },
      onDisable: function () {
        if (o.renderType !== o.RENDER_TYPE_CANVAS) {
          cc.director.off(cc.Director.EVENT_BEFORE_DRAW, this.beforeDraw, this);
          s.scene.removeCamera(this._camera);
        }
        cc.js.array.fastRemove(_, this);
        if (T.main === this) {
          T.main = null;
          p();
        }
      },
      getScreenToWorldMatrix2D: function (t) {
        this.getWorldToScreenMatrix2D(t);
        i.Mat4.invert(t, t);
        return t;
      },
      getWorldToScreenMatrix2D: function (t) {
        this.node.getWorldRT(l);
        var e = this.zoomRatio;
        var n = l.m;
        n[0] *= e;
        n[1] *= e;
        n[4] *= e;
        n[5] *= e;
        var r = n[12];
        var s = n[13];
        var a = cc.visibleRect.center;
        n[12] = a.x - (n[0] * r + n[4] * s);
        n[13] = a.y - (n[1] * r + n[5] * s);
        if (t !== l) {
          i.Mat4.copy(t, l);
        }
        return t;
      },
      getScreenToWorldPoint: function (t, e) {
        if (this.node.is3DNode) {
          e = e || new cc.Vec3();
          this._camera.screenToWorld(e, t, cc.visibleRect.width, cc.visibleRect.height);
        } else {
          e = e || new cc.Vec2();
          this.getScreenToWorldMatrix2D(l);
          i.Vec2.transformMat4(e, t, l);
        }
        return e;
      },
      getWorldToScreenPoint: function (t, e) {
        if (this.node.is3DNode) {
          e = e || new cc.Vec3();
          this._camera.worldToScreen(e, t, cc.visibleRect.width, cc.visibleRect.height);
        } else {
          e = e || new cc.Vec2();
          this.getWorldToScreenMatrix2D(l);
          i.Vec2.transformMat4(e, t, l);
        }
        return e;
      },
      getRay: function (t) {
        return cc.geomUtils ? (i.Vec3.set(d, t.x, t.y, 1), this._camera.screenToWorld(f, d, cc.visibleRect.width, cc.visibleRect.height), this.ortho ? (i.Vec3.set(d, t.x, t.y, -1), this._camera.screenToWorld(u, d, cc.visibleRect.width, cc.visibleRect.height)) : this.node.getWorldPosition(u), n.Ray.fromPoints(new n.Ray(), u, f)) : t;
      },
      containsNode: function (t) {
        return (t._cullingMask & this.cullingMask) > 0;
      },
      render: function (t) {
        if (!(t = t || cc.director.getScene())) {
          return null;
        }
        this.node.getWorldMatrix(l);
        this.beforeDraw();
        a.renderCamera(this._camera, t);
      },
      _onAlignWithScreen: function () {
        var t = cc.game.canvas.height / cc.view._scaleY;
        if (this._targetTexture) {
          t = cc.visibleRect.height;
        }
        var e = this._fov * cc.macro.RAD;
        this.node.z = t / (2 * Math.tan(e / 2));
        e = 2 * Math.atan(Math.tan(e / 2) / this.zoomRatio);
        this._camera.setFov(e);
        this._camera.setOrthoHeight(t / 2 / this.zoomRatio);
        this.node.setRotation(0, 0, 0, 1);
      },
      beforeDraw: function () {
        if (this._camera) {
          if (this._alignWithScreen) {
            this._onAlignWithScreen();
          } else {
            var t = this._fov * cc.macro.RAD;
            t = 2 * Math.atan(Math.tan(t / 2) / this.zoomRatio);
            this._camera.setFov(t);
            this._camera.setOrthoHeight(this._orthoSize / this.zoomRatio);
          }
          this._camera.dirty = true;
        }
      }
    });
    cc.js.mixin(T.prototype, {
      getNodeToCameraTransform: function (t) {
        var e = r.identity();
        t.getWorldMatrix(h);
        if (this.containsNode(t)) {
          this.getWorldToCameraMatrix(l);
          i.Mat4.mul(h, h, l);
        }
        r.fromMat4(e, h);
        return e;
      },
      getCameraToWorldPoint: function (t, e) {
        return this.getScreenToWorldPoint(t, e);
      },
      getWorldToCameraPoint: function (t, e) {
        return this.getWorldToScreenPoint(t, e);
      },
      getCameraToWorldMatrix: function (t) {
        return this.getScreenToWorldMatrix2D(t);
      },
      getWorldToCameraMatrix: function (t) {
        return this.getWorldToScreenMatrix2D(t);
      }
    });
    e.exports = cc.Camera = T;
  }, {
    "../../renderer/scene/camera": 302,
    "../CCGame": 25,
    "../geom-utils": 142,
    "../renderer/index": 193,
    "../renderer/render-flow": 194,
    "../utils/affine-transform": 227,
    "../value-types": 251
  }],
  87: [function (t, e) {
    "use strict";

    cc.Collider.Box = cc.Class({
      properties: {
        _offset: cc.v2(0, 0),
        _size: cc.size(100, 100),
        offset: {
          tooltip: false,
          get: function () {
            return this._offset;
          },
          set: function (t) {
            this._offset = t;
          },
          type: cc.Vec2
        },
        size: {
          tooltip: false,
          get: function () {
            return this._size;
          },
          set: function (t) {
            this._size.width = t.width < 0 ? 0 : t.width;
            this._size.height = t.height < 0 ? 0 : t.height;
          },
          type: cc.Size
        }
      },
      resetInEditor: false
    });
    var i = cc.Class({
      name: "cc.BoxCollider",
      extends: cc.Collider,
      mixins: [cc.Collider.Box],
      editor: false
    });
    cc.BoxCollider = e.exports = i;
  }, {}],
  88: [function (t, e) {
    "use strict";

    cc.Collider.Circle = cc.Class({
      properties: {
        _offset: cc.v2(0, 0),
        _radius: 50,
        offset: {
          tooltip: false,
          get: function () {
            return this._offset;
          },
          set: function (t) {
            this._offset = t;
          },
          type: cc.Vec2
        },
        radius: {
          tooltip: false,
          get: function () {
            return this._radius;
          },
          set: function (t) {
            this._radius = t < 0 ? 0 : t;
          }
        }
      },
      resetInEditor: false
    });
    var i = cc.Class({
      name: "cc.CircleCollider",
      extends: cc.Collider,
      mixins: [cc.Collider.Circle],
      editor: false
    });
    cc.CircleCollider = e.exports = i;
  }, {}],
  89: [function (t, e) {
    "use strict";

    var i = cc.Class({
      name: "cc.Collider",
      extends: cc.Component,
      properties: {
        editing: {
          default: false,
          serializable: false,
          tooltip: false
        },
        tag: {
          tooltip: false,
          default: 0,
          range: [0, 1e7],
          type: cc.Integer
        }
      },
      onDisable: function () {
        cc.director.getCollisionManager().removeCollider(this);
      },
      onEnable: function () {
        cc.director.getCollisionManager().addCollider(this);
      }
    });
    cc.Collider = e.exports = i;
  }, {}],
  90: [function (t, e) {
    "use strict";

    var i;
    var n = (i = t("../value-types/vec2")) && i.__esModule ? i : {
      default: i
    };
    var r = t("./CCContact");
    var s = r.CollisionType;
    var a = t("../CCNode").EventType;
    var o = new n.default();
    function c(t, e, i, n, r, s) {
      var a = t.x;
      var o = t.y;
      var c = t.width;
      var l = t.height;
      var h = e.m;
      var u = h[0];
      var f = h[1];
      var d = h[4];
      var _ = h[5];
      var p = u * a + d * o + h[12];
      var v = f * a + _ * o + h[13];
      var g = u * c;
      var m = f * c;
      var y = d * l;
      var T = _ * l;
      n.x = p;
      n.y = v;
      r.x = g + p;
      r.y = m + v;
      i.x = y + p;
      i.y = T + v;
      s.x = g + y + p;
      s.y = m + T + v;
    }
    var l = cc.Class({
      mixins: [cc.EventTarget],
      properties: {
        enabled: false,
        enabledDrawBoundingBox: false
      },
      ctor: function () {
        this._contacts = [];
        this._colliders = [];
        this._debugDrawer = null;
        this._enabledDebugDraw = false;
        if (cc.director._scheduler) {
          cc.director._scheduler.enableForTarget(this);
        }
      },
      update: function () {
        if (this.enabled) {
          var t;
          var e;
          var i = this._colliders;
          t = 0;
          for (e = i.length; t < e; t++) {
            this.updateCollider(i[t]);
          }
          var n = this._contacts;
          var r = [];
          t = 0;
          for (e = n.length; t < e; t++) {
            var a = n[t].updateState();
            if (a !== s.None) {
              r.push([a, n[t]]);
            }
          }
          t = 0;
          for (e = r.length; t < e; t++) {
            var o = r[t];
            this._doCollide(o[0], o[1]);
          }
          this.drawColliders();
        }
      },
      _doCollide: function (t, e) {
        var i;
        switch (t) {
          case s.CollisionEnter:
            i = "onCollisionEnter";
            break;
          case s.CollisionStay:
            i = "onCollisionStay";
            break;
          case s.CollisionExit:
            i = "onCollisionExit";
        }
        var n;
        var r;
        var a;
        var o = e.collider1;
        var c = e.collider2;
        var l = o.node._components;
        var h = c.node._components;
        n = 0;
        for (r = l.length; n < r; n++) {
          if ((a = l[n])[i]) {
            a[i](c, o);
          }
        }
        n = 0;
        for (r = h.length; n < r; n++) {
          if ((a = h[n])[i]) {
            a[i](o, c);
          }
        }
      },
      shouldCollide: function (t, e) {
        var i = t.node;
        var n = e.node;
        var r = cc.game.collisionMatrix;
        return i !== n && r[i.groupIndex][n.groupIndex];
      },
      initCollider: function (t) {
        if (!t.world) {
          var e = t.world = {};
          e.aabb = cc.rect();
          e.preAabb = cc.rect();
          e.matrix = cc.mat4();
          e.radius = 0;
          if (t instanceof cc.BoxCollider) {
            e.position = null;
            e.points = [cc.v2(), cc.v2(), cc.v2(), cc.v2()];
          } else if (t instanceof cc.PolygonCollider) {
            e.position = null;
            e.points = t.points.map(function (t) {
              return cc.v2(t.x, t.y);
            });
          } else if (t instanceof cc.CircleCollider) {
            e.position = cc.v2();
            e.points = null;
          }
        }
      },
      updateCollider: function (t) {
        var e = t.offset;
        var i = t.world;
        var r = i.aabb;
        var s = i.matrix;
        t.node.getWorldMatrix(s);
        var a = i.preAabb;
        a.x = r.x;
        a.y = r.y;
        a.width = r.width;
        a.height = r.height;
        if (t instanceof cc.BoxCollider) {
          var l = t.size;
          r.x = e.x - l.width / 2;
          r.y = e.y - l.height / 2;
          r.width = l.width;
          r.height = l.height;
          var h = i.points;
          var u = h[0];
          var f = h[1];
          var d = h[2];
          var _ = h[3];
          c(r, s, u, f, d, _);
          var p = Math.min(u.x, f.x, d.x, _.x);
          var v = Math.min(u.y, f.y, d.y, _.y);
          var g = Math.max(u.x, f.x, d.x, _.x);
          var m = Math.max(u.y, f.y, d.y, _.y);
          r.x = p;
          r.y = v;
          r.width = g - p;
          r.height = m - v;
        } else if (t instanceof cc.CircleCollider) {
          n.default.transformMat4(o, t.offset, s);
          i.position.x = o.x;
          i.position.y = o.y;
          var y = s.m;
          var T = y[12];
          var E = y[13];
          y[12] = y[13] = 0;
          o.x = t.radius;
          o.y = 0;
          n.default.transformMat4(o, o, s);
          var A = Math.sqrt(o.x * o.x + o.y * o.y);
          i.radius = A;
          r.x = i.position.x - A;
          r.y = i.position.y - A;
          r.width = 2 * A;
          r.height = 2 * A;
          y[12] = T;
          y[13] = E;
        } else if (t instanceof cc.PolygonCollider) {
          var x = t.points;
          var C = i.points;
          C.length = x.length;
          var b = 1e6;
          var S = 1e6;
          var R = -1e6;
          var M = -1e6;
          var w = 0;
          for (var I = x.length; w < I; w++) {
            if (!C[w]) {
              C[w] = cc.v2();
            }
            o.x = x[w].x + e.x;
            o.y = x[w].y + e.y;
            n.default.transformMat4(o, o, s);
            var O = o.x;
            var L = o.y;
            C[w].x = O;
            C[w].y = L;
            if (O > R) {
              R = O;
            }
            if (O < b) {
              b = O;
            }
            if (L > M) {
              M = L;
            }
            if (L < S) {
              S = L;
            }
          }
          r.x = b;
          r.y = S;
          r.width = R - b;
          r.height = M - S;
        }
      },
      addCollider: function (t) {
        var e = this._colliders;
        if (-1 === e.indexOf(t)) {
          var i = 0;
          for (var n = e.length; i < n; i++) {
            var s = e[i];
            if (this.shouldCollide(t, s)) {
              var o = new r(t, s);
              this._contacts.push(o);
            }
          }
          e.push(t);
          this.initCollider(t);
        }
        t.node.on(a.GROUP_CHANGED, this.onNodeGroupChanged, this);
      },
      removeCollider: function (t) {
        var e = this._colliders;
        var i = e.indexOf(t);
        if (i >= 0) {
          e.splice(i, 1);
          var n = this._contacts;
          for (var r = n.length - 1; r >= 0; r--) {
            var o = n[r];
            if (!(o.collider1 !== t && o.collider2 !== t)) {
              if (o.touching) {
                this._doCollide(s.CollisionExit, o);
              }
              n.splice(r, 1);
            }
          }
          t.node.off(a.GROUP_CHANGED, this.onNodeGroupChanged, this);
        }
      },
      onNodeGroupChanged: function (t) {
        var e = t.getComponents(cc.Collider);
        var i = 0;
        for (var n = e.length; i < n; i++) {
          var r = e[i];
          if (!(cc.PhysicsCollider && r instanceof cc.PhysicsCollider)) {
            this.removeCollider(r);
            this.addCollider(r);
          }
        }
      },
      drawColliders: function () {
        if (this._enabledDebugDraw) {
          this._checkDebugDrawValid();
          var t = this._debugDrawer;
          t.clear();
          var e = this._colliders;
          var i = 0;
          for (var n = e.length; i < n; i++) {
            var r = e[i];
            t.strokeColor = cc.Color.WHITE;
            if (r instanceof cc.BoxCollider || r instanceof cc.PolygonCollider) {
              var s = r.world.points;
              if (s.length > 0) {
                t.moveTo(s[0].x, s[0].y);
                for (var a = 1; a < s.length; a++) {
                  t.lineTo(s[a].x, s[a].y);
                }
                t.close();
                t.stroke();
              }
            } else if (r instanceof cc.CircleCollider) {
              t.circle(r.world.position.x, r.world.position.y, r.world.radius);
              t.stroke();
            }
            if (this.enabledDrawBoundingBox) {
              var o = r.world.aabb;
              t.strokeColor = cc.Color.BLUE;
              t.moveTo(o.xMin, o.yMin);
              t.lineTo(o.xMin, o.yMax);
              t.lineTo(o.xMax, o.yMax);
              t.lineTo(o.xMax, o.yMin);
              t.close();
              t.stroke();
            }
          }
        }
      },
      _checkDebugDrawValid: function () {
        if (!this._debugDrawer || !this._debugDrawer.isValid) {
          var t = new cc.Node("COLLISION_MANAGER_DEBUG_DRAW");
          t.zIndex = cc.macro.MAX_ZINDEX;
          cc.game.addPersistRootNode(t);
          this._debugDrawer = t.addComponent(cc.Graphics);
        }
      }
    });
    cc.js.getset(l.prototype, "enabledDebugDraw", function () {
      return this._enabledDebugDraw;
    }, function (t) {
      if (t && !this._enabledDebugDraw) {
        this._checkDebugDrawValid();
        this._debugDrawer.node.active = true;
      } else if (!t && this._enabledDebugDraw) {
        this._debugDrawer.clear(true);
        this._debugDrawer.node.active = false;
      }
      this._enabledDebugDraw = t;
    });
    cc.CollisionManager = e.exports = l;
  }, {
    "../CCNode": 26,
    "../value-types/vec2": 260,
    "./CCContact": 91
  }],
  91: [function (t, e) {
    "use strict";

    var i = t("./CCIntersection");
    var n = cc.Enum({
      None: 0,
      CollisionEnter: 1,
      CollisionStay: 2,
      CollisionExit: 3
    });
    function r(t, e) {
      this.collider1 = t;
      this.collider2 = e;
      this.touching = false;
      var n = t instanceof cc.BoxCollider || t instanceof cc.PolygonCollider;
      var r = e instanceof cc.BoxCollider || e instanceof cc.PolygonCollider;
      var s = t instanceof cc.CircleCollider;
      var a = e instanceof cc.CircleCollider;
      if (n && r) {
        this.testFunc = i.polygonPolygon;
      } else if (s && a) {
        this.testFunc = i.circleCircle;
      } else if (n && a) {
        this.testFunc = i.polygonCircle;
      } else if (s && r) {
        this.testFunc = i.polygonCircle;
        this.collider1 = e;
        this.collider2 = t;
      }
    }
    r.prototype.test = function () {
      var t = this.collider1.world;
      var e = this.collider2.world;
      return !!t.aabb.intersects(e.aabb) && (this.testFunc === i.polygonPolygon ? this.testFunc(t.points, e.points) : this.testFunc === i.circleCircle ? this.testFunc(t, e) : this.testFunc === i.polygonCircle && this.testFunc(t.points, e));
    };
    r.prototype.updateState = function () {
      var t = this.test();
      var e = n.None;
      if (t && !this.touching) {
        this.touching = true;
        e = n.CollisionEnter;
      } else if (t && this.touching) {
        e = n.CollisionStay;
      } else if (!t && this.touching) {
        this.touching = false;
        e = n.CollisionExit;
      }
      return e;
    };
    r.CollisionType = n;
    e.exports = r;
  }, {
    "./CCIntersection": 92
  }],
  92: [function (t, e) {
    "use strict";

    var i = {};
    function n(t, e, i, n) {
      var r = (n.x - i.x) * (t.y - i.y) - (n.y - i.y) * (t.x - i.x);
      var s = (e.x - t.x) * (t.y - i.y) - (e.y - t.y) * (t.x - i.x);
      var a = (n.y - i.y) * (e.x - t.x) - (n.x - i.x) * (e.y - t.y);
      if (0 !== a) {
        var o = r / a;
        var c = s / a;
        if (0 <= o && o <= 1 && 0 <= c && c <= 1) {
          return true;
        }
      }
      return false;
    }
    function r(t, e, i) {
      var r = i.length;
      for (var s = 0; s < r; ++s) {
        if (n(t, e, i[s], i[(s + 1) % r])) {
          return true;
        }
      }
      return false;
    }
    function s(t, e) {
      var i = false;
      var n = t.x;
      var r = t.y;
      var s = e.length;
      var a = 0;
      for (var o = s - 1; a < s; o = a++) {
        var c = e[a].x;
        var l = e[a].y;
        var h = e[o].x;
        var u = e[o].y;
        if (l > r != u > r && n < (h - c) * (r - l) / (u - l) + c) {
          i = !i;
        }
      }
      return i;
    }
    function a(t, e, i, n) {
      var r;
      var s = i.x - e.x;
      var a = i.y - e.y;
      var o = s * s + a * a;
      var c = ((t.x - e.x) * s + (t.y - e.y) * a) / o;
      r = n ? o ? c < 0 ? e : c > 1 ? i : cc.v2(e.x + c * s, e.y + c * a) : e : cc.v2(e.x + c * s, e.y + c * a);
      s = t.x - r.x;
      a = t.y - r.y;
      return Math.sqrt(s * s + a * a);
    }
    i.lineLine = n;
    i.lineRect = function (t, e, i) {
      var r = new cc.Vec2(i.x, i.y);
      var s = new cc.Vec2(i.x, i.yMax);
      var a = new cc.Vec2(i.xMax, i.yMax);
      var o = new cc.Vec2(i.xMax, i.y);
      return !!(n(t, e, r, s) || n(t, e, s, a) || n(t, e, a, o) || n(t, e, o, r));
    };
    i.linePolygon = r;
    i.rectRect = function (t, e) {
      var i = t.x;
      var n = t.y;
      var r = t.x + t.width;
      var s = t.y + t.height;
      var a = e.x;
      var o = e.y;
      var c = e.x + e.width;
      var l = e.y + e.height;
      return i <= c && r >= a && n <= l && s >= o;
    };
    i.rectPolygon = function (t, e) {
      var i;
      var n;
      var a = new cc.Vec2(t.x, t.y);
      var o = new cc.Vec2(t.x, t.yMax);
      var c = new cc.Vec2(t.xMax, t.yMax);
      var l = new cc.Vec2(t.xMax, t.y);
      if (r(a, o, e)) {
        return true;
      }
      if (r(o, c, e)) {
        return true;
      }
      if (r(c, l, e)) {
        return true;
      }
      if (r(l, a, e)) {
        return true;
      }
      i = 0;
      for (n = e.length; i < n; ++i) {
        if (s(e[i], t)) {
          return true;
        }
      }
      return !!(s(a, e) || s(o, e) || s(c, e) || s(l, e));
    };
    i.polygonPolygon = function (t, e) {
      var i;
      var n;
      i = 0;
      for (n = t.length; i < n; ++i) {
        if (r(t[i], t[(i + 1) % n], e)) {
          return true;
        }
      }
      i = 0;
      for (n = e.length; i < n; ++i) {
        if (s(e[i], t)) {
          return true;
        }
      }
      i = 0;
      for (n = t.length; i < n; ++i) {
        if (s(t[i], e)) {
          return true;
        }
      }
      return false;
    };
    i.circleCircle = function (t, e) {
      return t.position.sub(e.position).mag() < t.radius + e.radius;
    };
    i.polygonCircle = function (t, e) {
      var i = e.position;
      if (s(i, t)) {
        return true;
      }
      var n = 0;
      for (var r = t.length; n < r; n++) {
        if (a(i, 0 === n ? t[t.length - 1] : t[n - 1], t[n], true) < e.radius) {
          return true;
        }
      }
      return false;
    };
    i.pointInPolygon = s;
    i.pointLineDistance = a;
    cc.Intersection = e.exports = i;
  }, {}],
  93: [function (t, e) {
    "use strict";

    cc.Collider.Polygon = cc.Class({
      properties: {
        threshold: {
          default: 1,
          serializable: false,
          visible: false
        },
        _offset: cc.v2(0, 0),
        offset: {
          get: function () {
            return this._offset;
          },
          set: function (t) {
            this._offset = t;
          },
          type: cc.Vec2
        },
        points: {
          tooltip: false,
          default: function () {
            return [cc.v2(-50, -50), cc.v2(50, -50), cc.v2(50, 50), cc.v2(-50, 50)];
          },
          type: [cc.Vec2]
        }
      },
      resetPointsByContour: false
    });
    var i = cc.Class({
      name: "cc.PolygonCollider",
      extends: cc.Collider,
      mixins: [cc.Collider.Polygon],
      editor: false
    });
    cc.PolygonCollider = e.exports = i;
  }, {}],
  94: [function (t) {
    "use strict";

    t("./CCCollisionManager");
    t("./CCCollider");
    t("./CCBoxCollider");
    t("./CCCircleCollider");
    t("./CCPolygonCollider");
  }, {
    "./CCBoxCollider": 87,
    "./CCCircleCollider": 88,
    "./CCCollider": 89,
    "./CCCollisionManager": 90,
    "./CCPolygonCollider": 93
  }],
  95: [function (t, e) {
    "use strict";

    t("./platform/CCClass");
    var i = t("./platform/CCObject").Flags;
    var n = t("./platform/js").array;
    var r = i.IsStartCalled;
    var s = i.IsOnEnableCalled;
    function a(t, e) {
      var i = e.constructor._executionOrder;
      var n = e._id;
      var r = 0;
      var s = t.length - 1;
      for (var a = s >>> 1; r <= s; a = r + s >>> 1) {
        var o = t[a];
        var c = o.constructor._executionOrder;
        if (c > i) {
          s = a - 1;
        } else if (c < i) {
          r = a + 1;
        } else {
          var l = o._id;
          if (l > n) {
            s = a - 1;
          } else {
            if (!(l < n)) {
              return a;
            }
            r = a + 1;
          }
        }
      }
      return ~r;
    }
    function o(t, e) {
      var i = t.array;
      for (var n = t.i + 1; n < i.length;) {
        var r = i[n];
        if (r._enabled && r.node && r.node._activeInHierarchy) {
          ++n;
        } else {
          t.removeAt(n);
          if (e) {
            r._objFlags &= ~e;
          }
        }
      }
    }
    i.IsEditorOnEnableCalled;
    var c = cc.Class({
      __ctor__: function (t) {
        var e = n.MutableForwardIterator;
        this._zero = new e([]);
        this._neg = new e([]);
        this._pos = new e([]);
        this._invoke = t;
      },
      statics: {
        stableRemoveInactive: o
      },
      add: null,
      remove: null,
      invoke: null
    });
    function l(t, e) {
      return t.constructor._executionOrder - e.constructor._executionOrder;
    }
    var h = cc.Class({
      extends: c,
      add: function (t) {
        var e = t.constructor._executionOrder;
        (0 === e ? this._zero : e < 0 ? this._neg : this._pos).array.push(t);
      },
      remove: function (t) {
        var e = t.constructor._executionOrder;
        (0 === e ? this._zero : e < 0 ? this._neg : this._pos).fastRemove(t);
      },
      cancelInactive: function (t) {
        o(this._zero, t);
        o(this._neg, t);
        o(this._pos, t);
      },
      invoke: function () {
        var t = this._neg;
        if (t.array.length > 0) {
          t.array.sort(l);
          this._invoke(t);
          t.array.length = 0;
        }
        this._invoke(this._zero);
        this._zero.array.length = 0;
        var e = this._pos;
        if (e.array.length > 0) {
          e.array.sort(l);
          this._invoke(e);
          e.array.length = 0;
        }
      }
    });
    var u = cc.Class({
      extends: c,
      add: function (t) {
        var e = t.constructor._executionOrder;
        if (0 === e) {
          this._zero.array.push(t);
        } else {
          var i = e < 0 ? this._neg.array : this._pos.array;
          var n = a(i, t);
          if (n < 0) {
            i.splice(~n, 0, t);
          }
        }
      },
      remove: function (t) {
        var e = t.constructor._executionOrder;
        if (0 === e) {
          this._zero.fastRemove(t);
        } else {
          var i = e < 0 ? this._neg : this._pos;
          var n = a(i.array, t);
          if (n >= 0) {
            i.removeAt(n);
          }
        }
      },
      invoke: function (t) {
        if (this._neg.array.length > 0) {
          this._invoke(this._neg, t);
        }
        this._invoke(this._zero, t);
        if (this._pos.array.length > 0) {
          this._invoke(this._pos, t);
        }
      }
    });
    function f(t, e, i, n) {
      var r = "var a=it.array;for(it.i=0;it.i<a.length;++it.i){var c=a[it.i];" + t + "}";
      n = e ? Function("it", "dt", r) : Function("it", r);
      t = Function("c", "dt", t);
      return function (e, r) {
        try {
          n(e, r);
        } catch (a) {
          cc._throw(a);
          var s = e.array;
          if (i) {
            s[e.i]._objFlags |= i;
          }
          for (++e.i; e.i < s.length; ++e.i) {
            try {
              t(s[e.i], r);
            } catch (a) {
              cc._throw(a);
              if (i) {
                s[e.i]._objFlags |= i;
              }
            }
          }
        }
      };
    }
    var d = f("c.start();c._objFlags|=" + r, false, r);
    var _ = f("c.update(dt)", true);
    var p = f("c.lateUpdate(dt)", true);
    function v() {
      this.startInvoker = new h(d);
      this.updateInvoker = new u(_);
      this.lateUpdateInvoker = new u(p);
      this._deferredComps = [];
      this._updating = false;
    }
    var g = cc.Class({
      ctor: v,
      unscheduleAll: v,
      statics: {
        LifeCycleInvoker: c,
        OneOffInvoker: h,
        createInvokeImpl: f,
        invokeOnEnable: function (t) {
          var e = cc.director._compScheduler;
          var i = t.array;
          for (t.i = 0; t.i < i.length; ++t.i) {
            var n = i[t.i];
            if (n._enabled) {
              n.onEnable();
              if (!!n.node._activeInHierarchy) {
                e._onEnabled(n);
              }
            }
          }
        }
      },
      _onEnabled: function (t) {
        cc.director.getScheduler().resumeTarget(t);
        t._objFlags |= s;
        if (this._updating) {
          this._deferredComps.push(t);
        } else {
          this._scheduleImmediate(t);
        }
      },
      _onDisabled: function (t) {
        cc.director.getScheduler().pauseTarget(t);
        t._objFlags &= ~s;
        var e = this._deferredComps.indexOf(t);
        if (e >= 0) {
          n.fastRemoveAt(this._deferredComps, e);
        } else {
          if (!(!t.start || t._objFlags & r)) {
            this.startInvoker.remove(t);
          }
          if (t.update) {
            this.updateInvoker.remove(t);
          }
          if (t.lateUpdate) {
            this.lateUpdateInvoker.remove(t);
          }
        }
      },
      enableComp: function (t, e) {
        if (!(t._objFlags & s)) {
          if (t.onEnable) {
            if (e) {
              return void e.add(t);
            }
            t.onEnable();
            if (!t.node._activeInHierarchy) {
              return;
            }
          }
          this._onEnabled(t);
        }
      },
      disableComp: function (t) {
        if (t._objFlags & s) {
          if (t.onDisable) {
            t.onDisable();
          }
          this._onDisabled(t);
        }
      },
      _scheduleImmediate: function (t) {
        if (!("function" != typeof t.start || t._objFlags & r)) {
          this.startInvoker.add(t);
        }
        if ("function" == typeof t.update) {
          this.updateInvoker.add(t);
        }
        if ("function" == typeof t.lateUpdate) {
          this.lateUpdateInvoker.add(t);
        }
      },
      _deferredSchedule: function () {
        var t = this._deferredComps;
        var e = 0;
        for (var i = t.length; e < i; e++) {
          this._scheduleImmediate(t[e]);
        }
        t.length = 0;
      },
      _startForNewComps: function () {
        if (this._deferredComps.length > 0) {
          this._deferredSchedule();
          this.startInvoker.invoke();
        }
      },
      startPhase: function () {
        this._updating = true;
        this.startInvoker.invoke();
        this._startForNewComps();
      },
      updatePhase: function (t) {
        this.updateInvoker.invoke(t);
      },
      lateUpdatePhase: function (t) {
        this.lateUpdateInvoker.invoke(t);
        this._updating = false;
        this._startForNewComps();
      }
    });
    e.exports = g;
  }, {
    "./platform/CCClass": 162,
    "./platform/CCObject": 168,
    "./platform/js": 183,
    "./utils/misc": 236
  }],
  96: [function (t, e) {
    "use strict";

    var i = t("../../animation/animation-animator");
    var n = t("../../animation/animation-clip");
    var r = t("../event/event-target");
    var s = t("../platform/js");
    var o = cc.Enum({
      PLAY: "play",
      STOP: "stop",
      PAUSE: "pause",
      RESUME: "resume",
      LASTFRAME: "lastframe",
      FINISHED: "finished"
    });
    var c = cc.Class({
      name: "cc.Animation",
      extends: t("./CCComponent"),
      mixins: [r],
      editor: false,
      statics: {
        EventType: o
      },
      ctor: function () {
        cc.EventTarget.call(this);
        this._animator = null;
        this._nameToState = s.createMap(true);
        this._didInit = false;
        this._currentClip = null;
      },
      properties: {
        _defaultClip: {
          default: null,
          type: n
        },
        defaultClip: {
          type: n,
          get: function () {
            return this._defaultClip;
          },
          set: function () {},
          tooltip: false
        },
        currentClip: {
          get: function () {
            return this._currentClip;
          },
          set: function (t) {
            this._currentClip = t;
          },
          type: n,
          visible: false
        },
        _writableClips: {
          get: function () {
            return this._clips;
          },
          set: function (t) {
            this._didInit = false;
            this._clips = t;
            this._init();
          },
          type: [n]
        },
        _clips: {
          default: [],
          type: [n],
          tooltip: false,
          visible: true
        },
        playOnLoad: {
          default: false,
          tooltip: false
        }
      },
      start: function () {
        if (this.playOnLoad && this._defaultClip && (!this._animator || !this._animator.isPlaying)) {
          var t = this.getAnimationState(this._defaultClip.name);
          this._animator.playState(t);
        }
      },
      onEnable: function () {
        if (this._animator) {
          this._animator.resume();
        }
      },
      onDisable: function () {
        if (this._animator) {
          this._animator.pause();
        }
      },
      onDestroy: function () {
        this.stop();
      },
      getClips: function () {
        return this._clips;
      },
      play: function (t, e) {
        var i = this.playAdditive(t, e);
        this._animator.stopStatesExcept(i);
        return i;
      },
      playAdditive: function (t, e) {
        this._init();
        var i = this.getAnimationState(t || this._defaultClip && this._defaultClip.name);
        if (i) {
          this.enabled = true;
          var n = this._animator;
          if (n.isPlaying && i.isPlaying) {
            if (i.isPaused) {
              n.resumeState(i);
            } else {
              n.stopState(i);
              n.playState(i, e);
            }
          } else {
            n.playState(i, e);
          }
          if (!this.enabledInHierarchy) {
            n.pause();
          }
          this.currentClip = i.clip;
        }
        return i;
      },
      stop: function (t) {
        if (this._didInit) {
          if (t) {
            var e = this._nameToState[t];
            if (e) {
              this._animator.stopState(e);
            }
          } else {
            this._animator.stop();
          }
        }
      },
      pause: function (t) {
        if (this._didInit) {
          if (t) {
            var e = this._nameToState[t];
            if (e) {
              this._animator.pauseState(e);
            }
          } else {
            this.enabled = false;
          }
        }
      },
      resume: function (t) {
        if (this._didInit) {
          if (t) {
            var e = this.getAnimationState(t);
            if (e) {
              this._animator.resumeState(e);
            }
          } else {
            this.enabled = true;
          }
        }
      },
      setCurrentTime: function (t, e) {
        this._init();
        if (e) {
          var i = this.getAnimationState(e);
          if (i) {
            this._animator.setStateTime(i, t);
          }
        } else {
          this._animator.setStateTime(t);
        }
      },
      getAnimationState: function (t) {
        this._init();
        var e = this._nameToState[t];
        if (e && !e.curveLoaded) {
          this._animator._reloadClip(e);
        }
        return e || null;
      },
      hasAnimationState: function (t) {
        this._init();
        return !!this._nameToState[t];
      },
      addClip: function (t, e) {
        if (t) {
          this._init();
          if (!cc.js.array.contains(this._clips, t)) {
            this._clips.push(t);
          }
          e = e || t.name;
          var i = this._nameToState[e];
          if (i) {
            if (i.clip === t) {
              return i;
            }
            var n = this._clips.indexOf(i.clip);
            if (-1 !== n) {
              this._clips.splice(n, 1);
            }
          }
          var r = new cc.AnimationState(t, e);
          this._nameToState[e] = r;
          return r;
        }
      },
      removeClip: function (t, e) {
        if (t) {
          var i;
          this._init();
          for (var n in this._nameToState) {
            i = this._nameToState[n];
            if (i.clip === t) {
              break;
            }
          }
          if (t === this._defaultClip) {
            if (!e) {
              return;
            }
            this._defaultClip = null;
          }
          if (i && i.isPlaying) {
            if (!e) {
              return;
            }
            this.stop(i.name);
          }
          this._clips = this._clips.filter(function (e) {
            return !(e === t);
          });
          if (i) {
            delete this._nameToState[i.name];
          }
        }
      },
      sample: function (t) {
        this._init();
        if (t) {
          var e = this.getAnimationState(t);
          if (e) {
            e.sample();
          }
        } else {
          this._animator.sample();
        }
      },
      on: function (t, e, i, n) {
        this._init();
        var r = this._EventTargetOn(t, e, i, n);
        if ("lastframe" === t) {
          var s = this._nameToState;
          for (var a in s) s[a]._lastframeEventOn = true;
        }
        return r;
      },
      off: function (t, e, i) {
        this._init();
        if ("lastframe" === t) {
          var n = this._nameToState;
          for (var r in n) n[r]._lastframeEventOn = false;
        }
        this._EventTargetOff(t, e, i);
      },
      _init: function () {
        if (!this._didInit) {
          this._didInit = true;
          this._animator = new i(this.node, this);
          this._createStates();
        }
      },
      _createStates: function () {
        this._nameToState = s.createMap(true);
        var t = null;
        var e = false;
        for (var i = 0; i < this._clips.length; ++i) {
          var n = this._clips[i];
          if (n) {
            t = new cc.AnimationState(n);
            this._nameToState[t.name] = t;
            if (this._defaultClip === n) {
              e = t;
            }
          }
        }
        if (this._defaultClip && !e) {
          t = new cc.AnimationState(this._defaultClip);
          this._nameToState[t.name] = t;
        }
      }
    });
    c.prototype._EventTargetOn = r.prototype.on;
    c.prototype._EventTargetOff = r.prototype.off;
    cc.Animation = e.exports = c;
  }, {
    "../../animation/animation-animator": 9,
    "../../animation/animation-clip": 10,
    "../event/event-target": 134,
    "../platform/js": 183,
    "./CCComponent": 100
  }],
  97: [function (t, e) {
    "use strict";

    var i = ["touchstart", "touchmove", "touchend", "mousedown", "mousemove", "mouseup", "mouseenter", "mouseleave", "mousewheel"];
    function n(t) {
      t.stopPropagation();
    }
    var r = cc.Class({
      name: "cc.BlockInputEvents",
      extends: t("./CCComponent"),
      editor: {
        menu: "i18n:MAIN_MENU.component.ui/Block Input Events",
        inspector: "packages://inspector/inspectors/comps/block-input-events.js",
        help: "i18n:COMPONENT.help_url.block_input_events"
      },
      onEnable: function () {
        for (var t = 0; t < i.length; t++) {
          this.node.on(i[t], n, this);
        }
      },
      onDisable: function () {
        for (var t = 0; t < i.length; t++) {
          this.node.off(i[t], n, this);
        }
      }
    });
    cc.BlockInputEvents = e.exports = r;
  }, {
    "./CCComponent": 100
  }],
  98: [function (t, e) {
    "use strict";

    var i = t("./CCComponent");
    var n = t("../utils/gray-sprite-state");
    var r = cc.Enum({
      NONE: 0,
      COLOR: 1,
      SPRITE: 2,
      SCALE: 3
    });
    var s = cc.Enum({
      NORMAL: 0,
      HOVER: 1,
      PRESSED: 2,
      DISABLED: 3
    });
    var a = cc.Class({
      name: "cc.Button",
      extends: i,
      mixins: [n],
      ctor: function () {
        this._pressed = false;
        this._hovered = false;
        this._fromColor = null;
        this._toColor = null;
        this._time = 0;
        this._transitionFinished = true;
        this._fromScale = cc.Vec2.ZERO;
        this._toScale = cc.Vec2.ZERO;
        this._originalScale = null;
        this._graySpriteMaterial = null;
        this._spriteMaterial = null;
        this._sprite = null;
      },
      editor: false,
      properties: {
        interactable: {
          default: true,
          tooltip: false,
          notify: function () {
            this._updateState();
            if (!this.interactable) {
              this._resetState();
            }
          },
          animatable: false
        },
        _resizeToTarget: {
          animatable: false,
          set: function (t) {
            if (t) {
              this._resizeNodeToTargetNode();
            }
          }
        },
        enableAutoGrayEffect: {
          default: false,
          tooltip: false,
          notify: function () {
            this._updateDisabledState(true);
          }
        },
        transition: {
          default: r.NONE,
          tooltip: false,
          type: r,
          animatable: false,
          notify: function (t) {
            this._updateTransition(t);
          },
          formerlySerializedAs: "transition"
        },
        normalColor: {
          default: cc.Color.WHITE,
          displayName: "Normal",
          tooltip: false,
          notify: function () {
            if (this.transition === r.Color && this._getButtonState() === s.NORMAL) {
              this._getTarget().opacity = this.normalColor.a;
            }
            this._updateState();
          }
        },
        pressedColor: {
          default: cc.color(211, 211, 211),
          displayName: "Pressed",
          tooltip: false,
          notify: function () {
            if (this.transition === r.Color && this._getButtonState() === s.PRESSED) {
              this._getTarget().opacity = this.pressedColor.a;
            }
            this._updateState();
          },
          formerlySerializedAs: "pressedColor"
        },
        hoverColor: {
          default: cc.Color.WHITE,
          displayName: "Hover",
          tooltip: false,
          notify: function () {
            if (this.transition === r.Color && this._getButtonState() === s.HOVER) {
              this._getTarget().opacity = this.hoverColor.a;
            }
            this._updateState();
          },
          formerlySerializedAs: "hoverColor"
        },
        disabledColor: {
          default: cc.color(124, 124, 124),
          displayName: "Disabled",
          tooltip: false,
          notify: function () {
            if (this.transition === r.Color && this._getButtonState() === s.DISABLED) {
              this._getTarget().opacity = this.disabledColor.a;
            }
            this._updateState();
          }
        },
        duration: {
          default: .1,
          range: [0, 10],
          tooltip: false
        },
        zoomScale: {
          default: 1.2,
          tooltip: false
        },
        normalSprite: {
          default: null,
          type: cc.SpriteFrame,
          displayName: "Normal",
          tooltip: false,
          notify: function () {
            this._updateState();
          }
        },
        pressedSprite: {
          default: null,
          type: cc.SpriteFrame,
          displayName: "Pressed",
          tooltip: false,
          formerlySerializedAs: "pressedSprite",
          notify: function () {
            this._updateState();
          }
        },
        hoverSprite: {
          default: null,
          type: cc.SpriteFrame,
          displayName: "Hover",
          tooltip: false,
          formerlySerializedAs: "hoverSprite",
          notify: function () {
            this._updateState();
          }
        },
        disabledSprite: {
          default: null,
          type: cc.SpriteFrame,
          displayName: "Disabled",
          tooltip: false,
          notify: function () {
            this._updateState();
          }
        },
        target: {
          default: null,
          type: cc.Node,
          tooltip: false,
          notify: function (t) {
            this._applyTarget();
            if (t && this.target !== t) {
              this._unregisterTargetEvent(t);
            }
          }
        },
        clickEvents: {
          default: [],
          type: cc.Component.EventHandler,
          tooltip: false
        }
      },
      statics: {
        Transition: r
      },
      __preload: function () {
        this._applyTarget();
        this._resetState();
      },
      _resetState: function () {
        this._pressed = false;
        this._hovered = false;
        var t = this._getTarget();
        var e = this.transition;
        var i = this._originalScale;
        if (e === r.COLOR && this.interactable) {
          this._setTargetColor(this.normalColor);
        } else if (e === r.SCALE && i) {
          t.setScale(i.x, i.y);
        }
        this._transitionFinished = true;
      },
      onEnable: function () {
        if (this.normalSprite) {
          this.normalSprite.ensureLoadTexture();
        }
        if (this.hoverSprite) {
          this.hoverSprite.ensureLoadTexture();
        }
        if (this.pressedSprite) {
          this.pressedSprite.ensureLoadTexture();
        }
        if (this.disabledSprite) {
          this.disabledSprite.ensureLoadTexture();
        }
        this._registerNodeEvent();
        this._updateState();
      },
      onDisable: function () {
        this._resetState();
        this._unregisterNodeEvent();
      },
      _getTarget: function () {
        return this.target ? this.target : this.node;
      },
      _onTargetSpriteFrameChanged: function (t) {
        if (this.transition === r.SPRITE) {
          this._setCurrentStateSprite(t.spriteFrame);
        }
      },
      _onTargetColorChanged: function (t) {
        if (this.transition === r.COLOR) {
          this._setCurrentStateColor(t);
        }
      },
      _onTargetScaleChanged: function () {
        var t = this._getTarget();
        if (this._originalScale && (this.transition !== r.SCALE || this._transitionFinished)) {
          this._originalScale.x = t.scaleX;
          this._originalScale.y = t.scaleY;
        }
      },
      _setTargetColor: function (t) {
        var e = this._getTarget();
        var i = t.clone();
        e.opacity = i.a;
        i.a = 255;
        e.color = i;
      },
      _getStateColor: function (t) {
        switch (t) {
          case s.NORMAL:
            return this.normalColor;
          case s.HOVER:
            return this.hoverColor;
          case s.PRESSED:
            return this.pressedColor;
          case s.DISABLED:
            return this.disabledColor;
        }
      },
      _getStateSprite: function (t) {
        switch (t) {
          case s.NORMAL:
            return this.normalSprite;
          case s.HOVER:
            return this.hoverSprite;
          case s.PRESSED:
            return this.pressedSprite;
          case s.DISABLED:
            return this.disabledSprite;
        }
      },
      _setCurrentStateColor: function (t) {
        switch (this._getButtonState()) {
          case s.NORMAL:
            this.normalColor = t;
            break;
          case s.HOVER:
            this.hoverColor = t;
            break;
          case s.PRESSED:
            this.pressedColor = t;
            break;
          case s.DISABLED:
            this.disabledColor = t;
        }
      },
      _setCurrentStateSprite: function (t) {
        switch (this._getButtonState()) {
          case s.NORMAL:
            this.normalSprite = t;
            break;
          case s.HOVER:
            this.hoverSprite = t;
            break;
          case s.PRESSED:
            this.pressedSprite = t;
            break;
          case s.DISABLED:
            this.disabledSprite = t;
        }
      },
      update: function (t) {
        var e = this._getTarget();
        if (!this._transitionFinished && (this.transition === r.COLOR || this.transition === r.SCALE)) {
          this.time += t;
          var i = 1;
          if (this.duration > 0) {
            i = this.time / this.duration;
          }
          if (i >= 1) {
            i = 1;
          }
          if (this.transition === r.COLOR) {
            var n = this._fromColor.lerp(this._toColor, i);
            this._setTargetColor(n);
          } else if (this.transition === r.SCALE && this._originalScale) {
            e.scale = this._fromScale.lerp(this._toScale, i);
          }
          if (1 === i) {
            this._transitionFinished = true;
          }
        }
      },
      _registerNodeEvent: function () {
        this.node.on(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this);
        this.node.on(cc.Node.EventType.TOUCH_MOVE, this._onTouchMove, this);
        this.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancel, this);
        this.node.on(cc.Node.EventType.MOUSE_ENTER, this._onMouseMoveIn, this);
        this.node.on(cc.Node.EventType.MOUSE_LEAVE, this._onMouseMoveOut, this);
      },
      _unregisterNodeEvent: function () {
        this.node.off(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this);
        this.node.off(cc.Node.EventType.TOUCH_MOVE, this._onTouchMove, this);
        this.node.off(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
        this.node.off(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancel, this);
        this.node.off(cc.Node.EventType.MOUSE_ENTER, this._onMouseMoveIn, this);
        this.node.off(cc.Node.EventType.MOUSE_LEAVE, this._onMouseMoveOut, this);
      },
      _registerTargetEvent: function (t) {
        t.on(cc.Node.EventType.SCALE_CHANGED, this._onTargetScaleChanged, this);
      },
      _unregisterTargetEvent: function (t) {
        t.off(cc.Node.EventType.SCALE_CHANGED, this._onTargetScaleChanged, this);
      },
      _getTargetSprite: function (t) {
        var e = null;
        if (t) {
          e = t.getComponent(cc.Sprite);
        }
        return e;
      },
      _applyTarget: function () {
        var t = this._getTarget();
        this._sprite = this._getTargetSprite(t);
        if (!this._originalScale) {
          this._originalScale = cc.Vec2.ZERO;
        }
        this._originalScale.x = t.scaleX;
        this._originalScale.y = t.scaleY;
        this._registerTargetEvent(t);
      },
      _onTouchBegan: function (t) {
        if (this.interactable && this.enabledInHierarchy) {
          this._pressed = true;
          this._updateState();
          t.stopPropagation();
        }
      },
      _onTouchMove: function (t) {
        if (this.interactable && this.enabledInHierarchy && this._pressed) {
          var e;
          var i = t.touch;
          var n = this.node._hitTest(i.getLocation());
          var a = this._getTarget();
          var o = this._originalScale;
          if (this.transition === r.SCALE && o) {
            if (n) {
              this._fromScale.x = o.x;
              this._fromScale.y = o.y;
              this._toScale.x = o.x * this.zoomScale;
              this._toScale.y = o.y * this.zoomScale;
              this._transitionFinished = false;
            } else {
              this.time = 0;
              this._transitionFinished = true;
              a.setScale(o.x, o.y);
            }
          } else {
            e = n ? s.PRESSED : s.NORMAL;
            this._applyTransition(e);
          }
          t.stopPropagation();
        }
      },
      _onTouchEnded: function (t) {
        if (this.interactable && this.enabledInHierarchy) {
          if (this._pressed) {
            cc.Component.EventHandler.emitEvents(this.clickEvents, t);
            this.node.emit("click", this);
          }
          this._pressed = false;
          this._updateState();
          t.stopPropagation();
        }
      },
      _onTouchCancel: function () {
        if (this.interactable && this.enabledInHierarchy) {
          this._pressed = false;
          this._updateState();
        }
      },
      _onMouseMoveIn: function () {
        if (!this._pressed && this.interactable && this.enabledInHierarchy && (this.transition !== r.SPRITE || this.hoverSprite)) {
          if (!this._hovered) {
            this._hovered = true;
            this._updateState();
          }
        }
      },
      _onMouseMoveOut: function () {
        if (this._hovered) {
          this._hovered = false;
          this._updateState();
        }
      },
      _updateState: function () {
        var t = this._getButtonState();
        this._applyTransition(t);
        this._updateDisabledState();
      },
      _getButtonState: function () {
        return this.interactable ? this._pressed ? s.PRESSED : this._hovered ? s.HOVER : s.NORMAL : s.DISABLED;
      },
      _updateColorTransitionImmediately: function (t) {
        var e = this._getStateColor(t);
        this._setTargetColor(e);
        this._fromColor = e.clone();
        this._toColor = e;
      },
      _updateColorTransition: function (t) {
        if (t === s.DISABLED) {
          this._updateColorTransitionImmediately(t);
        } else {
          var e = this._getTarget();
          var i = this._getStateColor(t);
          this._fromColor = e.color.clone();
          this._toColor = i;
          this.time = 0;
          this._transitionFinished = false;
        }
      },
      _updateSpriteTransition: function (t) {
        var e = this._getStateSprite(t);
        if (this._sprite && e) {
          this._sprite.spriteFrame = e;
        }
      },
      _updateScaleTransition: function (t) {
        if (t === s.PRESSED) {
          this._zoomUp();
        } else {
          this._zoomBack();
        }
      },
      _zoomUp: function () {
        if (this._originalScale) {
          this._fromScale.x = this._originalScale.x;
          this._fromScale.y = this._originalScale.y;
          this._toScale.x = this._originalScale.x * this.zoomScale;
          this._toScale.y = this._originalScale.y * this.zoomScale;
          this.time = 0;
          this._transitionFinished = false;
        }
      },
      _zoomBack: function () {
        if (this._originalScale) {
          var t = this._getTarget();
          this._fromScale.x = t.scaleX;
          this._fromScale.y = t.scaleY;
          this._toScale.x = this._originalScale.x;
          this._toScale.y = this._originalScale.y;
          this.time = 0;
          this._transitionFinished = false;
        }
      },
      _updateTransition: function (t) {
        if (t === r.COLOR) {
          this._updateColorTransitionImmediately(s.NORMAL);
        } else if (t === r.SPRITE) {
          this._updateSpriteTransition(s.NORMAL);
        }
        this._updateState();
      },
      _applyTransition: function (t) {
        var e = this.transition;
        if (e === r.COLOR) {
          this._updateColorTransition(t);
        } else if (e === r.SPRITE) {
          this._updateSpriteTransition(t);
        } else if (e === r.SCALE) {
          this._updateScaleTransition(t);
        }
      },
      _resizeNodeToTargetNode: false,
      _updateDisabledState: function (t) {
        if (this._sprite && (this.enableAutoGrayEffect || t)) {
          var e = false;
          if (!(this.transition === r.SPRITE && this.disabledSprite)) {
            e = this.enableAutoGrayEffect && !this.interactable;
          }
          this._switchGrayMaterial(e, this._sprite);
        }
      }
    });
    cc.Button = e.exports = a;
  }, {
    "../utils/gray-sprite-state": 233,
    "./CCComponent": 100
  }],
  99: [function (t, e) {
    "use strict";

    var i = t("../camera/CCCamera");
    var n = t("./CCComponent");
    var r = cc.Class({
      name: "cc.Canvas",
      extends: n,
      editor: false,
      resetInEditor: false,
      statics: {
        instance: null
      },
      properties: {
        _designResolution: cc.size(960, 640),
        designResolution: {
          get: function () {
            return cc.size(this._designResolution);
          },
          set: function (t) {
            this._designResolution.width = t.width;
            this._designResolution.height = t.height;
            this.applySettings();
          },
          tooltip: false
        },
        _fitWidth: false,
        _fitHeight: true,
        fitHeight: {
          get: function () {
            return this._fitHeight;
          },
          set: function (t) {
            if (this._fitHeight !== t) {
              this._fitHeight = t;
              this.applySettings();
            }
          },
          tooltip: false
        },
        fitWidth: {
          get: function () {
            return this._fitWidth;
          },
          set: function (t) {
            if (this._fitWidth !== t) {
              this._fitWidth = t;
              this.applySettings();
            }
          },
          tooltip: false
        }
      },
      _fitDesignResolution: false,
      __preload: function () {
        if (!r.instance) {
          r.instance = this;
          this.applySettings();
          var t = this.getComponent(cc.Widget);
          if (t) {
            t.updateAlignment();
          }
        }
      },
      start: function () {
        if (!i.main && cc.game.renderType !== cc.game.RENDER_TYPE_CANVAS) {
          var t = new cc.Node("Main Camera");
          t.parent = this.node;
          t.setSiblingIndex(0);
          var e = t.addComponent(i);
          var n = i.ClearFlags;
          e.clearFlags = n.COLOR | n.DEPTH | n.STENCIL;
          e.depth = -1;
        }
      },
      onDestroy: function () {
        if (r.instance === this) {
          r.instance = null;
        }
      },
      applySettings: function () {
        var t;
        var e = cc.ResolutionPolicy;
        t = this.fitHeight && this.fitWidth ? e.SHOW_ALL : this.fitHeight || this.fitWidth ? this.fitWidth ? e.FIXED_WIDTH : e.FIXED_HEIGHT : e.NO_BORDER;
        var i = this._designResolution;
        cc.view.setDesignResolutionSize(i.width, i.height, t);
      }
    });
    cc.Canvas = e.exports = r;
  }, {
    "../camera/CCCamera": 86,
    "./CCComponent": 100
  }],
  100: [function (t, e) {
    "use strict";

    var i = t("../platform/CCObject");
    var n = t("../platform/js");
    var r = new (t("../platform/id-generater"))("Comp");
    i.Flags.IsOnEnableCalled;
    var s = i.Flags.IsOnLoadCalled;
    var a = !!cc.ActionManager;
    var o = cc.Class({
      name: "cc.Component",
      extends: i,
      ctor: function () {
        this._id = r.getNewId();
        this.__eventTargets = [];
      },
      properties: {
        node: {
          default: null,
          visible: false
        },
        name: {
          get: function () {
            if (this._name) {
              return this._name;
            }
            var t = cc.js.getClassName(this);
            var e = t.lastIndexOf(".");
            if (e >= 0) {
              t = t.slice(e + 1);
            }
            return this.node.name + "<" + t + ">";
          },
          set: function (t) {
            this._name = t;
          },
          visible: false
        },
        uuid: {
          get: function () {
            return this._id;
          },
          visible: false
        },
        __scriptAsset: false,
        _enabled: true,
        enabled: {
          get: function () {
            return this._enabled;
          },
          set: function (t) {
            if (this._enabled !== t && (this._enabled = t, this.node._activeInHierarchy)) {
              var e = cc.director._compScheduler;
              if (t) {
                e.enableComp(this);
              } else {
                e.disableComp(this);
              }
            }
          },
          visible: false,
          animatable: true
        },
        enabledInHierarchy: {
          get: function () {
            return this._enabled && this.node && this.node._activeInHierarchy;
          },
          visible: false
        },
        _isOnLoadCalled: {
          get: function () {
            return this._objFlags & s;
          }
        }
      },
      update: null,
      lateUpdate: null,
      __preload: null,
      onLoad: null,
      start: null,
      onEnable: null,
      onDisable: null,
      onDestroy: null,
      onFocusInEditor: null,
      onLostFocusInEditor: null,
      resetInEditor: null,
      addComponent: function (t) {
        return this.node.addComponent(t);
      },
      getComponent: function (t) {
        return this.node.getComponent(t);
      },
      getComponents: function (t) {
        return this.node.getComponents(t);
      },
      getComponentInChildren: function (t) {
        return this.node.getComponentInChildren(t);
      },
      getComponentsInChildren: function (t) {
        return this.node.getComponentsInChildren(t);
      },
      _getLocalBounds: null,
      onRestore: null,
      destroy: function () {
        if (this._super() && this._enabled && this.node._activeInHierarchy) {
          cc.director._compScheduler.disableComp(this);
        }
      },
      _onPreDestroy: function () {
        if (a) {
          cc.director.getActionManager().removeAllActionsFromTarget(this);
        }
        this.unscheduleAllCallbacks();
        for (var t = this.__eventTargets; t.length;) {
          var e = t.pop();
          if (e) {
            e.targetOff(this);
          }
        }
        cc.director._nodeActivator.destroyComp(this);
        this.node._removeComponent(this);
      },
      _instantiate: function (t) {
        if (!t) {
          t = cc.instantiate._clone(this, this);
        }
        t.node = null;
        return t;
      },
      schedule: function (t, e, i, n) {
        e = e || 0;
        i = isNaN(i) ? cc.macro.REPEAT_FOREVER : i;
        n = n || 0;
        var r = cc.director.getScheduler();
        var s = r.isTargetPaused(this);
        r.schedule(t, this, e, i, n, s);
      },
      scheduleOnce: function (t, e) {
        this.schedule(t, 0, 0, e);
      },
      unschedule: function (t) {
        if (t) {
          cc.director.getScheduler().unschedule(t, this);
        }
      },
      unscheduleAllCallbacks: function () {
        cc.director.getScheduler().unscheduleAllForTarget(this);
      }
    });
    o._requireComponent = null;
    o._executionOrder = 0;
    n.value(o, "_registerEditorProps", function (t, e) {
      var i = e.requireComponent;
      if (i) {
        t._requireComponent = i;
      }
      var n = e.executionOrder;
      if (n && "number" == typeof n) {
        t._executionOrder = n;
      }
    });
    o.prototype.__scriptUuid = "";
    cc.Component = e.exports = o;
  }, {
    "../platform/CCObject": 168,
    "../platform/id-generater": 179,
    "../platform/js": 183
  }],
  101: [function () {
    "use strict";

    cc.Component.EventHandler = cc.Class({
      name: "cc.ClickEvent",
      properties: {
        target: {
          default: null,
          type: cc.Node
        },
        component: "",
        _componentId: "",
        _componentName: {
          get: function () {
            this._genCompIdIfNeeded();
            return this._compId2Name(this._componentId);
          },
          set: function (t) {
            this._componentId = this._compName2Id(t);
          }
        },
        handler: {
          default: ""
        },
        customEventData: {
          default: ""
        }
      },
      statics: {
        emitEvents: function (t) {
          var e;
          if (arguments.length > 0) {
            var i = 0;
            for (var n = (e = Array(arguments.length - 1)).length; i < n; i++) {
              e[i] = arguments[i + 1];
            }
          }
          var r = 0;
          for (var s = t.length; r < s; r++) {
            var a = t[r];
            if (a instanceof cc.Component.EventHandler) {
              a.emit(e);
            }
          }
        }
      },
      emit: function (t) {
        var e = this.target;
        if (cc.isValid(e)) {
          this._genCompIdIfNeeded();
          var i = cc.js._getClassById(this._componentId);
          var n = e.getComponent(i);
          if (cc.isValid(n)) {
            var r = n[this.handler];
            if ("function" == typeof r) {
              if (null != this.customEventData && "" !== this.customEventData) {
                (t = t.slice()).push(this.customEventData);
              }
              r.apply(n, t);
            }
          }
        }
      },
      _compName2Id: function (t) {
        var e = cc.js.getClassByName(t);
        return cc.js._getClassId(e);
      },
      _compId2Name: function (t) {
        var e = cc.js._getClassById(t);
        return cc.js.getClassName(e);
      },
      _genCompIdIfNeeded: function () {
        if (!this._componentId) {
          this._componentName = this.component;
          this.component = "";
        }
      }
    });
  }, {}],
  102: [function (t, e) {
    "use strict";

    var i = t("../platform/CCMacro");
    var n = t("./CCRenderComponent");
    t("../assets/material/CCMaterial");
    var r = t("../renderer/utils/label/label-frame");
    var s = t("../utils/blend-func");
    var a = t("../renderer/utils/utils").deleteFromDynamicAtlas;
    var o = i.TextAlignment;
    var c = i.VerticalTextAlignment;
    var l = cc.Enum({
      NONE: 0,
      CLAMP: 1,
      SHRINK: 2,
      RESIZE_HEIGHT: 3
    });
    var h = cc.Enum({
      NONE: 0,
      BITMAP: 1,
      CHAR: 2
    });
    var u = cc.Class({
      name: "cc.Label",
      extends: n,
      mixins: [s],
      ctor: function () {
        this._actualFontSize = 0;
        this._assemblerData = null;
        this._frame = null;
        this._ttfTexture = null;
        this._letterTexture = null;
        if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {
          this._updateMaterial = this._updateMaterialCanvas;
        } else {
          this._updateMaterial = this._updateMaterialWebgl;
        }
        this._customOffsetX = 0;
        this._customOffsetY = 0;
        this._actualLineHeight = undefined;
      },
      editor: false,
      properties: {
        _string: {
          default: "",
          formerlySerializedAs: "_N$string"
        },
        string: {
          get: function () {
            return this._string;
          },
          set: function (t) {
            var e = this._string;
            this._string = "" + t;
            if (this.string !== e) {
              this.setVertsDirty();
            }
            this._checkStringEmpty();
          },
          multiline: true,
          tooltip: false
        },
        horizontalAlign: {
          default: o.LEFT,
          type: o,
          tooltip: false,
          notify: function (t) {
            if (this.horizontalAlign !== t) {
              this.setVertsDirty();
            }
          },
          animatable: false
        },
        verticalAlign: {
          default: c.TOP,
          type: c,
          tooltip: false,
          notify: function (t) {
            if (this.verticalAlign !== t) {
              this.setVertsDirty();
            }
          },
          animatable: false
        },
        actualFontSize: {
          displayName: "Actual Font Size",
          animatable: false,
          readonly: true,
          get: function () {
            return this._actualFontSize;
          },
          tooltip: false
        },
        _fontSize: 40,
        fontSize: {
          get: function () {
            return this._fontSize;
          },
          set: function (t) {
            if (this._fontSize !== t) {
              this._fontSize = t;
              this.setVertsDirty();
            }
          },
          range: [0, 512],
          tooltip: false
        },
        fontFamily: {
          default: "Arial",
          tooltip: false,
          notify: function (t) {
            if (this.fontFamily !== t) {
              this.setVertsDirty();
            }
          },
          animatable: false
        },
        _lineHeight: 40,
        lineHeight: {
          get: function () {
            return this._lineHeight;
          },
          set: function (t) {
            if (this._lineHeight !== t) {
              this._lineHeight = t;
              this.setVertsDirty();
            }
          },
          tooltip: false
        },
        overflow: {
          default: l.NONE,
          type: l,
          tooltip: false,
          notify: function (t) {
            if (this.overflow !== t) {
              this.setVertsDirty();
            }
          },
          animatable: false
        },
        _enableWrapText: true,
        enableWrapText: {
          get: function () {
            return this._enableWrapText;
          },
          set: function (t) {
            if (this._enableWrapText !== t) {
              this._enableWrapText = t;
              this.setVertsDirty();
            }
          },
          animatable: false,
          tooltip: false
        },
        _N$file: null,
        font: {
          get: function () {
            return this._N$file;
          },
          set: function (t) {
            if (this.font !== t) {
              if (!t) {
                this._isSystemFontUsed = true;
              }
              this._N$file = t;
              if (t && this._isSystemFontUsed) {
                this._isSystemFontUsed = false;
              }
              if (this.enabledInHierarchy) {
                this._forceUpdateRenderData();
              }
            }
          },
          type: cc.Font,
          tooltip: false,
          animatable: false
        },
        _isSystemFontUsed: true,
        useSystemFont: {
          get: function () {
            return this._isSystemFontUsed;
          },
          set: function (t) {
            if (this._isSystemFontUsed !== t) {
              this._isSystemFontUsed = !!t;
              if (t) {
                this.font = null;
                if (!this.enabledInHierarchy) {
                  return;
                }
                this._forceUpdateRenderData();
              }
              this.markForValidate();
            }
          },
          animatable: false,
          tooltip: false
        },
        _bmFontOriginalSize: {
          displayName: "BMFont Original Size",
          get: function () {
            return this._N$file instanceof cc.BitmapFont ? this._N$file.fontSize : -1;
          },
          visible: true,
          animatable: false
        },
        _spacingX: 0,
        spacingX: {
          get: function () {
            return this._spacingX;
          },
          set: function (t) {
            this._spacingX = t;
            this.setVertsDirty();
          },
          tooltip: false
        },
        _batchAsBitmap: false,
        cacheMode: {
          default: h.NONE,
          type: h,
          tooltip: false,
          notify: function (t) {
            if (this.cacheMode !== t) {
              if (!(t !== h.BITMAP || this.font instanceof cc.BitmapFont)) {
                if (this._frame) {
                  this._frame._resetDynamicAtlasFrame();
                }
              }
              if (t === h.CHAR) {
                this._ttfTexture = null;
              }
              if (this.enabledInHierarchy) {
                this._forceUpdateRenderData();
              }
            }
          },
          animatable: false
        },
        _styleFlags: 0,
        enableBold: {
          get: function () {
            return !!(1 & this._styleFlags);
          },
          set: function (t) {
            if (t) {
              this._styleFlags |= 1;
            } else {
              this._styleFlags &= -2;
            }
            this.setVertsDirty();
          },
          animatable: false,
          tooltip: false
        },
        enableItalic: {
          get: function () {
            return !!(2 & this._styleFlags);
          },
          set: function (t) {
            if (t) {
              this._styleFlags |= 2;
            } else {
              this._styleFlags &= -3;
            }
            this.setVertsDirty();
          },
          animatable: false,
          tooltip: false
        },
        enableUnderline: {
          get: function () {
            return !!(4 & this._styleFlags);
          },
          set: function (t) {
            if (t) {
              this._styleFlags |= 4;
            } else {
              this._styleFlags &= -5;
            }
            this.setVertsDirty();
          },
          animatable: false,
          tooltip: false
        },
        _underlineHeight: 0,
        underlineHeight: {
          get: function () {
            return this._underlineHeight;
          },
          set: function (t) {
            if (this._underlineHeight !== t) {
              this._underlineHeight = t;
              this.setVertsDirty();
            }
          },
          tooltip: false
        },
        customOffsetX: {
          get: function () {
            return this._customOffsetX;
          },
          set: function (t) {
            if (this._customOffsetX !== t) {
              this._customOffsetX = t;
              this.setVertsDirty();
            }
          }
        },
        customOffsetY: {
          get: function () {
            return this._customOffsetY;
          },
          set: function (t) {
            if (this._customOffsetY !== t) {
              this._customOffsetY = t;
              this.setVertsDirty();
            }
          }
        },
        actualLineHeight: {
          get: function () {
            return this._actualLineHeight || this._lineHeight;
          },
          set: function (t) {
            if (this._actualLineHeight !== t) {
              this._actualLineHeight = t;
              this.setVertsDirty();
            }
          }
        }
      },
      statics: {
        HorizontalAlign: o,
        VerticalAlign: c,
        Overflow: l,
        CacheMode: h,
        _shareAtlas: null,
        clearCharCache: function () {
          if (u._shareAtlas) {
            u._shareAtlas.clearAllCache();
          }
        }
      },
      onLoad: function () {
        if (this._batchAsBitmap && this.cacheMode === h.NONE) {
          this.cacheMode = h.BITMAP;
          this._batchAsBitmap = false;
        }
        if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {
          this.cacheMode = h.NONE;
        }
      },
      onEnable: function () {
        this._super();
        this.node.on(cc.Node.EventType.SIZE_CHANGED, this._nodeSizeChanged, this);
        this.node.on(cc.Node.EventType.ANCHOR_CHANGED, this.setVertsDirty, this);
        this.node.on(cc.Node.EventType.COLOR_CHANGED, this._nodeColorChanged, this);
        this._forceUpdateRenderData();
      },
      onDisable: function () {
        this._super();
        this.node.off(cc.Node.EventType.SIZE_CHANGED, this._nodeSizeChanged, this);
        this.node.off(cc.Node.EventType.ANCHOR_CHANGED, this.setVertsDirty, this);
        this.node.off(cc.Node.EventType.COLOR_CHANGED, this._nodeColorChanged, this);
      },
      onDestroy: function () {
        if (this._assembler && this._assembler._resetAssemblerData) {
          this._assembler._resetAssemblerData(this._assemblerData);
        }
        this._assemblerData = null;
        this._letterTexture = null;
        if (this._ttfTexture) {
          this._ttfTexture.destroy();
          this._ttfTexture = null;
        }
        this._super();
      },
      onRestore: false,
      _nodeSizeChanged: function () {
        if (this.overflow !== l.NONE) {
          this.setVertsDirty();
        }
      },
      _nodeColorChanged: function () {
        if (!(this.font instanceof cc.BitmapFont)) {
          this.setVertsDirty();
        }
      },
      setVertsDirty: function () {
        this._super();
      },
      _updateColor: function () {
        if (!(this.font instanceof cc.BitmapFont || this._srcBlendFactor === cc.macro.BlendFactor.SRC_ALPHA && this.node._renderFlag & cc.RenderFlow.FLAG_OPACITY)) {
          this.setVertsDirty();
        }
        n.prototype._updateColor.call(this);
      },
      _validateRender: function () {
        if (this.string) {
          if (this._materials[0]) {
            var t = this.font;
            if (!(t instanceof cc.BitmapFont)) {
              return;
            }
            var e = t.spriteFrame;
            if (e && e.textureLoaded() && t._fntConfig) {
              return;
            }
          }
          this.disableRender();
        } else {
          this.disableRender();
        }
      },
      _resetAssembler: function () {
        this._resetFrame();
        n.prototype._resetAssembler.call(this);
      },
      _resetFrame: function () {
        if (!(!this._frame || this.font instanceof cc.BitmapFont)) {
          a(this, this._frame);
          this._frame = null;
        }
      },
      _checkStringEmpty: function () {
        this.markForRender(!!this.string);
      },
      _on3DNodeChanged: function () {
        this._resetAssembler();
        this._applyFontTexture();
      },
      _onBMFontTextureLoaded: function () {
        this._frame._texture = this.font.spriteFrame._texture;
        this.markForRender(true);
        this._updateMaterial();
        if (this._assembler) {
          this._assembler.updateRenderData(this);
        }
      },
      _onBlendChanged: function () {
        if (this.useSystemFont && this.enabledInHierarchy) {
          this._forceUpdateRenderData();
        }
      },
      _applyFontTexture: function () {
        var t = this.font;
        if (t instanceof cc.BitmapFont) {
          var e = t.spriteFrame;
          this._frame = e;
          if (e) {
            e.onTextureLoaded(this._onBMFontTextureLoaded, this);
          }
        } else {
          if (!this._nativeTTF()) {
            if (!this._frame) {
              this._frame = new r();
            }
            if (this.cacheMode === h.CHAR) {
              this._letterTexture = this._assembler._getAssemblerData();
              this._frame._refreshTexture(this._letterTexture);
            } else if (!this._ttfTexture) {
              this._ttfTexture = new cc.Texture2D();
              this._assemblerData = this._assembler._getAssemblerData();
              this._ttfTexture.initWithElement(this._assemblerData.canvas);
            }
            if (this.cacheMode !== h.CHAR) {
              this._frame._resetDynamicAtlasFrame();
              this._frame._refreshTexture(this._ttfTexture);
              if (this._srcBlendFactor === cc.macro.BlendFactor.ONE) {
                this._ttfTexture.setPremultiplyAlpha(true);
              }
            }
            this._updateMaterial();
          }
          if (this._assembler) {
            this._assembler.updateRenderData(this);
          }
        }
        this.markForValidate();
      },
      _updateMaterialCanvas: function () {
        if (this._frame) {
          this._frame._texture._nativeUrl = this.uuid + "_texture";
        }
      },
      _updateMaterialWebgl: function () {
        var t = this.getMaterial(0);
        if (this._nativeTTF()) {
          if (t) {
            this._assembler._updateTTFMaterial(this);
          }
        } else if (this._frame) {
          if (t) {
            t.setProperty("texture", this._frame._texture);
          }
          s.prototype._updateMaterial.call(this);
        }
      },
      _forceUseCanvas: false,
      _useNativeTTF: function () {
        return cc.macro.ENABLE_NATIVE_TTF_RENDERER && !this._forceUseCanvas;
      },
      _nativeTTF: function () {
        return this._useNativeTTF() && !!this._assembler && !!this._assembler._updateTTFMaterial;
      },
      _forceUpdateRenderData: function () {
        this.setVertsDirty();
        this._resetAssembler();
        this._applyFontTexture();
      },
      _enableBold: function (t) {
        this.enableBold = !!t;
      },
      _enableItalics: function (t) {
        this.enableItalic = !!t;
      },
      _enableUnderline: function (t) {
        this.enableUnderline = !!t;
      }
    });
    cc.Label = e.exports = u;
  }, {
    "../assets/material/CCMaterial": 76,
    "../platform/CCMacro": 167,
    "../renderer/utils/label/label-frame": 198,
    "../renderer/utils/utils": 201,
    "../utils/blend-func": 230,
    "./CCRenderComponent": 109
  }],
  103: [function (t, e) {
    "use strict";

    var i = cc.Class({
      name: "cc.LabelOutline",
      extends: t("./CCComponent"),
      editor: false,
      properties: {
        _color: cc.Color.WHITE,
        _width: 1,
        color: {
          tooltip: false,
          get: function () {
            return this._color.clone();
          },
          set: function (t) {
            if (!this._color.equals(t)) {
              this._color.set(t);
            }
            this._updateRenderData();
          }
        },
        width: {
          tooltip: false,
          get: function () {
            return this._width;
          },
          set: function (t) {
            if (this._width !== t) {
              this._width = t;
              this._updateRenderData();
            }
          },
          range: [0, 512]
        }
      },
      onEnable: function () {
        this._updateRenderData();
      },
      onDisable: function () {
        this._updateRenderData();
      },
      _updateRenderData: function () {
        var t = this.node.getComponent(cc.Label);
        if (t) {
          t.setVertsDirty();
        }
      }
    });
    cc.LabelOutline = e.exports = i;
  }, {
    "./CCComponent": 100
  }],
  104: [function (t, e) {
    "use strict";

    var i = cc.Class({
      name: "cc.LabelShadow",
      extends: t("./CCComponent"),
      editor: false,
      properties: {
        _color: cc.Color.WHITE,
        _offset: cc.v2(2, 2),
        _blur: 2,
        color: {
          tooltip: false,
          get: function () {
            return this._color.clone();
          },
          set: function (t) {
            if (!this._color.equals(t)) {
              this._color.set(t);
            }
            this._updateRenderData();
          }
        },
        offset: {
          tooltip: false,
          get: function () {
            return this._offset;
          },
          set: function (t) {
            this._offset = t;
            this._updateRenderData();
          }
        },
        blur: {
          tooltip: false,
          get: function () {
            return this._blur;
          },
          set: function (t) {
            this._blur = t;
            this._updateRenderData();
          },
          range: [0, 1024]
        }
      },
      onEnable: function () {
        this._updateRenderData();
      },
      onDisable: function () {
        this._updateRenderData();
      },
      _updateRenderData: function () {
        var t = this.node.getComponent(cc.Label);
        if (t) {
          t.setVertsDirty();
        }
      }
    });
    cc.LabelShadow = e.exports = i;
  }, {
    "./CCComponent": 100
  }],
  105: [function (t, e) {
    "use strict";

    var i = t("../CCNode").EventType;
    var n = cc.Enum({
      NONE: 0,
      HORIZONTAL: 1,
      VERTICAL: 2,
      GRID: 3
    });
    var r = cc.Enum({
      NONE: 0,
      CONTAINER: 1,
      CHILDREN: 2
    });
    var s = cc.Enum({
      HORIZONTAL: 0,
      VERTICAL: 1
    });
    var a = cc.Enum({
      BOTTOM_TO_TOP: 0,
      TOP_TO_BOTTOM: 1
    });
    var o = cc.Enum({
      LEFT_TO_RIGHT: 0,
      RIGHT_TO_LEFT: 1
    });
    var c = cc.Class({
      name: "cc.Layout",
      extends: t("./CCComponent"),
      editor: false,
      properties: {
        _layoutSize: cc.size(300, 200),
        _layoutDirty: {
          default: true,
          serializable: false
        },
        _resize: r.NONE,
        _N$layoutType: n.NONE,
        type: {
          type: n,
          get: function () {
            return this._N$layoutType;
          },
          set: function (t) {
            this._N$layoutType = t;
            this._doLayoutDirty();
          },
          tooltip: false,
          animatable: false
        },
        resizeMode: {
          type: r,
          tooltip: false,
          animatable: false,
          get: function () {
            return this._resize;
          },
          set: function (t) {
            if (!(this.type === n.NONE && t === r.CHILDREN)) {
              this._resize = t;
              this._doLayoutDirty();
            }
          }
        },
        cellSize: {
          default: cc.size(40, 40),
          tooltip: false,
          type: cc.Size,
          notify: function () {
            this._doLayoutDirty();
          }
        },
        startAxis: {
          default: s.HORIZONTAL,
          tooltip: false,
          type: s,
          notify: function () {
            this._doLayoutDirty();
          },
          animatable: false
        },
        paddingLeft: {
          default: 0,
          tooltip: false,
          notify: function () {
            this._doLayoutDirty();
          }
        },
        paddingRight: {
          default: 0,
          tooltip: false,
          notify: function () {
            this._doLayoutDirty();
          }
        },
        paddingTop: {
          default: 0,
          tooltip: false,
          notify: function () {
            this._doLayoutDirty();
          }
        },
        paddingBottom: {
          default: 0,
          tooltip: false,
          notify: function () {
            this._doLayoutDirty();
          }
        },
        spacingX: {
          default: 0,
          notify: function () {
            this._doLayoutDirty();
          },
          tooltip: false
        },
        spacingY: {
          default: 0,
          notify: function () {
            this._doLayoutDirty();
          },
          tooltip: false
        },
        verticalDirection: {
          default: a.TOP_TO_BOTTOM,
          type: a,
          notify: function () {
            this._doLayoutDirty();
          },
          tooltip: false,
          animatable: false
        },
        horizontalDirection: {
          default: o.LEFT_TO_RIGHT,
          type: o,
          notify: function () {
            this._doLayoutDirty();
          },
          tooltip: false,
          animatable: false
        },
        affectedByScale: {
          default: false,
          notify: function () {
            this._doLayoutDirty();
          },
          animatable: false,
          tooltip: false
        }
      },
      statics: {
        Type: n,
        VerticalDirection: a,
        HorizontalDirection: o,
        ResizeMode: r,
        AxisDirection: s
      },
      onEnable: function () {
        this._addEventListeners();
        if (this.node.getContentSize().equals(cc.size(0, 0))) {
          this.node.setContentSize(this._layoutSize);
        }
        this._doLayoutDirty();
      },
      onDisable: function () {
        this._removeEventListeners();
      },
      _doLayoutDirty: function () {
        this._layoutDirty = true;
      },
      _doScaleDirty: function () {
        this._layoutDirty = this._layoutDirty || this.affectedByScale;
      },
      _addEventListeners: function () {
        cc.director.on(cc.Director.EVENT_AFTER_UPDATE, this.updateLayout, this);
        this.node.on(i.SIZE_CHANGED, this._resized, this);
        this.node.on(i.ANCHOR_CHANGED, this._doLayoutDirty, this);
        this.node.on(i.CHILD_ADDED, this._childAdded, this);
        this.node.on(i.CHILD_REMOVED, this._childRemoved, this);
        this.node.on(i.CHILD_REORDER, this._doLayoutDirty, this);
        this._addChildrenEventListeners();
      },
      _removeEventListeners: function () {
        cc.director.off(cc.Director.EVENT_AFTER_UPDATE, this.updateLayout, this);
        this.node.off(i.SIZE_CHANGED, this._resized, this);
        this.node.off(i.ANCHOR_CHANGED, this._doLayoutDirty, this);
        this.node.off(i.CHILD_ADDED, this._childAdded, this);
        this.node.off(i.CHILD_REMOVED, this._childRemoved, this);
        this.node.off(i.CHILD_REORDER, this._doLayoutDirty, this);
        this._removeChildrenEventListeners();
      },
      _addChildrenEventListeners: function () {
        var t = this.node.children;
        for (var e = 0; e < t.length; ++e) {
          var n = t[e];
          n.on(i.SCALE_CHANGED, this._doScaleDirty, this);
          n.on(i.SIZE_CHANGED, this._doLayoutDirty, this);
          n.on(i.POSITION_CHANGED, this._doLayoutDirty, this);
          n.on(i.ANCHOR_CHANGED, this._doLayoutDirty, this);
          n.on("active-in-hierarchy-changed", this._doLayoutDirty, this);
        }
      },
      _removeChildrenEventListeners: function () {
        var t = this.node.children;
        for (var e = 0; e < t.length; ++e) {
          var n = t[e];
          n.off(i.SCALE_CHANGED, this._doScaleDirty, this);
          n.off(i.SIZE_CHANGED, this._doLayoutDirty, this);
          n.off(i.POSITION_CHANGED, this._doLayoutDirty, this);
          n.off(i.ANCHOR_CHANGED, this._doLayoutDirty, this);
          n.off("active-in-hierarchy-changed", this._doLayoutDirty, this);
        }
      },
      _childAdded: function (t) {
        t.on(i.SCALE_CHANGED, this._doScaleDirty, this);
        t.on(i.SIZE_CHANGED, this._doLayoutDirty, this);
        t.on(i.POSITION_CHANGED, this._doLayoutDirty, this);
        t.on(i.ANCHOR_CHANGED, this._doLayoutDirty, this);
        t.on("active-in-hierarchy-changed", this._doLayoutDirty, this);
        this._doLayoutDirty();
      },
      _childRemoved: function (t) {
        t.off(i.SCALE_CHANGED, this._doScaleDirty, this);
        t.off(i.SIZE_CHANGED, this._doLayoutDirty, this);
        t.off(i.POSITION_CHANGED, this._doLayoutDirty, this);
        t.off(i.ANCHOR_CHANGED, this._doLayoutDirty, this);
        t.off("active-in-hierarchy-changed", this._doLayoutDirty, this);
        this._doLayoutDirty();
      },
      _resized: function () {
        this._layoutSize = this.node.getContentSize();
        this._doLayoutDirty();
      },
      _doLayoutHorizontally: function (t, e, i, s) {
        var c = this.node.getAnchorPoint();
        var l = this.node.children;
        var h = 1;
        var u = this.paddingLeft;
        var f = -c.x * t;
        if (this.horizontalDirection === o.RIGHT_TO_LEFT) {
          h = -1;
          f = (1 - c.x) * t;
          u = this.paddingRight;
        }
        var d = f + h * u - h * this.spacingX;
        var _ = 0;
        var p = 0;
        var v = 0;
        var g = 0;
        var m = 0;
        var y = 0;
        var T = 0;
        for (var E = 0; E < l.length; ++E) {
          if ((x = l[E]).activeInHierarchy) {
            T++;
          }
        }
        var A = this.cellSize.width;
        if (this.type !== n.GRID && this.resizeMode === r.CHILDREN) {
          A = (t - (this.paddingLeft + this.paddingRight) - (T - 1) * this.spacingX) / T;
        }
        for (E = 0; E < l.length; ++E) {
          var x = l[E];
          var C = this._getUsedScaleValue(x.scaleX);
          var b = this._getUsedScaleValue(x.scaleY);
          if (x.activeInHierarchy) {
            if (this._resize === r.CHILDREN) {
              x.width = A / C;
              if (this.type === n.GRID) {
                x.height = this.cellSize.height / b;
              }
            }
            var S = x.anchorX;
            var R = x.width * C;
            var M = x.height * b;
            if (v > p) {
              p = v;
            }
            if (M >= p) {
              v = p;
              p = M;
              y = x.getAnchorPoint().y;
            }
            if (this.horizontalDirection === o.RIGHT_TO_LEFT) {
              S = 1 - x.anchorX;
            }
            d = d + h * S * R + h * this.spacingX;
            var w = h * (1 - S) * R;
            if (e) {
              var I = d + w + h * (h > 0 ? this.paddingRight : this.paddingLeft);
              var O = this.horizontalDirection === o.LEFT_TO_RIGHT && I > (1 - c.x) * t;
              var L = this.horizontalDirection === o.RIGHT_TO_LEFT && I < -c.x * t;
              if (O || L) {
                if (M >= p) {
                  if (0 === v) {
                    v = p;
                  }
                  _ += v;
                  v = p;
                } else {
                  _ += p;
                  v = M;
                  p = 0;
                }
                d = f + h * (u + S * R);
                g++;
              }
            }
            var P = i(x, _, g);
            if (t >= R + this.paddingLeft + this.paddingRight && s) {
              x.setPosition(cc.v2(d, P));
            }
            var D;
            var N = 1;
            var F = 0 === p ? M : p;
            if (this.verticalDirection === a.TOP_TO_BOTTOM) {
              m = m || this.node._contentSize.height;
              if ((D = P + (N = -1) * (F * y + this.paddingBottom)) < m) {
                m = D;
              }
            } else {
              m = m || -this.node._contentSize.height;
              if ((D = P + N * (F * y + this.paddingTop)) > m) {
                m = D;
              }
            }
            d += w;
          }
        }
        return m;
      },
      _getVerticalBaseHeight: function (t) {
        var e = 0;
        var i = 0;
        if (this.resizeMode === r.CONTAINER) {
          for (var n = 0; n < t.length; ++n) {
            var s = t[n];
            if (s.activeInHierarchy) {
              i++;
              e += s.height * this._getUsedScaleValue(s.scaleY);
            }
          }
          e += (i - 1) * this.spacingY + this.paddingBottom + this.paddingTop;
        } else {
          e = this.node.getContentSize().height;
        }
        return e;
      },
      _doLayoutVertically: function (t, e, i, s) {
        var c = this.node.getAnchorPoint();
        var l = this.node.children;
        var h = 1;
        var u = this.paddingBottom;
        var f = -c.y * t;
        if (this.verticalDirection === a.TOP_TO_BOTTOM) {
          h = -1;
          f = (1 - c.y) * t;
          u = this.paddingTop;
        }
        var d = f + h * u - h * this.spacingY;
        var _ = 0;
        var p = 0;
        var v = 0;
        var g = 0;
        var m = 0;
        var y = 0;
        var T = 0;
        for (var E = 0; E < l.length; ++E) {
          if ((x = l[E]).activeInHierarchy) {
            T++;
          }
        }
        var A = this.cellSize.height;
        if (this.type !== n.GRID && this.resizeMode === r.CHILDREN) {
          A = (t - (this.paddingTop + this.paddingBottom) - (T - 1) * this.spacingY) / T;
        }
        for (E = 0; E < l.length; ++E) {
          var x = l[E];
          var C = this._getUsedScaleValue(x.scaleX);
          var b = this._getUsedScaleValue(x.scaleY);
          if (x.activeInHierarchy) {
            if (this.resizeMode === r.CHILDREN) {
              x.height = A / b;
              if (this.type === n.GRID) {
                x.width = this.cellSize.width / C;
              }
            }
            var S = x.anchorY;
            var R = x.width * C;
            var M = x.height * b;
            if (v > p) {
              p = v;
            }
            if (R >= p) {
              v = p;
              p = R;
              y = x.getAnchorPoint().x;
            }
            if (this.verticalDirection === a.TOP_TO_BOTTOM) {
              S = 1 - x.anchorY;
            }
            d = d + h * S * M + h * this.spacingY;
            var w = h * (1 - S) * M;
            if (e) {
              var I = d + w + h * (h > 0 ? this.paddingTop : this.paddingBottom);
              var O = this.verticalDirection === a.BOTTOM_TO_TOP && I > (1 - c.y) * t;
              var L = this.verticalDirection === a.TOP_TO_BOTTOM && I < -c.y * t;
              if (O || L) {
                if (R >= p) {
                  if (0 === v) {
                    v = p;
                  }
                  _ += v;
                  v = p;
                } else {
                  _ += p;
                  v = R;
                  p = 0;
                }
                d = f + h * (u + S * M);
                g++;
              }
            }
            var P = i(x, _, g);
            if (t >= M + (this.paddingTop + this.paddingBottom) && s) {
              x.setPosition(cc.v2(P, d));
            }
            var D;
            var N = 1;
            var F = 0 === p ? R : p;
            if (this.horizontalDirection === o.RIGHT_TO_LEFT) {
              N = -1;
              m = m || this.node._contentSize.width;
              if ((D = P + N * (F * y + this.paddingLeft)) < m) {
                m = D;
              }
            } else {
              m = m || -this.node._contentSize.width;
              if ((D = P + N * (F * y + this.paddingRight)) > m) {
                m = D;
              }
            }
            d += w;
          }
        }
        return m;
      },
      _doLayoutBasic: function () {
        var t = this.node.children;
        var e = null;
        for (var i = 0; i < t.length; ++i) {
          var n = t[i];
          if (n.activeInHierarchy) {
            if (e) {
              e.union(e, n.getBoundingBoxToWorld());
            } else {
              e = n.getBoundingBoxToWorld();
            }
          }
        }
        if (e) {
          var r = this.node.convertToNodeSpaceAR(cc.v2(e.x, e.y));
          r = cc.v2(r.x - this.paddingLeft, r.y - this.paddingBottom);
          var s = this.node.convertToNodeSpaceAR(cc.v2(e.xMax, e.yMax));
          var a = (s = cc.v2(s.x + this.paddingRight, s.y + this.paddingTop)).sub(r);
          if (0 !== (a = cc.size(parseFloat(a.x.toFixed(2)), parseFloat(a.y.toFixed(2)))).width) {
            var o = -r.x / a.width;
            this.node.anchorX = parseFloat(o.toFixed(2));
          }
          if (0 !== a.height) {
            var c = -r.y / a.height;
            this.node.anchorY = parseFloat(c.toFixed(2));
          }
          this.node.setContentSize(a);
        }
      },
      _doLayoutGridAxisHorizontal: function (t, e) {
        var i = e.width;
        var n = 1;
        var s = -t.y * e.height;
        var o = this.paddingBottom;
        if (this.verticalDirection === a.TOP_TO_BOTTOM) {
          n = -1;
          s = (1 - t.y) * e.height;
          o = this.paddingTop;
        }
        var c = function (t, e, i) {
          return s + n * (e + t.anchorY * t.height * this._getUsedScaleValue(t.scaleY) + o + i * this.spacingY);
        }.bind(this);
        var l = 0;
        if (this.resizeMode === r.CONTAINER) {
          var h = this._doLayoutHorizontally(i, true, c, false);
          if ((l = s - h) < 0) {
            l *= -1;
          }
          s = -t.y * l;
          if (this.verticalDirection === a.TOP_TO_BOTTOM) {
            n = -1;
            s = (1 - t.y) * l;
          }
        }
        this._doLayoutHorizontally(i, true, c, true);
        if (this.resizeMode === r.CONTAINER) {
          this.node.setContentSize(i, l);
        }
      },
      _doLayoutGridAxisVertical: function (t, e) {
        var i = e.height;
        var n = 1;
        var s = -t.x * e.width;
        var a = this.paddingLeft;
        if (this.horizontalDirection === o.RIGHT_TO_LEFT) {
          n = -1;
          s = (1 - t.x) * e.width;
          a = this.paddingRight;
        }
        var c = function (t, e, i) {
          return s + n * (e + t.anchorX * t.width * this._getUsedScaleValue(t.scaleX) + a + i * this.spacingX);
        }.bind(this);
        var l = 0;
        if (this.resizeMode === r.CONTAINER) {
          var h = this._doLayoutVertically(i, true, c, false);
          if ((l = s - h) < 0) {
            l *= -1;
          }
          s = -t.x * l;
          if (this.horizontalDirection === o.RIGHT_TO_LEFT) {
            n = -1;
            s = (1 - t.x) * l;
          }
        }
        this._doLayoutVertically(i, true, c, true);
        if (this.resizeMode === r.CONTAINER) {
          this.node.setContentSize(l, i);
        }
      },
      _doLayoutGrid: function () {
        var t = this.node.getAnchorPoint();
        var e = this.node.getContentSize();
        if (this.startAxis === s.HORIZONTAL) {
          this._doLayoutGridAxisHorizontal(t, e);
        } else if (this.startAxis === s.VERTICAL) {
          this._doLayoutGridAxisVertical(t, e);
        }
      },
      _getHorizontalBaseWidth: function (t) {
        var e = 0;
        var i = 0;
        if (this.resizeMode === r.CONTAINER) {
          for (var n = 0; n < t.length; ++n) {
            var s = t[n];
            if (s.activeInHierarchy) {
              i++;
              e += s.width * this._getUsedScaleValue(s.scaleX);
            }
          }
          e += (i - 1) * this.spacingX + this.paddingLeft + this.paddingRight;
        } else {
          e = this.node.getContentSize().width;
        }
        return e;
      },
      _doLayout: function () {
        if (this.type === n.HORIZONTAL) {
          var t = this._getHorizontalBaseWidth(this.node.children);
          this._doLayoutHorizontally(t, false, function (t) {
            return t.y;
          }, true);
          this.node.width = t;
        } else if (this.type === n.VERTICAL) {
          var e = this._getVerticalBaseHeight(this.node.children);
          this._doLayoutVertically(e, false, function (t) {
            return t.x;
          }, true);
          this.node.height = e;
        } else if (this.type === n.NONE) {
          if (this.resizeMode === r.CONTAINER) {
            this._doLayoutBasic();
          }
        } else if (this.type === n.GRID) {
          this._doLayoutGrid();
        }
      },
      _getUsedScaleValue: function (t) {
        return this.affectedByScale ? Math.abs(t) : 1;
      },
      updateLayout: function () {
        if (this._layoutDirty && this.node.children.length > 0 && this.node.children.find(function (t) {
          return t.activeInHierarchy;
        })) {
          this._doLayout();
          this._layoutDirty = false;
        }
      }
    });
    cc.Layout = e.exports = c;
  }, {
    "../CCNode": 26,
    "./CCComponent": 100
  }],
  106: [function (t, e) {
    "use strict";

    var i = t("../../renderer/gfx") && t("../../renderer/gfx").__esModule ? t("../../renderer/gfx") : {
      default: t("../../renderer/gfx")
    };
    var n = t("../value-types/mat4") && t("../value-types/mat4").__esModule ? t("../value-types/mat4") : {
      default: t("../value-types/mat4")
    };
    var r = t("../value-types/vec2") && t("../value-types/vec2").__esModule ? t("../value-types/vec2") : {
      default: t("../value-types/vec2")
    };
    var s = t("../assets/material/material-variant") && t("../assets/material/material-variant").__esModule ? t("../assets/material/material-variant") : {
      default: t("../assets/material/material-variant")
    };
    var o = t("../utils/misc");
    var c = t("./CCRenderComponent");
    var l = t("../renderer/render-flow");
    var h = t("../graphics/graphics");
    var u = new r.default();
    var f = new n.default();
    var d = [];
    function _(t, e, i) {
      d.length = 0;
      var n = 2 * Math.PI / i;
      for (var r = 0; r < i; ++r) {
        d.push(cc.v2(e.x * Math.cos(n * r) + t.x, e.y * Math.sin(n * r) + t.y));
      }
      return d;
    }
    var p = cc.Enum({
      RECT: 0,
      ELLIPSE: 1,
      IMAGE_STENCIL: 2
    });
    var v = cc.Class({
      name: "cc.Mask",
      extends: c,
      editor: false,
      ctor: function () {
        this._graphics = null;
        this._enableMaterial = null;
        this._exitMaterial = null;
        this._clearMaterial = null;
      },
      properties: {
        _spriteFrame: {
          default: null,
          type: cc.SpriteFrame
        },
        _type: p.RECT,
        type: {
          get: function () {
            return this._type;
          },
          set: function (t) {
            if (this._type !== t) {
              this._resetAssembler();
            }
            this._type = t;
            if (this._type !== p.IMAGE_STENCIL) {
              this.spriteFrame = null;
              this.alphaThreshold = 0;
              this._updateGraphics();
            }
            this._activateMaterial();
          },
          type: p,
          tooltip: false
        },
        spriteFrame: {
          type: cc.SpriteFrame,
          tooltip: false,
          get: function () {
            return this._spriteFrame;
          },
          set: function (t) {
            var e = this._spriteFrame;
            if (e !== t) {
              if (e) {
                e.off("load", this.setVertsDirty, this);
              }
              this._spriteFrame = t;
              this.setVertsDirty();
              this._updateMaterial();
            }
          }
        },
        alphaThreshold: {
          default: .1,
          type: cc.Float,
          range: [0, 1, .1],
          slide: true,
          tooltip: false,
          notify: function () {
            if (cc.game.renderType !== cc.game.RENDER_TYPE_CANVAS) {
              this._updateMaterial();
            }
          }
        },
        inverted: {
          default: false,
          type: cc.Boolean,
          tooltip: false,
          notify: function () {
            cc.game.renderType;
            cc.game.RENDER_TYPE_CANVAS;
          }
        },
        _segments: 64,
        segements: {
          get: function () {
            return this._segments;
          },
          set: function (t) {
            this._segments = o.clampf(t, 3, 1e4);
            this._updateGraphics();
          },
          type: cc.Integer,
          tooltip: false
        },
        _resizeToTarget: {
          animatable: false,
          set: function (t) {
            if (t) {
              this._resizeNodeToTargetNode();
            }
          }
        }
      },
      statics: {
        Type: p
      },
      onRestore: function () {
        this._activateMaterial();
      },
      onEnable: function () {
        this._super();
        if (this._type !== p.IMAGE_STENCIL) {
          this._updateGraphics();
        } else if (this._spriteFrame) {
          this._spriteFrame.once("load", this.setVertsDirty, this);
        }
        this.node.on(cc.Node.EventType.POSITION_CHANGED, this._updateGraphics, this);
        this.node.on(cc.Node.EventType.ROTATION_CHANGED, this._updateGraphics, this);
        this.node.on(cc.Node.EventType.SCALE_CHANGED, this._updateGraphics, this);
        this.node.on(cc.Node.EventType.SIZE_CHANGED, this._updateGraphics, this);
        this.node.on(cc.Node.EventType.ANCHOR_CHANGED, this._updateGraphics, this);
      },
      onDisable: function () {
        this._super();
        this.node.off(cc.Node.EventType.POSITION_CHANGED, this._updateGraphics, this);
        this.node.off(cc.Node.EventType.ROTATION_CHANGED, this._updateGraphics, this);
        this.node.off(cc.Node.EventType.SCALE_CHANGED, this._updateGraphics, this);
        this.node.off(cc.Node.EventType.SIZE_CHANGED, this._updateGraphics, this);
        this.node.off(cc.Node.EventType.ANCHOR_CHANGED, this._updateGraphics, this);
        this.node._renderFlag &= ~l.FLAG_POST_RENDER;
      },
      onDestroy: function () {
        this._super();
        this._removeGraphics();
        if (this._spriteFrame) {
          this._spriteFrame.off("load", this.setVertsDirty, this);
        }
      },
      _resizeNodeToTargetNode: false,
      _validateRender: function () {
        if (this._type === p.IMAGE_STENCIL) {
          var t = this._spriteFrame;
          if (!(t && t.textureLoaded())) {
            this.disableRender();
          }
        }
      },
      _activateMaterial: function () {
        this._createGraphics();
        var t = this._materials[0];
        (t = t ? s.default.create(t, this) : s.default.createWithBuiltin("2d-sprite", this)).define("USE_ALPHA_TEST", true);
        if (this._type === p.IMAGE_STENCIL) {
          t.define("CC_USE_MODEL", false);
          t.define("USE_TEXTURE", true);
        } else {
          t.define("CC_USE_MODEL", true);
          t.define("USE_TEXTURE", false);
        }
        if (!this._enableMaterial) {
          this._enableMaterial = s.default.createWithBuiltin("2d-sprite", this);
        }
        if (!this._exitMaterial) {
          this._exitMaterial = s.default.createWithBuiltin("2d-sprite", this);
          this._exitMaterial.setStencilEnabled(i.default.STENCIL_DISABLE);
        }
        if (!this._clearMaterial) {
          this._clearMaterial = s.default.createWithBuiltin("clear-stencil", this);
        }
        this.setMaterial(0, t);
        this._graphics._materials[0] = t;
        this._updateMaterial();
      },
      _updateMaterial: function () {
        var t = this._materials[0];
        if (t) {
          if (this._type === p.IMAGE_STENCIL && this.spriteFrame) {
            var e = this.spriteFrame.getTexture();
            t.setProperty("texture", e);
          }
          t.setProperty("alphaThreshold", this.alphaThreshold);
        }
      },
      _createGraphics: function () {
        if (!this._graphics) {
          this._graphics = new h();
          cc.Assembler.init(this._graphics);
          this._graphics.node = this.node;
          this._graphics.lineWidth = 0;
          this._graphics.strokeColor = cc.color(0, 0, 0, 0);
        }
      },
      _updateGraphics: function () {
        if (this.enabledInHierarchy) {
          var t = this.node;
          var e = this._graphics;
          e.clear(false);
          var i = t._contentSize.width;
          var n = t._contentSize.height;
          var r = -i * t._anchorPoint.x;
          var s = -n * t._anchorPoint.y;
          if (this._type === p.RECT) {
            e.rect(r, s, i, n);
          } else if (this._type === p.ELLIPSE) {
            var a = _(cc.v2(r + i / 2, s + n / 2), {
              x: i / 2,
              y: n / 2
            }, this._segments);
            for (var o = 0; o < a.length; ++o) {
              var c = a[o];
              if (0 === o) {
                e.moveTo(c.x, c.y);
              } else {
                e.lineTo(c.x, c.y);
              }
            }
            e.close();
          }
          if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {
            e.stroke();
          } else {
            e.fill();
          }
          this.setVertsDirty();
        }
      },
      _removeGraphics: function () {
        if (this._graphics) {
          this._graphics.destroy();
          this._graphics._destroyImmediate();
          this._graphics = null;
        }
      },
      _hitTest: function (t) {
        var e = this.node;
        var i = e.getContentSize();
        var s = i.width;
        var a = i.height;
        e._updateWorldMatrix();
        if (!n.default.invert(f, e._worldMatrix)) {
          return false;
        }
        r.default.transformMat4(u, t, f);
        u.x += e._anchorPoint.x * s;
        u.y += e._anchorPoint.y * a;
        var c = false;
        if (this.type === p.RECT || this.type === p.IMAGE_STENCIL) {
          c = u.x >= 0 && u.y >= 0 && u.x <= s && u.y <= a;
        } else if (this.type === p.ELLIPSE) {
          var l = s / 2;
          var h = a / 2;
          var d = u.x - .5 * s;
          var _ = u.y - .5 * a;
          c = d * d / (l * l) + _ * _ / (h * h) < 1;
        }
        if (this.inverted) {
          c = !c;
        }
        return c;
      },
      markForRender: function (t) {
        var e = l.FLAG_RENDER | l.FLAG_UPDATE_RENDER_DATA | l.FLAG_POST_RENDER;
        if (t) {
          this.node._renderFlag |= e;
          this.markForValidate();
        } else if (!t) {
          this.node._renderFlag &= ~e;
        }
      },
      disableRender: function () {
        this.node._renderFlag &= ~(l.FLAG_RENDER | l.FLAG_UPDATE_RENDER_DATA | l.FLAG_POST_RENDER);
      }
    });
    cc.Mask = e.exports = v;
  }, {
    "../../renderer/gfx": 282,
    "../assets/material/material-variant": 83,
    "../graphics/graphics": 151,
    "../renderer/render-flow": 194,
    "../utils/misc": 236,
    "../value-types/mat4": 253,
    "../value-types/vec2": 260,
    "./CCRenderComponent": 109
  }],
  107: [function (t, e) {
    "use strict";

    var i = t("../utils/misc");
    var n = t("./CCComponent");
    var r = cc.Enum({
      HORIZONTAL: 0,
      VERTICAL: 1,
      FILLED: 2
    });
    var s = cc.Class({
      name: "cc.ProgressBar",
      extends: n,
      editor: false,
      _initBarSprite: function () {
        if (this.barSprite) {
          var t = this.barSprite.node;
          if (!t) {
            return;
          }
          var e = this.node.getContentSize();
          var i = this.node.getAnchorPoint();
          var n = t.getContentSize();
          if (t.parent === this.node) {
            this.node.setContentSize(n);
          }
          if (this.barSprite.fillType === cc.Sprite.FillType.RADIAL) {
            this.mode = r.FILLED;
          }
          var s = t.getContentSize();
          if (this.mode === r.HORIZONTAL) {
            this.totalLength = s.width;
          } else if (this.mode === r.VERTICAL) {
            this.totalLength = s.height;
          } else {
            this.totalLength = this.barSprite.fillRange;
          }
          if (t.parent === this.node) {
            var a = -e.width * i.x;
            t.setPosition(cc.v2(a, 0));
          }
        }
      },
      _updateBarStatus: function () {
        if (this.barSprite) {
          var t = this.barSprite.node;
          if (!t) {
            return;
          }
          var e;
          var n;
          var s;
          var a = t.getAnchorPoint();
          var o = t.getContentSize();
          var c = t.getPosition();
          var l = cc.v2(0, .5);
          var h = i.clamp01(this.progress);
          var u = this.totalLength * h;
          switch (this.mode) {
            case r.HORIZONTAL:
              if (this.reverse) {
                l = cc.v2(1, .5);
              }
              e = cc.size(u, o.height);
              n = this.totalLength;
              s = o.height;
              break;
            case r.VERTICAL:
              l = this.reverse ? cc.v2(.5, 1) : cc.v2(.5, 0);
              e = cc.size(o.width, u);
              n = o.width;
              s = this.totalLength;
          }
          if (this.mode === r.FILLED) {
            if (!(this.barSprite.type !== cc.Sprite.Type.FILLED)) {
              if (this.reverse) {
                u *= -1;
              }
              this.barSprite.fillRange = u;
            }
          } else if (this.barSprite.type !== cc.Sprite.Type.FILLED) {
            var f = l.x - a.x;
            var d = l.y - a.y;
            var _ = cc.v2(n * f, s * d);
            t.setPosition(c.x + _.x, c.y + _.y);
            t.setAnchorPoint(l);
            t.setContentSize(e);
          }
        }
      },
      properties: {
        barSprite: {
          default: null,
          type: cc.Sprite,
          tooltip: false,
          notify: function () {
            this._initBarSprite();
          },
          animatable: false
        },
        mode: {
          default: r.HORIZONTAL,
          type: r,
          tooltip: false,
          notify: function () {
            if (this.barSprite) {
              var t = this.barSprite.node;
              if (!t) {
                return;
              }
              var e = t.getContentSize();
              if (this.mode === r.HORIZONTAL) {
                this.totalLength = e.width;
              } else if (this.mode === r.VERTICAL) {
                this.totalLength = e.height;
              } else if (this.mode === r.FILLED) {
                this.totalLength = this.barSprite.fillRange;
              }
            }
          },
          animatable: false
        },
        _N$totalLength: 1,
        totalLength: {
          range: [0, Number.MAX_VALUE],
          tooltip: false,
          get: function () {
            return this._N$totalLength;
          },
          set: function (t) {
            if (this.mode === r.FILLED) {
              t = i.clamp01(t);
            }
            this._N$totalLength = t;
            this._updateBarStatus();
          }
        },
        progress: {
          default: 1,
          type: cc.Float,
          range: [0, 1, .1],
          slide: true,
          tooltip: false,
          notify: function () {
            this._updateBarStatus();
          }
        },
        reverse: {
          default: false,
          tooltip: false,
          notify: function () {
            if (this.barSprite) {
              this.barSprite.fillStart = 1 - this.barSprite.fillStart;
            }
            this._updateBarStatus();
          },
          animatable: false
        }
      },
      statics: {
        Mode: r
      }
    });
    cc.ProgressBar = e.exports = s;
  }, {
    "../utils/misc": 236,
    "./CCComponent": 100
  }],
  108: [function (t, e) {
    "use strict";

    var i = cc.Class({
      name: "cc.PropagateTouchEvents",
      extends: t("./CCComponent"),
      editor: {
        menu: "i18n:MAIN_MENU.component.ui/Propagate Touch Events",
        inspector: "unpack://engine/inspectors/comps/propagate-touch-events.js"
      },
      onEnable: function () {
        this._swallowTouches = this.node.swallowTouches;
        this.node.swallowTouches = false;
      },
      onDisable: function () {
        this.node.swallowTouches = this._swallowTouches;
      }
    });
    cc.PropagateTouchEvents = e.exports = i;
  }, {
    "./CCComponent": 100
  }],
  109: [function (t, e) {
    "use strict";

    var i = t("../renderer/assembler") && t("../renderer/assembler").__esModule ? t("../renderer/assembler") : {
      default: t("../renderer/assembler")
    };
    var n = t("../assets/material/material-variant") && t("../assets/material/material-variant").__esModule ? t("../assets/material/material-variant") : {
      default: t("../assets/material/material-variant")
    };
    var r = t("../value-types");
    var a = t("./CCComponent");
    var o = t("../renderer/render-flow");
    var c = t("../assets/material/CCMaterial");
    var l = new r.Color();
    var h = cc.Class({
      name: "RenderComponent",
      extends: a,
      editor: false,
      properties: {
        _materials: {
          default: [],
          type: c
        },
        materials: {
          get: function () {
            return this._materials;
          },
          set: function (t) {
            this._materials = t;
            this._activateMaterial();
          },
          type: [c],
          displayName: "Materials",
          animatable: false
        }
      },
      ctor: function () {
        this._vertsDirty = true;
        this._assembler = null;
      },
      _resetAssembler: function () {
        i.default.init(this);
        this._updateColor();
        this.setVertsDirty();
      },
      __preload: function () {
        this._resetAssembler();
        this._activateMaterial();
      },
      onEnable: function () {
        if (this.node._renderComponent) {
          this.node._renderComponent.enabled = false;
        }
        this.node._renderComponent = this;
        this.node._renderFlag |= o.FLAG_OPACITY_COLOR;
        this.setVertsDirty();
      },
      onDisable: function () {
        this.node._renderComponent = null;
        this.disableRender();
      },
      onDestroy: function () {
        var t = this._materials;
        for (var e = 0; e < t.length; e++) {
          cc.pool.material.put(t[e]);
        }
        t.length = 0;
        cc.pool.assembler.put(this._assembler);
        this.disableRender();
      },
      setVertsDirty: function () {
        this._vertsDirty = true;
        this.markForRender(true);
      },
      _on3DNodeChanged: function () {
        this._resetAssembler();
      },
      _validateRender: function () {},
      markForValidate: function () {
        cc.RenderFlow.registerValidate(this);
      },
      markForRender: function (t) {
        var e = o.FLAG_RENDER | o.FLAG_UPDATE_RENDER_DATA;
        if (t) {
          this.node._renderFlag |= e;
          this.markForValidate();
        } else {
          this.node._renderFlag &= ~e;
        }
      },
      disableRender: function () {
        this.node._renderFlag &= ~(o.FLAG_RENDER | o.FLAG_UPDATE_RENDER_DATA);
      },
      getMaterial: function (t) {
        if (t < 0 || t >= this._materials.length) {
          return null;
        }
        var e = this._materials[t];
        if (!e) {
          return null;
        }
        var i = n.default.create(e, this);
        if (i !== e) {
          this.setMaterial(t, i);
        }
        return i;
      },
      getMaterials: function () {
        var t = this._materials;
        for (var e = 0; e < t.length; e++) {
          t[e] = n.default.create(t[e], this);
        }
        return t;
      },
      setMaterial: function (t, e) {
        if (e !== this._materials[t]) {
          e = n.default.create(e, this);
          this._materials[t] = e;
        }
        this._updateMaterial();
        this.markForRender(true);
        return e;
      },
      _getDefaultMaterial: function () {
        return c.getBuiltinMaterial("2d-sprite");
      },
      _activateMaterial: function () {
        var t = this._materials;
        if (!t[0]) {
          var e = this._getDefaultMaterial();
          t[0] = e;
        }
        for (var i = 0; i < t.length; i++) {
          t[i] = n.default.create(t[i], this);
        }
        this._updateMaterial();
      },
      _updateMaterial: function () {},
      _updateColor: function () {
        if (this._assembler.updateColor) {
          var t = this.srcBlendFactor === cc.macro.BlendFactor.ONE;
          if (t) {
            r.Color.premultiplyAlpha(l, this.node._color);
          }
          var e = t ? l._val : null;
          this._assembler.updateColor(this, e);
        }
      },
      _checkBacth: function (t, e) {
        var i = this._materials[0];
        if (i && i.getHash() !== t.material.getHash() || t.cullingMask !== e) {
          t._flush();
          t.node = i.getDefine("CC_USE_MODEL") ? this.node : t._dummyNode;
          t.material = i;
          t.cullingMask = e;
        }
      }
    });
    cc.RenderComponent = e.exports = h;
  }, {
    "../assets/material/CCMaterial": 76,
    "../assets/material/material-variant": 83,
    "../renderer/assembler": 190,
    "../renderer/render-flow": 194,
    "../value-types": 251,
    "./CCComponent": 100
  }],
  110: [function (t, e) {
    "use strict";

    var i = t("../platform/js");
    var n = t("../platform/CCMacro");
    var r = t("../utils/text-utils");
    var s = new (t("../utils/html-text-parser"))();
    var a = n.TextAlignment;
    var o = n.VerticalTextAlignment;
    var c = cc.Label.CacheMode;
    var l = new i.Pool(function (t) {
      if (!cc.isValid(t)) {
        return false;
      }
      var e = t.getComponent(cc.LabelOutline);
      if (e) {
        e.width = 0;
      }
      return true;
    }, 20);
    l.get = function (t, e) {
      var i = this._get();
      if (!i) {
        (i = new cc.PrivateNode("RICHTEXT_CHILD"))._objFlags |= cc.Object.Flags.DontSave;
      }
      i.setPosition(0, 0);
      i.setAnchorPoint(.5, .5);
      i.skewX = 0;
      var n = i.getComponent(cc.Label);
      if (!n) {
        n = i.addComponent(cc.Label);
      }
      n.string = "";
      n.horizontalAlign = a.LEFT;
      n.verticalAlign = o.CENTER;
      n._forceUseCanvas = true;
      n.customOffsetX = e.customOffsetX;
      n.customOffsetY = e.customOffsetY;
      n.actualLineHeight = e.actualLineHeight;
      return i;
    };
    var h = cc.Class({
      name: "cc.RichText",
      extends: cc.Component,
      ctor: function () {
        this._textArray = null;
        this._labelSegments = [];
        this._labelSegmentsCache = [];
        this._linesWidth = [];
        this._customOffsetX = 0;
        this._customOffsetY = 0;
        this._actualLineHeight = undefined;
        this._updateRichTextStatus = this._updateRichText;
      },
      editor: false,
      properties: {
        string: {
          default: "<color=#00ff00>Rich</c><color=#0fffff>Text</color>",
          multiline: true,
          tooltip: false,
          notify: function () {
            this._updateRichTextStatus();
          }
        },
        horizontalAlign: {
          default: a.LEFT,
          type: a,
          tooltip: false,
          animatable: false,
          notify: function (t) {
            if (this.horizontalAlign !== t) {
              this._layoutDirty = true;
              this._updateRichTextStatus();
            }
          }
        },
        fontSize: {
          default: 40,
          tooltip: false,
          notify: function (t) {
            if (this.fontSize !== t) {
              this._layoutDirty = true;
              this._updateRichTextStatus();
            }
          }
        },
        _fontFamily: "Arial",
        fontFamily: {
          tooltip: false,
          get: function () {
            return this._fontFamily;
          },
          set: function (t) {
            if (this._fontFamily !== t) {
              this._fontFamily = t;
              this._layoutDirty = true;
              this._updateRichTextStatus();
            }
          },
          animatable: false
        },
        font: {
          default: null,
          type: cc.TTFFont,
          tooltip: false,
          notify: function (t) {
            if (this.font !== t) {
              this._layoutDirty = true;
              if (this.font) {
                this.useSystemFont = false;
                this._onTTFLoaded();
              } else {
                this.useSystemFont = true;
              }
              this._updateRichTextStatus();
            }
          }
        },
        _isSystemFontUsed: true,
        useSystemFont: {
          get: function () {
            return this._isSystemFontUsed;
          },
          set: function (t) {
            if (this._isSystemFontUsed !== t) {
              this._isSystemFontUsed = t;
              this._layoutDirty = true;
              this._updateRichTextStatus();
            }
          },
          animatable: false,
          tooltip: false
        },
        cacheMode: {
          default: c.NONE,
          type: c,
          tooltip: false,
          notify: function (t) {
            if (this.cacheMode !== t) {
              this._updateRichTextStatus();
            }
          },
          animatable: false
        },
        maxWidth: {
          default: 0,
          tooltip: false,
          notify: function (t) {
            if (this.maxWidth !== t) {
              this._layoutDirty = true;
              this._updateRichTextStatus();
            }
          }
        },
        lineHeight: {
          default: 40,
          tooltip: false,
          notify: function (t) {
            if (this.lineHeight !== t) {
              this._layoutDirty = true;
              this._updateRichTextStatus();
            }
          }
        },
        imageAtlas: {
          default: null,
          type: cc.SpriteAtlas,
          tooltip: false,
          notify: function (t) {
            if (this.imageAtlas !== t) {
              this._layoutDirty = true;
              this._updateRichTextStatus();
            }
          }
        },
        handleTouchEvent: {
          default: true,
          tooltip: false,
          notify: function (t) {
            if (this.handleTouchEvent !== t && this.enabledInHierarchy) {
              if (this.handleTouchEvent) {
                this._addEventListeners();
              } else {
                this._removeEventListeners();
              }
            }
          }
        },
        customOffsetX: {
          get: function () {
            return this._customOffsetX;
          },
          set: function (t) {
            if (this._customOffsetX !== t) {
              this._customOffsetX = t;
              this._layoutDirty = true;
              this._updateRichTextStatus();
            }
          }
        },
        customOffsetY: {
          get: function () {
            return this._customOffsetY;
          },
          set: function (t) {
            if (this._customOffsetY !== t) {
              this._customOffsetY = t;
              this._layoutDirty = true;
              this._updateRichTextStatus();
            }
          }
        },
        actualLineHeight: {
          get: function () {
            return this._actualLineHeight || this.lineHeight;
          },
          set: function (t) {
            if (this._actualLineHeight !== t) {
              this._actualLineHeight = t;
              this._updateRichTextStatus();
            }
          }
        }
      },
      statics: {
        HorizontalAlign: a,
        VerticalAlign: o
      },
      onEnable: function () {
        if (this.handleTouchEvent) {
          this._addEventListeners();
        }
        this._onTTFLoaded();
        this._activateChildren(true);
      },
      onDisable: function () {
        if (this.handleTouchEvent) {
          this._removeEventListeners();
        }
        this._activateChildren(false);
      },
      _onColorChanged: function (t) {
        this.node.children.forEach(function (e) {
          e.color = t;
        });
      },
      _addEventListeners: function () {
        this.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
        this.node.on(cc.Node.EventType.COLOR_CHANGED, this._onColorChanged, this);
      },
      _removeEventListeners: function () {
        this.node.off(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
        this.node.off(cc.Node.EventType.COLOR_CHANGED, this._onColorChanged, this);
      },
      _updateLabelSegmentTextAttributes: function () {
        this._labelSegments.forEach(function (t) {
          this._applyTextAttribute(t, null, true);
        }.bind(this));
      },
      _createFontLabel: function (t) {
        return l.get(t, this);
      },
      _onTTFLoaded: function () {
        if (this.font instanceof cc.TTFFont) {
          if (this.font._nativeAsset) {
            this._layoutDirty = true;
            this._updateRichTextStatus();
          } else {
            var t = this;
            cc.assetManager.postLoadNative(this.font, function () {
              t._layoutDirty = true;
              t._updateRichTextStatus();
            });
          }
        } else {
          this._layoutDirty = true;
          this._updateRichTextStatus();
        }
      },
      _measureText: function (t, e) {
        var i = this;
        var n = function (e) {
          var n;
          if (0 === i._labelSegmentsCache.length) {
            n = i._createFontLabel(e);
            i._labelSegmentsCache.push(n);
          } else {
            n = i._labelSegmentsCache[0];
          }
          n._styleIndex = t;
          i._applyTextAttribute(n, e, true);
          return n.getContentSize().width;
        };
        return e ? n(e) : n;
      },
      _onTouchEnded: function (t) {
        var e = this;
        var i = this.node.getComponents(cc.Component);
        var n = function (n) {
          var r = e._labelSegments[n];
          var s = r._clickHandler;
          var a = r._clickParam;
          if (s && e._containsTouchLocation(r, t.touch.getLocation())) {
            i.forEach(function (e) {
              if (e.enabledInHierarchy && e[s]) {
                e[s](t, a);
              }
            });
            t.stopPropagation();
          }
        };
        for (var r = 0; r < this._labelSegments.length; ++r) {
          n(r);
        }
      },
      _containsTouchLocation: function (t, e) {
        return t._hitTest(e);
      },
      _resetState: function () {
        var t = this.node.children;
        for (var e = t.length - 1; e >= 0; e--) {
          var i = t[e];
          if (!("RICHTEXT_CHILD" !== i.name && "RICHTEXT_Image_CHILD" !== i.name)) {
            if (i.parent === this.node) {
              i.parent = null;
            } else {
              t.splice(e, 1);
            }
            if ("RICHTEXT_CHILD" === i.name) {
              l.put(i);
            }
          }
        }
        this._labelSegments.length = 0;
        this._labelSegmentsCache.length = 0;
        this._linesWidth.length = 0;
        this._lineOffsetX = 0;
        this._lineCount = 1;
        this._labelWidth = 0;
        this._labelHeight = 0;
        this._layoutDirty = true;
      },
      onRestore: false,
      _activateChildren: function (t) {
        for (var e = this.node.children.length - 1; e >= 0; e--) {
          var i = this.node.children[e];
          if (!("RICHTEXT_CHILD" !== i.name && "RICHTEXT_Image_CHILD" !== i.name)) {
            i.active = t;
          }
        }
      },
      _addLabelSegment: function (t, e) {
        var i;
        (i = 0 === this._labelSegmentsCache.length ? this._createFontLabel(t) : this._labelSegmentsCache.pop())._styleIndex = e;
        i._lineCount = this._lineCount;
        i.active = this.node.active;
        i.setAnchorPoint(0, 0);
        this._applyTextAttribute(i, t, false);
        this.node.addChild(i);
        this._labelSegments.push(i);
        return i;
      },
      _updateRichTextWithMaxWidth: function (t, e, i) {
        var n = e;
        if (this._lineOffsetX > 0 && n + this._lineOffsetX > this.maxWidth) {
          for (var s = 0; this._lineOffsetX <= this.maxWidth;) {
            var a = this._getFirstWordLen(t, s, t.length);
            var o = t.substr(s, a);
            var c = this._measureText(i, o);
            if (!(this._lineOffsetX + c <= this.maxWidth)) {
              if (s > 0) {
                var l = t.substr(0, s);
                this._addLabelSegment(l, i);
                t = t.substr(s, t.length);
                n = this._measureText(i, t);
              }
              this._updateLineInfo();
              break;
            }
            this._lineOffsetX += c;
            s += a;
          }
        }
        if (n > this.maxWidth) {
          var h = r.fragmentText(t, n, this.maxWidth, this._measureText(i));
          for (var u = 0; u < h.length; ++u) {
            var f = h[u];
            var d = this._addLabelSegment(f, i).getContentSize();
            this._lineOffsetX += d.width;
            if (h.length > 1 && u < h.length - 1) {
              this._updateLineInfo();
            }
          }
        } else {
          this._lineOffsetX += n;
          this._addLabelSegment(t, i);
        }
      },
      _isLastComponentCR: function (t) {
        return t.length - 1 === t.lastIndexOf("\n");
      },
      _updateLineInfo: function () {
        this._linesWidth.push(this._lineOffsetX);
        this._lineOffsetX = 0;
        this._lineCount++;
      },
      _needsUpdateTextLayout: function (t) {
        if (this._layoutDirty || !this._textArray || !t) {
          return true;
        }
        if (this._textArray.length !== t.length) {
          return true;
        }
        for (var e = 0; e < this._textArray.length; ++e) {
          var i = this._textArray[e];
          var n = t[e];
          if (i.text !== n.text) {
            return true;
          }
          var r = i.style;
          var s = n.style;
          if (r) {
            if (s) {
              if (!r.outline != !s.outline) {
                return true;
              }
              if (r.size !== s.size || !r.italic != !s.italic || r.isImage !== s.isImage) {
                return true;
              }
              if (r.src !== s.src || r.imageAlign !== s.imageAlign || r.imageHeight !== s.imageHeight || r.imageWidth !== s.imageWidth || r.imageOffset !== s.imageOffset) {
                return true;
              }
            } else if (r.size || r.italic || r.isImage || r.outline) {
              return true;
            }
          } else if (s && (s.size || s.italic || s.isImage || s.outline)) {
            return true;
          }
        }
        return false;
      },
      _addRichTextImageElement: function (t) {
        var e = t.style.src;
        var i = this.imageAtlas.getSpriteFrame(e);
        if (i) {
          var n = new cc.PrivateNode("RICHTEXT_Image_CHILD");
          n._objFlags |= cc.Object.Flags.DontSave;
          var r = n.addComponent(cc.Sprite);
          switch (t.style.imageAlign) {
            case "top":
              n.setAnchorPoint(0, 1);
              break;
            case "center":
              n.setAnchorPoint(0, .5);
              break;
            default:
              n.setAnchorPoint(0, 0);
          }
          if (t.style.imageOffset) {
            n._imageOffset = t.style.imageOffset;
          }
          r.type = cc.Sprite.Type.SLICED;
          r.sizeMode = cc.Sprite.SizeMode.CUSTOM;
          this.node.addChild(n);
          this._labelSegments.push(n);
          var s = i.getRect();
          var a = 1;
          var o = s.width;
          var c = s.height;
          var l = t.style.imageWidth;
          var h = t.style.imageHeight;
          if (h > 0) {
            o *= a = h / c;
            c *= a;
          } else {
            o *= a = this.lineHeight / c;
            c *= a;
          }
          if (l > 0) {
            o = l;
          }
          if (this.maxWidth > 0) {
            if (this._lineOffsetX + o > this.maxWidth) {
              this._updateLineInfo();
            }
            this._lineOffsetX += o;
          } else {
            this._lineOffsetX += o;
            if (this._lineOffsetX > this._labelWidth) {
              this._labelWidth = this._lineOffsetX;
            }
          }
          r.spriteFrame = i;
          n.setContentSize(o, c);
          n._lineCount = this._lineCount;
          if (t.style.event) {
            if (t.style.event.click) {
              n._clickHandler = t.style.event.click;
            }
            if (t.style.event.param) {
              n._clickParam = t.style.event.param;
            } else {
              n._clickParam = "";
            }
          } else {
            n._clickHandler = null;
          }
        }
      },
      _updateRichText: function () {
        if (this.enabledInHierarchy) {
          var t = s.parse(this.string);
          if (!this._needsUpdateTextLayout(t)) {
            this._textArray = t;
            this._updateLabelSegmentTextAttributes();
            return void this._updateRichTextPosition();
          }
          this._textArray = t;
          this._resetState();
          var e;
          var i = false;
          for (var n = 0; n < this._textArray.length; ++n) {
            var a = this._textArray[n];
            var o = a.text;
            if ("" === o) {
              if (a.style && a.style.newline) {
                this._updateLineInfo();
                continue;
              }
              if (a.style && a.style.isImage && this.imageAtlas) {
                this._addRichTextImageElement(a);
                continue;
              }
            }
            var c = o.split("\n");
            for (var l = 0; l < c.length; ++l) {
              var h = c[l];
              if ("" !== h) {
                i = false;
                if (this.maxWidth > 0) {
                  var u = this._measureText(n, h);
                  this._updateRichTextWithMaxWidth(h, u, n);
                  if (c.length > 1 && l < c.length - 1) {
                    this._updateLineInfo();
                  }
                } else {
                  e = this._addLabelSegment(h, n).getContentSize();
                  this._lineOffsetX += e.width;
                  if (this._lineOffsetX > this._labelWidth) {
                    this._labelWidth = this._lineOffsetX;
                  }
                  if (c.length > 1 && l < c.length - 1) {
                    this._updateLineInfo();
                  }
                }
              } else {
                if (this._isLastComponentCR(o) && l === c.length - 1) {
                  continue;
                }
                this._updateLineInfo();
                i = true;
              }
            }
          }
          if (!i) {
            this._linesWidth.push(this._lineOffsetX);
          }
          if (this.maxWidth > 0) {
            this._labelWidth = this.maxWidth;
          }
          this._labelHeight = (this._lineCount + r.BASELINE_RATIO) * this.lineHeight;
          this.node.setContentSize(this._labelWidth, this._labelHeight);
          this._updateRichTextPosition();
          this._layoutDirty = false;
        }
      },
      _getFirstWordLen: function (t, e, i) {
        var n = t.charAt(e);
        if (r.isUnicodeCJK(n) || r.isUnicodeSpace(n)) {
          return 1;
        }
        var s = 1;
        for (var a = e + 1; a < i && (n = t.charAt(a), !r.isUnicodeSpace(n) && !r.isUnicodeCJK(n)); ++a) {
          s++;
        }
        return s;
      },
      _updateRichTextPosition: function () {
        var t = 0;
        var e = 1;
        var i = this._lineCount;
        for (var n = 0; n < this._labelSegments.length; ++n) {
          var s = this._labelSegments[n];
          var o = s._lineCount;
          if (o > e) {
            t = 0;
            e = o;
          }
          var l = 0;
          switch (this.horizontalAlign) {
            case a.LEFT:
              l = -this._labelWidth / 2;
              break;
            case a.CENTER:
              l = -this._linesWidth[o - 1] / 2;
              break;
            case a.RIGHT:
              l = this._labelWidth / 2 - this._linesWidth[o - 1];
          }
          s.x = t + l;
          var h = s.getContentSize();
          s.y = this.lineHeight * (i - o) - this._labelHeight / 2;
          if (o === e) {
            t += h.width;
          }
          if (s.getComponent(cc.Sprite)) {
            var u = this.lineHeight;
            var f = this.lineHeight * (1 + r.BASELINE_RATIO);
            switch (s.anchorY) {
              case 1:
                s.y += u + (f - u) / 2;
                break;
              case .5:
                s.y += f / 2;
                break;
              default:
                s.y += (f - u) / 2;
            }
            if (s._imageOffset) {
              var d = s._imageOffset.split(",");
              if (1 === d.length && d[0]) {
                var _ = parseFloat(d[0]);
                if (Number.isInteger(_)) {
                  s.y += _;
                }
              } else if (2 === d.length) {
                var p = parseFloat(d[0]);
                var v = parseFloat(d[1]);
                if (Number.isInteger(p)) {
                  s.x += p;
                }
                if (Number.isInteger(v)) {
                  s.y += v;
                }
              }
            }
          } else {
            s.anchorY = 0;
          }
          var g = s.getComponent(cc.LabelOutline);
          if (g && g.width) {
            s.y = s.y - g.width;
          }
          if (s.getComponent(cc.Label) && this.cacheMode === c.CHAR) {
            var m = g ? g.width : 0;
            s.y = ((i - 1) / 2 - (o - 1)) * (this.lineHeight + m / 2);
            s.anchorY = .5;
          }
        }
      },
      _convertLiteralColorValue: function (t) {
        var e = t.toUpperCase();
        return cc.Color[e] ? cc.Color[e] : cc.color().fromHEX(t);
      },
      _applyTextAttribute: function (t, e, i) {
        var n = t.getComponent(cc.Label);
        if (n) {
          var r = t._styleIndex;
          var s = null;
          if (this._textArray[r]) {
            s = this._textArray[r].style;
          }
          if (s && s.color) {
            t.color = this._convertLiteralColorValue(s.color);
          } else {
            t.color = this.node.color;
          }
          n.cacheMode = this.cacheMode;
          if (this.font instanceof cc.Font && !this._isSystemFontUsed) {
            n.font = this.font;
          } else {
            n.fontFamily = this.fontFamily;
          }
          n.useSystemFont = this._isSystemFontUsed;
          n.lineHeight = this.lineHeight;
          n.enableBold = s && s.bold;
          n.enableItalics = s && s.italic;
          if (s && s.italic) {
            t.skewX = 12;
          }
          n.enableUnderline = s && s.underline;
          if (s && s.outline) {
            var a = t.getComponent(cc.LabelOutline);
            if (!a) {
              a = t.addComponent(cc.LabelOutline);
            }
            a.color = this._convertLiteralColorValue(s.outline.color);
            a.width = s.outline.width;
          }
          if (s && s.size) {
            n.fontSize = s.size;
          } else {
            n.fontSize = this.fontSize;
          }
          if (null !== e) {
            if ("string" != typeof e) {
              e = "" + e;
            }
            n.string = e;
          }
          if (i) {
            n._forceUpdateRenderData();
          }
          if (s && s.event) {
            if (s.event.click) {
              t._clickHandler = s.event.click;
            }
            if (s.event.param) {
              t._clickParam = s.event.param;
            } else {
              t._clickParam = "";
            }
          } else {
            t._clickHandler = null;
          }
        }
      },
      onDestroy: function () {
        for (var t = 0; t < this._labelSegments.length; ++t) {
          this._labelSegments[t].removeFromParent();
          l.put(this._labelSegments[t]);
        }
      }
    });
    cc.RichText = e.exports = h;
  }, {
    "../platform/CCMacro": 167,
    "../platform/js": 183,
    "../utils/html-text-parser": 234,
    "../utils/text-utils": 243
  }],
  111: [function (t, e) {
    "use strict";

    var i = t("./CCWidget");
    var n = t("../base-ui/CCWidgetManager");
    var r = cc.Class({
      name: "cc.SafeArea",
      extends: t("./CCComponent"),
      editor: false,
      onEnable: function () {
        this.updateArea();
        cc.view.on("canvas-resize", this.updateArea, this);
      },
      onDisable: function () {
        cc.view.off("canvas-resize", this.updateArea, this);
      },
      updateArea: function () {
        var t = this.node.getComponent(i);
        if (t) {
          t.updateAlignment();
          var e = this.node.position;
          var r = this.node.getAnchorPoint();
          t.isAlignTop = t.isAlignBottom = t.isAlignLeft = t.isAlignRight = true;
          var s = cc.winSize.width;
          var a = cc.winSize.height;
          var o = cc.sys.getSafeAreaRect();
          t.top = a - o.y - o.height;
          t.bottom = o.y;
          t.left = o.x;
          t.right = s - o.x - o.width;
          t.updateAlignment();
          var c = this.node.position;
          var l = r.x - (c.x - e.x) / this.node.width;
          var h = r.y - (c.y - e.y) / this.node.height;
          this.node.setAnchorPoint(l, h);
          n.add(t);
        }
      }
    });
    cc.SafeArea = e.exports = r;
  }, {
    "../base-ui/CCWidgetManager": 85,
    "./CCComponent": 100,
    "./CCWidget": 120
  }],
  112: [function (t, e) {
    "use strict";

    var i = t("../utils/misc");
    t("./CCComponent");
    var n = cc.Enum({
      HORIZONTAL: 0,
      VERTICAL: 1
    });
    var r = cc.Class({
      name: "cc.Scrollbar",
      extends: t("./CCComponent"),
      editor: false,
      properties: {
        _scrollView: null,
        _touching: false,
        _autoHideRemainingTime: {
          default: 0,
          serializable: false
        },
        _opacity: 255,
        handle: {
          default: null,
          type: cc.Sprite,
          tooltip: false,
          notify: function () {
            this._onScroll(cc.v2(0, 0));
          },
          animatable: false
        },
        direction: {
          default: n.HORIZONTAL,
          type: n,
          tooltip: false,
          notify: function () {
            this._onScroll(cc.v2(0, 0));
          },
          animatable: false
        },
        enableAutoHide: {
          default: true,
          animatable: false,
          tooltip: false
        },
        autoHideTime: {
          default: 1,
          animatable: false,
          tooltip: false
        }
      },
      statics: {
        Direction: n
      },
      setTargetScrollView: function (t) {
        this._scrollView = t;
      },
      _convertToScrollViewSpace: function (t) {
        var e = this._scrollView.node;
        var i = t.convertToWorldSpaceAR(cc.v2(-t.anchorX * t.width, -t.anchorY * t.height));
        var n = e.convertToNodeSpaceAR(i);
        n.x += e.anchorX * e.width;
        n.y += e.anchorY * e.height;
        return n;
      },
      _setOpacity: function (t) {
        if (this.handle) {
          this.node.opacity = t;
          this.handle.node.opacity = t;
        }
      },
      _onScroll: function (t) {
        if (this._scrollView) {
          var e = this._scrollView.content;
          if (e) {
            var i = e.getContentSize();
            var r = this._scrollView.node.getContentSize();
            var s = this.node.getContentSize();
            if (this._conditionalDisableScrollBar(i, r)) {
              return;
            }
            if (this.enableAutoHide) {
              this._autoHideRemainingTime = this.autoHideTime;
              this._setOpacity(this._opacity);
            }
            var a = 0;
            var o = 0;
            var c = 0;
            var l = 0;
            var h = 0;
            if (this.direction === n.HORIZONTAL) {
              a = i.width;
              o = r.width;
              h = s.width;
              c = t.x;
              l = -this._convertToScrollViewSpace(e).x;
            } else if (this.direction === n.VERTICAL) {
              a = i.height;
              o = r.height;
              h = s.height;
              c = t.y;
              l = -this._convertToScrollViewSpace(e).y;
            }
            var u = this._calculateLength(a, o, h, c);
            var f = this._calculatePosition(a, o, h, l, c, u);
            this._updateLength(u);
            this._updateHanlderPosition(f);
          }
        }
      },
      _updateHanlderPosition: function (t) {
        if (this.handle) {
          var e = this._fixupHandlerPosition();
          this.handle.node.setPosition(t.x + e.x, t.y + e.y);
        }
      },
      _fixupHandlerPosition: function () {
        var t = this.node.getContentSize();
        var e = this.node.getAnchorPoint();
        var i = this.handle.node.getContentSize();
        var r = this.handle.node.parent;
        var s = this.node.convertToWorldSpaceAR(cc.v2(-t.width * e.x, -t.height * e.y));
        var a = r.convertToNodeSpaceAR(s);
        if (this.direction === n.HORIZONTAL) {
          a = cc.v2(a.x, a.y + (t.height - i.height) / 2);
        } else if (this.direction === n.VERTICAL) {
          a = cc.v2(a.x + (t.width - i.width) / 2, a.y);
        }
        this.handle.node.setPosition(a);
        return a;
      },
      _onTouchBegan: function () {
        if (this.enableAutoHide) {
          this._touching = true;
        }
      },
      _conditionalDisableScrollBar: function (t, e) {
        return t.width <= e.width && this.direction === n.HORIZONTAL || t.height <= e.height && this.direction === n.VERTICAL;
      },
      _onTouchEnded: function () {
        if (this.enableAutoHide && (this._touching = false, !(this.autoHideTime <= 0))) {
          if (this._scrollView) {
            var t = this._scrollView.content;
            if (t) {
              var e = t.getContentSize();
              var i = this._scrollView.node.getContentSize();
              if (this._conditionalDisableScrollBar(e, i)) {
                return;
              }
            }
          }
          this._autoHideRemainingTime = this.autoHideTime;
        }
      },
      _calculateLength: function (t, e, i, n) {
        var r = t;
        if (n) {
          r += 20 * (n > 0 ? n : -n);
        }
        return i * (e / r);
      },
      _calculatePosition: function (t, e, r, s, a, o) {
        var c = t - e;
        if (a) {
          c += Math.abs(a);
        }
        var l = 0;
        if (c) {
          l = s / c;
          l = i.clamp01(l);
        }
        var h = (r - o) * l;
        return this.direction === n.VERTICAL ? cc.v2(0, h) : cc.v2(h, 0);
      },
      _updateLength: function (t) {
        if (this.handle) {
          var e = this.handle.node;
          var i = e.getContentSize();
          e.setAnchorPoint(cc.v2(0, 0));
          if (this.direction === n.HORIZONTAL) {
            e.setContentSize(t, i.height);
          } else {
            e.setContentSize(i.width, t);
          }
        }
      },
      _processAutoHide: function (t) {
        if (this.enableAutoHide && !(this._autoHideRemainingTime <= 0) && !this._touching && (this._autoHideRemainingTime -= t, this._autoHideRemainingTime <= this.autoHideTime)) {
          this._autoHideRemainingTime = Math.max(0, this._autoHideRemainingTime);
          var e = this._opacity * (this._autoHideRemainingTime / this.autoHideTime);
          this._setOpacity(e);
        }
      },
      start: function () {
        if (this.enableAutoHide) {
          this._setOpacity(0);
        }
      },
      hide: function () {
        this._autoHideRemainingTime = 0;
        this._setOpacity(0);
      },
      show: function () {
        this._autoHideRemainingTime = this.autoHideTime;
        this._setOpacity(this._opacity);
      },
      update: function (t) {
        this._processAutoHide(t);
      }
    });
    cc.Scrollbar = e.exports = r;
  }, {
    "../utils/misc": 236,
    "./CCComponent": 100
  }],
  113: [function (t, e) {
    "use strict";

    var i = t("../CCNode").EventType;
    var n = cc.v2();
    var r = cc.v2();
    var a = cc.Enum({
      SCROLL_TO_TOP: 0,
      SCROLL_TO_BOTTOM: 1,
      SCROLL_TO_LEFT: 2,
      SCROLL_TO_RIGHT: 3,
      SCROLLING: 4,
      BOUNCE_TOP: 5,
      BOUNCE_BOTTOM: 6,
      BOUNCE_LEFT: 7,
      BOUNCE_RIGHT: 8,
      SCROLL_ENDED: 9,
      TOUCH_UP: 10,
      AUTOSCROLL_ENDED_WITH_THRESHOLD: 11,
      SCROLL_BEGAN: 12
    });
    var o = {
      "scroll-to-top": a.SCROLL_TO_TOP,
      "scroll-to-bottom": a.SCROLL_TO_BOTTOM,
      "scroll-to-left": a.SCROLL_TO_LEFT,
      "scroll-to-right": a.SCROLL_TO_RIGHT,
      scrolling: a.SCROLLING,
      "bounce-bottom": a.BOUNCE_BOTTOM,
      "bounce-left": a.BOUNCE_LEFT,
      "bounce-right": a.BOUNCE_RIGHT,
      "bounce-top": a.BOUNCE_TOP,
      "scroll-ended": a.SCROLL_ENDED,
      "touch-up": a.TOUCH_UP,
      "scroll-ended-with-threshold": a.AUTOSCROLL_ENDED_WITH_THRESHOLD,
      "scroll-began": a.SCROLL_BEGAN
    };
    var c = cc.Class({
      name: "cc.ScrollView",
      extends: t("./CCViewGroup"),
      editor: false,
      ctor: function () {
        this._topBoundary = 0;
        this._bottomBoundary = 0;
        this._leftBoundary = 0;
        this._rightBoundary = 0;
        this._touchMoveDisplacements = [];
        this._touchMoveTimeDeltas = [];
        this._touchMovePreviousTimestamp = 0;
        this._touchMoved = false;
        this._autoScrolling = false;
        this._autoScrollAttenuate = false;
        this._autoScrollStartPosition = cc.v2(0, 0);
        this._autoScrollTargetDelta = cc.v2(0, 0);
        this._autoScrollTotalTime = 0;
        this._autoScrollAccumulatedTime = 0;
        this._autoScrollCurrentlyOutOfBoundary = false;
        this._autoScrollBraking = false;
        this._autoScrollBrakingStartPosition = cc.v2(0, 0);
        this._outOfBoundaryAmount = cc.v2(0, 0);
        this._outOfBoundaryAmountDirty = true;
        this._stopMouseWheel = false;
        this._mouseWheelEventElapsedTime = 0;
        this._isScrollEndedWithThresholdEventFired = false;
        this._scrollEventEmitMask = 0;
        this._isBouncing = false;
        this._scrolling = false;
      },
      properties: {
        content: {
          default: undefined,
          type: cc.Node,
          tooltip: false,
          formerlySerializedAs: "content",
          notify: function () {
            this._calculateBoundary();
          }
        },
        horizontal: {
          default: true,
          animatable: false,
          tooltip: false
        },
        vertical: {
          default: true,
          animatable: false,
          tooltip: false
        },
        inertia: {
          default: true,
          tooltip: false
        },
        brake: {
          default: .5,
          type: cc.Float,
          range: [0, 1, .1],
          tooltip: false
        },
        elastic: {
          default: true,
          animatable: false,
          tooltip: false
        },
        bounceDuration: {
          default: 1,
          range: [0, 10],
          tooltip: false
        },
        horizontalScrollBar: {
          default: undefined,
          type: cc.Scrollbar,
          tooltip: false,
          notify: function () {
            if (this.horizontalScrollBar) {
              this.horizontalScrollBar.setTargetScrollView(this);
              this._updateScrollBar(0);
            }
          },
          animatable: false
        },
        verticalScrollBar: {
          default: undefined,
          type: cc.Scrollbar,
          tooltip: false,
          notify: function () {
            if (this.verticalScrollBar) {
              this.verticalScrollBar.setTargetScrollView(this);
              this._updateScrollBar(0);
            }
          },
          animatable: false
        },
        scrollEvents: {
          default: [],
          type: cc.Component.EventHandler,
          tooltip: false
        },
        cancelInnerEvents: {
          default: true,
          animatable: false,
          tooltip: false
        },
        _view: {
          get: function () {
            if (this.content) {
              return this.content.parent;
            }
          }
        }
      },
      statics: {
        EventType: a
      },
      scrollToBottom: function (t, e) {
        var i = this._calculateMovePercentDelta({
          anchor: cc.v2(0, 0),
          applyToHorizontal: false,
          applyToVertical: true
        });
        if (t) {
          this._startAutoScroll(i, t, false !== e);
        } else {
          this._moveContent(i, true);
        }
      },
      scrollToTop: function (t, e) {
        var i = this._calculateMovePercentDelta({
          anchor: cc.v2(0, 1),
          applyToHorizontal: false,
          applyToVertical: true
        });
        if (t) {
          this._startAutoScroll(i, t, false !== e);
        } else {
          this._moveContent(i);
        }
      },
      scrollToLeft: function (t, e) {
        var i = this._calculateMovePercentDelta({
          anchor: cc.v2(0, 0),
          applyToHorizontal: true,
          applyToVertical: false
        });
        if (t) {
          this._startAutoScroll(i, t, false !== e);
        } else {
          this._moveContent(i);
        }
      },
      scrollToRight: function (t, e) {
        var i = this._calculateMovePercentDelta({
          anchor: cc.v2(1, 0),
          applyToHorizontal: true,
          applyToVertical: false
        });
        if (t) {
          this._startAutoScroll(i, t, false !== e);
        } else {
          this._moveContent(i);
        }
      },
      scrollToTopLeft: function (t, e) {
        var i = this._calculateMovePercentDelta({
          anchor: cc.v2(0, 1),
          applyToHorizontal: true,
          applyToVertical: true
        });
        if (t) {
          this._startAutoScroll(i, t, false !== e);
        } else {
          this._moveContent(i);
        }
      },
      scrollToTopRight: function (t, e) {
        var i = this._calculateMovePercentDelta({
          anchor: cc.v2(1, 1),
          applyToHorizontal: true,
          applyToVertical: true
        });
        if (t) {
          this._startAutoScroll(i, t, false !== e);
        } else {
          this._moveContent(i);
        }
      },
      scrollToBottomLeft: function (t, e) {
        var i = this._calculateMovePercentDelta({
          anchor: cc.v2(0, 0),
          applyToHorizontal: true,
          applyToVertical: true
        });
        if (t) {
          this._startAutoScroll(i, t, false !== e);
        } else {
          this._moveContent(i);
        }
      },
      scrollToBottomRight: function (t, e) {
        var i = this._calculateMovePercentDelta({
          anchor: cc.v2(1, 0),
          applyToHorizontal: true,
          applyToVertical: true
        });
        if (t) {
          this._startAutoScroll(i, t, false !== e);
        } else {
          this._moveContent(i);
        }
      },
      scrollToOffset: function (t, e, i) {
        var n = this.getMaxScrollOffset();
        var r = cc.v2(0, 0);
        if (0 === n.x) {
          r.x = 0;
        } else {
          r.x = t.x / n.x;
        }
        if (0 === n.y) {
          r.y = 1;
        } else {
          r.y = (n.y - t.y) / n.y;
        }
        this.scrollTo(r, e, i);
      },
      getScrollOffset: function () {
        var t = this._getContentTopBoundary() - this._topBoundary;
        var e = this._getContentLeftBoundary() - this._leftBoundary;
        return cc.v2(e, t);
      },
      getMaxScrollOffset: function () {
        var t = this._view.getContentSize();
        var e = this.content.getContentSize();
        var i = e.width - t.width;
        var n = e.height - t.height;
        i = i >= 0 ? i : 0;
        n = n >= 0 ? n : 0;
        return cc.v2(i, n);
      },
      scrollToPercentHorizontal: function (t, e, i) {
        var n = this._calculateMovePercentDelta({
          anchor: cc.v2(t, 0),
          applyToHorizontal: true,
          applyToVertical: false
        });
        if (e) {
          this._startAutoScroll(n, e, false !== i);
        } else {
          this._moveContent(n);
        }
      },
      scrollTo: function (t, e, i) {
        var n = this._calculateMovePercentDelta({
          anchor: cc.v2(t),
          applyToHorizontal: true,
          applyToVertical: true
        });
        if (e) {
          this._startAutoScroll(n, e, false !== i);
        } else {
          this._moveContent(n);
        }
      },
      scrollToPercentVertical: function (t, e, i) {
        var n = this._calculateMovePercentDelta({
          anchor: cc.v2(0, t),
          applyToHorizontal: false,
          applyToVertical: true
        });
        if (e) {
          this._startAutoScroll(n, e, false !== i);
        } else {
          this._moveContent(n);
        }
      },
      stopAutoScroll: function () {
        this._autoScrolling = false;
        this._autoScrollAccumulatedTime = this._autoScrollTotalTime;
      },
      setContentPosition: function (t) {
        if (!t.fuzzyEquals(this.getContentPosition(), 1e-4)) {
          this.content.setPosition(t);
          this._outOfBoundaryAmountDirty = true;
        }
      },
      getContentPosition: function () {
        return this.content.getPosition();
      },
      isScrolling: function () {
        return this._scrolling;
      },
      isAutoScrolling: function () {
        return this._autoScrolling;
      },
      _registerEvent: function () {
        this.node.on(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this, true);
        this.node.on(cc.Node.EventType.TOUCH_MOVE, this._onTouchMoved, this, true);
        this.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this, true);
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancelled, this, true);
        this.node.on(cc.Node.EventType.MOUSE_WHEEL, this._onMouseWheel, this, true);
      },
      _unregisterEvent: function () {
        this.node.off(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this, true);
        this.node.off(cc.Node.EventType.TOUCH_MOVE, this._onTouchMoved, this, true);
        this.node.off(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this, true);
        this.node.off(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancelled, this, true);
        this.node.off(cc.Node.EventType.MOUSE_WHEEL, this._onMouseWheel, this, true);
      },
      _onMouseWheel: function (t, e) {
        if (this.enabledInHierarchy && !this.hasNestedViewGroup(t, e)) {
          var i = cc.v2(0, 0);
          var n = -cc.view._scaleY;
          if (this.vertical) {
            i = cc.v2(0, t.getScrollY() * n);
          } else if (this.horizontal) {
            i = cc.v2(t.getScrollY() * n, 0);
          }
          this._mouseWheelEventElapsedTime = 0;
          this._processDeltaMove(i);
          if (!this._stopMouseWheel) {
            this._handlePressLogic();
            this.schedule(this._checkMouseWheel, 0.016666666666666666);
            this._stopMouseWheel = true;
          }
          this._stopPropagationIfTargetIsMe(t);
        }
      },
      _checkMouseWheel: function (t) {
        if (!this._getHowMuchOutOfBoundary().fuzzyEquals(cc.v2(0, 0), 1e-4)) {
          this._processInertiaScroll();
          this.unschedule(this._checkMouseWheel);
          this._dispatchEvent("scroll-ended");
          return void (this._stopMouseWheel = false);
        }
        this._mouseWheelEventElapsedTime += t;
        if (this._mouseWheelEventElapsedTime > .1) {
          this._onScrollBarTouchEnded();
          this.unschedule(this._checkMouseWheel);
          this._dispatchEvent("scroll-ended");
          this._stopMouseWheel = false;
        }
      },
      _calculateMovePercentDelta: function (t) {
        var e = t.anchor;
        var i = t.applyToHorizontal;
        var n = t.applyToVertical;
        this._calculateBoundary();
        e = e.clampf(cc.v2(0, 0), cc.v2(1, 1));
        var r = this._view.getContentSize();
        var s = this.content.getContentSize();
        var a = this._getContentBottomBoundary() - this._bottomBoundary;
        a = -a;
        var o = this._getContentLeftBoundary() - this._leftBoundary;
        o = -o;
        var c = cc.v2(0, 0);
        var l = 0;
        if (i) {
          l = s.width - r.width;
          c.x = o - l * e.x;
        }
        if (n) {
          l = s.height - r.height;
          c.y = a - l * e.y;
        }
        return c;
      },
      _moveContentToTopLeft: function (t) {
        var e = this.content.getContentSize();
        var i = this._getContentBottomBoundary() - this._bottomBoundary;
        i = -i;
        var n = cc.v2(0, 0);
        var r = 0;
        var s = this._getContentLeftBoundary() - this._leftBoundary;
        s = -s;
        if (e.height < t.height) {
          r = e.height - t.height;
          n.y = i - r;
        }
        if (e.width < t.width) {
          r = e.width - t.width;
          n.x = s;
        }
        this._updateScrollBarState();
        this._moveContent(n);
        this._adjustContentOutOfBoundary();
      },
      _calculateBoundary: function () {
        if (this.content) {
          var t = this.content.getComponent(cc.Layout);
          if (t && t.enabledInHierarchy) {
            t.updateLayout();
          }
          var e = this._view.getContentSize();
          var i = e.width * this._view.anchorX;
          var n = e.height * this._view.anchorY;
          this._leftBoundary = -i;
          this._bottomBoundary = -n;
          this._rightBoundary = this._leftBoundary + e.width;
          this._topBoundary = this._bottomBoundary + e.height;
          this._moveContentToTopLeft(e);
        }
      },
      hasNestedViewGroup: function (t, e) {
        if (t.eventPhase === cc.Event.CAPTURING_PHASE) {
          if (e) {
            for (var i = 0; i < e.length; ++i) {
              var n = e[i];
              if (this.node === n) {
                return !!t.target.getComponent(cc.ViewGroup);
              }
              if (n.getComponent(cc.ViewGroup)) {
                return true;
              }
            }
          }
          return false;
        }
      },
      _stopPropagationIfTargetIsMe: function (t) {
        if (t.eventPhase === cc.Event.AT_TARGET && t.target === this.node) {
          t.stopPropagation();
        }
      },
      _onTouchBegan: function (t, e) {
        if (this.enabledInHierarchy && !this.hasNestedViewGroup(t, e)) {
          var i = t.touch;
          if (this.content) {
            this._handlePressLogic(i);
          }
          this._touchMoved = false;
          this._stopPropagationIfTargetIsMe(t);
        }
      },
      _onTouchMoved: function (t, e) {
        if (this.enabledInHierarchy && !this.hasNestedViewGroup(t, e)) {
          var i = t.touch;
          if (this.content) {
            this._handleMoveLogic(i);
          }
          if (this.cancelInnerEvents) {
            if (i.getLocation().sub(i.getStartLocation()).mag() > 7 && !this._touchMoved && t.target !== this.node) {
              var n = new cc.Event.EventTouch(t.getTouches(), t.bubbles);
              n.type = cc.Node.EventType.TOUCH_CANCEL;
              n.touch = t.touch;
              n.simulate = true;
              t.target.dispatchEvent(n);
              this._touchMoved = true;
            }
            this._stopPropagationIfTargetIsMe(t);
          }
        }
      },
      _onTouchEnded: function (t, e) {
        if (this.enabledInHierarchy && !this.hasNestedViewGroup(t, e)) {
          this._dispatchEvent("touch-up");
          var i = t.touch;
          if (this.content) {
            this._handleReleaseLogic(i);
          }
          if (this._touchMoved) {
            t.stopPropagation();
          } else {
            this._stopPropagationIfTargetIsMe(t);
          }
        }
      },
      _onTouchCancelled: function (t, e) {
        if (this.enabledInHierarchy && !this.hasNestedViewGroup(t, e)) {
          if (!t.simulate) {
            var i = t.touch;
            if (this.content) {
              this._handleReleaseLogic(i);
            }
          }
          this._stopPropagationIfTargetIsMe(t);
        }
      },
      _processDeltaMove: function (t) {
        this._scrollChildren(t);
        this._gatherTouchMove(t);
      },
      _getLocalAxisAlignDelta: function (t) {
        this.node.convertToNodeSpaceAR(t.getLocation(), n);
        this.node.convertToNodeSpaceAR(t.getPreviousLocation(), r);
        return n.sub(r);
      },
      _handleMoveLogic: function (t) {
        var e = this._getLocalAxisAlignDelta(t);
        this._processDeltaMove(e);
      },
      _scrollChildren: function (t) {
        var e;
        var i = t = this._clampDelta(t);
        if (this.elastic) {
          e = this._getHowMuchOutOfBoundary();
          i.x *= 0 === e.x ? 1 : .5;
          i.y *= 0 === e.y ? 1 : .5;
        }
        if (!this.elastic) {
          e = this._getHowMuchOutOfBoundary(i);
          i = i.add(e);
        }
        var n = "";
        var r = "";
        if (this.vertical) {
          if (i.y > 0) {
            if (this.content.y - this.content.anchorY * this.content.height + i.y >= this._bottomBoundary) {
              n = "scroll-to-bottom";
            }
          } else if (i.y < 0 && this.content.y - this.content.anchorY * this.content.height + this.content.height + i.y <= this._topBoundary) {
            n = "scroll-to-top";
          }
        }
        if (this.horizontal) {
          if (i.x < 0) {
            if (this.content.x - this.content.anchorX * this.content.width + this.content.width + i.x <= this._rightBoundary) {
              r = "scroll-to-right";
            }
          } else if (i.x > 0 && this.content.x - this.content.anchorX * this.content.width + i.x >= this._leftBoundary) {
            r = "scroll-to-left";
          }
        }
        this._moveContent(i, false);
        if (this.horizontal && 0 !== i.x || this.vertical && 0 !== i.y) {
          if (!this._scrolling) {
            this._scrolling = true;
            this._dispatchEvent("scroll-began");
          }
          this._dispatchEvent("scrolling");
        }
        if ("" !== n) {
          this._dispatchEvent(n);
        }
        if ("" !== r) {
          this._dispatchEvent(r);
        }
      },
      _handlePressLogic: function () {
        if (this._autoScrolling) {
          this._dispatchEvent("scroll-ended");
        }
        this._autoScrolling = false;
        this._isBouncing = false;
        this._touchMovePreviousTimestamp = new Date().getMilliseconds();
        this._touchMoveDisplacements.length = 0;
        this._touchMoveTimeDeltas.length = 0;
        this._onScrollBarTouchBegan();
      },
      _clampDelta: function (t) {
        var e = this.content.getContentSize();
        var i = this._view.getContentSize();
        if (e.width < i.width) {
          t.x = 0;
        }
        if (e.height < i.height) {
          t.y = 0;
        }
        return t;
      },
      _gatherTouchMove: function (t) {
        for (t = this._clampDelta(t); this._touchMoveDisplacements.length >= 5;) {
          this._touchMoveDisplacements.shift();
          this._touchMoveTimeDeltas.shift();
        }
        this._touchMoveDisplacements.push(t);
        var e = new Date().getMilliseconds();
        this._touchMoveTimeDeltas.push((e - this._touchMovePreviousTimestamp) / 1e3);
        this._touchMovePreviousTimestamp = e;
      },
      _startBounceBackIfNeeded: function () {
        if (!this.elastic) {
          return false;
        }
        var t = this._getHowMuchOutOfBoundary();
        if ((t = this._clampDelta(t)).fuzzyEquals(cc.v2(0, 0), 1e-4)) {
          return false;
        }
        var e = Math.max(this.bounceDuration, 0);
        this._startAutoScroll(t, e, true);
        if (!this._isBouncing) {
          if (t.y > 0) {
            this._dispatchEvent("bounce-top");
          }
          if (t.y < 0) {
            this._dispatchEvent("bounce-bottom");
          }
          if (t.x > 0) {
            this._dispatchEvent("bounce-right");
          }
          if (t.x < 0) {
            this._dispatchEvent("bounce-left");
          }
          this._isBouncing = true;
        }
        return true;
      },
      _processInertiaScroll: function () {
        if (!this._startBounceBackIfNeeded() && this.inertia) {
          var t = this._calculateTouchMoveVelocity();
          if (!t.fuzzyEquals(cc.v2(0, 0), 1e-4) && this.brake < 1) {
            this._startInertiaScroll(t);
          }
        }
        this._onScrollBarTouchEnded();
      },
      _handleReleaseLogic: function (t) {
        var e = this._getLocalAxisAlignDelta(t);
        this._gatherTouchMove(e);
        this._processInertiaScroll();
        if (this._scrolling) {
          this._scrolling = false;
          if (!this._autoScrolling) {
            this._dispatchEvent("scroll-ended");
          }
        }
      },
      _isOutOfBoundary: function () {
        return !this._getHowMuchOutOfBoundary().fuzzyEquals(cc.v2(0, 0), 1e-4);
      },
      _isNecessaryAutoScrollBrake: function () {
        if (this._autoScrollBraking) {
          return true;
        }
        if (this._isOutOfBoundary()) {
          if (!this._autoScrollCurrentlyOutOfBoundary) {
            this._autoScrollCurrentlyOutOfBoundary = true;
            this._autoScrollBraking = true;
            this._autoScrollBrakingStartPosition = this.getContentPosition();
            return true;
          }
        } else {
          this._autoScrollCurrentlyOutOfBoundary = false;
        }
        return false;
      },
      getScrollEndedEventTiming: function () {
        return 1e-4;
      },
      _processAutoScrolling: function (t) {
        var e = this._isNecessaryAutoScrollBrake();
        var i = e ? .05 : 1;
        this._autoScrollAccumulatedTime += t * (1 / i);
        var n;
        var r = Math.min(1, this._autoScrollAccumulatedTime / this._autoScrollTotalTime);
        if (this._autoScrollAttenuate) {
          n = r;
          r = (n -= 1) * n * n * n * n + 1;
        }
        var s = this._autoScrollStartPosition.add(this._autoScrollTargetDelta.mul(r));
        var a = Math.abs(r - 1) <= 1e-4;
        if (Math.abs(r - 1) <= this.getScrollEndedEventTiming() && !this._isScrollEndedWithThresholdEventFired) {
          this._dispatchEvent("scroll-ended-with-threshold");
          this._isScrollEndedWithThresholdEventFired = true;
        }
        if (this.elastic) {
          var o = s.sub(this._autoScrollBrakingStartPosition);
          if (e) {
            o = o.mul(i);
          }
          s = this._autoScrollBrakingStartPosition.add(o);
        } else {
          var c = s.sub(this.getContentPosition());
          var l = this._getHowMuchOutOfBoundary(c);
          if (!l.fuzzyEquals(cc.v2(0, 0), 1e-4)) {
            s = s.add(l);
            a = true;
          }
        }
        if (a) {
          this._autoScrolling = false;
        }
        var h = s.sub(this.getContentPosition());
        this._moveContent(this._clampDelta(h), a);
        this._dispatchEvent("scrolling");
        if (!this._autoScrolling) {
          this._isBouncing = false;
          this._scrolling = false;
          this._dispatchEvent("scroll-ended");
        }
      },
      _startInertiaScroll: function (t) {
        var e = t.mul(.7);
        this._startAttenuatingAutoScroll(e, t);
      },
      _calculateAttenuatedFactor: function (t) {
        return this.brake <= 0 ? 1 - this.brake : (1 - this.brake) * (1 / (1 + 14e-6 * t + t * t * 8e-9));
      },
      _startAttenuatingAutoScroll: function (t, e) {
        var i = this._calculateAutoScrollTimeByInitalSpeed(e.mag());
        var n = t.normalize();
        var r = this.content.getContentSize();
        var s = this._view.getContentSize();
        var a = r.width - s.width;
        var o = r.height - s.height;
        var c = this._calculateAttenuatedFactor(a);
        var l = this._calculateAttenuatedFactor(o);
        n = cc.v2(n.x * a * (1 - this.brake) * c, n.y * o * l * (1 - this.brake));
        var h = t.mag();
        var u = n.mag() / h;
        n = n.add(t);
        if (this.brake > 0 && u > 7) {
          u = Math.sqrt(u);
          n = t.mul(u).add(t);
        }
        if (this.brake > 0 && u > 3) {
          i *= u = 3;
        }
        if (0 === this.brake && u > 1) {
          i *= u;
        }
        this._startAutoScroll(n, i, true);
      },
      _calculateAutoScrollTimeByInitalSpeed: function (t) {
        return Math.sqrt(Math.sqrt(t / 5));
      },
      _startAutoScroll: function (t, e, i) {
        var n = this._flattenVectorByDirection(t);
        this._autoScrolling = true;
        this._autoScrollTargetDelta = n;
        this._autoScrollAttenuate = i;
        this._autoScrollStartPosition = this.getContentPosition();
        this._autoScrollTotalTime = e;
        this._autoScrollAccumulatedTime = 0;
        this._autoScrollBraking = false;
        this._isScrollEndedWithThresholdEventFired = false;
        this._autoScrollBrakingStartPosition = cc.v2(0, 0);
        if (!this._getHowMuchOutOfBoundary().fuzzyEquals(cc.v2(0, 0), 1e-4)) {
          this._autoScrollCurrentlyOutOfBoundary = true;
        }
      },
      _calculateTouchMoveVelocity: function () {
        var t = 0;
        if ((t = this._touchMoveTimeDeltas.reduce(function (t, e) {
          return t + e;
        }, t)) <= 0 || t >= .5) {
          return cc.v2(0, 0);
        }
        var e = cc.v2(0, 0);
        e = this._touchMoveDisplacements.reduce(function (t, e) {
          return t.add(e);
        }, e);
        return cc.v2(e.x * (1 - this.brake) / t, e.y * (1 - this.brake) / t);
      },
      _flattenVectorByDirection: function (t) {
        t.x = this.horizontal ? t.x : 0;
        t.y = this.vertical ? t.y : 0;
        return t;
      },
      _moveContent: function (t, e) {
        var i = this._flattenVectorByDirection(t);
        var n = this.getContentPosition().add(i);
        this.setContentPosition(n);
        var r = this._getHowMuchOutOfBoundary();
        this._updateScrollBar(r);
        if (this.elastic && e) {
          this._startBounceBackIfNeeded();
        }
      },
      _getContentLeftBoundary: function () {
        return this.getContentPosition().x - this.content.getAnchorPoint().x * this.content.getContentSize().width;
      },
      _getContentRightBoundary: function () {
        var t = this.content.getContentSize();
        return this._getContentLeftBoundary() + t.width;
      },
      _getContentTopBoundary: function () {
        var t = this.content.getContentSize();
        return this._getContentBottomBoundary() + t.height;
      },
      _getContentBottomBoundary: function () {
        return this.getContentPosition().y - this.content.getAnchorPoint().y * this.content.getContentSize().height;
      },
      _getHowMuchOutOfBoundary: function (t) {
        if ((t = t || cc.v2(0, 0)).fuzzyEquals(cc.v2(0, 0), 1e-4) && !this._outOfBoundaryAmountDirty) {
          return this._outOfBoundaryAmount;
        }
        var e = cc.v2(0, 0);
        if (this._getContentLeftBoundary() + t.x > this._leftBoundary) {
          e.x = this._leftBoundary - (this._getContentLeftBoundary() + t.x);
        } else if (this._getContentRightBoundary() + t.x < this._rightBoundary) {
          e.x = this._rightBoundary - (this._getContentRightBoundary() + t.x);
        }
        if (this._getContentTopBoundary() + t.y < this._topBoundary) {
          e.y = this._topBoundary - (this._getContentTopBoundary() + t.y);
        } else if (this._getContentBottomBoundary() + t.y > this._bottomBoundary) {
          e.y = this._bottomBoundary - (this._getContentBottomBoundary() + t.y);
        }
        if (t.fuzzyEquals(cc.v2(0, 0), 1e-4)) {
          this._outOfBoundaryAmount = e;
          this._outOfBoundaryAmountDirty = false;
        }
        return this._clampDelta(e);
      },
      _updateScrollBarState: function () {
        if (this.content) {
          var t = this.content.getContentSize();
          var e = this._view.getContentSize();
          if (this.verticalScrollBar) {
            if (t.height < e.height) {
              this.verticalScrollBar.hide();
            } else {
              this.verticalScrollBar.show();
            }
          }
          if (this.horizontalScrollBar) {
            if (t.width < e.width) {
              this.horizontalScrollBar.hide();
            } else {
              this.horizontalScrollBar.show();
            }
          }
        }
      },
      _updateScrollBar: function (t) {
        if (this.horizontalScrollBar) {
          this.horizontalScrollBar._onScroll(t);
        }
        if (this.verticalScrollBar) {
          this.verticalScrollBar._onScroll(t);
        }
      },
      _onScrollBarTouchBegan: function () {
        if (this.horizontalScrollBar) {
          this.horizontalScrollBar._onTouchBegan();
        }
        if (this.verticalScrollBar) {
          this.verticalScrollBar._onTouchBegan();
        }
      },
      _onScrollBarTouchEnded: function () {
        if (this.horizontalScrollBar) {
          this.horizontalScrollBar._onTouchEnded();
        }
        if (this.verticalScrollBar) {
          this.verticalScrollBar._onTouchEnded();
        }
      },
      _dispatchEvent: function (t) {
        if ("scroll-ended" === t) {
          this._scrollEventEmitMask = 0;
        } else if ("scroll-to-top" === t || "scroll-to-bottom" === t || "scroll-to-left" === t || "scroll-to-right" === t) {
          var e = 1 << o[t];
          if (this._scrollEventEmitMask & e) {
            return;
          }
          this._scrollEventEmitMask |= e;
        }
        cc.Component.EventHandler.emitEvents(this.scrollEvents, this, o[t]);
        this.node.emit(t, this);
      },
      _adjustContentOutOfBoundary: function () {
        this._outOfBoundaryAmountDirty = true;
        if (this._isOutOfBoundary()) {
          var t = this._getHowMuchOutOfBoundary(cc.v2(0, 0));
          var e = this.getContentPosition().add(t);
          if (this.content) {
            this.content.setPosition(e);
            this._updateScrollBar(0);
          }
        }
      },
      start: function () {
        this._calculateBoundary();
        if (this.content) {
          cc.director.once(cc.Director.EVENT_BEFORE_DRAW, this._adjustContentOutOfBoundary, this);
        }
      },
      _hideScrollbar: function () {
        if (this.horizontalScrollBar) {
          this.horizontalScrollBar.hide();
        }
        if (this.verticalScrollBar) {
          this.verticalScrollBar.hide();
        }
      },
      onDisable: function () {
        this._unregisterEvent();
        if (this.content) {
          this.content.off(i.SIZE_CHANGED, this._calculateBoundary, this);
          this.content.off(i.SCALE_CHANGED, this._calculateBoundary, this);
          if (this._view) {
            this._view.off(i.POSITION_CHANGED, this._calculateBoundary, this);
            this._view.off(i.SCALE_CHANGED, this._calculateBoundary, this);
            this._view.off(i.SIZE_CHANGED, this._calculateBoundary, this);
          }
        }
        this._hideScrollbar();
        this.stopAutoScroll();
      },
      onEnable: function () {
        this._registerEvent();
        if (this.content) {
          this.content.on(i.SIZE_CHANGED, this._calculateBoundary, this);
          this.content.on(i.SCALE_CHANGED, this._calculateBoundary, this);
          if (this._view) {
            this._view.on(i.POSITION_CHANGED, this._calculateBoundary, this);
            this._view.on(i.SCALE_CHANGED, this._calculateBoundary, this);
            this._view.on(i.SIZE_CHANGED, this._calculateBoundary, this);
          }
        }
        this._updateScrollBarState();
      },
      update: function (t) {
        if (this._autoScrolling) {
          this._processAutoScrolling(t);
        }
      }
    });
    cc.ScrollView = e.exports = c;
  }, {
    "../CCNode": 26,
    "./CCViewGroup": 119
  }],
  114: [function (t, e) {
    "use strict";

    var i = t("../utils/misc");
    var n = t("./CCComponent");
    var r = cc.Enum({
      Horizontal: 0,
      Vertical: 1
    });
    var s = cc.Class({
      name: "cc.Slider",
      extends: n,
      editor: false,
      ctor: function () {
        this._offset = cc.v2();
        this._touchHandle = false;
        this._dragging = false;
      },
      properties: {
        handle: {
          default: null,
          type: cc.Button,
          tooltip: false,
          notify: function () {}
        },
        direction: {
          default: r.Horizontal,
          type: r,
          tooltip: false
        },
        progress: {
          default: .5,
          type: cc.Float,
          range: [0, 1, .1],
          slide: true,
          tooltip: false,
          notify: function () {
            this._updateHandlePosition();
          }
        },
        slideEvents: {
          default: [],
          type: cc.Component.EventHandler,
          tooltip: false
        }
      },
      statics: {
        Direction: r
      },
      __preload: function () {
        this._updateHandlePosition();
      },
      onEnable: function () {
        this.node.on(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this);
        this.node.on(cc.Node.EventType.TOUCH_MOVE, this._onTouchMoved, this);
        this.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancelled, this);
        if (this.handle && this.handle.isValid) {
          this.handle.node.on(cc.Node.EventType.TOUCH_START, this._onHandleDragStart, this);
          this.handle.node.on(cc.Node.EventType.TOUCH_MOVE, this._onTouchMoved, this);
          this.handle.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
        }
      },
      onDisable: function () {
        this.node.off(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this);
        this.node.off(cc.Node.EventType.TOUCH_MOVE, this._onTouchMoved, this);
        this.node.off(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
        this.node.off(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancelled, this);
        if (this.handle && this.handle.isValid) {
          this.handle.node.off(cc.Node.EventType.TOUCH_START, this._onHandleDragStart, this);
          this.handle.node.off(cc.Node.EventType.TOUCH_MOVE, this._onTouchMoved, this);
          this.handle.node.off(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
        }
      },
      _onHandleDragStart: function (t) {
        this._dragging = true;
        this._touchHandle = true;
        this._offset = this.handle.node.convertToNodeSpaceAR(t.touch.getLocation());
        t.stopPropagation();
      },
      _onTouchBegan: function (t) {
        if (this.handle) {
          this._dragging = true;
          if (!this._touchHandle) {
            this._handleSliderLogic(t.touch);
          }
          t.stopPropagation();
        }
      },
      _onTouchMoved: function (t) {
        if (this._dragging) {
          this._handleSliderLogic(t.touch);
          t.stopPropagation();
        }
      },
      _onTouchEnded: function (t) {
        this._dragging = false;
        this._touchHandle = false;
        this._offset = cc.v2();
        t.stopPropagation();
      },
      _onTouchCancelled: function (t) {
        this._dragging = false;
        t.stopPropagation();
      },
      _handleSliderLogic: function (t) {
        this._updateProgress(t);
        this._emitSlideEvent();
      },
      _emitSlideEvent: function () {
        cc.Component.EventHandler.emitEvents(this.slideEvents, this);
        this.node.emit("slide", this);
      },
      _updateProgress: function (t) {
        if (this.handle) {
          var e = this.node;
          var n = e.convertToNodeSpaceAR(t.getLocation());
          if (this.direction === r.Horizontal) {
            this.progress = i.clamp01((n.x - this._offset.x + e.anchorX * e.width) / e.width);
          } else {
            this.progress = i.clamp01((n.y - this._offset.y + e.anchorY * e.height) / e.height);
          }
        }
      },
      _updateHandlePosition: function () {
        if (this.handle) {
          var t;
          t = this.direction === r.Horizontal ? cc.v2(-this.node.width * this.node.anchorX + this.progress * this.node.width, 0) : cc.v2(0, -this.node.height * this.node.anchorY + this.progress * this.node.height);
          var e = this.node.convertToWorldSpaceAR(t);
          this.handle.node.position = this.handle.node.parent.convertToNodeSpaceAR(e);
        }
      }
    });
    cc.Slider = e.exports = s;
  }, {
    "../utils/misc": 236,
    "./CCComponent": 100
  }],
  115: [function (t, e) {
    "use strict";

    var i = t("../utils/misc");
    t("../CCNode").EventType;
    var n = t("./CCRenderComponent");
    var r = t("../utils/blend-func");
    var s = cc.Enum({
      SIMPLE: 0,
      SLICED: 1,
      TILED: 2,
      FILLED: 3,
      MESH: 4
    });
    var a = cc.Enum({
      HORIZONTAL: 0,
      VERTICAL: 1,
      RADIAL: 2
    });
    var o = cc.Enum({
      CUSTOM: 0,
      TRIMMED: 1,
      RAW: 2
    });
    var c = cc.Enum({
      NORMAL: 0,
      GRAY: 1
    });
    var l = cc.Class({
      name: "cc.Sprite",
      extends: n,
      mixins: [r],
      editor: false,
      properties: {
        _spriteFrame: {
          default: null,
          type: cc.SpriteFrame
        },
        _type: s.SIMPLE,
        _sizeMode: o.TRIMMED,
        _fillType: 0,
        _fillCenter: cc.v2(0, 0),
        _fillStart: 0,
        _fillRange: 0,
        _isTrimmedMode: true,
        _atlas: {
          default: null,
          type: cc.SpriteAtlas,
          tooltip: false,
          editorOnly: true,
          visible: true,
          animatable: false
        },
        spriteFrame: {
          get: function () {
            return this._spriteFrame;
          },
          set: function (t) {
            var e = this._spriteFrame;
            if (e !== t) {
              this._spriteFrame = t;
              this._applySpriteFrame(e);
            }
          },
          type: cc.SpriteFrame
        },
        type: {
          get: function () {
            return this._type;
          },
          set: function (t) {
            if (this._type !== t) {
              this._type = t;
              this.setVertsDirty();
              this._resetAssembler();
            }
          },
          type: s,
          animatable: false,
          tooltip: false
        },
        fillType: {
          get: function () {
            return this._fillType;
          },
          set: function (t) {
            if (t !== this._fillType) {
              this._fillType = t;
              this.setVertsDirty();
              this._resetAssembler();
            }
          },
          type: a,
          tooltip: false
        },
        fillCenter: {
          get: function () {
            return this._fillCenter;
          },
          set: function (t) {
            this._fillCenter.x = t.x;
            this._fillCenter.y = t.y;
            if (this._type === s.FILLED) {
              this.setVertsDirty();
            }
          },
          tooltip: false
        },
        fillStart: {
          get: function () {
            return this._fillStart;
          },
          set: function (t) {
            this._fillStart = i.clampf(t, -1, 1);
            if (this._type === s.FILLED) {
              this.setVertsDirty();
            }
          },
          tooltip: false
        },
        fillRange: {
          get: function () {
            return this._fillRange;
          },
          set: function (t) {
            this._fillRange = i.clampf(t, -1, 1);
            if (this._type === s.FILLED) {
              this.setVertsDirty();
            }
          },
          tooltip: false
        },
        trim: {
          get: function () {
            return this._isTrimmedMode;
          },
          set: function (t) {
            if (this._isTrimmedMode !== t) {
              this._isTrimmedMode = t;
              if (!(this._type !== s.SIMPLE && this._type !== s.MESH)) {
                this.setVertsDirty();
              }
            }
          },
          animatable: false,
          tooltip: false
        },
        sizeMode: {
          get: function () {
            return this._sizeMode;
          },
          set: function (t) {
            this._sizeMode = t;
            if (t !== o.CUSTOM) {
              this._applySpriteSize();
            }
          },
          animatable: false,
          type: o,
          tooltip: false
        }
      },
      statics: {
        FillType: a,
        Type: s,
        SizeMode: o,
        State: c
      },
      setVisible: function (t) {
        this.enabled = t;
      },
      setState: function () {},
      getState: function () {},
      __preload: function () {
        this._super();
        this._applySpriteFrame();
      },
      onEnable: function () {
        this._super();
        this._validateRender();
        if (this._spriteFrame && this._spriteFrame.isValid) {
          this._spriteFrame.ensureLoadTexture();
        }
        this.node.on(cc.Node.EventType.SIZE_CHANGED, this.setVertsDirty, this);
        this.node.on(cc.Node.EventType.ANCHOR_CHANGED, this.setVertsDirty, this);
      },
      onDisable: function () {
        this._super();
        this.node.off(cc.Node.EventType.SIZE_CHANGED, this.setVertsDirty, this);
        this.node.off(cc.Node.EventType.ANCHOR_CHANGED, this.setVertsDirty, this);
      },
      onRestore: false,
      _updateMaterial: function () {
        var t = null;
        if (this._spriteFrame) {
          t = this._spriteFrame.getTexture();
        }
        var e = this.getMaterial(0);
        if (e) {
          var i = e.getDefine("USE_TEXTURE");
          if (!(undefined === i || i)) {
            e.define("USE_TEXTURE", true);
          }
          var n = t && t.getImpl();
          if (e.getProperty("texture") !== n) {
            e.setProperty("texture", t);
          }
        }
        r.prototype._updateMaterial.call(this);
      },
      _applyAtlas: false,
      _validateRender: function () {
        var t = this._spriteFrame;
        if (!(this._materials[0] && t && t.textureLoaded())) {
          this.disableRender();
        }
      },
      _applySpriteSize: function () {
        if (this.isValid && this._spriteFrame && this._spriteFrame.isValid) {
          if (o.RAW === this._sizeMode) {
            var t = this._spriteFrame._originalSize;
            this.node.setContentSize(t);
          } else if (o.TRIMMED === this._sizeMode) {
            var e = this._spriteFrame._rect;
            this.node.setContentSize(e.width, e.height);
          }
          this.setVertsDirty();
        }
      },
      _applySpriteFrame: function (t) {
        if (this.isValid) {
          var e = t && t.isValid && t.getTexture();
          if (e && !e.loaded) {
            t.off("load", this._applySpriteSize, this);
          }
          var i = this._spriteFrame;
          var n = i && i.isValid;
          var r = n && i.getTexture();
          if (e !== r) {
            this._updateMaterial();
          }
          if (r && r.loaded) {
            this._applySpriteSize();
          } else {
            this.disableRender();
            if (n) {
              i.once("load", this._applySpriteSize, this);
            }
          }
        }
      }
    });
    cc.Sprite = e.exports = l;
  }, {
    "../CCNode": 26,
    "../utils/blend-func": 230,
    "../utils/misc": 236,
    "./CCRenderComponent": 109
  }],
  116: [function (t, e) {
    "use strict";

    var i = t("../utils/gray-sprite-state");
    var n = cc.Class({
      name: "cc.Toggle",
      extends: t("./CCButton"),
      mixins: [i],
      editor: false,
      properties: {
        _N$isChecked: true,
        isChecked: {
          get: function () {
            return this._N$isChecked;
          },
          set: function (t) {
            if (t !== this._N$isChecked) {
              var e = this.toggleGroup || this._toggleContainer;
              if (!(e && e.enabled && this._N$isChecked && !e.allowSwitchOff)) {
                this._N$isChecked = t;
                this._updateCheckMark();
                if (e && e.enabled) {
                  e.updateToggles(this);
                }
                if (cc.Toggle._triggerEventInScript_isChecked) {
                  this._emitToggleEvents();
                }
              }
            }
          },
          tooltip: false
        },
        toggleGroup: {
          default: null,
          tooltip: false,
          type: t("./CCToggleGroup")
        },
        checkMark: {
          default: null,
          type: cc.Sprite,
          tooltip: false
        },
        checkEvents: {
          default: [],
          type: cc.Component.EventHandler
        },
        _resizeToTarget: {
          animatable: false,
          set: function (t) {
            if (t) {
              this._resizeNodeToTargetNode();
            }
          }
        }
      },
      statics: {
        _triggerEventInScript_check: false,
        _triggerEventInScript_isChecked: false
      },
      onEnable: function () {
        this._super();
        this._registerToggleEvent();
        if (this.toggleGroup && this.toggleGroup.enabledInHierarchy) {
          this.toggleGroup.addToggle(this);
        }
      },
      onDisable: function () {
        this._super();
        this._unregisterToggleEvent();
        if (this.toggleGroup && this.toggleGroup.enabledInHierarchy) {
          this.toggleGroup.removeToggle(this);
        }
      },
      _hideCheckMark: function () {
        this._N$isChecked = false;
        this._updateCheckMark();
      },
      toggle: function (t) {
        this.isChecked = !this.isChecked;
        if (!(cc.Toggle._triggerEventInScript_isChecked || !cc.Toggle._triggerEventInScript_check && !t)) {
          this._emitToggleEvents();
        }
      },
      check: function () {
        this.isChecked = true;
        if (!cc.Toggle._triggerEventInScript_isChecked && cc.Toggle._triggerEventInScript_check) {
          this._emitToggleEvents();
        }
      },
      uncheck: function () {
        this.isChecked = false;
        if (!cc.Toggle._triggerEventInScript_isChecked && cc.Toggle._triggerEventInScript_check) {
          this._emitToggleEvents();
        }
      },
      _updateCheckMark: function () {
        if (this.checkMark) {
          this.checkMark.node.active = !!this.isChecked;
        }
      },
      _updateDisabledState: function () {
        this._super();
        if (this.enableAutoGrayEffect && this.checkMark) {
          var t = !this.interactable;
          this._switchGrayMaterial(t, this.checkMark);
        }
      },
      _registerToggleEvent: function () {
        this.node.on("click", this.toggle, this);
      },
      _unregisterToggleEvent: function () {
        this.node.off("click", this.toggle, this);
      },
      _emitToggleEvents: function () {
        this.node.emit("toggle", this);
        if (this.checkEvents) {
          cc.Component.EventHandler.emitEvents(this.checkEvents, this);
        }
      }
    });
    cc.Toggle = e.exports = n;
    t("../platform/js").get(n.prototype, "_toggleContainer", function () {
      var t = this.node.parent;
      return cc.Node.isNode(t) ? t.getComponent(cc.ToggleContainer) : null;
    });
  }, {
    "../platform/js": 183,
    "../utils/gray-sprite-state": 233,
    "./CCButton": 98,
    "./CCToggleGroup": 118
  }],
  117: [function (t, e) {
    "use strict";

    var i = cc.Class({
      name: "cc.ToggleContainer",
      extends: cc.Component,
      editor: false,
      properties: {
        allowSwitchOff: {
          tooltip: false,
          default: false
        },
        checkEvents: {
          default: [],
          type: cc.Component.EventHandler
        }
      },
      updateToggles: function (t) {
        if (this.enabledInHierarchy && t.isChecked) {
          this.toggleItems.forEach(function (e) {
            if (e !== t && e.isChecked && e.enabled) {
              e._hideCheckMark();
            }
          });
          if (this.checkEvents) {
            cc.Component.EventHandler.emitEvents(this.checkEvents, t);
          }
        }
      },
      _allowOnlyOneToggleChecked: function () {
        var t = false;
        this.toggleItems.forEach(function (e) {
          if (t) {
            e._hideCheckMark();
          } else if (e.isChecked) {
            t = true;
          }
        });
        return t;
      },
      _makeAtLeastOneToggleChecked: function () {
        if (!this._allowOnlyOneToggleChecked() && !this.allowSwitchOff) {
          var t = this.toggleItems;
          if (t.length > 0) {
            t[0].check();
          }
        }
      },
      onEnable: function () {
        this._makeAtLeastOneToggleChecked();
        this.node.on("child-added", this._allowOnlyOneToggleChecked, this);
        this.node.on("child-removed", this._makeAtLeastOneToggleChecked, this);
      },
      onDisable: function () {
        this.node.off("child-added", this._allowOnlyOneToggleChecked, this);
        this.node.off("child-removed", this._makeAtLeastOneToggleChecked, this);
      }
    });
    t("../platform/js").get(i.prototype, "toggleItems", function () {
      return this.node._children.map(function (t) {
        return t.getComponent(cc.Toggle);
      }).filter(Boolean);
    });
    cc.ToggleContainer = e.exports = i;
  }, {
    "../platform/js": 183
  }],
  118: [function (t, e) {
    "use strict";

    var i = cc.Class({
      name: "cc.ToggleGroup",
      extends: cc.Component,
      ctor: function () {
        this._toggleItems = [];
      },
      editor: false,
      properties: {
        allowSwitchOff: {
          tooltip: false,
          default: false
        },
        toggleItems: {
          get: function () {
            return this._toggleItems;
          }
        }
      },
      updateToggles: function (t) {
        if (this.enabledInHierarchy) {
          this._toggleItems.forEach(function (e) {
            if (t.isChecked && e !== t && e.isChecked && e.enabled) {
              e._hideCheckMark();
            }
          });
        }
      },
      addToggle: function (t) {
        if (-1 === this._toggleItems.indexOf(t)) {
          this._toggleItems.push(t);
        }
        this._allowOnlyOneToggleChecked();
      },
      removeToggle: function (t) {
        var e = this._toggleItems.indexOf(t);
        if (e > -1) {
          this._toggleItems.splice(e, 1);
        }
        this._makeAtLeastOneToggleChecked();
      },
      _allowOnlyOneToggleChecked: function () {
        var t = false;
        this._toggleItems.forEach(function (e) {
          if (t && e.enabled) {
            e._hideCheckMark();
          }
          if (e.isChecked && e.enabled) {
            t = true;
          }
        });
        return t;
      },
      _makeAtLeastOneToggleChecked: function () {
        if (!(this._allowOnlyOneToggleChecked() || this.allowSwitchOff)) {
          if (this._toggleItems.length > 0) {
            this._toggleItems[0].isChecked = true;
          }
        }
      },
      start: function () {
        this._makeAtLeastOneToggleChecked();
      }
    });
    var n = t("../platform/js");
    var r = false;
    n.get(cc, "ToggleGroup", function () {
      if (!r) {
        r = true;
      }
      return i;
    });
    e.exports = i;
  }, {
    "../platform/js": 183
  }],
  119: [function (t, e) {
    "use strict";

    var i = cc.Class({
      name: "cc.ViewGroup",
      extends: t("./CCComponent")
    });
    cc.ViewGroup = e.exports = i;
  }, {
    "./CCComponent": 100
  }],
  120: [function (t, e) {
    "use strict";

    var i = t("../base-ui/CCWidgetManager");
    var n = i.AlignMode;
    var r = i._AlignFlags;
    var s = r.TOP;
    var a = r.MID;
    var o = r.BOT;
    var c = r.LEFT;
    var l = r.CENTER;
    var h = r.RIGHT;
    var u = s | o;
    var f = c | h;
    var d = cc.Class({
      name: "cc.Widget",
      extends: t("./CCComponent"),
      editor: false,
      properties: {
        target: {
          get: function () {
            return this._target;
          },
          set: function (t) {
            this._target = t;
          },
          type: cc.Node,
          tooltip: false
        },
        isAlignTop: {
          get: function () {
            return (this._alignFlags & s) > 0;
          },
          set: function (t) {
            this._setAlign(s, t);
          },
          animatable: false,
          tooltip: false
        },
        isAlignVerticalCenter: {
          get: function () {
            return (this._alignFlags & a) > 0;
          },
          set: function (t) {
            if (t) {
              this.isAlignTop = false;
              this.isAlignBottom = false;
              this._alignFlags |= a;
            } else {
              this._alignFlags &= ~a;
            }
          },
          animatable: false,
          tooltip: false
        },
        isAlignBottom: {
          get: function () {
            return (this._alignFlags & o) > 0;
          },
          set: function (t) {
            this._setAlign(o, t);
          },
          animatable: false,
          tooltip: false
        },
        isAlignLeft: {
          get: function () {
            return (this._alignFlags & c) > 0;
          },
          set: function (t) {
            this._setAlign(c, t);
          },
          animatable: false,
          tooltip: false
        },
        isAlignHorizontalCenter: {
          get: function () {
            return (this._alignFlags & l) > 0;
          },
          set: function (t) {
            if (t) {
              this.isAlignLeft = false;
              this.isAlignRight = false;
              this._alignFlags |= l;
            } else {
              this._alignFlags &= ~l;
            }
          },
          animatable: false,
          tooltip: false
        },
        isAlignRight: {
          get: function () {
            return (this._alignFlags & h) > 0;
          },
          set: function (t) {
            this._setAlign(h, t);
          },
          animatable: false,
          tooltip: false
        },
        isStretchWidth: {
          get: function () {
            return (this._alignFlags & f) === f;
          },
          visible: false
        },
        isStretchHeight: {
          get: function () {
            return (this._alignFlags & u) === u;
          },
          visible: false
        },
        top: {
          get: function () {
            return this._top;
          },
          set: function (t) {
            this._top = t;
          },
          tooltip: false
        },
        bottom: {
          get: function () {
            return this._bottom;
          },
          set: function (t) {
            this._bottom = t;
          },
          tooltip: false
        },
        left: {
          get: function () {
            return this._left;
          },
          set: function (t) {
            this._left = t;
          },
          tooltip: false
        },
        right: {
          get: function () {
            return this._right;
          },
          set: function (t) {
            this._right = t;
          },
          tooltip: false
        },
        horizontalCenter: {
          get: function () {
            return this._horizontalCenter;
          },
          set: function (t) {
            this._horizontalCenter = t;
          },
          tooltip: false
        },
        verticalCenter: {
          get: function () {
            return this._verticalCenter;
          },
          set: function (t) {
            this._verticalCenter = t;
          },
          tooltip: false
        },
        isAbsoluteHorizontalCenter: {
          get: function () {
            return this._isAbsHorizontalCenter;
          },
          set: function (t) {
            this._isAbsHorizontalCenter = t;
          },
          animatable: false
        },
        isAbsoluteVerticalCenter: {
          get: function () {
            return this._isAbsVerticalCenter;
          },
          set: function (t) {
            this._isAbsVerticalCenter = t;
          },
          animatable: false
        },
        isAbsoluteTop: {
          get: function () {
            return this._isAbsTop;
          },
          set: function (t) {
            this._isAbsTop = t;
          },
          animatable: false
        },
        isAbsoluteBottom: {
          get: function () {
            return this._isAbsBottom;
          },
          set: function (t) {
            this._isAbsBottom = t;
          },
          animatable: false
        },
        isAbsoluteLeft: {
          get: function () {
            return this._isAbsLeft;
          },
          set: function (t) {
            this._isAbsLeft = t;
          },
          animatable: false
        },
        isAbsoluteRight: {
          get: function () {
            return this._isAbsRight;
          },
          set: function (t) {
            this._isAbsRight = t;
          },
          animatable: false
        },
        alignMode: {
          default: n.ON_WINDOW_RESIZE,
          type: n,
          tooltip: false
        },
        _wasAlignOnce: {
          default: undefined,
          formerlySerializedAs: "isAlignOnce"
        },
        _target: null,
        _alignFlags: 0,
        _left: 0,
        _right: 0,
        _top: 0,
        _bottom: 0,
        _verticalCenter: 0,
        _horizontalCenter: 0,
        _isAbsLeft: true,
        _isAbsRight: true,
        _isAbsTop: true,
        _isAbsBottom: true,
        _isAbsHorizontalCenter: true,
        _isAbsVerticalCenter: true,
        _originalWidth: 0,
        _originalHeight: 0
      },
      statics: {
        AlignMode: n
      },
      onLoad: function () {
        if (undefined !== this._wasAlignOnce) {
          this.alignMode = this._wasAlignOnce ? n.ONCE : n.ALWAYS;
          this._wasAlignOnce = undefined;
        }
      },
      onEnable: function () {
        i.add(this);
      },
      onDisable: function () {
        i.remove(this);
      },
      _validateTargetInDEV: false,
      _setAlign: function (t, e) {
        if (e !== (this._alignFlags & t) > 0) {
          var i = (t & f) > 0;
          if (e) {
            this._alignFlags |= t;
            if (i) {
              this.isAlignHorizontalCenter = false;
              if (this.isStretchWidth) {
                this._originalWidth = this.node.width;
              }
            } else {
              this.isAlignVerticalCenter = false;
              if (this.isStretchHeight) {
                this._originalHeight = this.node.height;
              }
            }
          } else {
            if (i) {
              if (this.isStretchWidth) {
                this.node.width = this._originalWidth;
              }
            } else if (this.isStretchHeight) {
              this.node.height = this._originalHeight;
            }
            this._alignFlags &= ~t;
          }
        }
      },
      updateAlignment: function () {
        i.updateAlignment(this.node);
      }
    });
    Object.defineProperty(d.prototype, "isAlignOnce", {
      get: function () {
        return this.alignMode === n.ONCE;
      },
      set: function (t) {
        this.alignMode = t ? n.ONCE : n.ALWAYS;
      }
    });
    cc.Widget = e.exports = d;
  }, {
    "../base-ui/CCWidgetManager": 85,
    "./CCComponent": 100
  }],
  121: [function (t, e) {
    "use strict";

    var i = t("./CCComponent");
    var n = cc.Class({
      name: "cc.SubContextView",
      extends: i,
      editor: false,
      properties: {
        _firstlyEnabled: true,
        _fps: 60,
        fps: {
          get: function () {
            return this._fps;
          },
          set: function (t) {
            if (this._fps !== t) {
              this._fps = t;
              this._updateInterval = 1 / t;
              this._updateSubContextFrameRate();
            }
          },
          tooltip: false
        }
      },
      ctor: function () {
        this._sprite = null;
        this._tex = new cc.Texture2D();
        this._tex._packable = false;
        this._context = null;
        this._updatedTime = performance.now();
        this._updateInterval = 0;
      },
      onLoad: function () {
        if (window.__globalAdapter && __globalAdapter.getOpenDataContext) {
          this._updateInterval = 1e3 / this._fps;
          this._context = __globalAdapter.getOpenDataContext();
          this.reset();
          var t = this._context.canvas;
          this._tex.setPremultiplyAlpha(true);
          this._tex.initWithElement(t);
          this._tex._packable = false;
          this._sprite = this.node.getComponent(cc.Sprite);
          if (!this._sprite) {
            this._sprite = this.node.addComponent(cc.Sprite);
            this._sprite.srcBlendFactor = cc.macro.BlendFactor.ONE;
          }
          this._sprite.spriteFrame = new cc.SpriteFrame(this._tex);
        } else {
          this.enabled = false;
        }
      },
      reset: function () {
        if (this._context) {
          this.updateSubContextViewport();
          var t = this._context.canvas;
          if (t) {
            t.width = this.node.width;
            t.height = this.node.height;
          }
        }
      },
      onEnable: function () {
        if (this._firstlyEnabled && this._context) {
          this._context.postMessage({
            fromEngine: true,
            event: "boot"
          });
          this._firstlyEnabled = false;
        } else {
          this._runSubContextMainLoop();
        }
        this._registerNodeEvent();
        this._updateSubContextFrameRate();
        this.updateSubContextViewport();
      },
      onDisable: function () {
        this._unregisterNodeEvent();
        this._stopSubContextMainLoop();
      },
      update: function (t) {
        if (undefined === t) {
          if (this._context) {
            this._context.postMessage({
              fromEngine: true,
              event: "step"
            });
          }
          return void this._updateSubContextTexture();
        }
        if (performance.now() - this._updatedTime >= this._updateInterval) {
          this._updatedTime += this._updateInterval;
          this._updateSubContextTexture();
        }
      },
      _updateSubContextTexture: function () {
        if (this._tex && this._context) {
          this._tex.initWithElement(this._context.canvas);
          this._tex._packable = false;
          this._sprite._activateMaterial();
        }
      },
      updateSubContextViewport: function () {
        if (this._context) {
          var t = this.node.getBoundingBoxToWorld();
          var e = cc.view._scaleX;
          var i = cc.view._scaleY;
          this._context.postMessage({
            fromEngine: true,
            event: "viewport",
            x: t.x * e + cc.view._viewportRect.x,
            y: t.y * i + cc.view._viewportRect.y,
            width: t.width * e,
            height: t.height * i
          });
        }
      },
      _registerNodeEvent: function () {
        this.node.on("position-changed", this.updateSubContextViewport, this);
        this.node.on("scale-changed", this.updateSubContextViewport, this);
        this.node.on("size-changed", this.updateSubContextViewport, this);
      },
      _unregisterNodeEvent: function () {
        this.node.off("position-changed", this.updateSubContextViewport, this);
        this.node.off("scale-changed", this.updateSubContextViewport, this);
        this.node.off("size-changed", this.updateSubContextViewport, this);
      },
      _runSubContextMainLoop: function () {
        if (this._context) {
          this._context.postMessage({
            fromEngine: true,
            event: "mainLoop",
            value: true
          });
        }
      },
      _stopSubContextMainLoop: function () {
        if (this._context) {
          this._context.postMessage({
            fromEngine: true,
            event: "mainLoop",
            value: false
          });
        }
      },
      _updateSubContextFrameRate: function () {
        if (this._context) {
          this._context.postMessage({
            fromEngine: true,
            event: "frameRate",
            value: this._fps
          });
        }
      }
    });
    cc.SubContextView = e.exports = n;
    cc.WXSubContextView = n;
    cc.SwanSubContextView = n;
  }, {
    "./CCComponent": 100
  }],
  122: [function (t, e) {
    "use strict";

    var i = t("../../platform/CCMacro");
    var n = t("../editbox/EditBoxImplBase");
    var r = t("../CCLabel");
    var s = t("./types");
    var a = s.InputMode;
    var o = s.InputFlag;
    var c = s.KeyboardReturnType;
    var h = cc.Class({
      name: "cc.EditBox",
      extends: cc.Component,
      editor: false,
      properties: {
        _string: "",
        string: {
          tooltip: false,
          get: function () {
            return this._string;
          },
          set: function (t) {
            t = "" + t;
            if (this.maxLength >= 0 && t.length >= this.maxLength) {
              t = t.slice(0, this.maxLength);
            }
            this._string = t;
            this._updateString(t);
          }
        },
        textLabel: {
          tooltip: false,
          default: null,
          type: r,
          notify: function (t) {
            if (this.textLabel && this.textLabel !== t) {
              this._updateTextLabel();
              this._updateLabels();
            }
          }
        },
        placeholderLabel: {
          tooltip: false,
          default: null,
          type: r,
          notify: function (t) {
            if (this.placeholderLabel && this.placeholderLabel !== t) {
              this._updatePlaceholderLabel();
              this._updateLabels();
            }
          }
        },
        background: {
          tooltip: false,
          default: null,
          type: cc.Sprite,
          notify: function (t) {
            if (this.background && this.background !== t) {
              this._updateBackgroundSprite();
            }
          }
        },
        _N$backgroundImage: {
          default: undefined,
          type: cc.SpriteFrame
        },
        backgroundImage: {
          get: function () {
            return this.background ? this.background.spriteFrame : null;
          },
          set: function (t) {
            if (this.background) {
              this.background.spriteFrame = t;
            }
          }
        },
        returnType: {
          default: c.DEFAULT,
          tooltip: false,
          displayName: "KeyboardReturnType",
          type: c
        },
        _N$returnType: {
          default: undefined,
          type: cc.Float
        },
        inputFlag: {
          tooltip: false,
          default: o.DEFAULT,
          type: o,
          notify: function () {
            this._updateString(this._string);
          }
        },
        inputMode: {
          tooltip: false,
          default: a.ANY,
          type: a,
          notify: function (t) {
            if (this.inputMode !== t) {
              this._updateTextLabel();
              this._updatePlaceholderLabel();
            }
          }
        },
        fontSize: {
          get: function () {
            return this.textLabel ? this.textLabel.fontSize : 0;
          },
          set: function (t) {
            if (this.textLabel) {
              this.textLabel.fontSize = t;
            }
          }
        },
        _N$fontSize: {
          default: undefined,
          type: cc.Float
        },
        lineHeight: {
          get: function () {
            return this.textLabel ? this.textLabel.lineHeight : 0;
          },
          set: function (t) {
            if (this.textLabel) {
              this.textLabel.lineHeight = t;
            }
          }
        },
        _N$lineHeight: {
          default: undefined,
          type: cc.Float
        },
        fontColor: {
          get: function () {
            return this.textLabel ? this.textLabel.node.color : cc.Color.BLACK;
          },
          set: function (t) {
            if (this.textLabel) {
              this.textLabel.node.color = t;
              this.textLabel.node.opacity = t.a;
            }
          }
        },
        _N$fontColor: undefined,
        placeholder: {
          tooltip: false,
          get: function () {
            return this.placeholderLabel ? this.placeholderLabel.string : "";
          },
          set: function (t) {
            if (this.placeholderLabel) {
              this.placeholderLabel.string = t;
            }
          }
        },
        _N$placeholder: {
          default: undefined,
          type: cc.String
        },
        placeholderFontSize: {
          get: function () {
            return this.placeholderLabel ? this.placeholderLabel.fontSize : 0;
          },
          set: function (t) {
            if (this.placeholderLabel) {
              this.placeholderLabel.fontSize = t;
            }
          }
        },
        _N$placeholderFontSize: {
          default: undefined,
          type: cc.Float
        },
        placeholderFontColor: {
          get: function () {
            return this.placeholderLabel ? this.placeholderLabel.node.color : cc.Color.BLACK;
          },
          set: function (t) {
            if (this.placeholderLabel) {
              this.placeholderLabel.node.color = t;
              this.placeholderLabel.node.opacity = t.a;
            }
          }
        },
        _N$placeholderFontColor: undefined,
        maxLength: {
          tooltip: false,
          default: 20
        },
        _N$maxLength: {
          default: undefined,
          type: cc.Float
        },
        stayOnTop: {
          default: false,
          notify: function () {}
        },
        _tabIndex: 0,
        tabIndex: {
          tooltip: false,
          get: function () {
            return this._tabIndex;
          },
          set: function (t) {
            if (this._tabIndex !== t) {
              this._tabIndex = t;
              if (this._impl) {
                this._impl.setTabIndex(t);
              }
            }
          }
        },
        editingDidBegan: {
          default: [],
          type: cc.Component.EventHandler
        },
        textChanged: {
          default: [],
          type: cc.Component.EventHandler
        },
        editingDidEnded: {
          default: [],
          type: cc.Component.EventHandler
        },
        editingReturn: {
          default: [],
          type: cc.Component.EventHandler
        }
      },
      statics: {
        _ImplClass: n,
        KeyboardReturnType: c,
        InputFlag: o,
        InputMode: a
      },
      _init: function () {
        this._upgradeComp();
        this._isLabelVisible = true;
        this.node.on(cc.Node.EventType.SIZE_CHANGED, this._syncSize, this);
        (this._impl = new h._ImplClass()).init(this);
        this._updateString(this._string);
        this._syncSize();
      },
      _updateBackgroundSprite: function () {
        var t = this.background;
        if (!t) {
          var e = this.node.getChildByName("BACKGROUND_SPRITE");
          if (!e) {
            e = new cc.Node("BACKGROUND_SPRITE");
          }
          if (!(t = e.getComponent(cc.Sprite))) {
            t = e.addComponent(cc.Sprite);
          }
          e.parent = this.node;
          this.background = t;
        }
        t.type = cc.Sprite.Type.SLICED;
        if (undefined !== this._N$backgroundImage) {
          t.spriteFrame = this._N$backgroundImage;
          this._N$backgroundImage = undefined;
        }
      },
      _updateTextLabel: function () {
        var t = this.textLabel;
        if (!t) {
          var e = this.node.getChildByName("TEXT_LABEL");
          if (!e) {
            e = new cc.Node("TEXT_LABEL");
          }
          if (!(t = e.getComponent(r))) {
            t = e.addComponent(r);
          }
          e.parent = this.node;
          this.textLabel = t;
        }
        t.node.setAnchorPoint(0, 1);
        t.overflow = r.Overflow.CLAMP;
        if (this.inputMode === a.ANY) {
          t.verticalAlign = i.VerticalTextAlignment.TOP;
          t.enableWrapText = true;
        } else {
          t.verticalAlign = i.VerticalTextAlignment.CENTER;
          t.enableWrapText = false;
        }
        t.string = this._updateLabelStringStyle(this._string);
        if (undefined !== this._N$fontColor) {
          t.node.color = this._N$fontColor;
          t.node.opacity = this._N$fontColor.a;
          this._N$fontColor = undefined;
        }
        if (undefined !== this._N$fontSize) {
          t.fontSize = this._N$fontSize;
          this._N$fontSize = undefined;
        }
        if (undefined !== this._N$lineHeight) {
          t.lineHeight = this._N$lineHeight;
          this._N$lineHeight = undefined;
        }
      },
      _updatePlaceholderLabel: function () {
        var t = this.placeholderLabel;
        if (!t) {
          var e = this.node.getChildByName("PLACEHOLDER_LABEL");
          if (!e) {
            e = new cc.Node("PLACEHOLDER_LABEL");
          }
          if (!(t = e.getComponent(r))) {
            t = e.addComponent(r);
          }
          e.parent = this.node;
          this.placeholderLabel = t;
        }
        t.node.setAnchorPoint(0, 1);
        t.overflow = r.Overflow.CLAMP;
        if (this.inputMode === a.ANY) {
          t.verticalAlign = i.VerticalTextAlignment.TOP;
          t.enableWrapText = true;
        } else {
          t.verticalAlign = i.VerticalTextAlignment.CENTER;
          t.enableWrapText = false;
        }
        t.string = this.placeholder;
        if (undefined !== this._N$placeholderFontColor) {
          t.node.color = this._N$placeholderFontColor;
          t.node.opacity = this._N$placeholderFontColor.a;
          this._N$placeholderFontColor = undefined;
        }
        if (undefined !== this._N$placeholderFontSize) {
          t.fontSize = this._N$placeholderFontSize;
          this._N$placeholderFontSize = undefined;
        }
      },
      _upgradeComp: function () {
        if (undefined !== this._N$returnType) {
          this.returnType = this._N$returnType;
          this._N$returnType = undefined;
        }
        if (undefined !== this._N$maxLength) {
          this.maxLength = this._N$maxLength;
          this._N$maxLength = undefined;
        }
        if (undefined !== this._N$backgroundImage) {
          this._updateBackgroundSprite();
        }
        if (!(undefined === this._N$fontColor && undefined === this._N$fontSize && undefined === this._N$lineHeight)) {
          this._updateTextLabel();
        }
        if (!(undefined === this._N$placeholderFontColor && undefined === this._N$placeholderFontSize)) {
          this._updatePlaceholderLabel();
        }
        if (undefined !== this._N$placeholder) {
          this.placeholder = this._N$placeholder;
          this._N$placeholder = undefined;
        }
      },
      _syncSize: function () {
        if (this._impl) {
          var t = this.node.getContentSize();
          this._impl.setSize(t.width, t.height);
        }
      },
      _showLabels: function () {
        this._isLabelVisible = true;
        this._updateLabels();
      },
      _hideLabels: function () {
        this._isLabelVisible = false;
        if (this.textLabel) {
          this.textLabel.node.active = false;
        }
        if (this.placeholderLabel) {
          this.placeholderLabel.node.active = false;
        }
      },
      _updateLabels: function () {
        if (this._isLabelVisible) {
          var t = this._string;
          if (this.textLabel) {
            this.textLabel.node.active = "" !== t;
          }
          if (this.placeholderLabel) {
            this.placeholderLabel.node.active = "" === t;
          }
        }
      },
      _updateString: function (t) {
        var e = this.textLabel;
        if (e) {
          var i = t;
          if (i) {
            i = this._updateLabelStringStyle(i);
          }
          e.string = i;
          this._updateLabels();
        }
      },
      _updateLabelStringStyle: function (t, e) {
        var i = this.inputFlag;
        if (e || i !== o.PASSWORD) {
          if (i === o.INITIAL_CAPS_ALL_CHARACTERS) {
            t = t.toUpperCase();
          } else if (i === o.INITIAL_CAPS_WORD) {
            t = t.replace(/(?:^|\s)\S/g, function (t) {
              return t.toUpperCase();
            });
          } else if (i === o.INITIAL_CAPS_SENTENCE) {
            t = t.charAt(0).toUpperCase() + t.slice(1);
          }
        } else {
          var n = "";
          var r = t.length;
          for (var s = 0; s < r; ++s) {
            n += "●";
          }
          t = n;
        }
        return t;
      },
      editBoxEditingDidBegan: function () {
        cc.Component.EventHandler.emitEvents(this.editingDidBegan, this);
        this.node.emit("editing-did-began", this);
      },
      editBoxEditingDidEnded: function () {
        cc.Component.EventHandler.emitEvents(this.editingDidEnded, this);
        this.node.emit("editing-did-ended", this);
      },
      editBoxTextChanged: function (t) {
        t = this._updateLabelStringStyle(t, true);
        this.string = t;
        cc.Component.EventHandler.emitEvents(this.textChanged, t, this);
        this.node.emit("text-changed", this);
      },
      editBoxEditingReturn: function () {
        cc.Component.EventHandler.emitEvents(this.editingReturn, this);
        this.node.emit("editing-return", this);
      },
      onEnable: function () {
        this._registerEvent();
        if (this._impl) {
          this._impl.enable();
        }
      },
      onDisable: function () {
        this._unregisterEvent();
        if (this._impl) {
          this._impl.disable();
        }
      },
      onDestroy: function () {
        if (this._impl) {
          this._impl.clear();
        }
      },
      __preload: function () {
        this._init();
      },
      _registerEvent: function () {
        this.node.on(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this);
        this.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
      },
      _unregisterEvent: function () {
        this.node.off(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this);
        this.node.off(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
      },
      _onTouchBegan: function (t) {
        t.stopPropagation();
      },
      _onTouchCancel: function (t) {
        t.stopPropagation();
      },
      _onTouchEnded: function (t) {
        if (this._impl) {
          this._impl.beginEditing();
        }
        t.stopPropagation();
      },
      setFocus: function () {
        if (this._impl) {
          this._impl.setFocus(true);
        }
      },
      focus: function () {
        if (this._impl) {
          this._impl.setFocus(true);
        }
      },
      blur: function () {
        if (this._impl) {
          this._impl.setFocus(false);
        }
      },
      isFocused: function () {
        return !!this._impl && this._impl.isFocused();
      },
      update: function () {
        if (this._impl) {
          this._impl.update();
        }
      }
    });
    cc.EditBox = e.exports = h;
    if (cc.sys.isBrowser) {
      t("./WebEditBoxImpl");
    }
  }, {
    "../../platform/CCMacro": 167,
    "../CCLabel": 102,
    "../editbox/EditBoxImplBase": 123,
    "./WebEditBoxImpl": 124,
    "./types": 126
  }],
  123: [function (t, e) {
    "use strict";

    var i = cc.Class({
      ctor: function () {
        this._delegate = null;
        this._editing = false;
      },
      init: function () {},
      enable: function () {},
      disable: function () {
        if (this._editing) {
          this.endEditing();
        }
      },
      clear: function () {},
      update: function () {},
      setTabIndex: function () {},
      setSize: function () {},
      setFocus: function (t) {
        if (t) {
          this.beginEditing();
        } else {
          this.endEditing();
        }
      },
      isFocused: function () {
        return this._editing;
      },
      beginEditing: function () {},
      endEditing: function () {}
    });
    e.exports = i;
  }, {}],
  124: [function (t) {
    "use strict";

    var e;
    var i = (e = t("../../value-types/mat4")) && e.__esModule ? e : {
      default: e
    };
    var n = t("../../platform/utils");
    var r = t("../../platform/CCMacro");
    var s = t("./types");
    var a = t("../CCLabel");
    var o = t("./tabIndexUtil");
    var c = cc.EditBox;
    var l = cc.js;
    var h = s.InputMode;
    var u = s.InputFlag;
    var f = s.KeyboardReturnType;
    var d = {
      zoomInvalid: false
    };
    if (!(cc.sys.OS_ANDROID !== cc.sys.os || cc.sys.browserType !== cc.sys.BROWSER_TYPE_SOUGOU && cc.sys.browserType !== cc.sys.BROWSER_TYPE_360)) {
      d.zoomInvalid = true;
    }
    var _ = 0;
    var p = cc.v3();
    var v = null;
    var g = false;
    var m = false;
    var y = c._ImplClass;
    function T() {
      y.call(this);
      this._domId = "EditBoxId_" + ++_;
      this._placeholderStyleSheet = null;
      this._elem = null;
      this._isTextArea = false;
      this._worldMat = new i.default();
      this._cameraMat = new i.default();
      this._m00 = 0;
      this._m01 = 0;
      this._m04 = 0;
      this._m05 = 0;
      this._m12 = 0;
      this._m13 = 0;
      this._w = 0;
      this._h = 0;
      this._cacheViewportRect = cc.rect(0, 0, 0, 0);
      this._inputMode = null;
      this._inputFlag = null;
      this._returnType = null;
      this._eventListeners = {};
      this._textLabelFont = null;
      this._textLabelFontSize = null;
      this._textLabelFontColor = null;
      this._textLabelAlign = null;
      this._placeholderLabelFont = null;
      this._placeholderLabelFontSize = null;
      this._placeholderLabelFontColor = null;
      this._placeholderLabelAlign = null;
      this._placeholderLineHeight = null;
    }
    l.extend(T, y);
    c._ImplClass = T;
    Object.assign(T.prototype, {
      init: function (t) {
        if (t) {
          this._delegate = t;
          if (t.inputMode === h.ANY) {
            this._createTextArea();
          } else {
            this._createInput();
          }
          o.add(this);
          this.setTabIndex(t.tabIndex);
          this._initStyleSheet();
          this._registerEventListeners();
          this._addDomToGameContainer();
          g = cc.view.isAutoFullScreenEnabled();
          m = cc.view._resizeWithBrowserSize;
        }
      },
      clear: function () {
        this._removeEventListeners();
        this._removeDomFromGameContainer();
        o.remove(this);
        if (v === this) {
          v = null;
        }
      },
      update: function () {
        this._updateMatrix();
      },
      setTabIndex: function (t) {
        this._elem.tabIndex = t;
        o.resort();
      },
      setSize: function (t, e) {
        var i = this._elem;
        i.style.width = t + "px";
        i.style.height = e + "px";
      },
      beginEditing: function () {
        if (v && v !== this) {
          v.setFocus(false);
        }
        this._editing = true;
        v = this;
        this._delegate.editBoxEditingDidBegan();
        this._showDom();
        this._elem.focus();
      },
      endEditing: function () {
        if (this._elem) {
          this._elem.blur();
        }
      },
      _createInput: function () {
        this._isTextArea = false;
        this._elem = document.createElement("input");
      },
      _createTextArea: function () {
        this._isTextArea = true;
        this._elem = document.createElement("textarea");
      },
      _addDomToGameContainer: function () {
        cc.game.container.appendChild(this._elem);
        document.head.appendChild(this._placeholderStyleSheet);
      },
      _removeDomFromGameContainer: function () {
        if (n.contains(cc.game.container, this._elem)) {
          cc.game.container.removeChild(this._elem);
        }
        if (n.contains(document.head, this._placeholderStyleSheet)) {
          document.head.removeChild(this._placeholderStyleSheet);
        }
        delete this._elem;
        delete this._placeholderStyleSheet;
      },
      _showDom: function () {
        this._updateMaxLength();
        this._updateInputType();
        this._updateStyleSheet();
        this._elem.style.display = "";
        this._delegate._hideLabels();
        if (cc.sys.isMobile) {
          this._showDomOnMobile();
        }
      },
      _hideDom: function () {
        this._elem.style.display = "none";
        this._delegate._showLabels();
        if (cc.sys.isMobile) {
          this._hideDomOnMobile();
        }
      },
      _showDomOnMobile: function () {
        if (cc.sys.os === cc.sys.OS_ANDROID) {
          if (g) {
            cc.view.enableAutoFullScreen(false);
            cc.screen.exitFullScreen();
          }
          if (m) {
            cc.view.resizeWithBrowserSize(false);
          }
          this._adjustWindowScroll();
        }
      },
      _hideDomOnMobile: function () {
        if (cc.sys.os === cc.sys.OS_ANDROID) {
          if (m) {
            cc.view.resizeWithBrowserSize(true);
          }
          setTimeout(function () {
            if (!v) {
              if (g) {
                cc.view.enableAutoFullScreen(true);
              }
            }
          }, 800);
        }
      },
      _adjustWindowScroll: function () {
        var t = this;
        setTimeout(function () {
          if (window.scrollY < 100) {
            t._elem.scrollIntoView({
              block: "start",
              inline: "nearest",
              behavior: "smooth"
            });
          }
        }, 800);
      },
      _scrollBackWindow: function () {
        setTimeout(function () {
          var t = cc.sys;
          if (t.browserType !== t.BROWSER_TYPE_WECHAT || t.os !== t.OS_IOS) {
            window.scrollTo(0, 0);
          } else if (window.top) {
            window.top.scrollTo(0, 0);
          }
        }, 800);
      },
      _updateCameraMatrix: function () {
        var t = this._delegate.node;
        t.getWorldMatrix(this._worldMat);
        var e = this._worldMat;
        var n = t._contentSize;
        var r = t._anchorPoint;
        p.x = -r.x * n.width;
        p.y = -r.y * n.height;
        i.default.transform(e, e, p);
        var s = cc.Camera.findCamera(t);
        return !!s && (s.getWorldToScreenMatrix2D(this._cameraMat), i.default.mul(this._cameraMat, this._cameraMat, e), true);
      },
      _updateMatrix: function () {
        if (this._updateCameraMatrix()) {
          var t = this._cameraMat.m;
          var e = this._delegate.node;
          var i = cc.view;
          if (this._m00 !== t[0] || this._m01 !== t[1] || this._m04 !== t[4] || this._m05 !== t[5] || this._m12 !== t[12] || this._m13 !== t[13] || this._w !== e._contentSize.width || this._h !== e._contentSize.height || !this._cacheViewportRect.equals(i._viewportRect)) {
            this._m00 = t[0];
            this._m01 = t[1];
            this._m04 = t[4];
            this._m05 = t[5];
            this._m12 = t[12];
            this._m13 = t[13];
            this._w = e._contentSize.width;
            this._h = e._contentSize.height;
            this._cacheViewportRect.set(i._viewportRect);
            var n = i._scaleX;
            var r = i._scaleY;
            var s = i._viewportRect;
            var a = i._devicePixelRatio;
            n /= a;
            r /= a;
            var o = cc.game.container;
            var c = t[0] * n;
            var l = t[1];
            var h = t[4];
            var u = t[5] * r;
            var f = o && o.style.paddingLeft && parseInt(o.style.paddingLeft);
            f += s.x / a;
            var _ = o && o.style.paddingBottom && parseInt(o.style.paddingBottom);
            _ += s.y / a;
            var p = t[12] * n + f;
            var v = t[13] * r + _;
            var g = this._elem;
            var m = "matrix(" + c + "," + -l + "," + -h + "," + u + "," + p + "," + -v + ")";
            g.style.transform = m;
            g.style["-webkit-transform"] = m;
            g.style["transform-origin"] = "0px 100% 0px";
            g.style["-webkit-transform-origin"] = "0px 100% 0px";
          }
        }
      },
      _updateInputType: function () {
        var t = this._delegate;
        var e = t.inputMode;
        var i = t.inputFlag;
        var n = t.returnType;
        var r = this._elem;
        if (this._inputMode !== e || this._inputFlag !== i || this._returnType !== n) {
          this._inputMode = e;
          this._inputFlag = i;
          this._returnType = n;
          if (this._isTextArea) {
            var s = "none";
            if (i === u.INITIAL_CAPS_ALL_CHARACTERS) {
              s = "uppercase";
            } else if (i === u.INITIAL_CAPS_WORD) {
              s = "capitalize";
            }
            return void (r.style.textTransform = s);
          }
          if (i === u.PASSWORD) {
            r.type = "password";
            return void (r.style.textTransform = "none");
          }
          var a = r.type;
          if (e === h.EMAIL_ADDR) {
            a = "email";
          } else if (e === h.NUMERIC) {
            a = "number";
          } else if (e === h.DECIMAL) {
            a = "digit";
          } else if (e === h.PHONE_NUMBER) {
            a = "tel";
            r.onmousewheel = function () {
              return false;
            };
          } else if (e === h.URL) {
            a = "url";
          } else {
            a = "text";
            if (n === f.SEARCH) {
              a = "search";
            }
          }
          r.type = a;
          var o = "none";
          if (i === u.INITIAL_CAPS_ALL_CHARACTERS) {
            o = "uppercase";
          } else if (i === u.INITIAL_CAPS_WORD) {
            o = "capitalize";
          }
          r.style.textTransform = o;
        }
      },
      _updateMaxLength: function () {
        var t = this._delegate.maxLength;
        if (t < 0) {
          t = 65535;
        }
        this._elem.maxLength = t;
      },
      _initStyleSheet: function () {
        var t = this._elem;
        t.style.display = "none";
        t.style.border = 0;
        t.style.background = "transparent";
        t.style.width = "100%";
        t.style.height = "100%";
        t.style.active = 0;
        t.style.outline = "medium";
        t.style.padding = "0";
        t.style.textTransform = "none";
        t.style.position = "absolute";
        t.style.bottom = "0px";
        t.style.left = "2px";
        t.className = "cocosEditBox";
        t.id = this._domId;
        if (this._isTextArea) {
          t.style.resize = "none";
          t.style.overflow_y = "scroll";
        } else {
          t.type = "text";
          t.style["-moz-appearance"] = "textfield";
        }
        this._placeholderStyleSheet = document.createElement("style");
      },
      _updateStyleSheet: function () {
        var t = this._delegate;
        var e = this._elem;
        e.value = t.string;
        e.placeholder = t.placeholder;
        this._updateTextLabel(t.textLabel);
        this._updatePlaceholderLabel(t.placeholderLabel);
      },
      _updateTextLabel: function (t) {
        if (t) {
          var e = t.font;
          e = !e || e instanceof cc.BitmapFont ? t.fontFamily : e._fontFamily;
          var i = t.fontSize * t.node.scaleY;
          if (this._textLabelFont !== e || this._textLabelFontSize !== i || this._textLabelFontColor !== t.fontColor || this._textLabelAlign !== t.horizontalAlign) {
            this._textLabelFont = e;
            this._textLabelFontSize = i;
            this._textLabelFontColor = t.fontColor;
            this._textLabelAlign = t.horizontalAlign;
            var n = this._elem;
            n.style.fontSize = i + "px";
            n.style.color = t.node.color.toCSS();
            n.style.fontFamily = e;
            switch (t.horizontalAlign) {
              case a.HorizontalAlign.LEFT:
                n.style.textAlign = "left";
                break;
              case a.HorizontalAlign.CENTER:
                n.style.textAlign = "center";
                break;
              case a.HorizontalAlign.RIGHT:
                n.style.textAlign = "right";
            }
          }
        }
      },
      _updatePlaceholderLabel: function (t) {
        if (t) {
          var e = t.font;
          e = !e || e instanceof cc.BitmapFont ? t.fontFamily : t.font._fontFamily;
          var i = t.fontSize * t.node.scaleY;
          if (this._placeholderLabelFont !== e || this._placeholderLabelFontSize !== i || this._placeholderLabelFontColor !== t.fontColor || this._placeholderLabelAlign !== t.horizontalAlign || this._placeholderLineHeight !== t.fontSize) {
            this._placeholderLabelFont = e;
            this._placeholderLabelFontSize = i;
            this._placeholderLabelFontColor = t.fontColor;
            this._placeholderLabelAlign = t.horizontalAlign;
            this._placeholderLineHeight = t.fontSize;
            var n;
            var r = this._placeholderStyleSheet;
            var s = t.node.color.toCSS();
            var o = t.fontSize;
            switch (t.horizontalAlign) {
              case a.HorizontalAlign.LEFT:
                n = "left";
                break;
              case a.HorizontalAlign.CENTER:
                n = "center";
                break;
              case a.HorizontalAlign.RIGHT:
                n = "right";
            }
            r.innerHTML = "#" + this._domId + "::-webkit-input-placeholder,#" + this._domId + "::-moz-placeholder,#" + this._domId + ":-ms-input-placeholder{text-transform: initial; font-family: " + e + "; font-size: " + i + "px; color: " + s + "; line-height: " + o + "px; text-align: " + n + ";}";
            if (cc.sys.browserType === cc.sys.BROWSER_TYPE_EDGE) {
              r.innerHTML += "#" + this._domId + "::-ms-clear{display: none;}";
            }
          }
        }
      },
      _registerEventListeners: function () {
        var t = this;
        var e = this._elem;
        var i = false;
        var n = this._eventListeners;
        n.compositionStart = function () {
          i = true;
        };
        n.compositionEnd = function () {
          i = false;
          t._delegate.editBoxTextChanged(e.value);
        };
        n.onInput = function () {
          if (!i) {
            var n = t._delegate.maxLength;
            if (n >= 0) {
              e.value = e.value.slice(0, n);
            }
            t._delegate.editBoxTextChanged(e.value);
          }
        };
        n.onClick = function () {
          if (t._editing && cc.sys.isMobile) {
            t._adjustWindowScroll();
          }
        };
        n.onKeydown = function (i) {
          if (i.keyCode === r.KEY.enter) {
            i.stopPropagation();
            t._delegate.editBoxEditingReturn();
            if (!t._isTextArea) {
              e.blur();
            }
          } else if (i.keyCode === r.KEY.tab) {
            i.stopPropagation();
            i.preventDefault();
            o.next(t);
          }
        };
        n.onBlur = function () {
          if (cc.sys.isMobile && i) {
            n.compositionEnd();
          }
          t._editing = false;
          v = null;
          t._hideDom();
          t._delegate.editBoxEditingDidEnded();
        };
        e.addEventListener("compositionstart", n.compositionStart);
        e.addEventListener("compositionend", n.compositionEnd);
        e.addEventListener("input", n.onInput);
        e.addEventListener("keydown", n.onKeydown);
        e.addEventListener("blur", n.onBlur);
        e.addEventListener("touchstart", n.onClick);
      },
      _removeEventListeners: function () {
        var t = this._elem;
        var e = this._eventListeners;
        t.removeEventListener("compositionstart", e.compositionStart);
        t.removeEventListener("compositionend", e.compositionEnd);
        t.removeEventListener("input", e.onInput);
        t.removeEventListener("keydown", e.onKeydown);
        t.removeEventListener("blur", e.onBlur);
        t.removeEventListener("touchstart", e.onClick);
        e.compositionStart = null;
        e.compositionEnd = null;
        e.onInput = null;
        e.onKeydown = null;
        e.onBlur = null;
        e.onClick = null;
      }
    });
  }, {
    "../../platform/CCMacro": 167,
    "../../platform/utils": 186,
    "../../value-types/mat4": 253,
    "../CCLabel": 102,
    "./tabIndexUtil": 125,
    "./types": 126
  }],
  125: [function (t, e) {
    "use strict";

    e.exports = {
      _tabIndexList: [],
      add: function (t) {
        var e = this._tabIndexList;
        if (-1 === e.indexOf(t)) {
          e.push(t);
        }
      },
      remove: function (t) {
        var e = this._tabIndexList;
        var i = e.indexOf(t);
        if (-1 !== i) {
          e.splice(i, 1);
        }
      },
      resort: function () {
        this._tabIndexList.sort(function (t, e) {
          return t._delegate._tabIndex - e._delegate._tabIndex;
        });
      },
      next: function (t) {
        var e = this._tabIndexList;
        var i = e.indexOf(t);
        t.setFocus(false);
        if (-1 !== i) {
          var n = e[i + 1];
          if (n && n._delegate._tabIndex >= 0) {
            n.setFocus(true);
          }
        }
      }
    };
  }, {}],
  126: [function (t, e) {
    "use strict";

    var i = cc.Enum({
      DEFAULT: 0,
      DONE: 1,
      SEND: 2,
      SEARCH: 3,
      GO: 4,
      NEXT: 5
    });
    var n = cc.Enum({
      ANY: 0,
      EMAIL_ADDR: 1,
      NUMERIC: 2,
      PHONE_NUMBER: 3,
      URL: 4,
      DECIMAL: 5,
      SINGLE_LINE: 6
    });
    var r = cc.Enum({
      PASSWORD: 0,
      SENSITIVE: 1,
      INITIAL_CAPS_WORD: 2,
      INITIAL_CAPS_SENTENCE: 3,
      INITIAL_CAPS_ALL_CHARACTERS: 4,
      DEFAULT: 5
    });
    e.exports = {
      KeyboardReturnType: i,
      InputMode: n,
      InputFlag: r
    };
  }, {}],
  127: [function (t, e) {
    "use strict";

    t("./CCComponent");
    t("./CCComponentEventHandler");
    t("./missing-script");
    var i = t("./SubContextView");
    if (!i) {
      i = cc.Class({
        name: "cc.SubContextView",
        extends: cc.Component
      });
      cc.SubContextView = cc.WXSubContextView = cc.SwanSubContextView = i;
    }
    var n = [t("./CCSprite"), t("./CCWidget"), t("./CCCanvas"), t("./CCAudioSource"), t("./CCAnimation"), t("./CCButton"), t("./CCLabel"), t("./CCProgressBar"), t("./CCMask"), t("./CCScrollBar"), t("./CCScrollView"), t("./CCPageViewIndicator"), t("./CCPageView"), t("./CCSlider"), t("./CCLayout"), t("./editbox/CCEditBox"), t("./CCLabelOutline"), t("./CCLabelShadow"), t("./CCRichText"), t("./CCToggleContainer"), t("./CCToggleGroup"), t("./CCToggle"), t("./CCBlockInputEvents"), t("./CCPropagateTouchEvents"), t("./CCMotionStreak"), t("./CCSafeArea"), i];
    e.exports = n;
  }, {
    "./CCAnimation": 96,
    "./CCAudioSource": undefined,
    "./CCBlockInputEvents": 97,
    "./CCButton": 98,
    "./CCCanvas": 99,
    "./CCComponent": 100,
    "./CCComponentEventHandler": 101,
    "./CCLabel": 102,
    "./CCLabelOutline": 103,
    "./CCLabelShadow": 104,
    "./CCLayout": 105,
    "./CCMask": 106,
    "./CCMotionStreak": undefined,
    "./CCPageView": undefined,
    "./CCPageViewIndicator": undefined,
    "./CCProgressBar": 107,
    "./CCPropagateTouchEvents": 108,
    "./CCRichText": 110,
    "./CCSafeArea": 111,
    "./CCScrollBar": 112,
    "./CCScrollView": 113,
    "./CCSlider": 114,
    "./CCSprite": 115,
    "./CCToggle": 116,
    "./CCToggleContainer": 117,
    "./CCToggleGroup": 118,
    "./CCWidget": 120,
    "./SubContextView": 121,
    "./editbox/CCEditBox": 122,
    "./missing-script": 128
  }],
  128: [function (t, e) {
    "use strict";

    var i = cc.js;
    var n = cc.Class({
      name: "cc.MissingScript",
      extends: cc.Component,
      editor: {
        inspector: "packages://inspector/inspectors/comps/missing-script.js"
      },
      properties: {
        compiled: {
          default: false,
          serializable: false
        },
        _$erialized: {
          default: null,
          visible: false,
          editorOnly: true
        }
      },
      ctor: false,
      statics: {
        safeFindClass: function (t) {
          return i._getClassById(t) || (cc.deserialize.reportMissingClass(t), n);
        }
      },
      onLoad: function () {}
    });
    cc._MissingScript = e.exports = n;
  }, {}],
  129: [function (t, e) {
    "use strict";

    var i = cc.js;
    t("../event/event");
    var n = function (t, e) {
      cc.Event.call(this, cc.Event.MOUSE, e);
      this._eventType = t;
      this._button = 0;
      this._x = 0;
      this._y = 0;
      this._prevX = 0;
      this._prevY = 0;
      this._scrollX = 0;
      this._scrollY = 0;
    };
    i.extend(n, cc.Event);
    var r = n.prototype;
    r.setScrollData = function (t, e) {
      this._scrollX = t;
      this._scrollY = e;
    };
    r.getScrollX = function () {
      return this._scrollX;
    };
    r.getScrollY = function () {
      return this._scrollY;
    };
    r.setLocation = function (t, e) {
      this._x = t;
      this._y = e;
    };
    r.getLocation = function () {
      return cc.v2(this._x, this._y);
    };
    r.getLocationInView = function () {
      return cc.v2(this._x, cc.view._designResolutionSize.height - this._y);
    };
    r._setPrevCursor = function (t, e) {
      this._prevX = t;
      this._prevY = e;
    };
    r.getPreviousLocation = function () {
      return cc.v2(this._prevX, this._prevY);
    };
    r.getDelta = function () {
      return cc.v2(this._x - this._prevX, this._y - this._prevY);
    };
    r.getDeltaX = function () {
      return this._x - this._prevX;
    };
    r.getDeltaY = function () {
      return this._y - this._prevY;
    };
    r.setButton = function (t) {
      this._button = t;
    };
    r.getButton = function () {
      return this._button;
    };
    r.getLocationX = function () {
      return this._x;
    };
    r.getLocationY = function () {
      return this._y;
    };
    n.NONE = 0;
    n.DOWN = 1;
    n.UP = 2;
    n.MOVE = 3;
    n.SCROLL = 4;
    n.BUTTON_LEFT = 0;
    n.BUTTON_RIGHT = 2;
    n.BUTTON_MIDDLE = 1;
    n.BUTTON_4 = 3;
    n.BUTTON_5 = 4;
    n.BUTTON_6 = 5;
    n.BUTTON_7 = 6;
    n.BUTTON_8 = 7;
    var s = function (t, e) {
      cc.Event.call(this, cc.Event.TOUCH, e);
      this._eventCode = 0;
      this._touches = t || [];
      this.touch = null;
      this.currentTouch = null;
    };
    i.extend(s, cc.Event);
    (r = s.prototype).getEventCode = function () {
      return this._eventCode;
    };
    r.getTouches = function () {
      return this._touches;
    };
    r._setEventCode = function (t) {
      this._eventCode = t;
    };
    r._setTouches = function (t) {
      this._touches = t;
    };
    r.setLocation = function (t, e) {
      if (this.touch) {
        this.touch.setTouchInfo(this.touch.getID(), t, e);
      }
    };
    r.getLocation = function () {
      return this.touch ? this.touch.getLocation() : cc.v2();
    };
    r.getLocationInView = function () {
      return this.touch ? this.touch.getLocationInView() : cc.v2();
    };
    r.getPreviousLocation = function () {
      return this.touch ? this.touch.getPreviousLocation() : cc.v2();
    };
    r.getStartLocation = function () {
      return this.touch ? this.touch.getStartLocation() : cc.v2();
    };
    r.getID = function () {
      return this.touch ? this.touch.getID() : null;
    };
    r.getDelta = function () {
      return this.touch ? this.touch.getDelta() : cc.v2();
    };
    r.getDeltaX = function () {
      return this.touch ? this.touch.getDelta().x : 0;
    };
    r.getDeltaY = function () {
      return this.touch ? this.touch.getDelta().y : 0;
    };
    r.getLocationX = function () {
      return this.touch ? this.touch.getLocationX() : 0;
    };
    r.getLocationY = function () {
      return this.touch ? this.touch.getLocationY() : 0;
    };
    s.MAX_TOUCHES = 5;
    s.BEGAN = 0;
    s.MOVED = 1;
    s.ENDED = 2;
    s.CANCELED = 3;
    var a = function (t, e) {
      cc.Event.call(this, cc.Event.ACCELERATION, e);
      this.acc = t;
    };
    i.extend(a, cc.Event);
    var o = function (t, e, i) {
      cc.Event.call(this, cc.Event.KEYBOARD, i);
      this.keyCode = t;
      this.isPressed = e;
    };
    i.extend(o, cc.Event);
    cc.Event.EventMouse = n;
    cc.Event.EventTouch = s;
    cc.Event.EventAcceleration = a;
    cc.Event.EventKeyboard = o;
    e.exports = cc.Event;
  }, {
    "../event/event": 135
  }],
  130: [function (t, e) {
    "use strict";

    var i = t("../platform/js");
    cc.EventListener = function (t, e, i) {
      this._onEvent = i;
      this._type = t || 0;
      this._listenerID = e || "";
      this._registered = false;
      this._fixedPriority = 0;
      this._node = null;
      this._target = null;
      this._paused = true;
      this._isEnabled = true;
    };
    cc.EventListener.prototype = {
      constructor: cc.EventListener,
      _setPaused: function (t) {
        this._paused = t;
      },
      _isPaused: function () {
        return this._paused;
      },
      _setRegistered: function (t) {
        this._registered = t;
      },
      _isRegistered: function () {
        return this._registered;
      },
      _getType: function () {
        return this._type;
      },
      _getListenerID: function () {
        return this._listenerID;
      },
      _setFixedPriority: function (t) {
        this._fixedPriority = t;
      },
      _getFixedPriority: function () {
        return this._fixedPriority;
      },
      _setSceneGraphPriority: function (t) {
        this._target = t;
        this._node = t;
      },
      _getSceneGraphPriority: function () {
        return this._node;
      },
      checkAvailable: function () {
        return null !== this._onEvent;
      },
      clone: function () {
        return null;
      },
      setEnabled: function (t) {
        this._isEnabled = t;
      },
      isEnabled: function () {
        return this._isEnabled;
      },
      retain: function () {},
      release: function () {}
    };
    cc.EventListener.UNKNOWN = 0;
    cc.EventListener.TOUCH_ONE_BY_ONE = 1;
    cc.EventListener.TOUCH_ALL_AT_ONCE = 2;
    cc.EventListener.KEYBOARD = 3;
    cc.EventListener.MOUSE = 4;
    cc.EventListener.ACCELERATION = 6;
    cc.EventListener.CUSTOM = 8;
    var n = cc.EventListener.ListenerID = {
      MOUSE: "__cc_mouse",
      TOUCH_ONE_BY_ONE: "__cc_touch_one_by_one",
      TOUCH_ALL_AT_ONCE: "__cc_touch_all_at_once",
      KEYBOARD: "__cc_keyboard",
      ACCELERATION: "__cc_acceleration"
    };
    var r = function (t, e) {
      this._onCustomEvent = e;
      cc.EventListener.call(this, cc.EventListener.CUSTOM, t, this._callback);
    };
    i.extend(r, cc.EventListener);
    i.mixin(r.prototype, {
      _onCustomEvent: null,
      _callback: function (t) {
        if (null !== this._onCustomEvent) {
          this._onCustomEvent(t);
        }
      },
      checkAvailable: function () {
        return cc.EventListener.prototype.checkAvailable.call(this) && null !== this._onCustomEvent;
      },
      clone: function () {
        return new r(this._listenerID, this._onCustomEvent);
      }
    });
    var s = function () {
      cc.EventListener.call(this, cc.EventListener.MOUSE, n.MOUSE, this._callback);
    };
    i.extend(s, cc.EventListener);
    i.mixin(s.prototype, {
      onMouseDown: null,
      onMouseUp: null,
      onMouseMove: null,
      onMouseScroll: null,
      _callback: function (t) {
        var e = cc.Event.EventMouse;
        switch (t._eventType) {
          case e.DOWN:
            if (this.onMouseDown) {
              this.onMouseDown(t);
            }
            break;
          case e.UP:
            if (this.onMouseUp) {
              this.onMouseUp(t);
            }
            break;
          case e.MOVE:
            if (this.onMouseMove) {
              this.onMouseMove(t);
            }
            break;
          case e.SCROLL:
            if (this.onMouseScroll) {
              this.onMouseScroll(t);
            }
        }
      },
      clone: function () {
        var t = new s();
        t.onMouseDown = this.onMouseDown;
        t.onMouseUp = this.onMouseUp;
        t.onMouseMove = this.onMouseMove;
        t.onMouseScroll = this.onMouseScroll;
        return t;
      },
      checkAvailable: function () {
        return true;
      }
    });
    var a = function () {
      cc.EventListener.call(this, cc.EventListener.TOUCH_ONE_BY_ONE, n.TOUCH_ONE_BY_ONE, null);
      this._claimedTouches = [];
    };
    i.extend(a, cc.EventListener);
    i.mixin(a.prototype, {
      constructor: a,
      _claimedTouches: null,
      swallowTouches: false,
      onTouchBegan: null,
      onTouchMoved: null,
      onTouchEnded: null,
      onTouchCancelled: null,
      setSwallowTouches: function (t) {
        this.swallowTouches = t;
      },
      isSwallowTouches: function () {
        return this.swallowTouches;
      },
      clone: function () {
        var t = new a();
        t.onTouchBegan = this.onTouchBegan;
        t.onTouchMoved = this.onTouchMoved;
        t.onTouchEnded = this.onTouchEnded;
        t.onTouchCancelled = this.onTouchCancelled;
        t.swallowTouches = this.swallowTouches;
        return t;
      },
      checkAvailable: function () {
        return !!this.onTouchBegan;
      }
    });
    var o = function () {
      cc.EventListener.call(this, cc.EventListener.TOUCH_ALL_AT_ONCE, n.TOUCH_ALL_AT_ONCE, null);
    };
    i.extend(o, cc.EventListener);
    i.mixin(o.prototype, {
      constructor: o,
      onTouchesBegan: null,
      onTouchesMoved: null,
      onTouchesEnded: null,
      onTouchesCancelled: null,
      clone: function () {
        var t = new o();
        t.onTouchesBegan = this.onTouchesBegan;
        t.onTouchesMoved = this.onTouchesMoved;
        t.onTouchesEnded = this.onTouchesEnded;
        t.onTouchesCancelled = this.onTouchesCancelled;
        return t;
      },
      checkAvailable: function () {
        return null !== this.onTouchesBegan || null !== this.onTouchesMoved || null !== this.onTouchesEnded || null !== this.onTouchesCancelled;
      }
    });
    var c = function (t) {
      this._onAccelerationEvent = t;
      cc.EventListener.call(this, cc.EventListener.ACCELERATION, n.ACCELERATION, this._callback);
    };
    i.extend(c, cc.EventListener);
    i.mixin(c.prototype, {
      constructor: c,
      _onAccelerationEvent: null,
      _callback: function (t) {
        this._onAccelerationEvent(t.acc, t);
      },
      checkAvailable: function () {
        return true;
      },
      clone: function () {
        return new c(this._onAccelerationEvent);
      }
    });
    var l = function () {
      cc.EventListener.call(this, cc.EventListener.KEYBOARD, n.KEYBOARD, this._callback);
    };
    i.extend(l, cc.EventListener);
    i.mixin(l.prototype, {
      constructor: l,
      onKeyPressed: null,
      onKeyReleased: null,
      _callback: function (t) {
        if (t.isPressed) {
          if (this.onKeyPressed) {
            this.onKeyPressed(t.keyCode, t);
          }
        } else if (this.onKeyReleased) {
          this.onKeyReleased(t.keyCode, t);
        }
      },
      clone: function () {
        var t = new l();
        t.onKeyPressed = this.onKeyPressed;
        t.onKeyReleased = this.onKeyReleased;
        return t;
      },
      checkAvailable: function () {
        return null !== this.onKeyPressed || null !== this.onKeyReleased;
      }
    });
    cc.EventListener.create = function (t) {
      var e = t.event;
      delete t.event;
      var i = null;
      if (e === cc.EventListener.TOUCH_ONE_BY_ONE) {
        i = new a();
      } else if (e === cc.EventListener.TOUCH_ALL_AT_ONCE) {
        i = new o();
      } else if (e === cc.EventListener.MOUSE) {
        i = new s();
      } else if (e === cc.EventListener.CUSTOM) {
        i = new r(t.eventName, t.callback);
        delete t.eventName;
        delete t.callback;
      } else if (e === cc.EventListener.KEYBOARD) {
        i = new l();
      } else if (e === cc.EventListener.ACCELERATION) {
        i = new c(t.callback);
        delete t.callback;
      }
      for (var n in t) i[n] = t[n];
      return i;
    };
    e.exports = cc.EventListener;
  }, {
    "../platform/js": 183
  }],
  131: [function (t, e) {
    "use strict";

    var i = t("../platform/js");
    t("./CCEventListener");
    var n = cc.EventListener.ListenerID;
    var r = function () {
      this._fixedListeners = [];
      this._sceneGraphListeners = [];
      this.gt0Index = 0;
    };
    r.prototype = {
      constructor: r,
      size: function () {
        return this._fixedListeners.length + this._sceneGraphListeners.length;
      },
      empty: function () {
        return 0 === this._fixedListeners.length && 0 === this._sceneGraphListeners.length;
      },
      push: function (t) {
        if (0 === t._getFixedPriority()) {
          this._sceneGraphListeners.push(t);
        } else {
          this._fixedListeners.push(t);
        }
      },
      clearSceneGraphListeners: function () {
        this._sceneGraphListeners.length = 0;
      },
      clearFixedListeners: function () {
        this._fixedListeners.length = 0;
      },
      clear: function () {
        this._sceneGraphListeners.length = 0;
        this._fixedListeners.length = 0;
      },
      getFixedPriorityListeners: function () {
        return this._fixedListeners;
      },
      getSceneGraphPriorityListeners: function () {
        return this._sceneGraphListeners;
      }
    };
    var s = function (t) {
      var e = cc.Event;
      var i = t.type;
      return i === e.ACCELERATION ? n.ACCELERATION : i === e.KEYBOARD ? n.KEYBOARD : i.startsWith(e.MOUSE) ? n.MOUSE : (i.startsWith(e.TOUCH), "");
    };
    var a = {
      DIRTY_NONE: 0,
      DIRTY_FIXED_PRIORITY: 1,
      DIRTY_SCENE_GRAPH_PRIORITY: 2,
      DIRTY_ALL: 3,
      _listenersMap: {},
      _priorityDirtyFlagMap: {},
      _nodeListenersMap: {},
      _toAddedListeners: [],
      _toRemovedListeners: [],
      _dirtyListeners: {},
      _inDispatch: 0,
      _isEnabled: false,
      _currentTouch: null,
      _currentTouchListener: null,
      _internalCustomListenerIDs: [],
      _setDirtyForNode: function (t) {
        var e = this._nodeListenersMap[t._id];
        if (e) {
          var i = 0;
          for (var n = e.length; i < n; i++) {
            var r = e[i]._getListenerID();
            if (null == this._dirtyListeners[r]) {
              this._dirtyListeners[r] = true;
            }
          }
        }
        if (t.childrenCount > 0) {
          var s = t._children;
          var a = 0;
          for (var o = s.length; a < o; a++) {
            this._setDirtyForNode(s[a]);
          }
        }
      },
      pauseTarget: function (t, e) {
        if (t instanceof cc._BaseNode) {
          var i;
          var n;
          var r = this._nodeListenersMap[t._id];
          if (r) {
            i = 0;
            for (n = r.length; i < n; i++) {
              var s = r[i];
              s._setPaused(true);
              if (s._claimedTouches && s._claimedTouches.includes(this._currentTouch)) {
                this._clearCurTouch();
              }
            }
          }
          if (true === e) {
            var a = t._children;
            i = 0;
            for (n = a ? a.length : 0; i < n; i++) {
              this.pauseTarget(a[i], true);
            }
          }
        }
      },
      resumeTarget: function (t, e) {
        if (t instanceof cc._BaseNode) {
          var i;
          var n;
          var r = this._nodeListenersMap[t._id];
          if (r) {
            i = 0;
            for (n = r.length; i < n; i++) {
              r[i]._setPaused(false);
            }
          }
          this._setDirtyForNode(t);
          if (true === e) {
            var s = t._children;
            i = 0;
            for (n = s ? s.length : 0; i < n; i++) {
              this.resumeTarget(s[i], true);
            }
          }
        }
      },
      _addListener: function (t) {
        if (0 === this._inDispatch) {
          this._forceAddEventListener(t);
        } else {
          this._toAddedListeners.push(t);
        }
      },
      _forceAddEventListener: function (t) {
        var e = t._getListenerID();
        var i = this._listenersMap[e];
        if (!i) {
          i = new r();
          this._listenersMap[e] = i;
        }
        i.push(t);
        if (0 === t._getFixedPriority()) {
          this._setDirty(e, this.DIRTY_SCENE_GRAPH_PRIORITY);
          var n = t._getSceneGraphPriority();
          this._associateNodeAndEventListener(n, t);
          if (n.activeInHierarchy) {
            this.resumeTarget(n);
          }
        } else {
          this._setDirty(e, this.DIRTY_FIXED_PRIORITY);
        }
      },
      _getListeners: function (t) {
        return this._listenersMap[t];
      },
      _updateDirtyFlagForSceneGraph: function () {
        var t = this._dirtyListeners;
        for (var e in t) this._setDirty(e, this.DIRTY_SCENE_GRAPH_PRIORITY);
        this._dirtyListeners = {};
      },
      _removeAllListenersInVector: function (t) {
        if (t) {
          var e;
          for (var i = t.length - 1; i >= 0; i--) {
            (e = t[i])._setRegistered(false);
            if (null != e._getSceneGraphPriority()) {
              this._dissociateNodeAndEventListener(e._getSceneGraphPriority(), e);
              e._setSceneGraphPriority(null);
            }
            if (0 === this._inDispatch) {
              cc.js.array.removeAt(t, i);
            }
          }
        }
      },
      _removeListenersForListenerID: function (t) {
        var e;
        var i = this._listenersMap[t];
        if (i) {
          var n = i.getFixedPriorityListeners();
          var r = i.getSceneGraphPriorityListeners();
          this._removeAllListenersInVector(r);
          this._removeAllListenersInVector(n);
          delete this._priorityDirtyFlagMap[t];
          if (!this._inDispatch) {
            i.clear();
            delete this._listenersMap[t];
          }
        }
        var s;
        var a = this._toAddedListeners;
        for (e = a.length - 1; e >= 0; e--) {
          if ((s = a[e]) && s._getListenerID() === t) {
            cc.js.array.removeAt(a, e);
          }
        }
      },
      _sortEventListeners: function (t) {
        var e = this.DIRTY_NONE;
        var i = this._priorityDirtyFlagMap;
        if (i[t]) {
          e = i[t];
        }
        if (e !== this.DIRTY_NONE) {
          i[t] = this.DIRTY_NONE;
          if (e & this.DIRTY_FIXED_PRIORITY) {
            this._sortListenersOfFixedPriority(t);
          }
          if (e & this.DIRTY_SCENE_GRAPH_PRIORITY && cc.director.getScene()) {
            this._sortListenersOfSceneGraphPriority(t);
          }
        }
      },
      _sortListenersOfSceneGraphPriority: function (t) {
        var e = this._getListeners(t);
        if (e) {
          var i = e.getSceneGraphPriorityListeners();
          if (i && 0 !== i.length) {
            e.getSceneGraphPriorityListeners().sort(this._sortEventListenersOfSceneGraphPriorityDes);
          }
        }
      },
      _sortEventListenersOfSceneGraphPriorityDes: function (t, e) {
        var i = t._getSceneGraphPriority();
        var n = e._getSceneGraphPriority();
        if (!n || !n._activeInHierarchy || null === n._parent) {
          return -1;
        }
        if (!i || !i._activeInHierarchy || null === i._parent) {
          return 1;
        }
        var r = i;
        var s = n;
        for (var a = false; r._parent._id !== s._parent._id;) {
          r = null === r._parent._parent ? (a = true) && n : r._parent;
          s = null === s._parent._parent ? (a = true) && i : s._parent;
        }
        if (r._id === s._id) {
          if (r._id === n._id) {
            return -1;
          }
          if (r._id === i._id) {
            return 1;
          }
        }
        return a ? r._localZOrder - s._localZOrder : s._localZOrder - r._localZOrder;
      },
      _sortListenersOfFixedPriority: function (t) {
        var e = this._listenersMap[t];
        if (e) {
          var i = e.getFixedPriorityListeners();
          if (i && 0 !== i.length) {
            i.sort(this._sortListenersOfFixedPriorityAsc);
            var n = 0;
            for (var r = i.length; n < r && !(i[n]._getFixedPriority() >= 0);) {
              ++n;
            }
            e.gt0Index = n;
          }
        }
      },
      _sortListenersOfFixedPriorityAsc: function (t, e) {
        return t._getFixedPriority() - e._getFixedPriority();
      },
      _onUpdateListeners: function (t) {
        var e;
        var i;
        var n;
        var r = t.getFixedPriorityListeners();
        var s = t.getSceneGraphPriorityListeners();
        var a = this._toRemovedListeners;
        if (s) {
          for (e = s.length - 1; e >= 0; e--) {
            if (!(i = s[e])._isRegistered()) {
              cc.js.array.removeAt(s, e);
              if (-1 !== (n = a.indexOf(i))) {
                a.splice(n, 1);
              }
            }
          }
        }
        if (r) {
          for (e = r.length - 1; e >= 0; e--) {
            if (!(i = r[e])._isRegistered()) {
              cc.js.array.removeAt(r, e);
              if (-1 !== (n = a.indexOf(i))) {
                a.splice(n, 1);
              }
            }
          }
        }
        if (s && 0 === s.length) {
          t.clearSceneGraphListeners();
        }
        if (r && 0 === r.length) {
          t.clearFixedListeners();
        }
      },
      frameUpdateListeners: function () {
        var t = this._listenersMap;
        var e = this._priorityDirtyFlagMap;
        for (var i in t) if (t[i].empty()) {
          delete e[i];
          delete t[i];
        }
        var n = this._toAddedListeners;
        if (0 !== n.length) {
          var r = 0;
          for (var s = n.length; r < s; r++) {
            this._forceAddEventListener(n[r]);
          }
          n.length = 0;
        }
        if (0 !== this._toRemovedListeners.length) {
          this._cleanToRemovedListeners();
        }
      },
      _updateTouchListeners: function () {
        if (!(this._inDispatch > 1)) {
          var t;
          if (t = this._listenersMap[n.TOUCH_ONE_BY_ONE]) {
            this._onUpdateListeners(t);
          }
          if (t = this._listenersMap[n.TOUCH_ALL_AT_ONCE]) {
            this._onUpdateListeners(t);
          }
          var e = this._toAddedListeners;
          if (0 !== e.length) {
            var i = 0;
            for (var r = e.length; i < r; i++) {
              this._forceAddEventListener(e[i]);
            }
            this._toAddedListeners.length = 0;
          }
          if (0 !== this._toRemovedListeners.length) {
            this._cleanToRemovedListeners();
          }
        }
      },
      _cleanToRemovedListeners: function () {
        var t = this._toRemovedListeners;
        for (var e = 0; e < t.length; e++) {
          var i = t[e];
          var n = this._listenersMap[i._getListenerID()];
          if (n) {
            var r;
            var s = n.getFixedPriorityListeners();
            var a = n.getSceneGraphPriorityListeners();
            if (a && -1 !== (r = a.indexOf(i))) {
              a.splice(r, 1);
            }
            if (s && -1 !== (r = s.indexOf(i))) {
              s.splice(r, 1);
            }
          }
        }
        t.length = 0;
      },
      _onTouchEventCallback: function (t, e) {
        if (!t._isRegistered()) {
          return false;
        }
        var i = e.event;
        var n = i.currentTouch;
        i.currentTarget = t._node;
        var r;
        var s = false;
        var o = i.getEventCode();
        var c = cc.Event.EventTouch;
        if (o === c.BEGAN) {
          if (!cc.macro.ENABLE_MULTI_TOUCH && null) {
            var l = null._node;
            if (l && l.activeInHierarchy) {
              return false;
            }
          }
          if (t.onTouchBegan && (s = t.onTouchBegan(n, i)) && t._registered) {
            t._claimedTouches.push(n);
            a._currentTouchListener = t;
            a._currentTouch = n;
          }
        } else if (t._claimedTouches.length > 0 && -1 !== (r = t._claimedTouches.indexOf(n))) {
          s = true;
          if (!cc.macro.ENABLE_MULTI_TOUCH && null && null !== n) {
            return false;
          }
          if (o === c.MOVED && t.onTouchMoved) {
            t.onTouchMoved(n, i);
          } else if (o === c.ENDED) {
            if (t.onTouchEnded) {
              t.onTouchEnded(n, i);
            }
            if (t._registered) {
              t._claimedTouches.splice(r, 1);
            }
            a._clearCurTouch();
          } else if (o === c.CANCELED) {
            if (t.onTouchCancelled) {
              t.onTouchCancelled(n, i);
            }
            if (t._registered) {
              t._claimedTouches.splice(r, 1);
            }
            a._clearCurTouch();
          }
        }
        return i.isStopped() ? (a._updateTouchListeners(i), true) : !(!s || !t.swallowTouches || (e.needsMutableSet && e.touches.splice(n, 1), 0));
      },
      _dispatchTouchEvent: function (t) {
        this._sortEventListeners(n.TOUCH_ONE_BY_ONE);
        this._sortEventListeners(n.TOUCH_ALL_AT_ONCE);
        var e = this._getListeners(n.TOUCH_ONE_BY_ONE);
        var i = this._getListeners(n.TOUCH_ALL_AT_ONCE);
        if (null !== e || null !== i) {
          var r = t.getTouches();
          var s = cc.js.array.copy(r);
          var a = {
            event: t,
            needsMutableSet: e && i,
            touches: s,
            selTouch: null
          };
          if (e) {
            for (var o = 0; o < r.length; o++) {
              t.currentTouch = r[o];
              t._propagationStopped = t._propagationImmediateStopped = false;
              this._dispatchEventToListeners(e, this._onTouchEventCallback, a);
            }
          }
          if (!(i && s.length > 0 && (this._dispatchEventToListeners(i, this._onTouchesEventCallback, {
            event: t,
            touches: s
          }), t.isStopped()))) {
            this._updateTouchListeners(t);
          }
        }
      },
      _onTouchesEventCallback: function (t, e) {
        if (!t._registered) {
          return false;
        }
        var i = cc.Event.EventTouch;
        var n = e.event;
        var r = e.touches;
        var s = n.getEventCode();
        n.currentTarget = t._node;
        if (s === i.BEGAN && t.onTouchesBegan) {
          t.onTouchesBegan(r, n);
        } else if (s === i.MOVED && t.onTouchesMoved) {
          t.onTouchesMoved(r, n);
        } else if (s === i.ENDED && t.onTouchesEnded) {
          t.onTouchesEnded(r, n);
        } else if (s === i.CANCELED && t.onTouchesCancelled) {
          t.onTouchesCancelled(r, n);
        }
        return !!n.isStopped() && (a._updateTouchListeners(n), true);
      },
      _associateNodeAndEventListener: function (t, e) {
        var i = this._nodeListenersMap[t._id];
        if (!i) {
          i = [];
          this._nodeListenersMap[t._id] = i;
        }
        i.push(e);
      },
      _dissociateNodeAndEventListener: function (t, e) {
        var i = this._nodeListenersMap[t._id];
        if (i) {
          cc.js.array.remove(i, e);
          if (0 === i.length) {
            delete this._nodeListenersMap[t._id];
          }
        }
      },
      _dispatchEventToListeners: function (t, e, i) {
        var n;
        var r;
        var s = false;
        var a = t.getFixedPriorityListeners();
        var o = t.getSceneGraphPriorityListeners();
        var c = 0;
        if (a && 0 !== a.length) {
          for (; c < t.gt0Index; ++c) {
            if ((r = a[c]).isEnabled() && !r._isPaused() && r._isRegistered() && e(r, i)) {
              s = true;
              break;
            }
          }
        }
        if (o && !s) {
          for (n = 0; n < o.length; n++) {
            if ((r = o[n]).isEnabled() && !r._isPaused() && r._isRegistered() && e(r, i)) {
              s = true;
              break;
            }
          }
        }
        if (a && !s) {
          for (; c < a.length; ++c) {
            if ((r = a[c]).isEnabled() && !r._isPaused() && r._isRegistered() && e(r, i)) {
              s = true;
              break;
            }
          }
        }
      },
      _setDirty: function (t, e) {
        var i = this._priorityDirtyFlagMap;
        if (null == i[t]) {
          i[t] = e;
        } else {
          i[t] = e | i[t];
        }
      },
      _sortNumberAsc: function (t, e) {
        return t - e;
      },
      hasEventListener: function (t) {
        return !!this._getListeners(t);
      },
      addListener: function (t, e) {
        if (cc.js.isNumber(e) || e instanceof cc._BaseNode) {
          if (t instanceof cc.EventListener) {
            if (t._isRegistered()) {
              return;
            }
          } else {
            t = cc.EventListener.create(t);
          }
          if (t.checkAvailable()) {
            if (cc.js.isNumber(e)) {
              if (0 === e) {
                return;
              }
              t._setSceneGraphPriority(null);
              t._setFixedPriority(e);
              t._setRegistered(true);
              t._setPaused(false);
              this._addListener(t);
            } else {
              t._setSceneGraphPriority(e);
              t._setFixedPriority(0);
              t._setRegistered(true);
              this._addListener(t);
            }
            return t;
          }
        }
      },
      addCustomListener: function (t, e) {
        var i = new cc.EventListener.create({
          event: cc.EventListener.CUSTOM,
          eventName: t,
          callback: e
        });
        this.addListener(i, 1);
        return i;
      },
      removeListener: function (t) {
        if (null != t) {
          var e;
          var i = this._listenersMap;
          for (var n in i) {
            var r = i[n];
            var s = r.getFixedPriorityListeners();
            var a = r.getSceneGraphPriorityListeners();
            if (e = this._removeListenerInVector(a, t)) {
              this._setDirty(t._getListenerID(), this.DIRTY_SCENE_GRAPH_PRIORITY);
            } else if (e = this._removeListenerInVector(s, t)) {
              this._setDirty(t._getListenerID(), this.DIRTY_FIXED_PRIORITY);
            }
            if (r.empty()) {
              delete this._priorityDirtyFlagMap[t._getListenerID()];
              delete i[n];
            }
            if (e) {
              break;
            }
          }
          if (!e) {
            var o = this._toAddedListeners;
            for (var c = o.length - 1; c >= 0; c--) {
              var l = o[c];
              if (l === t) {
                cc.js.array.removeAt(o, c);
                l._setRegistered(false);
                break;
              }
            }
          }
          if (this._currentTouchListener === t) {
            this._clearCurTouch();
          }
        }
      },
      _clearCurTouch: function () {
        this._currentTouchListener = null;
        this._currentTouch = null;
      },
      _removeListenerInCallback: function (t, e) {
        if (null == t) {
          return false;
        }
        for (var i = t.length - 1; i >= 0; i--) {
          var n = t[i];
          if (n._onCustomEvent === e || n._onEvent === e) {
            n._setRegistered(false);
            if (null != n._getSceneGraphPriority()) {
              this._dissociateNodeAndEventListener(n._getSceneGraphPriority(), n);
              n._setSceneGraphPriority(null);
            }
            if (0 === this._inDispatch) {
              cc.js.array.removeAt(t, i);
            } else {
              this._toRemovedListeners.push(n);
            }
            return true;
          }
        }
        return false;
      },
      _removeListenerInVector: function (t, e) {
        if (null == t) {
          return false;
        }
        for (var i = t.length - 1; i >= 0; i--) {
          var n = t[i];
          if (n === e) {
            n._setRegistered(false);
            if (null != n._getSceneGraphPriority()) {
              this._dissociateNodeAndEventListener(n._getSceneGraphPriority(), n);
              n._setSceneGraphPriority(null);
            }
            if (0 === this._inDispatch) {
              cc.js.array.removeAt(t, i);
            } else {
              this._toRemovedListeners.push(n);
            }
            return true;
          }
        }
        return false;
      },
      removeListeners: function (t, e) {
        var i = this;
        if (cc.js.isNumber(t) || t instanceof cc._BaseNode) {
          if (undefined !== t._id) {
            var r;
            var s = i._nodeListenersMap[t._id];
            if (s) {
              var a = cc.js.array.copy(s);
              for (r = 0; r < a.length; r++) {
                i.removeListener(a[r]);
              }
              delete i._nodeListenersMap[t._id];
            }
            var o = i._toAddedListeners;
            for (r = 0; r < o.length;) {
              var c = o[r];
              if (c._getSceneGraphPriority() === t) {
                c._setSceneGraphPriority(null);
                c._setRegistered(false);
                o.splice(r, 1);
              } else {
                ++r;
              }
            }
            if (true === e) {
              var l;
              var h = t.children;
              r = 0;
              for (l = h.length; r < l; r++) {
                i.removeListeners(h[r], true);
              }
            }
          } else if (t === cc.EventListener.TOUCH_ONE_BY_ONE) {
            i._removeListenersForListenerID(n.TOUCH_ONE_BY_ONE);
          } else if (t === cc.EventListener.TOUCH_ALL_AT_ONCE) {
            i._removeListenersForListenerID(n.TOUCH_ALL_AT_ONCE);
          } else if (t === cc.EventListener.MOUSE) {
            i._removeListenersForListenerID(n.MOUSE);
          } else if (t === cc.EventListener.ACCELERATION) {
            i._removeListenersForListenerID(n.ACCELERATION);
          } else if (t === cc.EventListener.KEYBOARD) {
            i._removeListenersForListenerID(n.KEYBOARD);
          }
        }
      },
      removeCustomListeners: function (t) {
        this._removeListenersForListenerID(t);
      },
      removeAllListeners: function () {
        var t = this._listenersMap;
        var e = this._internalCustomListenerIDs;
        for (var i in t) if (-1 === e.indexOf(i)) {
          this._removeListenersForListenerID(i);
        }
      },
      setPriority: function (t, e) {
        if (null != t) {
          var i = this._listenersMap;
          for (var n in i) {
            var r = i[n].getFixedPriorityListeners();
            if (r && -1 !== r.indexOf(t)) {
              t._getSceneGraphPriority();
              return void (t._getFixedPriority() !== e && (t._setFixedPriority(e), this._setDirty(t._getListenerID(), this.DIRTY_FIXED_PRIORITY)));
            }
          }
        }
      },
      setEnabled: function (t) {
        this._isEnabled = t;
      },
      isEnabled: function () {
        return this._isEnabled;
      },
      dispatchEvent: function (t) {
        if (this._isEnabled && (this._updateDirtyFlagForSceneGraph(), this._inDispatch++, t && t.getType)) {
          if (t.getType().startsWith(cc.Event.TOUCH)) {
            this._dispatchTouchEvent(t);
            return void this._inDispatch--;
          }
          var e = s(t);
          this._sortEventListeners(e);
          var i = this._listenersMap[e];
          if (null != i) {
            this._dispatchEventToListeners(i, this._onListenerCallback, t);
            this._onUpdateListeners(i);
          }
          this._inDispatch--;
        }
      },
      _onListenerCallback: function (t, e) {
        e.currentTarget = t._target;
        t._onEvent(e);
        return e.isStopped();
      },
      dispatchCustomEvent: function (t, e) {
        var i = new cc.Event.EventCustom(t);
        i.setUserData(e);
        this.dispatchEvent(i);
      }
    };
    i.get(cc, "eventManager", function () {
      return a;
    });
    e.exports = cc.internal.eventManager = a;
  }, {
    "../platform/js": 183,
    "./CCEventListener": 130
  }],
  132: [function () {
    "use strict";

    cc.Touch = function (t, e, i) {
      this._lastModified = 0;
      this.setTouchInfo(i, t, e);
    };
    cc.Touch.prototype = {
      constructor: cc.Touch,
      getLocation: function () {
        return cc.v2(this._point.x, this._point.y);
      },
      getLocationX: function () {
        return this._point.x;
      },
      getLocationY: function () {
        return this._point.y;
      },
      getPreviousLocation: function () {
        return cc.v2(this._prevPoint.x, this._prevPoint.y);
      },
      getStartLocation: function () {
        return cc.v2(this._startPoint.x, this._startPoint.y);
      },
      getDelta: function () {
        return this._point.sub(this._prevPoint);
      },
      getLocationInView: function () {
        return cc.v2(this._point.x, cc.view._designResolutionSize.height - this._point.y);
      },
      getPreviousLocationInView: function () {
        return cc.v2(this._prevPoint.x, cc.view._designResolutionSize.height - this._prevPoint.y);
      },
      getStartLocationInView: function () {
        return cc.v2(this._startPoint.x, cc.view._designResolutionSize.height - this._startPoint.y);
      },
      getID: function () {
        return this._id;
      },
      setTouchInfo: function (t, e, i) {
        this._prevPoint = this._point;
        this._point = cc.v2(e || 0, i || 0);
        this._id = t;
        if (!this._startPointCaptured) {
          this._startPoint = cc.v2(this._point);
          cc.view._convertPointWithScale(this._startPoint);
          this._startPointCaptured = true;
        }
      },
      _setPoint: function (t, e) {
        if (undefined === e) {
          this._point.x = t.x;
          this._point.y = t.y;
        } else {
          this._point.x = t;
          this._point.y = e;
        }
      },
      _setPrevPoint: function (t, e) {
        this._prevPoint = undefined === e ? cc.v2(t.x, t.y) : cc.v2(t || 0, e || 0);
      }
    };
  }, {}],
  133: [function (t, e) {
    "use strict";

    t("./CCEvent");
    t("./CCTouch");
    t("./CCEventListener");
    var i = t("./CCEventManager");
    e.exports = i;
  }, {
    "./CCEvent": 129,
    "./CCEventListener": 130,
    "./CCEventManager": 131,
    "./CCTouch": 132
  }],
  134: [function (t, e) {
    "use strict";

    var i = t("../platform/js");
    var n = t("../platform/callbacks-invoker");
    var r = i.array;
    var s = r.fastRemove;
    var a = r.fastRemoveAll;
    function o() {
      n.call(this);
    }
    i.extend(o, n);
    var c = o.prototype;
    c.__on = c.on;
    c.on = function (t, e, i, n) {
      if (e) {
        if (!this.hasEventListener(t, e, i)) {
          this.__on(t, e, i, n);
          if (i && i.__eventTargets) {
            i.__eventTargets.push(this);
          }
        }
        return e;
      }
    };
    c.__off = c.off;
    c.off = function (t, e, i) {
      if (e) {
        var n = this.__off(t, e, i);
        if (n && i && i.__eventTargets) {
          s(i.__eventTargets, this);
        }
        return n;
      }
      var r = this._callbackTable[t];
      if (!r) {
        return false;
      }
      var a = r.callbackInfos;
      var o = a.length;
      for (var c = 0; c < o; ++c) {
        var l = a[c] && a[c].target;
        if (l && l.__eventTargets) {
          s(l.__eventTargets, this);
        }
      }
      this.removeAll(t);
      return a.length < o;
    };
    c.targetOff = function (t) {
      this.removeAll(t);
      if (t && t.__eventTargets) {
        a(t.__eventTargets, this);
      }
    };
    c.once = function (t, e, i) {
      this.on(t, e, i, true);
    };
    c.dispatchEvent = function (t) {
      this.emit(t.type, t);
    };
    c.clear = function () {
      for (var t in this._callbackTable) this.off(t);
    };
    cc.EventTarget = e.exports = o;
  }, {
    "../platform/callbacks-invoker": 175,
    "../platform/js": 183
  }],
  135: [function (t, e) {
    "use strict";

    var i = t("../platform/js");
    cc.Event = function (t, e) {
      this.type = t;
      this.bubbles = !!e;
      this.target = null;
      this.currentTarget = null;
      this.eventPhase = 0;
      this._propagationStopped = false;
      this._propagationImmediateStopped = false;
    };
    cc.Event.prototype = {
      constructor: cc.Event,
      unuse: function () {
        this.type = cc.Event.NO_TYPE;
        this.target = null;
        this.currentTarget = null;
        this.eventPhase = cc.Event.NONE;
        this._propagationStopped = false;
        this._propagationImmediateStopped = false;
      },
      reuse: function (t, e) {
        this.type = t;
        this.bubbles = e || false;
      },
      stopPropagation: function () {
        this._propagationStopped = true;
      },
      stopPropagationImmediate: function () {
        this._propagationImmediateStopped = true;
      },
      isStopped: function () {
        return this._propagationStopped || this._propagationImmediateStopped;
      },
      getCurrentTarget: function () {
        return this.currentTarget;
      },
      getType: function () {
        return this.type;
      }
    };
    cc.Event.NO_TYPE = "no_type";
    cc.Event.TOUCH = "touch";
    cc.Event.MOUSE = "mouse";
    cc.Event.KEYBOARD = "keyboard";
    cc.Event.ACCELERATION = "acceleration";
    cc.Event.NONE = 0;
    cc.Event.CAPTURING_PHASE = 1;
    cc.Event.AT_TARGET = 2;
    cc.Event.BUBBLING_PHASE = 3;
    var n = function (t, e) {
      cc.Event.call(this, t, e);
      this.detail = null;
    };
    i.extend(n, cc.Event);
    n.prototype.reset = n;
    n.prototype.setUserData = function (t) {
      this.detail = t;
    };
    n.prototype.getUserData = function () {
      return this.detail;
    };
    n.prototype.getEventName = cc.Event.prototype.getType;
    var r = new i.Pool(10);
    n.put = function (t) {
      r.put(t);
    };
    n.get = function (t, e) {
      var i = r._get();
      if (i) {
        i.reset(t, e);
      } else {
        i = new n(t, e);
      }
      return i;
    };
    cc.Event.EventCustom = n;
    e.exports = cc.Event;
  }, {
    "../platform/js": 183
  }],
  136: [function (t) {
    "use strict";

    t("./event");
    t("./event-target");
    t("./system-event");
  }, {
    "./event": 135,
    "./event-target": 134,
    "./system-event": 137
  }],
  137: [function (t, e) {
    "use strict";

    var i = t("../event/event-target");
    var n = t("../event-manager");
    var r = t("../platform/CCInputManager");
    var s = cc.Enum({
      KEY_DOWN: "keydown",
      KEY_UP: "keyup",
      DEVICEMOTION: "devicemotion"
    });
    var a = null;
    var o = null;
    var c = cc.Class({
      name: "SystemEvent",
      extends: i,
      statics: {
        EventType: s
      },
      setAccelerometerEnabled: function (t) {
        if (t && window.DeviceMotionEvent && "function" == typeof DeviceMotionEvent.requestPermission) {
          DeviceMotionEvent.requestPermission().then(function (t) {
            r.setAccelerometerEnabled("granted" === t);
          });
        } else {
          r.setAccelerometerEnabled(t);
        }
      },
      setAccelerometerInterval: function (t) {
        r.setAccelerometerInterval(t);
      },
      on: function (t, e, i, r) {
        this._super(t, e, i, r);
        if (!(t !== s.KEY_DOWN && t !== s.KEY_UP)) {
          if (!a) {
            a = cc.EventListener.create({
              event: cc.EventListener.KEYBOARD,
              onKeyPressed: function (t, e) {
                e.type = s.KEY_DOWN;
                cc.systemEvent.dispatchEvent(e);
              },
              onKeyReleased: function (t, e) {
                e.type = s.KEY_UP;
                cc.systemEvent.dispatchEvent(e);
              }
            });
          }
          if (!n.hasEventListener(cc.EventListener.ListenerID.KEYBOARD)) {
            n.addListener(a, 1);
          }
        }
        if (t === s.DEVICEMOTION) {
          if (!o) {
            o = cc.EventListener.create({
              event: cc.EventListener.ACCELERATION,
              callback: function (t, e) {
                e.type = s.DEVICEMOTION;
                cc.systemEvent.dispatchEvent(e);
              }
            });
          }
          if (!n.hasEventListener(cc.EventListener.ListenerID.ACCELERATION)) {
            n.addListener(o, 1);
          }
        }
      },
      off: function (t, e, i) {
        this._super(t, e, i);
        if (a && (t === s.KEY_DOWN || t === s.KEY_UP)) {
          var r = this.hasEventListener(s.KEY_DOWN);
          var c = this.hasEventListener(s.KEY_UP);
          if (!(r || c)) {
            n.removeListener(a);
          }
        }
        if (o && t === s.DEVICEMOTION) {
          if (!this.hasEventListener(s.DEVICEMOTION)) {
            n.removeListener(o);
          }
        }
      }
    });
    cc.SystemEvent = e.exports = c;
    cc.systemEvent = new cc.SystemEvent();
  }, {
    "../event-manager": 133,
    "../event/event-target": 134,
    "../platform/CCInputManager": 166
  }],
  138: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n = t("../value-types/vec3") && t("../value-types/vec3").__esModule ? t("../value-types/vec3") : {
      default: t("../value-types/vec3")
    };
    var r = t("../value-types/mat3") && t("../value-types/mat3").__esModule ? t("../value-types/mat3") : {
      default: t("../value-types/mat3")
    };
    var s = t("./enums") && t("./enums").__esModule ? t("./enums") : {
      default: t("./enums")
    };
    var o = new n.default();
    var c = new n.default();
    var l = new r.default();
    var h = function (t, e, i) {
      var r = l.m;
      var s = i.m;
      r[0] = Math.abs(s[0]);
      r[1] = Math.abs(s[1]);
      r[2] = Math.abs(s[2]);
      r[3] = Math.abs(s[4]);
      r[4] = Math.abs(s[5]);
      r[5] = Math.abs(s[6]);
      r[6] = Math.abs(s[8]);
      r[7] = Math.abs(s[9]);
      r[8] = Math.abs(s[10]);
      n.default.transformMat3(t, e, l);
    };
    var u = function () {
      function t(t, e, i, r, a, o) {
        this.center = undefined;
        this.halfExtents = undefined;
        this._type = undefined;
        this._type = s.default.SHAPE_AABB;
        this.center = new n.default(t, e, i);
        this.halfExtents = new n.default(r, a, o);
      }
      t.create = function (e, i, n, r, s, a) {
        return new t(e, i, n, r, s, a);
      };
      t.clone = function (e) {
        return new t(e.center.x, e.center.y, e.center.z, e.halfExtents.x, e.halfExtents.y, e.halfExtents.z);
      };
      t.copy = function (t, e) {
        n.default.copy(t.center, e.center);
        n.default.copy(t.halfExtents, e.halfExtents);
        return t;
      };
      t.fromPoints = function (t, e, i) {
        n.default.scale(t.center, n.default.add(o, e, i), .5);
        n.default.scale(t.halfExtents, n.default.sub(c, i, e), .5);
        return t;
      };
      t.set = function (t, e, i, r, s, a, o) {
        n.default.set(t.center, e, i, r);
        n.default.set(t.halfExtents, s, a, o);
        return t;
      };
      var e = t.prototype;
      e.getBoundary = function (t, e) {
        n.default.sub(t, this.center, this.halfExtents);
        n.default.add(e, this.center, this.halfExtents);
      };
      e.transform = function (t, e, i, r, s) {
        if (!s) {
          s = this;
        }
        n.default.transformMat4(s.center, this.center, t);
        h(s.halfExtents, this.halfExtents, t);
      };
      return t;
    }();
    i.default = u;
    e.exports = i.default;
  }, {
    "../value-types/mat3": 252,
    "../value-types/vec3": 261,
    "./enums": 140
  }],
  139: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.point_plane = f;
    i.pt_point_aabb = function (t, e, i) {
      n.Vec3.copy(t, e);
      n.Vec3.subtract(c, i.center, i.halfExtents);
      n.Vec3.add(l, i.center, i.halfExtents);
      t.x = t.x < c.x ? c.x : t.x;
      t.y = t.y < c.x ? c.y : t.y;
      t.z = t.z < c.x ? c.z : t.z;
      t.x = t.x > l.x ? l.x : t.x;
      t.y = t.y > l.x ? l.y : t.y;
      t.z = t.z > l.x ? l.z : t.z;
      return t;
    };
    i.pt_point_obb = function (t, e, i) {
      var c = i.orientation.m;
      n.Vec3.set(r, c[0], c[1], c[2]);
      n.Vec3.set(s, c[3], c[4], c[5]);
      n.Vec3.set(a, c[6], c[7], c[8]);
      h[0] = r;
      h[1] = s;
      h[2] = a;
      u[0] = i.halfExtents.x;
      u[1] = i.halfExtents.y;
      u[2] = i.halfExtents.z;
      n.Vec3.subtract(o, e, i.center);
      n.Vec3.set(t, i.center.x, i.center.y, i.center.z);
      for (var l = 0; l < 3; l++) {
        var f = n.Vec3.dot(o, h[l]);
        if (f > u[l]) {
          f = u[l];
        }
        if (f < -u[l]) {
          f = -u[l];
        }
        t.x += f * h[l].x;
        t.y += f * h[l].y;
        t.z += f * h[l].z;
      }
      return t;
    };
    i.pt_point_plane = function (t, e, i) {
      var r = n.Vec3.dot(i.n, e) - i.d;
      return n.Vec3.subtract(t, e, n.Vec3.multiplyScalar(t, i.n, r));
    };
    var n = t("../value-types");
    var r = new n.Vec3();
    var s = new n.Vec3();
    var a = new n.Vec3();
    var o = new n.Vec3();
    var c = new n.Vec3();
    var l = new n.Vec3();
    var h = [,,,];
    var u = [,,,];
    function f(t, e) {
      return n.Vec3.dot(e.n, t) - e.d;
    }
  }, {
    "../value-types": 251
  }],
  140: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    i.default = {
      SHAPE_RAY: 1,
      SHAPE_LINE: 2,
      SHAPE_SPHERE: 4,
      SHAPE_AABB: 8,
      SHAPE_OBB: 16,
      SHAPE_PLANE: 32,
      SHAPE_TRIANGLE: 64,
      SHAPE_FRUSTUM: 128,
      SHAPE_FRUSTUM_ACCURATE: 256
    };
    e.exports = i.default;
  }, {}],
  141: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n = t("../value-types");
    var r = t("./enums") && t("./enums").__esModule ? t("./enums") : {
      default: t("./enums")
    };
    var s = t("./plane") && t("./plane").__esModule ? t("./plane") : {
      default: t("./plane")
    };
    function o(t, e) {
      for (var i = 0; i < e.length; i++) {
        var n = e[i];
        n.enumerable = n.enumerable || false;
        n.configurable = true;
        if ("value" in n) {
          n.writable = true;
        }
        Object.defineProperty(t, n.key, n);
      }
    }
    var c = [,,,,,,,,];
    c[0] = new n.Vec3(1, 1, 1);
    c[1] = new n.Vec3(-1, 1, 1);
    c[2] = new n.Vec3(-1, -1, 1);
    c[3] = new n.Vec3(1, -1, 1);
    c[4] = new n.Vec3(1, 1, -1);
    c[5] = new n.Vec3(-1, 1, -1);
    c[6] = new n.Vec3(-1, -1, -1);
    c[7] = new n.Vec3(1, -1, -1);
    var l;
    var h = function () {
      function t() {
        this.planes = undefined;
        this.vertices = undefined;
        this._type = undefined;
        this._type = r.default.SHAPE_FRUSTUM;
        this.planes = [,,,,,,];
        for (var t = 0; t < 6; ++t) {
          this.planes[t] = s.default.create(0, 0, 0, 0);
        }
        this.vertices = [,,,,,,,,];
        for (var e = 0; e < 8; ++e) {
          this.vertices[e] = new n.Vec3();
        }
      }
      t.create = function () {
        return new t();
      };
      t.clone = function (e) {
        return t.copy(new t(), e);
      };
      t.copy = function (t, e) {
        t._type = e._type;
        for (var i = 0; i < 6; ++i) {
          s.default.copy(t.planes[i], e.planes[i]);
        }
        for (var r = 0; r < 8; ++r) {
          n.Vec3.copy(t.vertices[r], e.vertices[r]);
        }
        return t;
      };
      var i;
      var a = t.prototype;
      a.update = function (t, e) {
        var i = t.m;
        n.Vec3.set(this.planes[0].n, i[3] + i[0], i[7] + i[4], i[11] + i[8]);
        this.planes[0].d = -(i[15] + i[12]);
        n.Vec3.set(this.planes[1].n, i[3] - i[0], i[7] - i[4], i[11] - i[8]);
        this.planes[1].d = -(i[15] - i[12]);
        n.Vec3.set(this.planes[2].n, i[3] + i[1], i[7] + i[5], i[11] + i[9]);
        this.planes[2].d = -(i[15] + i[13]);
        n.Vec3.set(this.planes[3].n, i[3] - i[1], i[7] - i[5], i[11] - i[9]);
        this.planes[3].d = -(i[15] - i[13]);
        n.Vec3.set(this.planes[4].n, i[3] + i[2], i[7] + i[6], i[11] + i[10]);
        this.planes[4].d = -(i[15] + i[14]);
        n.Vec3.set(this.planes[5].n, i[3] - i[2], i[7] - i[6], i[11] - i[10]);
        this.planes[5].d = -(i[15] - i[14]);
        if (this._type === r.default.SHAPE_FRUSTUM_ACCURATE) {
          for (var s = 0; s < 6; s++) {
            var a = this.planes[s];
            var o = 1 / a.n.length();
            n.Vec3.multiplyScalar(a.n, a.n, o);
            a.d *= o;
          }
          for (var l = 0; l < 8; l++) {
            n.Vec3.transformMat4(this.vertices[l], c[l], e);
          }
        }
      };
      a.transform = function (t) {
        if (this._type === r.default.SHAPE_FRUSTUM_ACCURATE) {
          for (var e = 0; e < 8; e++) {
            n.Vec3.transformMat4(this.vertices[e], this.vertices[e], t);
          }
          s.default.fromPoints(this.planes[0], this.vertices[1], this.vertices[5], this.vertices[6]);
          s.default.fromPoints(this.planes[1], this.vertices[3], this.vertices[7], this.vertices[4]);
          s.default.fromPoints(this.planes[2], this.vertices[6], this.vertices[7], this.vertices[3]);
          s.default.fromPoints(this.planes[3], this.vertices[0], this.vertices[4], this.vertices[5]);
          s.default.fromPoints(this.planes[4], this.vertices[2], this.vertices[3], this.vertices[0]);
          s.default.fromPoints(this.planes[0], this.vertices[7], this.vertices[6], this.vertices[5]);
        }
      };
      if (i = [{
        key: "accurate",
        set: function (t) {
          this._type = t ? r.default.SHAPE_FRUSTUM_ACCURATE : r.default.SHAPE_FRUSTUM;
        }
      }]) {
        o(t.prototype, i);
      }
      Object.defineProperty(t, "prototype", {
        writable: false
      });
      return t;
    }();
    i.default = h;
    l = new n.Vec3();
    h.createOrtho = function (t, e, i, r, a, o) {
      var c = e / 2;
      var h = i / 2;
      n.Vec3.set(l, c, h, r);
      n.Vec3.transformMat4(t.vertices[0], l, o);
      n.Vec3.set(l, -c, h, r);
      n.Vec3.transformMat4(t.vertices[1], l, o);
      n.Vec3.set(l, -c, -h, r);
      n.Vec3.transformMat4(t.vertices[2], l, o);
      n.Vec3.set(l, c, -h, r);
      n.Vec3.transformMat4(t.vertices[3], l, o);
      n.Vec3.set(l, c, h, a);
      n.Vec3.transformMat4(t.vertices[4], l, o);
      n.Vec3.set(l, -c, h, a);
      n.Vec3.transformMat4(t.vertices[5], l, o);
      n.Vec3.set(l, -c, -h, a);
      n.Vec3.transformMat4(t.vertices[6], l, o);
      n.Vec3.set(l, c, -h, a);
      n.Vec3.transformMat4(t.vertices[7], l, o);
      s.default.fromPoints(t.planes[0], t.vertices[1], t.vertices[6], t.vertices[5]);
      s.default.fromPoints(t.planes[1], t.vertices[3], t.vertices[4], t.vertices[7]);
      s.default.fromPoints(t.planes[2], t.vertices[6], t.vertices[3], t.vertices[7]);
      s.default.fromPoints(t.planes[3], t.vertices[0], t.vertices[5], t.vertices[4]);
      s.default.fromPoints(t.planes[4], t.vertices[2], t.vertices[0], t.vertices[3]);
      s.default.fromPoints(t.planes[0], t.vertices[7], t.vertices[5], t.vertices[6]);
    };
    e.exports = i.default;
  }, {
    "../value-types": 251,
    "./enums": 140,
    "./plane": 146
  }],
  142: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    var n = {
      enums: true,
      Triangle: true,
      Aabb: true,
      Ray: true,
      intersect: true,
      Sphere: true,
      Obb: true,
      Frustum: true,
      Line: true,
      Plane: true
    };
    i.intersect = i.enums = i.Triangle = i.Sphere = i.Ray = i.Plane = i.Obb = i.Line = i.Frustum = i.Aabb = undefined;
    var r = t("./enums") && t("./enums").__esModule ? t("./enums") : {
      default: t("./enums")
    };
    i.enums = r.default;
    var s = t("./triangle") && t("./triangle").__esModule ? t("./triangle") : {
      default: t("./triangle")
    };
    i.Triangle = s.default;
    var a = t("./aabb") && t("./aabb").__esModule ? t("./aabb") : {
      default: t("./aabb")
    };
    i.Aabb = a.default;
    var o = t("./ray") && t("./ray").__esModule ? t("./ray") : {
      default: t("./ray")
    };
    i.Ray = o.default;
    var c = t("./intersect") && t("./intersect").__esModule ? t("./intersect") : {
      default: t("./intersect")
    };
    i.intersect = c.default;
    var l = t("./sphere") && t("./sphere").__esModule ? t("./sphere") : {
      default: t("./sphere")
    };
    i.Sphere = l.default;
    var h = t("./obb") && t("./obb").__esModule ? t("./obb") : {
      default: t("./obb")
    };
    i.Obb = h.default;
    var u = t("./frustum") && t("./frustum").__esModule ? t("./frustum") : {
      default: t("./frustum")
    };
    i.Frustum = u.default;
    var f = t("./line") && t("./line").__esModule ? t("./line") : {
      default: t("./line")
    };
    i.Line = f.default;
    var d = t("./plane") && t("./plane").__esModule ? t("./plane") : {
      default: t("./plane")
    };
    i.Plane = d.default;
    var _ = t("./distance");
    Object.keys(_).forEach(function (t) {
      if ("default" !== t && "__esModule" !== t) {
        if (!(Object.prototype.hasOwnProperty.call(n, t) || t in i && i[t] === _[t])) {
          i[t] = _[t];
        }
      }
    });
    cc.geomUtils = e.exports;
  }, {
    "./aabb": 138,
    "./distance": 139,
    "./enums": 140,
    "./frustum": 141,
    "./intersect": 143,
    "./line": 144,
    "./obb": 145,
    "./plane": 146,
    "./ray": 147,
    "./sphere": 148,
    "./triangle": 149
  }],
  143: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n = t("../../renderer/gfx") && t("../../renderer/gfx").__esModule ? t("../../renderer/gfx") : {
      default: t("../../renderer/gfx")
    };
    var r = t("../../renderer/memop/recycle-pool") && t("../../renderer/memop/recycle-pool").__esModule ? t("../../renderer/memop/recycle-pool") : {
      default: t("../../renderer/memop/recycle-pool")
    };
    var s = t("../value-types");
    var a = t("./aabb") && t("./aabb").__esModule ? t("./aabb") : {
      default: t("./aabb")
    };
    var o = function (t) {
      if (t && t.__esModule) {
        return t;
      }
      if (null === t || "object" != typeof t && "function" != typeof t) {
        return {
          default: t
        };
      }
      var e = u(undefined);
      if (e && e.has(t)) {
        return e.get(t);
      }
      var i = {};
      var n = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var r in t) if ("default" !== r && Object.prototype.hasOwnProperty.call(t, r)) {
        var s = n ? Object.getOwnPropertyDescriptor(t, r) : null;
        if (s && (s.get || s.set)) {
          Object.defineProperty(i, r, s);
        } else {
          i[r] = t[r];
        }
      }
      i.default = t;
      if (e) {
        e.set(t, i);
      }
      return i;
    }(t("./distance"));
    var c = t("./enums") && t("./enums").__esModule ? t("./enums") : {
      default: t("./enums")
    };
    var l = t("./ray") && t("./ray").__esModule ? t("./ray") : {
      default: t("./ray")
    };
    var h = t("./triangle") && t("./triangle").__esModule ? t("./triangle") : {
      default: t("./triangle")
    };
    function u(t) {
      if ("function" != typeof WeakMap) {
        return null;
      }
      var e = new WeakMap();
      var i = new WeakMap();
      return (u = function (t) {
        return t ? i : e;
      })(t);
    }
    var d;
    var _;
    var p;
    var v;
    var g;
    var m;
    var y;
    var T;
    var E;
    var A;
    var x;
    var C;
    var b;
    var S;
    var R;
    var M = function () {
      var t = h.default.create();
      var e = Infinity;
      function i(t, e, i, n) {
        s.Vec3.set(t, e[i * n], e[i * n + 1], e[i * n + 2]);
      }
      return function (r, s) {
        e = Infinity;
        var a = s._subMeshes;
        for (var o = 0; o < a.length; o++) {
          if (a[o]._primitiveType === n.default.PT_TRIANGLES) {
            var c = s._subDatas[o] || s._subDatas[0];
            var l = s._getAttrMeshData(o, n.default.ATTR_POSITION);
            var h = c.getIData(Uint16Array);
            var u = c.vfm.element(n.default.ATTR_POSITION).num;
            for (var f = 0; f < h.length; f += 3) {
              i(t.a, l, h[f], u);
              i(t.b, l, h[f + 1], u);
              i(t.c, l, h[f + 2], u);
              var d = L(r, t);
              if (d > 0 && d < e) {
                e = d;
              }
            }
          }
        }
        return e;
      };
    }();
    var w = function () {
      function t(e, i) {
        var n = e.children;
        for (var r = n.length - 1; r >= 0; r--) {
          t(n[r], i);
        }
        i(e);
      }
      function e(t, e) {
        return t.distance - e.distance;
      }
      function i(t, e, i) {
        var n = i.m;
        var r = e.x;
        var s = e.y;
        var a = e.z;
        var o = n[3] * r + n[7] * s + n[11] * a;
        o = o ? 1 / o : 1;
        t.x = (n[0] * r + n[4] * s + n[8] * a) * o;
        t.y = (n[1] * r + n[5] * s + n[9] * a) * o;
        t.z = (n[2] * r + n[6] * s + n[10] * a) * o;
        return t;
      }
      var n = new r.default(function () {
        return {
          distance: 0,
          node: null
        };
      }, 1);
      var o = [];
      var c = a.default.create();
      var h = new s.Vec3();
      var u = new s.Vec3();
      var f = new l.default();
      var d = cc.mat4();
      var _ = cc.mat4();
      var p = new s.Vec3();
      return function (r, l, g, m) {
        n.reset();
        o.length = 0;
        t(r = r || cc.director.getScene(), function (t) {
          if (!m || m(t)) {
            s.Mat4.invert(_, t.getWorldMatrix(d));
            s.Vec3.transformMat4(f.o, l.o, _);
            s.Vec3.normalize(f.d, i(f.d, l.d, _));
            var e = Infinity;
            var r = t._renderComponent;
            if (r instanceof cc.MeshRenderer) {
              e = B(f, r._boundingBox);
            } else if (t.width && t.height) {
              s.Vec3.set(h, -t.width * t.anchorX, -t.height * t.anchorY, t.z);
              s.Vec3.set(u, t.width * (1 - t.anchorX), t.height * (1 - t.anchorY), t.z);
              a.default.fromPoints(c, h, u);
              e = B(f, c);
            }
            if (e > 0 && e < Infinity && (g && (e = g(f, t, e)), e > 0 && e < Infinity)) {
              s.Vec3.scale(p, f.d, e);
              i(p, p, d);
              var y = n.add();
              y.node = t;
              y.distance = s.Vec3.mag(p);
              o.push(y);
            }
          }
        });
        o.sort(e);
        return o;
      };
    }();
    d = new s.Vec3(0, 0, 0);
    var I = function (t, e) {
      var i = s.Vec3.dot(t.d, e.n);
      if (Math.abs(i) < Number.EPSILON) {
        return 0;
      }
      s.Vec3.multiplyScalar(d, e.n, e.d);
      var n = s.Vec3.dot(s.Vec3.subtract(d, d, t.o), e.n) / i;
      return n < 0 ? 0 : n;
    };
    _ = new s.Vec3(0, 0, 0);
    var O = function (t, e) {
      s.Vec3.subtract(_, t.e, t.s);
      var i = (e.d - s.Vec3.dot(t.s, e.n)) / s.Vec3.dot(_, e.n);
      return i < 0 || i > 1 ? 0 : i;
    };
    var L = function () {
      var t = new s.Vec3(0, 0, 0);
      var e = new s.Vec3(0, 0, 0);
      var i = new s.Vec3(0, 0, 0);
      var n = new s.Vec3(0, 0, 0);
      var r = new s.Vec3(0, 0, 0);
      return function (a, o, c) {
        s.Vec3.subtract(t, o.b, o.a);
        s.Vec3.subtract(e, o.c, o.a);
        s.Vec3.cross(i, a.d, e);
        var l = s.Vec3.dot(t, i);
        if (l < Number.EPSILON && (!c || l > -Number.EPSILON)) {
          return 0;
        }
        var h = 1 / l;
        s.Vec3.subtract(n, a.o, o.a);
        var u = s.Vec3.dot(n, i) * h;
        if (u < 0 || u > 1) {
          return 0;
        }
        s.Vec3.cross(r, n, t);
        var f = s.Vec3.dot(a.d, r) * h;
        if (f < 0 || u + f > 1) {
          return 0;
        }
        var d = s.Vec3.dot(e, r) * h;
        return d < 0 ? 0 : d;
      };
    }();
    var D = function () {
      var t = new s.Vec3(0, 0, 0);
      var e = new s.Vec3(0, 0, 0);
      var i = new s.Vec3(0, 0, 0);
      var n = new s.Vec3(0, 0, 0);
      var r = new s.Vec3(0, 0, 0);
      var a = new s.Vec3(0, 0, 0);
      return function (o, c, l) {
        s.Vec3.subtract(t, c.b, c.a);
        s.Vec3.subtract(e, c.c, c.a);
        s.Vec3.subtract(i, o.s, o.e);
        s.Vec3.cross(r, t, e);
        var h = s.Vec3.dot(i, r);
        if (h <= 0) {
          return 0;
        }
        s.Vec3.subtract(n, o.s, c.a);
        var u = s.Vec3.dot(n, r);
        if (u < 0 || u > h) {
          return 0;
        }
        s.Vec3.cross(a, i, n);
        var f = s.Vec3.dot(e, a);
        if (f < 0 || f > h) {
          return 0;
        }
        var d = -s.Vec3.dot(t, a);
        if (d < 0 || f + d > h) {
          return 0;
        }
        if (l) {
          var _ = 1 / h;
          var p = 1 - (f *= _) - (d *= _);
          s.Vec3.set(l, c.a.x * p + c.b.x * f + c.c.x * d, c.a.y * p + c.b.y * f + c.c.y * d, c.a.z * p + c.b.z * f + c.c.z * d);
        }
        return 1;
      };
    }();
    p = new s.Vec3(0, 0, 0);
    v = new s.Vec3(0, 0, 0);
    g = new s.Vec3(0, 0, 0);
    m = new s.Vec3(0, 0, 0);
    y = new s.Vec3(0, 0, 0);
    T = new s.Vec3(0, 0, 0);
    E = new s.Vec3(0, 0, 0);
    var N = function (t, e, i, n, r, a, o) {
      s.Vec3.subtract(p, e, t);
      s.Vec3.subtract(v, i, t);
      s.Vec3.subtract(g, n, t);
      s.Vec3.subtract(m, r, t);
      s.Vec3.cross(T, m, p);
      var c = s.Vec3.dot(v, T);
      if (c >= 0) {
        var l = -s.Vec3.dot(g, T);
        if (l < 0) {
          return 0;
        }
        var h = s.Vec3.dot(s.Vec3.cross(E, p, g), v);
        if (h < 0) {
          return 0;
        }
        if (o) {
          var u = 1 / (l + c + h);
          l *= u;
          c *= u;
          h *= u;
          s.Vec3.set(o, i.x * l + n.x * c + r.x * h, i.y * l + n.y * c + r.y * h, i.z * l + n.z * c + r.z * h);
        }
      } else {
        s.Vec3.subtract(y, a, t);
        var f = s.Vec3.dot(y, T);
        if (f < 0) {
          return 0;
        }
        var d = s.Vec3.dot(s.Vec3.cross(E, p, v), y);
        if (d < 0) {
          return 0;
        }
        if (o) {
          var _ = 1 / (f + (c = -c) + d);
          f *= _;
          c *= _;
          d *= _;
          s.Vec3.set(o, i.x * f + a.x * c + r.x * d, i.y * f + a.y * c + r.y * d, i.z * f + a.z * c + r.z * d);
        }
      }
      return 1;
    };
    var F = function () {
      var t = new s.Vec3(0, 0, 0);
      return function (e, i) {
        var n = i.radius;
        var r = i.center;
        var a = e.o;
        var o = e.d;
        var c = n * n;
        s.Vec3.subtract(t, r, a);
        var l = t.lengthSqr();
        var h = s.Vec3.dot(t, o);
        var u = c - (l - h * h);
        if (u < 0) {
          return 0;
        }
        var f = Math.sqrt(u);
        var d = l < c ? h + f : h - f;
        return d < 0 ? 0 : d;
      };
    }();
    A = new s.Vec3();
    x = new s.Vec3();
    var B = function (t, e) {
      var i = t.o;
      var n = t.d;
      var r = 1 / n.x;
      var a = 1 / n.y;
      var o = 1 / n.z;
      s.Vec3.subtract(A, e.center, e.halfExtents);
      s.Vec3.add(x, e.center, e.halfExtents);
      var c = (A.x - i.x) * r;
      var l = (x.x - i.x) * r;
      var h = (A.y - i.y) * a;
      var u = (x.y - i.y) * a;
      var f = (A.z - i.z) * o;
      var d = (x.z - i.z) * o;
      var _ = Math.max(Math.max(Math.min(c, l), Math.min(h, u)), Math.min(f, d));
      var p = Math.min(Math.min(Math.max(c, l), Math.max(h, u)), Math.max(f, d));
      return p < 0 || _ > p ? 0 : _;
    };
    var k = function () {
      var t = new s.Vec3();
      var e = new s.Vec3();
      var i = new s.Vec3();
      var n = new s.Vec3();
      var r = new s.Vec3();
      var a = new s.Vec3();
      var o = new s.Vec3();
      var c = [,,,];
      var l = [,,,];
      var h = [,,,];
      var u = [,,,,,,];
      return function (f, d) {
        c[0] = d.halfExtents.x;
        c[1] = d.halfExtents.y;
        c[2] = d.halfExtents.z;
        t = d.center;
        e = f.o;
        i = f.d;
        var _ = d.orientation.m;
        s.Vec3.set(n, _[0], _[1], _[2]);
        s.Vec3.set(r, _[3], _[4], _[5]);
        s.Vec3.set(a, _[6], _[7], _[8]);
        s.Vec3.subtract(o, t, e);
        l[0] = s.Vec3.dot(n, i);
        l[1] = s.Vec3.dot(r, i);
        l[2] = s.Vec3.dot(a, i);
        h[0] = s.Vec3.dot(n, o);
        h[1] = s.Vec3.dot(r, o);
        h[2] = s.Vec3.dot(a, o);
        for (var p = 0; p < 3; ++p) {
          if (0 === l[p]) {
            if (-h[p] - c[p] > 0 || -h[p] + c[p] < 0) {
              return 0;
            }
            l[p] = 1e-7;
          }
          u[2 * p + 0] = (h[p] + c[p]) / l[p];
          u[2 * p + 1] = (h[p] - c[p]) / l[p];
        }
        var v = Math.max(Math.max(Math.min(u[0], u[1]), Math.min(u[2], u[3])), Math.min(u[4], u[5]));
        var g = Math.min(Math.min(Math.max(u[0], u[1]), Math.max(u[2], u[3])), Math.max(u[4], u[5]));
        return g < 0 || v > g || v < 0 ? 0 : v;
      };
    }();
    C = new s.Vec3();
    b = new s.Vec3();
    S = new s.Vec3();
    R = new s.Vec3();
    var U = function (t, e) {
      s.Vec3.subtract(C, t.center, t.halfExtents);
      s.Vec3.add(b, t.center, t.halfExtents);
      s.Vec3.subtract(S, e.center, e.halfExtents);
      s.Vec3.add(R, e.center, e.halfExtents);
      return C.x <= R.x && b.x >= S.x && C.y <= R.y && b.y >= S.y && C.z <= R.z && b.z >= S.z;
    };
    function z(t, e, i) {
      s.Vec3.set(i[0], t.x, e.y, e.z);
      s.Vec3.set(i[1], t.x, e.y, t.z);
      s.Vec3.set(i[2], t.x, t.y, e.z);
      s.Vec3.set(i[3], t.x, t.y, t.z);
      s.Vec3.set(i[4], e.x, e.y, e.z);
      s.Vec3.set(i[5], e.x, e.y, t.z);
      s.Vec3.set(i[6], e.x, t.y, e.z);
      s.Vec3.set(i[7], e.x, t.y, t.z);
    }
    function G(t, e, i, n, r, a) {
      s.Vec3.set(a[0], t.x + i.x * e.x + n.x * e.y + r.x * e.z, t.y + i.y * e.x + n.y * e.y + r.y * e.z, t.z + i.z * e.x + n.z * e.y + r.z * e.z);
      s.Vec3.set(a[1], t.x - i.x * e.x + n.x * e.y + r.x * e.z, t.y - i.y * e.x + n.y * e.y + r.y * e.z, t.z - i.z * e.x + n.z * e.y + r.z * e.z);
      s.Vec3.set(a[2], t.x + i.x * e.x - n.x * e.y + r.x * e.z, t.y + i.y * e.x - n.y * e.y + r.y * e.z, t.z + i.z * e.x - n.z * e.y + r.z * e.z);
      s.Vec3.set(a[3], t.x + i.x * e.x + n.x * e.y - r.x * e.z, t.y + i.y * e.x + n.y * e.y - r.y * e.z, t.z + i.z * e.x + n.z * e.y - r.z * e.z);
      s.Vec3.set(a[4], t.x - i.x * e.x - n.x * e.y - r.x * e.z, t.y - i.y * e.x - n.y * e.y - r.y * e.z, t.z - i.z * e.x - n.z * e.y - r.z * e.z);
      s.Vec3.set(a[5], t.x + i.x * e.x - n.x * e.y - r.x * e.z, t.y + i.y * e.x - n.y * e.y - r.y * e.z, t.z + i.z * e.x - n.z * e.y - r.z * e.z);
      s.Vec3.set(a[6], t.x - i.x * e.x + n.x * e.y - r.x * e.z, t.y - i.y * e.x + n.y * e.y - r.y * e.z, t.z - i.z * e.x + n.z * e.y - r.z * e.z);
      s.Vec3.set(a[7], t.x - i.x * e.x - n.x * e.y + r.x * e.z, t.y - i.y * e.x - n.y * e.y + r.y * e.z, t.z - i.z * e.x - n.z * e.y + r.z * e.z);
    }
    function H(t, e) {
      var i = s.Vec3.dot(e, t[0]);
      var n = i;
      for (var r = 1; r < 8; ++r) {
        var a = s.Vec3.dot(e, t[r]);
        i = a < i ? a : i;
        n = a > n ? a : n;
      }
      return [i, n];
    }
    var W;
    var X = function () {
      var t = Array(15);
      for (var e = 0; e < 15; e++) {
        t[e] = new s.Vec3(0, 0, 0);
      }
      var i = [,,,,,,,,];
      var n = [,,,,,,,,];
      for (var r = 0; r < 8; r++) {
        i[r] = new s.Vec3(0, 0, 0);
        n[r] = new s.Vec3(0, 0, 0);
      }
      var a = new s.Vec3();
      var o = new s.Vec3();
      return function (e, r) {
        var c = r.orientation.m;
        s.Vec3.set(t[0], 1, 0, 0);
        s.Vec3.set(t[1], 0, 1, 0);
        s.Vec3.set(t[2], 0, 0, 1);
        s.Vec3.set(t[3], c[0], c[1], c[2]);
        s.Vec3.set(t[4], c[3], c[4], c[5]);
        s.Vec3.set(t[5], c[6], c[7], c[8]);
        for (var l = 0; l < 3; ++l) {
          s.Vec3.cross(t[6 + 3 * l], t[l], t[0]);
          s.Vec3.cross(t[7 + 3 * l], t[l], t[1]);
          s.Vec3.cross(t[7 + 3 * l], t[l], t[2]);
        }
        s.Vec3.subtract(a, e.center, e.halfExtents);
        s.Vec3.add(o, e.center, e.halfExtents);
        z(a, o, i);
        G(r.center, r.halfExtents, t[3], t[4], t[5], n);
        for (var h = 0; h < 15; ++h) {
          var u = H(i, t[h]);
          var f = H(n, t[h]);
          if (f[0] > u[1] || u[0] > f[1]) {
            return 0;
          }
        }
        return 1;
      };
    }();
    var Y = function (t, e) {
      var i = t.halfExtents.x * Math.abs(e.n.x) + t.halfExtents.y * Math.abs(e.n.y) + t.halfExtents.z * Math.abs(e.n.z);
      var n = s.Vec3.dot(e.n, t.center);
      return n + i < e.d ? -1 : n - i > e.d ? 0 : 1;
    };
    var j = function (t, e) {
      for (var i = 0; i < e.planes.length; i++) {
        if (-1 === Y(t, e.planes[i])) {
          return 0;
        }
      }
      return 1;
    };
    var q = function () {
      var t = [,,,,,,,,];
      var e = 0;
      var i = 0;
      for (var n = 0; n < t.length; n++) {
        t[n] = new s.Vec3(0, 0, 0);
      }
      return function (n, r) {
        var a = 0;
        var o = false;
        for (var c = 0; c < r.planes.length; c++) {
          if (-1 === (a = Y(n, r.planes[c]))) {
            return 0;
          }
          if (1 === a) {
            o = true;
          }
        }
        if (!o) {
          return 1;
        }
        for (var l = 0; l < r.vertices.length; l++) {
          s.Vec3.subtract(t[l], r.vertices[l], n.center);
        }
        e = 0;
        i = 0;
        for (var h = 0; h < r.vertices.length; h++) {
          if (t[h].x > n.halfExtents.x) {
            e++;
          } else if (t[h].x < -n.halfExtents.x) {
            i++;
          }
        }
        if (e === r.vertices.length || i === r.vertices.length) {
          return 0;
        }
        e = 0;
        i = 0;
        for (var u = 0; u < r.vertices.length; u++) {
          if (t[u].y > n.halfExtents.y) {
            e++;
          } else if (t[u].y < -n.halfExtents.y) {
            i++;
          }
        }
        if (e === r.vertices.length || i === r.vertices.length) {
          return 0;
        }
        e = 0;
        i = 0;
        for (var f = 0; f < r.vertices.length; f++) {
          if (t[f].z > n.halfExtents.z) {
            e++;
          } else if (t[f].z < -n.halfExtents.z) {
            i++;
          }
        }
        return e === r.vertices.length || i === r.vertices.length ? 0 : 1;
      };
    }();
    var Z = function () {
      var t = new s.Vec3(0, 0, 0);
      var e = new s.Mat3();
      return function (i, n) {
        s.Vec3.subtract(t, n, i.center);
        s.Vec3.transformMat3(t, t, s.Mat3.transpose(e, i.orientation));
        a = i.halfExtents;
        return Math.abs(t.x) < a.x && Math.abs(t.y) < a.y && Math.abs(t.z) < a.z;
        var a;
      };
    }();
    W = function (t, e, i, n) {
      return Math.abs(t.x * e + t.y * i + t.z * n);
    };
    var K = function (t, e) {
      var i = t.orientation.m;
      var n = t.halfExtents.x * Math.abs(e.n.x * i[0] + e.n.y * i[1] + e.n.z * i[2]) + t.halfExtents.y * Math.abs(e.n.x * i[3] + e.n.y * i[4] + e.n.z * i[5]) + t.halfExtents.z * Math.abs(e.n.x * i[6] + e.n.y * i[7] + e.n.z * i[8]);
      var r = s.Vec3.dot(e.n, t.center);
      return r + n < e.d ? -1 : r - n > e.d ? 0 : 1;
    };
    var Q = function (t, e) {
      for (var i = 0; i < e.planes.length; i++) {
        if (-1 === K(t, e.planes[i])) {
          return 0;
        }
      }
      return 1;
    };
    var J = function () {
      var t = [,,,,,,,,];
      var e = 0;
      var i = 0;
      var n = 0;
      for (var r = 0; r < t.length; r++) {
        t[r] = new s.Vec3(0, 0, 0);
      }
      return function (r, o) {
        var c = 0;
        var l = false;
        for (var h = 0; h < o.planes.length; h++) {
          if (-1 === (c = K(r, o.planes[h]))) {
            return 0;
          }
          if (1 === c) {
            l = true;
          }
        }
        if (!l) {
          return 1;
        }
        for (var u = 0; u < o.vertices.length; u++) {
          s.Vec3.subtract(t[u], o.vertices[u], r.center);
        }
        i = 0;
        n = 0;
        var f = r.orientation.m;
        for (var d = 0; d < o.vertices.length; d++) {
          if ((e = t[d].x * f[0] + t[d].y * f[1] + t[d].z * f[2]) > r.halfExtents.x) {
            i++;
          } else if (e < -r.halfExtents.x) {
            n++;
          }
        }
        if (i === o.vertices.length || n === o.vertices.length) {
          return 0;
        }
        i = 0;
        n = 0;
        for (var _ = 0; _ < o.vertices.length; _++) {
          if ((e = t[_].x * f[3] + t[_].y * f[4] + t[_].z * f[5]) > r.halfExtents.y) {
            i++;
          } else if (e < -r.halfExtents.y) {
            n++;
          }
        }
        if (i === o.vertices.length || n === o.vertices.length) {
          return 0;
        }
        i = 0;
        n = 0;
        for (var p = 0; p < o.vertices.length; p++) {
          if ((e = t[p].x * f[6] + t[p].y * f[7] + t[p].z * f[8]) > r.halfExtents.z) {
            i++;
          } else if (e < -r.halfExtents.z) {
            n++;
          }
        }
        return i === o.vertices.length || n === o.vertices.length ? 0 : 1;
      };
    }();
    var $ = function () {
      var t = Array(15);
      for (var e = 0; e < 15; e++) {
        t[e] = new s.Vec3(0, 0, 0);
      }
      var i = [,,,,,,,,];
      var n = [,,,,,,,,];
      for (var r = 0; r < 8; r++) {
        i[r] = new s.Vec3(0, 0, 0);
        n[r] = new s.Vec3(0, 0, 0);
      }
      return function (e, r) {
        var a = e.orientation.m;
        var o = r.orientation.m;
        s.Vec3.set(t[0], a[0], a[1], a[2]);
        s.Vec3.set(t[1], a[3], a[4], a[5]);
        s.Vec3.set(t[2], a[6], a[7], a[8]);
        s.Vec3.set(t[3], o[0], o[1], o[2]);
        s.Vec3.set(t[4], o[3], o[4], o[5]);
        s.Vec3.set(t[5], o[6], o[7], o[8]);
        for (var c = 0; c < 3; ++c) {
          s.Vec3.cross(t[6 + 3 * c], t[c], t[0]);
          s.Vec3.cross(t[7 + 3 * c], t[c], t[1]);
          s.Vec3.cross(t[7 + 3 * c], t[c], t[2]);
        }
        G(e.center, e.halfExtents, t[0], t[1], t[2], i);
        G(r.center, r.halfExtents, t[3], t[4], t[5], n);
        for (var l = 0; l < 15; ++l) {
          var h = H(i, t[l]);
          var u = H(n, t[l]);
          if (u[0] > h[1] || h[0] > u[1]) {
            return 0;
          }
        }
        return 1;
      };
    }();
    var tt = function (t, e) {
      var i = s.Vec3.dot(e.n, t.center);
      var n = t.radius * e.n.length();
      return i + n < e.d ? -1 : i - n > e.d ? 0 : 1;
    };
    var et = function (t, e) {
      for (var i = 0; i < e.planes.length; i++) {
        if (-1 === tt(t, e.planes[i])) {
          return 0;
        }
      }
      return 1;
    };
    var it = function () {
      var t = new s.Vec3(0, 0, 0);
      var e = [1, -1, 1, -1, 1, -1];
      return function (i, n) {
        for (var r = 0; r < 6; r++) {
          var a = n.planes[r];
          var o = i.radius;
          var c = i.center;
          var l = a.n;
          var h = a.d;
          var u = s.Vec3.dot(l, c);
          if (u + o < h) {
            return 0;
          }
          if (!(u - o > h)) {
            s.Vec3.add(t, c, s.Vec3.multiplyScalar(t, l, o));
            for (var f = 0; f < 6; f++) {
              if (f !== r && f !== r + e[r]) {
                var d = n.planes[f];
                if (s.Vec3.dot(d.n, t) < d.d) {
                  return 0;
                }
              }
            }
          }
        }
        return 1;
      };
    }();
    var nt = function (t, e) {
      var i = t.radius + e.radius;
      return s.Vec3.squaredDistance(t.center, e.center) < i * i;
    };
    var rt = function () {
      var t = new s.Vec3();
      return function (e, i) {
        o.pt_point_aabb(t, e.center, i);
        return s.Vec3.squaredDistance(e.center, t) < e.radius * e.radius;
      };
    }();
    var st = function () {
      var t = new s.Vec3();
      return function (e, i) {
        o.pt_point_obb(t, e.center, i);
        return s.Vec3.squaredDistance(e.center, t) < e.radius * e.radius;
      };
    }();
    var at = {
      rayAabb: B,
      rayMesh: M,
      raycast: w,
      rayTriangle: L,
      ray_sphere: F,
      ray_aabb: B,
      ray_obb: k,
      ray_plane: I,
      ray_triangle: L,
      line_plane: O,
      line_triangle: D,
      line_quad: N,
      sphere_sphere: nt,
      sphere_aabb: rt,
      sphere_obb: st,
      sphere_plane: tt,
      sphere_frustum: et,
      sphere_frustum_accurate: it,
      aabb_aabb: U,
      aabb_obb: X,
      aabb_plane: Y,
      aabb_frustum: j,
      aabb_frustum_accurate: q,
      obb_obb: $,
      obb_plane: K,
      obb_frustum: Q,
      obb_frustum_accurate: J,
      obb_point: Z,
      resolve: function (t, e, i) {
        if (undefined === i) {
          i = null;
        }
        var n = t._type;
        var r = e._type;
        var s = this[n | r];
        return n < r ? s(t, e, i) : s(e, t, i);
      }
    };
    at[c.default.SHAPE_RAY | c.default.SHAPE_SPHERE] = F;
    at[c.default.SHAPE_RAY | c.default.SHAPE_AABB] = B;
    at[c.default.SHAPE_RAY | c.default.SHAPE_OBB] = k;
    at[c.default.SHAPE_RAY | c.default.SHAPE_PLANE] = I;
    at[c.default.SHAPE_RAY | c.default.SHAPE_TRIANGLE] = L;
    at[c.default.SHAPE_LINE | c.default.SHAPE_PLANE] = O;
    at[c.default.SHAPE_LINE | c.default.SHAPE_TRIANGLE] = D;
    at[c.default.SHAPE_SPHERE] = nt;
    at[c.default.SHAPE_SPHERE | c.default.SHAPE_AABB] = rt;
    at[c.default.SHAPE_SPHERE | c.default.SHAPE_OBB] = st;
    at[c.default.SHAPE_SPHERE | c.default.SHAPE_PLANE] = tt;
    at[c.default.SHAPE_SPHERE | c.default.SHAPE_FRUSTUM] = et;
    at[c.default.SHAPE_SPHERE | c.default.SHAPE_FRUSTUM_ACCURATE] = it;
    at[c.default.SHAPE_AABB] = U;
    at[c.default.SHAPE_AABB | c.default.SHAPE_OBB] = X;
    at[c.default.SHAPE_AABB | c.default.SHAPE_PLANE] = Y;
    at[c.default.SHAPE_AABB | c.default.SHAPE_FRUSTUM] = j;
    at[c.default.SHAPE_AABB | c.default.SHAPE_FRUSTUM_ACCURATE] = q;
    at[c.default.SHAPE_OBB] = $;
    at[c.default.SHAPE_OBB | c.default.SHAPE_PLANE] = K;
    at[c.default.SHAPE_OBB | c.default.SHAPE_FRUSTUM] = Q;
    at[c.default.SHAPE_OBB | c.default.SHAPE_FRUSTUM_ACCURATE] = J;
    i.default = at;
    e.exports = i.default;
  }, {
    "../../renderer/gfx": 282,
    "../../renderer/memop/recycle-pool": 297,
    "../value-types": 251,
    "./aabb": 138,
    "./distance": 139,
    "./enums": 140,
    "./ray": 147,
    "./triangle": 149
  }],
  144: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n;
    var r = t("../value-types");
    var s = (n = t("./enums")) && n.__esModule ? n : {
      default: n
    };
    var a = function () {
      function t(t, e, i, n, a, o) {
        if (undefined === t) {
          t = 0;
        }
        if (undefined === e) {
          e = 0;
        }
        if (undefined === i) {
          i = 0;
        }
        if (undefined === n) {
          n = 0;
        }
        if (undefined === a) {
          a = 0;
        }
        if (undefined === o) {
          o = -1;
        }
        this.s = undefined;
        this.e = undefined;
        this._type = undefined;
        this._type = s.default.SHAPE_LINE;
        this.s = new r.Vec3(t, e, i);
        this.e = new r.Vec3(n, a, o);
      }
      t.create = function (e, i, n, r, s, a) {
        return new t(e, i, n, r, s, a);
      };
      t.clone = function (e) {
        return new t(e.s.x, e.s.y, e.s.z, e.e.x, e.e.y, e.e.z);
      };
      t.copy = function (t, e) {
        r.Vec3.copy(t.s, e.s);
        r.Vec3.copy(t.e, e.e);
        return t;
      };
      t.fromPoints = function (t, e, i) {
        r.Vec3.copy(t.s, e);
        r.Vec3.copy(t.e, i);
        return t;
      };
      t.set = function (t, e, i, n, r, s, a) {
        t.s.x = e;
        t.s.y = i;
        t.s.z = n;
        t.e.x = r;
        t.e.y = s;
        t.e.z = a;
        return t;
      };
      t.len = function (t) {
        return r.Vec3.distance(t.s, t.e);
      };
      t.prototype.length = function () {
        return r.Vec3.distance(this.s, this.e);
      };
      return t;
    }();
    i.default = a;
    e.exports = i.default;
  }, {
    "../value-types": 251,
    "./enums": 140
  }],
  145: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n;
    var r = t("../value-types");
    var s = (n = t("./enums")) && n.__esModule ? n : {
      default: n
    };
    function a(t, e) {
      for (var i = 0; i < e.length; i++) {
        var n = e[i];
        n.enumerable = n.enumerable || false;
        n.configurable = true;
        if ("value" in n) {
          n.writable = true;
        }
        Object.defineProperty(t, n.key, n);
      }
    }
    var o = new r.Vec3();
    var c = new r.Vec3();
    var l = new r.Mat3();
    var h = function () {
      function t(t, e, i, n, a, o, c, l, h, u, f, d, _, p, v) {
        if (undefined === t) {
          t = 0;
        }
        if (undefined === e) {
          e = 0;
        }
        if (undefined === i) {
          i = 0;
        }
        if (undefined === n) {
          n = 1;
        }
        if (undefined === a) {
          a = 1;
        }
        if (undefined === o) {
          o = 1;
        }
        if (undefined === c) {
          c = 1;
        }
        if (undefined === l) {
          l = 0;
        }
        if (undefined === h) {
          h = 0;
        }
        if (undefined === u) {
          u = 0;
        }
        if (undefined === f) {
          f = 1;
        }
        if (undefined === d) {
          d = 0;
        }
        if (undefined === _) {
          _ = 0;
        }
        if (undefined === p) {
          p = 0;
        }
        if (undefined === v) {
          v = 1;
        }
        this.center = undefined;
        this.halfExtents = undefined;
        this.orientation = undefined;
        this._type = undefined;
        this._type = s.default.SHAPE_OBB;
        this.center = new r.Vec3(t, e, i);
        this.halfExtents = new r.Vec3(n, a, o);
        this.orientation = new r.Mat3(c, l, h, u, f, d, _, p, v);
      }
      t.create = function (e, i, n, r, s, a, o, c, l, h, u, f, d, _, p) {
        return new t(e, i, n, r, s, a, o, c, l, h, u, f, d, _, p);
      };
      t.clone = function (e) {
        var i = e.orientation.m;
        return new t(e.center.x, e.center.y, e.center.z, e.halfExtents.x, e.halfExtents.y, e.halfExtents.z, i[0], i[1], i[2], i[3], i[4], i[5], i[6], i[7], i[8]);
      };
      t.copy = function (t, e) {
        r.Vec3.copy(t.center, e.center);
        r.Vec3.copy(t.halfExtents, e.halfExtents);
        r.Mat3.copy(t.orientation, e.orientation);
        return t;
      };
      t.fromPoints = function (t, e, i) {
        r.Vec3.multiplyScalar(t.center, r.Vec3.add(o, e, i), .5);
        r.Vec3.multiplyScalar(t.halfExtents, r.Vec3.subtract(c, i, e), .5);
        r.Mat3.identity(t.orientation);
        return t;
      };
      t.set = function (t, e, i, n, s, a, o, c, l, h, u, f, d, _, p, v) {
        r.Vec3.set(t.center, e, i, n);
        r.Vec3.set(t.halfExtents, s, a, o);
        r.Mat3.set(t.orientation, c, l, h, u, f, d, _, p, v);
        return t;
      };
      var i;
      var n = t.prototype;
      n.getBoundary = function (t, e) {
        var n;
        var s;
        var a;
        var c;
        n = this.halfExtents;
        s = this.orientation;
        a = l.m;
        c = s.m;
        a[0] = Math.abs(c[0]);
        a[1] = Math.abs(c[1]);
        a[2] = Math.abs(c[2]);
        a[3] = Math.abs(c[3]);
        a[4] = Math.abs(c[4]);
        a[5] = Math.abs(c[5]);
        a[6] = Math.abs(c[6]);
        a[7] = Math.abs(c[7]);
        a[8] = Math.abs(c[8]);
        r.Vec3.transformMat3(o, n, l);
        r.Vec3.subtract(t, this.center, o);
        r.Vec3.add(e, this.center, o);
      };
      n.transform = function (t, e, i, n, s) {
        r.Vec3.transformMat4(s.center, this.center, t);
        r.Mat3.fromQuat(s.orientation, i);
        r.Vec3.multiply(s.halfExtents, this.halfExtents, n);
      };
      n.translateAndRotate = function (t, e, i) {
        r.Vec3.transformMat4(i.center, this.center, t);
        r.Mat3.fromQuat(i.orientation, e);
      };
      n.setScale = function (t, e) {
        r.Vec3.multiply(e.halfExtents, this.halfExtents, t);
      };
      if (i = [{
        key: "type",
        get: function () {
          return this._type;
        }
      }]) {
        a(t.prototype, i);
      }
      Object.defineProperty(t, "prototype", {
        writable: false
      });
      return t;
    }();
    i.default = h;
    e.exports = i.default;
  }, {
    "../value-types": 251,
    "./enums": 140
  }],
  146: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n;
    var r = t("../value-types");
    var s = (n = t("./enums")) && n.__esModule ? n : {
      default: n
    };
    var a = new r.Vec3(0, 0, 0);
    var o = new r.Vec3(0, 0, 0);
    var c = cc.mat4();
    var l = cc.v4();
    var h = function () {
      function t(t, e, i, n) {
        if (undefined === t) {
          t = 0;
        }
        if (undefined === e) {
          e = 1;
        }
        if (undefined === i) {
          i = 0;
        }
        if (undefined === n) {
          n = 0;
        }
        this.n = undefined;
        this.d = undefined;
        this._type = undefined;
        this._type = s.default.SHAPE_PLANE;
        this.n = new r.Vec3(t, e, i);
        this.d = n;
      }
      t.create = function (e, i, n, r) {
        return new t(e, i, n, r);
      };
      t.clone = function (e) {
        return new t(e.n.x, e.n.y, e.n.z, e.d);
      };
      t.copy = function (t, e) {
        r.Vec3.copy(t.n, e.n);
        t.d = e.d;
        return t;
      };
      t.fromPoints = function (t, e, i, n) {
        r.Vec3.subtract(a, i, e);
        r.Vec3.subtract(o, n, e);
        r.Vec3.normalize(t.n, r.Vec3.cross(t.n, a, o));
        t.d = r.Vec3.dot(t.n, e);
        return t;
      };
      t.set = function (t, e, i, n, r) {
        t.n.x = e;
        t.n.y = i;
        t.n.z = n;
        t.d = r;
        return t;
      };
      t.fromNormalAndPoint = function (t, e, i) {
        r.Vec3.copy(t.n, e);
        t.d = r.Vec3.dot(e, i);
        return t;
      };
      t.normalize = function (t, e) {
        var i = e.n.len();
        r.Vec3.normalize(t.n, e.n);
        if (i > 0) {
          t.d = e.d / i;
        }
        return t;
      };
      t.prototype.transform = function (t) {
        r.Mat4.invert(c, t);
        r.Mat4.transpose(c, c);
        r.Vec4.set(l, this.n.x, this.n.y, this.n.z, this.d);
        r.Vec4.transformMat4(l, l, c);
        r.Vec3.set(this.n, l.x, l.y, l.z);
        this.d = l.w;
      };
      return t;
    }();
    i.default = h;
    e.exports = i.default;
  }, {
    "../value-types": 251,
    "./enums": 140
  }],
  147: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n;
    var r = t("../value-types");
    var s = (n = t("./enums")) && n.__esModule ? n : {
      default: n
    };
    var a = function () {
      function t(t, e, i, n, a, o) {
        if (undefined === t) {
          t = 0;
        }
        if (undefined === e) {
          e = 0;
        }
        if (undefined === i) {
          i = 0;
        }
        if (undefined === n) {
          n = 0;
        }
        if (undefined === a) {
          a = 0;
        }
        if (undefined === o) {
          o = -1;
        }
        this.o = undefined;
        this.d = undefined;
        this._type = undefined;
        this._type = s.default.SHAPE_RAY;
        this.o = new r.Vec3(t, e, i);
        this.d = new r.Vec3(n, a, o);
      }
      t.create = function (e, i, n, r, s, a) {
        if (undefined === e) {
          e = 0;
        }
        if (undefined === i) {
          i = 0;
        }
        if (undefined === n) {
          n = 0;
        }
        if (undefined === r) {
          r = 0;
        }
        if (undefined === s) {
          s = 0;
        }
        if (undefined === a) {
          a = 1;
        }
        return new t(e, i, n, r, s, a);
      };
      t.clone = function (e) {
        return new t(e.o.x, e.o.y, e.o.z, e.d.x, e.d.y, e.d.z);
      };
      t.copy = function (t, e) {
        r.Vec3.copy(t.o, e.o);
        r.Vec3.copy(t.d, e.d);
        return t;
      };
      t.fromPoints = function (t, e, i) {
        r.Vec3.copy(t.o, e);
        r.Vec3.normalize(t.d, r.Vec3.subtract(t.d, i, e));
        return t;
      };
      t.set = function (t, e, i, n, r, s, a) {
        t.o.x = e;
        t.o.y = i;
        t.o.z = n;
        t.d.x = r;
        t.d.y = s;
        t.d.z = a;
        return t;
      };
      t.prototype.computeHit = function (t, e) {
        r.Vec3.normalize(t, this.d);
        r.Vec3.scaleAndAdd(t, this.o, t, e);
      };
      return t;
    }();
    i.default = a;
    e.exports = i.default;
  }, {
    "../value-types": 251,
    "./enums": 140
  }],
  148: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n;
    var r = t("../value-types");
    var s = (n = t("./enums")) && n.__esModule ? n : {
      default: n
    };
    var a = new r.Vec3();
    var o = function () {
      function t(t, e, i, n) {
        if (undefined === t) {
          t = 0;
        }
        if (undefined === e) {
          e = 0;
        }
        if (undefined === i) {
          i = 0;
        }
        if (undefined === n) {
          n = 1;
        }
        this.center = undefined;
        this.radius = undefined;
        this._type = undefined;
        this._type = s.default.SHAPE_SPHERE;
        this.center = new r.Vec3(t, e, i);
        this.radius = n;
      }
      t.create = function (e, i, n, r) {
        return new t(e, i, n, r);
      };
      t.clone = function (e) {
        return new t(e.center.x, e.center.y, e.center.z, e.radius);
      };
      t.copy = function (t, e) {
        r.Vec3.copy(t.center, e.center);
        t.radius = e.radius;
        return t;
      };
      t.fromPoints = function (t, e, i) {
        r.Vec3.multiplyScalar(t.center, r.Vec3.add(a, e, i), .5);
        t.radius = .5 * r.Vec3.subtract(a, i, e).len();
        return t;
      };
      t.set = function (t, e, i, n, r) {
        t.center.x = e;
        t.center.y = i;
        t.center.z = n;
        t.radius = r;
        return t;
      };
      var e = t.prototype;
      e.clone = function () {
        return t.clone(this);
      };
      e.copy = function (e) {
        return t.copy(this, e);
      };
      e.getBoundary = function (t, e) {
        r.Vec3.set(t, this.center.x - this.radius, this.center.y - this.radius, this.center.z - this.radius);
        r.Vec3.set(e, this.center.x + this.radius, this.center.y + this.radius, this.center.z + this.radius);
      };
      e.transform = function (t, e, i, n, s) {
        r.Vec3.transformMat4(s.center, this.center, t);
        s.radius = this.radius * n.maxAxis();
      };
      e.translateAndRotate = function (t, e, i) {
        r.Vec3.transformMat4(i.center, this.center, t);
      };
      e.setScale = function (t, e) {
        e.radius = this.radius * t.maxAxis();
      };
      return t;
    }();
    i.default = o;
    e.exports = i.default;
  }, {
    "../value-types": 251,
    "./enums": 140
  }],
  149: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n = t("../value-types/vec3") && t("../value-types/vec3").__esModule ? t("../value-types/vec3") : {
      default: t("../value-types/vec3")
    };
    var r = t("./enums") && t("./enums").__esModule ? t("./enums") : {
      default: t("./enums")
    };
    var a = function () {
      function t(t, e, i, s, a, o, c, l, h) {
        this.a = undefined;
        this.b = undefined;
        this.c = undefined;
        this._type = undefined;
        this.a = new n.default(t, e, i);
        this.b = new n.default(s, a, o);
        this.c = new n.default(c, l, h);
        this._type = r.default.SHAPE_TRIANGLE;
      }
      t.create = function (e, i, n, r, s, a, o, c, l) {
        return new t(e, i, n, r, s, a, o, c, l);
      };
      t.clone = function (e) {
        return new t(e.a.x, e.a.y, e.a.z, e.b.x, e.b.y, e.b.z, e.c.x, e.c.y, e.c.z);
      };
      t.copy = function (t, e) {
        n.default.copy(t.a, e.a);
        n.default.copy(t.b, e.b);
        n.default.copy(t.c, e.c);
        return t;
      };
      t.fromPoints = function (t, e, i, r) {
        n.default.copy(t.a, e);
        n.default.copy(t.b, i);
        n.default.copy(t.c, r);
        return t;
      };
      t.set = function (t, e, i, n, r, s, a, o, c, l) {
        t.a.x = e;
        t.a.y = i;
        t.a.z = n;
        t.b.x = r;
        t.b.y = s;
        t.b.z = a;
        t.c.x = o;
        t.c.y = c;
        t.c.z = l;
        return t;
      };
      return t;
    }();
    i.default = a;
    e.exports = i.default;
  }, {
    "../value-types/vec3": 261,
    "./enums": 140
  }],
  150: [function (t, e) {
    "use strict";

    var i = cc.Class({
      name: "cc.GraphicsPoint",
      extends: cc.Vec2,
      ctor: function () {
        this.reset();
      },
      reset: function () {
        this.dx = 0;
        this.dy = 0;
        this.dmx = 0;
        this.dmy = 0;
        this.flags = 0;
        this.len = 0;
      }
    });
    cc.GraphicsPoint = e.exports = i;
  }, {}],
  151: [function (t, e) {
    "use strict";

    var i = t("../components/CCRenderComponent");
    var n = t("../assets/material/CCMaterial");
    var r = t("./types");
    var s = r.PointFlags;
    var a = r.LineCap;
    var o = r.LineJoin;
    var c = cc.Class({
      name: "cc.Graphics",
      extends: i,
      editor: false,
      ctor: function () {
        this._impl = new c._Impl(this);
      },
      properties: {
        _lineWidth: 2,
        _strokeColor: cc.Color.BLACK,
        _lineJoin: o.MITER,
        _lineCap: a.BUTT,
        _fillColor: cc.Color.WHITE,
        _miterLimit: 10,
        lineWidth: {
          get: function () {
            return this._lineWidth;
          },
          set: function (t) {
            this._lineWidth = t;
            this._impl.lineWidth = t;
          }
        },
        lineJoin: {
          get: function () {
            return this._lineJoin;
          },
          set: function (t) {
            this._lineJoin = t;
            this._impl.lineJoin = t;
          },
          type: o
        },
        lineCap: {
          get: function () {
            return this._lineCap;
          },
          set: function (t) {
            this._lineCap = t;
            this._impl.lineCap = t;
          },
          type: a
        },
        strokeColor: {
          get: function () {
            return this._strokeColor;
          },
          set: function (t) {
            this._impl.strokeColor = this._strokeColor = cc.color(t);
          }
        },
        fillColor: {
          get: function () {
            return this._fillColor;
          },
          set: function (t) {
            this._impl.fillColor = this._fillColor = cc.color(t);
          }
        },
        miterLimit: {
          get: function () {
            return this._miterLimit;
          },
          set: function (t) {
            this._miterLimit = t;
            this._impl.miterLimit = t;
          }
        }
      },
      statics: {
        LineJoin: o,
        LineCap: a,
        PointFlags: s
      },
      onRestore: function () {
        if (!this._impl) {
          this._impl = new c._Impl(this);
        }
      },
      onDestroy: function () {
        this.clear(true);
        this._super();
        this._impl = null;
      },
      _getDefaultMaterial: function () {
        return n.getBuiltinMaterial("2d-graphics");
      },
      _updateMaterial: function () {
        var t = this._materials[0];
        if (t) {
          if (undefined !== t.getDefine("CC_USE_MODEL")) {
            t.define("CC_USE_MODEL", true);
          }
          if (undefined !== t.getDefine("CC_SUPPORT_standard_derivatives") && cc.sys.glExtension("OES_standard_derivatives")) {
            t.define("CC_SUPPORT_standard_derivatives", true);
          }
        }
      },
      moveTo: function (t, e) {
        this._impl.moveTo(t, e);
      },
      lineTo: function (t, e) {
        this._impl.lineTo(t, e);
      },
      bezierCurveTo: function (t, e, i, n, r, s) {
        this._impl.bezierCurveTo(t, e, i, n, r, s);
      },
      quadraticCurveTo: function (t, e, i, n) {
        this._impl.quadraticCurveTo(t, e, i, n);
      },
      arc: function (t, e, i, n, r, s) {
        this._impl.arc(t, e, i, n, r, s);
      },
      ellipse: function (t, e, i, n) {
        this._impl.ellipse(t, e, i, n);
      },
      circle: function (t, e, i) {
        this._impl.circle(t, e, i);
      },
      rect: function (t, e, i, n) {
        this._impl.rect(t, e, i, n);
      },
      roundRect: function (t, e, i, n, r) {
        this._impl.roundRect(t, e, i, n, r);
      },
      fillRect: function (t, e, i, n) {
        this.rect(t, e, i, n);
        this.fill();
      },
      clear: function (t) {
        this._impl.clear(t);
        if (this._assembler) {
          this._assembler.clear(t);
        }
      },
      close: function () {
        this._impl.close();
      },
      stroke: function () {
        if (!this._assembler) {
          this._resetAssembler();
        }
        this._assembler.stroke(this);
      },
      fill: function () {
        if (!this._assembler) {
          this._resetAssembler();
        }
        this._assembler.fill(this);
      }
    });
    cc.Graphics = e.exports = c;
    cc.Graphics.Types = r;
    cc.Graphics.Helper = t("./helper");
  }, {
    "../assets/material/CCMaterial": 76,
    "../components/CCRenderComponent": 109,
    "./helper": 152,
    "./types": 154
  }],
  152: [function (t, e) {
    "use strict";

    var i = t("./types").PointFlags;
    var n = Math.PI;
    var r = Math.min;
    var s = Math.max;
    var a = Math.cos;
    var o = Math.sin;
    var c = Math.abs;
    var l = Math.sign;
    cc.GraphicsHelper = e.exports = {
      arc: function (t, e, i, l, h, u, f) {
        var d;
        var _;
        var p;
        var v = 0;
        var g = 0;
        var m = 0;
        var y = 0;
        var T = 0;
        var E = 0;
        var A = 0;
        var x = 0;
        var C = 0;
        var b = 0;
        var S = 0;
        var R = 0;
        var M = 0;
        g = u - h;
        if (f = f || false) {
          if (c(g) >= 2 * n) {
            g = 2 * n;
          } else {
            for (; g < 0;) {
              g += 2 * n;
            }
          }
        } else if (c(g) >= 2 * n) {
          g = 2 * -n;
        } else {
          for (; g > 0;) {
            g -= 2 * n;
          }
        }
        p = 0 | s(1, r(c(g) / (.5 * n) + .5, 5));
        m = c(1.3333333333333333 * (1 - a(d = g / p / 2)) / o(d));
        if (!f) {
          m = -m;
        }
        for (_ = 0; _ <= p; _++) {
          E = e + (y = a(v = h + g * (_ / p))) * l;
          A = i + (T = o(v)) * l;
          x = -T * l * m;
          C = y * l * m;
          if (0 === _) {
            t.moveTo(E, A);
          } else {
            t.bezierCurveTo(b + R, S + M, E - x, A - C, E, A);
          }
          b = E;
          S = A;
          R = x;
          M = C;
        }
      },
      ellipse: function (t, e, i, n, r) {
        t.moveTo(e - n, i);
        t.bezierCurveTo(e - n, i + r * .5522847493, e - n * .5522847493, i + r, e, i + r);
        t.bezierCurveTo(e + n * .5522847493, i + r, e + n, i + r * .5522847493, e + n, i);
        t.bezierCurveTo(e + n, i - r * .5522847493, e + n * .5522847493, i - r, e, i - r);
        t.bezierCurveTo(e - n * .5522847493, i - r, e - n, i - r * .5522847493, e - n, i);
        t.close();
      },
      roundRect: function (t, e, i, n, s, a) {
        if (a < .1) {
          t.rect(e, i, n, s);
        } else {
          var o = r(a, .5 * c(n)) * l(n);
          var u = r(a, .5 * c(s)) * l(s);
          t.moveTo(e, i + u);
          t.lineTo(e, i + s - u);
          t.bezierCurveTo(e, i + s - u * 0.44771525069999996, e + o * 0.44771525069999996, i + s, e + o, i + s);
          t.lineTo(e + n - o, i + s);
          t.bezierCurveTo(e + n - o * 0.44771525069999996, i + s, e + n, i + s - u * 0.44771525069999996, e + n, i + s - u);
          t.lineTo(e + n, i + u);
          t.bezierCurveTo(e + n, i + u * 0.44771525069999996, e + n - o * 0.44771525069999996, i, e + n - o, i);
          t.lineTo(e + o, i);
          t.bezierCurveTo(e + o * 0.44771525069999996, i, e, i + u * 0.44771525069999996, e, i + u);
          t.close();
        }
      },
      tesselateBezier: function t(e, n, r, s, a, o, l, h, u, f, d) {
        var _;
        var p;
        var v;
        var g;
        var m;
        var y;
        var T;
        var E;
        var A;
        var x;
        var C;
        var b;
        var S;
        var R;
        var M;
        var w;
        if (!(f > 10)) {
          m = .5 * (o + h);
          y = .5 * (l + u);
          T = .5 * ((_ = .5 * (n + s)) + (v = .5 * (s + o)));
          E = .5 * ((p = .5 * (r + a)) + (g = .5 * (a + l)));
          if (((M = c((s - h) * (R = u - r) - (a - u) * (S = h - n))) + (w = c((o - h) * R - (l - u) * S))) * (M + w) < e._tessTol * (S * S + R * R)) {
            e._addPoint(h, u, 0 === d ? d | i.PT_BEVEL : d);
          } else {
            t(e, n, r, _, p, T, E, C = .5 * (T + (A = .5 * (v + m))), b = .5 * (E + (x = .5 * (g + y))), f + 1, 0);
            t(e, C, b, A, x, m, y, h, u, f + 1, d);
          }
        }
      }
    };
  }, {
    "./types": 154
  }],
  153: [function (t) {
    "use strict";

    t("./graphics");
    t("./graphics-point");
    t("./helper");
  }, {
    "./graphics": 151,
    "./graphics-point": 150,
    "./helper": 152
  }],
  154: [function (t, e) {
    "use strict";

    var i = cc.Enum({
      BUTT: 0,
      ROUND: 1,
      SQUARE: 2
    });
    var n = cc.Enum({
      BEVEL: 0,
      ROUND: 1,
      MITER: 2
    });
    var r = cc.Enum({
      PT_CORNER: 1,
      PT_LEFT: 2,
      PT_BEVEL: 4,
      PT_INNERBEVEL: 8
    });
    e.exports = {
      LineCap: i,
      LineJoin: n,
      PointFlags: r
    };
  }, {}],
  155: [function (t) {
    "use strict";

    t("./platform");
    t("./assets");
    t("./CCNode");
    t("./CCPrivateNode");
    t("./CCScene");
    t("./components");
    t("./graphics");
    t("./collider");
    t("./collider/CCIntersection");
    t("./physics");
    t("./camera/CCCamera");
    t("./geom-utils");
    t("./mesh");
    t("./3d");
    t("./base-ui/CCWidgetManager");
  }, {
    "./3d": undefined,
    "./CCNode": 26,
    "./CCPrivateNode": 27,
    "./CCScene": 28,
    "./assets": 74,
    "./base-ui/CCWidgetManager": 85,
    "./camera/CCCamera": 86,
    "./collider": 94,
    "./collider/CCIntersection": 92,
    "./components": 127,
    "./geom-utils": 142,
    "./graphics": 153,
    "./mesh": 158,
    "./physics": undefined,
    "./platform": 180
  }],
  156: [function (t, e) {
    "use strict";

    var i = t("../../renderer/core/input-assembler") && t("../../renderer/core/input-assembler").__esModule ? t("../../renderer/core/input-assembler") : {
      default: t("../../renderer/core/input-assembler")
    };
    var n = t("../../renderer/gfx") && t("../../renderer/gfx").__esModule ? t("../../renderer/gfx") : {
      default: t("../../renderer/gfx")
    };
    var r = t("./mesh-data");
    var a = t("../renderer");
    var o = t("../event/event-target");
    function c(t, e, i) {
      t[e] = i._val;
    }
    function l(t, e, i) {
      t[e] = i.x;
      t[e + 1] = i.y;
    }
    function h(t, e, i) {
      t[e] = i.x;
      t[e + 1] = i.y;
      t[e + 2] = i.z;
    }
    var u;
    var f = {
      5120: "getInt8",
      5121: "getUint8",
      5122: "getInt16",
      5123: "getUint16",
      5124: "getInt32",
      5125: "getUint32",
      5126: "getFloat32"
    };
    var d = {
      5120: "setInt8",
      5121: "setUint8",
      5122: "setInt16",
      5123: "setUint16",
      5124: "setInt32",
      5125: "setUint32",
      5126: "setFloat32"
    };
    u = new ArrayBuffer(2);
    new DataView(u).setInt16(0, 256, true);
    var _ = 256 === new Int16Array(u)[0];
    var p = cc.Class({
      name: "cc.Mesh",
      extends: cc.Asset,
      mixins: [o],
      properties: {
        _nativeAsset: {
          override: true,
          get: function () {
            return this._buffer;
          },
          set: function (t) {
            this._buffer = ArrayBuffer.isView(t) ? t.buffer : t;
            this.initWithBuffer();
          }
        },
        _vertexBundles: {
          default: null,
          type: r.VertexBundle
        },
        _primitives: {
          default: null,
          Primitive: r.Primitive
        },
        _minPos: cc.v3(),
        _maxPos: cc.v3(),
        subMeshes: {
          get: function () {
            return this._subMeshes;
          },
          set: function (t) {
            this._subMeshes = t;
          }
        },
        subDatas: {
          get: function () {
            return this._subDatas;
          }
        }
      },
      ctor: function () {
        this._subMeshes = [];
        this._subDatas = [];
        this.loaded = false;
      },
      initWithBuffer: function () {
        this._subMeshes.length = 0;
        var t = this._primitives;
        for (var e = 0; e < t.length; e++) {
          var s = t[e];
          var o = s.data;
          var c = new Uint8Array(this._buffer, o.offset, o.length);
          var l = this._vertexBundles[s.vertexBundleIndices[0]];
          var h = l.data;
          var u = new n.default.VertexFormat(l.formats);
          var f = new Uint8Array(this._buffer, h.offset, h.length);
          var d = this._canVertexFormatBatch(u);
          var _ = new r.MeshData();
          _.vData = f;
          _.iData = c;
          _.vfm = u;
          _.offset = h.offset;
          _.canBatch = d;
          this._subDatas.push(_);
          var p = new n.default.VertexBuffer(a.device, u, n.default.USAGE_STATIC, f);
          var v = new n.default.IndexBuffer(a.device, s.indexUnit, n.default.USAGE_STATIC, c);
          this._subMeshes.push(new i.default(p, v));
        }
        this.loaded = true;
        this.emit("load");
      },
      _canVertexFormatBatch: function (t) {
        var e = t._attr2el[n.default.ATTR_POSITION];
        return !e || e.type === n.default.ATTR_TYPE_FLOAT32 && t._bytes % 4 == 0;
      },
      init: function (t, e, s, o) {
        if (undefined === s) {
          s = false;
        }
        if (undefined === o) {
          o = 0;
        }
        var c = new Uint8Array(t._bytes * e);
        var l = new r.MeshData();
        l.vData = c;
        l.vfm = t;
        l.vDirty = true;
        l.canBatch = this._canVertexFormatBatch(t);
        var h = new n.default.VertexBuffer(a.device, t, s ? n.default.USAGE_DYNAMIC : n.default.USAGE_STATIC, c);
        l.vb = h;
        this._subMeshes[o] = new i.default(l.vb);
        var u = this._subDatas[o];
        if (u) {
          if (u.vb) {
            u.vb.destroy();
          }
          if (u.ib) {
            u.ib.destroy();
          }
        }
        this._subDatas[o] = l;
        this.loaded = true;
        this.emit("load");
        this.emit("init-format");
      },
      setVertices: function (t, e, i) {
        i = i || 0;
        var r = this._subDatas[i];
        var s = r.vfm.element(t);
        if (s) {
          var a;
          var o = "number" == typeof e[0];
          var u = s.num;
          var f = o ? e.length / u | 0 : e.length;
          if (r.vData.byteLength < f * s.stride) {
            r.setVData(new Uint8Array(f * r.vfm._bytes));
          }
          var d = 4;
          if (t === n.default.ATTR_COLOR) {
            if (o) {
              a = r.getVData();
              d = 1;
            } else {
              a = r.getVData(Uint32Array);
            }
          } else {
            a = r.getVData(Float32Array);
          }
          var _ = s.stride / d;
          var p = s.offset / d;
          if (o) {
            var v = 0;
            for (var g = e.length / u; v < g; v++) {
              var m = v * u;
              var y = v * _ + p;
              for (var T = 0; T < u; T++) {
                a[y + T] = e[m + T];
              }
            }
          } else {
            var E;
            E = t === n.default.ATTR_COLOR ? c : 2 === u ? l : h;
            var A = 0;
            for (var x = e.length; A < x; A++) {
              E(a, A * _ + p, e[A]);
            }
          }
          r.vDirty = true;
        }
      },
      setIndices: function (t, e, i) {
        e = e || 0;
        var r = t;
        if (t instanceof Uint16Array) {
          r = new Uint8Array(t.buffer, t.byteOffset, t.byteLength);
        } else if (Array.isArray(t)) {
          r = new Uint16Array(t);
          r = new Uint8Array(r.buffer, r.byteOffset, r.byteLength);
        }
        var s = i ? n.default.USAGE_DYNAMIC : n.default.USAGE_STATIC;
        var o = this._subDatas[e];
        if (o.ib) {
          o.iData = r;
          o.iDirty = true;
        } else {
          o.iData = r;
          var c = new n.default.IndexBuffer(a.device, n.default.INDEX_FMT_UINT16, s, r, r.byteLength / n.default.IndexBuffer.BYTES_PER_INDEX[n.default.INDEX_FMT_UINT16]);
          o.ib = c;
          this._subMeshes[e]._indexBuffer = o.ib;
        }
      },
      setPrimitiveType: function (t, e) {
        e = e || 0;
        if (this._subMeshes[e]) {
          this._subMeshes[e]._primitiveType = t;
        }
      },
      clear: function () {
        this._subMeshes.length = 0;
        var t = this._subDatas;
        var e = 0;
        for (var i = t.length; e < i; e++) {
          var n = t[e].vb;
          if (n) {
            n.destroy();
          }
          var r = t[e].ib;
          if (r) {
            r.destroy();
          }
        }
        t.length = 0;
      },
      setBoundingBox: function (t, e) {
        this._minPos = t;
        this._maxPos = e;
      },
      destroy: function () {
        this.clear();
      },
      _uploadData: function () {
        var t = this._subDatas;
        var e = 0;
        for (var i = t.length; e < i; e++) {
          var n = t[e];
          if (n.vDirty) {
            var r = n.vb;
            var s = n.vData;
            r.update(0, s);
            n.vDirty = false;
          }
          if (n.iDirty) {
            var a = n.ib;
            var o = n.iData;
            a.update(0, o);
            n.iDirty = false;
          }
        }
      },
      _getAttrMeshData: function (t, e) {
        var i = this._subDatas[t];
        if (!i) {
          return [];
        }
        var n = i.vfm;
        var r = n.element(e);
        if (!r) {
          return [];
        }
        if (!i.attrDatas) {
          i.attrDatas = {};
        }
        var s = i.attrDatas;
        var a = s[e];
        if (a) {
          return a;
        }
        a = s[e] = [];
        var o = i.vData;
        var c = new DataView(o.buffer, o.byteOffset, o.byteLength);
        var l = r.stride;
        var h = r.offset;
        var u = r.num;
        var d = r.bytes / u;
        var p = f[r.type];
        var v = o.byteLength / n._bytes;
        for (var g = 0; g < v; g++) {
          var m = g * l + h;
          for (var y = 0; y < u; y++) {
            var T = c[p](m + y * d, _);
            a.push(T);
          }
        }
        return a;
      },
      copyAttribute: function (t, e, i, n, r) {
        var s = false;
        var a = this._subDatas[t];
        if (!a) {
          return s;
        }
        var o = a.vfm;
        var c = o.element(e);
        if (!c) {
          return s;
        }
        var l = d[c.type];
        if (!l) {
          return s;
        }
        var h = this._getAttrMeshData(t, e);
        var u = a.vData.byteLength / o._bytes;
        var f = c.bytes / c.num;
        if (h.length > 0) {
          var p = new DataView(i, r);
          var g = c.num;
          for (var m = 0; m < u; ++m) {
            var y = m * g;
            for (var T = 0; T < g; ++T) {
              var E = y + T;
              var A = n * m + f * T;
              p[l](A, h[E], _);
            }
          }
          s = true;
        }
        return s;
      },
      copyIndices: function (t, e) {
        var i = this._subDatas[t];
        if (!i) {
          return false;
        }
        var r = i.iData;
        var s = r.length / 2;
        var a = new DataView(r.buffer, r.byteOffset, r.byteLength);
        var o = f[n.default.INDEX_FMT_UINT8];
        for (var c = 0; c < s; ++c) {
          e[c] = a[o](2 * c);
        }
        return true;
      }
    });
    cc.Mesh = e.exports = p;
  }, {
    "../../renderer/core/input-assembler": 272,
    "../../renderer/gfx": 282,
    "../event/event-target": 134,
    "../renderer": 193,
    "./mesh-data": 159
  }],
  157: [function (t, e) {
    "use strict";

    var i = t("../../renderer/gfx") && t("../../renderer/gfx").__esModule ? t("../../renderer/gfx") : {
      default: t("../../renderer/gfx")
    };
    if (t("../../renderer/core/input-assembler") && t("../../renderer/core/input-assembler").__esModule) {
      t("../../renderer/core/input-assembler");
    } else {
      ({
        default: t("../../renderer/core/input-assembler")
      });
    }
    var n = t("../geom-utils/aabb") && t("../geom-utils/aabb").__esModule ? t("../geom-utils/aabb") : {
      default: t("../geom-utils/aabb")
    };
    if (t("../value-types/vec3") && t("../value-types/vec3").__esModule) {
      t("../value-types/vec3");
    } else {
      ({
        default: t("../value-types/vec3")
      });
    }
    if (t("../value-types/mat4") && t("../value-types/mat4").__esModule) {
      t("../value-types/mat4");
    } else {
      ({
        default: t("../value-types/mat4")
      });
    }
    var r = t("../assets/material/material-variant") && t("../assets/material/material-variant").__esModule ? t("../assets/material/material-variant") : {
      default: t("../assets/material/material-variant")
    };
    var a = t("../components/CCRenderComponent");
    var o = t("./CCMesh");
    var c = t("../renderer/render-flow");
    t("../renderer");
    var l = t("../assets/material/CCMaterial");
    var h = cc.Enum({
      OFF: 0,
      ON: 1
    });
    var u = cc.Class({
      name: "cc.MeshRenderer",
      extends: a,
      editor: false,
      properties: {
        _mesh: {
          default: null,
          type: o
        },
        _receiveShadows: false,
        _shadowCastingMode: h.OFF,
        _enableAutoBatch: false,
        mesh: {
          get: function () {
            return this._mesh;
          },
          set: function (t) {
            if (this._mesh !== t) {
              this._setMesh(t);
              if (t) {
                this.markForRender(true);
                this.node._renderFlag |= c.FLAG_TRANSFORM;
              } else {
                this.disableRender();
              }
            }
          },
          type: o,
          animatable: false
        },
        textures: {
          default: [],
          type: cc.Texture2D,
          visible: false
        },
        receiveShadows: {
          get: function () {
            return this._receiveShadows;
          },
          set: function (t) {
            this._receiveShadows = t;
            this._updateReceiveShadow();
          },
          animatable: false
        },
        shadowCastingMode: {
          get: function () {
            return this._shadowCastingMode;
          },
          set: function (t) {
            this._shadowCastingMode = t;
            this._updateCastShadow();
          },
          type: h,
          animatable: false
        },
        enableAutoBatch: {
          get: function () {
            return this._enableAutoBatch;
          },
          set: function (t) {
            this._enableAutoBatch = t;
          }
        }
      },
      statics: {
        ShadowCastingMode: h
      },
      ctor: function () {
        this._boundingBox = cc.geomUtils && new n.default();
      },
      onEnable: function () {
        var t = this;
        this._super();
        if (this._mesh && !this._mesh.loaded) {
          this.disableRender();
          this._mesh.once("load", function () {
            if (t.isValid) {
              t._setMesh(t._mesh);
              t.markForRender(true);
            }
          });
          cc.assetManager.postLoadNative(this._mesh);
        } else {
          this._setMesh(this._mesh);
        }
        this._updateRenderNode();
        this._updateMaterial();
      },
      onDestroy: function () {
        this._setMesh(null);
        cc.pool.assembler.put(this._assembler);
      },
      _updateRenderNode: function () {
        this._assembler.setRenderNode(this.node);
      },
      _setMesh: function (t) {
        if (cc.geomUtils && t) {
          n.default.fromPoints(this._boundingBox, t._minPos, t._maxPos);
        }
        if (this._mesh) {
          this._mesh.off("init-format", this._updateMeshAttribute, this);
        }
        if (t) {
          t.on("init-format", this._updateMeshAttribute, this);
        }
        this._mesh = t;
        if (this._assembler) {
          this._assembler._worldDatas = {};
        }
        this._updateMeshAttribute();
      },
      _getDefaultMaterial: function () {
        return l.getBuiltinMaterial("unlit");
      },
      _validateRender: function () {
        var t = this._mesh;
        if (!(t && t._subDatas.length > 0)) {
          this.disableRender();
        }
      },
      _updateMaterial: function () {
        var t = this.textures;
        if (t && t.length > 0) {
          var e = this._getDefaultMaterial();
          for (var i = 0; i < t.length; i++) {
            var n = this._materials[i];
            if (!(n && n._uuid !== e._uuid)) {
              if (!n) {
                n = r.default.create(e, this);
                this.setMaterial(i, n);
              }
              n.setProperty("diffuseTexture", t[i]);
            }
          }
        }
        this._updateReceiveShadow();
        this._updateCastShadow();
        this._updateMeshAttribute();
      },
      _updateReceiveShadow: function () {
        var t = this.getMaterials();
        for (var e = 0; e < t.length; e++) {
          t[e].define("CC_USE_SHADOW_MAP", this._receiveShadows, undefined, true);
        }
      },
      _updateCastShadow: function () {
        var t = this.getMaterials();
        for (var e = 0; e < t.length; e++) {
          t[e].define("CC_CASTING_SHADOW", this._shadowCastingMode === h.ON, undefined, true);
        }
      },
      _updateMeshAttribute: function () {
        var t = this._mesh && this._mesh.subDatas;
        if (t) {
          var e = this.getMaterials();
          for (var n = 0; n < e.length && t[n]; n++) {
            var r = t[n].vfm;
            var s = e[n];
            s.define("CC_USE_ATTRIBUTE_COLOR", !!r.element(i.default.ATTR_COLOR), undefined, true);
            s.define("CC_USE_ATTRIBUTE_UV0", !!r.element(i.default.ATTR_UV0), undefined, true);
            s.define("CC_USE_ATTRIBUTE_NORMAL", !!r.element(i.default.ATTR_NORMAL), undefined, true);
            s.define("CC_USE_ATTRIBUTE_TANGENT", !!r.element(i.default.ATTR_TANGENT), undefined, true);
          }
        }
      },
      _checkBacth: function () {}
    });
    cc.MeshRenderer = e.exports = u;
  }, {
    "../../renderer/core/input-assembler": 272,
    "../../renderer/gfx": 282,
    "../assets/material/CCMaterial": 76,
    "../assets/material/material-variant": 83,
    "../components/CCRenderComponent": 109,
    "../geom-utils/aabb": 138,
    "../renderer": 193,
    "../renderer/render-flow": 194,
    "../value-types/mat4": 253,
    "../value-types/vec3": 261,
    "./CCMesh": 156
  }],
  158: [function (t) {
    "use strict";

    t("./CCMesh");
    t("./CCMeshRenderer");
    t("./mesh-renderer");
  }, {
    "./CCMesh": 156,
    "./CCMeshRenderer": 157,
    "./mesh-renderer": 160
  }],
  159: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.BufferRange = undefined;
    i.MeshData = l;
    i.VertexFormat = i.VertexBundle = i.Primitive = undefined;
    var n;
    var r = (n = t("../../renderer/gfx")) && n.__esModule ? n : {
      default: n
    };
    var s = cc.Class({
      name: "cc.BufferRange",
      properties: {
        offset: 0,
        length: 0
      }
    });
    i.BufferRange = s;
    var a = cc.Class({
      name: "cc.mesh.VertexFormat",
      properties: {
        name: "",
        type: -1,
        num: -1,
        normalize: false
      }
    });
    i.VertexFormat = a;
    var o = cc.Class({
      name: "cc.mesh.VertexBundle",
      properties: {
        data: {
          default: null,
          type: s
        },
        formats: {
          default: [],
          type: a
        },
        verticesCount: 0
      }
    });
    i.VertexBundle = o;
    var c = cc.Class({
      name: "cc.mesh.Primitive",
      properties: {
        vertexBundleIndices: {
          default: [],
          type: cc.Float
        },
        data: {
          default: null,
          type: s
        },
        indexUnit: r.default.INDEX_FMT_UINT16,
        topology: r.default.PT_TRIANGLES
      }
    });
    function l() {
      this.vData = null;
      this.float32VData = null;
      this.uint32VData = null;
      this.iData = null;
      this.uint16IData = null;
      this.vfm = null;
      this.offset = 0;
      this.vb = null;
      this.ib = null;
      this.vDirty = false;
      this.iDirty = false;
      this.enable = true;
    }
    i.Primitive = c;
    l.prototype.setVData = function (t) {
      this.vData = t;
      this.float32VData = null;
      this.uint32VData = null;
    };
    l.prototype.getVData = function (t) {
      return t === Float32Array ? (this.float32VData || (this.float32VData = new Float32Array(this.vData.buffer, this.vData.byteOffset, this.vData.byteLength / 4)), this.float32VData) : t === Uint32Array ? (this.uint32VData || (this.uint32VData = new Uint32Array(this.vData.buffer, this.vData.byteOffset, this.vData.byteLength / 4)), this.uint32VData) : this.vData;
    };
    l.prototype.getIData = function (t) {
      return t === Uint16Array ? (this.uint16IData || (this.uint16IData = new Uint16Array(this.iData.buffer, this.iData.byteOffset, this.iData.byteLength / 2)), this.uint16IData) : this.iData;
    };
  }, {
    "../../renderer/gfx": 282
  }],
  160: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n = t("../renderer/assembler") && t("../renderer/assembler").__esModule ? t("../renderer/assembler") : {
      default: t("../renderer/assembler")
    };
    var r = t("../../renderer/gfx") && t("../../renderer/gfx").__esModule ? t("../../renderer/gfx") : {
      default: t("../../renderer/gfx")
    };
    var s = t("../value-types/vec3") && t("../value-types/vec3").__esModule ? t("../value-types/vec3") : {
      default: t("../value-types/vec3")
    };
    function o(t, e) {
      return (o = Object.setPrototypeOf || function (t, e) {
        t.__proto__ = e;
        return t;
      })(t, e);
    }
    var c = t("./CCMeshRenderer");
    var l = new s.default();
    var h = function (t) {
      function n() {
        return t.apply(this, arguments) || this;
      }
      n.prototype = Object.create(t.prototype);
      n.prototype.constructor = n;
      o(n, t);
      var a = n.prototype;
      a.init = function (e) {
        t.prototype.init.call(this, e);
        this._worldDatas = {};
        this._renderNode = null;
      };
      a.setRenderNode = function (t) {
        this._renderNode = t;
      };
      a.fillBuffers = function (t, e) {
        if (t.mesh) {
          t.mesh._uploadData();
          var i = e.cullingMask === t.node._cullingMask;
          var n = t.enableAutoBatch;
          var s = t._materials;
          var a = t.mesh._subMeshes;
          var o = t.mesh.subDatas;
          for (var c = 0; c < a.length; c++) {
            var l = a[c];
            var h = o[c];
            var u = s[c] || s[0];
            if (n && h.canBatch && l._primitiveType === r.default.PT_TRIANGLES) {
              if (!(i && u.getHash() === e.material.getHash())) {
                e._flush();
              }
              e.material = u;
              e.cullingMask = t.node._cullingMask;
              e.node = e._dummyNode;
              this._fillBuffer(t, h, e, c);
            } else {
              e._flush();
              e.material = u;
              e.cullingMask = t.node._cullingMask;
              e.node = this._renderNode;
              e._flushIA(l);
            }
          }
        }
      };
      a._fillBuffer = function (t, e, i, n) {
        var r = e.getVData(Float32Array);
        var s = e.vfm;
        var a = r.byteLength / s._bytes | 0;
        var o = e.getIData(Uint16Array);
        var c = o.length;
        var l = i.getBuffer("mesh", s);
        var h = l.request(a, c);
        var u = h.indiceOffset;
        var f = h.byteOffset >> 2;
        var d = h.vertexOffset;
        var _ = l._vData;
        var p = l._iData;
        if (!(!i.worldMatDirty && this._worldDatas[n])) {
          this._updateWorldVertices(n, a, r, s, t.node._worldMatrix);
        }
        _.set(this._worldDatas[n], f);
        for (var v = 0; v < c; v++) {
          p[u + v] = d + o[v];
        }
      };
      a._updateWorldVertices = function (t, e, i, n, a) {
        var o = this._worldDatas[t];
        if (!o) {
          (o = this._worldDatas[t] = new Float32Array(i.length)).set(i);
        }
        var c = n._bytes / 4;
        var h = n._elements;
        var u = 0;
        for (var f = h.length; u < f; u++) {
          var d = h[u];
          var _ = d.offset / 4;
          if (d.name === r.default.ATTR_POSITION || d.name === r.default.ATTR_NORMAL) {
            var p = d.name === r.default.ATTR_NORMAL ? s.default.transformMat4Normal : s.default.transformMat4;
            for (var v = 0; v < e; v++) {
              var g = v * c + _;
              l.x = i[g];
              l.y = i[g + 1];
              l.z = i[g + 2];
              p(l, l, a);
              o[g] = l.x;
              o[g + 1] = l.y;
              o[g + 2] = l.z;
            }
          }
        }
      };
      a._drawDebugDatas = function (t, e, i) {
        var n = t._debugDatas[i];
        if (n) {
          for (var r = 0; r < n.length; r++) {
            var s = n[r];
            if (s) {
              var a = s.material;
              e.material = a;
              e._flushIA(s.ia);
            }
          }
        }
      };
      return n;
    }(n.default);
    i.default = h;
    n.default.register(c, h);
    e.exports = i.default;
  }, {
    "../../renderer/gfx": 282,
    "../renderer/assembler": 190,
    "../value-types/vec3": 261,
    "./CCMeshRenderer": 157
  }],
  161: [function (t, e) {
    "use strict";

    var i = t("./component-scheduler");
    var n = t("./platform/CCObject").Flags;
    var r = t("./platform/js");
    var s = n.IsPreloadStarted;
    var a = n.IsOnLoadStarted;
    var o = n.IsOnLoadCalled;
    var c = n.Deactivating;
    var l = cc.Class({
      extends: i.LifeCycleInvoker,
      add: function (t) {
        this._zero.array.push(t);
      },
      remove: function (t) {
        this._zero.fastRemove(t);
      },
      cancelInactive: function (t) {
        i.LifeCycleInvoker.stableRemoveInactive(this._zero, t);
      },
      invoke: function () {
        this._invoke(this._zero);
        this._zero.array.length = 0;
      }
    });
    var h = i.createInvokeImpl("c.__preload();");
    var u = i.createInvokeImpl("c.onLoad();c._objFlags|=" + o, false, o);
    var f = new r.Pool(4);
    function d(t, e, i) {
      if (e) {
        t._removeComponent(e);
      } else {
        r.array.removeAt(t._components, i);
      }
    }
    function _() {
      this._activatingStack = [];
    }
    f.get = function () {
      var t = this._get() || {
        preload: new l(h),
        onLoad: new i.OneOffInvoker(u),
        onEnable: new i.OneOffInvoker(i.invokeOnEnable)
      };
      t.preload._zero.i = -1;
      var e = t.onLoad;
      e._zero.i = -1;
      e._neg.i = -1;
      e._pos.i = -1;
      (e = t.onEnable)._zero.i = -1;
      e._neg.i = -1;
      e._pos.i = -1;
      return t;
    };
    var p = cc.Class({
      ctor: _,
      reset: _,
      _activateNodeRecursively: function (t, e, i, n) {
        if (!(t._objFlags & c)) {
          t._activeInHierarchy = true;
          var r = t._components.length;
          for (var s = 0; s < r; ++s) {
            var a = t._components[s];
            if (a instanceof cc.Component) {
              this.activateComp(a, e, i, n);
            } else {
              d(t, a, s);
              --s;
              --r;
            }
          }
          t._childArrivalOrder = t._children.length;
          var o = 0;
          for (var l = t._children.length; o < l; ++o) {
            var h = t._children[o];
            h._localZOrder = 4294901760 & h._localZOrder | o + 1;
            if (h._active) {
              this._activateNodeRecursively(h, e, i, n);
            }
          }
          t._onPostActivated(true);
        }
      },
      _deactivateNodeRecursively: function (t) {
        t._objFlags |= c;
        t._activeInHierarchy = false;
        var e = t._components.length;
        for (var i = 0; i < e; ++i) {
          var n = t._components[i];
          if (n._enabled && (cc.director._compScheduler.disableComp(n), t._activeInHierarchy)) {
            return void (t._objFlags &= ~c);
          }
        }
        var r = 0;
        for (var s = t._children.length; r < s; ++r) {
          var a = t._children[r];
          if (a._activeInHierarchy && (this._deactivateNodeRecursively(a), t._activeInHierarchy)) {
            return void (t._objFlags &= ~c);
          }
        }
        t._onPostActivated(false);
        t._objFlags &= ~c;
      },
      activateNode: function (t, e) {
        if (e) {
          var i = f.get();
          this._activatingStack.push(i);
          this._activateNodeRecursively(t, i.preload, i.onLoad, i.onEnable);
          i.preload.invoke();
          i.onLoad.invoke();
          i.onEnable.invoke();
          this._activatingStack.pop();
          f.put(i);
        } else {
          this._deactivateNodeRecursively(t);
          var n = this._activatingStack;
          for (var r = 0; r < n.length; r++) {
            var o = n[r];
            o.preload.cancelInactive(s);
            o.onLoad.cancelInactive(a);
            o.onEnable.cancelInactive();
          }
        }
        t.emit("active-in-hierarchy-changed", t);
      },
      activateComp: function (t, e, i, n) {
        if (cc.isValid(t, true) && (t._objFlags & s || (t._objFlags |= s, t.__preload && (e ? e.add(t) : t.__preload())), t._objFlags & a || (t._objFlags |= a, t.onLoad ? i ? i.add(t) : (t.onLoad(), t._objFlags |= o) : t._objFlags |= o), t._enabled)) {
          if (!t.node._activeInHierarchy) {
            return;
          }
          cc.director._compScheduler.enableComp(t, n);
        }
      },
      destroyComp: function (t) {
        cc.director._compScheduler.disableComp(t);
        if (t.onDestroy && t._objFlags & o) {
          t.onDestroy();
        }
      },
      resetComp: false
    });
    e.exports = p;
  }, {
    "./component-scheduler": 95,
    "./platform/CCObject": 168,
    "./platform/js": 183,
    "./utils/misc": 236
  }],
  162: [function (t, e) {
    "use strict";

    var i = t("./js");
    var n = t("./CCEnum");
    var r = t("./utils");
    r.isPlainEmptyObj_DEV;
    r.cloneable_DEV;
    var s = t("./attribute");
    var a = s.DELIMETER;
    var o = t("./preprocess-class");
    t("./requiring-frame");
    var c = ["name", "extends", "mixins", "ctor", "__ctor__", "properties", "statics", "editor", "__ES6__"];
    function l(t, e) {
      if (t.indexOf(e) < 0) {
        t.push(e);
      }
    }
    var h = {
      datas: null,
      push: function (t) {
        if (this.datas) {
          this.datas.push(t);
        } else {
          this.datas = [t];
          var e = this;
          setTimeout(function () {
            e.init();
          }, 0);
        }
      },
      init: function () {
        var t = this.datas;
        if (t) {
          for (var e = 0; e < t.length; ++e) {
            var n = t[e];
            var r = n.cls;
            var s = n.props;
            if ("function" == typeof s) {
              s = s();
            }
            var a = i.getClassName(r);
            if (s) {
              R(r, a, s, r.$super, n.mixins);
            }
          }
          this.datas = null;
        }
      }
    };
    function u(t, e) {
      l(t.__props__, e);
    }
    function f(t, e, i, n) {
      var r = n.default;
      s.setClassAttr(t, i, "default", r);
      u(t, i);
      I(t, n, 0, i);
    }
    function d(t, e, n, r, a) {
      var o = r.get;
      var c = r.set;
      var l = t.prototype;
      var h = !Object.getOwnPropertyDescriptor(l, n);
      if (o) {
        I(t, r, 0, n);
        s.setClassAttr(t, n, "serializable", false);
        if (!a) {
          i.get(l, n, o, h, h);
        }
      }
      if (c) {
        if (!a) {
          i.set(l, n, c, h, h);
        }
      }
    }
    function _(t) {
      return "function" == typeof t ? t() : t;
    }
    function p(t, e, n) {
      for (var r in e) if (!(t.hasOwnProperty(r) || n && !n(r))) {
        Object.defineProperty(t, r, i.getPropertyDescriptor(e, r));
      }
    }
    function v(t, e, n, r) {
      var a;
      var o;
      var c = r.__ctor__;
      var l = r.ctor;
      var h = r.__ES6__;
      if (h) {
        a = [l];
        o = l;
      } else {
        a = c ? [c] : C(e, n, r);
        o = x(a, e, t, r);
        i.value(o, "extend", function (t) {
          t.extends = this;
          return M(t);
        }, true);
      }
      i.value(o, "__ctors__", a.length > 0 ? a : null, true);
      var u = o.prototype;
      if (e) {
        if (!h) {
          i.extend(o, e);
          u = o.prototype;
        }
        o.$super = e;
      }
      if (n) {
        for (var f = n.length - 1; f >= 0; f--) {
          var d = n[f];
          p(u, d.prototype);
          p(o, d, function (t) {
            return d.hasOwnProperty(t) && true;
          });
          if (M._isCCClass(d)) {
            p(s.getClassAttrs(o), s.getClassAttrs(d));
          }
        }
        u.constructor = o;
      }
      if (!h) {
        u.__initProps__ = A;
      }
      i.setClassName(t, o);
      return o;
    }
    function g(t, e, n, r) {
      var s = cc.Component;
      var a = cc._RF.peek();
      if (a && i.isChildClassOf(e, s)) {
        if (i.isChildClassOf(a.cls, s)) {
          return null;
        }
        t = t || a.script;
      }
      var o = v(t, e, n, r);
      if (a) {
        if (i.isChildClassOf(e, s)) {
          var c = a.uuid;
          if (c) {
            i._setClassId(c, o);
          }
          a.cls = o;
        } else if (!i.isChildClassOf(a.cls, s)) {
          a.cls = o;
        }
      }
      return o;
    }
    function m(t) {
      var e = i.getClassName(t);
      var n = t.constructor;
      var r = "new " + e + "(";
      for (var s = 0; s < n.__props__.length; s++) {
        r += t[n.__props__[s]];
        if (s < n.__props__.length - 1) {
          r += ",";
        }
      }
      return r + ")";
    }
    function y(t) {
      return JSON.stringify(t).replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029");
    }
    function T(t, e) {
      var i = [];
      var n = "";
      for (var r = 0; r < e.length; r++) {
        var s = e[r];
        var o = s + a + "default";
        if (o in t) {
          var c;
          var l;
          c = E.test(s) ? "this." + s + "=" : "this[" + JSON.stringify(s).replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029") + "]=";
          var h = t[o];
          if ("object" == typeof h && h) {
            l = h instanceof cc.ValueType ? m(h) : Array.isArray(h) ? "[]" : "{}";
          } else if ("function" == typeof h) {
            var u = i.length;
            i.push(h);
            l = "F[" + u + "]()";
          } else {
            l = "string" == typeof h ? JSON.stringify(h).replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029") : h;
          }
          n += c = c + l + ";";
        }
      }
      return 0 === i.length ? Function(n) : Function("F", "return (function(){" + n + "})")(i);
    }
    var E = /^[A-Za-z_$][0-9A-Za-z_$]*$/;
    function A(t) {
      var e = s.getClassAttrs(t);
      var i = t.__props__;
      if (null === i) {
        h.init();
        i = t.__props__;
      }
      var n = T(e, i);
      t.prototype.__initProps__ = n;
      n.call(this);
    }
    var x = function (t, e, i, n) {
      var r = "return function CCClass(){";
      if (e && S(e, n)) {
        r += "this._super=null;";
      }
      r += "this.__initProps__(CCClass);";
      var s = t.length;
      if (s > 0) {
        if (1 === s) {
          r += "CCClass.__ctors__[0].apply(this,arguments);";
        } else {
          r += "var cs=CCClass.__ctors__;";
          for (var o = 0; o < s; o++) {
            r += "cs[" + o + "].apply(this,arguments);";
          }
        }
      }
      return Function(r += "}")();
    };
    function C(t, e, i) {
      var n;
      var r = [];
      var s = [t].concat(e);
      for (var a = 0; a < s.length; a++) {
        var o = s[a];
        if (o) {
          var c = M._isCCClass(n) ? n.__ctors__ || [] : [n];
          for (var h = 0; h < c.length; h++) {
            var c;
            var h;
            l(r, c[h]);
          }
        }
      }
      var u = i.ctor;
      if (u) {
        r.push(u);
      }
      return r;
    }
    var b = /\b\._super\b/;
    function S(t, e) {
      var n = false;
      for (var r in e) if (!(c.indexOf(r) >= 0)) {
        var s = e[r];
        if ("function" == typeof s) {
          var a = i.getPropertyDescriptor(t.prototype, r);
          if (a) {
            var o = a.value;
            if ("function" == typeof o) {
              if (b.test(s)) {
                n = true;
                e[r] = function (t, e) {
                  return function () {
                    var i = this._super;
                    this._super = t;
                    var n = e.apply(this, arguments);
                    this._super = i;
                    return n;
                  };
                }(o, s);
              }
              continue;
            }
          }
        }
      }
      return n;
    }
    function R(t, e, i, n, r, c) {
      t.__props__ = [];
      if (n && n.__props__) {
        t.__props__ = n.__props__.slice();
      }
      if (r) {
        for (var l = 0; l < r.length; ++l) {
          var h = r[l];
          if (h.__props__) {
            t.__props__ = t.__props__.concat(h.__props__.filter(function (e) {
              return t.__props__.indexOf(e) < 0;
            }));
          }
        }
      }
      if (i) {
        o.preprocessAttrs(i, e, t, c);
        for (var u in i) {
          var _ = i[u];
          if ("default" in _) {
            f(t, 0, u, _);
          } else {
            d(t, 0, u, _, c);
          }
        }
      }
      var p = s.getClassAttrs(t);
      t.__values__ = t.__props__.filter(function (t) {
        return false !== p[t + a + "serializable"];
      });
    }
    function M(t) {
      var e = (t = t || {}).name;
      var n = t.extends;
      var r = t.mixins;
      var s = g(e, n, r, t);
      if (!e) {
        e = cc.js.getClassName(s);
      }
      s._sealed = true;
      if (n) {
        n._sealed = false;
      }
      var a = t.properties;
      if ("function" == typeof a || n && null === n.__props__ || r && r.some(function (t) {
        return null === t.__props__;
      })) {
        h.push({
          cls: s,
          props: a,
          mixins: r
        });
        s.__props__ = s.__values__ = null;
      } else {
        R(s, e, a, n, t.mixins, t.__ES6__);
      }
      var l;
      var u = t.statics;
      if (u) {
        for (l in u) s[l] = u[l];
      }
      for (var f in t) if (!(c.indexOf(f) >= 0)) {
        var d = t[f];
        if (o.validateMethodWithProps(d, f, e, s, n)) {
          i.value(s.prototype, f, d, true, true);
        }
      }
      var _ = t.editor;
      if (_) {
        cc.Component._registerEditorProps(s, _);
      }
      return s;
    }
    M._isCCClass = function (t) {
      return t && t.hasOwnProperty("__ctors__");
    };
    M._fastDefine = function (t, e, n) {
      i.setClassName(t, e);
      var r = e.__props__ = e.__values__ = Object.keys(n);
      var o = s.getClassAttrs(e);
      for (var c = 0; c < r.length; c++) {
        var l = r[c];
        o[l + a + "visible"] = false;
        o[l + a + "default"] = n[l];
      }
    };
    M.Attr = s;
    M.attr = s.attr;
    M.getInheritanceChain = function (t) {
      for (var e = []; t = i.getSuper(t);) {
        if (t !== Object) {
          e.push(t);
        }
      }
      return e;
    };
    var w = {
      Integer: "Number",
      Float: "Number",
      Boolean: "Boolean",
      String: "String"
    };
    function I(t, e, i, r) {
      var o = null;
      var c = "";
      function l() {
        c = r + a;
        return o = s.getClassAttrs(t);
      }
      var h = e.type;
      if (h) {
        if (w[h]) {
          (o || l())[c + "type"] = h;
        } else if (!("Object" === h)) {
          if (h === s.ScriptUuid) {
            (o || l())[c + "type"] = "Script";
            o[c + "ctor"] = cc.ScriptAsset;
          } else if ("object" == typeof h) {
            if (n.isEnum(h)) {
              (o || l())[c + "type"] = "Enum";
              o[c + "enumList"] = n.getList(h);
            }
          } else if ("function" == typeof h) {
            (o || l())[c + "type"] = "Object";
            o[c + "ctor"] = h;
          }
        }
      }
      function u(t, i) {
        if (t in e) {
          var n = e[t];
          if (typeof n === i) {
            (o || l())[c + t] = n;
          }
        }
      }
      if (e.editorOnly) {
        (o || l())[c + "editorOnly"] = true;
      }
      if (false === e.serializable) {
        (o || l())[c + "serializable"] = false;
      }
      u("formerlySerializedAs", "string");
      var f = e.range;
      if (f && Array.isArray(f) && f.length >= 2) {
        (o || l())[c + "min"] = f[0];
        o[c + "max"] = f[1];
        if (f.length > 2) {
          o[c + "step"] = f[2];
        }
      }
      u("min", "number");
      u("max", "number");
      u("step", "number");
      u("userData", "object");
    }
    cc.Class = M;
    e.exports = {
      isArray: function (t) {
        t = "function" == typeof t ? t() : t;
        return Array.isArray(t);
      },
      fastDefine: M._fastDefine,
      getNewValueTypeCode: m,
      IDENTIFIER_RE: E,
      escapeForJS: y,
      getDefault: _
    };
  }, {
    "./CCEnum": 164,
    "./attribute": 174,
    "./js": 183,
    "./preprocess-class": 184,
    "./requiring-frame": 185,
    "./utils": 186
  }],
  163: [function (t, e) {
    "use strict";

    t("./CCClass");
    var i = t("./preprocess-class");
    var n = t("./js");
    function s(t) {
      return t;
    }
    function a(t, e) {
      return t[e] || (t[e] = {});
    }
    function o(t) {
      return function (e) {
        return "function" == typeof e ? t(e) : function (i) {
          return t(i, e);
        };
      };
    }
    function c(t, e) {
      return function (t) {
        return function (i) {
          return e(i, t);
        };
      };
    }
    var l = c.bind(null, false);
    var u = c.bind(null, false);
    var f = c.bind(null, false);
    function _(t) {
      var e;
      try {
        e = t();
      } catch (i) {
        return t;
      }
      return "object" != typeof e || null === e ? e : t;
    }
    function p(t) {
      var e;
      try {
        e = new t();
      } catch (i) {
        return {};
      }
      return e;
    }
    function v(t, e, r, s, a, o) {
      var c;
      var l = a && (a.get || a.set);
      if (s) {
        c = i.getFullFormOfProperty(s, l);
      }
      var h = e[r];
      var u = n.mixin(h || {}, c || s || {});
      if (l) {
        if (a.get) {
          u.get = a.get;
        }
        if (a.set) {
          u.set = a.set;
        }
      } else {
        var f = undefined;
        if (a) {
          if (a.initializer) {
            f = _(a.initializer);
          }
        } else {
          var d = o.default || (o.default = p(t));
          if (d.hasOwnProperty(r)) {
            f = d[r];
          }
        }
        u.default = f;
      }
      e[r] = u;
    }
    var g = o(function (t, e) {
      var i = n.getSuper(t);
      if (i === Object) {
        i = null;
      }
      var s = {
        name: e,
        extends: i,
        ctor: t,
        __ES6__: true
      };
      var a = t.__ccclassCache__;
      if (a) {
        var o = a.proto;
        if (o) {
          n.mixin(s, o);
        }
        t.__ccclassCache__ = undefined;
      }
      return cc.Class(s);
    });
    function m(t, e, i) {
      return t(function (t, n) {
        var r = a(t, "__ccclassCache__");
        if (r) {
          var s = undefined !== i ? i : n;
          var o = a(r, "proto");
          a(o, "editor")[e] = s;
        }
      }, e);
    }
    var T = o(s);
    var E = m(l, "requireComponent");
    var A = u(s);
    var x = m(f, "executionOrder");
    var C = o(s);
    var b = o(s);
    var S = u(s);
    var R = u(s);
    var M = u(s);
    cc._decorator = e.exports = {
      ccclass: g,
      property: function (t, e, i) {
        var n = null;
        function r(t, e, i) {
          var r = a(t.constructor, "__ccclassCache__");
          if (r) {
            var s = a(r, "proto");
            var o = a(s, "properties");
            v(t.constructor, o, e, n, i, r);
          }
        }
        if (undefined === e) {
          n = t;
          return r;
        }
        r(t, e, i);
      },
      executeInEditMode: T,
      requireComponent: E,
      menu: A,
      executionOrder: x,
      disallowMultiple: C,
      playOnFocus: b,
      inspector: S,
      icon: R,
      help: M,
      mixins: function () {
        var t = [];
        for (var e = 0; e < arguments.length; e++) {
          t[e] = arguments[e];
        }
        return function (e) {
          var i = a(e, "__ccclassCache__");
          if (i) {
            a(i, "proto").mixins = t;
          }
        };
      }
    };
  }, {
    "./CCClass": 162,
    "./js": 183,
    "./preprocess-class": 184,
    "./utils": 186
  }],
  164: [function (t, e) {
    "use strict";

    var i = t("./js");
    function n(t) {
      if ("__enums__" in t) {
        return t;
      }
      i.value(t, "__enums__", null, true);
      var e = -1;
      var n = Object.keys(t);
      for (var r = 0; r < n.length; r++) {
        var s = n[r];
        var a = t[s];
        if (-1 === a) {
          a = ++e;
          t[s] = a;
        } else if ("number" == typeof a) {
          e = a;
        } else if ("string" == typeof a && Number.isInteger(parseFloat(s))) {
          continue;
        }
        var o = "" + a;
        if (s !== o) {
          i.value(t, o, s);
        }
      }
      return t;
    }
    n.isEnum = function (t) {
      return t && t.hasOwnProperty("__enums__");
    };
    n.getList = function (t) {
      if (t.__enums__) {
        return t.__enums__;
      }
      var e = t.__enums__ = [];
      for (var i in t) {
        var n = t[i];
        if (Number.isInteger(n)) {
          e.push({
            name: i,
            value: n
          });
        }
      }
      e.sort(function (t, e) {
        return t.value - e.value;
      });
      return e;
    };
    e.exports = cc.Enum = n;
  }, {
    "./js": 183
  }],
  165: [function (t) {
    "use strict";

    var e;
    var i = t("../event-manager");
    var n = t("./CCInputManager");
    cc.Acceleration = function (t, e, i, n) {
      this.x = t || 0;
      this.y = e || 0;
      this.z = i || 0;
      this.timestamp = n || 0;
    };
    n.setAccelerometerEnabled = function (t) {
      var e = this;
      if (e._accelEnabled !== t) {
        e._accelEnabled = t;
        var i = cc.director.getScheduler();
        i.enableForTarget(e);
        if (e._accelEnabled) {
          e._registerAccelerometerEvent();
          e._accelCurTime = 0;
          i.scheduleUpdate(e);
        } else {
          e._unregisterAccelerometerEvent();
          e._accelCurTime = 0;
          i.unscheduleUpdate(e);
        }
      }
    };
    n.setAccelerometerInterval = function (t) {
      if (this._accelInterval !== t) {
        this._accelInterval = t;
      }
    };
    n._registerKeyboardEvent = function () {
      cc.game.canvas.addEventListener("keydown", function (t) {
        i.dispatchEvent(new cc.Event.EventKeyboard(t.keyCode, true));
        t.stopPropagation();
        t.preventDefault();
      }, false);
      cc.game.canvas.addEventListener("keyup", function (t) {
        i.dispatchEvent(new cc.Event.EventKeyboard(t.keyCode, false));
        t.stopPropagation();
        t.preventDefault();
      }, false);
    };
    n._registerAccelerometerEvent = function () {
      var i = this;
      i._acceleration = new cc.Acceleration();
      i._accelDeviceEvent = window.DeviceMotionEvent || window.DeviceOrientationEvent;
      if (cc.sys.browserType === cc.sys.BROWSER_TYPE_MOBILE_QQ) {
        i._accelDeviceEvent = window.DeviceOrientationEvent;
      }
      var n = i._accelDeviceEvent === window.DeviceMotionEvent ? "devicemotion" : "deviceorientation";
      var r = navigator.userAgent;
      if (/Android/.test(r) || /Adr/.test(r) && cc.sys.browserType === cc.BROWSER_TYPE_UC) {
        i._minus = -1;
      }
      e = i.didAccelerate.bind(i);
      window.addEventListener(n, e, false);
    };
    n._unregisterAccelerometerEvent = function () {
      var i = this._accelDeviceEvent === window.DeviceMotionEvent ? "devicemotion" : "deviceorientation";
      if (e) {
        window.removeEventListener(i, e, false);
      }
    };
    n.didAccelerate = function (t) {
      var e = this;
      if (e._accelEnabled) {
        var n;
        var r;
        var s;
        var a = e._acceleration;
        if (e._accelDeviceEvent === window.DeviceMotionEvent) {
          var o = t.accelerationIncludingGravity;
          n = e._accelMinus * o.x * .1;
          r = e._accelMinus * o.y * .1;
          s = .1 * o.z;
        } else {
          n = t.gamma / 90 * .981;
          r = -t.beta / 90 * .981;
          s = t.alpha / 90 * .981;
        }
        if (cc.view._isRotated) {
          var c = n;
          n = -r;
          r = c;
        }
        a.x = n;
        a.y = r;
        a.z = s;
        a.timestamp = t.timeStamp || Date.now();
        var l = a.x;
        if (90 === window.orientation) {
          a.x = -a.y;
          a.y = l;
        } else if (-90 === window.orientation) {
          a.x = a.y;
          a.y = -l;
        } else if (180 === window.orientation) {
          a.x = -a.x;
          a.y = -a.y;
        }
        if (!(cc.sys.os !== cc.sys.OS_ANDROID && cc.sys.os !== cc.sys.OS_OPENHARMONY || cc.sys.browserType === cc.sys.BROWSER_TYPE_MOBILE_QQ)) {
          a.x = -a.x;
          a.y = -a.y;
        }
      }
    };
  }, {
    "../event-manager": 133,
    "./CCInputManager": 166
  }],
  166: [function (t, e) {
    "use strict";

    var i = t("./CCMacro");
    var n = t("./CCSys");
    var r = t("../event-manager");
    var s = cc.v2();
    var a = {
      _mousePressed: false,
      _isRegisterEvent: false,
      _preTouchPoint: cc.v2(0, 0),
      _prevMousePoint: cc.v2(0, 0),
      _preTouchPool: [],
      _preTouchPoolPointer: 0,
      _touches: [],
      _maxTouches: 10,
      _touchesIntegerDict: {},
      _touchPropagationAllowed: false,
      _indexBitsUsed: 0,
      _touchesCache: {},
      _touchCount: 0,
      _accelEnabled: false,
      _accelInterval: .2,
      _accelMinus: 1,
      _accelCurTime: 0,
      _acceleration: null,
      _accelDeviceEvent: null,
      _canvasBoundingRect: {
        left: 0,
        top: 0,
        adjustedLeft: 0,
        adjustedTop: 0,
        width: 0,
        height: 0
      },
      _getUnUsedIndex: function () {
        var t = cc.sys.now();
        var e = i.TOUCH_TIMEOUT;
        var n = this._indexBitsUsed;
        var r = -1;
        var s = this._touches;
        var a = this._touchesIntegerDict;
        var o = this._touchesCache;
        for (var c = 0; c < this._maxTouches; c++) {
          if (1 & n) {
            var l = s[c];
            if (l && t - l._lastModified > e) {
              var h = l.getID();
              delete a[h];
              delete o[h];
              this._touchCount--;
              if (-1 === r) {
                r = c;
                this._indexBitsUsed |= 1 << c;
              } else {
                this._indexBitsUsed &= ~(1 << c);
              }
            }
          } else if (-1 === r) {
            r = c;
            this._indexBitsUsed |= 1 << c;
          }
          n >>= 1;
        }
        return r;
      },
      _glView: null,
      _updateCanvasBoundingRect: function () {
        var t = cc.game.canvas;
        var e = this._canvasBoundingRect;
        var i = document.documentElement;
        var n = window.pageXOffset - i.clientLeft;
        var r = window.pageYOffset - i.clientTop;
        if (t.getBoundingClientRect) {
          var s = t.getBoundingClientRect();
          e.left = s.left + n;
          e.top = s.top + r;
          e.width = s.width;
          e.height = s.height;
        } else if (t instanceof HTMLCanvasElement) {
          e.left = n;
          e.top = r;
          e.width = t.width;
          e.height = t.height;
        } else {
          e.left = n;
          e.top = r;
          e.width = parseInt(t.style.width);
          e.height = parseInt(t.style.height);
        }
      },
      handleTouchesBegin: function (t) {
        var e;
        var i;
        var s = n.now();
        var a = [];
        var o = this._touches;
        var c = this._touchesIntegerDict;
        var l = this._touchesCache;
        var h = 0;
        for (var u = t.length; h < u; h++) {
          if (undefined === c[i = (e = t[h]).getID()]) {
            var f = this._getUnUsedIndex();
            if (-1 === f) {
              continue;
            }
            var d = new cc.Touch(e._point.x, e._point.y, i);
            d._setPrevPoint(e._prevPoint);
            d._lastModified = s;
            o[f] = d;
            c[i] = f;
            l[i] = d;
            this._touchCount++;
            a.push(d);
          }
        }
        if (a.length > 0) {
          this._glView._convertTouchesWithScale(a);
          var _ = new cc.Event.EventTouch(a);
          _._eventCode = cc.Event.EventTouch.BEGAN;
          r.dispatchEvent(_);
        }
      },
      handleTouchesMove: function (t) {
        var e;
        var i;
        var s = n.now();
        var a = [];
        var o = this._touches;
        var c = this._touchesIntegerDict;
        var l = 0;
        for (var h = t.length; l < h; l++) {
          if (undefined !== (i = c[(e = t[l]).getID()])) {
            var u = o[i];
            if (u) {
              u._setPoint(e._point);
              u._setPrevPoint(e._prevPoint);
              u._lastModified = s;
              a.push(u);
            }
          }
        }
        if (a.length > 0) {
          this._glView._convertTouchesWithScale(a);
          var f = new cc.Event.EventTouch(a);
          f._eventCode = cc.Event.EventTouch.MOVED;
          r.dispatchEvent(f);
        }
      },
      handleTouchesEnd: function (t) {
        var e = this.getSetOfTouchesEndOrCancel(t);
        if (e.length > 0) {
          this._glView._convertTouchesWithScale(e);
          var i = new cc.Event.EventTouch(e);
          i._eventCode = cc.Event.EventTouch.ENDED;
          r.dispatchEvent(i);
        }
        this._preTouchPool.length = 0;
      },
      handleTouchesCancel: function (t) {
        var e = this.getSetOfTouchesEndOrCancel(t);
        if (e.length > 0) {
          this._glView._convertTouchesWithScale(e);
          var i = new cc.Event.EventTouch(e);
          i._eventCode = cc.Event.EventTouch.CANCELED;
          r.dispatchEvent(i);
        }
        this._preTouchPool.length = 0;
      },
      getSetOfTouchesEndOrCancel: function (t) {
        var e;
        var i;
        var n;
        var r = [];
        var s = this._touches;
        var a = this._touchesIntegerDict;
        var o = this._touchesCache;
        var c = 0;
        for (var l = t.length; c < l; c++) {
          if (undefined !== (i = a[n = (e = t[c]).getID()])) {
            var h = s[i];
            if (h) {
              h._setPoint(e._point);
              h._setPrevPoint(e._prevPoint);
              r.push(h);
              delete a[n];
              delete o[n];
              this._touchCount--;
              this._indexBitsUsed &= ~(1 << i);
            }
          }
        }
        return r;
      },
      getGlobalTouchCount: function () {
        return this._touchCount;
      },
      getGlobalTouches: function () {
        return this._touchesCache;
      },
      getPreTouch: function (t) {
        var e = null;
        var i = this._preTouchPool;
        var n = t.getID();
        for (var r = i.length - 1; r >= 0; r--) {
          if (i[r].getID() === n) {
            e = i[r];
            break;
          }
        }
        if (!e) {
          e = t;
        }
        return e;
      },
      setPreTouch: function (t) {
        var e = false;
        var i = this._preTouchPool;
        var n = t.getID();
        for (var r = i.length - 1; r >= 0; r--) {
          if (i[r].getID() === n) {
            i[r] = t;
            e = true;
            break;
          }
        }
        if (!e) {
          if (i.length <= 50) {
            i.push(t);
          } else {
            i[this._preTouchPoolPointer] = t;
            this._preTouchPoolPointer = (this._preTouchPoolPointer + 1) % 50;
          }
        }
      },
      getTouchByXY: function (t, e, i) {
        var n = this._preTouchPoint;
        var r = this._glView.convertToLocationInView(t, e, i);
        var s = new cc.Touch(r.x, r.y, 0);
        s._setPrevPoint(n.x, n.y);
        n.x = r.x;
        n.y = r.y;
        return s;
      },
      getMouseEvent: function (t, e, i) {
        var n = this._prevMousePoint;
        var r = new cc.Event.EventMouse(i);
        r._setPrevCursor(n.x, n.y);
        n.x = t.x;
        n.y = t.y;
        this._glView._convertMouseToLocationInView(n, e);
        r.setLocation(n.x, n.y);
        return r;
      },
      getPointByEvent: function (t, e) {
        if (!(cc.sys.browserType !== cc.sys.BROWSER_TYPE_QQ && cc.sys.browserType !== cc.sys.BROWSER_TYPE_UC && cc.sys.browserType !== cc.sys.BROWSER_TYPE_SAFARI)) {
          this._updateCanvasBoundingRect();
        }
        return null != t.pageX ? {
          x: t.pageX,
          y: t.pageY
        } : (e.left -= document.body.scrollLeft, e.top -= document.body.scrollTop, {
          x: t.clientX,
          y: t.clientY
        });
      },
      getTouchesByEvent: function (t, e) {
        var i;
        var r;
        var a;
        var o = [];
        var c = this._glView;
        var l = this._preTouchPoint;
        var h = t.changedTouches.length;
        for (var u = 0; u < h; u++) {
          if (i = t.changedTouches[u]) {
            var f;
            f = n.BROWSER_TYPE_FIREFOX === n.browserType ? c.convertToLocationInView(i.pageX, i.pageY, e, s) : c.convertToLocationInView(i.clientX, i.clientY, e, s);
            if (null != i.identifier) {
              r = new cc.Touch(f.x, f.y, i.identifier);
              a = this.getPreTouch(r).getLocation();
              r._setPrevPoint(a.x, a.y);
              this.setPreTouch(r);
            } else {
              (r = new cc.Touch(f.x, f.y))._setPrevPoint(l.x, l.y);
            }
            l.x = f.x;
            l.y = f.y;
            o.push(r);
          }
        }
        return o;
      },
      allowTouchPropagation: function (t) {
        this._touchPropagationAllowed = t;
      },
      registerSystemEvent: function (t) {
        if (!this._isRegisterEvent) {
          this._glView = cc.view;
          var e = this;
          var i = this._canvasBoundingRect;
          window.addEventListener("resize", this._updateCanvasBoundingRect.bind(this));
          var s = n.isMobile;
          var a = "mouse" in n.capabilities;
          var o = "touches" in n.capabilities;
          if (a) {
            (function () {
              if (!s) {
                window.addEventListener("mousedown", function () {
                  e._mousePressed = true;
                }, false);
                window.addEventListener("mouseup", function (t) {
                  if (e._mousePressed) {
                    e._mousePressed = false;
                    var n = e.getPointByEvent(t, i);
                    if (!cc.rect(i.left, i.top, i.width, i.height).contains(n)) {
                      e.handleTouchesEnd([e.getTouchByXY(n.x, n.y, i)]);
                      var s = e.getMouseEvent(n, i, cc.Event.EventMouse.UP);
                      s.setButton(t.button);
                      r.dispatchEvent(s);
                    }
                  }
                }, false);
              }
              var n = cc.Event.EventMouse;
              var a = [!s && ["mousedown", n.DOWN, function (i, n, r, s) {
                e._mousePressed = true;
                e.handleTouchesBegin([e.getTouchByXY(r.x, r.y, s)]);
                t.focus();
              }], !s && ["mouseup", n.UP, function (t, i, n, r) {
                e._mousePressed = false;
                e.handleTouchesEnd([e.getTouchByXY(n.x, n.y, r)]);
              }], !s && ["mousemove", n.MOVE, function (t, i, n, r) {
                e.handleTouchesMove([e.getTouchByXY(n.x, n.y, r)]);
                if (!e._mousePressed) {
                  i.setButton(null);
                }
              }], ["mousewheel", n.SCROLL, function (t, e) {
                e.setScrollData(0, t.wheelDelta);
              }], ["DOMMouseScroll", n.SCROLL, function (t, e) {
                e.setScrollData(0, -120 * t.detail);
              }]];
              for (var o = 0; o < a.length; ++o) {
                var c = a[o];
                if (c) {
                  (function () {
                    var s = c[0];
                    var a = c[1];
                    var o = c[2];
                    t.addEventListener(s, function (t) {
                      var s = e.getPointByEvent(t, i);
                      var c = e.getMouseEvent(s, i, a);
                      var l = t.button;
                      if (a === n.MOVE) {
                        if (1 & t.buttons) {
                          l = n.BUTTON_LEFT;
                        } else if (2 & t.buttons) {
                          l = n.BUTTON_RIGHT;
                        } else if (4 & t.buttons) {
                          l = n.BUTTON_MIDDLE;
                        }
                      }
                      c.setButton(l);
                      o(t, c, s, i);
                      r.dispatchEvent(c);
                      t.stopPropagation();
                      t.preventDefault();
                    }, false);
                  })();
                }
              }
            })();
          }
          if (window.navigator.msPointerEnabled) {
            var c = {
              MSPointerDown: e.handleTouchesBegin,
              MSPointerMove: e.handleTouchesMove,
              MSPointerUp: e.handleTouchesEnd,
              MSPointerCancel: e.handleTouchesCancel
            };
            var l = function (n) {
              var r = c[n];
              t.addEventListener(n, function (t) {
                var n = document.documentElement;
                i.adjustedLeft = i.left - n.scrollLeft;
                i.adjustedTop = i.top - n.scrollTop;
                r.call(e, [e.getTouchByXY(t.clientX, t.clientY, i)]);
                t.stopPropagation();
              }, false);
            };
            for (var h in c) l(h);
          }
          if (o) {
            var u = {
              touchstart: function (i) {
                e.handleTouchesBegin(i);
                t.focus();
              },
              touchmove: function (t) {
                e.handleTouchesMove(t);
              },
              touchend: function (t) {
                e.handleTouchesEnd(t);
              },
              touchcancel: function (t) {
                e.handleTouchesCancel(t);
              }
            };
            var f = function (n) {
              var r = u[n];
              t.addEventListener(n, function (t) {
                if (t.changedTouches) {
                  var n = document.body;
                  i.adjustedLeft = i.left - (n.scrollLeft || window.scrollX || 0);
                  i.adjustedTop = i.top - (n.scrollTop || window.scrollY || 0);
                  r(e.getTouchesByEvent(t, i));
                  if (!e._touchPropagationAllowed) {
                    t.stopPropagation();
                    t.preventDefault();
                  }
                }
              }, false);
            };
            for (var d in u) f(d);
          }
          this._registerKeyboardEvent();
          this._isRegisterEvent = true;
        }
      },
      _registerKeyboardEvent: function () {},
      _registerAccelerometerEvent: function () {},
      update: function (t) {
        if (this._accelCurTime > this._accelInterval) {
          this._accelCurTime -= this._accelInterval;
          r.dispatchEvent(new cc.Event.EventAcceleration(this._acceleration));
        }
        this._accelCurTime += t;
      }
    };
    e.exports = cc.internal.inputManager = a;
  }, {
    "../event-manager": 133,
    "./CCMacro": 167,
    "./CCSys": 171
  }],
  167: [function (t, e) {
    "use strict";

    cc.macro = {
      RAD: Math.PI / 180,
      DEG: 180 / Math.PI,
      REPEAT_FOREVER: Number.MAX_VALUE - 1,
      FLT_EPSILON: 1.192092896e-7,
      MIN_ZINDEX: -32768,
      MAX_ZINDEX: 32767,
      ONE: 1,
      ZERO: 0,
      SRC_ALPHA: 770,
      SRC_ALPHA_SATURATE: 776,
      SRC_COLOR: 768,
      DST_ALPHA: 772,
      DST_COLOR: 774,
      ONE_MINUS_SRC_ALPHA: 771,
      ONE_MINUS_SRC_COLOR: 769,
      ONE_MINUS_DST_ALPHA: 773,
      ONE_MINUS_DST_COLOR: 775,
      ONE_MINUS_CONSTANT_ALPHA: 32772,
      ONE_MINUS_CONSTANT_COLOR: 32770,
      ORIENTATION_PORTRAIT: 1,
      ORIENTATION_LANDSCAPE: 2,
      ORIENTATION_AUTO: 3,
      DENSITYDPI_DEVICE: "device-dpi",
      DENSITYDPI_HIGH: "high-dpi",
      DENSITYDPI_MEDIUM: "medium-dpi",
      DENSITYDPI_LOW: "low-dpi",
      FIX_ARTIFACTS_BY_STRECHING_TEXEL_TMX: true,
      DIRECTOR_STATS_POSITION: cc.v2(0, 0),
      ENABLE_STACKABLE_ACTIONS: true,
      TOUCH_TIMEOUT: 5e3,
      BATCH_VERTEX_COUNT: 2e4,
      ENABLE_TILEDMAP_CULLING: true,
      ENABLE_TRANSPARENT_CANVAS: false,
      ENABLE_WEBGL_ANTIALIAS: false,
      ENABLE_CULLING: false,
      CLEANUP_IMAGE_CACHE: false,
      SHOW_MESH_WIREFRAME: false,
      SHOW_MESH_NORMAL: false,
      ENABLE_MULTI_TOUCH: true,
      ALLOW_IMAGE_BITMAP: !cc.sys.isMobile,
      ENABLE_NATIVE_TTF_RENDERER: true
    };
    Object.defineProperty(cc.macro, "ROTATE_ACTION_CCW", {
      set: function (t) {
        if (cc.RotateTo && cc.RotateBy) {
          cc.RotateTo._reverse = cc.RotateBy._reverse = t;
        }
      }
    });
    cc.macro.SUPPORT_TEXTURE_FORMATS = [".astc", ".pkm", ".pvr", ".webp", ".jpg", ".jpeg", ".bmp", ".png"];
    cc.macro.KEY = {
      none: 0,
      back: 6,
      menu: 18,
      backspace: 8,
      tab: 9,
      enter: 13,
      shift: 16,
      ctrl: 17,
      alt: 18,
      pause: 19,
      capslock: 20,
      escape: 27,
      space: 32,
      pageup: 33,
      pagedown: 34,
      end: 35,
      home: 36,
      left: 37,
      up: 38,
      right: 39,
      down: 40,
      select: 41,
      insert: 45,
      Delete: 46,
      0: 48,
      1: 49,
      2: 50,
      3: 51,
      4: 52,
      5: 53,
      6: 54,
      7: 55,
      8: 56,
      9: 57,
      a: 65,
      b: 66,
      c: 67,
      d: 68,
      e: 69,
      f: 70,
      g: 71,
      h: 72,
      i: 73,
      j: 74,
      k: 75,
      l: 76,
      m: 77,
      n: 78,
      o: 79,
      p: 80,
      q: 81,
      r: 82,
      s: 83,
      t: 84,
      u: 85,
      v: 86,
      w: 87,
      x: 88,
      y: 89,
      z: 90,
      num0: 96,
      num1: 97,
      num2: 98,
      num3: 99,
      num4: 100,
      num5: 101,
      num6: 102,
      num7: 103,
      num8: 104,
      num9: 105,
      "*": 106,
      "+": 107,
      "-": 109,
      numdel: 110,
      "/": 111,
      f1: 112,
      f2: 113,
      f3: 114,
      f4: 115,
      f5: 116,
      f6: 117,
      f7: 118,
      f8: 119,
      f9: 120,
      f10: 121,
      f11: 122,
      f12: 123,
      numlock: 144,
      scrolllock: 145,
      ";": 186,
      semicolon: 186,
      equal: 187,
      "=": 187,
      ",": 188,
      comma: 188,
      dash: 189,
      ".": 190,
      period: 190,
      forwardslash: 191,
      grave: 192,
      "[": 219,
      openbracket: 219,
      backslash: 220,
      "]": 221,
      closebracket: 221,
      quote: 222,
      dpadLeft: 1e3,
      dpadRight: 1001,
      dpadUp: 1003,
      dpadDown: 1004,
      dpadCenter: 1005
    };
    cc.macro.ImageFormat = cc.Enum({
      JPG: 0,
      PNG: 1,
      TIFF: 2,
      WEBP: 3,
      PVR: 4,
      ETC: 5,
      S3TC: 6,
      ATITC: 7,
      TGA: 8,
      RAWDATA: 9,
      UNKNOWN: 10
    });
    cc.macro.BlendFactor = cc.Enum({
      ONE: 1,
      ZERO: 0,
      SRC_ALPHA: 770,
      SRC_COLOR: 768,
      DST_ALPHA: 772,
      DST_COLOR: 774,
      ONE_MINUS_SRC_ALPHA: 771,
      ONE_MINUS_SRC_COLOR: 769,
      ONE_MINUS_DST_ALPHA: 773,
      ONE_MINUS_DST_COLOR: 775
    });
    cc.macro.TextAlignment = cc.Enum({
      LEFT: 0,
      CENTER: 1,
      RIGHT: 2
    });
    cc.macro.VerticalTextAlignment = cc.Enum({
      TOP: 0,
      CENTER: 1,
      BOTTOM: 2
    });
    e.exports = cc.macro;
  }, {}],
  168: [function (t, e) {
    "use strict";

    var i = t("./js");
    var n = t("./CCClass");
    function s() {
      this._name = "";
      this._objFlags = 0;
    }
    n.fastDefine("cc.Object", s, {
      _name: "",
      _objFlags: 0
    });
    i.value(s, "Flags", {
      Destroyed: 1,
      DontSave: 8,
      EditorOnly: 16,
      Dirty: 32,
      DontDestroy: 64,
      PersistentMask: -4192741,
      Destroying: 128,
      Deactivating: 256,
      LockedInEditor: 512,
      HideInHierarchy: 1024,
      IsPreloadStarted: 8192,
      IsOnLoadStarted: 32768,
      IsOnLoadCalled: 16384,
      IsOnEnableCalled: 2048,
      IsStartCalled: 65536,
      IsEditorOnEnableCalled: 4096,
      IsPositionLocked: 2097152,
      IsRotationLocked: 131072,
      IsScaleLocked: 262144,
      IsAnchorLocked: 524288,
      IsSizeLocked: 1048576
    });
    var a = [];
    i.value(s, "_deferredDestroy", function () {
      var t = a.length;
      for (var e = 0; e < t; ++e) {
        var i = a[e];
        if (!(i._objFlags & 1)) {
          i._destroyImmediate();
        }
      }
      if (t === a.length) {
        a.length = 0;
      } else {
        a.splice(0, t);
      }
    });
    var o = s.prototype;
    function c(t, e) {
      var i;
      var r = t instanceof cc._BaseNode || t instanceof cc.Component;
      var s = r ? "_id" : null;
      var a = {};
      for (i in t) if (t.hasOwnProperty(i)) {
        if (i === s) {
          continue;
        }
        switch (typeof t[i]) {
          case "string":
            a[i] = "";
            break;
          case "object":
          case "function":
            a[i] = null;
        }
      }
      if (cc.Class._isCCClass(e)) {
        var o = cc.Class.Attr.getClassAttrs(e);
        var c = e.__props__;
        for (var l = 0; l < c.length; l++) {
          var h = (i = c[l]) + cc.Class.Attr.DELIMETER + "default";
          if (h in o) {
            if (r && "_id" === i) {
              continue;
            }
            switch (typeof o[h]) {
              case "string":
                a[i] = "";
                break;
              case "object":
              case "function":
                a[i] = null;
                break;
              case "undefined":
                a[i] = undefined;
            }
          }
        }
      }
      var u = "";
      for (i in a) {
        var f;
        f = n.IDENTIFIER_RE.test(i) ? "o." + i + "=" : "o[" + n.escapeForJS(i) + "]=";
        var d = a[i];
        if ("" === d) {
          d = "\"\"";
        }
        u += f + d + ";";
      }
      return Function("o", u);
    }
    i.getset(o, "name", function () {
      return this._name;
    }, function (t) {
      this._name = t;
    }, true);
    i.get(o, "isValid", function () {
      return !(this._objFlags & 1);
    }, true);
    o.destroy = function () {
      return !(this._objFlags & 1 || 4 & this._objFlags || (this._objFlags |= 4, a.push(this), 0));
    };
    o._destruct = function () {
      var t = this.constructor;
      var e = t.__destruct__;
      if (!e) {
        e = c(this, t);
        i.value(t, "__destruct__", e, true);
      }
      e(this);
    };
    o._onPreDestroy = null;
    o._destroyImmediate = function () {
      if (!(this._objFlags & 1)) {
        if (this._onPreDestroy) {
          this._objFlags |= 128;
          this._onPreDestroy();
        }
        this._destruct();
        this._objFlags |= 1;
      }
    };
    o._deserialize = null;
    cc.isValid = function (t, e) {
      return "object" == typeof t ? !(!t || t._objFlags & (e ? 5 : 1)) : undefined !== t;
    };
    cc.Object = e.exports = s;
  }, {
    "./CCClass": 162,
    "./js": 183
  }],
  169: [function (t, e) {
    "use strict";

    var i = t("../platform/js");
    cc.SAXParser = function () {
      if (window.DOMParser) {
        this._isSupportDOMParser = true;
        this._parser = new DOMParser();
      } else {
        this._isSupportDOMParser = false;
        this._parser = null;
      }
    };
    cc.SAXParser.prototype = {
      constructor: cc.SAXParser,
      parse: function (t) {
        return this._parseXML(t);
      },
      _parseXML: function (t) {
        var e;
        if (this._isSupportDOMParser) {
          e = this._parser.parseFromString(t, "text/xml");
        } else {
          (e = new ActiveXObject("Microsoft.XMLDOM")).async = "false";
          e.loadXML(t);
        }
        return e;
      }
    };
    cc.PlistParser = function () {
      cc.SAXParser.call(this);
    };
    i.extend(cc.PlistParser, cc.SAXParser);
    i.mixin(cc.PlistParser.prototype, {
      parse: function (t) {
        var e = this._parseXML(t);
        var i = e.documentElement;
        if ("plist" !== i.tagName) {
          return {};
        }
        var n = null;
        var r = 0;
        for (var s = i.childNodes.length; r < s && 1 !== (n = i.childNodes[r]).nodeType; r++) {
          ;
        }
        e = null;
        return this._parseNode(n);
      },
      _parseNode: function (t) {
        var e = null;
        var i = t.tagName;
        if ("dict" === i) {
          e = this._parseDict(t);
        } else if ("array" === i) {
          e = this._parseArray(t);
        } else if ("string" === i) {
          if (1 === t.childNodes.length) {
            e = t.firstChild.nodeValue;
          } else {
            e = "";
            for (var n = 0; n < t.childNodes.length; n++) {
              e += t.childNodes[n].nodeValue;
            }
          }
        } else if ("false" === i) {
          e = false;
        } else if ("true" === i) {
          e = true;
        } else if ("real" === i) {
          e = parseFloat(t.firstChild.nodeValue);
        } else if ("integer" === i) {
          e = parseInt(t.firstChild.nodeValue, 10);
        }
        return e;
      },
      _parseArray: function (t) {
        var e = [];
        var i = 0;
        for (var n = t.childNodes.length; i < n; i++) {
          var r = t.childNodes[i];
          if (1 === r.nodeType) {
            e.push(this._parseNode(r));
          }
        }
        return e;
      },
      _parseDict: function (t) {
        var e = {};
        var i = null;
        var n = 0;
        for (var r = t.childNodes.length; n < r; n++) {
          var s = t.childNodes[n];
          if (1 === s.nodeType) {
            if ("key" === s.tagName) {
              i = s.firstChild.nodeValue;
            } else {
              e[i] = this._parseNode(s);
            }
          }
        }
        return e;
      }
    });
    cc.saxParser = new cc.SAXParser();
    cc.plistParser = new cc.PlistParser();
    e.exports = {
      saxParser: cc.saxParser,
      plistParser: cc.plistParser
    };
  }, {
    "../platform/js": 183
  }],
  170: [function () {
    "use strict";

    cc.screen = {
      _supportsFullScreen: false,
      _onfullscreenchange: null,
      _onfullscreenerror: null,
      _preOnFullScreenChange: null,
      _preOnFullScreenError: null,
      _preOnTouch: null,
      _touchEvent: "",
      _fn: null,
      _fnMap: [["requestFullscreen", "exitFullscreen", "fullscreenchange", "fullscreenEnabled", "fullscreenElement", "fullscreenerror"], ["requestFullScreen", "exitFullScreen", "fullScreenchange", "fullScreenEnabled", "fullScreenElement", "fullscreenerror"], ["webkitRequestFullScreen", "webkitCancelFullScreen", "webkitfullscreenchange", "webkitIsFullScreen", "webkitCurrentFullScreenElement", "webkitfullscreenerror"], ["mozRequestFullScreen", "mozCancelFullScreen", "mozfullscreenchange", "mozFullScreen", "mozFullScreenElement", "mozfullscreenerror"], ["msRequestFullscreen", "msExitFullscreen", "MSFullscreenChange", "msFullscreenEnabled", "msFullscreenElement", "msfullscreenerror"]],
      init: function () {
        this._fn = {};
        var t;
        var e;
        var i;
        var n;
        var r = this._fnMap;
        t = 0;
        for (e = r.length; t < e; t++) {
          if ((i = r[t]) && undefined !== document[i[1]]) {
            t = 0;
            for (n = i.length; t < n; t++) {
              this._fn[r[0][t]] = i[t];
            }
            break;
          }
        }
        this._supportsFullScreen = undefined !== this._fn.requestFullscreen;
        this._touchEvent = "ontouchend" in window ? "touchend" : "mousedown";
      },
      fullScreen: function () {
        return !!this._supportsFullScreen && !!(document[this._fn.fullscreenElement] || document[this._fn.webkitFullscreenElement] || document[this._fn.mozFullScreenElement]);
      },
      requestFullScreen: function (t, e, i) {
        if (t && "video" === t.tagName.toLowerCase()) {
          if (cc.sys.os === cc.sys.OS_IOS && cc.sys.isBrowser && t.readyState > 0) {
            return void (t.webkitEnterFullscreen && t.webkitEnterFullscreen());
          }
          t.setAttribute("x5-video-player-fullscreen", "true");
        }
        if (this._supportsFullScreen) {
          t = t || document.documentElement;
          if (e) {
            var n = this._fn.fullscreenchange;
            if (this._onfullscreenchange) {
              document.removeEventListener(n, this._onfullscreenchange);
            }
            this._onfullscreenchange = e;
            document.addEventListener(n, e, false);
          }
          if (i) {
            var r = this._fn.fullscreenerror;
            if (this._onfullscreenerror) {
              document.removeEventListener(r, this._onfullscreenerror);
            }
            this._onfullscreenerror = i;
            document.addEventListener(r, i, {
              once: true
            });
          }
          var s = t[this._fn.requestFullscreen]();
          if (undefined === document[this._fn.fullscreenerror] && window.Promise && s instanceof Promise) {
            s.catch(function () {});
          }
        }
      },
      exitFullScreen: function (t) {
        if (t && "video" === t.tagName.toLowerCase()) {
          if (cc.sys.os === cc.sys.OS_IOS && cc.sys.isBrowser) {
            return void (t.webkitExitFullscreen && t.webkitExitFullscreen());
          }
          t.setAttribute("x5-video-player-fullscreen", "false");
        }
        return !this._supportsFullScreen || document[this._fn.exitFullscreen]();
      },
      autoFullScreen: function (t, e) {
        t = t || document.body;
        this._ensureFullScreen(t, e);
        this.requestFullScreen(t, e);
      },
      disableAutoFullScreen: function (t) {
        var e = cc.game.canvas || t;
        var i = this._touchEvent;
        if (this._preOnTouch) {
          e.removeEventListener(i, this._preOnTouch);
          this._preOnTouch = null;
        }
      },
      _ensureFullScreen: function (t, e) {
        var i = this;
        var n = cc.game.canvas || t;
        var r = this._fn.fullscreenerror;
        var s = this._touchEvent;
        function a() {
          i._preOnFullScreenError = null;
          if (i._preOnTouch) {
            n.removeEventListener(s, i._preOnTouch);
          }
          i._preOnTouch = function () {
            i._preOnTouch = null;
            i.requestFullScreen(t, e);
          };
          n.addEventListener(s, i._preOnTouch, {
            once: true
          });
        }
        if (this._preOnFullScreenError) {
          t.removeEventListener(r, this._preOnFullScreenError);
        }
        this._preOnFullScreenError = a;
        t.addEventListener(r, a, {
          once: true
        });
      }
    };
    cc.screen.init();
  }, {}],
  171: [function (t, e) {
    "use strict";

    t("../CCDebug");
    var i;
    var n;
    var r = "undefined" == typeof window ? global : window;
    var s = cc && cc.sys ? cc.sys : function () {
      cc.sys = {};
      var t;
      var e = cc.sys;
      e.LANGUAGE_ENGLISH = "en";
      e.LANGUAGE_CHINESE = "zh";
      e.LANGUAGE_FRENCH = "fr";
      e.LANGUAGE_ITALIAN = "it";
      e.LANGUAGE_GERMAN = "de";
      e.LANGUAGE_SPANISH = "es";
      e.LANGUAGE_DUTCH = "du";
      e.LANGUAGE_RUSSIAN = "ru";
      e.LANGUAGE_KOREAN = "ko";
      e.LANGUAGE_JAPANESE = "ja";
      e.LANGUAGE_HUNGARIAN = "hu";
      e.LANGUAGE_PORTUGUESE = "pt";
      e.LANGUAGE_ARABIC = "ar";
      e.LANGUAGE_NORWEGIAN = "no";
      e.LANGUAGE_POLISH = "pl";
      e.LANGUAGE_TURKISH = "tr";
      e.LANGUAGE_UKRAINIAN = "uk";
      e.LANGUAGE_ROMANIAN = "ro";
      e.LANGUAGE_BULGARIAN = "bg";
      e.LANGUAGE_UNKNOWN = "unknown";
      e.OS_OPENHARMONY = "OpenHarmony";
      e.OS_IOS = "iOS";
      e.OS_ANDROID = "Android";
      e.OS_WINDOWS = "Windows";
      e.OS_LINUX = "Linux";
      e.OS_OSX = "OS X";
      e.OS_WINRT = "WINRT";
      e.OS_UNKNOWN = "Unknown";
      e.UNKNOWN = -1;
      e.WIN32 = 0;
      e.LINUX = 1;
      e.MACOS = 2;
      e.ANDROID = 3;
      e.IPHONE = 4;
      e.IPAD = 5;
      e.BLACKBERRY = 6;
      e.NACL = 7;
      e.EMSCRIPTEN = 8;
      e.TIZEN = 9;
      e.WINRT = 10;
      e.WP8 = 11;
      e.OPENHARMONY = 12;
      e.MOBILE_BROWSER = 100;
      e.DESKTOP_BROWSER = 101;
      e.EDITOR_PAGE = 102;
      e.EDITOR_CORE = 103;
      e.WECHAT_GAME = 104;
      e.QQ_PLAY = 105;
      e.FB_PLAYABLE_ADS = 106;
      e.BAIDU_GAME = 107;
      e.VIVO_GAME = 108;
      e.OPPO_GAME = 109;
      e.HUAWEI_GAME = 110;
      e.XIAOMI_GAME = 111;
      e.JKW_GAME = 112;
      e.ALIPAY_GAME = 113;
      e.WECHAT_GAME_SUB = 114;
      e.BAIDU_GAME_SUB = 115;
      e.QTT_GAME = 116;
      e.BYTEDANCE_GAME = 117;
      e.BYTEDANCE_GAME_SUB = 118;
      e.LINKSURE = 119;
      e.TAOBAO = 120;
      e.TAOBAO_MINIGAME = 121;
      e.BROWSER_TYPE_WECHAT = "wechat";
      e.BROWSER_TYPE_ANDROID = "androidbrowser";
      e.BROWSER_TYPE_IE = "ie";
      e.BROWSER_TYPE_EDGE = "edge";
      e.BROWSER_TYPE_QQ = "qqbrowser";
      e.BROWSER_TYPE_MOBILE_QQ = "mqqbrowser";
      e.BROWSER_TYPE_UC = "ucbrowser";
      e.BROWSER_TYPE_UCBS = "ucbs";
      e.BROWSER_TYPE_360 = "360browser";
      e.BROWSER_TYPE_BAIDU_APP = "baiduboxapp";
      e.BROWSER_TYPE_BAIDU = "baidubrowser";
      e.BROWSER_TYPE_MAXTHON = "maxthon";
      e.BROWSER_TYPE_OPERA = "opera";
      e.BROWSER_TYPE_OUPENG = "oupeng";
      e.BROWSER_TYPE_MIUI = "miuibrowser";
      e.BROWSER_TYPE_FIREFOX = "firefox";
      e.BROWSER_TYPE_SAFARI = "safari";
      e.BROWSER_TYPE_CHROME = "chrome";
      e.BROWSER_TYPE_LIEBAO = "liebao";
      e.BROWSER_TYPE_QZONE = "qzone";
      e.BROWSER_TYPE_SOUGOU = "sogou";
      e.BROWSER_TYPE_HUAWEI = "huawei";
      e.BROWSER_TYPE_UNKNOWN = "unknown";
      e.isNative = false;
      e.isBrowser = "object" == typeof window && "object" == typeof document && true;
      e.glExtension = function (t) {
        return !!cc.renderer.device.ext(t);
      };
      e.getMaxJointMatrixSize = function () {
        if (!e._maxJointMatrixSize) {
          var t = cc.game._renderContext;
          var i = Math.floor(t.getParameter(t.MAX_VERTEX_UNIFORM_VECTORS) / 4) - 10;
          e._maxJointMatrixSize = i < 50 ? 0 : 50;
        }
        return e._maxJointMatrixSize;
      };
      e.getSafeAreaRect = function () {
        var t = cc.view.getVisibleSize();
        return cc.rect(0, 0, t.width, t.height);
      };
      if (r.__globalAdapter && r.__globalAdapter.adaptSys) {
        r.__globalAdapter.adaptSys(e);
      } else {
        var a = window.navigator;
        var c = document.documentElement;
        var l = a.userAgent.toLowerCase();
        var h = a.language || a.browserLanguage;
        if (h) {
          h = h.toLowerCase();
          e.languageCode = h;
          e.language = h.split("-")[0];
        } else {
          e.languageCode = undefined;
          e.language = e.LANGUAGE_ENGLISH;
        }
        var u = false;
        var f = false;
        var d = "";
        var _ = 0;
        var p = /\([^)]*android +(\d+(?:\.\d+){0,2})/.exec(l) || /android +(\d+(?:\.\d+){0,2})/.exec(a.platform);
        if (p) {
          u = true;
          d = p[1] || "";
          _ = parseInt(d) || 0;
        }
        if (p = /\((ipad|iphone|ipod)[^)]+os (\d+(?:_\d+){0,2})/.exec(l)) {
          f = true;
          d = p[2] || "";
          _ = parseInt(d) || 0;
        } else if (/(iPhone|iPad|iPod)/.exec(a.platform) || /iphone|ipad|ipod/.test(l) || ("MacIntel" === a.platform || /mac os/.test(l)) && a.maxTouchPoints && a.maxTouchPoints > 2) {
          f = true;
          d = "";
          _ = 0;
        }
        var v = e.OS_UNKNOWN;
        if (f) {
          v = e.OS_IOS;
        } else if (u) {
          v = e.OS_ANDROID;
        } else if (-1 !== l.indexOf("Win")) {
          v = e.OS_WINDOWS;
        } else if (-1 !== l.indexOf("Mac")) {
          v = e.OS_OSX;
        } else if (-1 !== l.indexOf("Linux")) {
          v = e.OS_LINUX;
        }
        e.os = v;
        e.osVersion = d;
        e.osMainVersion = _;
        var g = false;
        if (v === e.OS_IOS && "function" == typeof BigInt) {
          g = true;
        } else if (v === e.OS_OSX) {
          g = (p = /Version\/(\d+)/.exec(l)) && parseInt(p[1]) >= 14;
        }
        e.isSafari14 = g;
        e.isMobile = f || /mobile|android|iphone|ipad/.test(l);
        if ("undefined" != typeof FbPlayableAd) {
          e.platform = e.FB_PLAYABLE_ADS;
        } else {
          e.platform = e.isMobile ? e.MOBILE_BROWSER : e.DESKTOP_BROWSER;
        }
        e.browserType = e.BROWSER_TYPE_UNKNOWN;
        (function () {
          var t = /mqqbrowser|micromessenger|qqbrowser|sogou|qzone|liebao|maxthon|ucbs|360 aphone|360browser|baiduboxapp|baidubrowser|maxthon|mxbrowser|miuibrowser/i.exec(l) || /qq|ucbrowser|ubrowser|edge|HuaweiBrowser/i.exec(l) || /chrome|safari|firefox|trident|opera|opr\/|oupeng/i.exec(l);
          var i = t ? t[0].toLowerCase() : e.BROWSER_TYPE_UNKNOWN;
          if ("safari" === i && u) {
            i = e.BROWSER_TYPE_ANDROID;
          } else if ("qq" === i && l.match(/android.*applewebkit/i)) {
            i = e.BROWSER_TYPE_ANDROID;
          }
          var n = {
            micromessenger: e.BROWSER_TYPE_WECHAT,
            trident: e.BROWSER_TYPE_IE,
            edge: e.BROWSER_TYPE_EDGE,
            "360 aphone": e.BROWSER_TYPE_360,
            mxbrowser: e.BROWSER_TYPE_MAXTHON,
            "opr/": e.BROWSER_TYPE_OPERA,
            ubrowser: e.BROWSER_TYPE_UC,
            huaweibrowser: e.BROWSER_TYPE_HUAWEI
          };
          if (!("qqbrowser" !== i && "mqqbrowser" !== i)) {
            if (l.match(/wechat|micromessenger/i)) {
              i = e.BROWSER_TYPE_WECHAT;
            }
          }
          e.browserType = n[i] || i;
        })();
        e.browserVersion = "";
        if (!(t = l.match(/(mqqbrowser|micromessenger|qqbrowser|sogou|qzone|liebao|maxthon|uc|ucbs|360 aphone|360|baiduboxapp|baidu|maxthon|mxbrowser|miui(?:.hybrid)?)(mobile)?(browser)?\/?([\d.]+)/i))) {
          t = l.match(/(qq|chrome|safari|firefox|trident|opera|opr\/|oupeng)(mobile)?(browser)?\/?([\d.]+)/i);
        }
        e.browserVersion = t ? t[4] : "";
        var m = window.innerWidth || document.documentElement.clientWidth;
        var y = window.innerHeight || document.documentElement.clientHeight;
        var T = window.devicePixelRatio || 1;
        e.windowPixelResolution = {
          width: T * m,
          height: T * y
        };
        e._checkWebGLRenderMode = function () {
          if (cc.game.renderType !== cc.game.RENDER_TYPE_WEBGL) {
            throw Error(cc.debug.getError(5202));
          }
        };
        var E;
        var A = document.createElement("canvas");
        try {
          var x = e.localStorage = window.localStorage;
          x.setItem("storage", "");
          x.removeItem("storage");
          x = null;
        } catch (I) {
          var C = function () {};
          e.localStorage = {
            getItem: C,
            setItem: C,
            removeItem: C,
            clear: C
          };
        }
        E = !(!r.Editor || !r.Editor.isBuilder) || !!(r.shell && r.shell.environment && r.shell.environment.webpSupported);
        var b = !!A.getContext("2d");
        var S = false;
        if (window.WebGLRenderingContext) {
          S = true;
        }
        var R;
        var M = e.capabilities = {
          canvas: b,
          opengl: S,
          webp: E,
          imageBitmap: false
        };
        if ("undefined" != typeof createImageBitmap && "undefined" != typeof Blob) {
          A.width = A.height = 2;
          createImageBitmap(A, {}).then(function (t) {
            M.imageBitmap = true;
            if (t.close) {
              t.close();
            }
          }).catch(function () {});
        }
        if (undefined !== c.ontouchstart || undefined !== document.ontouchstart || a.msPointerEnabled || "string" == typeof __wxjs_environment && "miniprogram" === __wxjs_environment) {
          M.touches = true;
        }
        if (undefined !== c.onmouseup) {
          M.mouse = true;
        }
        if (undefined !== c.onkeyup) {
          M.keyboard = true;
        }
        if (window.DeviceMotionEvent || window.DeviceOrientationEvent) {
          M.accelerometer = true;
        }
        e.browserVersion;
        R = {
          ONLY_ONE: false,
          get WEB_AUDIO() {
            return undefined !== n ? n : (undefined === (n = r.shell && r.shell.environment && r.shell.environment.audioSupported) && (n = !!(window.AudioContext || window.webkitAudioContext || window.mozAudioContext)), n);
          },
          DELAY_CREATE_CTX: false,
          get context() {
            if (undefined !== n && false !== n) {
              if (undefined !== i) {
                return i;
              }
              try {
                i = r.shell && r.shell.environment && r.shell.environment.audioContext ? r.shell.environment.audioContext : new (window.AudioContext || window.webkitAudioContext || window.mozAudioContext)();
              } catch (t) {
                n = false;
              }
              return i;
            }
          }
        };
        if (e.os === e.OS_IOS) {
          R.USE_LOADER_EVENT = "loadedmetadata";
        }
        if (e.browserType === e.BROWSER_TYPE_FIREFOX) {
          R.USE_LOADER_EVENT = "canplay";
        }
        if (e.os === e.OS_ANDROID && e.browserType === e.BROWSER_TYPE_UC) {
          R.ONE_SOURCE = true;
        }
        var w = [];
        (function () {
          var t = document.createElement("audio");
          if (t.canPlayType) {
            if (t.canPlayType("audio/ogg; codecs=\"vorbis\"")) {
              w.push(".ogg");
            }
            var e = t.canPlayType("audio/mpeg");
            if (e) {
              w.push(".mpeg");
            }
            if (e || t.canPlayType("audio/mp3")) {
              w.push(".mp3");
            }
            if (t.canPlayType("audio/wav; codecs=\"1\"")) {
              w.push(".wav");
            }
            if (t.canPlayType("audio/mp4")) {
              w.push(".mp4");
            }
            if (t.canPlayType("audio/x-m4a")) {
              w.push(".m4a");
            }
          }
        })();
        R.format = w;
        e.__audioSupport = R;
      }
      e.NetworkType = {
        NONE: 0,
        LAN: 1,
        WWAN: 2
      };
      e.getNetworkType = function () {
        return e.NetworkType.LAN;
      };
      e.getBatteryLevel = function () {
        return 1;
      };
      e.garbageCollect = function () {};
      e.restartVM = function () {};
      e.isObjectValid = function (t) {
        return !!t;
      };
      e.dump = function () {
        this.isMobile;
        this.language;
        this.browserType;
        this.browserVersion;
        JSON.stringify(this.capabilities);
        this.os;
        this.osVersion;
        this.platform;
        cc.game.renderType;
        cc.game.RENDER_TYPE_WEBGL;
      };
      e.openURL = function (t) {
        window.open(t);
      };
      e.now = function () {
        return Date.now ? Date.now() : +new Date();
      };
      return e;
    }();
    e.exports = s;
  }, {
    "../CCDebug": 23
  }],
  172: [function (t, e) {
    "use strict";

    var i = t("../event/event-target");
    var n = t("../platform/js");
    var r = t("../renderer");
    t("../platform/CCClass");
    var s = {
      init: function () {
        this.html = document.getElementsByTagName("html")[0];
      },
      availWidth: function (t) {
        return t && t !== this.html ? t.clientWidth : window.innerWidth;
      },
      availHeight: function (t) {
        return t && t !== this.html ? t.clientHeight : window.innerHeight;
      },
      meta: {
        width: "device-width"
      },
      adaptationType: cc.sys.browserType
    };
    if (cc.sys.os === cc.sys.OS_IOS) {
      s.adaptationType = cc.sys.BROWSER_TYPE_SAFARI;
    }
    switch (s.adaptationType) {
      case cc.sys.BROWSER_TYPE_SAFARI:
      case cc.sys.BROWSER_TYPE_SOUGOU:
      case cc.sys.BROWSER_TYPE_UC:
        s.meta["minimal-ui"] = "true";
        s.availWidth = function (t) {
          return t.clientWidth;
        };
        s.availHeight = function (t) {
          return t.clientHeight;
        };
    }
    var a = null;
    var o = function () {
      i.call(this);
      var t = this;
      var e = cc.ContainerStrategy;
      var n = cc.ContentStrategy;
      s.init(this);
      t._frameSize = cc.size(0, 0);
      t._designResolutionSize = cc.size(0, 0);
      t._originalDesignResolutionSize = cc.size(0, 0);
      t._scaleX = 1;
      t._scaleY = 1;
      t._viewportRect = cc.rect(0, 0, 0, 0);
      t._visibleRect = cc.rect(0, 0, 0, 0);
      t._autoFullScreen = false;
      t._devicePixelRatio = 1;
      t._maxPixelRatio = 2;
      t._retinaEnabled = false;
      t._resizeCallback = null;
      t._resizing = false;
      t._resizeWithBrowserSize = false;
      t._orientationChanging = true;
      t._isRotated = false;
      t._orientation = cc.macro.ORIENTATION_AUTO;
      t._isAdjustViewport = true;
      t._antiAliasEnabled = false;
      t._resolutionPolicy = null;
      t._rpExactFit = new cc.ResolutionPolicy(e.EQUAL_TO_FRAME, n.EXACT_FIT);
      t._rpShowAll = new cc.ResolutionPolicy(e.PROPORTION_TO_FRAME, n.NO_BORDER);
      t._rpNoBorder = new cc.ResolutionPolicy(e.EQUAL_TO_FRAME, n.NO_BORDER);
      t._rpFixedHeight = new cc.ResolutionPolicy(e.EQUAL_TO_FRAME, n.FIXED_HEIGHT);
      t._rpFixedWidth = new cc.ResolutionPolicy(e.EQUAL_TO_FRAME, n.FIXED_WIDTH);
      cc.game.once(cc.game.EVENT_ENGINE_INITED, this.init, this);
    };
    cc.js.extend(o, i);
    cc.js.mixin(o.prototype, {
      init: function () {
        this._initFrameSize();
        var t = cc.game.canvas.width;
        var e = cc.game.canvas.height;
        this._designResolutionSize.width = t;
        this._designResolutionSize.height = e;
        this._originalDesignResolutionSize.width = t;
        this._originalDesignResolutionSize.height = e;
        this._viewportRect.width = t;
        this._viewportRect.height = e;
        this._visibleRect.width = t;
        this._visibleRect.height = e;
        cc.winSize.width = this._visibleRect.width;
        cc.winSize.height = this._visibleRect.height;
        if (cc.visibleRect) {
          cc.visibleRect.init(this._visibleRect);
        }
      },
      _resizeEvent: function (t) {
        var e;
        e = this.setDesignResolutionSize ? this : cc.view;
        var i = cc.sys;
        if (i.browserType !== i.BROWSER_TYPE_UC || i.os !== i.OS_IOS) {
          var n = e._frameSize.width;
          var r = e._frameSize.height;
          var s = e._isRotated;
          if (cc.sys.isMobile) {
            var a = cc.game.container.style;
            var o = a.margin;
            a.margin = "0";
            a.display = "none";
            e._initFrameSize();
            a.margin = o;
            a.display = "block";
          } else {
            e._initFrameSize();
          }
          if (true === t || e._isRotated !== s || e._frameSize.width !== n || e._frameSize.height !== r) {
            var c = e._originalDesignResolutionSize.width;
            var l = e._originalDesignResolutionSize.height;
            e._resizing = true;
            if (c > 0) {
              e.setDesignResolutionSize(c, l, e._resolutionPolicy);
            }
            e._resizing = false;
            e.emit("canvas-resize");
            if (e._resizeCallback) {
              e._resizeCallback.call();
            }
          }
        } else {
          setTimeout(function () {
            e._resizeEvent(t);
          }, 0);
        }
      },
      _orientationChange: function () {
        cc.view._orientationChanging = true;
        cc.view._resizeEvent(true);
        if (cc.sys.browserType === cc.sys.BROWSER_TYPE_SAFARI && cc.sys.isMobile) {
          setTimeout(function () {
            if (window.innerHeight > window.innerWidth) {
              window.scrollTo(0, 1);
            }
          }, 500);
        }
      },
      _resize: function () {
        cc.view._resizeEvent(false);
      },
      resizeWithBrowserSize: function (t) {
        if (t) {
          if (!this._resizeWithBrowserSize) {
            this._resizeWithBrowserSize = true;
            window.addEventListener("resize", this._resize);
            window.addEventListener("orientationchange", this._orientationChange);
          }
        } else if (this._resizeWithBrowserSize) {
          this._resizeWithBrowserSize = false;
          window.removeEventListener("resize", this._resize);
          window.removeEventListener("orientationchange", this._orientationChange);
        }
      },
      setResizeCallback: function (t) {
        if (!("function" != typeof t && null != t)) {
          this._resizeCallback = t;
        }
      },
      setOrientation: function (t) {
        if ((t &= cc.macro.ORIENTATION_AUTO) && this._orientation !== t) {
          this._orientation = t;
          var e = this._originalDesignResolutionSize.width;
          var i = this._originalDesignResolutionSize.height;
          this.setDesignResolutionSize(e, i, this._resolutionPolicy);
        }
      },
      _initFrameSize: function () {
        var t = this._frameSize;
        var e = cc.game.frame && cc.game.frame !== this.html ? cc.game.frame.clientWidth : window.innerWidth;
        var i = cc.game.frame && cc.game.frame !== this.html ? cc.game.frame.clientHeight : window.innerHeight;
        var n = e >= i;
        if (!cc.sys.isMobile || n && this._orientation & cc.macro.ORIENTATION_LANDSCAPE || !n && this._orientation & cc.macro.ORIENTATION_PORTRAIT) {
          t.width = e;
          t.height = i;
          cc.game.container.style["-webkit-transform"] = "rotate(0deg)";
          cc.game.container.style.transform = "rotate(0deg)";
          this._isRotated = false;
        } else {
          t.width = i;
          t.height = e;
          cc.game.container.style["-webkit-transform"] = "rotate(90deg)";
          cc.game.container.style.transform = "rotate(90deg)";
          cc.game.container.style["-webkit-transform-origin"] = "0px 0px 0px";
          cc.game.container.style.transformOrigin = "0px 0px 0px";
          this._isRotated = true;
        }
        if (this._orientationChanging) {
          setTimeout(function () {
            cc.view._orientationChanging = false;
          }, 1e3);
        }
      },
      _setViewportMeta: function (t, e) {
        var i = document.getElementById("cocosMetaElement");
        if (i && e) {
          document.head.removeChild(i);
        }
        var n;
        var r;
        var s;
        var a = document.getElementsByName("viewport");
        var o = a ? a[0] : null;
        n = o ? o.content : "";
        (i = i || document.createElement("meta")).id = "cocosMetaElement";
        i.name = "viewport";
        i.content = "";
        for (r in t) if (-1 == n.indexOf(r)) {
          n += "," + r + "=" + t[r];
        } else if (e) {
          s = RegExp(r + "s*=s*[^,]+");
          n = n.replace(s, r + "=" + t[r]);
        }
        if (/^,/.test(n)) {
          n = n.substr(1);
        }
        i.content = n;
        if (o) {
          o.content = n;
        }
        document.head.appendChild(i);
      },
      _adjustViewportMeta: function () {
        if (this._isAdjustViewport) {
          this._setViewportMeta(s.meta, false);
          this._isAdjustViewport = false;
        }
      },
      adjustViewportMeta: function (t) {
        this._isAdjustViewport = t;
      },
      enableRetina: function (t) {
        this._retinaEnabled = !!t;
      },
      isRetinaEnabled: function () {
        return this._retinaEnabled;
      },
      enableAntiAlias: function (t) {
        if (this._antiAliasEnabled !== t) {
          this._antiAliasEnabled = t;
          if (cc.game.renderType === cc.game.RENDER_TYPE_WEBGL) {
            cc.assetManager.assets.forEach(function (e) {
              if (e instanceof cc.Texture2D) {
                var i = cc.Texture2D.Filter;
                if (t) {
                  e.setFilters(i.LINEAR, i.LINEAR);
                } else {
                  e.setFilters(i.NEAREST, i.NEAREST);
                }
              }
            });
          } else if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {
            var e = cc.game.canvas.getContext("2d");
            e.imageSmoothingEnabled = t;
            e.mozImageSmoothingEnabled = t;
          }
        }
      },
      isAntiAliasEnabled: function () {
        return this._antiAliasEnabled;
      },
      enableAutoFullScreen: function (t) {
        if (t && t !== this._autoFullScreen && cc.sys.isMobile) {
          this._autoFullScreen = true;
          cc.screen.autoFullScreen(cc.game.frame);
        } else {
          this._autoFullScreen = false;
          cc.screen.disableAutoFullScreen(cc.game.frame);
        }
      },
      isAutoFullScreenEnabled: function () {
        return this._autoFullScreen;
      },
      setCanvasSize: function (t, e) {
        var i = cc.game.canvas;
        var n = cc.game.container;
        i.width = t * this._devicePixelRatio;
        i.height = e * this._devicePixelRatio;
        i.style.width = t + "px";
        i.style.height = e + "px";
        n.style.width = t + "px";
        n.style.height = e + "px";
        this._resizeEvent();
      },
      getCanvasSize: function () {
        return cc.size(cc.game.canvas.width, cc.game.canvas.height);
      },
      getFrameSize: function () {
        return cc.size(this._frameSize.width, this._frameSize.height);
      },
      setFrameSize: function (t, e) {
        this._frameSize.width = t;
        this._frameSize.height = e;
        cc.game.frame.style.width = t + "px";
        cc.game.frame.style.height = e + "px";
        this._resizeEvent(true);
      },
      getVisibleSize: function () {
        return cc.size(this._visibleRect.width, this._visibleRect.height);
      },
      getVisibleSizeInPixel: function () {
        return cc.size(this._visibleRect.width * this._scaleX, this._visibleRect.height * this._scaleY);
      },
      getVisibleOrigin: function () {
        return cc.v2(this._visibleRect.x, this._visibleRect.y);
      },
      getVisibleOriginInPixel: function () {
        return cc.v2(this._visibleRect.x * this._scaleX, this._visibleRect.y * this._scaleY);
      },
      getResolutionPolicy: function () {
        return this._resolutionPolicy;
      },
      setResolutionPolicy: function (t) {
        var e = this;
        if (t instanceof cc.ResolutionPolicy) {
          e._resolutionPolicy = t;
        } else {
          var i = cc.ResolutionPolicy;
          if (t === i.EXACT_FIT) {
            e._resolutionPolicy = e._rpExactFit;
          }
          if (t === i.SHOW_ALL) {
            e._resolutionPolicy = e._rpShowAll;
          }
          if (t === i.NO_BORDER) {
            e._resolutionPolicy = e._rpNoBorder;
          }
          if (t === i.FIXED_HEIGHT) {
            e._resolutionPolicy = e._rpFixedHeight;
          }
          if (t === i.FIXED_WIDTH) {
            e._resolutionPolicy = e._rpFixedWidth;
          }
        }
      },
      setDesignResolutionSize: function (t, e, i) {
        if (t > 0 && e > 0) {
          this.setResolutionPolicy(i);
          var n = this._resolutionPolicy;
          if (n) {
            n.preApply(this);
          }
          if (cc.sys.isMobile) {
            this._adjustViewportMeta();
          }
          this._orientationChanging = true;
          if (!this._resizing) {
            this._initFrameSize();
          }
          if (n) {
            this._originalDesignResolutionSize.width = this._designResolutionSize.width = t;
            this._originalDesignResolutionSize.height = this._designResolutionSize.height = e;
            var s = n.apply(this, this._designResolutionSize);
            if (s.scale && 2 === s.scale.length) {
              this._scaleX = s.scale[0];
              this._scaleY = s.scale[1];
            }
            if (s.viewport) {
              var a = this._viewportRect;
              var o = this._visibleRect;
              var c = s.viewport;
              a.x = c.x;
              a.y = c.y;
              a.width = c.width;
              a.height = c.height;
              o.x = 0;
              o.y = 0;
              o.width = c.width / this._scaleX;
              o.height = c.height / this._scaleY;
            }
            n.postApply(this);
            cc.winSize.width = this._visibleRect.width;
            cc.winSize.height = this._visibleRect.height;
            if (cc.visibleRect) {
              cc.visibleRect.init(this._visibleRect);
            }
            r.updateCameraViewport();
            cc.internal.inputManager._updateCanvasBoundingRect();
            this.emit("design-resolution-changed");
          }
        }
      },
      getDesignResolutionSize: function () {
        return cc.size(this._designResolutionSize.width, this._designResolutionSize.height);
      },
      setRealPixelResolution: function (t, e, i) {
        this._setViewportMeta({
          width: t
        }, true);
        document.documentElement.style.width = t + "px";
        document.body.style.width = t + "px";
        document.body.style.left = "0px";
        document.body.style.top = "0px";
        this.setDesignResolutionSize(t, e, i);
      },
      setViewportInPoints: function (t, e, i, n) {
        var r = this._scaleX;
        var s = this._scaleY;
        cc.game._renderContext.viewport(t * r + this._viewportRect.x, e * s + this._viewportRect.y, i * r, n * s);
      },
      setScissorInPoints: function (t, e, i, n) {
        var r = this._scaleX;
        var s = this._scaleY;
        var o = Math.ceil(t * r + this._viewportRect.x);
        var c = Math.ceil(e * s + this._viewportRect.y);
        var l = Math.ceil(i * r);
        var h = Math.ceil(n * s);
        var u = cc.game._renderContext;
        if (!a) {
          var f = u.getParameter(u.SCISSOR_BOX);
          a = cc.rect(f[0], f[1], f[2], f[3]);
        }
        if (!(a.x === o && a.y === c && a.width === l && a.height === h)) {
          a.x = o;
          a.y = c;
          a.width = l;
          a.height = h;
          u.scissor(o, c, l, h);
        }
      },
      isScissorEnabled: function () {
        return cc.game._renderContext.isEnabled(gl.SCISSOR_TEST);
      },
      getScissorRect: function () {
        if (!a) {
          var t = gl.getParameter(gl.SCISSOR_BOX);
          a = cc.rect(t[0], t[1], t[2], t[3]);
        }
        var e = 1 / this._scaleX;
        var i = 1 / this._scaleY;
        return cc.rect((a.x - this._viewportRect.x) * e, (a.y - this._viewportRect.y) * i, a.width * e, a.height * i);
      },
      getViewportRect: function () {
        return this._viewportRect;
      },
      getScaleX: function () {
        return this._scaleX;
      },
      getScaleY: function () {
        return this._scaleY;
      },
      getDevicePixelRatio: function () {
        return this._devicePixelRatio;
      },
      convertToLocationInView: function (t, e, i, n) {
        var r = n || cc.v2();
        var s = i.adjustedLeft ? i.adjustedLeft : i.left;
        var a = i.adjustedTop ? i.adjustedTop : i.top;
        var o = this._devicePixelRatio * (t - s);
        var c = this._devicePixelRatio * (a + i.height - e);
        if (this._isRotated) {
          r.x = cc.game.canvas.width - c;
          r.y = o;
        } else {
          r.x = o;
          r.y = c;
        }
        return r;
      },
      _convertMouseToLocationInView: function (t, e) {
        var i = this._viewportRect;
        t.x = (this._devicePixelRatio * (t.x - e.left) - i.x) / this._scaleX;
        t.y = (this._devicePixelRatio * (e.top + e.height - t.y) - i.y) / this._scaleY;
      },
      _convertPointWithScale: function (t) {
        var e = this._viewportRect;
        t.x = (t.x - e.x) / this._scaleX;
        t.y = (t.y - e.y) / this._scaleY;
      },
      _convertTouchesWithScale: function (t) {
        var e;
        var i;
        var n;
        var r = this._viewportRect;
        var s = this._scaleX;
        var a = this._scaleY;
        for (var o = 0; o < t.length; o++) {
          i = (e = t[o])._point;
          n = e._prevPoint;
          i.x = (i.x - r.x) / s;
          i.y = (i.y - r.y) / a;
          n.x = (n.x - r.x) / s;
          n.y = (n.y - r.y) / a;
        }
      }
    });
    cc.ContainerStrategy = cc.Class({
      name: "ContainerStrategy",
      preApply: function () {},
      apply: function () {},
      postApply: function () {},
      _setupContainer: function (t, e, i) {
        var n = cc.game.canvas;
        this._setupStyle(t, e, i);
        var r = t._devicePixelRatio = 1;
        if (t.isRetinaEnabled()) {
          r = t._devicePixelRatio = Math.min(t._maxPixelRatio, window.devicePixelRatio || 1);
        }
        n.width = e * r;
        n.height = i * r;
      },
      _setupStyle: function (t, e, i) {
        var n = cc.game.canvas;
        var r = cc.game.container;
        r.style.width = n.style.width = e + "px";
        r.style.height = n.style.height = i + "px";
      },
      _fixContainer: function () {
        document.body.insertBefore(cc.game.container, document.body.firstChild);
        var t = document.body.style;
        t.width = window.innerWidth + "px";
        t.height = window.innerHeight + "px";
        t.overflow = "hidden";
        var e = cc.game.container.style;
        e.position = "fixed";
        e.left = e.top = "0px";
        document.body.scrollTop = 0;
      }
    });
    cc.ContentStrategy = cc.Class({
      name: "ContentStrategy",
      ctor: function () {
        this._result = {
          scale: [1, 1],
          viewport: null
        };
      },
      _buildResult: function (t, e, i, n, r, s) {
        if (Math.abs(t - i) < 2) {
          i = t;
        }
        if (Math.abs(e - n) < 2) {
          n = e;
        }
        var a = cc.rect((t - i) / 2, (e - n) / 2, i, n);
        cc.game.renderType;
        cc.game.RENDER_TYPE_CANVAS;
        this._result.scale = [r, s];
        this._result.viewport = a;
        return this._result;
      },
      preApply: function () {},
      apply: function () {
        return {
          scale: [1, 1]
        };
      },
      postApply: function () {}
    });
    (function () {
      var t = cc.Class({
        name: "EqualToFrame",
        extends: cc.ContainerStrategy,
        apply: function (t) {
          var e = t._frameSize.height;
          var i = cc.game.container.style;
          this._setupContainer(t, t._frameSize.width, t._frameSize.height);
          if (t._isRotated) {
            i.margin = "0 0 0 " + e + "px";
          } else {
            i.margin = "0px";
          }
          i.padding = "0px";
        }
      });
      var e = cc.Class({
        name: "ProportionalToFrame",
        extends: cc.ContainerStrategy,
        apply: function (t, e) {
          var i;
          var n;
          var r = t._frameSize.width;
          var s = t._frameSize.height;
          var a = cc.game.container.style;
          var o = e.width;
          var c = e.height;
          var l = r / o;
          var h = s / c;
          if (l < h) {
            i = r;
            n = c * l;
          } else {
            i = o * h;
            n = s;
          }
          var u = Math.round((r - i) / 2);
          var f = Math.round((s - n) / 2);
          i = r - 2 * u;
          n = s - 2 * f;
          this._setupContainer(t, i, n);
          if (t._isRotated) {
            a.margin = "0 0 0 " + s + "px";
          } else {
            a.margin = "0px";
          }
          a.paddingLeft = u + "px";
          a.paddingRight = u + "px";
          a.paddingTop = f + "px";
          a.paddingBottom = f + "px";
        }
      });
      cc.Class({
        name: "EqualToWindow",
        extends: t,
        preApply: function (t) {
          this._super(t);
          cc.game.frame = document.documentElement;
        },
        apply: function (t) {
          this._super(t);
          this._fixContainer();
        }
      });
      cc.Class({
        name: "ProportionalToWindow",
        extends: e,
        preApply: function (t) {
          this._super(t);
          cc.game.frame = document.documentElement;
        },
        apply: function (t, e) {
          this._super(t, e);
          this._fixContainer();
        }
      });
      var i = cc.Class({
        name: "OriginalContainer",
        extends: cc.ContainerStrategy,
        apply: function (t) {
          this._setupContainer(t, cc.game.canvas.width, cc.game.canvas.height);
        }
      });
      var n = ("undefined" == typeof window ? global : window).__globalAdapter;
      if (n) {
        if (n.adaptContainerStrategy) {
          n.adaptContainerStrategy(cc.ContainerStrategy.prototype);
        }
        if (n.adaptView) {
          n.adaptView(o.prototype);
        }
      }
      cc.ContainerStrategy.EQUAL_TO_FRAME = new t();
      cc.ContainerStrategy.PROPORTION_TO_FRAME = new e();
      cc.ContainerStrategy.ORIGINAL_CONTAINER = new i();
      var r = cc.Class({
        name: "ExactFit",
        extends: cc.ContentStrategy,
        apply: function (t, e) {
          var i = cc.game.canvas.width;
          var n = cc.game.canvas.height;
          var r = i / e.width;
          var s = n / e.height;
          return this._buildResult(i, n, i, n, r, s);
        }
      });
      var s = cc.Class({
        name: "ShowAll",
        extends: cc.ContentStrategy,
        apply: function (t, e) {
          var i;
          var n;
          var r = cc.game.canvas.width;
          var s = cc.game.canvas.height;
          var a = e.width;
          var o = e.height;
          var c = r / a;
          var l = s / o;
          var h = 0;
          if (c < l) {
            i = r;
            n = o * (h = c);
          } else {
            i = a * (h = l);
            n = s;
          }
          return this._buildResult(r, s, i, n, h, h);
        }
      });
      var a = cc.Class({
        name: "NoBorder",
        extends: cc.ContentStrategy,
        apply: function (t, e) {
          var i;
          var n;
          var r;
          var s = cc.game.canvas.width;
          var a = cc.game.canvas.height;
          var o = e.width;
          var c = e.height;
          var l = s / o;
          var h = a / c;
          if (l < h) {
            n = o * (i = h);
            r = a;
          } else {
            n = s;
            r = c * (i = l);
          }
          return this._buildResult(s, a, n, r, i, i);
        }
      });
      var c = cc.Class({
        name: "FixedHeight",
        extends: cc.ContentStrategy,
        apply: function (t, e) {
          var i = cc.game.canvas.width;
          var n = cc.game.canvas.height;
          var r = n / e.height;
          return this._buildResult(i, n, i, n, r, r);
        }
      });
      var l = cc.Class({
        name: "FixedWidth",
        extends: cc.ContentStrategy,
        apply: function (t, e) {
          var i = cc.game.canvas.width;
          var n = cc.game.canvas.height;
          var r = i / e.width;
          return this._buildResult(i, n, i, n, r, r);
        }
      });
      cc.ContentStrategy.EXACT_FIT = new r();
      cc.ContentStrategy.SHOW_ALL = new s();
      cc.ContentStrategy.NO_BORDER = new a();
      cc.ContentStrategy.FIXED_HEIGHT = new c();
      cc.ContentStrategy.FIXED_WIDTH = new l();
    })();
    cc.ResolutionPolicy = cc.Class({
      name: "cc.ResolutionPolicy",
      ctor: function (t, e) {
        this._containerStrategy = null;
        this._contentStrategy = null;
        this.setContainerStrategy(t);
        this.setContentStrategy(e);
      },
      preApply: function (t) {
        this._containerStrategy.preApply(t);
        this._contentStrategy.preApply(t);
      },
      apply: function (t, e) {
        this._containerStrategy.apply(t, e);
        return this._contentStrategy.apply(t, e);
      },
      postApply: function (t) {
        this._containerStrategy.postApply(t);
        this._contentStrategy.postApply(t);
      },
      setContainerStrategy: function (t) {
        if (t instanceof cc.ContainerStrategy) {
          this._containerStrategy = t;
        }
      },
      setContentStrategy: function (t) {
        if (t instanceof cc.ContentStrategy) {
          this._contentStrategy = t;
        }
      }
    });
    n.get(cc.ResolutionPolicy.prototype, "canvasSize", function () {
      return cc.v2(cc.game.canvas.width, cc.game.canvas.height);
    });
    cc.ResolutionPolicy.EXACT_FIT = 0;
    cc.ResolutionPolicy.NO_BORDER = 1;
    cc.ResolutionPolicy.SHOW_ALL = 2;
    cc.ResolutionPolicy.FIXED_HEIGHT = 3;
    cc.ResolutionPolicy.FIXED_WIDTH = 4;
    cc.ResolutionPolicy.UNKNOWN = 5;
    cc.view = new o();
    cc.winSize = cc.size();
    e.exports = cc.view;
  }, {
    "../event/event-target": 134,
    "../platform/CCClass": 162,
    "../platform/js": 183,
    "../renderer": 193
  }],
  173: [function () {
    "use strict";

    cc.visibleRect = {
      topLeft: cc.v2(0, 0),
      topRight: cc.v2(0, 0),
      top: cc.v2(0, 0),
      bottomLeft: cc.v2(0, 0),
      bottomRight: cc.v2(0, 0),
      bottom: cc.v2(0, 0),
      center: cc.v2(0, 0),
      left: cc.v2(0, 0),
      right: cc.v2(0, 0),
      width: 0,
      height: 0,
      init: function (t) {
        var e = this.width = t.width;
        var i = this.height = t.height;
        var n = t.x;
        var r = t.y;
        var s = r + i;
        var a = n + e;
        this.topLeft.x = n;
        this.topLeft.y = s;
        this.topRight.x = a;
        this.topRight.y = s;
        this.top.x = n + e / 2;
        this.top.y = s;
        this.bottomLeft.x = n;
        this.bottomLeft.y = r;
        this.bottomRight.x = a;
        this.bottomRight.y = r;
        this.bottom.x = n + e / 2;
        this.bottom.y = r;
        this.center.x = n + e / 2;
        this.center.y = r + i / 2;
        this.left.x = n;
        this.left.y = r + i / 2;
        this.right.x = a;
        this.right.y = r + i / 2;
      }
    };
  }, {}],
  174: [function (t, e) {
    "use strict";

    var i = t("./js");
    t("./utils").isPlainEmptyObj_DEV;
    function r(t, e) {
      var n = e ? Object.create(e) : {};
      i.value(t, "__attrs__", n);
      return n;
    }
    function s(t) {
      if ("function" != typeof t) {
        return r(t, t.constructor.hasOwnProperty("__attrs__") && t.constructor.__attrs__ || s(t.constructor));
      }
      var e;
      var i = cc.Class.getInheritanceChain(t);
      for (var n = i.length - 1; n >= 0; n--) {
        var s = i[n];
        if (!(s.hasOwnProperty("__attrs__") && s.__attrs__)) {
          r(s, (e = i[n + 1]) && e.__attrs__);
        }
      }
      r(t, (e = i[0]) && e.__attrs__);
      return t.__attrs__;
    }
    function a(t) {
      return t.hasOwnProperty("__attrs__") && t.__attrs__ || s(t);
    }
    function o(t, e) {
      this.name = t;
      this.default = e;
    }
    o.prototype.toString = function () {
      return this.name;
    };
    cc.Integer = new o("Integer", 0);
    cc.Float = new o("Float", 0);
    cc.Boolean = new o("Boolean", false);
    cc.String = new o("String", "");
    e.exports = {
      PrimitiveType: o,
      attr: function (t, e) {
        var i = t.hasOwnProperty("__attrs__") && t.__attrs__ || s(t);
        var r = e + "$_$";
        var s = {};
        for (var o in i) if (o.startsWith(r)) {
          s[o.slice(r.length)] = i[o];
        }
        return s;
      },
      getClassAttrs: a,
      setClassAttr: function (t, e, i, r) {
        (t.hasOwnProperty("__attrs__") && t.__attrs__ || s(t))[e + "$_$" + i] = r;
      },
      DELIMETER: "$_$",
      getTypeChecker_ET: false,
      getObjTypeChecker_ET: false,
      ScriptUuid: {}
    };
  }, {
    "./CCClass": 162,
    "./js": 183,
    "./utils": 186
  }],
  175: [function (t, e) {
    "use strict";

    var i = t("./js");
    var n = i.array.fastRemoveAt;
    function r() {}
    function s() {
      this.callback = r;
      this.target = undefined;
      this.once = false;
    }
    s.prototype.set = function (t, e, i) {
      this.callback = t;
      this.target = e;
      this.once = !!i;
    };
    var a = new i.Pool(function (t) {
      t.callback = r;
      t.target = undefined;
      t.once = false;
      return true;
    }, 32);
    function o() {
      this.callbackInfos = [];
      this.isInvoking = false;
      this.containCanceled = false;
    }
    a.get = function () {
      return this._get() || new s();
    };
    var c = o.prototype;
    c.removeByCallback = function (t) {
      for (var e = 0; e < this.callbackInfos.length; ++e) {
        var i = this.callbackInfos[e];
        if (i && i.callback === t) {
          a.put(i);
          n(this.callbackInfos, e);
          --e;
        }
      }
    };
    c.removeByTarget = function (t) {
      for (var e = 0; e < this.callbackInfos.length; ++e) {
        var i = this.callbackInfos[e];
        if (i && i.target === t) {
          a.put(i);
          n(this.callbackInfos, e);
          --e;
        }
      }
    };
    c.cancel = function (t) {
      var e = this.callbackInfos[t];
      if (e) {
        a.put(e);
        this.callbackInfos[t] = null;
      }
      this.containCanceled = true;
    };
    c.cancelAll = function () {
      for (var t = 0; t < this.callbackInfos.length; t++) {
        var e = this.callbackInfos[t];
        if (e) {
          a.put(e);
          this.callbackInfos[t] = null;
        }
      }
      this.containCanceled = true;
    };
    c.purgeCanceled = function () {
      for (var t = this.callbackInfos.length - 1; t >= 0; --t) {
        if (!this.callbackInfos[t]) {
          n(this.callbackInfos, t);
        }
      }
      this.containCanceled = false;
    };
    c.clear = function () {
      this.cancelAll();
      this.callbackInfos.length = 0;
      this.isInvoking = false;
      this.containCanceled = false;
    };
    var l = new i.Pool(function (t) {
      t.callbackInfos.length = 0;
      t.isInvoking = false;
      t.containCanceled = false;
      return true;
    }, 16);
    function h() {
      this._callbackTable = i.createMap(true);
    }
    l.get = function () {
      return this._get() || new o();
    };
    (c = h.prototype).on = function (t, e, i, n) {
      var r = this._callbackTable[t];
      if (!r) {
        r = this._callbackTable[t] = l.get();
      }
      var s = a.get();
      s.set(e, i, n);
      r.callbackInfos.push(s);
    };
    c.add = c.on;
    c.hasEventListener = function (t, e, i) {
      var n = this._callbackTable[t];
      if (!n) {
        return false;
      }
      var r = n.callbackInfos;
      if (!e) {
        if (n.isInvoking) {
          for (var s = 0; s < r.length; ++s) {
            if (r[s]) {
              return true;
            }
          }
          return false;
        }
        return r.length > 0;
      }
      for (var a = 0; a < r.length; ++a) {
        var o = r[a];
        if (o && o.callback === e && o.target === i) {
          return true;
        }
      }
      return false;
    };
    c.removeAll = function (t) {
      if ("string" == typeof t) {
        var e = this._callbackTable[t];
        if (e) {
          if (e.isInvoking) {
            e.cancelAll();
          } else {
            e.clear();
            l.put(e);
            delete this._callbackTable[t];
          }
        }
      } else if (t) {
        for (var i in this._callbackTable) {
          var n = this._callbackTable[i];
          if (n.isInvoking) {
            var r = n.callbackInfos;
            for (var s = 0; s < r.length; ++s) {
              var a = r[s];
              if (a && a.target === t) {
                n.cancel(s);
              }
            }
          } else {
            n.removeByTarget(t);
          }
        }
      }
    };
    c.off = function (t, e, i) {
      var r = this._callbackTable[t];
      if (r) {
        var s = r.callbackInfos;
        for (var o = 0; o < s.length; ++o) {
          var c = s[o];
          if (c && c.callback === e && c.target === i) {
            if (r.isInvoking) {
              r.cancel(o);
            } else {
              n(s, o);
              a.put(c);
            }
            return true;
          }
        }
      }
      return false;
    };
    c.remove = c.off;
    c.emit = function (t, e, i, n, r, s) {
      var a = this._callbackTable[t];
      if (a) {
        var o = !a.isInvoking;
        a.isInvoking = true;
        var c = a.callbackInfos;
        var l = 0;
        for (var h = c.length; l < h; ++l) {
          var u = c[l];
          if (u) {
            var f = u.target;
            var d = u.callback;
            if (u.once) {
              this.off(t, d, f);
            }
            if (f) {
              d.call(f, e, i, n, r, s);
            } else {
              d(e, i, n, r, s);
            }
          }
        }
        if (o) {
          a.isInvoking = false;
          if (a.containCanceled) {
            a.purgeCanceled();
          }
        }
      }
    };
    c.invoke = c.emit;
    e.exports = h;
  }, {
    "./js": 183
  }],
  176: [function (t, e) {
    "use strict";

    function i(t, e) {
      for (var n = 0; n < e.length; n++) {
        var r = e[n];
        if (Array.isArray(r)) {
          i(t, r);
        } else {
          t.push(r);
        }
      }
    }
    e.exports = {
      flattenCodeArray: function (t) {
        var e = [];
        i(e, t);
        return e.join("");
      }
    };
  }, {}],
  177: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = D;
    i.getDependUuidList = function (t) {
      var e = t[1];
      return t[10].map(function (t) {
        return e[t];
      });
    };
    i.hasNativeDep = function (t) {
      var e = t[5];
      var i = e[e.length - 1];
      return "number" == typeof i && i < 0;
    };
    i.packCustomObjData = function (t, e, i) {
      return [1, 0, 0, [t], 0, i ? [e, -1] : [e], [0], 0, [], [], []];
    };
    i.unpackJSONs = function (t, e) {
      if (t[0] < 1) {
        throw Error(cc.debug.getError(5304, t[0]));
      }
      O(t, true, e);
      L(t);
      var i = new N(t[0]);
      var n = t[1];
      var r = t[2];
      var s = t[3];
      var a = t[4];
      var o = t[5];
      for (var c = 0; c < o.length; ++c) {
        o[c].unshift(i, n, r, s, a);
      }
      return o;
    };
    var n = t("./js") && t("./js").__esModule ? t("./js") : {
      default: t("./js")
    };
    var r = t("../value-types/vec2") && t("../value-types/vec2").__esModule ? t("../value-types/vec2") : {
      default: t("../value-types/vec2")
    };
    var s = t("../value-types/vec3") && t("../value-types/vec3").__esModule ? t("../value-types/vec3") : {
      default: t("../value-types/vec3")
    };
    var a = t("../value-types/vec4") && t("../value-types/vec4").__esModule ? t("../value-types/vec4") : {
      default: t("../value-types/vec4")
    };
    var o = t("../value-types/color") && t("../value-types/color").__esModule ? t("../value-types/color") : {
      default: t("../value-types/color")
    };
    var c = t("../value-types/size") && t("../value-types/size").__esModule ? t("../value-types/size") : {
      default: t("../value-types/size")
    };
    var l = t("../value-types/rect") && t("../value-types/rect").__esModule ? t("../value-types/rect") : {
      default: t("../value-types/rect")
    };
    var h = t("../value-types/quat") && t("../value-types/quat").__esModule ? t("../value-types/quat") : {
      default: t("../value-types/quat")
    };
    var u = t("../value-types/mat4") && t("../value-types/mat4").__esModule ? t("../value-types/mat4") : {
      default: t("../value-types/mat4")
    };
    var _ = [r.default, s.default, a.default, h.default, o.default, c.default, l.default, u.default];
    function p(t, e) {
      t.x = e[1];
      t.y = e[2];
      t.z = e[3];
      t.w = e[4];
    }
    var v = [function (t, e) {
      t.x = e[1];
      t.y = e[2];
    }, function (t, e) {
      t.x = e[1];
      t.y = e[2];
      t.z = e[3];
    }, p, p, function (t, e) {
      t._val = e[1];
    }, function (t, e) {
      t.width = e[1];
      t.height = e[2];
    }, function (t, e) {
      t.x = e[1];
      t.y = e[2];
      t.width = e[3];
      t.height = e[4];
    }, function (t, e) {
      u.default.fromArray(t, e, 1);
    }];
    var y = function () {
      function t() {
        this.uuidObjList = null;
        this.uuidPropList = null;
        this.uuidList = null;
      }
      var e = t.prototype;
      e.init = function (t) {
        this.uuidObjList = t[8];
        this.uuidPropList = t[9];
        this.uuidList = t[10];
      };
      e.reset = function () {
        this.uuidList = null;
        this.uuidObjList = null;
        this.uuidPropList = null;
      };
      e.push = function (t, e, i) {
        this.uuidObjList.push(t);
        this.uuidPropList.push(e);
        this.uuidList.push(i);
      };
      return t;
    }();
    function T(t, e, i) {
      var n = t.length - 1;
      var r = 0;
      for (var s = 3 * t[n]; r < s; r += 3) {
        var a = t[r];
        var o = e[t[r + 2]];
        var c = t[r + 1];
        if (c >= 0) {
          a[i[c]] = o;
        } else {
          a[~c] = o;
        }
      }
      for (; r < n; r += 3) {
        var l = e[t[r]];
        var h = e[t[r + 2]];
        var u = t[r + 1];
        if (u >= 0) {
          l[i[u]] = h;
        } else {
          l[~u] = h;
        }
      }
    }
    function E(t, e) {
      var i = t[4][e[0]];
      var n = i[0];
      var r = new n[0]();
      var s = n[1];
      var a = n[2];
      var o = i[i.length - 1];
      for (var c = 1; c < o; ++c) {
        var i;
        var n;
        var r;
        var s;
        var a;
        var o;
        var c;
        r[s[i[c]]] = e[c];
      }
      for (; c < e.length; ++c) {
        var l = s[i[c]];
        var h = n[i[c] + a];
        0;
        R[h](t, r, l, e[c]);
      }
      return r;
    }
    function A(t, e, i) {
      var n = new e();
      if (n._deserialize) {
        n._deserialize(i, t[0]);
      }
      return n;
    }
    function x(t, e, i, n) {
      if (n >= 0) {
        e[i] = t[5][n];
      } else {
        t[7][3 * ~n] = e;
      }
    }
    function C(t) {
      return function (e, i, n, r) {
        i[n] = r;
        for (var s = 0; s < r.length; ++s) {
          t(e, r, s, r[s]);
        }
      };
    }
    function b(t, e, i, n) {
      e[i] = null;
      t[8][n] = e;
    }
    function S(t, e, i, n) {
      e[i] = E(t, n);
    }
    y.pool = new n.default.Pool(function (t) {
      t.reset();
    }, 5);
    y.pool.get = function () {
      return this._get() || new y();
    };
    var R = Array(13);
    function M(t) {
      var e = t[5];
      var i = t[6];
      var n = 0 === i ? 0 : i.length;
      var r = e[e.length - 1];
      var s = e.length - n;
      if ("number" != typeof r) {
        r = 0;
      } else {
        if (r < 0) {
          r = ~r;
        }
        --s;
      }
      for (var a = 0; a < s; ++a) {
        e[a] = E(t, e[a]);
      }
      var o = t[3];
      for (var c = 0; c < n; ++c, ++a) {
        var l = i[c];
        var h = e[a];
        if (l >= 0) {
          var u = o[l];
          e[a] = A(t, u, h);
        } else {
          0;
          R[l = ~l](t, e, a, h);
        }
      }
      return r;
    }
    function w(t, e) {
      if (!t) {
        D.reportMissingClass(e);
      }
      return Object;
    }
    function I(t, e, i, n, r, s) {
      var a = t(e);
      if (!a) {
        if (r) {
          return void (i[n] = function (e, i, n) {
            return function () {
              var r = t(n) || w(s, n);
              e[i] = r;
              return new r();
            };
          }(i, n, e));
        }
        a = w(s, e);
      }
      i[n] = a;
    }
    function O(t, e, i) {
      var r = i || n.default._getClassById;
      var s = t[3];
      for (var a = 0; a < s.length; ++a) {
        var o = s[a];
        if ("string" != typeof o) {
          I(r, o[0], o, 0, e, i);
        } else {
          I(r, o, s, a, e, i);
        }
      }
    }
    function L(t) {
      var e = t[4];
      if (e) {
        var i = t[3];
        for (var n = 0; n < e.length; ++n) {
          var r = e[n];
          r[0] = i[r[0]];
        }
      }
    }
    function P(t) {
      var e = t[5];
      var i = t[2];
      var n = t[1];
      var r = t[8];
      var s = t[9];
      var a = t[10];
      for (var o = 0; o < r.length; ++o) {
        var c = r[o];
        if ("number" == typeof c) {
          r[o] = e[c];
        }
        var l = s[o];
        if ("number" == typeof l) {
          l = l >= 0 ? i[l] : ~l;
          s[o] = l;
        }
        var h = a[o];
        if ("number" == typeof h) {
          a[o] = n[h];
        }
      }
    }
    function D(t, e, i) {
      if ("string" == typeof t) {
        t = JSON.parse(t);
      }
      var n = !e;
      (e = e || y.pool.get()).init(t);
      i = i || {};
      var r = t[0];
      var s = false;
      if ("object" == typeof r) {
        s = r.preprocessed;
        r = r.version;
      }
      if (r < 1) {
        throw Error(cc.debug.getError(5304, r));
      }
      i._version = r;
      i.result = e;
      t[0] = i;
      if (!s) {
        O(t, false, i.classFinder);
        L(t);
      }
      cc.game._isCloning = true;
      var a = t[5];
      var o = M(t);
      cc.game._isCloning = false;
      if (t[7]) {
        T(t[7], a, t[2]);
      }
      P(t);
      if (n) {
        y.pool.put(e);
      }
      return a[o];
    }
    R[0] = function (t, e, i, n) {
      e[i] = n;
    };
    R[1] = x;
    R[2] = C(x);
    R[3] = C(b);
    R[4] = S;
    R[5] = function (t, e, i, n) {
      v[n[0]](e[i], n);
    };
    R[6] = b;
    R[7] = function (t, e, i, n) {
      e[i].set(n);
    };
    R[8] = function (t, e, i, n) {
      var r = new _[n[0]]();
      v[n[0]](r, n);
      e[i] = r;
    };
    R[9] = C(S);
    R[10] = function (t, e, i, n) {
      var r = t[3][n[0]];
      e[i] = A(t, r, n[1]);
    };
    R[11] = function (t, e, i, n) {
      var r = n[0];
      e[i] = r;
      for (var s = 1; s < n.length; s += 3) {
        var a = n[s];
        var o = n[s + 1];
        var c = n[s + 2];
        0;
        R[o](t, r, a, c);
      }
    };
    R[12] = function (t, e, i, n) {
      var r = n[0];
      e[i] = r;
      for (var s = 0; s < r.length; ++s) {
        var a = r[s];
        var o = n[s + 1];
        if (0 !== o) {
          0;
          R[o](t, r, s, a);
        }
      }
    };
    D.Details = y;
    var N = function (t) {
      this.preprocessed = true;
      this.version = t;
    };
  }, {
    "../value-types/color": 250,
    "../value-types/mat4": 253,
    "../value-types/quat": 254,
    "../value-types/rect": 255,
    "../value-types/size": 256,
    "../value-types/vec2": 260,
    "../value-types/vec3": 261,
    "../value-types/vec4": 262,
    "./js": 183
  }],
  178: [function (t) {
    "use strict";

    var e;
    var i = (e = t("./deserialize-compiled")) && e.__esModule ? e : {
      default: e
    };
    i.default.reportMissingClass = function () {};
    cc.deserialize = i.default;
  }, {
    "./deserialize-compiled": 177,
    "./deserialize-editor": undefined
  }],
  179: [function (t, e) {
    "use strict";

    function n(t) {
      this.id = 0 | 998 * Math.random();
      this.prefix = t ? t + "." : "";
    }
    n.prototype.getNewId = function () {
      return this.prefix + ++this.id;
    };
    n.global = new n("global");
    e.exports = n;
  }, {}],
  180: [function (t) {
    "use strict";

    t("./js");
    t("./CCClass");
    t("./CCClassDecorator");
    t("./CCEnum");
    t("./CCObject");
    t("./callbacks-invoker");
    t("./deserialize");
    t("./instantiate");
    t("./instantiate-jit");
    t("./requiring-frame");
    t("./CCSys");
    t("./CCMacro");
    t("./CCVisibleRect");
  }, {
    "./CCClass": 162,
    "./CCClassDecorator": 163,
    "./CCEnum": 164,
    "./CCMacro": 167,
    "./CCObject": 168,
    "./CCSys": 171,
    "./CCVisibleRect": 173,
    "./callbacks-invoker": 175,
    "./deserialize": 178,
    "./instantiate": 182,
    "./instantiate-jit": 181,
    "./js": 183,
    "./requiring-frame": 185
  }],
  181: [function (t, e) {
    "use strict";

    var i = t("./CCObject");
    var n = i.Flags.Destroyed;
    var r = i.Flags.PersistentMask;
    var s = t("./attribute");
    var a = t("./js");
    var o = t("./CCClass");
    var c = t("./compiler");
    var l = s.DELIMETER + "default";
    var h = o.IDENTIFIER_RE;
    var u = o.escapeForJS;
    var p = {
      "cc.Node": "cc.Node",
      "cc.Sprite": "cc.Sprite",
      "cc.Label": "cc.Label",
      "cc.Button": "cc.Button",
      "cc.Widget": "cc.Widget",
      "cc.Animation": "cc.Animation",
      "cc.ClickEvent": false,
      "cc.PrefabInfo": false
    };
    try {
      if (!Float32Array.name) {
        Float32Array.name = "Float32Array";
      }
      if (!Float64Array.name) {
        Float64Array.name = "Float64Array";
      }
      if (!Int8Array.name) {
        Int8Array.name = "Int8Array";
      }
      if (!Int16Array.name) {
        Int16Array.name = "Int16Array";
      }
      if (!Int32Array.name) {
        Int32Array.name = "Int32Array";
      }
      if (!Uint8Array.name) {
        Uint8Array.name = "Uint8Array";
      }
      if (!Uint16Array.name) {
        Uint16Array.name = "Uint16Array";
      }
      if (!Uint32Array.name) {
        Uint32Array.name = "Uint32Array";
      }
      if (!Uint8ClampedArray.name) {
        Uint8ClampedArray.name = "Uint8ClampedArray";
      }
    } catch (b) {}
    function v(t) {
      if (t === Float32Array) {
        return "Float32Array";
      }
      if (t === Float64Array) {
        return "Float64Array";
      }
      if (t === Int8Array) {
        return "Int8Array";
      }
      if (t === Int16Array) {
        return "Int16Array";
      }
      if (t === Int32Array) {
        return "Int32Array";
      }
      if (t === Uint8Array) {
        return "Uint8Array";
      }
      if (t === Uint16Array) {
        return "Uint16Array";
      }
      if (t === Uint32Array) {
        return "Uint32Array";
      }
      if (t === Uint8ClampedArray) {
        return "Uint8ClampedArray";
      }
      throw Error("Unknown TypedArray to instantiate: " + t);
    }
    function g(t, e) {
      this.varName = t;
      this.expression = e;
    }
    function y(t, e, i) {
      if (Array.isArray(i)) {
        i[0] = i[0] instanceof g ? new g(i[0].varName, e + i[0].expression) : e + i[0];
        t.push(i);
      } else {
        t.push((i instanceof g ? new g(i.varName, e + i.expression) : e + i) + ";");
      }
    }
    function T(t) {
      this._exps = [];
      this._targetExp = t;
    }
    function E(t, e) {
      if ("function" == typeof t) {
        try {
          t = t();
        } catch (b) {
          return false;
        }
      }
      if (t === e) {
        return true;
      }
      if (t && e && "object" == typeof t && "object" == typeof e && t.constructor === e.constructor) {
        if (t instanceof cc.ValueType) {
          if (t.equals(e)) {
            return true;
          }
        } else {
          if (Array.isArray(t)) {
            return 0 === t.length && 0 === e.length;
          }
          if (t.constructor === Object) {
            return a.isEmptyObject(t) && a.isEmptyObject(e);
          }
        }
      }
      return false;
    }
    function x(t, e) {
      var i;
      this.parent = e;
      this.objsToClear_iN$t = [];
      this.codeArray = [];
      this.objs = [];
      this.funcs = [];
      this.funcModuleCache = a.createMap();
      a.mixin(this.funcModuleCache, p);
      this.globalVariables = [];
      this.globalVariableId = 0;
      this.localVariableId = 0;
      this.codeArray.push("var o,t;", "if(R){", "o=R;", "}else{", "o=R=new " + this.getFuncModule(t.constructor, true) + "();", "}");
      a.value(t, "_iN$t", {
        globalVar: "R"
      }, true);
      this.objsToClear_iN$t.push(t);
      this.enumerateObject(this.codeArray, t);
      if (this.globalVariables.length > 0) {
        i = "var " + this.globalVariables.join(",") + ";";
      }
      var n = c.flattenCodeArray(["return (function(R){", i || [], this.codeArray, "return o;", "})"]);
      this.result = Function("O", "F", n)(this.objs, this.funcs);
      var r = 0;
      for (var s = this.objsToClear_iN$t.length; r < s; ++r) {
        this.objsToClear_iN$t[r]._iN$t = null;
      }
      this.objsToClear_iN$t.length = 0;
    }
    g.prototype.toString = function () {
      return "var " + this.varName + "=" + this.expression + ";";
    };
    T.prototype.append = function (t, e) {
      this._exps.push([t, e]);
    };
    T.prototype.writeCode = function (t) {
      var e;
      if (this._exps.length > 1) {
        t.push("t=" + this._targetExp + ";");
        e = "t";
      } else {
        if (1 !== this._exps.length) {
          return;
        }
        e = this._targetExp;
      }
      for (var i = 0; i < this._exps.length; i++) {
        var n = this._exps[i];
        y(t, e + (h.test(n[0]) ? "." + n[0] : "[" + u(n[0]) + "]") + "=", n[1]);
      }
    };
    T.pool = new a.Pool(function (t) {
      t._exps.length = 0;
      t._targetExp = null;
    }, 1);
    T.pool.get = function (t) {
      var e = this._get() || new T();
      e._targetExp = t;
      return e;
    };
    var C = x.prototype;
    C.getFuncModule = function (t, e) {
      var i = a.getClassName(t);
      if (i) {
        var n = this.funcModuleCache[i];
        if (n) {
          return n;
        }
        if (undefined === n) {
          var r = -1 !== i.indexOf(".");
          if (r) {
            try {
              if (r = t === Function("return " + i)()) {
                this.funcModuleCache[i] = i;
                return i;
              }
            } catch (b) {}
          }
        }
      }
      var s = this.funcs.indexOf(t);
      if (s < 0) {
        s = this.funcs.length;
        this.funcs.push(t);
      }
      var o = "F[" + s + "]";
      if (e) {
        o = "(" + o + ")";
      }
      this.funcModuleCache[i] = o;
      return o;
    };
    C.getObjRef = function (t) {
      var e = this.objs.indexOf(t);
      if (e < 0) {
        e = this.objs.length;
        this.objs.push(t);
      }
      return "O[" + e + "]";
    };
    C.setValueType = function (t, e, i, n) {
      var r = T.pool.get(n);
      var s = e.constructor.__props__;
      if (!s) {
        s = Object.keys(e);
      }
      for (var a = 0; a < s.length; a++) {
        var o = s[a];
        var c = i[o];
        if (e[o] !== c) {
          var l = this.enumerateField(i, o, c);
          r.append(o, l);
        }
      }
      r.writeCode(t);
      T.pool.put(r);
    };
    C.enumerateCCClass = function (t, e, i) {
      var n = i.__values__;
      var r = s.getClassAttrs(i);
      for (var a = 0; a < n.length; a++) {
        var c = n[a];
        var h = e[c];
        var u = r[c + l];
        if (!E(u, h)) {
          if ("object" == typeof h && h instanceof cc.ValueType && (u = o.getDefault(u)) && u.constructor === h.constructor) {
            var f = "o" + (h.test(c) ? "." + c : "[" + u(c) + "]");
            this.setValueType(t, u, h, f);
          } else {
            this.setObjProp(t, e, c, h);
          }
        }
      }
    };
    C.instantiateArray = function (t) {
      if (0 === t.length) {
        return "[]";
      }
      var e = "a" + ++this.localVariableId;
      var i = [new g(e, "new Array(" + t.length + ")")];
      a.value(t, "_iN$t", {
        globalVar: "",
        source: i
      }, true);
      this.objsToClear_iN$t.push(t);
      for (var n = 0; n < t.length; ++n) {
        y(i, e + "[" + n + "]=", this.enumerateField(t, n, t[n]));
      }
      return i;
    };
    C.instantiateTypedArray = function (t) {
      var e = t.constructor.name || v(t.constructor);
      if (0 === t.length) {
        return "new " + e;
      }
      var i = "a" + ++this.localVariableId;
      var n = [new g(i, "new " + e + "(" + t.length + ")")];
      t._iN$t = {
        globalVar: "",
        source: n
      };
      this.objsToClear_iN$t.push(t);
      for (var r = 0; r < t.length; ++r) {
        if (0 !== t[r]) {
          y(n, i + "[" + r + "]=", t[r]);
        }
      }
      return n;
    };
    C.enumerateField = function (t, e, n) {
      if ("object" == typeof n && n) {
        var s = n._iN$t;
        if (s) {
          var a = s.globalVar;
          if (!a) {
            a = s.globalVar = "v" + ++this.globalVariableId;
            this.globalVariables.push(a);
            var o = s.source[0];
            s.source[0] = o instanceof g ? new g(o.varName, a + "=" + o.expression) : a + "=" + o;
          }
          return a;
        }
        return ArrayBuffer.isView(n) ? this.instantiateTypedArray(n) : Array.isArray(n) ? this.instantiateArray(n) : this.instantiateObj(n);
      }
      return "function" == typeof n ? this.getFuncModule(n) : "string" == typeof n ? u(n) : ("_objFlags" === e && t instanceof i && (n &= r), n);
    };
    C.setObjProp = function (t, e, i, n) {
      y(t, "o" + (h.test(i) ? "." + i : "[" + u(i) + "]") + "=", this.enumerateField(e, i, n));
    };
    C.enumerateObject = function (t, e) {
      var i = e.constructor;
      if (cc.Class._isCCClass(i)) {
        this.enumerateCCClass(t, e, i);
      } else {
        for (var n in e) if (e.hasOwnProperty(n) && (95 !== n.charCodeAt(0) || 95 !== n.charCodeAt(1) || "__type__" === n)) {
          var r = e[n];
          if (!("object" == typeof r && r && r === e._iN$t)) {
            this.setObjProp(t, e, n, r);
          }
        }
      }
    };
    C.instantiateObj = function (t) {
      if (t instanceof cc.ValueType) {
        return o.getNewValueTypeCode(t);
      }
      if (t instanceof cc.Asset) {
        return this.getObjRef(t);
      }
      if (t._objFlags & n) {
        return null;
      }
      var e;
      var i = t.constructor;
      if (cc.Class._isCCClass(i)) {
        if (this.parent) {
          if (this.parent instanceof cc.Component) {
            if (t instanceof cc._BaseNode || t instanceof cc.Component) {
              return this.getObjRef(t);
            }
          } else if (this.parent instanceof cc._BaseNode) {
            if (t instanceof cc._BaseNode) {
              if (!t.isChildOf(this.parent)) {
                return this.getObjRef(t);
              }
            } else if (t instanceof cc.Component) {
              var r;
              if (null == (r = t.node) || !r.isChildOf(this.parent)) {
                return this.getObjRef(t);
              }
            }
          }
        }
        e = new g("o", "new " + this.getFuncModule(i, true) + "()");
      } else if (i === Object) {
        e = new g("o", "{}");
      } else {
        if (i) {
          return this.getObjRef(t);
        }
        e = new g("o", "Object.create(null)");
      }
      var s = [e];
      a.value(t, "_iN$t", {
        globalVar: "",
        source: s
      }, true);
      this.objsToClear_iN$t.push(t);
      this.enumerateObject(s, t);
      return ["(function(){", s, "return o;})();"];
    };
    e.exports = {
      compile: function (t) {
        return new x(t, t instanceof cc._BaseNode && t).result;
      },
      equalsToDefault: E
    };
  }, {
    "./CCClass": 162,
    "./CCObject": 168,
    "./attribute": 174,
    "./compiler": 176,
    "./js": 183
  }],
  182: [function (t, e) {
    "use strict";

    var i = t("./CCObject");
    var n = t("../value-types/value-type");
    var r = i.Flags.Destroyed;
    var s = i.Flags.PersistentMask;
    var a = t("./utils").isDomNode;
    var o = t("./js");
    function c(t, e) {
      if (!e) {
        if ("object" != typeof t || Array.isArray(t)) {
          return null;
        }
        if (!t) {
          return null;
        }
        if (!cc.isValid(t)) {
          return null;
        }
      }
      var n;
      if (t instanceof i) {
        if (t._instantiate) {
          cc.game._isCloning = true;
          n = t._instantiate(null, true);
          cc.game._isCloning = false;
          return n;
        }
        if (t instanceof cc.Asset) {
          return null;
        }
      }
      cc.game._isCloning = true;
      n = h(t);
      cc.game._isCloning = false;
      return n;
    }
    var l = [];
    function h(t, e) {
      if (Array.isArray(t)) {
        return null;
      }
      if (a && a(t)) {
        return null;
      }
      var i;
      f(t, i = t._iN$t ? t._iN$t : t.constructor ? new (0, t.constructor)() : Object.create(null), e);
      var n = 0;
      for (var r = l.length; n < r; ++n) {
        l[n]._iN$t = null;
      }
      l.length = 0;
      return i;
    }
    function u(t, e, i, r) {
      var s = t.__values__;
      for (var a = 0; a < s.length; a++) {
        var o = s[a];
        var c = e[o];
        if ("object" == typeof c && c) {
          var l = i[o];
          if (l instanceof n && l.constructor === c.constructor) {
            l.set(c);
          } else {
            i[o] = c._iN$t || d(c, r);
          }
        } else {
          i[o] = c;
        }
      }
    }
    function f(t, e, n) {
      o.value(t, "_iN$t", e, true);
      l.push(t);
      var r = t.constructor;
      if (cc.Class._isCCClass(r)) {
        u(r, t, e, n);
      } else {
        for (var a in t) if (t.hasOwnProperty(a) && (95 !== a.charCodeAt(0) || 95 !== a.charCodeAt(1) || "__type__" === a)) {
          var c = t[a];
          if ("object" == typeof c && c) {
            if (c === e) {
              continue;
            }
            e[a] = c._iN$t || d(c, n);
          } else {
            e[a] = c;
          }
        }
      }
      if (t instanceof i) {
        e._objFlags &= s;
      }
    }
    function d(t, e) {
      if (t instanceof n) {
        return t.clone();
      }
      if (t instanceof cc.Asset) {
        return t;
      }
      var i;
      if (ArrayBuffer.isView(t)) {
        var s = t.length;
        i = new t.constructor(s);
        t._iN$t = i;
        l.push(t);
        for (var a = 0; a < s; ++a) {
          i[a] = t[a];
        }
        return i;
      }
      if (Array.isArray(t)) {
        var c = t.length;
        i = Array(c);
        o.value(t, "_iN$t", i, true);
        l.push(t);
        for (var h = 0; h < c; ++h) {
          var u = t[h];
          i[h] = "object" == typeof u && u ? u._iN$t || d(u, e) : u;
        }
        return i;
      }
      if (t._objFlags & r) {
        return null;
      }
      var _ = t.constructor;
      if (cc.Class._isCCClass(_)) {
        if (e) {
          if (e instanceof cc.Component) {
            if (t instanceof cc._BaseNode || t instanceof cc.Component) {
              return t;
            }
          } else if (e instanceof cc._BaseNode) {
            if (t instanceof cc._BaseNode) {
              if (!t.isChildOf(e)) {
                return t;
              }
            } else if (t instanceof cc.Component) {
              var p;
              if (null == (p = t.node) || !p.isChildOf(e)) {
                return t;
              }
            }
          }
        }
        i = new _();
      } else if (_ === Object) {
        i = {};
      } else {
        if (_) {
          return t;
        }
        i = Object.create(null);
      }
      f(t, i, e);
      return i;
    }
    c._clone = h;
    cc.instantiate = c;
    e.exports = c;
  }, {
    "../value-types/value-type": 259,
    "./CCObject": 168,
    "./js": 183,
    "./utils": 186
  }],
  183: [function (t, e) {
    "use strict";

    var i = new (t("./id-generater"))("TmpCId.");
    function n(t, e) {
      for (; t;) {
        var i = Object.getOwnPropertyDescriptor(t, e);
        if (i) {
          return i;
        }
        t = Object.getPrototypeOf(t);
      }
      return null;
    }
    function r(t, e, i) {
      var r = n(e, t);
      Object.defineProperty(i, t, r);
    }
    var s = {
      isNumber: function (t) {
        return "number" == typeof t || t instanceof Number;
      },
      isString: function (t) {
        return "string" == typeof t || t instanceof String;
      },
      addon: function (t) {
        t = t || {};
        var e = 1;
        for (var i = arguments.length; e < i; e++) {
          var n = arguments[e];
          if (n) {
            if ("object" != typeof n) {
              continue;
            }
            for (var s in n) if (!(s in t)) {
              r(s, n, t);
            }
          }
        }
        return t;
      },
      mixin: function (t) {
        t = t || {};
        var e = 1;
        for (var i = arguments.length; e < i; e++) {
          var n = arguments[e];
          if (n) {
            if ("object" != typeof n) {
              continue;
            }
            for (var s in n) r(s, n, t);
          }
        }
        return t;
      },
      extend: function (t, e) {
        for (var i in e) if (e.hasOwnProperty(i)) {
          t[i] = e[i];
        }
        t.prototype = Object.create(e.prototype, {
          constructor: {
            value: t,
            writable: true,
            configurable: true
          }
        });
        return t;
      },
      getSuper: function (t) {
        var e = t.prototype;
        var i = e && Object.getPrototypeOf(e);
        return i && i.constructor;
      },
      isChildClassOf: function (t, e) {
        if (t && e) {
          if ("function" != typeof t) {
            return false;
          }
          if ("function" != typeof e) {
            return false;
          }
          if (t === e) {
            return true;
          }
          for (;;) {
            if (!(t = s.getSuper(t))) {
              return false;
            }
            if (t === e) {
              return true;
            }
          }
        }
        return false;
      },
      clear: function (t) {
        var e = Object.keys(t);
        for (var i = 0; i < e.length; i++) {
          delete t[e[i]];
        }
      },
      isEmptyObject: function (t) {
        for (var e in t) return false;
        return true;
      },
      getPropertyDescriptor: n
    };
    var a = {
      value: undefined,
      enumerable: false,
      writable: false,
      configurable: true
    };
    s.value = function (t, e, i, n, r) {
      a.value = i;
      a.writable = n;
      a.enumerable = r;
      Object.defineProperty(t, e, a);
      a.value = undefined;
    };
    var o = {
      get: null,
      set: null,
      enumerable: false
    };
    s.getset = function (t, e, i, n, r, s) {
      if ("function" != typeof n) {
        r = n;
        n = undefined;
      }
      o.get = i;
      o.set = n;
      o.enumerable = r;
      o.configurable = s;
      Object.defineProperty(t, e, o);
      o.get = null;
      o.set = null;
    };
    var c = {
      get: null,
      enumerable: false,
      configurable: false
    };
    s.get = function (t, e, i, n, r) {
      c.get = i;
      c.enumerable = n;
      c.configurable = r;
      Object.defineProperty(t, e, c);
      c.get = null;
    };
    var l = {
      set: null,
      enumerable: false,
      configurable: false
    };
    s.set = function (t, e, i, n, r) {
      l.set = i;
      l.enumerable = n;
      l.configurable = r;
      Object.defineProperty(t, e, l);
      l.set = null;
    };
    s.getClassName = function (t) {
      if ("function" == typeof t) {
        var e = t.prototype;
        if (e && e.hasOwnProperty("__classname__") && e.__classname__) {
          return e.__classname__;
        }
        var i = "";
        if (t.name) {
          i = t.name;
        }
        if (t.toString) {
          var n;
          var r = t.toString();
          if ((n = "[" === r.charAt(0) ? r.match(/\[\w+\s*(\w+)\]/) : r.match(/function\s*(\w+)/)) && 2 === n.length) {
            i = n[1];
          }
        }
        return "Object" !== i ? i : "";
      }
      return t && t.constructor ? s.getClassName(t.constructor) : "";
    };
    (function () {
      var t = {};
      var e = {};
      function n(t, e, i) {
        s.getset(s, e, function () {
          return Object.assign({}, i);
        }, function (t) {
          s.clear(i);
          Object.assign(i, t);
        });
        return function (e, n) {
          if (n.prototype.hasOwnProperty(t)) {
            delete i[n.prototype[t]];
          }
          s.value(n.prototype, t, e);
          if (e) {
            var r = i[e];
            if (!(r && r !== n)) {
              i[e] = n;
            }
          }
        };
      }
      s._setClassId = n("__cid__", "_registeredClassIds", t);
      var r = n("__classname__", "_registeredClassNames", e);
      s.setClassName = function (t, e) {
        r(t, e);
        if (!e.prototype.hasOwnProperty("__cid__")) {
          var n = t || i.getNewId();
          if (n) {
            s._setClassId(n, e);
          }
        }
      };
      s.unregisterClass = function () {
        for (var i = 0; i < arguments.length; i++) {
          var n = arguments[i].prototype;
          var r = n.__cid__;
          if (r) {
            delete t[r];
          }
          var s = n.__classname__;
          if (s) {
            delete e[s];
          }
        }
      };
      s._getClassById = function (e) {
        return t[e];
      };
      s.getClassByName = function (t) {
        return e[t];
      };
      s._getClassId = function (t, e) {
        e = undefined === e || e;
        if ("function" == typeof t && t.prototype.hasOwnProperty("__cid__")) {
          return t.prototype.__cid__;
        }
        if (t && t.constructor) {
          var i = t.constructor.prototype;
          if (i && i.hasOwnProperty("__cid__")) {
            return t.__cid__;
          }
        }
        return "";
      };
    })();
    s.obsolete = function (t, e, i, n) {
      var r = /([^.]+)$/;
      var a = r.exec(e)[0];
      var o = r.exec(i)[0];
      function c() {
        return this[o];
      }
      if (n) {
        s.getset(t, a, c, function (t) {
          this[o] = t;
        });
      } else {
        s.get(t, a, c);
      }
    };
    s.obsoletes = function (t, e, i, n) {
      for (var r in i) {
        var a = i[r];
        s.obsolete(t, e + "." + r, a, n);
      }
    };
    var h = /(%d)|(%s)/;
    var u = /%s/;
    function f(t, e) {
      t.splice(e, 1);
    }
    function d(t, e) {
      var i = t.indexOf(e);
      return i >= 0 && (f(t, i), true);
    }
    function _(t, e) {
      if (undefined === e) {
        e = t;
        t = null;
      }
      this.get = null;
      this.count = 0;
      this._pool = Array(e);
      this._cleanup = t;
    }
    s.formatStr = function () {
      var t = arguments.length;
      if (0 === t) {
        return "";
      }
      var e = arguments[0];
      if (1 === t) {
        return "" + e;
      }
      var i = "string" == typeof e && h.test(e);
      if (i) {
        for (var n = 1; n < t; ++n) {
          var r = arguments[n];
          var s = "number" == typeof r ? h : u;
          if (s.test(e)) {
            var a = "" + r;
            e = e.replace(s, a);
          } else {
            e += " " + r;
          }
        }
      } else {
        for (var o = 1; o < t; ++o) {
          e += " " + arguments[o];
        }
      }
      return e;
    };
    s.shiftArguments = function () {
      var t = arguments.length - 1;
      var e = Array(t);
      for (var i = 0; i < t; ++i) {
        e[i] = arguments[i + 1];
      }
      return e;
    };
    s.createMap = function (t) {
      var e = Object.create(null);
      if (t) {
        e["."] = true;
        e["/"] = true;
        delete e["."];
        delete e["/"];
      }
      return e;
    };
    s.array = {
      remove: d,
      fastRemove: function (t, e) {
        var i = t.indexOf(e);
        if (i >= 0) {
          t[i] = t[t.length - 1];
          --t.length;
        }
      },
      removeAt: f,
      fastRemoveAt: function (t, e) {
        var i = t.length;
        if (!(e < 0 || e >= i)) {
          t[e] = t[i - 1];
          t.length = i - 1;
        }
      },
      fastRemoveAll: function (t, e) {
        for (var i; -1 !== (i = t.indexOf(e, i));) {
          t[i] = t[t.length - 1];
          --t.length;
        }
      },
      contains: function (t, e) {
        return t.indexOf(e) >= 0;
      },
      verifyType: function (t, e) {
        if (t && t.length > 0) {
          for (var i = 0; i < t.length; i++) {
            if (!(t[i] instanceof e)) {
              return false;
            }
          }
        }
        return true;
      },
      removeArray: function (t, e) {
        var i = 0;
        for (var n = e.length; i < n; i++) {
          d(t, e[i]);
        }
      },
      appendObjectsAt: function (t, e, i) {
        t.splice.apply(t, [i, 0].concat(e));
        return t;
      },
      copy: function (t) {
        var e;
        var i = t.length;
        var n = Array(i);
        for (e = 0; e < i; e += 1) {
          n[e] = t[e];
        }
        return n;
      },
      MutableForwardIterator: t("../utils/mutable-forward-iterator")
    };
    _.prototype._get = function () {
      if (this.count > 0) {
        --this.count;
        var t = this._pool[this.count];
        this._pool[this.count] = null;
        return t;
      }
      return null;
    };
    _.prototype.put = function (t) {
      var e = this._pool;
      if (this.count < e.length) {
        if (this._cleanup && false === this._cleanup(t)) {
          return;
        }
        e[this.count] = t;
        ++this.count;
      }
    };
    _.prototype.resize = function (t) {
      if (t >= 0) {
        this._pool.length = t;
        if (this.count > t) {
          this.count = t;
        }
      }
    };
    s.Pool = _;
    cc.js = s;
    e.exports = s;
  }, {
    "../utils/mutable-forward-iterator": 237,
    "./id-generater": 179
  }],
  184: [function (t, e, i) {
    "use strict";

    var n = t("./js");
    var r = t("./attribute");
    var s = {
      default: {},
      serializable: {},
      editorOnly: {},
      formerlySerializedAs: {}
    };
    function a(t, e, i, n) {
      if (!t.get && !t.set && t.hasOwnProperty("default")) {
        var r = "_N$" + e;
        t.get = function () {
          return this[r];
        };
        t.set = function (t) {
          var e = this[r];
          this[r] = t;
          i.call(this, e);
        };
        var a = {};
        n[r] = a;
        for (var o in s) {
          var c = s[o];
          if (t.hasOwnProperty(o)) {
            a[o] = t[o];
            if (!c.canUsedInGet) {
              delete t[o];
            }
          }
        }
      }
    }
    function o(t, e) {
      if (Array.isArray(e)) {
        if (!(e.length > 0)) {
          return;
        }
        t.type = e = e[0];
      }
      if ("function" == typeof e) {
        if (e === String) {
          t.type = cc.String;
        } else if (e === Boolean) {
          t.type = cc.Boolean;
        } else if (e === Number) {
          t.type = cc.Float;
        }
      }
    }
    function c(t, e, i) {
      var n = t ? {
        _short: true
      } : {
        _short: true,
        default: e
      };
      if (i) {
        n.type = i;
      }
      return n;
    }
    i.getFullFormOfProperty = function (t, e) {
      return t && t.constructor === Object ? null : Array.isArray(t) && t.length > 0 ? c(e, [], t) : "function" == typeof t ? c(e, n.isChildClassOf(t, cc.ValueType) ? new t() : null, t) : t instanceof r.PrimitiveType ? c(e, t.default) : c(e, t);
    };
    i.preprocessAttrs = function (t) {
      for (var e in t) {
        var n = t[e];
        var r = i.getFullFormOfProperty(n, false);
        if (r) {
          n = t[e] = r;
        }
        if (n) {
          var s = n.notify;
          if (s) {
            a(n, e, s, t);
          }
          if ("type" in n) {
            o(n, n.type);
          }
        }
      }
    };
    i.validateMethodWithProps = function (t) {
      return "function" == typeof t || null === t;
    };
  }, {
    "./CCClass": 162,
    "./attribute": 174,
    "./js": 183
  }],
  185: [function () {
    "use strict";

    var t = [];
    var e = Object.create(null);
    cc._RF = {
      push: function (i, n, r) {
        if (undefined === r) {
          r = n;
          n = "";
        }
        if (n) {
          var s = e[n];
          if (s) {
            i.exports = s.exports;
            return true;
          }
        }
        t.push({
          uuid: n,
          script: r,
          module: i,
          exports: i.exports,
          cls: null
        });
      },
      pop: function () {
        var i = t.pop();
        var n = i.module;
        var r = n.exports;
        if (i.uuid) {
          e[i.uuid] = n;
        }
        if (r === i.exports) {
          for (var s in r) return;
          n.exports = r = i.cls;
        }
      },
      peek: function () {
        return t[t.length - 1];
      }
    };
  }, {}],
  186: [function (t, e) {
    "use strict";

    t("./js");
    e.exports = {
      contains: function (t, e) {
        if ("function" == typeof t.contains) {
          return t.contains(e);
        }
        if ("function" == typeof t.compareDocumentPosition) {
          return !!(16 & t.compareDocumentPosition(e));
        }
        var i = e.parentNode;
        if (i) {
          do {
            if (i === t) {
              return true;
            }
            i = i.parentNode;
          } while (null !== i);
        }
        return false;
      },
      isDomNode: "object" == typeof window && ("function" == typeof Node ? function (t) {
        return t instanceof Node;
      } : function (t) {
        return t && "object" == typeof t && "number" == typeof t.nodeType && "string" == typeof t.nodeName;
      }),
      callInNextTick: function (t, e, i) {
        if (t) {
          setTimeout(function () {
            t(e, i);
          }, 0);
        }
      }
    };
  }, {
    "./js": 183
  }],
  187: [function (t) {
    "use strict";

    t("./platform/js");
    t("./value-types");
    t("./utils");
    t("./platform/CCInputManager");
    t("./platform/CCInputExtension");
    t("./event");
    t("./platform/CCSys");
    t("./platform/CCMacro");
    t("./CCDirector");
    t("./asset-manager");
    t("./renderer");
    t("./platform/CCView");
    t("./platform/CCScreen");
    t("./CCScheduler");
    t("./event-manager");
  }, {
    "./CCDirector": 24,
    "./CCScheduler": 29,
    "./asset-manager": 45,
    "./event": 136,
    "./event-manager": 133,
    "./platform/CCInputExtension": 165,
    "./platform/CCInputManager": 166,
    "./platform/CCMacro": 167,
    "./platform/CCScreen": 170,
    "./platform/CCSys": 171,
    "./platform/CCView": 172,
    "./platform/js": 183,
    "./renderer": 193,
    "./utils": 235,
    "./value-types": 251
  }],
  188: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n = t("./assembler") && t("./assembler").__esModule ? t("./assembler") : {
      default: t("./assembler")
    };
    var r = t("./utils/dynamic-atlas/manager") && t("./utils/dynamic-atlas/manager").__esModule ? t("./utils/dynamic-atlas/manager") : {
      default: t("./utils/dynamic-atlas/manager")
    };
    var s = t("./webgl/render-data") && t("./webgl/render-data").__esModule ? t("./webgl/render-data") : {
      default: t("./webgl/render-data")
    };
    function o(t, e) {
      for (var i = 0; i < e.length; i++) {
        var n = e[i];
        n.enumerable = n.enumerable || false;
        n.configurable = true;
        if ("value" in n) {
          n.writable = true;
        }
        Object.defineProperty(t, n.key, n);
      }
    }
    function c(t) {
      if (undefined === t) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return t;
    }
    function l(t, e) {
      return (l = Object.setPrototypeOf || function (t, e) {
        t.__proto__ = e;
        return t;
      })(t, e);
    }
    var h = function (t) {
      function n() {
        var e;
        (e = t.call(this) || this)._renderData = new s.default();
        e._renderData.init(c(e));
        e.initData();
        e.initLocal();
        return e;
      }
      n.prototype = Object.create(t.prototype);
      n.prototype.constructor = n;
      l(n, t);
      var h;
      var u = n.prototype;
      u.initData = function () {
        this._renderData.createQuadData(0, this.verticesFloats, this.indicesCount);
      };
      u.initLocal = function () {
        this._local = [];
        this._local.length = 4;
      };
      u.updateColor = function (t, e) {
        var i = this._renderData.uintVDatas[0];
        if (i) {
          e = null != e ? e : t.node.color._val;
          var n = this.floatsPerVert;
          var r = this.colorOffset;
          for (var s = i.length; r < s; r += n) {
            i[r] = e;
          }
        }
      };
      u.getBuffer = function () {
        return cc.renderer._handle._meshBuffer;
      };
      u.updateWorldVerts = function (t) {
        var e = this._local;
        var i = this._renderData.vDatas[0];
        var n = t.node._worldMatrix.m;
        var r = n[0];
        var s = n[1];
        var a = n[4];
        var o = n[5];
        var c = n[12];
        var l = n[13];
        var h = e[0];
        var u = e[2];
        var f = e[1];
        var d = e[3];
        var _ = this.floatsPerVert;
        var p = 0;
        if (1 === r && 0 === s && 0 === a && 1 === o) {
          i[p] = h + c;
          i[p + 1] = f + l;
          i[p += _] = u + c;
          i[p + 1] = f + l;
          i[p += _] = h + c;
          i[p + 1] = d + l;
          i[p += _] = u + c;
          i[p + 1] = d + l;
        } else {
          var v = r * h;
          var g = r * u;
          var m = s * h;
          var y = s * u;
          var T = a * f;
          var E = a * d;
          var A = o * f;
          var x = o * d;
          i[p] = v + T + c;
          i[p + 1] = m + A + l;
          i[p += _] = g + T + c;
          i[p + 1] = y + A + l;
          i[p += _] = v + E + c;
          i[p + 1] = m + x + l;
          i[p += _] = g + E + c;
          i[p + 1] = y + x + l;
        }
      };
      u.fillBuffers = function (t, e) {
        if (e.worldMatDirty) {
          this.updateWorldVerts(t);
        }
        var i = this._renderData;
        var n = i.vDatas[0];
        var r = i.iDatas[0];
        var s = this.getBuffer(e);
        var a = s.request(this.verticesCount, this.indicesCount);
        var o = a.byteOffset >> 2;
        var c = s._vData;
        if (n.length + o > c.length) {
          c.set(n.subarray(0, c.length - o), o);
        } else {
          c.set(n, o);
        }
        var l = s._iData;
        var h = a.indiceOffset;
        var u = a.vertexOffset;
        var f = 0;
        for (var d = r.length; f < d; f++) {
          l[h++] = u + r[f];
        }
      };
      u.packToDynamicAtlas = function (t, e) {
        if (!e._original && r.default && e._texture.packable && e._texture.loaded) {
          var i = r.default.insertSpriteFrame(e);
          if (i) {
            e._setDynamicAtlasFrame(i);
          }
        }
        var n = t._materials[0];
        if (n && n.getProperty("texture") !== e._texture._texture) {
          t._vertsDirty = true;
          t._updateMaterial();
        }
      };
      if (h = [{
        key: "verticesFloats",
        get: function () {
          return this.verticesCount * this.floatsPerVert;
        }
      }]) {
        o(n.prototype, h);
      }
      Object.defineProperty(n, "prototype", {
        writable: false
      });
      return n;
    }(n.default);
    i.default = h;
    cc.js.addon(h.prototype, {
      floatsPerVert: 5,
      verticesCount: 4,
      indicesCount: 6,
      uvOffset: 2,
      colorOffset: 4
    });
    cc.Assembler2D = h;
    e.exports = i.default;
  }, {
    "./assembler": 190,
    "./utils/dynamic-atlas/manager": 196,
    "./webgl/render-data": 223
  }],
  189: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n;
    var r = (n = t("../utils/pool")) && n.__esModule ? n : {
      default: n
    };
    function s(t, e) {
      return (s = Object.setPrototypeOf || function (t, e) {
        t.__proto__ = e;
        return t;
      })(t, e);
    }
    var a = 0;
    function o(t) {
      if (!Object.getOwnPropertyDescriptor(t, "__assemblerId__")) {
        t.__assemblerId__ = ++a;
      }
      return t.__assemblerId__;
    }
    var c = new (function (t) {
      function n() {
        var e;
        var i = arguments.length;
        var n = Array(i);
        for (var r = 0; r < i; r++) {
          n[r] = arguments[r];
        }
        (e = t.call.apply(t, [this].concat(n)) || this)._pool = {};
        return e;
      }
      n.prototype = Object.create(t.prototype);
      n.prototype.constructor = n;
      s(n, t);
      var r = n.prototype;
      r.put = function (t) {
        if (t && this.enabled) {
          var e = o(t.constructor);
          var i = this._pool;
          if (!i[e]) {
            i[e] = [];
          }
          if (!(this.count > this.maxSize)) {
            this._clean(t);
            i[e].push(t);
            this.count++;
          }
        }
      };
      r.get = function (t) {
        var e;
        if (this.enabled) {
          var i = this._pool;
          var n = o(t);
          e = i[n] && i[n].pop();
        }
        if (e) {
          this.count--;
        } else {
          e = new t();
        }
        return e;
      };
      r.clear = function () {
        this._pool = {};
        this.count = 0;
      };
      r._clean = function (t) {
        t._renderComp = null;
      };
      return n;
    }(r.default))();
    r.default.register("assembler", c);
    i.default = c;
    e.exports = i.default;
  }, {
    "../utils/pool": 238
  }],
  190: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n;
    var r = t("./webgl/vertex-format");
    var s = (n = t("./assembler-pool")) && n.__esModule ? n : {
      default: n
    };
    var a = function () {
      function t() {
        if (this._extendNative) {
          this._extendNative();
        }
      }
      var e = t.prototype;
      e.init = function (t) {
        this._renderComp = t;
      };
      e.updateRenderData = function () {};
      e.fillBuffers = function () {};
      e.getVfmt = function () {
        return r.vfmtPosUvColor;
      };
      return t;
    }();
    i.default = a;
    a.register = function (t, e) {
      t.__assembler__ = e;
    };
    a.init = function (t) {
      var e = t.constructor;
      for (var i = e.__assembler__; !i;) {
        if (!(e = e.$super)) {
          return;
        }
        i = e.__assembler__;
      }
      if (i.getConstructor) {
        i = i.getConstructor(t);
      }
      if (!t._assembler || t._assembler.constructor !== i) {
        var n = s.default.get(i);
        n.init(t);
        t._assembler = n;
      }
    };
    cc.Assembler = a;
    e.exports = i.default;
  }, {
    "./assembler-pool": 189,
    "./webgl/vertex-format": 225
  }],
  191: [function (t, e) {
    "use strict";

    var i = function (t) {
      var e;
      try {
        e = t.getContext("2d");
      } catch (i) {
        return;
      }
      this._canvas = t;
      this._ctx = e;
      this._caps = {};
      this._stats = {
        drawcalls: 0
      };
      this._vx = this._vy = this._vw = this._vh = 0;
      this._sx = this._sy = this._sw = this._sh = 0;
    };
    i.prototype._restoreTexture = function () {};
    i.prototype.setViewport = function (t, e, i, n) {
      if (!(this._vx === t && this._vy === e && this._vw === i && this._vh === n)) {
        this._vx = t;
        this._vy = e;
        this._vw = i;
        this._vh = n;
      }
    };
    i.prototype.setScissor = function (t, e, i, n) {
      if (!(this._sx === t && this._sy === e && this._sw === i && this._sh === n)) {
        this._sx = t;
        this._sy = e;
        this._sw = i;
        this._sh = n;
      }
    };
    i.prototype.clear = function (t) {
      var e = this._ctx;
      e.clearRect(this._vx, this._vy, this._vw, this._vh);
      if (!(!t || 0 === t[0] && 0 === t[1] && 0 === t[2])) {
        e.fillStyle = "rgb(" + t[0] + "," + t[1] + "," + t[2] + ")";
        e.globalAlpha = t[3];
        e.fillRect(this._vx, this._vy, this._vw, this._vh);
      }
    };
    i.prototype.resetDrawCalls = function () {
      this._stats.drawcalls = 0;
    };
    i.prototype.getDrawCalls = function () {
      return this._stats.drawcalls;
    };
    e.exports = i;
  }, {}],
  192: [function (t, e) {
    "use strict";

    var i = function (t, e) {
      this._device = t;
      this._width = 4;
      this._height = 4;
      this._image = null;
      if (e) {
        if (undefined !== e.width) {
          this._width = e.width;
        }
        if (undefined !== e.height) {
          this._height = e.height;
        }
        this.updateImage(e);
      }
    };
    i.prototype.update = function (t) {
      this.updateImage(t);
    };
    i.prototype.updateImage = function (t) {
      if (t.images && t.images[0]) {
        var e = t.images[0];
        if (e && e !== this._image) {
          this._image = e;
        }
      }
    };
    i.prototype.destroy = function () {
      this._image = null;
    };
    e.exports = i;
  }, {}],
  193: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n = t("../../renderer/gfx") && t("../../renderer/gfx").__esModule ? t("../../renderer/gfx") : {
      default: t("../../renderer/gfx")
    };
    var r = t("../../renderer/core/input-assembler") && t("../../renderer/core/input-assembler").__esModule ? t("../../renderer/core/input-assembler") : {
      default: t("../../renderer/core/input-assembler")
    };
    var s = t("../../renderer/core/pass") && t("../../renderer/core/pass").__esModule ? t("../../renderer/core/pass") : {
      default: t("../../renderer/core/pass")
    };
    var o = cc.renderer = {
      Texture2D: null,
      InputAssembler: r.default,
      Pass: s.default,
      renderEngine: null,
      canvas: null,
      device: null,
      scene: null,
      drawCalls: 0,
      _handle: null,
      _cameraNode: null,
      _camera: null,
      _forward: null,
      _flow: null,
      initWebGL: function (e, i) {
        t("./webgl/assemblers");
        var r = t("./webgl/model-batcher");
        this.Texture2D = n.default.Texture2D;
        this.canvas = e;
        this._flow = cc.RenderFlow;
        var s = t("../../renderer/scene/scene");
        var a = t("../../renderer/renderers/forward-renderer");
        this.device = new n.default.Device(e, i);
        this.scene = new s();
        var o;
        o = this.device;
        var c = {
          defaultTexture: new n.default.Texture2D(o, {
            images: [],
            width: 128,
            height: 128,
            wrapS: n.default.WRAP_REPEAT,
            wrapT: n.default.WRAP_REPEAT,
            format: n.default.TEXTURE_FMT_RGB8,
            genMipmaps: false
          }),
          programTemplates: [],
          programChunks: {}
        };
        this._forward = new a(this.device, c);
        this._handle = new r(this.device, this.scene);
        this._flow.init(this._handle, this._forward);
      },
      initCanvas: function () {
        throw Error(cc.debug.getError(2400, "not support"));
      },
      updateCameraViewport: function () {
        if (cc.director) {
          var t = cc.director.getScene();
          if (t) {
            t.setScale(1, 1, 1);
          }
        }
        if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {
          var e = cc.view.getViewportRect();
          this.device.setViewport(e.x, e.y, e.width, e.height);
          this._camera.a = cc.view.getScaleX();
          this._camera.d = cc.view.getScaleY();
          this._camera.tx = e.x;
          this._camera.ty = e.y + e.height;
        }
      },
      render: function (t, e) {
        this.device.resetDrawCalls();
        if (t) {
          this._flow.render(t, e);
          this.drawCalls = this.device.getDrawCalls();
        }
      },
      clear: function () {
        this._handle.reset();
        this._forward.clear();
      }
    };
    i.default = o;
    e.exports = i.default;
  }, {
    "../../renderer/core/input-assembler": 272,
    "../../renderer/core/pass": 273,
    "../../renderer/gfx": 282,
    "../../renderer/renderers/forward-renderer": 301,
    "../../renderer/scene/scene": 304,
    "./canvas": undefined,
    "./canvas/Device": 191,
    "./canvas/Texture2D": 192,
    "./webgl/assemblers": 205,
    "./webgl/model-batcher": 221
  }],
  194: [function (t, e) {
    "use strict";

    var i;
    var n;
    var r = 0;
    var s = 1 << r++;
    var a = 1 << r++;
    var o = 1 << r++;
    var c = 1 << r++;
    var l = o | c;
    var h = 1 << r++;
    var u = 1 << r++;
    var f = 1 << r++;
    var d = u | f;
    var _ = 1 << r++;
    var p = 1 << r++;
    var v = 1 << r++;
    var g = 1 << r++;
    var m = 0;
    function y() {
      this._func = b;
      this._next = null;
    }
    var T = y.prototype;
    T._doNothing = function () {};
    T._localTransform = function (t) {
      t._updateLocalMatrix();
      t._renderFlag &= ~o;
      this._next._func(t);
    };
    T._worldTransform = function (t) {
      i.worldMatDirty++;
      var e = t._matrix;
      var n = t._trs;
      var r = e.m;
      r[12] = n[0];
      r[13] = n[1];
      r[14] = n[2];
      t._mulMat(t._worldMatrix, t._parent._worldMatrix, e);
      t._renderFlag &= ~c;
      this._next._func(t);
      i.worldMatDirty--;
    };
    T._updateRenderData = function (t) {
      var e = t._renderComponent;
      e._assembler.updateRenderData(e);
      t._renderFlag &= ~h;
      this._next._func(t);
    };
    T._opacity = function (t) {
      i.parentOpacityDirty++;
      this._next._func(t);
      t._renderFlag &= ~u;
      i.parentOpacityDirty--;
    };
    T._color = function (t) {
      var e = t._renderComponent;
      if (e) {
        e._updateColor();
      }
      t._renderFlag &= ~f;
      this._next._func(t);
    };
    T._render = function (t) {
      var e = t._renderComponent;
      e._checkBacth(i, t._cullingMask);
      e._assembler.fillBuffers(e, i);
      this._next._func(t);
    };
    T._children = function (t) {
      var e = m;
      var r = i.parentOpacity;
      var s = i.parentOpacity *= t._opacity / 255;
      var a = (i.worldMatDirty ? c : 0) | (i.parentOpacityDirty ? d : 0);
      var o = t._children;
      var l = 0;
      for (var h = o.length; l < h; l++) {
        var u = o[l];
        u._renderFlag |= a;
        if (u._activeInHierarchy && 0 !== u._opacity) {
          m = u._cullingMask = 0 === u.groupIndex ? e : 1 << u.groupIndex;
          var f = u._color._val;
          u._color._fastSetA(u._opacity * s);
          A[u._renderFlag]._func(u);
          u._color._val = f;
        }
      }
      i.parentOpacity = r;
      this._next._func(t);
    };
    T._postRender = function (t) {
      var e = t._renderComponent;
      e._checkBacth(i, t._cullingMask);
      e._assembler.postFillBuffers(e, i);
      this._next._func(t);
    };
    var E = new y();
    E._func = E._doNothing;
    E._next = E;
    var A = {};
    function x(t, e) {
      if (t === s || t === a) {
        return E;
      }
      var i = new y();
      i._next = e || E;
      switch (t) {
        case o:
          i._func = i._localTransform;
          break;
        case c:
          i._func = i._worldTransform;
          break;
        case h:
          i._func = i._updateRenderData;
          break;
        case u:
          i._func = i._opacity;
          break;
        case f:
          i._func = i._color;
          break;
        case _:
          i._func = i._render;
          break;
        case p:
          i._func = i._children;
          break;
        case v:
          i._func = i._postRender;
      }
      return i;
    }
    function C(t) {
      var e = null;
      for (var i = g; i > 0;) {
        if (i & t) {
          e = x(i, e);
        }
        i >>= 1;
      }
      return e;
    }
    function b(t) {
      var e = t._renderFlag;
      (A[e] = C(e))._func(t);
    }
    y.flows = A;
    y.createFlow = x;
    var S = [];
    y.registerValidate = function (t) {
      if (!t._inValidateList) {
        S.push(t);
        t._inValidateList = true;
      }
    };
    y.validateRenderers = function () {
      var t = 0;
      for (var e = S.length; t < e; t++) {
        var i = S[t];
        if (i.isValid) {
          if (i.enabledInHierarchy) {
            i._validateRender();
          } else {
            i.disableRender();
          }
          i._inValidateList = false;
        }
      }
      S.length = 0;
    };
    y.visitRootNode = function (t) {
      y.validateRenderers();
      var e = m;
      m = t._cullingMask;
      if (t._renderFlag & c) {
        i.worldMatDirty++;
        t._calculWorldMatrix();
        t._renderFlag &= ~c;
        A[t._renderFlag]._func(t);
        i.worldMatDirty--;
      } else {
        A[t._renderFlag]._func(t);
      }
      m = e;
    };
    y.render = function (t, e) {
      i.reset();
      i.walking = true;
      y.visitRootNode(t);
      i.terminate();
      i.walking = false;
      n.render(i._renderScene, e);
    };
    y.renderCamera = function (t, e) {
      i.reset();
      i.walking = true;
      y.visitRootNode(e);
      i.terminate();
      i.walking = false;
      n.renderCamera(t, i._renderScene);
    };
    y.init = function (t, e) {
      i = t;
      n = e;
      A[0] = E;
      for (var r = 1; r < g; r++) {
        A[r] = new y();
      }
    };
    y.getBachther = function () {
      return i;
    };
    y.FLAG_DONOTHING = s;
    y.FLAG_BREAK_FLOW = a;
    y.FLAG_LOCAL_TRANSFORM = o;
    y.FLAG_WORLD_TRANSFORM = c;
    y.FLAG_TRANSFORM = l;
    y.FLAG_UPDATE_RENDER_DATA = h;
    y.FLAG_OPACITY = u;
    y.FLAG_COLOR = f;
    y.FLAG_OPACITY_COLOR = d;
    y.FLAG_RENDER = _;
    y.FLAG_CHILDREN = p;
    y.FLAG_POST_RENDER = v;
    y.FLAG_FINAL = g;
    e.exports = cc.RenderFlow = y;
  }, {}],
  195: [function (t, e) {
    "use strict";

    var i = t("../../../assets/CCRenderTexture");
    function r(t, e) {
      var r = new i();
      r.initWithSize(t, e);
      r.update();
      this._texture = r;
      this._x = 2;
      this._y = 2;
      this._nexty = 2;
      this._width = t;
      this._height = e;
      this._innerTextureInfos = {};
      this._innerSpriteFrames = [];
      this._count = 0;
    }
    r.DEFAULT_HASH = new i()._getHash();
    cc.js.mixin(r.prototype, {
      insertSpriteFrame: function (t) {
        var e = t._rect;
        var i = t._texture;
        var r = this._innerTextureInfos[i._id];
        var s = e.x;
        var a = e.y;
        if (r) {
          s += r.x;
          a += r.y;
        } else {
          var o = i.width;
          var c = i.height;
          if (this._x + o + 2 > this._width) {
            this._x = 2;
            this._y = this._nexty;
          }
          if (this._y + c + 2 > this._nexty) {
            this._nexty = this._y + c + 2;
          }
          if (this._nexty > this._height) {
            return null;
          }
          if (cc.dynamicAtlasManager.textureBleeding) {
            if (o <= 8 || c <= 8) {
              this._texture.drawTextureAt(i, this._x - 1, this._y - 1);
              this._texture.drawTextureAt(i, this._x - 1, this._y + 1);
              this._texture.drawTextureAt(i, this._x + 1, this._y - 1);
              this._texture.drawTextureAt(i, this._x + 1, this._y + 1);
            }
            this._texture.drawTextureAt(i, this._x - 1, this._y);
            this._texture.drawTextureAt(i, this._x + 1, this._y);
            this._texture.drawTextureAt(i, this._x, this._y - 1);
            this._texture.drawTextureAt(i, this._x, this._y + 1);
          }
          this._texture.drawTextureAt(i, this._x, this._y);
          this._innerTextureInfos[i._id] = {
            x: this._x,
            y: this._y,
            texture: i
          };
          this._count++;
          s += this._x;
          a += this._y;
          this._x += o + 2;
          this._dirty = true;
        }
        var l = {
          x: s,
          y: a,
          texture: this._texture
        };
        this._innerSpriteFrames.push(t);
        return l;
      },
      update: function () {
        if (this._dirty) {
          this._texture.update();
          this._dirty = false;
        }
      },
      deleteInnerTexture: function (t) {
        if (t && this._innerTextureInfos[t._id]) {
          delete this._innerTextureInfos[t._id];
          this._count--;
        }
      },
      isEmpty: function () {
        return this._count <= 0;
      },
      reset: function () {
        this._x = 2;
        this._y = 2;
        this._nexty = 2;
        var t = this._innerSpriteFrames;
        var e = 0;
        for (var i = t.length; e < i; e++) {
          var r = t[e];
          if (r.isValid) {
            r._resetDynamicAtlasFrame();
          }
        }
        this._innerSpriteFrames.length = 0;
        this._innerTextureInfos = {};
      },
      destroy: function () {
        this.reset();
        this._texture.destroy();
      }
    });
    e.exports = r;
  }, {
    "../../../assets/CCRenderTexture": 65
  }],
  196: [function (t, e) {
    "use strict";

    var i = t("./atlas");
    var n = [];
    var r = -1;
    var s = 5;
    var a = 2048;
    var o = 512;
    var c = true;
    var l = null;
    function h() {
      var t = n[++r];
      if (!t) {
        t = new i(a, a);
        n.push(t);
      }
      return t;
    }
    function u() {
      d.reset();
    }
    var f = false;
    var d = {
      Atlas: i,
      get enabled() {
        return f;
      },
      set enabled(t) {
        if (f !== t) {
          if (t) {
            this.reset();
            cc.director.on(cc.Director.EVENT_BEFORE_SCENE_LAUNCH, u);
          } else {
            cc.director.off(cc.Director.EVENT_BEFORE_SCENE_LAUNCH, u);
          }
          f = t;
        }
      },
      get maxAtlasCount() {
        return s;
      },
      set maxAtlasCount(t) {
        s = t;
      },
      get atlasCount() {
        return n.length;
      },
      get textureBleeding() {
        return c;
      },
      set textureBleeding(t) {
        c = t;
      },
      get textureSize() {
        return a;
      },
      set textureSize(t) {
        a = t;
      },
      get maxFrameSize() {
        return o;
      },
      set maxFrameSize(t) {
        o = t;
      },
      insertSpriteFrame: function (t) {
        if (!f || r === s || !t || t._original) {
          return null;
        }
        if (!t._texture.packable) {
          return null;
        }
        var e = n[r];
        if (!e) {
          e = h();
        }
        var i = e.insertSpriteFrame(t);
        return i || r === s ? i : (e = h()).insertSpriteFrame(t);
      },
      reset: function () {
        var t = 0;
        for (var e = n.length; t < e; t++) {
          n[t].destroy();
        }
        n.length = 0;
        r = -1;
      },
      deleteAtlasSpriteFrame: function (t) {
        if (t._original) {
          var e = t._original._texture;
          this.deleteAtlasTexture(e);
        }
      },
      deleteAtlasTexture: function (t) {
        if (t) {
          for (var e = n.length - 1; e >= 0; e--) {
            n[e].deleteInnerTexture(t);
            if (n[e].isEmpty()) {
              n[e].destroy();
              n.splice(e, 1);
              r--;
            }
          }
        }
      },
      showDebug: function (t) {
        if (t) {
          if (!l || !l.isValid) {
            var e = cc.visibleRect.width;
            var i = cc.visibleRect.height;
            (l = new cc.Node("DYNAMIC_ATLAS_DEBUG_NODE")).width = e;
            l.height = i;
            l.x = e / 2;
            l.y = i / 2;
            l.zIndex = cc.macro.MAX_ZINDEX;
            l.parent = cc.director.getScene();
            l.groupIndex = cc.Node.BuiltinGroupIndex.DEBUG;
            cc.Camera._setupDebugCamera();
            var s = l.addComponent(cc.ScrollView);
            var o = new cc.Node("CONTENT");
            var c = o.addComponent(cc.Layout);
            c.type = cc.Layout.Type.VERTICAL;
            c.resizeMode = cc.Layout.ResizeMode.CONTAINER;
            o.parent = l;
            o.width = a;
            o.anchorY = 1;
            o.x = a;
            s.content = o;
            for (var h = 0; h <= r; h++) {
              var u = new cc.Node("ATLAS");
              n[h]._texture;
              var f = new cc.SpriteFrame();
              f.setTexture(n[h]._texture);
              u.addComponent(cc.Sprite).spriteFrame = f;
              u.parent = o;
            }
          }
          return l;
        }
        if (l) {
          l.parent = null;
          l = null;
        }
      },
      update: function () {
        if (this.enabled) {
          for (var t = 0; t <= r; t++) {
            n[t].update();
          }
        }
      }
    };
    e.exports = cc.dynamicAtlasManager = d;
  }, {
    "./atlas": 195
  }],
  197: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n;
    var r = (n = t("../../assembler-2d")) && n.__esModule ? n : {
      default: n
    };
    function s(t, e) {
      return (s = Object.setPrototypeOf || function (t, e) {
        t.__proto__ = e;
        return t;
      })(t, e);
    }
    var a = t("../../../utils/text-utils");
    var o = t("../../../platform/CCMacro");
    var c = t("../../../components/CCLabel").Overflow;
    var l = t("../utils").shareLabelInfo;
    var h = function () {
      this.char = "";
      this.valid = true;
      this.x = 0;
      this.y = 0;
      this.line = 0;
      this.hash = "";
    };
    var u = cc.rect();
    var f = null;
    var d = [];
    var _ = [];
    var p = [];
    var v = [];
    var g = null;
    var m = 0;
    var y = 0;
    var T = 0;
    var E = 0;
    var A = 0;
    var x = 1;
    var C = null;
    var b = cc.size();
    var S = "";
    var R = 0;
    var M = 0;
    var w = 0;
    var I = 0;
    var O = 0;
    var L = 0;
    var P = 0;
    var D = false;
    var N = 0;
    var F = 0;
    var B = 0;
    var V = 0;
    var k = 0;
    var U = 0;
    var z = function (t) {
      function n() {
        return t.apply(this, arguments) || this;
      }
      n.prototype = Object.create(t.prototype);
      n.prototype.constructor = n;
      s(n, t);
      var r = n.prototype;
      r.updateRenderData = function (t) {
        if (t._vertsDirty && f !== t) {
          f = t;
          this._reserveQuads(t, t.string.toString().length);
          this._updateFontFamily(t);
          this._updateProperties(t);
          this._updateLabelInfo(t);
          this._updateContent();
          this.updateWorldVerts(t);
          f._actualFontSize = R;
          f.node.setContentSize(b);
          f._vertsDirty = false;
          f = null;
          this._resetProperties();
        }
      };
      r._updateFontScale = function () {
        x = R / M;
      };
      r._updateFontFamily = function (t) {
        var e = t.font;
        C = e.spriteFrame;
        g = e._fntConfig;
        l.fontAtlas = e._fontDefDictionary;
        this.packToDynamicAtlas(t, C);
      };
      r._updateLabelInfo = function () {
        l.hash = "";
        l.margin = 0;
      };
      r._updateProperties = function (t) {
        S = t.string.toString();
        R = t.fontSize;
        M = g ? g.fontSize : t.fontSize;
        w = t.horizontalAlign;
        I = t.verticalAlign;
        O = t.spacingX;
        P = t.overflow;
        L = t._lineHeight;
        b.width = t.node.width;
        b.height = t.node.height;
        V = f._customOffsetX;
        k = f._customOffsetY;
        U = f.actualLineHeight;
        if (P === c.NONE) {
          D = false;
          b.width += 2 * l.margin;
          b.height += 2 * l.margin;
        } else if (P === c.RESIZE_HEIGHT) {
          D = true;
          b.height += 2 * l.margin;
        } else {
          D = t.enableWrapText;
        }
        l.lineHeight = L;
        l.fontSize = R;
        l.actualLineHeight = U;
        this._setupBMFontOverflowMetrics();
      };
      r._resetProperties = function () {
        g = null;
        C = null;
        l.hash = "";
        l.margin = 0;
      };
      r._updateContent = function () {
        this._updateFontScale();
        this._computeHorizontalKerningForText();
        this._alignText();
      };
      r._computeHorizontalKerningForText = function () {
        var t;
        var e = S;
        var i = e.length;
        if (g) {
          t = g.kerningDict;
        }
        if (t && !cc.js.isEmptyObject(t)) {
          var r = -1;
          for (var s = 0; s < i; ++s) {
            var a = e.charCodeAt(s);
            var o = t[r << 16 | 65535 & a] || 0;
            d[s] = s < i - 1 ? o : 0;
            r = a;
          }
        } else {
          d.length = 0;
        }
      };
      r._multilineTextWrap = function (t) {
        var e = S.length;
        var i = 0;
        var n = 0;
        var r = 0;
        var s = 0;
        var o = 0;
        var h = 0;
        var u = 0;
        var f = null;
        var _ = cc.v2(0, 0);
        for (var v = 0; v < e;) {
          var T = S.charAt(v);
          if ("\n" !== T) {
            var C = t(S, v, e);
            var R = h;
            var M = u;
            var w = o;
            var I = n;
            var V = false;
            for (var k = 0; k < C; ++k) {
              var U = v + k;
              if ("\r" !== (T = S.charAt(U))) {
                if (f = l.fontAtlas.getLetterDefinitionForChar(T, l)) {
                  var z = I + f.offsetX * x - l.margin;
                  if (D && B > 0 && n > 0 && z + f.w * x > B && !a.isUnicodeSpace(T)) {
                    p.push(o);
                    o = 0;
                    i++;
                    n = 0;
                    r -= L * this._getFontScale() + 0;
                    V = true;
                    break;
                  }
                  _.x = z;
                  _.y = r - f.offsetY * x + l.margin;
                  this._recordLetterInfo(_, T, U, i);
                  if (U + 1 < d.length && U < e - 1) {
                    I += d[U + 1];
                  }
                  I += f.xAdvance * x + O - 2 * l.margin;
                  w = _.x + f.w * x - l.margin;
                  if (R < _.y) {
                    R = _.y;
                  }
                  if (M > _.y - f.h * x) {
                    M = _.y - f.h * x;
                  }
                } else {
                  this._recordPlaceholderInfo(U, T);
                  if (g) {
                    g.atlasName;
                  }
                }
              } else {
                this._recordPlaceholderInfo(U, T);
              }
            }
            if (!V) {
              n = I;
              if (h < R) {
                h = R;
              }
              if (u > M) {
                u = M;
              }
              if (s < (o = w)) {
                s = o;
              }
              v += C;
            }
          } else {
            p.push(o);
            o = 0;
            i++;
            n = 0;
            r -= L * this._getFontScale() + 0;
            this._recordPlaceholderInfo(v, T);
            v++;
          }
        }
        p.push(o);
        y = (m = i + 1) * L * this._getFontScale();
        if (m > 1) {
          y += 0 * (m - 1);
        }
        b.width = N;
        b.height = F;
        if (N <= 0) {
          b.width = parseFloat(s.toFixed(2)) + 2 * l.margin;
        }
        if (F <= 0) {
          b.height = parseFloat(y.toFixed(2)) + 2 * l.margin;
        }
        E = b.height;
        A = 0;
        if (P !== c.CLAMP) {
          if (h > 0) {
            E = b.height + h;
          }
          if (u < -y) {
            A = y + u;
          }
        }
        return true;
      };
      r._getFirstCharLen = function () {
        return 1;
      };
      r._getFontScale = function () {
        return P === c.SHRINK ? x : 1;
      };
      r._getFirstWordLen = function (t, e, i) {
        var n = t.charAt(e);
        if (a.isUnicodeCJK(n) || "\n" === n || a.isUnicodeSpace(n)) {
          return 1;
        }
        var r = 1;
        var s = l.fontAtlas.getLetterDefinitionForChar(n, l);
        if (!s) {
          return r;
        }
        var o = s.xAdvance * x + O;
        for (var c = e + 1; c < i && (n = t.charAt(c), s = l.fontAtlas.getLetterDefinitionForChar(n, l)); ++c) {
          if (o + s.offsetX * x + s.w * x > B && !a.isUnicodeSpace(n) && B > 0) {
            return r;
          }
          o += s.xAdvance * x + O;
          if ("\n" === n || a.isUnicodeSpace(n) || a.isUnicodeCJK(n)) {
            break;
          }
          r++;
        }
        return r;
      };
      r._multilineTextWrapByWord = function () {
        return this._multilineTextWrap(this._getFirstWordLen);
      };
      r._multilineTextWrapByChar = function () {
        return this._multilineTextWrap(this._getFirstCharLen);
      };
      r._recordPlaceholderInfo = function (t, e) {
        if (t >= _.length) {
          var i = new h();
          _.push(i);
        }
        _[t].char = e;
        _[t].hash = e.charCodeAt(0) + l.hash;
        _[t].valid = false;
      };
      r._recordLetterInfo = function (t, e, i, n) {
        if (i >= _.length) {
          var r = new h();
          _.push(r);
        }
        var s = e.charCodeAt(0) + l.hash;
        _[i].line = n;
        _[i].char = e;
        _[i].hash = s;
        _[i].valid = l.fontAtlas.getLetter(s).valid;
        _[i].x = t.x;
        _[i].y = t.y;
      };
      r._alignText = function () {
        y = 0;
        p.length = 0;
        this._multilineTextWrapByWord();
        this._computeAlignmentOffset();
        if (P === c.SHRINK && R > 0 && this._isVerticalClamp()) {
          this._shrinkLabelToContentSize(this._isVerticalClamp);
        }
        if (!this._updateQuads()) {
          if (P === c.SHRINK) {
            this._shrinkLabelToContentSize(this._isHorizontalClamp);
          }
        }
      };
      r._scaleFontSizeDown = function (t) {
        var e = true;
        if (!t) {
          t = .1;
          e = false;
        }
        R = t;
        if (e) {
          this._updateContent();
        }
      };
      r._shrinkLabelToContentSize = function (t) {
        var e = 0;
        var i = 0 | R;
        for (var n = 0; e < i;) {
          var r = n = e + i + 1 >> 1;
          if (r <= 0) {
            break;
          }
          x = r / M;
          this._multilineTextWrapByWord();
          this._computeAlignmentOffset();
          if (t()) {
            i = n - 1;
          } else {
            e = n;
          }
        }
        var s = e;
        if (s >= 0) {
          this._scaleFontSizeDown(s);
        }
      };
      r._isVerticalClamp = function () {
        return y > b.height;
      };
      r._isHorizontalClamp = function () {
        var t = false;
        var e = 0;
        for (var i = S.length; e < i; ++e) {
          var n = _[e];
          if (n.valid) {
            var r = l.fontAtlas.getLetter(n.hash);
            var s = n.x + r.w * x;
            var a = n.line;
            if (N > 0) {
              if (D) {
                if (p[a] > b.width && (s > b.width || s < 0)) {
                  t = true;
                  break;
                }
              } else if (s > b.width) {
                t = true;
                break;
              }
            }
          }
        }
        return t;
      };
      r._isHorizontalClamped = function (t, e) {
        var i = p[e];
        var n = t > b.width || t < 0;
        return D ? i > b.width && n : n;
      };
      r._updateQuads = function () {
        var t = C ? C._texture : l.fontAtlas.getTexture();
        var e = f.node;
        this.verticesCount = this.indicesCount = 0;
        if (this._renderData) {
          this._renderData.dataLength = 0;
        }
        var n = e._anchorPoint.x * b.width;
        var r = e._anchorPoint.y * b.height;
        var s = true;
        var a = 0;
        for (var o = S.length; a < o; ++a) {
          var h = _[a];
          if (h.valid) {
            var d = l.fontAtlas.getLetter(h.hash);
            u.height = d.h;
            u.width = d.w;
            u.x = d.u;
            u.y = d.v;
            var p = h.y + T;
            if (F > 0) {
              if (p > E) {
                var g = p - E;
                u.y += g;
                u.height -= g;
                p -= g;
              }
              if (p - d.h * x < A && P === c.CLAMP) {
                u.height = p < A ? 0 : (p - A) / x;
              }
            }
            var m = h.line;
            var y = h.x + d.w / 2 * x + v[m];
            if (N > 0 && this._isHorizontalClamped(y, m)) {
              if (P === c.CLAMP) {
                u.width = 0;
              } else if (P === c.SHRINK) {
                if (b.width > d.w) {
                  s = false;
                  break;
                }
                u.width = 0;
              }
            }
            if (u.height > 0 && u.width > 0) {
              var R = this._determineRect(u);
              var M = h.x + v[h.line] + V;
              this.appendQuad(f, t, u, R, M - n, p - r + k, x);
            }
          }
        }
        this._quadsUpdated(f);
        return s;
      };
      r._determineRect = function (t) {
        var e = C.isRotated();
        var i = C._originalSize;
        var n = C._rect;
        var r = C._offset;
        var s = r.x + (i.width - n.width) / 2;
        var a = r.y - (i.height - n.height) / 2;
        if (e) {
          var o = t.x;
          t.x = n.x + n.height - t.y - t.height - a;
          t.y = o + n.y - s;
          if (t.y < 0) {
            t.height = t.height + a;
          }
        } else {
          t.x += n.x - s;
          t.y += n.y + a;
        }
        return e;
      };
      r._computeAlignmentOffset = function () {
        v.length = 0;
        switch (w) {
          case o.TextAlignment.LEFT:
            for (var t = 0; t < m; ++t) {
              v.push(0);
            }
            break;
          case o.TextAlignment.CENTER:
            var e = 0;
            for (var i = p.length; e < i; e++) {
              v.push((b.width - p[e]) / 2);
            }
            break;
          case o.TextAlignment.RIGHT:
            var n = 0;
            for (var r = p.length; n < r; n++) {
              v.push(b.width - p[n]);
            }
        }
        T = b.height;
        if (I !== o.VerticalTextAlignment.TOP) {
          var s = b.height - y + L * this._getFontScale() - M * x;
          if (I === o.VerticalTextAlignment.BOTTOM) {
            T -= s;
          } else {
            T -= s / 2;
          }
        }
      };
      r._setupBMFontOverflowMetrics = function () {
        var t = b.width;
        var e = b.height;
        if (P === c.RESIZE_HEIGHT) {
          e = 0;
        }
        if (P === c.NONE) {
          t = 0;
          e = 0;
        }
        N = t;
        F = e;
        B = t;
      };
      r.updateWorldVerts = function () {};
      r.appendQuad = function () {};
      r._quadsUpdated = function () {};
      r._reserveQuads = function () {};
      return n;
    }(r.default);
    i.default = z;
    e.exports = i.default;
  }, {
    "../../../components/CCLabel": 102,
    "../../../platform/CCMacro": 167,
    "../../../utils/text-utils": 243,
    "../../assembler-2d": 188,
    "../utils": 201
  }],
  198: [function (t, e) {
    "use strict";

    function i() {
      this._rect = null;
      this.uv = [];
      this._texture = null;
      this._original = null;
    }
    i.prototype = {
      constructor: i,
      getRect: function () {
        return cc.rect(this._rect);
      },
      setRect: function (t) {
        this._rect = t;
        if (this._texture) {
          this._calculateUV();
        }
      },
      _setDynamicAtlasFrame: function (t) {
        if (t) {
          this._original = {
            _texture: this._texture,
            _x: this._rect.x,
            _y: this._rect.y
          };
          this._texture = t.texture;
          this._rect.x = t.x;
          this._rect.y = t.y;
          this._calculateUV();
        }
      },
      _resetDynamicAtlasFrame: function () {
        if (this._original) {
          this._rect.x = this._original._x;
          this._rect.y = this._original._y;
          this._texture = this._original._texture;
          this._original = null;
          this._calculateUV();
        }
      },
      _refreshTexture: function (t) {
        this._texture = t;
        this._rect = cc.rect(0, 0, t.width, t.height);
        this._calculateUV();
      },
      _calculateUV: function () {
        var t = this._rect;
        var e = this._texture;
        var i = this.uv;
        var n = e.width;
        var r = e.height;
        var s = 0 === n ? 0 : t.x / n;
        var a = 0 === n ? 0 : (t.x + t.width) / n;
        var o = 0 === r ? 0 : (t.y + t.height) / r;
        var c = 0 === r ? 0 : t.y / r;
        i[0] = s;
        i[1] = o;
        i[2] = a;
        i[3] = o;
        i[4] = s;
        i[5] = c;
        i[6] = a;
        i[7] = c;
      }
    };
    e.exports = i;
  }, {}],
  199: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n;
    var r = (n = t("../../webgl/assemblers/label/2d/bmfont")) && n.__esModule ? n : {
      default: n
    };
    function s(t, e) {
      return (s = Object.setPrototypeOf || function (t, e) {
        t.__proto__ = e;
        return t;
      })(t, e);
    }
    var a = t("../../../components/CCLabel");
    var o = t("../../../components/CCLabelOutline");
    var c = t("../../../utils/text-utils");
    var l = t("../../../components/CCComponent");
    var h = t("../../../assets/CCRenderTexture");
    var u = cc.js.isChildClassOf(o, l);
    var f = t("../utils").getFontFamily;
    var d = t("../utils").shareLabelInfo;
    var _ = cc.BitmapFont.FontLetterDefinition;
    var p = cc.BitmapFont.FontAtlas;
    var v = cc.Color.WHITE;
    function m(t, e) {
      this._texture = null;
      this._labelInfo = e;
      this._char = t;
      this._hash = null;
      this._data = null;
      this._canvas = null;
      this._context = null;
      this._width = 0;
      this._height = 0;
      this._offsetY = 0;
      this._hash = t.charCodeAt(0) + e.hash;
    }
    function y(t, e) {
      var i = new h();
      i.initWithSize(t, e);
      i.update();
      this._fontDefDictionary = new p(i);
      this._x = 0;
      this._y = 0;
      this._nexty = 0;
      this._width = t;
      this._height = e;
      cc.director.on(cc.Director.EVENT_BEFORE_SCENE_LAUNCH, this.beforeSceneLoad, this);
    }
    m.prototype = {
      constructor: m,
      updateRenderData: function () {
        this._updateProperties();
        this._updateTexture();
      },
      _updateProperties: function () {
        this._texture = new cc.Texture2D();
        this._data = a._canvasPool.get();
        this._canvas = this._data.canvas;
        this._context = this._data.context;
        this._context.font = this._labelInfo.fontDesc;
        var t = c.safeMeasureText(this._context, this._char, this._labelInfo.fontDesc);
        var e = 2 * this._labelInfo.margin + 2;
        this._width = parseFloat(t.toFixed(2)) + e;
        this._height = (1 + c.BASELINE_RATIO) * this._labelInfo.fontSize + e;
        this._offsetY = -this._labelInfo.fontSize * c.BASELINE_RATIO / 2;
        if (this._canvas.width !== this._width) {
          this._canvas.width = this._width;
        }
        if (this._canvas.height !== this._height) {
          this._canvas.height = this._height;
        }
        this._texture.initWithElement(this._canvas);
      },
      _updateTexture: function () {
        var t = this._context;
        var e = this._labelInfo;
        var i = this._canvas.width;
        var n = this._canvas.height;
        var r = this._labelInfo.fontSize;
        var s = i / 2;
        var a = n / 2 + r * c.MIDDLE_RATIO + r * c.BASELINE_OFFSET;
        var o = e.color;
        t.lineJoin = "round";
        t.textAlign = "center";
        t.clearRect(0, 0, i, n);
        t.fillStyle = "rgba(" + o.r + ", " + o.g + ", " + o.b + ", 0.004)";
        t.fillRect(0, 0, i, n);
        t.font = e.fontDesc;
        t.fillStyle = "rgba(" + o.r + ", " + o.g + ", " + o.b + ", 1)";
        if (e.isOutlined && e.margin > 0) {
          var l = e.out || v;
          t.strokeStyle = "rgba(" + l.r + ", " + l.g + ", " + l.b + ", " + l.a / 255 + ")";
          t.lineWidth = 2 * e.margin;
          t.strokeText(this._char, s, a);
        }
        t.fillText(this._char, s, a);
        this._texture.handleLoadedTexture();
      },
      destroy: function () {
        this._texture.destroy();
        this._texture = null;
        a._canvasPool.put(this._data);
      }
    };
    cc.js.mixin(y.prototype, {
      insertLetterTexture: function (t) {
        var e = t._texture;
        var i = e.width;
        var n = e.height;
        if (this._x + i + 0 > this._width) {
          this._x = 0;
          this._y = this._nexty;
        }
        if (this._y + n > this._nexty) {
          this._nexty = this._y + n + 0;
        }
        if (this._nexty > this._height) {
          return null;
        }
        this._fontDefDictionary._texture.drawTextureAt(e, this._x, this._y);
        this._dirty = true;
        var r = new _();
        r.u = this._x + 1;
        r.v = this._y + 1;
        r.texture = this._fontDefDictionary._texture;
        r.valid = true;
        r.w = t._width - 2;
        r.h = t._height - 2;
        r.xAdvance = r.w;
        r.offsetY = t._offsetY;
        this._x += i + 0;
        this._fontDefDictionary.addLetterDefinitions(t._hash, r);
        return r;
      },
      update: function () {
        if (this._dirty) {
          this._fontDefDictionary._texture.update();
          this._dirty = false;
        }
      },
      reset: function () {
        this._x = 0;
        this._y = 0;
        this._nexty = 0;
        var t = this._fontDefDictionary._letterDefinitions;
        var e = 0;
        for (var i = t.length; e < i; e++) {
          var n = t[e];
          if (n.isValid) {
            n.destroy();
          }
        }
        this._fontDefDictionary.clear();
      },
      destroy: function () {
        this.reset();
        this._fontDefDictionary._texture.destroy();
        this._fontDefDictionary._texture = null;
      },
      beforeSceneLoad: function () {
        this.clearAllCache();
      },
      clearAllCache: function () {
        this.destroy();
        var t = new h();
        t.initWithSize(this._width, this._height);
        t.update();
        this._fontDefDictionary._texture = t;
      },
      getLetter: function (t) {
        return this._fontDefDictionary._letterDefinitions[t];
      },
      getTexture: function () {
        return this._fontDefDictionary.getTexture();
      },
      getLetterDefinitionForChar: function (t, e) {
        var i = t.charCodeAt(0) + e.hash;
        var n = this._fontDefDictionary._letterDefinitions[i];
        if (!n) {
          var r = new m(t, e);
          r.updateRenderData();
          n = this.insertLetterTexture(r);
          r.destroy();
        }
        return n;
      }
    });
    var T = null;
    var E = function (t) {
      function n() {
        return t.apply(this, arguments) || this;
      }
      n.prototype = Object.create(t.prototype);
      n.prototype.constructor = n;
      s(n, t);
      var r = n.prototype;
      r._getAssemblerData = function () {
        if (!T) {
          T = new y(2048, 2048);
          cc.Label._shareAtlas = T;
        }
        return T.getTexture();
      };
      r._updateFontFamily = function (t) {
        d.fontAtlas = T;
        d.fontFamily = f(t);
        var e = u && t.getComponent(o);
        if (e && e.enabled) {
          d.isOutlined = true;
          d.margin = e.width;
          d.out = e.color.clone();
          d.out.a = e.color.a * t.node.color.a / 255;
        } else {
          d.isOutlined = false;
          d.margin = 0;
        }
      };
      r._updateLabelInfo = function (t) {
        var i;
        var n;
        d.fontDesc = this._getFontDesc();
        d.color = t.node.color;
        i = d.color.toHEX();
        n = "";
        if (d.isOutlined && d.margin > 0) {
          n = n + d.margin + d.out.toHEX();
        }
        d.hash = "" + d.fontSize + d.fontFamily + i + n + d.actualLineHeight;
      };
      r._getFontDesc = function () {
        return d.fontSize.toString() + "px " + d.fontFamily;
      };
      r._computeHorizontalKerningForText = function () {};
      r._determineRect = function () {
        return false;
      };
      return n;
    }(r.default);
    i.default = E;
    e.exports = i.default;
  }, {
    "../../../assets/CCRenderTexture": 65,
    "../../../components/CCComponent": 100,
    "../../../components/CCLabel": 102,
    "../../../components/CCLabelOutline": 103,
    "../../../utils/text-utils": 243,
    "../../webgl/assemblers/label/2d/bmfont": 206,
    "../utils": 201
  }],
  200: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n;
    var r = (n = t("../../assembler-2d")) && n.__esModule ? n : {
      default: n
    };
    function s(t, e) {
      return (s = Object.setPrototypeOf || function (t, e) {
        t.__proto__ = e;
        return t;
      })(t, e);
    }
    var a;
    var o = t("../../../utils/text-utils");
    var c = t("../../../platform/CCMacro");
    var l = t("../../../components/CCLabel");
    var h = t("../../../components/CCLabelOutline");
    var u = t("../../../components/CCLabelShadow");
    var f = l.Overflow;
    var d = t("../utils").deleteFromDynamicAtlas;
    var _ = t("../utils").getFontFamily;
    var p = null;
    var v = null;
    var g = null;
    var m = "";
    var y = "";
    var T = 0;
    var E = 0;
    var A = [];
    var x = cc.Size.ZERO;
    var C = 0;
    var b = 0;
    var S = 0;
    var R = null;
    var M = "";
    var w = f.NONE;
    var I = false;
    var O = false;
    var L = 0;
    var P = 0;
    var D = null;
    var N = cc.Color.WHITE;
    var F = null;
    var B = cc.Color.BLACK;
    var V = cc.rect();
    var k = cc.Size.ZERO;
    var U = cc.Size.ZERO;
    var z = false;
    var G = false;
    var H = false;
    var W = 0;
    var X = cc.Vec2.ZERO;
    var Y = 0;
    var j = ["left", "center", "right"];
    var q = function (t) {
      function n() {
        return t.apply(this, arguments) || this;
      }
      n.prototype = Object.create(t.prototype);
      n.prototype.constructor = n;
      s(n, t);
      var r = n.prototype;
      r._getAssemblerData = function () {
        (a = l._canvasPool.get()).canvas.width = a.canvas.height = 1;
        return a;
      };
      r._resetAssemblerData = function (t) {
        if (t) {
          l._canvasPool.put(t);
        }
      };
      r.updateRenderData = function (e) {
        t.prototype.updateRenderData.call(this, e);
        if (e._vertsDirty) {
          this._updateProperties(e);
          this._calculateLabelFont();
          this._updateLabelDimensions();
          this._updateTexture(e);
          this._calDynamicAtlas(e);
          e._actualFontSize = T;
          e.node.setContentSize(U);
          this.updateVerts(e);
          e._vertsDirty = false;
          p = null;
          v = null;
          g = null;
        }
      };
      r.updateVerts = function () {};
      r._updatePaddingRect = function () {
        var t = 0;
        var e = 0;
        var i = 0;
        var n = 0;
        var r = 0;
        k.width = k.height = 0;
        if (D) {
          t = e = i = n = r = D.width;
          k.width = k.height = 2 * r;
        }
        if (F) {
          var s = F.blur + r;
          i = Math.max(i, -F._offset.x + s);
          n = Math.max(n, F._offset.x + s);
          t = Math.max(t, F._offset.y + s);
          e = Math.max(e, -F._offset.y + s);
        }
        if (G) {
          var a = .21255656141989004 * E;
          n += a;
          k.width += a;
        }
        V.x = i;
        V.y = t;
        V.width = i + n;
        V.height = t + e;
      };
      r._updateProperties = function (t) {
        var e = t._assemblerData;
        p = e.context;
        v = e.canvas;
        g = t._frame._original ? t._frame._original._texture : t._frame._texture;
        y = t.string.toString();
        T = t._fontSize;
        E = T;
        W = t.underlineHeight || E / 8;
        w = t.overflow;
        x.width = t.node.width;
        x.height = t.node.height;
        U = t.node.getContentSize();
        C = t._lineHeight;
        b = t.horizontalAlign;
        S = t.verticalAlign;
        R = t.node.color;
        z = t.enableBold;
        G = t.enableItalic;
        H = t.enableUnderline;
        M = _(t);
        O = t.srcBlendFactor === cc.macro.BlendFactor.ONE;
        L = t._customOffsetX;
        P = t._customOffsetY;
        I = w !== f.NONE && (w === f.RESIZE_HEIGHT || t.enableWrapText);
        if (D = (D = h && t.getComponent(h)) && D.enabled && D.width > 0 ? D : null) {
          N.set(D.color);
        }
        if (F = (F = u && t.getComponent(u)) && F.enabled ? F : null) {
          B.set(F.color);
          B.a = B.a * t.node.color.a / 255;
        }
        this._updatePaddingRect();
      };
      r._calculateFillTextStartPosition = function () {
        var t = 0;
        if (b === c.TextAlignment.RIGHT) {
          t = x.width - V.width;
        } else if (b === c.TextAlignment.CENTER) {
          t = (x.width - V.width) / 2;
        }
        var e = this._getLineHeight();
        A.length;
        var i = e * (A.length - 1);
        var n = T * (1 - o.BASELINE_RATIO / 2);
        if (S !== c.VerticalTextAlignment.TOP) {
          var r = i + V.height + T - x.height;
          if (S === c.VerticalTextAlignment.BOTTOM) {
            n -= r += o.BASELINE_RATIO / 2 * T;
          } else {
            n -= r / 2;
          }
        }
        n += o.BASELINE_OFFSET * T;
        return cc.v2(t + V.x + L, n + V.y + P);
      };
      r._setupOutline = function () {
        p.strokeStyle = "rgba(" + N.r + ", " + N.g + ", " + N.b + ", " + N.a / 255 + ")";
        p.lineWidth = 2 * D.width;
      };
      r._setupShadow = function () {
        p.shadowColor = "rgba(" + B.r + ", " + B.g + ", " + B.b + ", " + B.a / 255 + ")";
        p.shadowBlur = F.blur;
        p.shadowOffsetX = F.offset.x;
        p.shadowOffsetY = -F.offset.y;
      };
      r._drawTextEffect = function (t, e) {
        if (F || D || H) {
          var i = A.length > 1 && F;
          var n = this._measureText(p, m);
          var r = 0;
          var s = 0;
          if (F) {
            this._setupShadow();
          }
          if (D) {
            this._setupOutline();
          }
          for (var a = 0; a < A.length; ++a) {
            r = t.x;
            s = t.y + a * e;
            if (i) {
              if (D) {
                p.strokeText(A[a], r, s);
              }
              p.fillText(A[a], r, s);
            }
            if (H) {
              Y = n(A[a]);
              if (b === c.TextAlignment.RIGHT) {
                X.x = t.x - Y;
              } else if (b === c.TextAlignment.CENTER) {
                X.x = t.x - Y / 2;
              } else {
                X.x = t.x;
              }
              X.y = s + E / 8;
              p.fillRect(X.x, X.y, Y, W);
            }
          }
          if (i) {
            p.shadowColor = "transparent";
          }
        }
      };
      r._updateTexture = function () {
        p.clearRect(0, 0, v.width, v.height);
        p.lineJoin = "round";
        if (O) {
          p.fillStyle = "rgba(" + R.r + ", " + R.g + ", " + R.b + ", " + R.a / 255 + ")";
        } else {
          var t = D ? N : R;
          p.fillStyle = "rgba(" + t.r + ", " + t.g + ", " + t.b + ", 0.004)";
          p.fillRect(0, 0, v.width, v.height);
          p.fillStyle = "rgba(" + R.r + ", " + R.g + ", " + R.b + ", 1)";
        }
        var e = this._calculateFillTextStartPosition();
        var i = this._getLineHeight();
        var n = e.x;
        var r = 0;
        this._drawTextEffect(e, i);
        for (var s = 0; s < A.length; ++s) {
          r = e.y + s * i;
          if (D) {
            p.strokeText(A[s], n, r);
          }
          p.fillText(A[s], n, r);
        }
        if (F) {
          p.shadowColor = "transparent";
        }
        g.handleLoadedTexture();
      };
      r._calDynamicAtlas = function (t) {
        if (t.cacheMode === l.CacheMode.BITMAP) {
          var e = t._frame;
          d(t, e);
          if (!e._original) {
            e.setRect(cc.rect(0, 0, v.width, v.height));
          }
          this.packToDynamicAtlas(t, e);
        }
      };
      r._updateLabelDimensions = function () {
        var t = cc.renderer.device.caps ? cc.renderer.device.caps.maxTextureSize : 2048;
        if (!(x.width > t)) {
          x.height;
        }
        x.width = Math.min(x.width, t);
        x.height = Math.min(x.height, t);
        var e = false;
        if (v.width !== x.width) {
          v.width = x.width;
          e = true;
        }
        if (v.height !== x.height) {
          v.height = x.height;
          e = true;
        }
        if (e) {
          p.font = m;
        }
        p.textAlign = j[b];
        if (o.isUnicodeRTL(y)) {
          p.direction = "rtl";
        }
      };
      r._getFontDesc = function () {
        var t = T.toString() + "px ";
        t += M;
        if (z) {
          t = "bold " + t;
        }
        if (G) {
          t = "italic " + t;
        }
        return t;
      };
      r._getLineHeight = function () {
        return 0 | (0 === C ? T : C * T / E);
      };
      r._calculateParagraphLength = function (t, e) {
        var i = [];
        for (var n = 0; n < t.length; ++n) {
          var r = o.safeMeasureText(e, t[n], m);
          i.push(r);
        }
        return i;
      };
      r._measureText = function (t, e) {
        return function (i) {
          return o.safeMeasureText(t, i, e);
        };
      };
      r._calculateShrinkFont = function (t) {
        var e = this._calculateParagraphLength(t, p);
        var i = 0;
        var n = 0;
        var r = 0;
        if (I) {
          var s = U.width;
          var a = U.height;
          if (s < 0 || a < 0) {
            return;
          }
          n = a + 1;
          var c = 0;
          var l = 0 | T + 1;
          for (var h = 0; c < l && !((h = c + l + 1 >> 1) <= 0);) {
            T = h;
            m = this._getFontDesc();
            p.font = m;
            var u = this._getLineHeight();
            n = 0;
            for (i = 0; i < t.length; ++i) {
              var f = o.safeMeasureText(p, t[i], m);
              n += o.fragmentText(t[i], f, s, this._measureText(p, m)).length * u;
            }
            if (n > a) {
              l = h - 1;
            } else {
              c = h;
            }
          }
          if (!(0 === c)) {
            T = c;
            m = this._getFontDesc();
            p.font = m;
          }
        } else {
          n = t.length * this._getLineHeight();
          for (i = 0; i < t.length; ++i) {
            if (r < e[i]) {
              r = e[i];
            }
          }
          var d = (x.width - V.width) / r;
          var _ = x.height / n;
          T = E * Math.min(1, d, _) | 0;
          m = this._getFontDesc();
          p.font = m;
        }
      };
      r._calculateWrapText = function (t) {
        if (I) {
          A = [];
          var e = U.width;
          for (var i = 0; i < t.length; ++i) {
            var n = o.safeMeasureText(p, t[i], m);
            var r = o.fragmentText(t[i], n, e, this._measureText(p, m));
            A = A.concat(r);
          }
        }
      };
      r._calculateLabelFont = function () {
        var t = y.split("\n");
        A = t;
        m = this._getFontDesc();
        p.font = m;
        switch (w) {
          case f.NONE:
            var e = 0;
            var i = 0;
            for (var n = 0; n < t.length; ++n) {
              var r = o.safeMeasureText(p, t[n], m);
              e = e > r ? e : r;
            }
            i = (A.length + o.BASELINE_RATIO) * this._getLineHeight();
            var s = parseFloat(e.toFixed(2));
            var a = parseFloat(i.toFixed(2));
            x.width = s + V.width;
            x.height = a + V.height;
            U.width = s + k.width;
            U.height = a + k.height;
            break;
          case f.SHRINK:
            this._calculateShrinkFont(t);
            this._calculateWrapText(t);
            break;
          case f.CLAMP:
            this._calculateWrapText(t);
            break;
          case f.RESIZE_HEIGHT:
            this._calculateWrapText(t);
            var c = (A.length + o.BASELINE_RATIO) * this._getLineHeight();
            x.height = c + V.height;
            U.height = c + k.height;
        }
      };
      r._calculateSplitedStrings = function (t) {
        if (!I) {
          A = [];
          var e = U.width;
          for (var i = 0; i < t.length; ++i) {
            var n = t[i];
            var r = o.safeMeasureText(p, t[i], m);
            if (r > e) {
              n = (n = n.substring(0, n.length * (e / r) | 0)).slice(0, -2) + "…";
            }
            A = A.concat(n);
          }
        }
      };
      return n;
    }(r.default);
    i.default = q;
    e.exports = i.default;
  }, {
    "../../../components/CCLabel": 102,
    "../../../components/CCLabelOutline": 103,
    "../../../components/CCLabelShadow": 104,
    "../../../platform/CCMacro": 167,
    "../../../utils/text-utils": 243,
    "../../assembler-2d": 188,
    "../utils": 201
  }],
  201: [function (t, e) {
    "use strict";

    var i = t("./dynamic-atlas/manager");
    var n = cc.Color.WHITE;
    var r = {
      fontAtlas: null,
      fontSize: 0,
      lineHeight: 0,
      hAlign: 0,
      vAlign: 0,
      actualLineHeight: 0,
      hash: "",
      fontFamily: "",
      fontDesc: "Arial",
      color: n,
      isOutlined: false,
      out: n,
      margin: 0
    };
    e.exports = {
      deleteFromDynamicAtlas: function (t, e) {
        if (e && e._original && i) {
          i.deleteAtlasSpriteFrame(e);
          e._resetDynamicAtlasFrame();
        }
      },
      getFontFamily: function (t) {
        return t.useSystemFont ? t.fontFamily || "Arial" : t.font ? t.font._nativeAsset ? t.font._nativeAsset : (cc.assetManager.postLoadNative(t.font, function () {
          if (t.isValid) {
            t.setVertsDirty();
          }
        }), "Arial") : "Arial";
      },
      shareLabelInfo: r
    };
  }, {
    "./dynamic-atlas/manager": 196
  }],
  202: [function (t, e) {
    "use strict";

    function i(t, e, i) {
      i = i || 2;
      var r;
      var a;
      var o;
      var c;
      var l;
      var u;
      var f;
      var d = e && e.length;
      var _ = d ? e[0] * i : t.length;
      var p = n(t, 0, _, i, true);
      var v = [];
      if (!p) {
        return v;
      }
      if (d) {
        p = h(t, e, p, i);
      }
      if (t.length > 80 * i) {
        r = o = t[0];
        a = c = t[1];
        for (var g = i; g < _; g += i) {
          if ((l = t[g]) < r) {
            r = l;
          }
          if ((u = t[g + 1]) < a) {
            a = u;
          }
          if (l > o) {
            o = l;
          }
          if (u > c) {
            c = u;
          }
        }
        f = Math.max(o - r, c - a);
      }
      s(p, v, i, r, a, f);
      return v;
    }
    function n(t, e, i, n, r) {
      var s;
      var a;
      if (r === I(t, e, i, n) > 0) {
        for (s = e; s < i; s += n) {
          a = R(s, t[s], t[s + 1], a);
        }
      } else {
        for (s = i - n; s >= e; s -= n) {
          a = R(s, t[s], t[s + 1], a);
        }
      }
      if (a && a.x === a.next.x && a.y === a.next.y) {
        M(a);
        a = a.next;
      }
      return a;
    }
    function r(t, e) {
      if (!t) {
        return t;
      }
      if (!e) {
        e = t;
      }
      var i;
      var n = t;
      do {
        i = false;
        if (n.steiner || !(n.x === n.next.x && n.y === n.next.y) && 0 !== (n.y - n.prev.y) * (n.next.x - n.x) - (n.x - n.prev.x) * (n.next.y - n.y)) {
          n = n.next;
        } else {
          M(n);
          if ((n = e = n.prev) === n.next) {
            return null;
          }
          i = true;
        }
      } while (i || n !== e);
      return e;
    }
    function s(t, e, i, n, h, u, f) {
      if (t) {
        if (!f && u) {
          _(t, n, h, u);
        }
        var d;
        var p;
        for (var v = t; t.prev !== t.next;) {
          d = t.prev;
          p = t.next;
          if (u ? o(t, n, h, u) : a(t)) {
            e.push(d.i / i);
            e.push(t.i / i);
            e.push(p.i / i);
            M(t);
            t = p.next;
            v = p.next;
          } else if ((t = p) === v) {
            if (f) {
              if (1 === f) {
                s(t = c(t, e, i), e, i, n, h, u, 2);
              } else if (2 === f) {
                l(t, e, i, n, h, u);
              }
            } else {
              s(r(t), e, i, n, h, u, 1);
            }
            break;
          }
        }
      }
    }
    function a(t) {
      var e = t.prev;
      var n = t.next;
      if ((t.y - e.y) * (n.x - t.x) - (t.x - e.x) * (n.y - t.y) >= 0) {
        return false;
      }
      for (var r = t.next.next; r !== t.prev;) {
        if ((n.x - r.x) * (e.y - r.y) - (e.x - r.x) * (n.y - r.y) >= 0 && (e.x - r.x) * (t.y - r.y) - (t.x - r.x) * (e.y - r.y) >= 0 && (t.x - r.x) * (n.y - r.y) - (n.x - r.x) * (t.y - r.y) >= 0 && (r.y - r.prev.y) * (r.next.x - r.x) - (r.x - r.prev.x) * (r.next.y - r.y) >= 0) {
          return false;
        }
        r = r.next;
      }
      return true;
    }
    function o(t, e, i, n) {
      var r = t.prev;
      var a = t.next;
      if ((t.y - r.y) * (a.x - t.x) - (t.x - r.x) * (a.y - t.y) >= 0) {
        return false;
      }
      var o = r.x < t.x ? r.x < a.x ? r.x : a.x : t.x < a.x ? t.x : a.x;
      var c = r.y < t.y ? r.y < a.y ? r.y : a.y : t.y < a.y ? t.y : a.y;
      var l = r.x > t.x ? r.x > a.x ? r.x : a.x : t.x > a.x ? t.x : a.x;
      var h = r.y > t.y ? r.y > a.y ? r.y : a.y : t.y > a.y ? t.y : a.y;
      var u = v(o, c, e, i, n);
      var f = v(l, h, e, i, n);
      for (var d = t.nextZ; d && d.z <= f;) {
        if (d !== t.prev && d !== t.next && (a.x - d.x) * (r.y - d.y) - (r.x - d.x) * (a.y - d.y) >= 0 && (r.x - d.x) * (t.y - d.y) - (t.x - d.x) * (r.y - d.y) >= 0 && (t.x - d.x) * (a.y - d.y) - (a.x - d.x) * (t.y - d.y) >= 0 && (d.y - d.prev.y) * (d.next.x - d.x) - (d.x - d.prev.x) * (d.next.y - d.y) >= 0) {
          return false;
        }
        d = d.nextZ;
      }
      for (d = t.prevZ; d && d.z >= u;) {
        if (d !== t.prev && d !== t.next && (a.x - d.x) * (r.y - d.y) - (r.x - d.x) * (a.y - d.y) >= 0 && (r.x - d.x) * (t.y - d.y) - (t.x - d.x) * (r.y - d.y) >= 0 && (t.x - d.x) * (a.y - d.y) - (a.x - d.x) * (t.y - d.y) >= 0 && (d.y - d.prev.y) * (d.next.x - d.x) - (d.x - d.prev.x) * (d.next.y - d.y) >= 0) {
          return false;
        }
        d = d.prevZ;
      }
      return true;
    }
    function c(t, e, i) {
      var n = t;
      do {
        var r = n.prev;
        var s = n.next.next;
        if (!(r.x === s.x && r.y === s.y) && (!!(r.x === n.x && r.y === n.y && n.next.x === s.x && n.next.y === s.y || r.x === s.x && r.y === s.y && n.next.x === n.x && n.next.y === n.y) || (n.y - r.y) * (n.next.x - n.x) - (n.x - r.x) * (n.next.y - n.y) > 0 != (n.y - r.y) * (s.x - n.x) - (n.x - r.x) * (s.y - n.y) > 0 && (s.y - n.next.y) * (r.x - s.x) - (s.x - n.next.x) * (r.y - s.y) > 0 != (s.y - n.next.y) * (n.x - s.x) - (s.x - n.next.x) * (n.y - s.y) > 0) && ((r.y - r.prev.y) * (r.next.x - r.x) - (r.x - r.prev.x) * (r.next.y - r.y) < 0 ? (s.y - r.y) * (r.next.x - s.x) - (s.x - r.x) * (r.next.y - s.y) >= 0 && (r.prev.y - r.y) * (s.x - r.prev.x) - (r.prev.x - r.x) * (s.y - r.prev.y) >= 0 : (s.y - r.y) * (r.prev.x - s.x) - (s.x - r.x) * (r.prev.y - s.y) < 0 || (r.next.y - r.y) * (s.x - r.next.x) - (r.next.x - r.x) * (s.y - r.next.y) < 0) && ((s.y - s.prev.y) * (s.next.x - s.x) - (s.x - s.prev.x) * (s.next.y - s.y) < 0 ? (r.y - s.y) * (s.next.x - r.x) - (r.x - s.x) * (s.next.y - r.y) >= 0 && (s.prev.y - s.y) * (r.x - s.prev.x) - (s.prev.x - s.x) * (r.y - s.prev.y) >= 0 : (r.y - s.y) * (s.prev.x - r.x) - (r.x - s.x) * (s.prev.y - r.y) < 0 || (s.next.y - s.y) * (r.x - s.next.x) - (s.next.x - s.x) * (r.y - s.next.y) < 0)) {
          e.push(r.i / i);
          e.push(n.i / i);
          e.push(s.i / i);
          M(n);
          M(n.next);
          n = t = s;
        }
        n = n.next;
      } while (n !== t);
      return n;
    }
    function l(t, e, i, n, a, o) {
      var c = t;
      do {
        for (var l = c.next.next; l !== c.prev;) {
          if (c.i !== l.i && c.next.i !== l.i && c.prev.i !== l.i && !x(c, l) && ((c.y - c.prev.y) * (c.next.x - c.x) - (c.x - c.prev.x) * (c.next.y - c.y) < 0 ? (l.y - c.y) * (c.next.x - l.x) - (l.x - c.x) * (c.next.y - l.y) >= 0 && (c.prev.y - c.y) * (l.x - c.prev.x) - (c.prev.x - c.x) * (l.y - c.prev.y) >= 0 : (l.y - c.y) * (c.prev.x - l.x) - (l.x - c.x) * (c.prev.y - l.y) < 0 || (c.next.y - c.y) * (l.x - c.next.x) - (c.next.x - c.x) * (l.y - c.next.y) < 0) && ((l.y - l.prev.y) * (l.next.x - l.x) - (l.x - l.prev.x) * (l.next.y - l.y) < 0 ? (c.y - l.y) * (l.next.x - c.x) - (c.x - l.x) * (l.next.y - c.y) >= 0 && (l.prev.y - l.y) * (c.x - l.prev.x) - (l.prev.x - l.x) * (c.y - l.prev.y) >= 0 : (c.y - l.y) * (l.prev.x - c.x) - (c.x - l.x) * (l.prev.y - c.y) < 0 || (l.next.y - l.y) * (c.x - l.next.x) - (l.next.x - l.x) * (c.y - l.next.y) < 0) && b(c, l)) {
            var h = S(c, l);
            c = r(c, c.next);
            h = r(h, h.next);
            s(c, e, i, n, a, o);
            return void s(h, e, i, n, a, o);
          }
          l = l.next;
        }
        c = c.next;
      } while (c !== t);
    }
    function h(t, e, i, s) {
      var a;
      var o;
      var c;
      var l = [];
      a = 0;
      for (o = e.length; a < o; a++) {
        if ((c = n(t, e[a] * s, a < o - 1 ? e[a + 1] * s : t.length, s, false)) === c.next) {
          c.steiner = true;
        }
        l.push(g(c));
      }
      l.sort(u);
      for (a = 0; a < l.length; a++) {
        f(l[a], i);
        i = r(i, i.next);
      }
      return i;
    }
    function u(t, e) {
      return t.x - e.x;
    }
    function f(t, e) {
      if (e = d(t, e)) {
        var i = S(e, t);
        r(i, i.next);
      }
    }
    function d(t, e) {
      var i;
      var n = e;
      var r = t.x;
      var s = t.y;
      var a = -Infinity;
      do {
        if (s <= n.y && s >= n.next.y) {
          var o = n.x + (s - n.y) * (n.next.x - n.x) / (n.next.y - n.y);
          if (o <= r && o > a) {
            a = o;
            if (o === r) {
              if (s === n.y) {
                return n;
              }
              if (s === n.next.y) {
                return n.next;
              }
            }
            i = n.x < n.next.x ? n : n.next;
          }
        }
        n = n.next;
      } while (n !== e);
      if (!i) {
        return null;
      }
      if (r === a) {
        return i.prev;
      }
      var c;
      var l = i;
      var h = i.x;
      var u = i.y;
      var f = Infinity;
      for (n = i.next; n !== l;) {
        if (r >= n.x && n.x >= h && ((s < u ? a : r) - n.x) * (s - n.y) - ((s < u ? r : a) - n.x) * (s - n.y) >= 0 && ((s < u ? r : a) - n.x) * (u - n.y) - (h - n.x) * (s - n.y) >= 0 && (h - n.x) * (s - n.y) - ((s < u ? a : r) - n.x) * (u - n.y) >= 0 && ((c = Math.abs(s - n.y) / (r - n.x)) < f || c === f && n.x > i.x) && ((n.y - n.prev.y) * (n.next.x - n.x) - (n.x - n.prev.x) * (n.next.y - n.y) < 0 ? (t.y - n.y) * (n.next.x - t.x) - (t.x - n.x) * (n.next.y - t.y) >= 0 && (n.prev.y - n.y) * (t.x - n.prev.x) - (n.prev.x - n.x) * (t.y - n.prev.y) >= 0 : (t.y - n.y) * (n.prev.x - t.x) - (t.x - n.x) * (n.prev.y - t.y) < 0 || (n.next.y - n.y) * (t.x - n.next.x) - (n.next.x - n.x) * (t.y - n.next.y) < 0)) {
          i = n;
          f = c;
        }
        n = n.next;
      }
      return i;
    }
    function _(t, e, i, n) {
      var r = t;
      do {
        if (null === r.z) {
          r.z = v(r.x, r.y, e, i, n);
        }
        r.prevZ = r.prev;
        r.nextZ = r.next;
        r = r.next;
      } while (r !== t);
      r.prevZ.nextZ = null;
      r.prevZ = null;
      p(r);
    }
    function p(t) {
      var e;
      var i;
      var n;
      var r;
      var s;
      var a;
      var o;
      var c;
      var l = 1;
      do {
        i = t;
        t = null;
        s = null;
        for (a = 0; i;) {
          a++;
          n = i;
          o = 0;
          for (e = 0; e < l && (o++, n = n.nextZ); e++) {
            ;
          }
          for (c = l; o > 0 || c > 0 && n;) {
            if (0 === o) {
              r = n;
              n = n.nextZ;
              c--;
            } else if (0 !== c && n) {
              if (i.z <= n.z) {
                r = i;
                i = i.nextZ;
                o--;
              } else {
                r = n;
                n = n.nextZ;
                c--;
              }
            } else {
              r = i;
              i = i.nextZ;
              o--;
            }
            if (s) {
              s.nextZ = r;
            } else {
              t = r;
            }
            r.prevZ = s;
            s = r;
          }
          i = n;
        }
        s.nextZ = null;
        l *= 2;
      } while (a > 1);
      return t;
    }
    function v(t, e, i, n, r) {
      return (t = 1431655765 & ((t = 858993459 & ((t = 252645135 & ((t = 16711935 & ((t = 32767 * (t - i) / r) | t << 8)) | t << 4)) | t << 2)) | t << 1)) | (e = 1431655765 & ((e = 858993459 & ((e = 252645135 & ((e = 16711935 & ((e = 32767 * (e - n) / r) | e << 8)) | e << 4)) | e << 2)) | e << 1)) << 1;
    }
    function g(t) {
      var e = t;
      var i = t;
      do {
        if (e.x < i.x) {
          i = e;
        }
        e = e.next;
      } while (e !== t);
      return i;
    }
    function x(t, e) {
      var i = t;
      do {
        if (i.i !== t.i && i.next.i !== t.i && i.i !== e.i && i.next.i !== e.i && (!!(i.x === i.next.x && i.y === i.next.y && t.x === e.x && t.y === e.y || i.x === e.x && i.y === e.y && t.x === i.next.x && t.y === i.next.y) || (i.next.y - i.y) * (t.x - i.next.x) - (i.next.x - i.x) * (t.y - i.next.y) > 0 != (i.next.y - i.y) * (e.x - i.next.x) - (i.next.x - i.x) * (e.y - i.next.y) > 0 && (e.y - t.y) * (i.x - e.x) - (e.x - t.x) * (i.y - e.y) > 0 != (e.y - t.y) * (i.next.x - e.x) - (e.x - t.x) * (i.next.y - e.y) > 0)) {
          return true;
        }
        i = i.next;
      } while (i !== t);
      return false;
    }
    function b(t, e) {
      var i = t;
      var n = false;
      var r = (t.x + e.x) / 2;
      var s = (t.y + e.y) / 2;
      do {
        if (i.y > s != i.next.y > s && r < (i.next.x - i.x) * (s - i.y) / (i.next.y - i.y) + i.x) {
          n = !n;
        }
        i = i.next;
      } while (i !== t);
      return n;
    }
    function S(t, e) {
      var i = new w(t.i, t.x, t.y);
      var n = new w(e.i, e.x, e.y);
      var r = t.next;
      var s = e.prev;
      t.next = e;
      e.prev = t;
      i.next = r;
      r.prev = i;
      n.next = i;
      i.prev = n;
      s.next = n;
      n.prev = s;
      return n;
    }
    function R(t, e, i, n) {
      var r = new w(t, e, i);
      if (n) {
        r.next = n.next;
        r.prev = n;
        n.next.prev = r;
        n.next = r;
      } else {
        r.prev = r;
        r.next = r;
      }
      return r;
    }
    function M(t) {
      t.next.prev = t.prev;
      t.prev.next = t.next;
      if (t.prevZ) {
        t.prevZ.nextZ = t.nextZ;
      }
      if (t.nextZ) {
        t.nextZ.prevZ = t.prevZ;
      }
    }
    function w(t, e, i) {
      this.i = t;
      this.x = e;
      this.y = i;
      this.prev = null;
      this.next = null;
      this.z = null;
      this.prevZ = null;
      this.nextZ = null;
      this.steiner = false;
    }
    function I(t, e, i, n) {
      var r = 0;
      var s = e;
      for (var a = i - n; s < i; s += n) {
        r += (t[a] - t[s]) * (t[s + 1] + t[a + 1]);
        a = s;
      }
      return r;
    }
    cc.Graphics.earcut = e.exports = i;
    i.deviation = function (t, e, i, n) {
      var r = e && e.length;
      var s = r ? e[0] * i : t.length;
      var a = Math.abs(I(t, 0, s, i));
      if (r) {
        var o = 0;
        for (var c = e.length; o < c; o++) {
          var l = e[o] * i;
          var h = o < c - 1 ? e[o + 1] * i : t.length;
          a -= Math.abs(I(t, l, h, i));
        }
      }
      var u = 0;
      for (o = 0; o < n.length; o += 3) {
        var f = n[o] * i;
        var d = n[o + 1] * i;
        var _ = n[o + 2] * i;
        u += Math.abs((t[f] - t[_]) * (t[d + 1] - t[f + 1]) - (t[f] - t[d]) * (t[_ + 1] - t[f + 1]));
      }
      return 0 === a && 0 === u ? 0 : Math.abs((u - a) / a);
    };
    i.flatten = function (t) {
      var e = t[0][0].length;
      var i = {
        vertices: [],
        holes: [],
        dimensions: e
      };
      var n = 0;
      for (var r = 0; r < t.length; r++) {
        for (var s = 0; s < t[r].length; s++) {
          for (var a = 0; a < e; a++) {
            i.vertices.push(t[r][s][a]);
          }
        }
        if (r > 0) {
          n += t[r - 1].length;
          i.holes.push(n);
        }
      }
      return i;
    };
  }, {}],
  203: [function (t, e) {
    "use strict";

    var i = t("../../../../graphics/graphics-point");
    var n = t("../../../../graphics/helper");
    var r = t("../../../../graphics/types").PointFlags;
    function s() {
      this.reset();
    }
    function a() {
      this._tessTol = .25;
      this._distTol = .01;
      this._updatePathOffset = false;
      this._paths = null;
      this._pathLength = 0;
      this._pathOffset = 0;
      this._points = null;
      this._pointsOffset = 0;
      this._commandx = 0;
      this._commandy = 0;
      this._paths = [];
      this._points = [];
    }
    cc.js.mixin(s.prototype, {
      reset: function () {
        this.closed = false;
        this.nbevel = 0;
        this.complex = true;
        if (this.points) {
          this.points.length = 0;
        } else {
          this.points = [];
        }
      }
    });
    cc.js.mixin(a.prototype, {
      moveTo: function (t, e) {
        if (this._updatePathOffset) {
          this._pathOffset = this._pathLength;
          this._updatePathOffset = false;
        }
        this._addPath();
        this._addPoint(t, e, r.PT_CORNER);
        this._commandx = t;
        this._commandy = e;
      },
      lineTo: function (t, e) {
        this._addPoint(t, e, r.PT_CORNER);
        this._commandx = t;
        this._commandy = e;
      },
      bezierCurveTo: function (t, e, i, s, a, o) {
        var c = this._curPath;
        var l = c.points[c.points.length - 1];
        if (l.x !== t || l.y !== e || i !== a || s !== o) {
          n.tesselateBezier(this, l.x, l.y, t, e, i, s, a, o, 0, r.PT_CORNER);
          this._commandx = a;
          this._commandy = o;
        } else {
          this.lineTo(a, o);
        }
      },
      quadraticCurveTo: function (t, e, i, n) {
        var r = this._commandx;
        var s = this._commandy;
        this.bezierCurveTo(r + 0.6666666666666666 * (t - r), s + 0.6666666666666666 * (e - s), i + 0.6666666666666666 * (t - i), n + 0.6666666666666666 * (e - n), i, n);
      },
      arc: function (t, e, i, r, s, a) {
        n.arc(this, t, e, i, r, s, a);
      },
      ellipse: function (t, e, i, r) {
        n.ellipse(this, t, e, i, r);
        this._curPath.complex = false;
      },
      circle: function (t, e, i) {
        n.ellipse(this, t, e, i, i);
        this._curPath.complex = false;
      },
      rect: function (t, e, i, n) {
        this.moveTo(t, e);
        this.lineTo(t, e + n);
        this.lineTo(t + i, e + n);
        this.lineTo(t + i, e);
        this.close();
        this._curPath.complex = false;
      },
      roundRect: function (t, e, i, r, s) {
        n.roundRect(this, t, e, i, r, s);
        this._curPath.complex = false;
      },
      clear: function (t) {
        this._pathLength = 0;
        this._pathOffset = 0;
        this._pointsOffset = 0;
        this._curPath = null;
        if (t) {
          this._paths.length = 0;
          this._points.length = 0;
        }
      },
      close: function () {
        this._curPath.closed = true;
      },
      _addPath: function () {
        var t = this._pathLength;
        var e = this._paths[t];
        if (e) {
          e.reset();
        } else {
          e = new s();
          this._paths.push(e);
        }
        this._pathLength++;
        this._curPath = e;
        return e;
      },
      _addPoint: function (t, e, n) {
        var r = this._curPath;
        if (r) {
          var s;
          var a = this._points;
          var o = r.points;
          if (s = a[this._pointsOffset++]) {
            s.x = t;
            s.y = e;
          } else {
            s = new i(t, e);
            a.push(s);
          }
          s.flags = n;
          o.push(s);
        }
      }
    });
    cc.Graphics._Impl = a;
    e.exports = a;
  }, {
    "../../../../graphics/graphics-point": 150,
    "../../../../graphics/helper": 152,
    "../../../../graphics/types": 154
  }],
  204: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n = t("../../../assembler") && t("../../../assembler").__esModule ? t("../../../assembler") : {
      default: t("../../../assembler")
    };
    var r = t("../../../../../renderer/core/input-assembler") && t("../../../../../renderer/core/input-assembler").__esModule ? t("../../../../../renderer/core/input-assembler") : {
      default: t("../../../../../renderer/core/input-assembler")
    };
    function a(t, e) {
      return (a = Object.setPrototypeOf || function (t, e) {
        t.__proto__ = e;
        return t;
      })(t, e);
    }
    var o = t("../../mesh-buffer");
    var c = t("../../../index");
    var l = t("../../../../graphics/graphics");
    var h = t("../../../../graphics/types").PointFlags;
    var u = l.LineJoin;
    var f = l.LineCap;
    var d = t("./earcut");
    t("./impl");
    var _ = Math.PI;
    var p = Math.min;
    var v = Math.max;
    var g = Math.ceil;
    var m = Math.acos;
    var y = Math.cos;
    var T = Math.sin;
    var E = Math.atan2;
    var x = cc.gfx;
    var C = new x.VertexFormat([{
      name: x.ATTR_POSITION,
      type: x.ATTR_TYPE_FLOAT32,
      num: 2
    }, {
      name: x.ATTR_COLOR,
      type: x.ATTR_TYPE_UINT8,
      num: 4,
      normalize: true
    }, {
      name: "a_dist",
      type: x.ATTR_TYPE_FLOAT32,
      num: 1
    }]);
    C.name = "vfmtPosColorSdf";
    var b = function (t) {
      function n(e) {
        var i;
        (i = t.call(this, e) || this)._buffer = null;
        i._buffers = [];
        i._bufferOffset = 0;
        return i;
      }
      n.prototype = Object.create(t.prototype);
      n.prototype.constructor = n;
      a(n, t);
      var s = n.prototype;
      s.getVfmt = function () {
        return C;
      };
      s.getVfmtFloatCount = function () {
        return 4;
      };
      s.requestBuffer = function () {
        var t = {
          indiceStart: 0,
          vertexStart: 0
        };
        var e = new o(c._handle, this.getVfmt());
        t.meshbuffer = e;
        var i = new r.default(e._vb, e._ib);
        t.ia = i;
        this._buffers.push(t);
        return t;
      };
      s.getBuffers = function () {
        if (0 === this._buffers.length) {
          this.requestBuffer();
        }
        return this._buffers;
      };
      s.clear = function (t) {
        this._bufferOffset = 0;
        var e = this._buffers;
        if (t) {
          var i = 0;
          for (var n = e.length; i < n; i++) {
            var r = e[i];
            r.meshbuffer.destroy();
            r.meshbuffer = null;
          }
          e.length = 0;
        } else {
          var s = 0;
          for (var a = e.length; s < a; s++) {
            var o = e[s];
            o.indiceStart = 0;
            o.vertexStart = 0;
            o.meshbuffer.reset();
          }
        }
      };
      s.fillBuffers = function (t, e) {
        e._flush();
        e.node = t.node;
        e.material = t._materials[0];
        var i = this.getBuffers();
        var n = 0;
        for (var r = i.length; n < r; n++) {
          var s = i[n];
          var a = s.meshbuffer;
          s.ia._count = s.indiceStart;
          e._flushIA(s.ia);
          a.uploadData();
        }
      };
      s.genBuffer = function (t, e) {
        var i = this.getBuffers();
        var n = i[this._bufferOffset];
        var r = n.meshbuffer;
        var s = n.vertexStart + e;
        if (s > 65535 || 3 * s > 131070) {
          ++this._bufferOffset;
          s = e;
          if (this._bufferOffset < i.length) {
            n = i[this._bufferOffset];
          } else {
            n = this.requestBuffer(t);
            i[this._bufferOffset] = n;
          }
          r = n.meshbuffer;
        }
        if (s > r.vertexOffset) {
          r.requestStatic(e, 3 * e);
        }
        this._buffer = n;
        return n;
      };
      s.stroke = function (t) {
        this._curColor = t._strokeColor._val;
        this._flattenPaths(t._impl);
        this._expandStroke(t);
        t._impl._updatePathOffset = true;
      };
      s.fill = function (t) {
        this._curColor = t._fillColor._val;
        this._expandFill(t);
        t._impl._updatePathOffset = true;
      };
      s._expandStroke = function (t) {
        var i;
        var n;
        var r = .5 * t.lineWidth;
        var s = t.lineCap;
        var a = t.lineJoin;
        var o = t.miterLimit;
        var c = t._impl;
        _;
        i = c._tessTol;
        n = 2 * m(r / (r + i));
        var l = v(2, g(3.141592653589793 / n));
        this._calculateJoins(c, r, a, o);
        var d = c._paths;
        var p = 0;
        var y = c._pathOffset;
        for (var T = c._pathLength; y < T; y++) {
          var E = d[y];
          var A = E.points.length;
          if (a === u.ROUND) {
            p += 2 * (A + E.nbevel * (l + 2) + 1);
          } else {
            p += 2 * (A + 5 * E.nbevel + 1);
          }
          if (!E.closed) {
            if (s === f.ROUND) {
              p += 2 * (2 * l + 2);
            } else {
              p += 12;
            }
          }
        }
        var x = this.genBuffer(t, p);
        var C = x.meshbuffer;
        var b = C._vData;
        var S = C._iData;
        var R = c._pathOffset;
        for (var M = c._pathLength; R < M; R++) {
          var w;
          var I = d[R];
          var O = I.points;
          var L = O.length;
          var P = x.vertexStart;
          var D = undefined;
          var N = undefined;
          var F = undefined;
          var B = undefined;
          if (w = I.closed) {
            D = O[L - 1];
            N = O[0];
            F = 0;
            B = L;
          } else {
            D = O[0];
            N = O[1];
            F = 1;
            B = L - 1;
          }
          N = N || D;
          if (!w) {
            var V = N.sub(D);
            V.normalizeSelf();
            var k = V.x;
            var U = V.y;
            if (s === f.BUTT) {
              this._buttCapStart(D, k, U, r, 0);
            } else if (s === f.SQUARE) {
              this._buttCapStart(D, k, U, r, r);
            } else if (s === f.ROUND) {
              this._roundCapStart(D, k, U, r, l);
            }
          }
          for (var z = F; z < B; ++z) {
            if (a === u.ROUND) {
              this._roundJoin(D, N, r, r, l);
            } else if (0 != (N.flags & (h.PT_BEVEL | h.PT_INNERBEVEL))) {
              this._bevelJoin(D, N, r, r);
            } else {
              this._vset(N.x + N.dmx * r, N.y + N.dmy * r, 1);
              this._vset(N.x - N.dmx * r, N.y - N.dmy * r, -1);
            }
            D = N;
            N = O[z + 1];
          }
          if (w) {
            var G = this.getVfmtFloatCount();
            var H = P * G;
            this._vset(b[H], b[H + 1], 1);
            this._vset(b[H + G], b[H + G + 1], -1);
          } else {
            var W = N.sub(D);
            W.normalizeSelf();
            var X = W.x;
            var Y = W.y;
            if (s === f.BUTT) {
              this._buttCapEnd(N, X, Y, r, 0);
            } else if (s === f.SQUARE) {
              this._buttCapEnd(N, X, Y, r, r);
            } else if (s === f.ROUND) {
              this._roundCapEnd(N, X, Y, r, l);
            }
          }
          var j = x.indiceStart;
          var q = P + 2;
          for (var Z = x.vertexStart; q < Z; q++) {
            S[j++] = q - 2;
            S[j++] = q - 1;
            S[j++] = q;
          }
          x.indiceStart = j;
        }
      };
      s._expandFill = function (t) {
        var e = t._impl;
        var i = e._paths;
        var n = 0;
        var r = e._pathOffset;
        for (var s = e._pathLength; r < s; r++) {
          n += i[r].points.length;
        }
        var a = this.genBuffer(t, n);
        var o = a.meshbuffer;
        var c = o._vData;
        var l = o._iData;
        var h = e._pathOffset;
        for (var u = e._pathLength; h < u; h++) {
          var f = i[h];
          var _ = f.points;
          var p = _.length;
          if (0 !== p) {
            var v = a.vertexStart;
            for (var g = 0; g < p; ++g) {
              this._vset(_[g].x, _[g].y);
            }
            var m = a.indiceStart;
            if (f.complex) {
              var y = [];
              var T = this.getVfmtFloatCount();
              var E = v;
              for (var A = a.vertexStart; E < A; E++) {
                var x = E * T;
                y.push(c[x]);
                y.push(c[x + 1]);
              }
              var C = d(y, null, 2);
              if (!C || 0 === C.length) {
                continue;
              }
              var b = 0;
              for (var S = C.length; b < S; b++) {
                l[m++] = C[b] + v;
              }
            } else {
              var R = v;
              var M = v + 2;
              for (var w = a.vertexStart; M < w; M++) {
                l[m++] = R;
                l[m++] = M - 1;
                l[m++] = M;
              }
            }
            a.indiceStart = m;
          }
        }
      };
      s._calculateJoins = function (t, e, i, n) {
        var r = 0;
        var s = e * e;
        if (e > 0) {
          r = 1 / e;
        }
        var a = t._paths;
        var o = t._pathOffset;
        for (var c = t._pathLength; o < c; o++) {
          var l = a[o];
          var f = l.points;
          var d = f.length;
          var _ = f[d - 1];
          var g = f[0];
          l.nbevel = 0;
          for (var m = 0; m < d; m++) {
            var y;
            var T;
            var E = _.dy;
            var A = -_.dx;
            var x = g.dy;
            var C = -g.dx;
            g.dmx = .5 * (E + x);
            g.dmy = .5 * (A + C);
            if ((y = g.dmx * g.dmx + g.dmy * g.dmy) > 1e-6) {
              var b = 1 / y;
              if (b > 600) {
                b = 600;
              }
              g.dmx *= b;
              g.dmy *= b;
            }
            if (g.dx * _.dy - _.dx * g.dy > 0) {
              g.flags |= h.PT_LEFT;
            }
            if (y * (T = v(11, p(_.len, g.len) * r)) * T < 1) {
              g.flags |= h.PT_INNERBEVEL;
            }
            var S = g.dmx * e;
            var R = g.dmy * e;
            var M = S * S + R * R;
            if (M > g.len * g.len + s && M > _.len * _.len + s) {
              g.flags |= h.PT_INNERBEVEL;
            }
            if (g.flags & h.PT_CORNER && (y * n * n < 1 || i === u.BEVEL || i === u.ROUND)) {
              g.flags |= h.PT_BEVEL;
            }
            if (0 != (g.flags & (h.PT_BEVEL | h.PT_INNERBEVEL))) {
              l.nbevel++;
            }
            _ = g;
            g = f[m + 1];
          }
        }
      };
      s._flattenPaths = function (t) {
        var e = t._paths;
        var i = t._pathOffset;
        for (var n = t._pathLength; i < n; i++) {
          var r = e[i];
          var s = r.points;
          var a = s[s.length - 1];
          var o = s[0];
          if (s.length > 2 && a.equals(o)) {
            r.closed = true;
            s.pop();
            a = s[s.length - 1];
          }
          var c = 0;
          for (var l = s.length; c < l; c++) {
            var h = o.sub(a);
            a.len = h.mag();
            if (h.x || h.y) {
              h.normalizeSelf();
            }
            a.dx = h.x;
            a.dy = h.y;
            a = o;
            o = s[c + 1];
          }
        }
      };
      s._chooseBevel = function (t, e, i, n) {
        var r;
        var s;
        var a;
        var o;
        var c = i.x;
        var l = i.y;
        if (0 !== t) {
          r = c + e.dy * n;
          s = l - e.dx * n;
          a = c + i.dy * n;
          o = l - i.dx * n;
        } else {
          r = a = c + i.dmx * n;
          s = o = l + i.dmy * n;
        }
        return [r, s, a, o];
      };
      s._buttCapStart = function (t, e, i, n, r) {
        var s = t.x - e * r;
        var a = t.y - i * r;
        var c = -e;
        this._vset(s + i * n, a + c * n, 1);
        this._vset(s - i * n, a - c * n, -1);
      };
      s._buttCapEnd = function (t, e, i, n, r) {
        var s = t.x + e * r;
        var a = t.y + i * r;
        var c = -e;
        this._vset(s + i * n, a + c * n, 1);
        this._vset(s - i * n, a - c * n, -1);
      };
      s._roundCapStart = function (t, e, i, n, r) {
        var s = t.x;
        var a = t.y;
        var c = -e;
        for (var l = 0; l < r; l++) {
          var h = l / (r - 1) * _;
          var u = y(h) * n;
          var f = T(h) * n;
          this._vset(s - i * u - e * f, a - c * u - i * f, 1);
          this._vset(s, a, 0);
        }
        this._vset(s + i * n, a + c * n, 1);
        this._vset(s - i * n, a - c * n, -1);
      };
      s._roundCapEnd = function (t, e, i, n, r) {
        var s = t.x;
        var a = t.y;
        var c = -e;
        this._vset(s + i * n, a + c * n, 1);
        this._vset(s - i * n, a - c * n, -1);
        for (var l = 0; l < r; l++) {
          var h = l / (r - 1) * _;
          var u = y(h) * n;
          var f = T(h) * n;
          this._vset(s, a, 0);
          this._vset(s - i * u + e * f, a - c * u + i * f, 1);
        }
      };
      s._roundJoin = function (t, e, i, n, r) {
        var s = t.dy;
        var a = -t.dx;
        var o = e.dy;
        var c = -e.dx;
        var l = e.x;
        var u = e.y;
        if (0 != (e.flags & h.PT_LEFT)) {
          var f = this._chooseBevel(e.flags & h.PT_INNERBEVEL, t, e, i);
          var d = f[0];
          var p = f[1];
          var v = f[2];
          var m = f[3];
          var x = E(-a, -s);
          var C = E(-c, -o);
          if (C > x) {
            C -= 2 * _;
          }
          this._vset(d, p, 1);
          this._vset(l - s * n, e.y - a * n, -1);
          var b = g((x - C) / _) * r < 2 ? 2 : g((x - C) / _) * r > r ? r : g((x - C) / _) * r;
          for (var S = 0; S < b; S++) {
            var R = x + S / (b - 1) * (C - x);
            var M = l + y(R) * n;
            var w = u + T(R) * n;
            this._vset(l, u, 0);
            this._vset(M, w, -1);
          }
          this._vset(v, m, 1);
          this._vset(l - o * n, u - c * n, -1);
        } else {
          var I = this._chooseBevel(e.flags & h.PT_INNERBEVEL, t, e, -n);
          var O = I[0];
          var L = I[1];
          var P = I[2];
          var D = I[3];
          var N = E(a, s);
          var F = E(c, o);
          if (F < N) {
            F += 2 * _;
          }
          this._vset(l + s * n, u + a * n, 1);
          this._vset(O, L, -1);
          var B = g((F - N) / _) * r < 2 ? 2 : g((F - N) / _) * r > r ? r : g((F - N) / _) * r;
          for (var V = 0; V < B; V++) {
            var k = N + V / (B - 1) * (F - N);
            var U = l + y(k) * i;
            var z = u + T(k) * i;
            this._vset(U, z, 1);
            this._vset(l, u, 0);
          }
          this._vset(l + o * n, u + c * n, 1);
          this._vset(P, D, -1);
        }
      };
      s._bevelJoin = function (t, e, i, n) {
        var r;
        var s;
        var a;
        var o;
        var c;
        var l;
        var u;
        var f;
        var d = t.dy;
        var _ = -t.dx;
        var p = e.dy;
        var v = -e.dx;
        if (e.flags & h.PT_LEFT) {
          var g = this._chooseBevel(e.flags & h.PT_INNERBEVEL, t, e, i);
          c = g[0];
          l = g[1];
          u = g[2];
          f = g[3];
          this._vset(c, l, 1);
          this._vset(e.x - d * n, e.y - _ * n, -1);
          this._vset(u, f, 1);
          this._vset(e.x - p * n, e.y - v * n, -1);
        } else {
          var m = this._chooseBevel(e.flags & h.PT_INNERBEVEL, t, e, -n);
          r = m[0];
          s = m[1];
          a = m[2];
          o = m[3];
          this._vset(e.x + d * i, e.y + _ * i, 1);
          this._vset(r, s, -1);
          this._vset(e.x + p * i, e.y + v * i, 1);
          this._vset(a, o, -1);
        }
      };
      s._vset = function (t, e, i) {
        if (undefined === i) {
          i = 0;
        }
        var n = this._buffer;
        var r = n.meshbuffer;
        var s = n.vertexStart * this.getVfmtFloatCount();
        var a = r._vData;
        var o = r._uintVData;
        a[s] = t;
        a[s + 1] = e;
        o[s + 2] = this._curColor;
        a[s + 3] = i;
        n.vertexStart++;
        r._dirty = true;
      };
      return n;
    }(n.default);
    i.default = b;
    n.default.register(cc.Graphics, b);
    e.exports = i.default;
  }, {
    "../../../../../renderer/core/input-assembler": 272,
    "../../../../graphics/graphics": 151,
    "../../../../graphics/types": 154,
    "../../../assembler": 190,
    "../../../index": 193,
    "../../mesh-buffer": 220,
    "./earcut": 202,
    "./impl": 203
  }],
  205: [function (t) {
    "use strict";

    cc.assemblers = {};
    t("./sprite");
    t("./mask-assembler");
    t("./graphics");
    t("./label");
    t("./motion-streak");
  }, {
    "./graphics": 204,
    "./label": 210,
    "./mask-assembler": 211,
    "./motion-streak": undefined,
    "./sprite": 218
  }],
  206: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n;
    var r = (n = t("../../../../utils/label/bmfont")) && n.__esModule ? n : {
      default: n
    };
    function s(t, e) {
      return (s = Object.setPrototypeOf || function (t, e) {
        t.__proto__ = e;
        return t;
      })(t, e);
    }
    var a = 0;
    var o = function (t) {
      function n() {
        return t.apply(this, arguments) || this;
      }
      n.prototype = Object.create(t.prototype);
      n.prototype.constructor = n;
      s(n, t);
      var r = n.prototype;
      r.initData = function () {
        this._renderData.createFlexData(0, 4, 6, this.getVfmt());
      };
      r._reserveQuads = function (t, e) {
        var i = 4 * e;
        var n = 6 * e;
        var r = this._renderData._flexBuffer;
        r.reserve(i, n);
        r.used(i, n);
        var s = this._renderData.iDatas[0];
        var o = 0;
        for (var c = 0; o < n; o += 6, c += 4) {
          s[o] = c;
          s[o + 1] = c + 1;
          s[o + 2] = c + 2;
          s[o + 3] = c + 1;
          s[o + 4] = c + 3;
          s[o + 5] = c + 2;
        }
        a = 0;
      };
      r._quadsUpdated = function () {
        a = 0;
        this._renderData._flexBuffer.used(this.verticesCount, this.indicesCount);
      };
      r._getColor = function (t) {
        return t.node._color._val;
      };
      r.appendQuad = function (t, e, i, n, r, s, o) {
        var c = this._renderData;
        var l = c.vDatas[0];
        var h = c.uintVDatas[0];
        this.verticesCount += 4;
        this.indicesCount = this.verticesCount / 2 * 3;
        var u;
        var f;
        var d;
        var _;
        var p = e.width;
        var v = e.height;
        var g = i.width;
        var m = i.height;
        var y = this._getColor(t);
        var T = this.floatsPerVert;
        var E = a + this.uvOffset;
        if (n) {
          u = i.x / p;
          d = (i.x + m) / p;
          f = (i.y + g) / v;
          _ = i.y / v;
          l[E] = u;
          l[E + 1] = _;
          l[E += T] = u;
          l[E + 1] = f;
          l[E += T] = d;
          l[E + 1] = _;
          l[E += T] = d;
          l[E + 1] = f;
        } else {
          u = i.x / p;
          d = (i.x + g) / p;
          f = (i.y + m) / v;
          _ = i.y / v;
          l[E] = u;
          l[E + 1] = f;
          l[E += T] = d;
          l[E + 1] = f;
          l[E += T] = u;
          l[E + 1] = _;
          l[E += T] = d;
          l[E + 1] = _;
        }
        u = r;
        d = r + g * o;
        f = s - m * o;
        _ = s;
        this.appendVerts(t, a, u, d, f, _);
        var A = a + this.colorOffset;
        for (var x = 0; x < 4; x++) {
          h[A] = y;
          A += T;
        }
        a += 4 * this.floatsPerVert;
      };
      r.appendVerts = function (t, e, i, n, r, s) {
        var a = this._local;
        var o = this.floatsPerVert;
        a[e] = i;
        a[e + 1] = r;
        a[e += o] = n;
        a[e + 1] = r;
        a[e += o] = i;
        a[e + 1] = s;
        a[e += o] = n;
        a[e + 1] = s;
      };
      r.updateWorldVerts = function (t) {
        var e = t.node._worldMatrix.m;
        var i = e[0];
        var n = e[1];
        var r = e[4];
        var s = e[5];
        var a = e[12];
        var o = e[13];
        var c = this._local;
        var l = this._renderData.vDatas[0];
        var h = this.floatsPerVert;
        for (var u = 0; u < c.length; u += h) {
          var f = c[u];
          var d = c[u + 1];
          l[u] = f * i + d * r + a;
          l[u + 1] = f * n + d * s + o;
        }
      };
      return n;
    }(r.default);
    i.default = o;
    e.exports = i.default;
  }, {
    "../../../../utils/label/bmfont": 197
  }],
  207: [function (t, e, i) {
    "use strict";

    function n(t, e) {
      return (n = Object.setPrototypeOf || function (t, e) {
        t.__proto__ = e;
        return t;
      })(t, e);
    }
    i.__esModule = true;
    i.default = undefined;
    t("../../../../../platform/js");
    t("./bmfont");
    var r = t("../../../../utils/label/letter-font");
    var s = cc.color(255, 255, 255, 255);
    var a = function (t) {
      function r() {
        return t.apply(this, arguments) || this;
      }
      r.prototype = Object.create(t.prototype);
      r.prototype.constructor = r;
      n(r, t);
      var a = r.prototype;
      a.createData = function (t) {
        return t.requestRenderData();
      };
      a._getColor = function (t) {
        s._fastSetA(t.node._color.a);
        return s._val;
      };
      a.updateColor = function (e) {
        var i = this._getColor(e);
        t.prototype.updateColor.call(this, e, i);
      };
      return r;
    }(r);
    i.default = a;
    e.exports = i.default;
  }, {
    "../../../../../platform/js": 183,
    "../../../../utils/label/letter-font": 199,
    "./bmfont": 206
  }],
  208: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n;
    var r = (n = t("../../../../../assets/material/material-variant")) && n.__esModule ? n : {
      default: n
    };
    t("../../../../../components/CCLabel");
    t("../../../../../components/CCLabelShadow");
    t("../../../../../components/CCLabelOutline");
    t("../../../../../assets/material/CCMaterial");
    var s = function () {
      function t() {}
      var e = t.prototype;
      e.init = function (t) {
        this.labelMaterial = null;
        this._label = this._renderComp = t;
        renderer.CustomAssembler.prototype.ctor.call(this);
        t.node._proxy.setAssembler(this);
        this._layout = new jsb.LabelRenderer();
        this._layout.init(t);
        this._cfg = new DataView(this._layout._cfg);
        this._layoutInfo = new DataView(this._layout._layout);
        this._cfgFields = "string" == typeof jsb.LabelRenderer._cfgFields ? JSON.parse(jsb.LabelRenderer._cfgFields) : jsb.LabelRenderer._cfgFields;
        this._layoutFields = "string" == typeof jsb.LabelRenderer._layoutFields ? JSON.parse(jsb.LabelRenderer._layoutFields) : jsb.LabelRenderer._layoutFields;
        this._layout.bindNodeProxy(t.node._proxy);
        this._bindMaterial(t);
      };
      e._setBufferFlag = function (t, e, i, n, r) {
        if ("int8" == n && 1 == i) {
          var s = t.getInt8(e);
          t.setInt8(e, r | s);
        } else if ("int32" == n && 4 == i) {
          var a = t.getInt32(e, jsb.__isLittleEndian__);
          t.setInt32(e, r | a, jsb.__isLittleEndian__);
        }
      };
      e._updateCfgFlag = function (t) {
        var e = this._cfgFields.updateFlags;
        this._setBufferFlag(this._cfg, e.offset, e.size, e.type, t);
      };
      e._setBufferValue = function (t, e, i, n, r) {
        if ("float" == n && 4 == i) {
          t.setFloat32(e, r, jsb.__isLittleEndian__);
        } else if ("int32" == n && 4 == i) {
          t.setInt32(e, r, jsb.__isLittleEndian__);
        } else if ("bool" == n && 1 == i) {
          t.setInt8(e, r ? 1 : 0, jsb.__isLittleEndian__);
        } else if ("Color4B" == n && 4 == i) {
          t.setUint8(e, r.r);
          t.setUint8(e + 1, r.g);
          t.setUint8(e + 2, r.b);
          t.setUint8(e + 3, r.a);
        } else if ("int8" == n && 1 == i) {
          t.setUint8(e, r);
        }
      };
      e._setFieldValue = function (t, e, i, n) {
        var r = e[i];
        this._setBufferValue(t, r.offset, r.size, r.type, n);
      };
      e._getBufferValue = function (t, e, i, n) {
        return "float" == n && 4 == i ? t.getFloat32(e, jsb.__isLittleEndian__) : "int32" == n && 4 == i ? t.getInt32(e, jsb.__isLittleEndian__) : "bool" == n && 1 == i ? 0 != t.getInt8(e, jsb.__isLittleEndian__) : "Color4B" == n && 4 == i ? {
          r: t.getUint8(e),
          g: t.getUint8(e + 1),
          b: t.getUint8(e + 2),
          a: t.getUint8(e + 3)
        } : "int8" == n && 1 == i ? t.getUint8(e) : undefined;
      };
      e._getFieldValue = function (t, e, i) {
        var n = e[i];
        return this._getBufferValue(t, n.offset, n.size, n.type);
      };
      e._getLayoutValue = function (t) {
        return this._getFieldValue(this._layoutInfo, this._layoutFields, t);
      };
      e._setLayoutValue = function (t, e) {
        return this._setFieldValue(this._layoutInfo, this._layoutFields, t, e);
      };
      e._updateCfgFlag_Content = function () {
        this._updateCfgFlag(1);
      };
      e._updateCfgFlag_Font = function () {
        this._updateCfgFlag(2);
      };
      e._colorEqual = function (t, e) {
        return t.r == e.r && t.g == e.g && t.b == e.b && t.a == e.a;
      };
      e._colorToObj = function (t, e, i, n) {
        return {
          r: t,
          g: e,
          b: i,
          a: n
        };
      };
      e.setString = function (t) {
        if (t != this._layout.string) {
          this._layout.string = t;
          this._updateCfgFlag_Content();
        }
      };
      e.setFontPath = function (t) {
        if (t != this._layout.fontPath) {
          this._layout.fontPath = t;
          this._updateCfgFlag_Font();
        }
      };
      e.setFontSize = function (t, e) {
        if (this._getFieldValue(this._cfg, this._cfgFields, "fontSize") != t) {
          this._setFieldValue(this._cfg, this._cfgFields, "fontSize", t);
          this._setFieldValue(this._cfg, this._cfgFields, "fontSizeRetina", e);
          this._updateCfgFlag_Font();
        }
      };
      e.setOutline = function (t) {
        var e = this._getLayoutValue("outlineSize");
        if (e > 0 != t > 0) {
          this._updateCfgFlag_Font();
        }
        if (e != t) {
          this._updateCfgFlag_Content();
          this._setLayoutValue("outlineSize", t);
        }
      };
      e.setOutlineColor = function (t) {
        var e = this._getLayoutValue("outlineColor");
        if (!this._colorEqual(e, t)) {
          this._setLayoutValue("outlineColor", t);
          this._updateCfgFlag_Content();
        }
      };
      e.setLineHeight = function (t) {
        if (this._getLayoutValue("lineHeight") != t) {
          this._setLayoutValue("lineHeight", t);
          this._updateCfgFlag_Content();
        }
      };
      e.setOverFlow = function (t) {
        if (this._getLayoutValue("overflow") != t) {
          this._setLayoutValue("overflow", t);
          this._updateCfgFlag_Content();
        }
      };
      e.setEnableWrap = function (t) {
        if (this._getLayoutValue("wrap") != t) {
          this._setLayoutValue("wrap", t);
          this._updateCfgFlag_Content();
        }
      };
      e.setVerticalAlign = function (t) {
        if (this._getLayoutValue("valign") != t) {
          this._setLayoutValue("valign", t);
          this._updateCfgFlag_Content();
        }
      };
      e.setHorizontalAlign = function (t) {
        if (this._getLayoutValue("halign") != t) {
          this._setLayoutValue("halign", t);
          this._updateCfgFlag_Content();
        }
      };
      e.setContentSize = function (t, e) {
        var i = this._getLayoutValue("width");
        var n = this._getLayoutValue("height");
        if (!(i == t && n == e)) {
          this._setLayoutValue("height", e);
          this._setLayoutValue("width", t);
          this._updateCfgFlag_Content();
        }
      };
      e.setAnchorPoint = function (t, e) {
        var i = this._getLayoutValue("anchorX");
        var n = this._getLayoutValue("anchorY");
        if (!(i == t && n == e)) {
          this._setLayoutValue("anchorX", t);
          this._setLayoutValue("anchorY", e);
          this._updateCfgFlag_Content();
        }
      };
      e.setColor = function (t) {
        var e = this._getLayoutValue("color");
        if (!this._colorEqual(e, t)) {
          this._setLayoutValue("color", t);
          this._updateCfgFlag_Content();
        }
      };
      e.setShadow = function (t, e, i) {
        var n = this._getLayoutValue("shadowBlur");
        var r = this._getLayoutValue("shadowX");
        var s = this._getLayoutValue("shadowY");
        if (n > 0 != i > 0) {
          this._updateCfgFlag_Font();
        }
        var a = false;
        if (n != i) {
          this._setLayoutValue("shadowBlur", i);
          a = true;
        }
        if (r != t) {
          this._setLayoutValue("shadowX", t);
          a = true;
        }
        if (s != e) {
          this._setLayoutValue("shadowY", e);
          a = true;
        }
        if (a) {
          this._updateCfgFlag_Content();
        }
      };
      e.setShadowColor = function (t) {
        var e = this._getLayoutValue("shadowColor");
        if (!this._colorEqual(e, t)) {
          this._setLayoutValue("shadowColor", t);
          this._updateCfgFlag_Content();
        }
      };
      e.setItalic = function (t) {
        if (this._getLayoutValue("italic") != t) {
          this._setLayoutValue("italic", t);
          this._updateCfgFlag_Content();
        }
      };
      e.setBold = function (t) {
        if (this._getLayoutValue("bold") != t) {
          this._setLayoutValue("bold", t);
          this._updateCfgFlag_Content();
          this._updateCfgFlag_Font();
        }
      };
      e.setUnderline = function (t) {
        if (this._getLayoutValue("underline") != t) {
          this._setLayoutValue("underline", t);
          this._updateCfgFlag_Content();
        }
      };
      e.setSpacingX = function (t) {
        if (!(this._getLayoutValue("spaceX") == t || "number" != typeof t || isNaN(t))) {
          this._setLayoutValue("spaceX", t);
          this._updateCfgFlag_Content();
        }
      };
      e.updateRenderData = function (t) {
        if (t._vertsDirty) {
          if (t.font && t.font.nativeUrl) {
            this.setFontPath(cc.assetManager.cacheManager.getCache(t.font.nativeUrl) || t.font.nativeUrl);
          }
          var e = this._layout;
          var i = t.node.color;
          var n = t.node;
          var r = t.fontSize;
          this.setString(t.string);
          this.setFontSize(t.fontSize, r / 72 * t.fontSize);
          this.setLineHeight(t.lineHeight);
          this.setEnableWrap(t.enableWrapText);
          this.setItalic(t.enableItalic);
          this.setUnderline(t.enableUnderline);
          this.setBold(t.enableBold);
          this.setOverFlow(t.overflow);
          this.setVerticalAlign(t.verticalAlign);
          this.setHorizontalAlign(t.horizontalAlign);
          this.setSpacingX(t.spacingX);
          this.setContentSize(n.getContentSize().width, n.getContentSize().height);
          this.setAnchorPoint(n.anchorX, n.anchorY);
          this.setColor(this._colorToObj(i.getR(), i.getG(), i.getB(), Math.ceil(i.getA() * n.opacity / 255)));
          var s = n.getComponent(cc.LabelShadow);
          if (s && s.enabled) {
            var a = s.color;
            this.setShadow(s.offset.x, s.offset.y, s.blur);
            this.setShadowColor(this._colorToObj(a.getR(), a.getG(), a.getB(), Math.ceil(a.getA() * n.opacity / 255)));
          } else {
            this.setShadow(0, 0, -1);
          }
          this._updateTTFMaterial(t);
          e.render();
        }
      };
      e._bindMaterial = function (t) {
        var e = this.labelMaterial;
        if (!e) {
          e = r.default.createWithBuiltin("2d-label", t);
          this.labelMaterial = e;
        }
        return e;
      };
      e._updateTTFMaterial = function (t) {
        var e = this._bindMaterial(t);
        var i = this._label.node;
        var n = this._layout;
        var r = i.getComponent(cc.LabelOutline);
        var s = 0;
        if (r && r.enabled && r.width > 0) {
          s = Math.max(Math.min(r.width / 10, .4), .1);
          var a = r.color;
          this.setOutlineColor(this._colorToObj(a.getR(), a.getG(), a.getB(), Math.ceil(a.getA() * i.opacity / 255)));
        }
        this.setOutline(s);
        e.define("CC_USE_MODEL", true);
        e.define("USE_TEXTURE_ALPHAONLY", true);
        e.define("USE_SDF", s > 0 || t.enableBold);
        e.define("USE_SDF_EXTEND", t.enableBold ? 1 : 0);
        if (undefined !== e.getDefine("CC_SUPPORT_standard_derivatives") && cc.sys.glExtension("OES_standard_derivatives")) {
          e.define("CC_SUPPORT_standard_derivatives", true);
        }
        n.setEffect(e.effect._nativeObj);
      };
      e.fillBuffers = function () {
        this._layout.render();
      };
      e.getVfmt = function () {};
      return t;
    }();
    i.default = s;
    e.exports = i.default;
  }, {
    "../../../../../assets/material/CCMaterial": 76,
    "../../../../../assets/material/material-variant": 83,
    "../../../../../components/CCLabel": 102,
    "../../../../../components/CCLabelOutline": 103,
    "../../../../../components/CCLabelShadow": 104
  }],
  209: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n;
    var r = (n = t("../../../../utils/label/ttf")) && n.__esModule ? n : {
      default: n
    };
    function s(t, e) {
      return (s = Object.setPrototypeOf || function (t, e) {
        t.__proto__ = e;
        return t;
      })(t, e);
    }
    var a = t("../../../../../components/CCLabelShadow");
    var o = cc.color(255, 255, 255, 255);
    var c = function (t) {
      function n() {
        return t.apply(this, arguments) || this;
      }
      n.prototype = Object.create(t.prototype);
      n.prototype.constructor = n;
      s(n, t);
      var r = n.prototype;
      r.updateUVs = function (t) {
        var e = this._renderData.vDatas[0];
        var i = t._frame.uv;
        var n = this.uvOffset;
        var r = this.floatsPerVert;
        for (var s = 0; s < 4; s++) {
          var a = 2 * s;
          var o = r * s + n;
          e[o] = i[a];
          e[o + 1] = i[a + 1];
        }
      };
      r.updateColor = function (e) {
        o._fastSetA(e.node._color.a);
        var i = o._val;
        t.prototype.updateColor.call(this, e, i);
      };
      r.updateVerts = function (t) {
        var e = t.node;
        var i = t._ttfTexture.width;
        var n = t._ttfTexture.height;
        var r = e.anchorX * e.width;
        var s = e.anchorY * e.height;
        var o = a && t.getComponent(a);
        if (o && o._enabled) {
          var c = (i - e.width) / 2;
          var l = (n - e.height) / 2;
          var h = o.offset;
          if (-h.x > c) {
            r += i - e.width;
          } else if (c > h.x) {
            r += c - h.x;
          }
          if (-h.y > l) {
            s += n - e.height;
          } else if (l > h.y) {
            s += l - h.y;
          }
        }
        var u = this._local;
        u[0] = -r;
        u[1] = -s;
        u[2] = i - r;
        u[3] = n - s;
        this.updateUVs(t);
        this.updateWorldVerts(t);
      };
      return n;
    }(r.default);
    i.default = c;
    e.exports = i.default;
  }, {
    "../../../../../components/CCLabelShadow": 104,
    "../../../../utils/label/ttf": 200
  }],
  210: [function (t) {
    "use strict";

    var e = t("../../../assembler") && t("../../../assembler").__esModule ? t("../../../assembler") : {
      default: t("../../../assembler")
    };
    var i = t("../../../../components/CCLabel") && t("../../../../components/CCLabel").__esModule ? t("../../../../components/CCLabel") : {
      default: t("../../../../components/CCLabel")
    };
    var n = t("./2d/ttf") && t("./2d/ttf").__esModule ? t("./2d/ttf") : {
      default: t("./2d/ttf")
    };
    var r = t("./2d/bmfont") && t("./2d/bmfont").__esModule ? t("./2d/bmfont") : {
      default: t("./2d/bmfont")
    };
    var s = t("./2d/letter") && t("./2d/letter").__esModule ? t("./2d/letter") : {
      default: t("./2d/letter")
    };
    var a = t("./3d/ttf") && t("./3d/ttf").__esModule ? t("./3d/ttf") : {
      default: t("./3d/ttf")
    };
    var o = t("./3d/bmfont") && t("./3d/bmfont").__esModule ? t("./3d/bmfont") : {
      default: t("./3d/bmfont")
    };
    var c = t("./3d/letter") && t("./3d/letter").__esModule ? t("./3d/letter") : {
      default: t("./3d/letter")
    };
    i.default._canvasPool = {
      pool: [],
      get: function () {
        var t = this.pool.pop();
        if (!t) {
          var e = document.createElement("canvas");
          var i = e.getContext("2d");
          t = {
            canvas: e,
            context: i
          };
          i.textBaseline = "alphabetic";
        }
        return t;
      },
      put: function (t) {
        if (!(this.pool.length >= 32)) {
          this.pool.push(t);
        }
      }
    };
    e.default.register(cc.Label, {
      getConstructor: function (t) {
        var e = t.node.is3DNode;
        var l = e ? a.default : n.default;
        if (t.font instanceof cc.BitmapFont) {
          l = e ? o.default : r.default;
        } else if (t.cacheMode === i.default.CacheMode.CHAR) {
          if (!(cc.sys.platform === cc.sys.WECHAT_GAME_SUB)) {
            l = e ? c.default : s.default;
          }
        }
        return l;
      },
      TTF: n.default,
      Bmfont: r.default,
      Letter: s.default,
      TTF3D: a.default,
      Bmfont3D: o.default,
      Letter3D: c.default,
      NativeTTF: undefined
    });
  }, {
    "../../../../components/CCLabel": 102,
    "../../../assembler": 190,
    "./2d/bmfont": 206,
    "./2d/letter": 207,
    "./2d/nativeTTF": 208,
    "./2d/ttf": 209,
    "./3d/bmfont": undefined,
    "./3d/letter": undefined,
    "./3d/ttf": undefined
  }],
  211: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.MaskAssembler = undefined;
    var n;
    var r = (n = t("../../assembler")) && n.__esModule ? n : {
      default: n
    };
    function s(t, e) {
      return (s = Object.setPrototypeOf || function (t, e) {
        t.__proto__ = e;
        return t;
      })(t, e);
    }
    var a = t("../../../components/CCMask");
    var o = t("../../render-flow");
    var c = t("./sprite/2d/simple");
    var l = t("./graphics");
    var h = t("../../../../renderer/gfx");
    var u = t("../vertex-format").vfmtPos;
    var f = [];
    function _() {
      var t = 0;
      for (var e = 0; e < f.length; ++e) {
        t += 1 << e;
      }
      return t;
    }
    function p(t, e, i, n, r, s) {
      var a = t.effect;
      var o = h.STENCIL_OP_KEEP;
      var c = h.STENCIL_OP_KEEP;
      a.setStencil(h.STENCIL_ENABLE, e, n, r, i, o, c, s);
    }
    function v(t) {
      f.length;
      f.push(t);
    }
    function g(t, e) {
      f.length;
      f.pop();
      if (0 === f.length) {
        e._flushMaterial(t._exitMaterial);
      } else {
        T(e);
      }
    }
    function m(t, e) {
      var i = h.DS_FUNC_NEVER;
      var n = 1 << f.length - 1;
      var a = t.inverted ? h.STENCIL_OP_REPLACE : h.STENCIL_OP_ZERO;
      p(t._clearMaterial, i, a, n, n, n);
      var o = e.getBuffer("mesh", u);
      var c = o.request(4, 6);
      var l = c.indiceOffset;
      var f = c.byteOffset >> 2;
      var _ = c.vertexOffset;
      var v = o._vData;
      var g = o._iData;
      v[f++] = -1;
      v[f++] = -1;
      v[f++] = -1;
      v[f++] = 1;
      v[f++] = 1;
      v[f++] = 1;
      v[f++] = 1;
      v[f++] = -1;
      g[l++] = _;
      g[l++] = _ + 3;
      g[l++] = _ + 1;
      g[l++] = _ + 1;
      g[l++] = _ + 3;
      g[l++] = _ + 2;
      e.node = e._dummyNode;
      e.material = t._clearMaterial;
      e._flush();
    }
    function y(t, e) {
      var i = h.DS_FUNC_NEVER;
      var n = 1 << f.length - 1;
      var o = t.inverted ? h.STENCIL_OP_ZERO : h.STENCIL_OP_REPLACE;
      p(t._materials[0], i, o, n, n, n);
      e.material = t._materials[0];
      if (t._type === a.Type.IMAGE_STENCIL) {
        e.node = e._dummyNode;
        c.prototype.fillBuffers.call(t._assembler, t, e);
        e._flush();
      } else {
        e.node = t.node;
        l.prototype.fillBuffers.call(t._graphics._assembler, t._graphics, e);
      }
    }
    function T(t) {
      var e = h.DS_FUNC_EQUAL;
      var i = h.STENCIL_OP_KEEP;
      var n = _();
      var s = 1 << f.length - 1;
      var a = f[f.length - 1];
      p(a._enableMaterial, e, i, n, n, s);
      t._flushMaterial(a._enableMaterial);
    }
    var E = function (t) {
      function n() {
        return t.apply(this, arguments) || this;
      }
      n.prototype = Object.create(t.prototype);
      n.prototype.constructor = n;
      s(n, t);
      var r = n.prototype;
      r.updateRenderData = function (t) {
        if (t._type === a.Type.IMAGE_STENCIL) {
          if (t.spriteFrame) {
            c.prototype.updateRenderData.call(this, t);
          } else {
            t.setMaterial(0, null);
          }
        } else {
          t._graphics.setMaterial(0, t._materials[0]);
          l.prototype.updateRenderData.call(t._graphics._assembler, t._graphics, t._graphics);
        }
      };
      r.fillBuffers = function (t, e) {
        if (t._type !== a.Type.IMAGE_STENCIL || t.spriteFrame) {
          v(t);
          m(t, e);
          y(t, e);
          T(e);
        }
        t.node._renderFlag |= o.FLAG_UPDATE_RENDER_DATA;
      };
      r.postFillBuffers = function (t, e) {
        if (t._type !== a.Type.IMAGE_STENCIL || t.spriteFrame) {
          g(t, e);
        }
        t.node._renderFlag |= o.FLAG_UPDATE_RENDER_DATA;
      };
      return n;
    }(c);
    i.MaskAssembler = E;
    r.default.register(a, E);
  }, {
    "../../../../renderer/gfx": 282,
    "../../../components/CCMask": 106,
    "../../assembler": 190,
    "../../render-flow": 194,
    "../vertex-format": 225,
    "./graphics": 204,
    "./sprite/2d/simple": 215
  }],
  212: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n;
    var r = (n = t("../../../../assembler-2d")) && n.__esModule ? n : {
      default: n
    };
    function s(t, e) {
      return (s = Object.setPrototypeOf || function (t, e) {
        t.__proto__ = e;
        return t;
      })(t, e);
    }
    var a = t("../../../../../components/CCSprite").FillType;
    var o = function (t) {
      function n() {
        return t.apply(this, arguments) || this;
      }
      n.prototype = Object.create(t.prototype);
      n.prototype.constructor = n;
      s(n, t);
      var r = n.prototype;
      r.updateRenderData = function (t) {
        var e = t._spriteFrame;
        this.packToDynamicAtlas(t, e);
        if (t._vertsDirty) {
          var i = t._fillStart;
          var n = t._fillRange;
          if (n < 0) {
            i += n;
            n = -n;
          }
          n = (n = (n = i + n) > 1 ? 1 : n) < 0 ? 0 : n;
          var r = (i = (i = i > 1 ? 1 : i) < 0 ? 0 : i) + (n = (n -= i) < 0 ? 0 : n);
          r = r > 1 ? 1 : r;
          this.updateUVs(t, i, r);
          this.updateVerts(t, i, r);
          t._vertsDirty = false;
        }
      };
      r.updateUVs = function (t, e, i) {
        var n;
        var r;
        var s;
        var o;
        var c;
        var l;
        var h;
        var u;
        var f;
        var d;
        var _ = t._spriteFrame;
        var p = _._texture.width;
        var v = _._texture.height;
        var g = _._rect;
        if (_._rotated) {
          n = g.x / p;
          r = (g.y + g.width) / v;
          s = c = n;
          h = f = (g.x + g.height) / p;
          l = d = r;
          o = u = g.y / v;
        } else {
          n = g.x / p;
          r = (g.y + g.height) / v;
          s = h = n;
          c = f = (g.x + g.width) / p;
          o = l = r;
          u = d = g.y / v;
        }
        var m = this._renderData.vDatas[0];
        var y = this.uvOffset;
        var T = this.floatsPerVert;
        switch (t._fillType) {
          case a.HORIZONTAL:
            m[y] = s + (c - s) * e;
            m[y + 1] = o + (l - o) * e;
            m[y + T] = s + (c - s) * i;
            m[y + T + 1] = o + (l - o) * i;
            m[y + 2 * T] = h + (f - h) * e;
            m[y + 2 * T + 1] = u + (d - u) * e;
            m[y + 3 * T] = h + (f - h) * i;
            m[y + 3 * T + 1] = u + (d - u) * i;
            break;
          case a.VERTICAL:
            m[y] = s + (h - s) * e;
            m[y + 1] = o + (u - o) * e;
            m[y + T] = c + (f - c) * e;
            m[y + T + 1] = l + (d - l) * e;
            m[y + 2 * T] = s + (h - s) * i;
            m[y + 2 * T + 1] = o + (u - o) * i;
            m[y + 3 * T] = c + (f - c) * i;
            m[y + 3 * T + 1] = l + (d - l) * i;
        }
      };
      r.updateVerts = function (t, e, i) {
        var n;
        var r = t.node;
        var s = r.width;
        var o = r.height;
        var c = r.anchorX * s;
        var l = r.anchorY * o;
        var h = -c;
        var u = -l;
        var f = s - c;
        var d = o - l;
        switch (t._fillType) {
          case a.HORIZONTAL:
            n = h + (f - h) * i;
            h += (f - h) * e;
            f = n;
            break;
          case a.VERTICAL:
            n = u + (d - u) * i;
            u += (d - u) * e;
            d = n;
        }
        var _ = this._local;
        _[0] = h;
        _[1] = u;
        _[2] = f;
        _[3] = d;
        this.updateWorldVerts(t);
      };
      return n;
    }(r.default);
    i.default = o;
    e.exports = i.default;
  }, {
    "../../../../../components/CCSprite": 115,
    "../../../../assembler-2d": 188
  }],
  213: [function (t, e, i) {
    "use strict";

    var n;
    function r(t, e) {
      return (r = Object.setPrototypeOf || function (t, e) {
        t.__proto__ = e;
        return t;
      })(t, e);
    }
    i.__esModule = true;
    i.default = undefined;
    var s = function (t) {
      function n() {
        return t.apply(this, arguments) || this;
      }
      n.prototype = Object.create(t.prototype);
      n.prototype.constructor = n;
      r(n, t);
      var s = n.prototype;
      s.initData = function () {
        this._renderData.createFlexData(0, 4, 6, this.getVfmt());
      };
      s.updateRenderData = function (t) {
        this.packToDynamicAtlas(t, t._spriteFrame);
        var e = t.spriteFrame;
        if (e) {
          var i = e.vertices;
          if (i) {
            this.verticesCount = i.x.length;
            this.indicesCount = i.triangles.length;
            var n = this._renderData._flexBuffer;
            if (n.reserve(this.verticesCount, this.indicesCount)) {
              this.updateColor(t);
              t._vertsDirty = true;
            }
            n.used(this.verticesCount, this.indicesCount);
            this.updateIndices(i.triangles);
            if (t._vertsDirty) {
              this.updateUVs(t);
              this.updateVerts(t);
              this.updateWorldVerts(t);
              t._vertsDirty = false;
            }
          }
        }
      };
      s.updateIndices = function (t) {
        this._renderData.iDatas[0].set(t);
      };
      s.updateUVs = function (t) {
        var e = t.spriteFrame.vertices;
        var i = e.nu;
        var n = e.nv;
        var r = this.uvOffset;
        var s = this.floatsPerVert;
        var a = this._renderData.vDatas[0];
        for (var o = 0; o < i.length; o++) {
          var c = s * o + r;
          a[c] = i[o];
          a[c + 1] = n[o];
        }
      };
      s.updateVerts = function (t) {
        var e = t.node;
        var i = Math.abs(e.width);
        var n = Math.abs(e.height);
        var r = e.anchorX * i;
        var s = e.anchorY * n;
        var a = t.spriteFrame;
        var o = a.vertices;
        var c = o.x;
        var l = o.y;
        var h = a._originalSize.width;
        var u = a._originalSize.height;
        var f = a._rect.width;
        var d = a._rect.height;
        var _ = a._offset.x + (h - f) / 2;
        var p = a._offset.y + (u - d) / 2;
        var v = i / (t.trim ? f : h);
        var g = n / (t.trim ? d : u);
        var m = this._local;
        if (t.trim) {
          var y = 0;
          for (var T = c.length; y < T; y++) {
            var E = 2 * y;
            m[E] = (c[y] - _) * v - r;
            m[E + 1] = (u - l[y] - p) * g - s;
          }
        } else {
          var A = 0;
          for (var x = c.length; A < x; A++) {
            var C = 2 * A;
            m[C] = c[A] * v - r;
            m[C + 1] = (u - l[A]) * g - s;
          }
        }
        if (a._flipX) {
          var b = 0;
          for (var S = this.verticesCount; b < S; b++) {
            m[2 * b] = i - m[2 * b] - 2 * r;
          }
        }
        if (a._flipY) {
          var R = 0;
          for (var M = this.verticesCount; R < M; R++) {
            m[2 * R + 1] = n - m[2 * R + 1] - 2 * s;
          }
        }
      };
      s.updateWorldVerts = function (t) {
        var e = t.node._worldMatrix.m;
        var i = e[0];
        var n = e[1];
        var r = e[4];
        var s = e[5];
        var a = e[12];
        var o = e[13];
        var c = this._local;
        var l = this._renderData.vDatas[0];
        var h = this.floatsPerVert;
        var u = 0;
        for (var f = this.verticesCount; u < f; u++) {
          var d = c[2 * u];
          var _ = c[2 * u + 1];
          l[h * u] = d * i + _ * r + a;
          l[h * u + 1] = d * n + _ * s + o;
        }
      };
      return n;
    }(((n = t("../../../../assembler-2d")) && n.__esModule ? n : {
      default: n
    }).default);
    i.default = s;
    e.exports = i.default;
  }, {
    "../../../../assembler-2d": 188
  }],
  214: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n;
    var r = (n = t("../../../../assembler-2d")) && n.__esModule ? n : {
      default: n
    };
    function s(t, e) {
      return (s = Object.setPrototypeOf || function (t, e) {
        t.__proto__ = e;
        return t;
      })(t, e);
    }
    var a = 2 * Math.PI;
    var o = [cc.v2(0, 0), cc.v2(0, 0), cc.v2(0, 0), cc.v2(0, 0)];
    var c = [0, 0, 0, 0];
    var l = [0, 0, 0, 0, 0, 0, 0, 0];
    var h = [cc.v2(0, 0), cc.v2(0, 0), cc.v2(0, 0), cc.v2(0, 0)];
    var u = [cc.v2(0, 0), cc.v2(0, 0), cc.v2(0, 0), cc.v2(0, 0)];
    var f = cc.v2(0, 0);
    var d = [];
    function _(t, e, i, n, r, s, a) {
      var o;
      var c;
      var l = Math.sin(s);
      var h = Math.cos(s);
      if (0 !== Math.cos(s)) {
        o = l / h;
        if ((t - r.x) * h > 0) {
          var u = r.y + o * (t - r.x);
          a[0].x = t;
          a[0].y = u;
        }
        if ((e - r.x) * h > 0) {
          var f = r.y + o * (e - r.x);
          a[2].x = e;
          a[2].y = f;
        }
      }
      if (0 !== Math.sin(s)) {
        c = h / l;
        if ((n - r.y) * l > 0) {
          var d = r.x + c * (n - r.y);
          a[3].x = d;
          a[3].y = n;
        }
        if ((i - r.y) * l > 0) {
          var _ = r.x + c * (i - r.y);
          a[1].x = _;
          a[1].y = i;
        }
      }
    }
    function p(t) {
      var e = t.node;
      var i = e.width;
      var n = e.height;
      var r = e.anchorX * i;
      var s = e.anchorY * n;
      var a = -r;
      var l = -s;
      var h = i - r;
      var u = n - s;
      c[0] = a;
      c[1] = l;
      c[2] = h;
      c[3] = u;
      var p = t._fillCenter;
      var v = f.x = Math.min(Math.max(0, p.x), 1) * (h - a) + a;
      var g = f.y = Math.min(Math.max(0, p.y), 1) * (u - l) + l;
      o[0].x = o[3].x = a;
      o[1].x = o[2].x = h;
      o[0].y = o[1].y = l;
      o[2].y = o[3].y = u;
      d.length = 0;
      if (v !== c[0]) {
        d[0] = [3, 0];
      }
      if (v !== c[2]) {
        d[2] = [1, 2];
      }
      if (g !== c[1]) {
        d[1] = [0, 1];
      }
      if (g !== c[3]) {
        d[3] = [2, 3];
      }
    }
    function v(t, e) {
      var i;
      var n;
      i = e.x - t.x;
      n = e.y - t.y;
      if (0 !== i || 0 !== n) {
        if (0 === i) {
          return n > 0 ? .5 * Math.PI : 1.5 * Math.PI;
        }
        var r = Math.atan(n / i);
        if (i < 0) {
          r += Math.PI;
        }
        return r;
      }
    }
    var g = function (t) {
      function n() {
        return t.apply(this, arguments) || this;
      }
      n.prototype = Object.create(t.prototype);
      n.prototype.constructor = n;
      s(n, t);
      var r = n.prototype;
      r.initData = function () {
        this._renderData.createFlexData(0, 4, 6, this.getVfmt());
        this.updateIndices();
      };
      r.updateRenderData = function (e) {
        t.prototype.updateRenderData.call(this, e);
        var i;
        var n;
        var r;
        var s;
        var o;
        var d;
        var v;
        var g;
        var m;
        var y = e.spriteFrame;
        this.packToDynamicAtlas(e, y);
        if (e._vertsDirty) {
          var T = e._fillStart;
          var E = e._fillRange;
          for (E < 0 && (T += E, E = -E); T >= 1;) {
            T -= 1;
          }
          for (; T < 0;) {
            T += 1;
          }
          T *= a;
          E *= a;
          p(e);
          d = (i = y)._texture.width;
          v = i._texture.height;
          g = i._rect;
          m = l;
          if (i._rotated) {
            n = g.x / d;
            r = (g.x + g.height) / d;
            s = g.y / v;
            o = (g.y + g.width) / v;
            m[0] = m[2] = n;
            m[4] = m[6] = r;
            m[3] = m[7] = o;
            m[1] = m[5] = s;
          } else {
            n = g.x / d;
            r = (g.x + g.width) / d;
            s = g.y / v;
            o = (g.y + g.height) / v;
            m[0] = m[4] = n;
            m[2] = m[6] = r;
            m[1] = m[3] = o;
            m[5] = m[7] = s;
          }
          _(c[0], c[2], c[1], c[3], f, T, h);
          _(c[0], c[2], c[1], c[3], f, T + E, u);
          this.updateVerts(e, T, E);
          e._vertsDirty = false;
        }
      };
      r.updateVerts = function (t, e, i) {
        var n = e + i;
        var r = this._local;
        r.length = 0;
        var s = 0;
        var c = 3 * this.floatsPerVert;
        for (var l = 0; l < 4; ++l) {
          var _ = d[l];
          if (_) {
            if (i >= a) {
              r.length = s + c;
              this._generateTriangle(r, s, f, o[_[0]], o[_[1]]);
              s += c;
            } else {
              var p = v(f, o[_[0]]);
              var g = v(f, o[_[1]]);
              if (g < p) {
                g += a;
              }
              p -= a;
              g -= a;
              for (var m = 0; m < 3; ++m) {
                if (!(p >= n)) {
                  if (p >= e) {
                    r.length = s + c;
                    if (g >= n) {
                      this._generateTriangle(r, s, f, o[_[0]], u[l]);
                    } else {
                      this._generateTriangle(r, s, f, o[_[0]], o[_[1]]);
                    }
                    s += c;
                  } else if (!(g <= e)) {
                    if (g <= n) {
                      r.length = s + c;
                      this._generateTriangle(r, s, f, h[l], o[_[1]]);
                      s += c;
                    } else {
                      r.length = s + c;
                      this._generateTriangle(r, s, f, h[l], u[l]);
                      s += c;
                    }
                  }
                }
                p += a;
                g += a;
              }
            }
          }
        }
        this.allocWorldVerts(t);
        this.updateWorldVerts(t);
      };
      r.allocWorldVerts = function (t) {
        var e = t.node._color._val;
        var i = this._renderData;
        var n = this.floatsPerVert;
        var r = this._local;
        var s = r.length / n;
        this.verticesCount = this.indicesCount = s;
        var a = i._flexBuffer;
        if (a.reserve(s, s)) {
          this.updateIndices();
        }
        a.used(this.verticesCount, this.indicesCount);
        var o = i.vDatas[0];
        var c = i.uintVDatas[0];
        var l = this.uvOffset;
        for (var h = 0; h < r.length; h += n) {
          var u = h + l;
          o[u] = r[u];
          o[u + 1] = r[u + 1];
          c[u + 2] = e;
        }
      };
      r.updateIndices = function () {
        var t = this._renderData.iDatas[0];
        for (var e = 0; e < t.length; e++) {
          t[e] = e;
        }
      };
      r.updateWorldVerts = function (t) {
        var e = t.node._worldMatrix.m;
        var i = e[0];
        var n = e[1];
        var r = e[4];
        var s = e[5];
        var a = e[12];
        var o = e[13];
        var c = this._local;
        var l = this._renderData.vDatas[0];
        var h = this.floatsPerVert;
        for (var u = 0; u < c.length; u += h) {
          var f = c[u];
          var d = c[u + 1];
          l[u] = f * i + d * r + a;
          l[u + 1] = f * n + d * s + o;
        }
      };
      r._generateTriangle = function (t, e, i, n, r) {
        var a = c[0];
        var o = c[1];
        var l = c[2];
        var h = c[3];
        var u = this.floatsPerVert;
        t[e] = i.x;
        t[e + 1] = i.y;
        t[e + u] = n.x;
        t[e + u + 1] = n.y;
        t[e + 2 * u] = r.x;
        t[e + 2 * u + 1] = r.y;
        var f;
        var d;
        var _ = this.uvOffset;
        f = (i.x - a) / (l - a);
        d = (i.y - o) / (h - o);
        this._generateUV(f, d, t, e + _);
        f = (n.x - a) / (l - a);
        d = (n.y - o) / (h - o);
        this._generateUV(f, d, t, e + u + _);
        f = (r.x - a) / (l - a);
        d = (r.y - o) / (h - o);
        this._generateUV(f, d, t, e + 2 * u + _);
      };
      r._generateUV = function (t, e, i, n) {
        var r = l[0] + (l[2] - l[0]) * t;
        var s = l[4] + (l[6] - l[4]) * t;
        var a = l[1] + (l[3] - l[1]) * t;
        var o = l[5] + (l[7] - l[5]) * t;
        i[n] = r + (s - r) * e;
        i[n + 1] = a + (o - a) * e;
      };
      return n;
    }(r.default);
    i.default = g;
    e.exports = i.default;
  }, {
    "../../../../assembler-2d": 188
  }],
  215: [function (t, e, i) {
    "use strict";

    var n;
    function r(t, e) {
      return (r = Object.setPrototypeOf || function (t, e) {
        t.__proto__ = e;
        return t;
      })(t, e);
    }
    i.__esModule = true;
    i.default = undefined;
    var s = function (t) {
      function n() {
        return t.apply(this, arguments) || this;
      }
      n.prototype = Object.create(t.prototype);
      n.prototype.constructor = n;
      r(n, t);
      var s = n.prototype;
      s.updateRenderData = function (t) {
        this.packToDynamicAtlas(t, t._spriteFrame);
        if (t._vertsDirty) {
          this.updateUVs(t);
          this.updateVerts(t);
          t._vertsDirty = false;
        }
      };
      s.updateUVs = function (t) {
        var e = t._spriteFrame.uv;
        var i = this.uvOffset;
        var n = this.floatsPerVert;
        var r = this._renderData.vDatas[0];
        for (var s = 0; s < 4; s++) {
          var a = 2 * s;
          var o = n * s + i;
          r[o] = e[a];
          r[o + 1] = e[a + 1];
        }
      };
      s.updateVerts = function (t) {
        var e;
        var i;
        var n;
        var r;
        var s = t.node;
        var a = s.width;
        var o = s.height;
        var c = s.anchorX * a;
        var l = s.anchorY * o;
        if (t.trim) {
          e = -c;
          i = -l;
          n = a - c;
          r = o - l;
        } else {
          var h = t.spriteFrame;
          var u = h._originalSize.width;
          var f = h._originalSize.height;
          var d = h._rect.width;
          var _ = h._rect.height;
          var p = h._offset;
          var v = a / u;
          var g = o / f;
          var m = p.x + (u - d) / 2;
          var y = p.x - (u - d) / 2;
          e = m * v - c;
          i = (p.y + (f - _) / 2) * g - l;
          n = a + y * v - c;
          r = o + (p.y - (f - _) / 2) * g - l;
        }
        var T = this._local;
        T[0] = e;
        T[1] = i;
        T[2] = n;
        T[3] = r;
        this.updateWorldVerts(t);
      };
      return n;
    }(((n = t("../../../../assembler-2d")) && n.__esModule ? n : {
      default: n
    }).default);
    i.default = s;
    e.exports = i.default;
  }, {
    "../../../../assembler-2d": 188
  }],
  216: [function (t, e, i) {
    "use strict";

    var n;
    function r(t, e) {
      return (r = Object.setPrototypeOf || function (t, e) {
        t.__proto__ = e;
        return t;
      })(t, e);
    }
    i.__esModule = true;
    i.default = undefined;
    var s = function (t) {
      function n() {
        return t.apply(this, arguments) || this;
      }
      n.prototype = Object.create(t.prototype);
      n.prototype.constructor = n;
      r(n, t);
      var s = n.prototype;
      s.initData = function () {
        if (!(this._renderData.meshCount > 0)) {
          this._renderData.createData(0, this.verticesFloats, this.indicesCount);
          var t = this._renderData.iDatas[0];
          var e = 0;
          for (var i = 0; i < 3; ++i) {
            for (var n = 0; n < 3; ++n) {
              var r = 4 * i + n;
              t[e++] = r;
              t[e++] = r + 1;
              t[e++] = r + 4;
              t[e++] = r + 1;
              t[e++] = r + 5;
              t[e++] = r + 4;
            }
          }
        }
      };
      s.initLocal = function () {
        this._local = [];
        this._local.length = 8;
      };
      s.updateRenderData = function (t) {
        var e = t._spriteFrame;
        this.packToDynamicAtlas(t, e);
        if (t._vertsDirty) {
          this.updateUVs(t);
          this.updateVerts(t);
          t._vertsDirty = false;
        }
      };
      s.updateVerts = function (t) {
        var e = t.node;
        var i = e.width;
        var n = e.height;
        var r = e.anchorX * i;
        var s = e.anchorY * n;
        var a = t.spriteFrame;
        var o = a.insetLeft;
        var c = a.insetRight;
        var l = a.insetTop;
        var h = a.insetBottom;
        var u = i - o - c;
        var f = n - l - h;
        var d = i / (o + c);
        var _ = n / (l + h);
        d = isNaN(d) || d > 1 ? 1 : d;
        _ = isNaN(_) || _ > 1 ? 1 : _;
        u = u < 0 ? 0 : u;
        f = f < 0 ? 0 : f;
        var p = this._local;
        p[0] = -r;
        p[1] = -s;
        p[2] = o * d - r;
        p[3] = h * _ - s;
        p[4] = p[2] + u;
        p[5] = p[3] + f;
        p[6] = i - r;
        p[7] = n - s;
        this.updateWorldVerts(t);
      };
      s.updateUVs = function (t) {
        var e = this._renderData.vDatas[0];
        var i = t.spriteFrame.uvSliced;
        var n = this.uvOffset;
        var r = this.floatsPerVert;
        for (var s = 0; s < 4; ++s) {
          for (var a = 0; a < 4; ++a) {
            var o = 4 * s + a;
            var c = i[o];
            var l = o * r;
            e[l + n] = c.u;
            e[l + n + 1] = c.v;
          }
        }
      };
      s.updateWorldVerts = function (t) {
        var e = t.node._worldMatrix.m;
        var i = e[0];
        var n = e[1];
        var r = e[4];
        var s = e[5];
        var a = e[12];
        var o = e[13];
        var c = this._local;
        var l = this._renderData.vDatas[0];
        var h = this.floatsPerVert;
        for (var u = 0; u < 4; ++u) {
          var f = c[2 * u + 1];
          for (var d = 0; d < 4; ++d) {
            var _ = c[2 * d];
            var p = (4 * u + d) * h;
            l[p] = _ * i + f * r + a;
            l[p + 1] = _ * n + f * s + o;
          }
        }
      };
      return n;
    }(((n = t("../../../../assembler-2d")) && n.__esModule ? n : {
      default: n
    }).default);
    i.default = s;
    Object.assign(s.prototype, {
      verticesCount: 16,
      indicesCount: 54
    });
    e.exports = i.default;
  }, {
    "../../../../assembler-2d": 188
  }],
  217: [function (t, e, i) {
    "use strict";

    var n;
    function r(t, e) {
      return (r = Object.setPrototypeOf || function (t, e) {
        t.__proto__ = e;
        return t;
      })(t, e);
    }
    i.__esModule = true;
    i.default = undefined;
    var s = function (t) {
      function n() {
        return t.apply(this, arguments) || this;
      }
      n.prototype = Object.create(t.prototype);
      n.prototype.constructor = n;
      r(n, t);
      var s = n.prototype;
      s.initData = function () {
        this.verticesCount = 0;
        this.contentWidth = 0;
        this.contentHeight = 0;
        this.rectWidth = 0;
        this.rectHeight = 0;
        this.hRepeat = 0;
        this.vRepeat = 0;
        this.row = 0;
        this.col = 0;
        this._renderData.createFlexData(0, 4, 6, this.getVfmt());
        this._updateIndices();
      };
      s.initLocal = function () {
        this._local = {
          x: [],
          y: []
        };
      };
      s._updateIndices = function () {
        var t = this._renderData.iDatas[0];
        var e = 0;
        var i = 0;
        for (var n = t.length; e < n; e += 6, i += 4) {
          t[e] = i;
          t[e + 1] = i + 1;
          t[e + 2] = i + 2;
          t[e + 3] = i + 1;
          t[e + 4] = i + 3;
          t[e + 5] = i + 2;
        }
      };
      s.updateRenderData = function (t) {
        var e = t._spriteFrame;
        this.packToDynamicAtlas(t, e);
        var i = t.node;
        var n = this.contentWidth = Math.abs(i.width);
        var r = this.contentHeight = Math.abs(i.height);
        var s = e._rect;
        var a = e.insetLeft;
        var o = e.insetRight;
        var c = s.width - a - o;
        var l = e.insetTop;
        var h = e.insetBottom;
        var u = s.height - l - h;
        this.sizableWidth = n - a - o;
        this.sizableHeight = r - l - h;
        this.sizableWidth = this.sizableWidth > 0 ? this.sizableWidth : 0;
        this.sizableHeight = this.sizableHeight > 0 ? this.sizableHeight : 0;
        var f = this.hRepeat = 0 === c ? this.sizableWidth : this.sizableWidth / c;
        var d = this.vRepeat = 0 === u ? this.sizableHeight : this.sizableHeight / u;
        var _ = (this.row = Math.ceil(d + 2)) * (this.col = Math.ceil(f + 2));
        this.verticesCount = 4 * _;
        this.indicesCount = 6 * _;
        var p = this._renderData._flexBuffer;
        if (p.reserve(this.verticesCount, this.indicesCount)) {
          this._updateIndices();
          this.updateColor(t);
        }
        p.used(this.verticesCount, this.indicesCount);
        if (t._vertsDirty) {
          this.updateUVs(t);
          this.updateVerts(t);
          t._vertsDirty = false;
        }
      };
      s.updateVerts = function (t) {
        var e = t._spriteFrame;
        var i = e._rect;
        var n = t.node;
        var r = n.anchorX * n.width;
        var s = n.anchorY * n.height;
        var a = this.row;
        var o = this.col;
        var c = this.contentWidth;
        var l = this.contentHeight;
        var h = this._local;
        var u = h.x;
        var f = h.y;
        u.length = f.length = 0;
        var d;
        var _;
        var p = e.insetLeft;
        var v = e.insetRight;
        var g = i.width - p - v;
        var m = e.insetTop;
        var y = e.insetBottom;
        var T = i.height - m - y;
        var E = n.width / (p + v) > 1 ? 1 : n.width / (p + v);
        var A = n.height / (m + y) > 1 ? 1 : n.height / (m + y);
        d = g > 0 ? Math.floor(1e3 * this.sizableWidth) / 1e3 % g == 0 ? g : this.sizableWidth % g : this.sizableWidth;
        _ = T > 0 ? Math.floor(1e3 * this.sizableHeight) / 1e3 % T == 0 ? T : this.sizableHeight % T : this.sizableHeight;
        for (var x = 0; x <= o; x++) {
          if (0 === x) {
            u[x] = -r;
          } else if (x > 0 && x < o) {
            u[x] = 1 === x ? p * E + Math.min(g, this.sizableWidth) - r : g > 0 ? x === o - 1 ? p + d + g * (x - 2) - r : p + Math.min(g, this.sizableWidth) + g * (x - 2) - r : p + this.sizableWidth - r;
          } else if (x === o) {
            u[x] = Math.min(p + this.sizableWidth + v, c) - r;
          }
        }
        for (var C = 0; C <= a; C++) {
          if (0 === C) {
            f[C] = -s;
          } else if (C > 0 && C < a) {
            f[C] = 1 === C ? y * A + Math.min(T, this.sizableHeight) - s : T > 0 ? C === a - 1 ? y + _ + (C - 2) * T - s : y + Math.min(T, this.sizableHeight) + (C - 2) * T - s : y + this.sizableHeight - s;
          } else if (C === a) {
            f[C] = Math.min(y + this.sizableHeight + m, l) - s;
          }
        }
        this.updateWorldVerts(t);
      };
      s.updateWorldVerts = function (t) {
        var e;
        var i;
        var n;
        var r;
        var s = this._renderData;
        var a = this._local;
        var o = a.x;
        var c = a.y;
        var l = s.vDatas[0];
        var h = this.row;
        var u = this.col;
        var f = t.node._worldMatrix.m;
        var d = f[0];
        var _ = f[1];
        var p = f[4];
        var v = f[5];
        var g = f[12];
        var m = f[13];
        var y = this.floatsPerVert;
        var T = 0;
        for (var E = 0; E < h; ++E) {
          n = c[E];
          r = c[E + 1];
          for (var x = 0; x < u; ++x) {
            e = o[x];
            i = o[x + 1];
            l[T] = e * d + n * p + g;
            l[T + 1] = e * _ + n * v + m;
            l[T += y] = i * d + n * p + g;
            l[T + 1] = i * _ + n * v + m;
            l[T += y] = e * d + r * p + g;
            l[T + 1] = e * _ + r * v + m;
            l[T += y] = i * d + r * p + g;
            l[T + 1] = i * _ + r * v + m;
            T += y;
          }
        }
      };
      s.updateUVs = function (t) {
        var e = this._renderData.vDatas[0];
        if (e) {
          var i = t._spriteFrame;
          var n = i._rect;
          var r = i.insetLeft;
          var s = i.insetRight;
          var a = n.width - r - s;
          var o = i.insetTop;
          var c = i.insetBottom;
          var l = n.height - o - c;
          var h = this.row;
          var u = this.col;
          var f = this.hRepeat;
          var d = this.vRepeat;
          var _ = 0;
          var p = 0;
          var v = t.spriteFrame.uv;
          var g = t.spriteFrame.uvSliced;
          var m = t.spriteFrame._rotated;
          var y = this.floatsPerVert;
          var T = this.uvOffset;
          var E = [];
          var A = [];
          for (var x = 0; x < h; ++x) {
            p = this.sizableHeight > l ? this.sizableHeight >= x * l ? 1 : d % 1 : d;
            for (var b = 0; b < u; ++b) {
              _ = this.sizableWidth > a ? this.sizableWidth >= b * a ? 1 : f % 1 : f;
              if (m) {
                if (0 === x) {
                  E[0] = g[0].u;
                  E[1] = g[0].u;
                  E[2] = g[4].u + (g[8].u - g[4].u) * p;
                } else if (x < h - 1) {
                  E[0] = g[4].u;
                  E[1] = g[4].u;
                  E[2] = g[4].u + (g[8].u - g[4].u) * p;
                } else if (x === h - 1) {
                  E[0] = g[8].u;
                  E[1] = g[8].u;
                  E[2] = g[12].u;
                }
                if (0 === b) {
                  A[0] = g[0].v;
                  A[1] = g[1].v + (g[2].v - g[1].v) * _;
                  A[2] = g[0].v;
                } else if (b < u - 1) {
                  A[0] = g[1].v;
                  A[1] = g[1].v + (g[2].v - g[1].v) * _;
                  A[2] = g[1].v;
                } else if (b === u - 1) {
                  A[0] = g[2].v;
                  A[1] = g[3].v;
                  A[2] = g[2].v;
                }
                E[3] = E[2];
                A[3] = A[1];
              } else {
                if (0 === b) {
                  E[0] = g[0].u;
                  E[1] = g[1].u + (g[2].u - g[1].u) * _;
                  E[2] = v[0];
                } else if (b < u - 1) {
                  E[0] = g[1].u;
                  E[1] = g[1].u + (g[2].u - g[1].u) * _;
                  E[2] = g[1].u;
                } else if (b === u - 1) {
                  E[0] = g[2].u;
                  E[1] = g[3].u;
                  E[2] = g[2].u;
                }
                if (0 === x) {
                  A[0] = g[0].v;
                  A[1] = g[0].v;
                  A[2] = g[4].v + (g[8].v - g[4].v) * p;
                } else if (x < h - 1) {
                  A[0] = g[4].v;
                  A[1] = g[4].v;
                  A[2] = g[4].v + (g[8].v - g[4].v) * p;
                } else if (x === h - 1) {
                  A[0] = g[8].v;
                  A[1] = g[8].v;
                  A[2] = g[12].v;
                }
                E[3] = E[1];
                A[3] = A[2];
              }
              e[T] = E[0];
              e[T + 1] = A[0];
              e[T += y] = E[1];
              e[T + 1] = A[1];
              e[T += y] = E[2];
              e[T + 1] = A[2];
              e[T += y] = E[3];
              e[T + 1] = A[3];
              T += y;
            }
          }
        }
      };
      return n;
    }(((n = t("../../../../assembler-2d")) && n.__esModule ? n : {
      default: n
    }).default);
    i.default = s;
    e.exports = i.default;
  }, {
    "../../../../assembler-2d": 188
  }],
  218: [function (t) {
    "use strict";

    var e = t("../../../assembler") && t("../../../assembler").__esModule ? t("../../../assembler") : {
      default: t("../../../assembler")
    };
    var i = t("../../../../components/CCSprite");
    var n = t("./2d/simple") && t("./2d/simple").__esModule ? t("./2d/simple") : {
      default: t("./2d/simple")
    };
    var r = t("./2d/sliced") && t("./2d/sliced").__esModule ? t("./2d/sliced") : {
      default: t("./2d/sliced")
    };
    var s = t("./2d/tiled") && t("./2d/tiled").__esModule ? t("./2d/tiled") : {
      default: t("./2d/tiled")
    };
    var a = t("./2d/radial-filled") && t("./2d/radial-filled").__esModule ? t("./2d/radial-filled") : {
      default: t("./2d/radial-filled")
    };
    var o = t("./2d/bar-filled") && t("./2d/bar-filled").__esModule ? t("./2d/bar-filled") : {
      default: t("./2d/bar-filled")
    };
    var c = t("./2d/mesh") && t("./2d/mesh").__esModule ? t("./2d/mesh") : {
      default: t("./2d/mesh")
    };
    var l = t("./3d/simple") && t("./3d/simple").__esModule ? t("./3d/simple") : {
      default: t("./3d/simple")
    };
    var h = t("./3d/sliced") && t("./3d/sliced").__esModule ? t("./3d/sliced") : {
      default: t("./3d/sliced")
    };
    var u = t("./3d/tiled") && t("./3d/tiled").__esModule ? t("./3d/tiled") : {
      default: t("./3d/tiled")
    };
    var f = t("./3d/radial-filled") && t("./3d/radial-filled").__esModule ? t("./3d/radial-filled") : {
      default: t("./3d/radial-filled")
    };
    var d = t("./3d/bar-filled") && t("./3d/bar-filled").__esModule ? t("./3d/bar-filled") : {
      default: t("./3d/bar-filled")
    };
    var _ = t("./3d/mesh") && t("./3d/mesh").__esModule ? t("./3d/mesh") : {
      default: t("./3d/mesh")
    };
    var v = {
      getConstructor: function (t) {
        var e = t.node.is3DNode;
        var p = e ? l.default : n.default;
        switch (t.type) {
          case i.Type.SLICED:
            p = e ? h.default : r.default;
            break;
          case i.Type.TILED:
            p = e ? u.default : s.default;
            break;
          case i.Type.FILLED:
            p = t._fillType === i.FillType.RADIAL ? e ? f.default : a.default : e ? d.default : o.default;
            break;
          case i.Type.MESH:
            p = e ? _.default : c.default;
        }
        return p;
      },
      Simple: n.default,
      Sliced: r.default,
      Tiled: s.default,
      RadialFilled: a.default,
      BarFilled: o.default,
      Mesh: c.default,
      Simple3D: l.default,
      Sliced3D: h.default,
      Tiled3D: u.default,
      RadialFilled3D: f.default,
      BarFilled3D: d.default,
      Mesh3D: _.default
    };
    e.default.register(cc.Sprite, v);
  }, {
    "../../../../components/CCSprite": 115,
    "../../../assembler": 190,
    "./2d/bar-filled": 212,
    "./2d/mesh": 213,
    "./2d/radial-filled": 214,
    "./2d/simple": 215,
    "./2d/sliced": 216,
    "./2d/tiled": 217,
    "./3d/bar-filled": undefined,
    "./3d/mesh": undefined,
    "./3d/radial-filled": undefined,
    "./3d/simple": undefined,
    "./3d/sliced": undefined,
    "./3d/tiled": undefined
  }],
  219: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n = function () {
      function t(t, e, i, n, r) {
        this._handler = t;
        this._index = e;
        this._vfmt = r;
        this._verticesBytes = r._bytes;
        this._initVerticesCount = i;
        this._initIndicesCount = n;
        this.reset();
      }
      var e = t.prototype;
      e._reallocVData = function (t, e) {
        this.vData = new Float32Array(t);
        this.uintVData = new Uint32Array(this.vData.buffer);
        if (e) {
          this.vData.set(e);
        }
        this._handler.updateMesh(this._index, this.vData, this.iData);
      };
      e._reallocIData = function (t, e) {
        this.iData = new Uint16Array(t);
        if (e) {
          this.iData.set(e);
        }
        this._handler.updateMesh(this._index, this.vData, this.iData);
      };
      e.reserve = function (t, e) {
        var i = t * this._verticesBytes >> 2;
        var n = this.vData.length;
        var r = false;
        if (i > n) {
          for (; n < i;) {
            n *= 2;
          }
          this._reallocVData(n, this.vData);
          r = true;
        }
        var s = this.iData.length;
        if (e > s) {
          for (; s < e;) {
            s *= 2;
          }
          this._reallocIData(e, this.iData);
          r = true;
        }
        return r;
      };
      e.used = function (t, e) {
        this.usedVertices = t;
        this.usedIndices = e;
        this.usedVerticesFloats = t * this._verticesBytes >> 2;
        this._handler.updateMeshRange(t, e);
      };
      e.reset = function () {
        var t = this._initVerticesCount * this._verticesBytes >> 2;
        this._reallocVData(t);
        this._reallocIData(this._initIndicesCount);
        this.usedVertices = 0;
        this.usedVerticesFloats = 0;
        this.usedIndices = 0;
      };
      return t;
    }();
    i.default = n;
    cc.FlexBuffer = n;
    e.exports = i.default;
  }, {}],
  220: [function (t, e) {
    "use strict";

    var i;
    var n = (i = t("../../../renderer/gfx")) && i.__esModule ? i : {
      default: i
    };
    var r = cc.Class({
      name: "cc.MeshBuffer",
      ctor: function (t, e) {
        this.init(t, e);
      },
      init: function (t, e) {
        this.byteOffset = 0;
        this.indiceOffset = 0;
        this.vertexOffset = 0;
        this.indiceStart = 0;
        this._dirty = false;
        this._vertexFormat = e;
        this._vertexBytes = this._vertexFormat._bytes;
        this._arrOffset = 0;
        this._vbArr = [];
        this._vb = new n.default.VertexBuffer(t._device, e, n.default.USAGE_DYNAMIC, new ArrayBuffer(), 0);
        this._vbArr[0] = this._vb;
        this._ibArr = [];
        this._ib = new n.default.IndexBuffer(t._device, n.default.INDEX_FMT_UINT16, n.default.USAGE_STATIC, new ArrayBuffer(), 0);
        this._ibArr[0] = this._ib;
        this._vData = null;
        this._uintVData = null;
        this._iData = null;
        this._batcher = t;
        this._initVDataCount = 256 * e._bytes;
        this._initIDataCount = 1536;
        this._offsetInfo = {
          byteOffset: 0,
          vertexOffset: 0,
          indiceOffset: 0
        };
        this._reallocBuffer();
      },
      uploadData: function () {
        if (0 !== this.byteOffset && this._dirty) {
          var t = new Float32Array(this._vData.buffer, 0, this.byteOffset >> 2);
          var e = new Uint16Array(this._iData.buffer, 0, this.indiceOffset);
          this._vb.update(0, t);
          this._ib.update(0, e);
          this._dirty = false;
        }
      },
      switchBuffer: function () {
        var t = ++this._arrOffset;
        this.byteOffset = 0;
        this.vertexOffset = 0;
        this.indiceOffset = 0;
        this.indiceStart = 0;
        if (t < this._vbArr.length) {
          this._vb = this._vbArr[t];
          this._ib = this._ibArr[t];
        } else {
          this._vb = new n.default.VertexBuffer(this._batcher._device, this._vertexFormat, n.default.USAGE_DYNAMIC, new ArrayBuffer(), 0);
          this._vbArr[t] = this._vb;
          this._ib = new n.default.IndexBuffer(this._batcher._device, n.default.INDEX_FMT_UINT16, n.default.USAGE_STATIC, new ArrayBuffer(), 0);
          this._ibArr[t] = this._ib;
        }
      },
      checkAndSwitchBuffer: function (t) {
        if (this.vertexOffset + t > 65535) {
          this.uploadData();
          this._batcher._flush();
          this.switchBuffer();
        }
      },
      requestStatic: function (t, e) {
        this.checkAndSwitchBuffer(t);
        var i = this.byteOffset + t * this._vertexBytes;
        var n = this.indiceOffset + e;
        var r = this._vData.byteLength;
        var s = this._iData.length;
        if (i > r || n > s) {
          for (; r < i || s < n;) {
            this._initVDataCount *= 2;
            this._initIDataCount *= 2;
            r = 4 * this._initVDataCount;
            s = this._initIDataCount;
          }
          this._reallocBuffer();
        }
        this._updateOffset(t, e, i);
      },
      _updateOffset: function (t, e, i) {
        var n = this._offsetInfo;
        n.vertexOffset = this.vertexOffset;
        this.vertexOffset += t;
        n.indiceOffset = this.indiceOffset;
        this.indiceOffset += e;
        n.byteOffset = this.byteOffset;
        this.byteOffset = i;
        this._dirty = true;
      },
      request: function (t, e) {
        if (this._batcher._buffer !== this) {
          this._batcher._flush();
          this._batcher._buffer = this;
        }
        this.requestStatic(t, e);
        return this._offsetInfo;
      },
      _reallocBuffer: function () {
        this._reallocVData(true);
        this._reallocIData(true);
      },
      _reallocVData: function (t) {
        var e;
        if (this._vData) {
          e = new Uint8Array(this._vData.buffer);
        }
        this._vData = new Float32Array(this._initVDataCount);
        this._uintVData = new Uint32Array(this._vData.buffer);
        var i = new Uint8Array(this._uintVData.buffer);
        if (e && t) {
          var n = 0;
          for (var r = e.length; n < r; n++) {
            i[n] = e[n];
          }
        }
      },
      _reallocIData: function (t) {
        var e = this._iData;
        this._iData = new Uint16Array(this._initIDataCount);
        if (e && t) {
          var i = this._iData;
          var n = 0;
          for (var r = e.length; n < r; n++) {
            i[n] = e[n];
          }
        }
      },
      reset: function () {
        this._arrOffset = 0;
        this._vb = this._vbArr[0];
        this._ib = this._ibArr[0];
        this.byteOffset = 0;
        this.indiceOffset = 0;
        this.vertexOffset = 0;
        this.indiceStart = 0;
        this._dirty = false;
      },
      destroy: function () {
        this.reset();
        for (var t = 0; t < this._vbArr.length; t++) {
          this._vbArr[t].destroy();
        }
        this._vbArr = null;
        for (var e = 0; e < this._ibArr.length; e++) {
          this._ibArr[e].destroy();
        }
        this._ibArr = null;
        this._ib = null;
        this._vb = null;
      },
      forwardIndiceStartToOffset: function () {
        this.indiceStart = this.indiceOffset;
      }
    });
    if (cc.sys.isSafari14) {
      r.prototype.checkAndSwitchBuffer = function (t) {
        if (this.vertexOffset + t > 65535) {
          this.uploadData();
          this._batcher._flush();
        }
      };
      r.prototype.forwardIndiceStartToOffset = function () {
        this.uploadData();
        this.switchBuffer();
      };
    }
    cc.MeshBuffer = e.exports = r;
  }, {
    "../../../renderer/gfx": 282
  }],
  221: [function (t, e) {
    "use strict";

    var i = t("../../../renderer/core/input-assembler") && t("../../../renderer/core/input-assembler").__esModule ? t("../../../renderer/core/input-assembler") : {
      default: t("../../../renderer/core/input-assembler")
    };
    var n = t("../../../renderer/memop/recycle-pool") && t("../../../renderer/memop/recycle-pool").__esModule ? t("../../../renderer/memop/recycle-pool") : {
      default: t("../../../renderer/memop/recycle-pool")
    };
    var r = t("../../../renderer/scene/model") && t("../../../renderer/scene/model").__esModule ? t("../../../renderer/scene/model") : {
      default: t("../../../renderer/scene/model")
    };
    var a = t("./vertex-format");
    var o = a.vfmtPosUvColor;
    var c = a.vfmt3D;
    var l = t("./quad-buffer");
    var h = t("./mesh-buffer");
    var u = t("./spine-buffer");
    var f = t("../../assets/material/CCMaterial");
    new (t("../../platform/id-generater"))("VertextFormat");
    var d = {};
    var _ = new f();
    var p = new i.default();
    p._count = 0;
    var v = function (t, e) {
      this._renderScene = e;
      this._device = t;
      this.walking = false;
      this.material = _;
      this.cullingMask = 1;
      this._iaPool = new n.default(function () {
        return new i.default();
      }, 16);
      this._modelPool = new n.default(function () {
        return new r.default();
      }, 16);
      this._quadBuffer = this.getBuffer("quad", o);
      this._meshBuffer = this.getBuffer("mesh", o);
      this._quadBuffer3D = this.getBuffer("quad", c);
      this._meshBuffer3D = this.getBuffer("mesh", c);
      this._buffer = this._meshBuffer;
      this._batchedModels = [];
      this._dummyNode = new cc.Node();
      this._sortKey = 0;
      this.node = this._dummyNode;
      this.parentOpacity = 1;
      this.parentOpacityDirty = 0;
      this.worldMatDirty = 0;
    };
    v.prototype = {
      constructor: v,
      reset: function () {
        this._iaPool.reset();
        var t = this._renderScene;
        var e = this._batchedModels;
        for (var i = 0; i < e.length; ++i) {
          e[i].setInputAssembler(null);
          e[i].setEffect(null);
          t.removeModel(e[i]);
        }
        this._modelPool.reset();
        e.length = 0;
        this._sortKey = 0;
        for (var n in d) d[n].reset();
        this._buffer = this._meshBuffer;
        this.node = this._dummyNode;
        this.material = _;
        this.cullingMask = 1;
        this.parentOpacity = 1;
        this.parentOpacityDirty = 0;
        this.worldMatDirty = 0;
      },
      _flushMaterial: function (t) {
        if (t) {
          this.material = t;
          var e = t.effect;
          if (e) {
            var i = this._modelPool.add();
            this._batchedModels.push(i);
            i.sortKey = this._sortKey++;
            i._cullingMask = this.cullingMask;
            i.setNode(this.node);
            i.setEffect(e, null);
            i.setInputAssembler(p);
            this._renderScene.addModel(i);
          }
        }
      },
      _flush: function () {
        var t = this.material;
        var e = this._buffer;
        var i = e.indiceOffset - e.indiceStart;
        if (this.walking && t && !(i <= 0)) {
          var n = t.effect;
          if (n) {
            var r = this._iaPool.add();
            r._vertexBuffer = e._vb;
            r._indexBuffer = e._ib;
            r._start = e.indiceStart;
            r._count = i;
            var s = this._modelPool.add();
            this._batchedModels.push(s);
            s.sortKey = this._sortKey++;
            s._cullingMask = this.cullingMask;
            s.setNode(this.node);
            s.setEffect(n);
            s.setInputAssembler(r);
            this._renderScene.addModel(s);
            e.forwardIndiceStartToOffset();
          }
        }
      },
      _flushIA: function (t) {
        if (t) {
          var e = this.material.effect;
          if (e) {
            var i = this._modelPool.add();
            this._batchedModels.push(i);
            i.sortKey = this._sortKey++;
            i._cullingMask = this.cullingMask;
            i.setNode(this.node);
            i.setEffect(e);
            i.setInputAssembler(t);
            this._renderScene.addModel(i);
          }
        }
      },
      terminate: function () {
        if (cc.dynamicAtlasManager && cc.dynamicAtlasManager.enabled) {
          cc.dynamicAtlasManager.update();
        }
        this._flush();
        for (var t in d) d[t].uploadData();
        this.walking = false;
      },
      getBuffer: function (t, e) {
        var i = t + e.getHash();
        var n = d[i];
        if (!n) {
          if ("mesh" === t) {
            n = new h(this, e);
          } else if ("quad" === t) {
            n = new l(this, e);
          } else {
            if ("spine" !== t) {
              return null;
            }
            n = new u(this, e);
          }
          d[i] = n;
        }
        return n;
      }
    };
    e.exports = v;
  }, {
    "../../../renderer/core/input-assembler": 272,
    "../../../renderer/memop/recycle-pool": 297,
    "../../../renderer/scene/model": 303,
    "../../assets/material/CCMaterial": 76,
    "../../platform/id-generater": 179,
    "./mesh-buffer": 220,
    "./quad-buffer": 222,
    "./spine-buffer": 224,
    "./vertex-format": 225
  }],
  222: [function (t, e) {
    "use strict";

    var i = t("./mesh-buffer");
    var n = cc.Class({
      name: "cc.QuadBuffer",
      extends: i,
      _fillQuadBuffer: function () {
        var t = this._initIDataCount / 6;
        var e = this._iData;
        var i = 0;
        for (var n = 0; i < t; i++) {
          var r = 4 * i;
          e[n++] = r;
          e[n++] = r + 1;
          e[n++] = r + 2;
          e[n++] = r + 1;
          e[n++] = r + 3;
          e[n++] = r + 2;
        }
        var s = new Uint16Array(this._iData.buffer, 0, 6 * t);
        this._ib.update(0, s);
      },
      uploadData: function () {
        if (0 !== this.byteOffset && this._dirty) {
          var t = new Float32Array(this._vData.buffer, 0, this.byteOffset >> 2);
          this._vb.update(0, t);
          this._dirty = false;
        }
      },
      switchBuffer: function () {
        this._super();
        var t = new Uint16Array(this._iData.buffer, 0, this._initIDataCount);
        this._ib.update(0, t);
      },
      _reallocBuffer: function () {
        this._reallocVData(true);
        this._reallocIData();
        this._fillQuadBuffer();
      }
    });
    cc.QuadBuffer = e.exports = n;
  }, {
    "./mesh-buffer": 220
  }],
  223: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = a;
    var n;
    var r = (n = t("./flex-buffer")) && n.__esModule ? n : {
      default: n
    };
    var s = t("./vertex-format");
    function a() {
      this.vDatas = [];
      this.uintVDatas = [];
      this.iDatas = [];
      this.meshCount = 0;
      this._infos = null;
      this._flexBuffer = null;
    }
    cc.js.mixin(a.prototype, {
      init: function () {},
      clear: function () {
        this.vDatas.length = 0;
        this.iDatas.length = 0;
        this.uintVDatas.length = 0;
        this.meshCount = 0;
        this._infos = null;
        if (this._flexBuffer) {
          this._flexBuffer.reset();
        }
      },
      updateMesh: function (t, e, i) {
        this.vDatas[t] = e;
        this.uintVDatas[t] = new Uint32Array(e.buffer, 0, e.length);
        this.iDatas[t] = i;
        this.meshCount = this.vDatas.length;
      },
      updateMeshRange: function () {},
      createData: function (t, e, i) {
        var n = new Float32Array(e);
        var r = new Uint16Array(i);
        this.updateMesh(t, n, r);
      },
      createQuadData: function (t, e, i) {
        this.createData(t, e, i);
        this.initQuadIndices(this.iDatas[t]);
      },
      createFlexData: function (t, e, i, n) {
        n = n || s.vfmtPosUvColor;
        this._flexBuffer = new r.default(this, t, e, i, n);
      },
      initQuadIndices: function (t) {
        var e = t.length / 6;
        var i = 0;
        for (var n = 0; i < e; i++) {
          var r = 4 * i;
          t[n++] = r;
          t[n++] = r + 1;
          t[n++] = r + 2;
          t[n++] = r + 1;
          t[n++] = r + 3;
          t[n++] = r + 2;
        }
      }
    });
    cc.RenderData = a;
    e.exports = i.default;
  }, {
    "./flex-buffer": 219,
    "./vertex-format": 225
  }],
  224: [function (t, e) {
    "use strict";

    var i = cc.Class({
      name: "cc.SpineBuffer",
      extends: t("./mesh-buffer"),
      requestStatic: function (t, e) {
        this.checkAndSwitchBuffer(t);
        var i = this.byteOffset + t * this._vertexBytes;
        var n = this.indiceOffset + e;
        var r = this._vData.byteLength;
        var s = this._iData.length;
        if (i > r || n > s) {
          for (; r < i || s < n;) {
            this._initVDataCount *= 2;
            this._initIDataCount *= 2;
            r = 4 * this._initVDataCount;
            s = this._initIDataCount;
          }
          this._reallocBuffer();
        }
        var a = this._offsetInfo;
        a.vertexOffset = this.vertexOffset;
        a.indiceOffset = this.indiceOffset;
        a.byteOffset = this.byteOffset;
      },
      adjust: function (t, e) {
        this.vertexOffset += t;
        this.indiceOffset += e;
        this.byteOffset = this.byteOffset + t * this._vertexBytes;
        this._dirty = true;
      }
    });
    cc.SpineBuffer = e.exports = i;
  }, {
    "./mesh-buffer": 220
  }],
  225: [function (t, e) {
    "use strict";

    var i;
    var n = (i = t("../../../renderer/gfx")) && i.__esModule ? i : {
      default: i
    };
    var r = new n.default.VertexFormat([{
      name: n.default.ATTR_POSITION,
      type: n.default.ATTR_TYPE_FLOAT32,
      num: 3
    }, {
      name: n.default.ATTR_UV0,
      type: n.default.ATTR_TYPE_FLOAT32,
      num: 2
    }, {
      name: n.default.ATTR_COLOR,
      type: n.default.ATTR_TYPE_UINT8,
      num: 4,
      normalize: true
    }]);
    r.name = "vfmt3D";
    n.default.VertexFormat.XYZ_UV_Color = r;
    var s = new n.default.VertexFormat([{
      name: n.default.ATTR_POSITION,
      type: n.default.ATTR_TYPE_FLOAT32,
      num: 2
    }, {
      name: n.default.ATTR_UV0,
      type: n.default.ATTR_TYPE_FLOAT32,
      num: 2
    }, {
      name: n.default.ATTR_COLOR,
      type: n.default.ATTR_TYPE_UINT8,
      num: 4,
      normalize: true
    }]);
    s.name = "vfmtPosUvColor";
    n.default.VertexFormat.XY_UV_Color = s;
    var a = new n.default.VertexFormat([{
      name: n.default.ATTR_POSITION,
      type: n.default.ATTR_TYPE_FLOAT32,
      num: 2
    }, {
      name: n.default.ATTR_UV0,
      type: n.default.ATTR_TYPE_FLOAT32,
      num: 2
    }, {
      name: n.default.ATTR_COLOR,
      type: n.default.ATTR_TYPE_UINT8,
      num: 4,
      normalize: true
    }, {
      name: n.default.ATTR_COLOR0,
      type: n.default.ATTR_TYPE_UINT8,
      num: 4,
      normalize: true
    }]);
    a.name = "vfmtPosUvTwoColor";
    n.default.VertexFormat.XY_UV_Two_Color = a;
    var o = new n.default.VertexFormat([{
      name: n.default.ATTR_POSITION,
      type: n.default.ATTR_TYPE_FLOAT32,
      num: 2
    }, {
      name: n.default.ATTR_UV0,
      type: n.default.ATTR_TYPE_FLOAT32,
      num: 2
    }]);
    o.name = "vfmtPosUv";
    n.default.VertexFormat.XY_UV = o;
    var c = new n.default.VertexFormat([{
      name: n.default.ATTR_POSITION,
      type: n.default.ATTR_TYPE_FLOAT32,
      num: 2
    }, {
      name: n.default.ATTR_COLOR,
      type: n.default.ATTR_TYPE_UINT8,
      num: 4,
      normalize: true
    }]);
    c.name = "vfmtPosColor";
    n.default.VertexFormat.XY_Color = c;
    var l = new n.default.VertexFormat([{
      name: n.default.ATTR_POSITION,
      type: n.default.ATTR_TYPE_FLOAT32,
      num: 2
    }]);
    l.name = "vfmtPos";
    n.default.VertexFormat.XY = l;
    e.exports = {
      vfmt3D: r,
      vfmtPosUvColor: s,
      vfmtPosUvTwoColor: a,
      vfmtPosUv: o,
      vfmtPosColor: c,
      vfmtPos: l
    };
  }, {
    "../../../renderer/gfx": 282
  }],
  226: [function (t, e) {
    "use strict";

    t("../platform/CCSys");
    var i = /(\.[^\.\/\?\\]*)(\?.*)?$/;
    var n = /((.*)(\/|\\|\\\\))?(.*?\..*$)?/;
    var r = /[^\.\/]+\/\.\.\//;
    cc.path = {
      join: function () {
        var t = arguments.length;
        var e = "";
        for (var i = 0; i < t; i++) {
          e = (e + ("" === e ? "" : "/") + arguments[i]).replace(/(\/|\\\\)$/, "");
        }
        return e;
      },
      extname: function (t) {
        var e = i.exec(t);
        return e ? e[1] : "";
      },
      mainFileName: function (t) {
        if (t) {
          var e = t.lastIndexOf(".");
          if (-1 !== e) {
            return t.substring(0, e);
          }
        }
        return t;
      },
      basename: function (t, e) {
        var i = t.indexOf("?");
        if (i > 0) {
          t = t.substring(0, i);
        }
        var n = /(\/|\\)([^\/\\]+)$/g.exec(t.replace(/(\/|\\)$/, ""));
        if (!n) {
          return t;
        }
        var r = n[2];
        return e && t.substring(t.length - e.length).toLowerCase() === e.toLowerCase() ? r.substring(0, r.length - e.length) : r;
      },
      dirname: function (t) {
        var e = n.exec(t);
        return e ? e[2] : "";
      },
      changeExtname: function (t, e) {
        e = e || "";
        var i = t.indexOf("?");
        var n = "";
        if (i > 0) {
          n = t.substring(i);
          t = t.substring(0, i);
        }
        return (i = t.lastIndexOf(".")) < 0 ? t + e + n : t.substring(0, i) + e + n;
      },
      changeBasename: function (t, e, i) {
        if (0 === e.indexOf(".")) {
          return this.changeExtname(t, e);
        }
        var n = t.indexOf("?");
        var r = "";
        var s = i ? this.extname(t) : "";
        if (n > 0) {
          r = t.substring(n);
          t = t.substring(0, n);
        }
        n = (n = t.lastIndexOf("/")) <= 0 ? 0 : n + 1;
        return t.substring(0, n) + e + s + r;
      },
      _normalize: function (t) {
        var e = t += "";
        do {
          e = t;
          t = t.replace(r, "");
        } while (e.length !== t.length);
        return t;
      },
      sep: cc.sys.os === cc.sys.OS_WINDOWS ? "\\" : "/",
      stripSep: function (t) {
        return t.replace(/[\/\\]$/, "");
      }
    };
    e.exports = cc.path;
  }, {
    "../platform/CCSys": 171
  }],
  227: [function (t, e) {
    "use strict";

    var i = function (t, e, i, n, r, s) {
      this.a = t;
      this.b = e;
      this.c = i;
      this.d = n;
      this.tx = r;
      this.ty = s;
    };
    i.create = function (t, e, i, n, r, s) {
      return {
        a: t,
        b: e,
        c: i,
        d: n,
        tx: r,
        ty: s
      };
    };
    i.identity = function () {
      return {
        a: 1,
        b: 0,
        c: 0,
        d: 1,
        tx: 0,
        ty: 0
      };
    };
    i.clone = function (t) {
      return {
        a: t.a,
        b: t.b,
        c: t.c,
        d: t.d,
        tx: t.tx,
        ty: t.ty
      };
    };
    i.concat = function (t, e, i) {
      var n = e.a;
      var r = e.b;
      var s = e.c;
      var a = e.d;
      var o = e.tx;
      var c = e.ty;
      t.a = n * i.a + r * i.c;
      t.b = n * i.b + r * i.d;
      t.c = s * i.a + a * i.c;
      t.d = s * i.b + a * i.d;
      t.tx = o * i.a + c * i.c + i.tx;
      t.ty = o * i.b + c * i.d + i.ty;
      return t;
    };
    i.invert = function (t, e) {
      var i = e.a;
      var n = e.b;
      var r = e.c;
      var s = e.d;
      var a = 1 / (i * s - n * r);
      var o = e.tx;
      var c = e.ty;
      t.a = a * s;
      t.b = -a * n;
      t.c = -a * r;
      t.d = a * i;
      t.tx = a * (r * c - s * o);
      t.ty = a * (n * o - i * c);
      return t;
    };
    i.fromMat4 = function (t, e) {
      var i = e.m;
      t.a = i[0];
      t.b = i[1];
      t.c = i[4];
      t.d = i[5];
      t.tx = i[12];
      t.ty = i[13];
      return t;
    };
    i.transformVec2 = function (t, e, i, n) {
      var r;
      var s;
      if (undefined === n) {
        n = i;
        r = e.x;
        s = e.y;
      } else {
        r = e;
        s = i;
      }
      t.x = n.a * r + n.c * s + n.tx;
      t.y = n.b * r + n.d * s + n.ty;
      return t;
    };
    i.transformSize = function (t, e, i) {
      t.width = i.a * e.width + i.c * e.height;
      t.height = i.b * e.width + i.d * e.height;
      return t;
    };
    i.transformRect = function (t, e, i) {
      var n = e.x;
      var r = e.y;
      var s = n + e.width;
      var a = r + e.height;
      var o = i.a * n + i.c * r + i.tx;
      var c = i.b * n + i.d * r + i.ty;
      var l = i.a * s + i.c * r + i.tx;
      var h = i.b * s + i.d * r + i.ty;
      var u = i.a * n + i.c * a + i.tx;
      var f = i.b * n + i.d * a + i.ty;
      var d = i.a * s + i.c * a + i.tx;
      var _ = i.b * s + i.d * a + i.ty;
      var p = Math.min(o, l, u, d);
      var v = Math.max(o, l, u, d);
      var g = Math.min(c, h, f, _);
      var m = Math.max(c, h, f, _);
      t.x = p;
      t.y = g;
      t.width = v - p;
      t.height = m - g;
      return t;
    };
    i.transformObb = function (t, e, i, n, r, s) {
      var a = r.x;
      var o = r.y;
      var c = r.width;
      var l = r.height;
      var h = s.a * a + s.c * o + s.tx;
      var u = s.b * a + s.d * o + s.ty;
      var f = s.a * c;
      var d = s.b * c;
      var _ = s.c * l;
      var p = s.d * l;
      e.x = h;
      e.y = u;
      i.x = f + h;
      i.y = d + u;
      t.x = _ + h;
      t.y = p + u;
      n.x = f + _ + h;
      n.y = d + p + u;
    };
    cc.AffineTransform = e.exports = i;
  }, {}],
  228: [function (t, e) {
    "use strict";

    var i = t("../platform/CCObject").Flags;
    var n = t("./misc");
    var r = t("../platform/js");
    var s = t("../platform/id-generater");
    var a = t("../event-manager");
    var o = t("../renderer/render-flow");
    var c = i.Destroying;
    var l = i.DontDestroy;
    var h = i.Deactivating;
    var u = new s("Node");
    function d(t, e) {
      if (e._sealed) {
        for (var i = 0; i < t._components.length; ++i) {
          var n = t._components[i];
          if (n.constructor === e) {
            return n;
          }
        }
      } else {
        for (var r = 0; r < t._components.length; ++r) {
          var s = t._components[r];
          if (s instanceof e) {
            return s;
          }
        }
      }
      return null;
    }
    function _(t, e, i) {
      if (e._sealed) {
        for (var n = 0; n < t._components.length; ++n) {
          var r = t._components[n];
          if (r.constructor === e) {
            i.push(r);
          }
        }
      } else {
        for (var s = 0; s < t._components.length; ++s) {
          var a = t._components[s];
          if (a instanceof e) {
            i.push(a);
          }
        }
      }
    }
    function p(t, e) {
      for (var i = 0; i < t.length; ++i) {
        var n = t[i];
        var r = d(n, e);
        if (r) {
          return r;
        }
        if (n._children.length > 0 && (r = p(n._children, e))) {
          return r;
        }
      }
      return null;
    }
    function v(t, e, i) {
      for (var n = 0; n < t.length; ++n) {
        var r = t[n];
        _(r, e, i);
        if (r._children.length > 0) {
          v(r._children, e, i);
        }
      }
    }
    var g = cc.Class({
      name: "cc._BaseNode",
      extends: cc.Object,
      properties: {
        _parent: null,
        _children: [],
        _active: true,
        _components: [],
        _prefab: null,
        _persistNode: {
          get: function () {
            return (this._objFlags & l) > 0;
          },
          set: function (t) {
            if (t) {
              this._objFlags |= l;
            } else {
              this._objFlags &= ~l;
            }
          }
        },
        name: {
          get: function () {
            return this._name;
          },
          set: function (t) {
            this._name = t;
          }
        },
        uuid: {
          get: function () {
            return this._id;
          }
        },
        children: {
          get: function () {
            return this._children;
          }
        },
        childrenCount: {
          get: function () {
            return this._children.length;
          }
        },
        active: {
          get: function () {
            return this._active;
          },
          set: function (t) {
            t = !!t;
            if (this._active !== t) {
              this._active = t;
              var e = this._parent;
              if (e && e._activeInHierarchy) {
                cc.director._nodeActivator.activateNode(this, t);
              }
            }
          }
        },
        activeInHierarchy: {
          get: function () {
            return this._activeInHierarchy;
          }
        }
      },
      ctor: function (t) {
        this._name = undefined !== t ? t : "New Node";
        this._activeInHierarchy = false;
        this._id = u.getNewId();
        if (cc.director._scheduler) {
          cc.director._scheduler.enableForTarget(this);
        }
        this.__eventTargets = [];
      },
      getParent: function () {
        return this._parent;
      },
      setParent: function (t) {
        if (this._parent !== t) {
          var e = this._parent;
          this._parent = t || null;
          this._onSetParent(t);
          if (t) {
            a._setDirtyForNode(this);
            t._children.push(this);
            if (t.emit) {
              t.emit("child-added", this);
            }
            t._renderFlag |= o.FLAG_CHILDREN;
          }
          if (e) {
            if (!(e._objFlags & c)) {
              var i = e._children.indexOf(this);
              e._children.splice(i, 1);
              if (e.emit) {
                e.emit("child-removed", this);
              }
              this._onHierarchyChanged(e);
              if (0 === e._children.length) {
                e._renderFlag &= ~o.FLAG_CHILDREN;
              }
            }
          } else if (t) {
            this._onHierarchyChanged(null);
          }
        }
      },
      attr: function (t) {
        r.mixin(this, t);
      },
      getChildByUuid: function (t) {
        if (!t) {
          return null;
        }
        var e = this._children;
        var i = 0;
        for (var n = e.length; i < n; i++) {
          if (e[i]._id === t) {
            return e[i];
          }
        }
        return null;
      },
      getChildByName: function (t) {
        if (!t) {
          return null;
        }
        var e = this._children;
        var i = 0;
        for (var n = e.length; i < n; i++) {
          if (e[i]._name === t) {
            return e[i];
          }
        }
        return null;
      },
      addChild: function (t) {
        t.setParent(this);
      },
      insertChild: function (t, e) {
        t.parent = this;
        t.setSiblingIndex(e);
      },
      getSiblingIndex: function () {
        return this._parent ? this._parent._children.indexOf(this) : 0;
      },
      setSiblingIndex: function (t) {
        if (this._parent && !(this._parent._objFlags & h)) {
          var e = this._parent._children;
          t = -1 !== t ? t : e.length - 1;
          var i = e.indexOf(this);
          if (t !== i) {
            e.splice(i, 1);
            if (t < e.length) {
              e.splice(t, 0, this);
            } else {
              e.push(this);
            }
            if (this._onSiblingIndexChanged) {
              this._onSiblingIndexChanged(t);
            }
          }
        }
      },
      walk: function (t, e) {
        var i;
        var n;
        var r;
        var s;
        var a = cc._BaseNode;
        var o = 1;
        var c = a._stacks[a._stackId];
        if (!c) {
          c = [];
          a._stacks.push(c);
        }
        a._stackId++;
        c.length = 0;
        c[0] = this;
        var l = null;
        for (s = false; o;) {
          if (n = c[--o]) {
            if (!s && t) {
              t(n);
            } else if (s && e) {
              e(n);
            }
            c[o] = null;
            if (s) {
              if (l === this._parent) {
                break;
              }
              s = false;
              if (i) {
                if (i[++r]) {
                  c[o] = i[r];
                  o++;
                } else if (l && (c[o] = l, o++, s = true, l._parent ? (r = (i = l._parent._children).indexOf(l), l = l._parent) : (l = null, i = null), r < 0)) {
                  break;
                }
              }
            } else if (n._children.length > 0) {
              l = n;
              i = n._children;
              r = 0;
              c[o] = i[r];
              o++;
            } else {
              c[o] = n;
              o++;
              s = true;
            }
          }
        }
        c.length = 0;
        a._stackId--;
      },
      cleanup: function () {},
      removeFromParent: function (t) {
        if (this._parent) {
          if (undefined === t) {
            t = true;
          }
          this._parent.removeChild(this, t);
        }
      },
      removeChild: function (t, e) {
        if (this._children.indexOf(t) > -1) {
          if (e || undefined === e) {
            t.cleanup();
          }
          t.parent = null;
        }
      },
      removeAllChildren: function (t) {
        var e = this._children;
        if (undefined === t) {
          t = true;
        }
        for (var i = e.length - 1; i >= 0; i--) {
          var n = e[i];
          if (n) {
            if (t) {
              n.cleanup();
            }
            n.parent = null;
          }
        }
        this._children.length = 0;
      },
      isChildOf: function (t) {
        var e = this;
        do {
          if (e === t) {
            return true;
          }
          e = e._parent;
        } while (e);
        return false;
      },
      getComponent: function (t) {
        var e = t ? "string" == typeof t ? r.getClassByName(t) : t : null;
        return e ? d(this, e) : null;
      },
      getComponents: function (t) {
        var e = t ? "string" == typeof t ? r.getClassByName(t) : t : null;
        var i = [];
        if (e) {
          _(this, e, i);
        }
        return i;
      },
      getComponentInChildren: function (t) {
        var e = t ? "string" == typeof t ? r.getClassByName(t) : t : null;
        return e ? p(this._children, e) : null;
      },
      getComponentsInChildren: function (t) {
        var e = t ? "string" == typeof t ? r.getClassByName(t) : t : null;
        var i = [];
        if (e) {
          _(this, e, i);
          v(this._children, e, i);
        }
        return i;
      },
      _checkMultipleComp: false,
      addComponent: function (t) {
        var e;
        if ("string" == typeof t) {
          if (!(e = r.getClassByName(t))) {
            cc._RF.peek();
            return null;
          }
        } else {
          if (!t) {
            return null;
          }
          e = t;
        }
        if ("function" != typeof e) {
          return null;
        }
        if (!r.isChildClassOf(e, cc.Component)) {
          return null;
        }
        var i = e._requireComponent;
        if (i && !this.getComponent(i) && !this.addComponent(i)) {
          return null;
        }
        var n = new e();
        n.node = this;
        this._components.push(n);
        if (this._activeInHierarchy) {
          cc.director._nodeActivator.activateComp(n);
        }
        return n;
      },
      _addComponentAt: false,
      removeComponent: function (t) {
        if (t) {
          if (!(t instanceof cc.Component)) {
            t = this.getComponent(t);
          }
          if (t) {
            t.destroy();
          }
        }
      },
      _getDependComponent: false,
      _removeComponent: function (t) {
        if (t && !(this._objFlags & c)) {
          var e = this._components.indexOf(t);
          if (-1 !== e) {
            this._components.splice(e, 1);
          } else {
            t.node;
          }
        }
      },
      destroy: function () {
        if (cc.Object.prototype.destroy.call(this)) {
          this.active = false;
        }
      },
      destroyAllChildren: function () {
        var t = this._children;
        for (var e = 0; e < t.length; ++e) {
          t[e].destroy();
        }
      },
      _onSetParent: function () {},
      _onPostActivated: function () {},
      _onBatchCreated: function () {},
      _onHierarchyChanged: function () {
        var t = this._parent;
        if (!(!this._persistNode || t instanceof cc.Scene)) {
          cc.game.removePersistRootNode(this);
        }
        var e = this._active && !(!t || !t._activeInHierarchy);
        if (this._activeInHierarchy !== e) {
          cc.director._nodeActivator.activateNode(this, e);
        }
      },
      _instantiate: function (t, e) {
        if (!t) {
          t = cc.instantiate._clone(this, this);
        }
        t._prefab;
        t._parent = null;
        t._onBatchCreated(e);
        return t;
      },
      _registerIfAttached: false,
      _onPreDestroy: function () {
        var t;
        var e;
        var i = this._parent;
        var n = i && i._objFlags & c;
        var r = this._children;
        t = 0;
        for (e = r.length; t < e; ++t) {
          r[t]._destroyImmediate();
        }
        t = 0;
        for (e = this._components.length; t < e; ++t) {
          this._components[t]._destroyImmediate();
        }
        for (var s = this.__eventTargets; s.length;) {
          var a = s.pop();
          if (a) {
            a.targetOff(this);
          }
        }
        if (this._persistNode) {
          cc.game.removePersistRootNode(this);
        }
        if (!n && i) {
          var o = i._children.indexOf(this);
          i._children.splice(o, 1);
          if (i.emit) {
            i.emit("child-removed", this);
          }
        }
        return n;
      },
      onRestore: false
    });
    g.idGenerater = u;
    g._stacks = [[]];
    g._stackId = 0;
    g.prototype._onPreDestroyBase = g.prototype._onPreDestroy;
    g.prototype._onHierarchyChangedBase = g.prototype._onHierarchyChanged;
    n.propertyDefine(g, ["parent", "name", "children", "childrenCount"], {});
    cc._BaseNode = e.exports = g;
  }, {
    "../event-manager": 133,
    "../platform/CCObject": 168,
    "../platform/id-generater": 179,
    "../platform/js": 183,
    "../renderer/render-flow": 194,
    "./misc": 236
  }],
  229: [function (t, e) {
    "use strict";

    e.exports = {
      binarySearchEpsilon: function (t, e) {
        var i = 0;
        var n = t.length - 1;
        for (var r = n >>> 1; i <= n; r = i + n >>> 1) {
          var s = t[r];
          if (s > e + 1e-6) {
            n = r - 1;
          } else {
            if (!(s < e - 1e-6)) {
              return r;
            }
            i = r + 1;
          }
        }
        return ~i;
      }
    };
  }, {}],
  230: [function (t, e) {
    "use strict";

    var i = t("../components/CCRenderComponent");
    var n = t("../platform/CCMacro").BlendFactor;
    var r = t("../../renderer/gfx");
    var s = cc.Class({
      properties: {
        _srcBlendFactor: n.SRC_ALPHA,
        _dstBlendFactor: n.ONE_MINUS_SRC_ALPHA,
        srcBlendFactor: {
          get: function () {
            return this._srcBlendFactor;
          },
          set: function (t) {
            if (this._srcBlendFactor !== t) {
              this._srcBlendFactor = t;
              this._updateBlendFunc(true);
              if (this._onBlendChanged) {
                this._onBlendChanged();
              }
            }
          },
          animatable: false,
          type: n,
          tooltip: false,
          visible: true
        },
        dstBlendFactor: {
          get: function () {
            return this._dstBlendFactor;
          },
          set: function (t) {
            if (this._dstBlendFactor !== t) {
              this._dstBlendFactor = t;
              this._updateBlendFunc(true);
            }
          },
          animatable: false,
          type: n,
          tooltip: false,
          visible: true
        }
      },
      setMaterial: function (t, e) {
        var r = i.prototype.setMaterial.call(this, t, e);
        if (!(this._srcBlendFactor === n.SRC_ALPHA && this._dstBlendFactor === n.ONE_MINUS_SRC_ALPHA)) {
          this._updateMaterialBlendFunc(r);
        }
        return r;
      },
      _updateMaterial: function () {
        this._updateBlendFunc();
      },
      _updateBlendFunc: function (t) {
        if (t || this._srcBlendFactor !== n.SRC_ALPHA || this._dstBlendFactor !== n.ONE_MINUS_SRC_ALPHA) {
          var e = this.getMaterials();
          for (var i = 0; i < e.length; i++) {
            var r = e[i];
            this._updateMaterialBlendFunc(r);
          }
        }
      },
      _updateMaterialBlendFunc: function (t) {
        t.setBlend(true, r.BLEND_FUNC_ADD, this._srcBlendFactor, this._dstBlendFactor, r.BLEND_FUNC_ADD, this._srcBlendFactor, this._dstBlendFactor);
      }
    });
    e.exports = cc.BlendFunc = s;
  }, {
    "../../renderer/gfx": 282,
    "../components/CCRenderComponent": 109,
    "../platform/CCMacro": 167
  }],
  231: [function (t, e) {
    "use strict";

    var i = t("./misc").BASE64_VALUES;
    var n = "0123456789abcdef".split("");
    var r = ["", "", "", ""];
    var s = r.concat(r, "-", r, "-", r, "-", r, "-", r, r, r);
    var a = s.map(function (t, e) {
      return "-" === t ? NaN : e;
    }).filter(isFinite);
    e.exports = function (t) {
      if (22 !== t.length) {
        return t;
      }
      s[0] = t[0];
      s[1] = t[1];
      var e = 2;
      for (var r = 2; e < 22; e += 2) {
        var o = i[t.charCodeAt(e)];
        var c = i[t.charCodeAt(e + 1)];
        s[a[r++]] = n[o >> 2];
        s[a[r++]] = n[(3 & o) << 2 | c >> 4];
        s[a[r++]] = n[15 & c];
      }
      return s.join("");
    };
  }, {
    "./misc": 236
  }],
  232: [function (t, e) {
    "use strict";

    cc.find = e.exports = function (t, e) {
      if (null == t) {
        return null;
      }
      if (e) {
        ;
      } else {
        var i = cc.director.getScene();
        if (!i) {
          return null;
        }
        e = i;
      }
      var n = e;
      var r = "/" !== t[0] ? 0 : 1;
      var s = t.split("/");
      for (var a = r; a < s.length; a++) {
        var o = s[a];
        var c = n._children;
        n = null;
        var l = 0;
        for (var h = c.length; l < h; ++l) {
          var u = c[l];
          if (u.name === o) {
            n = u;
            break;
          }
        }
        if (!n) {
          return null;
        }
      }
      return n;
    };
  }, {}],
  233: [function (t, e) {
    "use strict";

    var i;
    var n = (i = t("../assets/material/material-variant")) && i.__esModule ? i : {
      default: i
    };
    var r = t("../assets/material/CCMaterial");
    var s = cc.Class({
      properties: {
        _normalMaterial: null,
        normalMaterial: {
          get: function () {
            return this._normalMaterial;
          },
          set: function (t) {
            this._normalMaterial = t;
            if (this._updateDisabledState) {
              this._updateDisabledState();
            }
          },
          type: r,
          tooltip: false,
          animatable: false
        },
        _grayMaterial: null,
        grayMaterial: {
          get: function () {
            return this._grayMaterial;
          },
          set: function (t) {
            this._grayMaterial = t;
            if (this._updateDisabledState) {
              this._updateDisabledState();
            }
          },
          type: r,
          tooltip: false,
          animatable: false
        }
      },
      _switchGrayMaterial: function (t, e) {
        var i;
        if (t) {
          if (!(i = this._grayMaterial)) {
            i = r.getBuiltinMaterial("2d-gray-sprite");
          }
          i = this._grayMaterial = n.default.create(i, e);
        } else {
          if (!(i = this._normalMaterial)) {
            i = r.getBuiltinMaterial("2d-sprite", e);
          }
          i = this._normalMaterial = n.default.create(i, e);
        }
        e.setMaterial(0, i);
      }
    });
    e.exports = s;
  }, {
    "../assets/material/CCMaterial": 76,
    "../assets/material/material-variant": 83
  }],
  234: [function (t, e) {
    "use strict";

    var i = /^(click)(\s)*=|(param)(\s)*=/;
    var n = /(\s)*src(\s)*=|(\s)*height(\s)*=|(\s)*width(\s)*=|(\s)*align(\s)*=|(\s)*offset(\s)*=|(\s)*click(\s)*=|(\s)*param(\s)*=/;
    var r = function () {
      this._parsedObject = {};
      this._specialSymbolArray = [];
      this._specialSymbolArray.push([/&lt;/g, "<"]);
      this._specialSymbolArray.push([/&gt;/g, ">"]);
      this._specialSymbolArray.push([/&amp;/g, "&"]);
      this._specialSymbolArray.push([/&quot;/g, "\""]);
      this._specialSymbolArray.push([/&apos;/g, "'"]);
      this._specialSymbolArray.push([/&nbsp;/g, " "]);
    };
    r.prototype = {
      constructor: r,
      parse: function (t) {
        this._resultObjectArray = [];
        if (!t) {
          return this._resultObjectArray;
        }
        this._stack = [];
        var e = 0;
        for (var i = t.length; e < i;) {
          var n = t.indexOf(">", e);
          var r = -1;
          if (n >= 0 && (r = t.lastIndexOf("<", n)) < e - 1) {
            r = t.indexOf("<", n + 1);
            n = t.indexOf(">", r + 1);
          }
          if (r < 0) {
            this._stack.pop();
            this._processResult(t.substring(e));
            e = i;
          } else {
            var s = t.substring(e, r);
            var a = t.substring(r + 1, n);
            if ("" === a) {
              s = t.substring(e, n + 1);
            }
            this._processResult(s);
            if (-1 === n) {
              n = r;
            } else if ("/" === t.charAt(r + 1)) {
              this._stack.pop();
            } else {
              this._addToStack(a);
            }
            e = n + 1;
          }
        }
        return this._resultObjectArray;
      },
      _attributeToObject: function (t) {
        var e;
        var i;
        var r;
        var s;
        var a = {};
        var o = (t = t.trim()).match(/^(color|size)(\s)*=/);
        if (o) {
          e = o[0];
          if ("" === (t = t.substring(e.length).trim())) {
            return a;
          }
          i = t.indexOf(" ");
          switch (e[0]) {
            case "c":
              a.color = i > -1 ? t.substring(0, i).trim() : t;
              break;
            case "s":
              a.size = parseInt(t);
          }
          if (i > -1) {
            s = t.substring(i + 1).trim();
            r = this._processEventHandler(s);
            a.event = r;
          }
          return a;
        }
        if ((o = t.match(/^(br(\s)*\/)/)) && o[0].length > 0 && (e = o[0].trim()).startsWith("br") && "/" === e[e.length - 1]) {
          a.isNewLine = true;
          this._resultObjectArray.push({
            text: "",
            style: {
              newline: true
            }
          });
          return a;
        }
        if ((o = t.match(/^(img(\s)*src(\s)*=[^>]+\/)/)) && o[0].length > 0 && (e = o[0].trim()).startsWith("img") && "/" === e[e.length - 1]) {
          var c;
          o = t.match(n);
          for (var l = false; o;) {
            e = (t = t.substring(t.indexOf(o[0]))).substr(0, o[0].length);
            u = (i = (c = t.substring(e.length).trim()).indexOf(" ")) > -1 ? c.substr(0, i) : c;
            e = (e = e.replace(/[^a-zA-Z]/g, "").trim()).toLocaleLowerCase();
            t = c.substring(i).trim();
            if (u.endsWith("/")) {
              u = u.slice(0, -1);
            }
            if ("src" === e) {
              switch (u.charCodeAt(0)) {
                case 34:
                case 39:
                  l = true;
                  u = u.slice(1, -1);
              }
              a.isImage = true;
              a.src = u;
            } else if ("height" === e) {
              a.imageHeight = parseInt(u);
            } else if ("width" === e) {
              a.imageWidth = parseInt(u);
            } else if ("align" === e) {
              switch (u.charCodeAt(0)) {
                case 34:
                case 39:
                  u = u.slice(1, -1);
              }
              a.imageAlign = u.toLocaleLowerCase();
            } else if ("offset" === e) {
              a.imageOffset = u;
            } else if ("click" === e) {
              a.event = this._processEventHandler(e + "=" + u);
            }
            if (a.event && "param" === e) {
              a.event.param = u.replace(/^\"|\"$/g, "");
            }
            o = t.match(n);
          }
          if (l && a.isImage) {
            this._resultObjectArray.push({
              text: "",
              style: a
            });
          }
          return {};
        }
        if (o = t.match(/^(outline(\s)*[^>]*)/)) {
          var h = {
            color: "#ffffff",
            width: 1
          };
          if (t = o[0].substring(7).trim()) {
            var u;
            var f = /(\s)*color(\s)*=|(\s)*width(\s)*=|(\s)*click(\s)*=|(\s)*param(\s)*=/;
            for (o = t.match(f); o;) {
              e = (t = t.substring(t.indexOf(o[0]))).substr(0, o[0].length);
              u = (i = (c = t.substring(e.length).trim()).indexOf(" ")) > -1 ? c.substr(0, i) : c;
              e = (e = e.replace(/[^a-zA-Z]/g, "").trim()).toLocaleLowerCase();
              t = c.substring(i).trim();
              if ("click" === e) {
                a.event = this._processEventHandler(e + "=" + u);
              } else if ("color" === e) {
                h.color = u;
              } else if ("width" === e) {
                h.width = parseInt(u);
              }
              if (a.event && "param" === e) {
                a.event.param = u.replace(/^\"|\"$/g, "");
              }
              o = t.match(f);
            }
          }
          a.outline = h;
        }
        if ((o = t.match(/^(on|u|b|i)(\s)*/)) && o[0].length > 0) {
          e = o[0];
          t = t.substring(e.length).trim();
          switch (e[0]) {
            case "u":
              a.underline = true;
              break;
            case "i":
              a.italic = true;
              break;
            case "b":
              a.bold = true;
          }
          if ("" === t) {
            return a;
          }
          r = this._processEventHandler(t);
          a.event = r;
        }
        return a;
      },
      _processEventHandler: function (t) {
        var e = 0;
        var n = {};
        var r = t.match(i);
        for (var s = false; r;) {
          var a = r[0];
          var o = "";
          s = false;
          if ("\"" === (t = t.substring(a.length).trim()).charAt(0)) {
            if ((e = t.indexOf("\"", 1)) > -1) {
              o = t.substring(1, e).trim();
              s = true;
            }
            e++;
          } else if ("'" === t.charAt(0)) {
            if ((e = t.indexOf("'", 1)) > -1) {
              o = t.substring(1, e).trim();
              s = true;
            }
            e++;
          } else {
            var c = t.match(/(\S)+/);
            e = (o = c ? c[0] : "").length;
          }
          if (s) {
            n[a = a.substring(0, a.length - 1).trim()] = o;
          }
          r = (t = t.substring(e).trim()).match(i);
        }
        return n;
      },
      _addToStack: function (t) {
        var e = this._attributeToObject(t);
        if (0 === this._stack.length) {
          this._stack.push(e);
        } else {
          if (e.isNewLine || e.isImage) {
            return;
          }
          var i = this._stack[this._stack.length - 1];
          for (var n in i) if (!e[n]) {
            e[n] = i[n];
          }
          this._stack.push(e);
        }
      },
      _processResult: function (t) {
        if ("" !== t) {
          t = this._escapeSpecialSymbol(t);
          if (this._stack.length > 0) {
            this._resultObjectArray.push({
              text: t,
              style: this._stack[this._stack.length - 1]
            });
          } else {
            this._resultObjectArray.push({
              text: t
            });
          }
        }
      },
      _escapeSpecialSymbol: function (t) {
        for (var e = 0; e < this._specialSymbolArray.length; ++e) {
          var i = this._specialSymbolArray[e][0];
          var n = this._specialSymbolArray[e][1];
          t = t.replace(i, n);
        }
        return t;
      }
    };
    e.exports = r;
  }, {}],
  235: [function (t) {
    "use strict";

    t("./CCPath");
    t("./profiler/CCProfiler");
    t("./find");
    t("./mutable-forward-iterator");
  }, {
    "./CCPath": 226,
    "./find": 232,
    "./mutable-forward-iterator": 237,
    "./profiler/CCProfiler": 240
  }],
  236: [function (t, e) {
    "use strict";

    var i = t("../platform/js");
    var n = {
      propertyDefine: function (t, e, n) {
        function r(t, e, n, r) {
          var s = Object.getOwnPropertyDescriptor(t, e);
          if (s) {
            if (s.get) {
              t[n] = s.get;
            }
            if (s.set && r) {
              t[r] = s.set;
            }
          } else {
            var a = t[n];
            i.getset(t, e, a, t[r]);
          }
        }
        var s;
        var a = t.prototype;
        for (var o = 0; o < e.length; o++) {
          var c = (s = e[o])[0].toUpperCase() + s.slice(1);
          r(a, s, "get" + c, "set" + c);
        }
        for (s in n) {
          var l = n[s];
          r(a, s, l[0], l[1]);
        }
      },
      NextPOT: function (t) {
        t -= 1;
        t |= t >> 1;
        t |= t >> 2;
        t |= t >> 4;
        t |= t >> 8;
        return 1 + (t |= t >> 16);
      },
      BUILTIN_CLASSID_RE: /^(?:cc|dragonBones|sp|ccsg)\..+/
    };
    var r = Array(123);
    for (var s = 0; s < 123; ++s) {
      r[s] = 64;
    }
    for (var a = 0; a < 64; ++a) {
      r["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charCodeAt(a)] = a;
    }
    n.BASE64_VALUES = r;
    n.pushToMap = function (t, e, i, n) {
      var r = t[e];
      if (r) {
        if (Array.isArray(r)) {
          if (n) {
            r.push(r[0]);
            r[0] = i;
          } else {
            r.push(i);
          }
        } else {
          t[e] = n ? [i, r] : [r, i];
        }
      } else {
        t[e] = i;
      }
    };
    n.clampf = function (t, e, i) {
      if (e > i) {
        var n = e;
        e = i;
        i = n;
      }
      return t < e ? e : t < i ? t : i;
    };
    n.clamp01 = function (t) {
      return t < 0 ? 0 : t < 1 ? t : 1;
    };
    n.lerp = function (t, e, i) {
      return t + (e - t) * i;
    };
    n.degreesToRadians = function (t) {
      return t * cc.macro.RAD;
    };
    n.radiansToDegrees = function (t) {
      return t * cc.macro.DEG;
    };
    cc.misc = e.exports = n;
  }, {
    "../platform/js": 183
  }],
  237: [function (t, e) {
    "use strict";

    function i(t) {
      this.i = 0;
      this.array = t;
    }
    var n = i.prototype;
    n.remove = function (t) {
      var e = this.array.indexOf(t);
      if (e >= 0) {
        this.removeAt(e);
      }
    };
    n.removeAt = function (t) {
      this.array.splice(t, 1);
      if (t <= this.i) {
        --this.i;
      }
    };
    n.fastRemove = function (t) {
      var e = this.array.indexOf(t);
      if (e >= 0) {
        this.fastRemoveAt(e);
      }
    };
    n.fastRemoveAt = function (t) {
      var e = this.array;
      e[t] = e[e.length - 1];
      --e.length;
      if (t <= this.i) {
        --this.i;
      }
    };
    n.push = function (t) {
      this.array.push(t);
    };
    e.exports = i;
  }, {}],
  238: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n = function () {
      function t() {
        this.enabled = false;
        this.count = 0;
        this.maxSize = 1024;
      }
      var e = t.prototype;
      e.get = function () {};
      e.put = function () {};
      e.clear = function () {};
      return t;
    }();
    i.default = n;
    cc.pool = {};
    n.register = function (t, e) {
      cc.pool[t] = e;
    };
    e.exports = i.default;
  }, {}],
  239: [function (t, e) {
    "use strict";

    cc._PrefabInfo = cc.Class({
      name: "cc.PrefabInfo",
      properties: {
        root: null,
        asset: null,
        fileId: "",
        sync: false
      }
    });
    e.exports = {
      syncWithPrefab: function (t) {
        var e = t._prefab;
        if (e.asset) {
          var i = t._objFlags;
          var n = t._parent;
          var r = t._id;
          var s = t._name;
          var a = t._active;
          var o = t._eulerAngles.x;
          var c = t._eulerAngles.y;
          var l = t._eulerAngles.z;
          var h = t._localZOrder;
          var u = t._trs;
          var f = u[0];
          var d = u[1];
          var _ = u[2];
          cc.game._isCloning = true;
          e.asset._doInstantiate(t);
          cc.game._isCloning = false;
          t._objFlags = i;
          t._parent = n;
          t._id = r;
          t._prefab = e;
          t._name = s;
          t._active = a;
          t._localZOrder = h;
          (u = t._trs)[0] = f;
          u[1] = d;
          u[2] = _;
          t._eulerAngles.x = o;
          t._eulerAngles.y = c;
          t._eulerAngles.z = l;
        } else {
          t._prefab = null;
        }
      }
    };
  }, {}],
  240: [function (t, e) {
    "use strict";

    var i = t("../../platform/CCMacro");
    var n = t("./perf-counter");
    var r = false;
    var a = null;
    var o = null;
    var c = null;
    function l() {
      if (!a) {
        a = {
          fps: {
            desc: "Framerate (FPS)",
            below: 30,
            average: 500
          },
          draws: {
            desc: "Draw Call"
          },
          frame: {
            desc: "Frame time (ms)",
            min: 0,
            max: 50,
            average: 500
          },
          logic: {
            desc: "Game Logic (ms)",
            min: 0,
            max: 50,
            average: 500,
            color: "#080"
          },
          render: {
            desc: "Renderer (ms)",
            min: 0,
            max: 50,
            average: 500,
            color: "#f90"
          },
          mode: {
            desc: cc.game.renderType === cc.game.RENDER_TYPE_WEBGL ? "WebGL" : "Canvas",
            min: 1
          }
        };
        var t = performance.now();
        for (var e in a) a[e]._counter = new n(e, a[e], t);
      }
    }
    function h() {
      if (!o || !o.isValid) {
        (o = new cc.Node("PROFILER-NODE")).x = o.y = 10;
        o.groupIndex = cc.Node.BuiltinGroupIndex.DEBUG;
        cc.Camera._setupDebugCamera();
        o.zIndex = i.MAX_ZINDEX;
        cc.game.addPersistRootNode(o);
        var t = new cc.Node("LEFT-PANEL");
        t.anchorX = t.anchorY = 0;
        var e = t.addComponent(cc.Label);
        e.fontSize = 15;
        e.lineHeight = 15;
        t.parent = o;
        var n = new cc.Node("RIGHT-PANEL");
        n.anchorX = 1;
        n.anchorY = 0;
        n.x = 200;
        var r = n.addComponent(cc.Label);
        r.horizontalAlign = cc.Label.HorizontalAlign.RIGHT;
        r.fontSize = 15;
        r.lineHeight = 15;
        n.parent = o;
        if (cc.sys.platform !== cc.sys.BAIDU_GAME_SUB && cc.sys.platform !== cc.sys.WECHAT_GAME_SUB) {
          e.cacheMode = cc.Label.CacheMode.CHAR;
          r.cacheMode = cc.Label.CacheMode.CHAR;
        }
        c = {
          left: e,
          right: r
        };
      }
    }
    function u() {
      h();
      var t = cc.director._lastUpdate;
      a.frame._counter.start(t);
      a.logic._counter.start(t);
    }
    function f() {
      var t = performance.now();
      if (cc.director.isPaused()) {
        a.frame._counter.start(t);
      } else {
        a.logic._counter.end(t);
      }
      a.render._counter.start(t);
    }
    function d() {
      var t = performance.now();
      a.render._counter.end(t);
      a.draws._counter.value = cc.renderer.drawCalls;
      a.frame._counter.end(t);
      a.fps._counter.frame(t);
      var e = "";
      var i = "";
      for (var n in a) {
        var r = a[n];
        r._counter.sample(t);
        e += r.desc + "\n";
        i += r._counter.human() + "\n";
      }
      if (c) {
        c.left.string = e;
        c.right.string = i;
      }
    }
    cc.profiler = e.exports = {
      isShowingStats: function () {
        return r;
      },
      hideStats: function () {
        if (r) {
          if (o) {
            o.active = false;
          }
          cc.director.off(cc.Director.EVENT_BEFORE_UPDATE, u);
          cc.director.off(cc.Director.EVENT_AFTER_UPDATE, f);
          cc.director.off(cc.Director.EVENT_AFTER_DRAW, d);
          r = false;
        }
      },
      showStats: function () {
        if (!r) {
          l();
          if (o) {
            o.active = true;
          }
          cc.director.on(cc.Director.EVENT_BEFORE_UPDATE, u);
          cc.director.on(cc.Director.EVENT_AFTER_UPDATE, f);
          cc.director.on(cc.Director.EVENT_AFTER_DRAW, d);
          r = true;
        }
      }
    };
  }, {
    "../../platform/CCMacro": 167,
    "./perf-counter": 242
  }],
  241: [function (t, e) {
    "use strict";

    var i = cc.Class({
      name: "cc.Counter",
      ctor: function (t, e, i) {
        this._id = t;
        this._opts = e || {};
        this._value = 0;
        this._total = 0;
        this._averageValue = 0;
        this._accumValue = 0;
        this._accumSamples = 0;
        this._accumStart = i;
      },
      properties: {
        value: {
          get: function () {
            return this._value;
          },
          set: function (t) {
            this._value = t;
          }
        }
      },
      _average: function (t, e) {
        if (this._opts.average) {
          this._accumValue += t;
          ++this._accumSamples;
          if (e - this._accumStart >= this._opts.average) {
            this._averageValue = this._accumValue / this._accumSamples;
            this._accumValue = 0;
            this._accumStart = e;
            this._accumSamples = 0;
          }
        }
      },
      sample: function (t) {
        this._average(this._value, t);
      },
      human: function () {
        var t = this._opts.average ? this._averageValue : this._value;
        return Math.round(100 * t) / 100;
      },
      alarm: function () {
        return this._opts.below && this._value < this._opts.below || this._opts.over && this._value > this._opts.over;
      }
    });
    e.exports = i;
  }, {}],
  242: [function (t, e) {
    "use strict";

    var i = t("./counter");
    var n = cc.Class({
      name: "cc.PerfCounter",
      extends: i,
      ctor: function (t, e, i) {
        this._time = i;
      },
      start: function (t) {
        this._time = t;
      },
      end: function (t) {
        this._value = t - this._time;
        this._average(this._value);
      },
      tick: function () {
        this.end();
        this.start();
      },
      frame: function (t) {
        var i = t - this._time;
        this._total++;
        if (i > (this._opts.average || 1e3)) {
          this._value = 1e3 * this._total / i;
          this._total = 0;
          this._time = t;
          this._average(this._value);
        }
      }
    });
    e.exports = n;
  }, {
    "./counter": 241
  }],
  243: [function (t, e) {
    "use strict";

    var i;
    var n = new ((i = t("../platform/js")) && i.__esModule ? i : {
      default: i
    }).default.Pool(2);
    function r(t) {
      this.count = 0;
      this.limit = t;
      this.datas = {};
      this.head = null;
      this.tail = null;
    }
    n.get = function () {
      return this._get() || {
        key: null,
        value: null,
        prev: null,
        next: null
      };
    };
    r.prototype.moveToHead = function (t) {
      t.next = this.head;
      t.prev = null;
      if (null !== this.head) {
        this.head.prev = t;
      }
      this.head = t;
      if (null === this.tail) {
        this.tail = t;
      }
      this.count++;
      this.datas[t.key] = t;
    };
    r.prototype.put = function (t, e) {
      var i = n.get();
      i.key = t;
      i.value = e;
      if (this.count >= this.limit) {
        var r = this.tail;
        delete this.datas[r.key];
        this.count--;
        this.tail = r.prev;
        this.tail.next = null;
        r.prev = null;
        r.next = null;
        n.put(r);
      }
      this.moveToHead(i);
    };
    r.prototype.remove = function (t) {
      if (null !== t.prev) {
        t.prev.next = t.next;
      } else {
        this.head = t.next;
      }
      if (null !== t.next) {
        t.next.prev = t.prev;
      } else {
        this.tail = t.prev;
      }
      delete this.datas[t.key];
      this.count--;
    };
    r.prototype.get = function (t) {
      var e = this.datas[t];
      return e ? (this.remove(e), this.moveToHead(e), e.value) : null;
    };
    r.prototype.clear = function () {
      this.count = 0;
      this.datas = {};
      this.head = null;
      this.tail = null;
    };
    r.prototype.has = function (t) {
      return !!this.datas[t];
    };
    r.prototype.delete = function (t) {
      var e = this.datas[t];
      this.remove(e);
    };
    var s = new r(100);
    var a = {
      BASELINE_RATIO: .26,
      MIDDLE_RATIO: .37,
      BASELINE_OFFSET: 0,
      label_wordRex: undefined,
      label_symbolRex: /^[!,.:;'}\]%\?>\u3001\u2018\u201c\u300b\uff1f\u3002\uff0c\uff01]/,
      label_lastWordRex: undefined,
      label_lastEnglish: undefined,
      label_firstEnglish: undefined,
      highSurrogateRex: /[\uD800-\uDBFF]/,
      lowSurrogateRex: /[\uDC00-\uDFFF]/,
      label_wrapinspection: true,
      __CHINESE_REG: /[\u4E00-\u9FFF\u3400-\u4DFF]/,
      __JAPANESE_REG: /[\u3000-\u303F\u3040-\u309F\u30A0-\u30FF\uFF00-\uFFEF\u4E00-\u9FAF\u2605-\u2606\u2190-\u2195\u203B]/,
      __KOREAN_REG: /[\u1100-\u11FF\u3130-\u318F\uA960-\uA97F\uAC00-\uD7AF\uD7B0-\uD7FF]/,
      __RTL_LANGUAGE_REG: /[\u0600-\u06FF\u0750-\u077F\u0870-\u089F\u08A0-\u08FF\uFB50-\uFDFF\uFE70-\uFEFF]/,
      isUnicodeCJK: function (t) {
        return this.__CHINESE_REG.test(t) || this.__JAPANESE_REG.test(t) || this.__KOREAN_REG.test(t);
      },
      isUnicodeSpace: function (t) {
        return (t = t.charCodeAt(0)) >= 9 && t <= 13 || 32 === t || 133 === t || 160 === t || 5760 === t || t >= 8192 && t <= 8202 || 8232 === t || 8233 === t || 8239 === t || 8287 === t || 12288 === t;
      },
      isUnicodeRTL: function (t) {
        return this.__RTL_LANGUAGE_REG.test(t);
      },
      updateLabelRegex: function (t) {
        this.label_wordRex = RegExp("([" + t + "]+|S)");
        this.label_lastWordRex = RegExp("([" + t + "]+|S)$");
        this.label_lastEnglish = RegExp("[" + t + "]+$");
        this.label_firstEnglish = RegExp("^[" + t + "]");
      },
      setRegexLang: function (t) {
        var e = "";
        switch (t) {
          case "ar":
          case "fa":
          case "ur":
            e = "؀-ۿݐ-ݿࡰ-࢟ࢠ-ࣿﭐ-﷿ﹰ-﻿";
            break;
          case "az":
            e = "ÇçƏəĞğİıÖöŞşÜü";
            break;
          case "bg":
          case "mn":
          case "ru":
            e = "А-Яа-яЁё";
            break;
          case "bn":
            e = "ঀ-৿";
            break;
          case "cs":
            e = "ÁáČčĎďÉéĚěÍíŇňÓóŘřŠšŤťÚúŮůÝýŽž";
            break;
          case "da":
          case "no":
            e = "ÆæØøÅå";
            break;
          case "de":
            e = "ÄäÖöÜüẞß";
            break;
          case "el":
            e = "Ͱ-Ͽ";
            break;
          case "et":
            e = "ÄäÖöÜüÕõ";
            break;
          case "fi":
            e = "ÄäÖöÅåŠšŽž";
            break;
          case "fr":
            e = "ÀàÂâÄäÇçÉéÈèÊêËëÎîÏïÔôŒœÙùÛûÜüŸÿ";
            break;
          case "hi":
            e = "ऄ-ॿ";
            break;
          case "hu":
            e = "ÁáÉéÍíÓóÖöŐőÚúÜüŰű";
            break;
          case "hy":
            e = "԰-֏ﬓ-ﬗ";
            break;
          case "it":
            e = "ÀàÉéÈèÌìÍíÎîÒòÓóÙùÚú";
            break;
          case "lo":
            e = "຀-໿";
            break;
          case "lt":
            e = "ĄąČčĘęĖėĮįŠšŲųŪūŽž";
            break;
          case "my":
            e = "က-႟ꩠ-ꩿꧠ-꧿";
            break;
          case "nl":
            e = "ÀàÁáÂâÄäÈèÉéÊêËëÌìÍíÎîÏïÒòÓóÔôÖöÙùÚúÛûÜü";
            break;
          case "pl":
            e = "ĄąĆćĘęŁłŃńÓóŚśŹźŻż";
            break;
          case "ro":
            e = "ĂăÂâÎîȘșȚț";
            break;
          case "sh":
            e = "ČčĆćĐđŠšŽž";
            break;
          case "si":
            e = "඀-෿";
            break;
          case "sk":
            e = "ÁáÄäČčĎďÉéÍíĹĺĽľŇňÓóÔôŔŕŠšŤťÚúÝýŽž";
            break;
          case "sq":
            e = "ÇçËë";
            break;
          case "sr":
            e = "А-Яа-яЁёČčĆćĐđŠšŽžA-Za-zĐđŠšĆćČčŽž";
            break;
          case "sv":
            e = "ÄäÖöÅå";
            break;
          case "th":
            e = "฀-๿";
            break;
          case "tr":
            e = "ÇçĞğİıÖöŞşÜü";
            break;
          case "uk":
            e = "А-ЩЬЮЯҐЄIЇІа-щьюяґєії";
            break;
          case "uz":
            e = "ʻ";
            break;
          case "vi":
            e = "ÂâĂăĐđÊêÔôƠơƯư";
            break;
          default:
            e = "ÁáÂâÃãÀàÉéÊêÍíÓóÔôÕõÚúÜüÑñÇç";
        }
        this.updateLabelRegex("a-zA-Z0-9" + e);
      },
      safeMeasureText: function (t, e, i) {
        var n = (i || t.font) + "🎮" + e;
        var r = s.get(n);
        if (null !== r) {
          return r;
        }
        var a = t.measureText(e);
        var o = a && a.width || 0;
        s.put(n, o);
        return o;
      },
      _safeSubstring: function (t, e, i) {
        var n = e;
        var r = i;
        var s = t[e];
        if (this.lowSurrogateRex.test(s)) {
          n--;
        }
        if (undefined !== i) {
          if (i - 1 !== e) {
            var a = t[i - 1];
            if (this.highSurrogateRex.test(a)) {
              r--;
            }
          } else if (this.highSurrogateRex.test(s)) {
            r++;
          }
        }
        return t.substring(n, r);
      },
      fragmentText: function (t, e, i, n) {
        var r = [];
        if (0 === t.length || i < 0) {
          r.push("");
          return r;
        }
        for (var s = t; e > i && s.length > 1;) {
          var a = s.length * (i / e) | 0;
          var o = this._safeSubstring(s, a);
          var c = e - n(o);
          var l = o;
          var h = 0;
          for (var u = 0; c > i && u++ < 10;) {
            a *= i / c;
            a |= 0;
            c = e - n(o = this._safeSubstring(s, a));
          }
          for (u = 0; c <= i && u++ < 10;) {
            if (o) {
              var f = this.label_wordRex.exec(o);
              h = f ? f[0].length : 1;
              l = o;
            }
            a += h;
            c = e - n(o = this._safeSubstring(s, a));
          }
          if (0 == (a -= h)) {
            a = 1;
            l = this._safeSubstring(s, 1);
          } else if (1 === a && this.highSurrogateRex.test(s[0])) {
            a = 2;
            l = this._safeSubstring(s, 2);
          }
          var d;
          var _ = this._safeSubstring(s, 0, a);
          if (this.label_wrapinspection && this.label_symbolRex.test(l || o)) {
            if (0 == (a -= (d = this.label_lastWordRex.exec(_)) ? d[0].length : 0)) {
              a = 1;
            }
            l = this._safeSubstring(s, a);
            _ = this._safeSubstring(s, 0, a);
          }
          if (this.label_firstEnglish.test(l) && (d = this.label_lastEnglish.exec(_)) && _ !== d[0]) {
            a -= d[0].length;
            l = this._safeSubstring(s, a);
            _ = this._safeSubstring(s, 0, a);
          }
          if (0 === r.length) {
            r.push(_);
          } else if ((_ = _.trimLeft()).length > 0) {
            r.push(_);
          }
          e = n(s = l || o);
        }
        if (0 === r.length) {
          r.push(s);
        } else if ((s = s.trimLeft()).length > 0) {
          r.push(s);
        }
        return r;
      }
    };
    a.updateLabelRegex("a-zA-Z0-9ÁáÂâÃãÀàÉéÊêÍíÓóÔôÕõÚúÜüÑñÇç");
    cc.textUtils = e.exports = a;
  }, {
    "../platform/js": 183
  }],
  244: [function (t, e) {
    "use strict";

    var i = t("../assets/CCTexture2D");
    var n = {
      loadImage: function (t, e, i) {
        var n = cc.assetManager.assets.get(t);
        if (n) {
          return n.loaded ? (e && e.call(i, null, n), n) : (n.once("load", function () {
            if (e) {
              e.call(i, null, n);
            }
          }, i), n);
        }
        cc.assetManager.loadRemote(t, function (t, n) {
          if (e) {
            e.call(i, t, n);
          }
        });
      },
      cacheImage: function (t, e) {
        if (t && e) {
          var n = new i();
          n.initWithElement(e);
          cc.assetManager.assets.add(t, n);
          return n;
        }
      },
      postLoadTexture: function (t, e) {
        if (t.loaded) {
          if (e) {
            e();
          }
        } else if (t.nativeUrl) {
          cc.assetManager.postLoadNative(t, e);
        } else if (e) {
          e();
        }
      }
    };
    e.exports = n;
  }, {
    "../assets/CCTexture2D": 72
  }],
  245: [function (t, e) {
    "use strict";

    var i = t("./node-unit");
    var n = t("./node-mem-pool");
    e.exports = {
      NodeMemPool: new n(i)
    };
  }, {
    "./node-mem-pool": 247,
    "./node-unit": 248
  }],
  246: [function (t, e) {
    "use strict";

    var i = function (t) {
      this._unitClass = t;
      this._pool = [];
      this._findOrder = [];
    };
    var n = i.prototype;
    n._initNative = function () {
      this._nativeMemPool = new renderer.MemPool();
    };
    n._buildUnit = function (t) {
      return new this._unitClass(t, this);
    };
    n._destroyUnit = function (t) {
      this._pool[t] = null;
      var e = 0;
      for (var i = this._findOrder.length; e < i; e++) {
        var n = this._findOrder[e];
        if (n && n.unitID == t) {
          this._findOrder.splice(e, 1);
          break;
        }
      }
    };
    n._findUnitID = function () {
      var t = 0;
      for (var e = this._pool; e[t];) {
        t++;
      }
      return t;
    };
    n.pop = function () {
      var t = null;
      var e = 0;
      var i = this._findOrder;
      var n = this._pool;
      for (var r = i.length; e < r; e++) {
        var s = i[e];
        if (s && s.hasSpace()) {
          t = s;
          break;
        }
      }
      if (!t) {
        var a = this._findUnitID();
        t = this._buildUnit(a);
        n[a] = t;
        i.push(t);
        e = i.length - 1;
      }
      var o = i[0];
      if (o !== t) {
        i[0] = t;
        i[e] = o;
      }
      return t.pop();
    };
    n.push = function (t) {
      var e = this._pool[t.unitID];
      e.push(t.index);
      if (this._findOrder.length > 1 && e.isAllFree()) {
        this._destroyUnit(t.unitID);
      }
      return e;
    };
    e.exports = i;
  }, {}],
  247: [function (t, e) {
    "use strict";

    var i;
    var n = t("./mem-pool");
    var r = function (t) {
      n.call(this, t);
    };
    (i = function () {}).prototype = n.prototype;
    var s = r.prototype = new i();
    s._initNative = function () {
      this._nativeMemPool = new renderer.NodeMemPool();
    };
    s._destroyUnit = function (t) {
      n.prototype._destroyUnit.call(this, t);
    };
    e.exports = r;
  }, {
    "./mem-pool": 246
  }],
  248: [function (t, e) {
    "use strict";

    var i;
    var n = t("../../value-types/utils");
    Uint32Array;
    var r = 10 * n.FLOAT_BYTES;
    var s = 16 * n.FLOAT_BYTES;
    var a = 16 * n.FLOAT_BYTES;
    Uint32Array;
    Uint32Array;
    Int32Array;
    Uint8Array;
    Uint8Array;
    Uint32Array;
    n.FLOAT_BYTES;
    var o = t("./unit-base");
    var c = function (t, e) {
      o.call(this, t, e);
      var i = this._contentNum;
      this.trsList = new n.FLOAT_ARRAY_TYPE(10 * i);
      this.localMatList = new n.FLOAT_ARRAY_TYPE(16 * i);
      this.worldMatList = new n.FLOAT_ARRAY_TYPE(16 * i);
      for (var c = 0; c < i; c++) {
        var l = this._spacesData[c];
        l.trs = new n.FLOAT_ARRAY_TYPE(this.trsList.buffer, c * r, 10);
        l.localMat = new n.FLOAT_ARRAY_TYPE(this.localMatList.buffer, c * s, 16);
        l.worldMat = new n.FLOAT_ARRAY_TYPE(this.worldMatList.buffer, c * a, 16);
      }
    };
    (i = function () {}).prototype = o.prototype;
    c.prototype = new i();
    e.exports = c;
  }, {
    "../../value-types/utils": 258,
    "./unit-base": 249
  }],
  249: [function (t, e) {
    "use strict";

    var i = function (t, e, i) {
      i = i || 128;
      this.unitID = t;
      this._memPool = e;
      this._data = new Uint16Array(2);
      this._data[0] = 0;
      this._data[1] = 0;
      this._contentNum = i;
      this._signData = new Uint16Array(2 * this._contentNum);
      this._spacesData = [];
      for (var n = 0; n < i; n++) {
        var r = 2 * n;
        this._signData[r + 0] = n + 1;
        this._signData[r + 1] = 0;
        this._spacesData[n] = {
          index: n,
          unitID: t
        };
      }
      this._signData[2 * (i - 1)] = 65535;
    };
    var n = i.prototype;
    n.hasSpace = function () {
      return 65535 !== this._data[0];
    };
    n.isAllFree = function () {
      return 0 == this._data[1];
    };
    n.pop = function () {
      var t = this._data[0];
      if (65535 === t) {
        return null;
      }
      var i = 2 * t;
      var n = this._spacesData[t];
      this._signData[i + 1] = 1;
      this._data[0] = this._signData[i + 0];
      this._data[1]++;
      return n;
    };
    n.push = function (t) {
      var e = 2 * t;
      this._signData[e + 1] = 0;
      this._signData[e + 0] = this._data[0];
      this._data[0] = t;
      this._data[1]--;
    };
    n.dump = function () {
      for (var t = this._data[0]; 65535 != t;) {
        t = this._signData[2 * t + 0];
      }
      var e = this._contentNum;
      for (var i = 0; i < e; i++) {
        this._signData[2 * i + 1];
      }
      this._data[1];
      this._contentNum;
    };
    e.exports = i;
  }, {}],
  250: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n = t("./value-type") && t("./value-type").__esModule ? t("./value-type") : {
      default: t("./value-type")
    };
    var r = t("../platform/CCClass") && t("../platform/CCClass").__esModule ? t("../platform/CCClass") : {
      default: t("../platform/CCClass")
    };
    var s = t("../utils/misc") && t("../utils/misc").__esModule ? t("../utils/misc") : {
      default: t("../utils/misc")
    };
    function o(t, e) {
      for (var i = 0; i < e.length; i++) {
        var n = e[i];
        n.enumerable = n.enumerable || false;
        n.configurable = true;
        if ("value" in n) {
          n.writable = true;
        }
        Object.defineProperty(t, n.key, n);
      }
    }
    function c(t, e) {
      return (c = Object.setPrototypeOf || function (t, e) {
        t.__proto__ = e;
        return t;
      })(t, e);
    }
    var l = function (t) {
      function n(e, i, n, r) {
        var s;
        if (undefined === e) {
          e = 0;
        }
        if (undefined === i) {
          i = 0;
        }
        if (undefined === n) {
          n = 0;
        }
        if (undefined === r) {
          r = 255;
        }
        (s = t.call(this) || this)._val = 0;
        if ("object" == typeof e) {
          i = e.g;
          n = e.b;
          r = e.a;
          e = e.r;
        }
        s._val = (r << 24 >>> 0) + (n << 16) + (i << 8) + (0 | e);
        return s;
      }
      n.prototype = Object.create(t.prototype);
      n.prototype.constructor = n;
      c(n, t);
      n.copy = function (t, e) {
        t.r = e.r;
        t.g = e.g;
        t.b = e.b;
        t.a = e.a;
        return t;
      };
      n.clone = function (t) {
        return new n(t.r, t.g, t.b, t.a);
      };
      n.set = function (t, e, i, n, r) {
        if (undefined === e) {
          e = 255;
        }
        if (undefined === i) {
          i = 255;
        }
        if (undefined === n) {
          n = 255;
        }
        if (undefined === r) {
          r = 255;
        }
        t.r = e;
        t.g = i;
        t.b = n;
        t.a = r;
        return t;
      };
      n.fromHex = function (t, e) {
        var i = e >> 24 & 255;
        var n = e >> 16 & 255;
        var r = e >> 8 & 255;
        var s = 255 & e;
        t.r = i;
        t.g = n;
        t.b = r;
        t.a = s;
        return t;
      };
      n.fromHEX = function (t, e) {
        e = 0 === e.indexOf("#") ? e.substring(1) : e;
        t.r = parseInt(e.substr(0, 2), 16) || 0;
        t.g = parseInt(e.substr(2, 2), 16) || 0;
        t.b = parseInt(e.substr(4, 2), 16) || 0;
        t.a = parseInt(e.substr(6, 2), 16) || 255;
        t._val = (t.a << 24 >>> 0) + (t.b << 16) + (t.g << 8) + t.r;
        return t;
      };
      n.add = function (t, e, i) {
        t.r = e.r + i.r;
        t.g = e.g + i.g;
        t.b = e.b + i.b;
        t.a = e.a + i.a;
        return t;
      };
      n.subtract = function (t, e, i) {
        t.r = e.r - i.r;
        t.g = e.g - i.g;
        t.b = e.b - i.b;
        t.a = e.a - i.a;
        return t;
      };
      n.multiply = function (t, e, i) {
        t.r = e.r * i.r;
        t.g = e.g * i.g;
        t.b = e.b * i.b;
        t.a = e.a * i.a;
        return t;
      };
      n.divide = function (t, e, i) {
        t.r = e.r / i.r;
        t.g = e.g / i.g;
        t.b = e.b / i.b;
        t.a = e.a / i.a;
        return t;
      };
      n.scale = function (t, e, i) {
        t.r = e.r * i;
        t.g = e.g * i;
        t.b = e.b * i;
        t.a = e.a * i;
        return t;
      };
      n.lerp = function (t, e, i, n) {
        var r = e.r;
        var s = e.g;
        var a = e.b;
        var o = e.a;
        t.r = r + n * (i.r - r);
        t.g = s + n * (i.g - s);
        t.b = a + n * (i.b - a);
        t.a = o + n * (i.a - o);
        return t;
      };
      n.toArray = function (t, e, i) {
        if (undefined === i) {
          i = 0;
        }
        var r = e instanceof n || e.a > 1 ? 0.00392156862745098 : 1;
        t[i + 0] = e.r * r;
        t[i + 1] = e.g * r;
        t[i + 2] = e.b * r;
        t[i + 3] = e.a * r;
        return t;
      };
      n.fromArray = function (t, e, i) {
        if (undefined === i) {
          i = 0;
        }
        e.r = 255 * t[i + 0];
        e.g = 255 * t[i + 1];
        e.b = 255 * t[i + 2];
        e.a = 255 * t[i + 3];
        return e;
      };
      n.premultiplyAlpha = function (t, e) {
        var i = e.a / 255;
        t.r = e.r * i;
        t.g = e.g * i;
        t.b = e.b * i;
        t._fastSetA(e.a);
        return t;
      };
      var a;
      var l;
      var h = n.prototype;
      h.clone = function () {
        var t = new n();
        t._val = this._val;
        return t;
      };
      h.equals = function (t) {
        return t && this._val === t._val;
      };
      h.lerp = function (t, e, i) {
        i = i || new n();
        var r = this.r;
        var s = this.g;
        var a = this.b;
        var o = this.a;
        i.r = r + (t.r - r) * e;
        i.g = s + (t.g - s) * e;
        i.b = a + (t.b - a) * e;
        i.a = o + (t.a - o) * e;
        return i;
      };
      h.toString = function () {
        return "rgba(" + this.r.toFixed() + ", " + this.g.toFixed() + ", " + this.b.toFixed() + ", " + this.a.toFixed() + ")";
      };
      h.getR = function () {
        return 255 & this._val;
      };
      h.setR = function (t) {
        t = ~~s.default.clampf(t, 0, 255);
        this._val = (4294967040 & this._val | t) >>> 0;
        return this;
      };
      h.getG = function () {
        return (65280 & this._val) >> 8;
      };
      h.setG = function (t) {
        t = ~~s.default.clampf(t, 0, 255);
        this._val = (4294902015 & this._val | t << 8) >>> 0;
        return this;
      };
      h.getB = function () {
        return (16711680 & this._val) >> 16;
      };
      h.setB = function (t) {
        t = ~~s.default.clampf(t, 0, 255);
        this._val = (4278255615 & this._val | t << 16) >>> 0;
        return this;
      };
      h.getA = function () {
        return (4278190080 & this._val) >>> 24;
      };
      h.setA = function (t) {
        t = ~~s.default.clampf(t, 0, 255);
        this._val = (16777215 & this._val | t << 24) >>> 0;
        return this;
      };
      h.toCSS = function (t) {
        return t && "rgba" !== t ? "rgb" === t ? "rgb(" + this.r + "," + this.g + "," + this.b + ")" : "#" + this.toHEX(t) : "rgba(" + this.r + "," + this.g + "," + this.b + "," + (this.a / 255).toFixed(2) + ")";
      };
      h.fromHEX = function (t) {
        t = 0 === t.indexOf("#") ? t.substring(1) : t;
        var e = parseInt(t.substr(0, 2), 16) || 0;
        var i = parseInt(t.substr(2, 2), 16) || 0;
        var n = parseInt(t.substr(4, 2), 16) || 0;
        var r = parseInt(t.substr(6, 2), 16) || 255;
        this._val = (r << 24 >>> 0) + (n << 16) + (i << 8) + e;
        return this;
      };
      h.toHEX = function (t) {
        var e = [(this.r < 16 ? "0" : "") + this.r.toString(16), (this.g < 16 ? "0" : "") + this.g.toString(16), (this.b < 16 ? "0" : "") + this.b.toString(16)];
        if ("#rgb" === t) {
          e[0] = e[0][0];
          e[1] = e[1][0];
          e[2] = e[2][0];
        } else if ("#rrggbbaa" === t) {
          e.push((this.a < 16 ? "0" : "") + this.a.toString(16));
        }
        return e.join("");
      };
      h.toRGBValue = function () {
        return 16777215 & this._val;
      };
      h.fromHSV = function (t, e, i) {
        var n;
        var r;
        var s;
        if (0 === e) {
          n = r = s = i;
        } else if (0 === i) {
          n = r = s = 0;
        } else {
          if (1 === t) {
            t = 0;
          }
          var a = Math.floor(t *= 6);
          var o = t - a;
          var c = i * (1 - e);
          var l = i * (1 - e * o);
          var h = i * (1 - e * (1 - o));
          switch (a) {
            case 0:
              n = i;
              r = h;
              s = c;
              break;
            case 1:
              n = l;
              r = i;
              s = c;
              break;
            case 2:
              n = c;
              r = i;
              s = h;
              break;
            case 3:
              n = c;
              r = l;
              s = i;
              break;
            case 4:
              n = h;
              r = c;
              s = i;
              break;
            case 5:
              n = i;
              r = c;
              s = l;
          }
        }
        n *= 255;
        r *= 255;
        s *= 255;
        this._val = (this.a << 24 >>> 0) + (s << 16) + (r << 8) + (0 | n);
        return this;
      };
      h.toHSV = function () {
        var t = this.r / 255;
        var e = this.g / 255;
        var i = this.b / 255;
        var n = {
          h: 0,
          s: 0,
          v: 0
        };
        var r = Math.max(t, e, i);
        var s = Math.min(t, e, i);
        n.v = r;
        n.s = r ? (r - s) / r : 0;
        n.h = 0;
        return n;
      };
      h.set = function (t) {
        if (t._val) {
          this._val = t._val;
        } else {
          this.r = t.r;
          this.g = t.g;
          this.b = t.b;
          this.a = t.a;
        }
        return this;
      };
      h._fastSetA = function (t) {
        this._val = (16777215 & this._val | t << 24) >>> 0;
      };
      h.multiply = function (t) {
        var e = (255 & this._val) * t.r >> 8;
        var i = (65280 & this._val) * t.g >> 8;
        var n = (16711680 & this._val) * t.b >> 8;
        var r = ((4278190080 & this._val) >>> 8) * t.a;
        this._val = 4278190080 & r | 16711680 & n | 65280 & i | 255 & e;
        return this;
      };
      l = [{
        key: "WHITE",
        get: function () {
          return new n(255, 255, 255, 255);
        }
      }, {
        key: "BLACK",
        get: function () {
          return new n(0, 0, 0, 255);
        }
      }, {
        key: "TRANSPARENT",
        get: function () {
          return new n(0, 0, 0, 0);
        }
      }, {
        key: "GRAY",
        get: function () {
          return new n(127.5, 127.5, 127.5);
        }
      }, {
        key: "RED",
        get: function () {
          return new n(255, 0, 0);
        }
      }, {
        key: "GREEN",
        get: function () {
          return new n(0, 255, 0);
        }
      }, {
        key: "BLUE",
        get: function () {
          return new n(0, 0, 255);
        }
      }, {
        key: "YELLOW",
        get: function () {
          return new n(255, 235, 4);
        }
      }, {
        key: "ORANGE",
        get: function () {
          return new n(255, 127, 0);
        }
      }, {
        key: "CYAN",
        get: function () {
          return new n(0, 255, 255);
        }
      }, {
        key: "MAGENTA",
        get: function () {
          return new n(255, 0, 255);
        }
      }];
      if (a = [{
        key: "r",
        get: function () {
          return this.getR();
        },
        set: function (t) {
          this.setR(t);
        }
      }, {
        key: "g",
        get: function () {
          return this.getG();
        },
        set: function (t) {
          this.setG(t);
        }
      }, {
        key: "b",
        get: function () {
          return this.getB();
        },
        set: function (t) {
          this.setB(t);
        }
      }, {
        key: "a",
        get: function () {
          return this.getA();
        },
        set: function (t) {
          this.setA(t);
        }
      }]) {
        o(n.prototype, a);
      }
      if (l) {
        o(n, l);
      }
      Object.defineProperty(n, "prototype", {
        writable: false
      });
      return n;
    }(n.default);
    i.default = l;
    l.div = l.divide;
    l.sub = l.subtract;
    l.mul = l.multiply;
    l.WHITE_R = l.WHITE;
    l.BLACK_R = l.BLACK;
    l.TRANSPARENT_R = l.TRANSPARENT;
    l.GRAY_R = l.GRAY;
    l.RED_R = l.RED;
    l.GREEN_R = l.GREEN;
    l.BLUE_R = l.BLUE;
    l.YELLOW_R = l.YELLOW;
    l.ORANGE_R = l.ORANGE;
    l.CYAN_R = l.CYAN;
    l.MAGENTA_R = l.MAGENTA;
    r.default.fastDefine("cc.Color", l, {
      r: 0,
      g: 0,
      b: 0,
      a: 255
    });
    cc.Color = l;
    cc.color = function (t, e, i, n) {
      return "string" == typeof t ? new l().fromHEX(t) : "object" == typeof t ? new l(t.r, t.g, t.b, t.a) : new l(t, e, i, n);
    };
    e.exports = i.default;
  }, {
    "../platform/CCClass": 162,
    "../utils/misc": 236,
    "./value-type": 259
  }],
  251: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    var n = {
      Vec2: true,
      Vec3: true,
      Vec4: true,
      Mat4: true,
      Mat3: true,
      Rect: true,
      Size: true,
      Color: true,
      Quat: true,
      Trs: true
    };
    i.Vec4 = i.Vec3 = i.Vec2 = i.Trs = i.Size = i.Rect = i.Quat = i.Mat4 = i.Mat3 = i.Color = undefined;
    var r = t("./vec2") && t("./vec2").__esModule ? t("./vec2") : {
      default: t("./vec2")
    };
    i.Vec2 = r.default;
    var s = t("./vec3") && t("./vec3").__esModule ? t("./vec3") : {
      default: t("./vec3")
    };
    i.Vec3 = s.default;
    var a = t("./vec4") && t("./vec4").__esModule ? t("./vec4") : {
      default: t("./vec4")
    };
    i.Vec4 = a.default;
    var o = t("./mat4") && t("./mat4").__esModule ? t("./mat4") : {
      default: t("./mat4")
    };
    i.Mat4 = o.default;
    var c = t("./mat3") && t("./mat3").__esModule ? t("./mat3") : {
      default: t("./mat3")
    };
    i.Mat3 = c.default;
    var l = t("./rect") && t("./rect").__esModule ? t("./rect") : {
      default: t("./rect")
    };
    i.Rect = l.default;
    var h = t("./size") && t("./size").__esModule ? t("./size") : {
      default: t("./size")
    };
    i.Size = h.default;
    var u = t("./color") && t("./color").__esModule ? t("./color") : {
      default: t("./color")
    };
    i.Color = u.default;
    var f = t("./quat") && t("./quat").__esModule ? t("./quat") : {
      default: t("./quat")
    };
    i.Quat = f.default;
    var d = t("./trs") && t("./trs").__esModule ? t("./trs") : {
      default: t("./trs")
    };
    i.Trs = d.default;
    var _ = t("./utils");
    Object.keys(_).forEach(function (t) {
      if ("default" !== t && "__esModule" !== t) {
        if (!(Object.prototype.hasOwnProperty.call(n, t) || t in i && i[t] === _[t])) {
          i[t] = _[t];
        }
      }
    });
    cc.math = e.exports;
  }, {
    "./color": 250,
    "./mat3": 252,
    "./mat4": 253,
    "./quat": 254,
    "./rect": 255,
    "./size": 256,
    "./trs": 257,
    "./utils": 258,
    "./vec2": 260,
    "./vec3": 261,
    "./vec4": 262
  }],
  252: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n;
    var r = t("../value-types/utils");
    var s = (n = t("./vec3")) && n.__esModule ? n : {
      default: n
    };
    var a = function () {
      function t(t, e, i, n, s, a, o, c, l) {
        if (undefined === t) {
          t = 1;
        }
        if (undefined === e) {
          e = 0;
        }
        if (undefined === i) {
          i = 0;
        }
        if (undefined === n) {
          n = 0;
        }
        if (undefined === s) {
          s = 1;
        }
        if (undefined === a) {
          a = 0;
        }
        if (undefined === o) {
          o = 0;
        }
        if (undefined === c) {
          c = 0;
        }
        if (undefined === l) {
          l = 1;
        }
        this.m = undefined;
        if (t instanceof r.FLOAT_ARRAY_TYPE) {
          this.m = t;
        } else {
          this.m = new r.FLOAT_ARRAY_TYPE(9);
          var h = this.m;
          h[0] = t;
          h[1] = e;
          h[2] = i;
          h[3] = n;
          h[4] = s;
          h[5] = a;
          h[6] = o;
          h[7] = c;
          h[8] = l;
        }
      }
      t.create = function (e, i, n, r, s, a, o, c, l) {
        if (undefined === e) {
          e = 1;
        }
        if (undefined === i) {
          i = 0;
        }
        if (undefined === n) {
          n = 0;
        }
        if (undefined === r) {
          r = 0;
        }
        if (undefined === s) {
          s = 1;
        }
        if (undefined === a) {
          a = 0;
        }
        if (undefined === o) {
          o = 0;
        }
        if (undefined === c) {
          c = 0;
        }
        if (undefined === l) {
          l = 1;
        }
        return new t(e, i, n, r, s, a, o, c, l);
      };
      t.clone = function (e) {
        var i = e.m;
        return new t(i[0], i[1], i[2], i[3], i[4], i[5], i[6], i[7], i[8]);
      };
      t.copy = function (t, e) {
        t.m.set(e.m);
        return t;
      };
      t.set = function (t, e, i, n, r, s, a, o, c, l) {
        var h = t.m;
        h[0] = e;
        h[1] = i;
        h[2] = n;
        h[3] = r;
        h[4] = s;
        h[5] = a;
        h[6] = o;
        h[7] = c;
        h[8] = l;
        return t;
      };
      t.identity = function (t) {
        var e = t.m;
        e[0] = 1;
        e[1] = 0;
        e[2] = 0;
        e[3] = 0;
        e[4] = 1;
        e[5] = 0;
        e[6] = 0;
        e[7] = 0;
        e[8] = 1;
        return t;
      };
      t.transpose = function (t, e) {
        var i = e.m;
        var n = t.m;
        if (t === e) {
          var r = i[1];
          var s = i[2];
          var a = i[5];
          n[1] = i[3];
          n[2] = i[6];
          n[3] = r;
          n[5] = i[7];
          n[6] = s;
          n[7] = a;
        } else {
          n[0] = i[0];
          n[1] = i[3];
          n[2] = i[6];
          n[3] = i[1];
          n[4] = i[4];
          n[5] = i[7];
          n[6] = i[2];
          n[7] = i[5];
          n[8] = i[8];
        }
        return t;
      };
      t.invert = function (t, e) {
        var i = e.m;
        var n = t.m;
        var r = i[0];
        var s = i[1];
        var a = i[2];
        var o = i[3];
        var c = i[4];
        var l = i[5];
        var h = i[6];
        var u = i[7];
        var f = i[8];
        var d = f * c - l * u;
        var _ = -f * o + l * h;
        var p = u * o - c * h;
        var v = r * d + s * _ + a * p;
        return v ? (v = 1 / v, n[0] = d * v, n[1] = (-f * s + a * u) * v, n[2] = (l * s - a * c) * v, n[3] = _ * v, n[4] = (f * r - a * h) * v, n[5] = (-l * r + a * o) * v, n[6] = p * v, n[7] = (-u * r + s * h) * v, n[8] = (c * r - s * o) * v, t) : t;
      };
      t.adjoint = function (t, e) {
        var i = e.m;
        var n = t.m;
        var r = i[0];
        var s = i[1];
        var a = i[2];
        var o = i[3];
        var c = i[4];
        var l = i[5];
        var h = i[6];
        var u = i[7];
        var f = i[8];
        n[0] = c * f - l * u;
        n[1] = a * u - s * f;
        n[2] = s * l - a * c;
        n[3] = l * h - o * f;
        n[4] = r * f - a * h;
        n[5] = a * o - r * l;
        n[6] = o * u - c * h;
        n[7] = s * h - r * u;
        n[8] = r * c - s * o;
        return t;
      };
      t.determinant = function (t) {
        var e = t.m;
        var i = e[0];
        var n = e[1];
        var r = e[2];
        var s = e[3];
        var a = e[4];
        var o = e[5];
        var c = e[6];
        var l = e[7];
        var h = e[8];
        return i * (h * a - o * l) + n * (-h * s + o * c) + r * (l * s - a * c);
      };
      t.multiply = function (t, e, i) {
        var n = e.m;
        var r = i.m;
        var s = t.m;
        var a = n[0];
        var o = n[1];
        var c = n[2];
        var l = n[3];
        var h = n[4];
        var u = n[5];
        var f = n[6];
        var d = n[7];
        var _ = n[8];
        var p = r[0];
        var v = r[1];
        var g = r[2];
        var m = r[3];
        var y = r[4];
        var T = r[5];
        var E = r[6];
        var A = r[7];
        var x = r[8];
        s[0] = p * a + v * l + g * f;
        s[1] = p * o + v * h + g * d;
        s[2] = p * c + v * u + g * _;
        s[3] = m * a + y * l + T * f;
        s[4] = m * o + y * h + T * d;
        s[5] = m * c + y * u + T * _;
        s[6] = E * a + A * l + x * f;
        s[7] = E * o + A * h + x * d;
        s[8] = E * c + A * u + x * _;
        return t;
      };
      t.multiplyMat4 = function (t, e, i) {
        var n = e.m;
        var r = i.m;
        var s = t.m;
        var a = n[0];
        var o = n[1];
        var c = n[2];
        var l = n[3];
        var h = n[4];
        var u = n[5];
        var f = n[6];
        var d = n[7];
        var _ = n[8];
        var p = r[0];
        var v = r[1];
        var g = r[2];
        var m = r[4];
        var y = r[5];
        var T = r[6];
        var E = r[8];
        var A = r[9];
        var x = r[10];
        s[0] = p * a + v * l + g * f;
        s[1] = p * o + v * h + g * d;
        s[2] = p * c + v * u + g * _;
        s[3] = m * a + y * l + T * f;
        s[4] = m * o + y * h + T * d;
        s[5] = m * c + y * u + T * _;
        s[6] = E * a + A * l + x * f;
        s[7] = E * o + A * h + x * d;
        s[8] = E * c + A * u + x * _;
        return t;
      };
      t.translate = function (t, e, i) {
        var n = e.m;
        var r = t.m;
        var s = n[0];
        var a = n[1];
        var o = n[2];
        var c = n[3];
        var l = n[4];
        var h = n[5];
        var u = n[6];
        var f = n[7];
        var d = n[8];
        var _ = i.x;
        var p = i.y;
        r[0] = s;
        r[1] = a;
        r[2] = o;
        r[3] = c;
        r[4] = l;
        r[5] = h;
        r[6] = _ * s + p * c + u;
        r[7] = _ * a + p * l + f;
        r[8] = _ * o + p * h + d;
        return t;
      };
      t.rotate = function (t, e, i) {
        var n = e.m;
        var r = t.m;
        var s = n[0];
        var a = n[1];
        var o = n[2];
        var c = n[3];
        var l = n[4];
        var h = n[5];
        var u = n[6];
        var f = n[7];
        var d = n[8];
        var _ = Math.sin(i);
        var p = Math.cos(i);
        r[0] = p * s + _ * c;
        r[1] = p * a + _ * l;
        r[2] = p * o + _ * h;
        r[3] = p * c - _ * s;
        r[4] = p * l - _ * a;
        r[5] = p * h - _ * o;
        r[6] = u;
        r[7] = f;
        r[8] = d;
        return t;
      };
      t.scale = function (t, e, i) {
        var n = i.x;
        var r = i.y;
        var s = e.m;
        var a = t.m;
        a[0] = n * s[0];
        a[1] = n * s[1];
        a[2] = n * s[2];
        a[3] = r * s[3];
        a[4] = r * s[4];
        a[5] = r * s[5];
        a[6] = s[6];
        a[7] = s[7];
        a[8] = s[8];
        return t;
      };
      t.fromMat4 = function (t, e) {
        var i = e.m;
        var n = t.m;
        n[0] = i[0];
        n[1] = i[1];
        n[2] = i[2];
        n[3] = i[4];
        n[4] = i[5];
        n[5] = i[6];
        n[6] = i[8];
        n[7] = i[9];
        n[8] = i[10];
        return t;
      };
      t.fromTranslation = function (t, e) {
        var i = t.m;
        i[0] = 1;
        i[1] = 0;
        i[2] = 0;
        i[3] = 0;
        i[4] = 1;
        i[5] = 0;
        i[6] = e.x;
        i[7] = e.y;
        i[8] = 1;
        return t;
      };
      t.fromRotation = function (t, e) {
        var i = Math.sin(e);
        var n = Math.cos(e);
        var r = t.m;
        r[0] = n;
        r[1] = i;
        r[2] = 0;
        r[3] = -i;
        r[4] = n;
        r[5] = 0;
        r[6] = 0;
        r[7] = 0;
        r[8] = 1;
        return t;
      };
      t.fromScaling = function (t, e) {
        var i = t.m;
        i[0] = e.x;
        i[1] = 0;
        i[2] = 0;
        i[3] = 0;
        i[4] = e.y;
        i[5] = 0;
        i[6] = 0;
        i[7] = 0;
        i[8] = 1;
        return t;
      };
      t.fromQuat = function (t, e) {
        var i = t.m;
        var n = e.x;
        var r = e.y;
        var s = e.z;
        var a = e.w;
        var o = n + n;
        var c = r + r;
        var l = s + s;
        var h = n * o;
        var u = r * o;
        var f = r * c;
        var d = s * o;
        var _ = s * c;
        var p = s * l;
        var v = a * o;
        var g = a * c;
        var m = a * l;
        i[0] = 1 - f - p;
        i[3] = u - m;
        i[6] = d + g;
        i[1] = u + m;
        i[4] = 1 - h - p;
        i[7] = _ - v;
        i[2] = d - g;
        i[5] = _ + v;
        i[8] = 1 - h - f;
        return t;
      };
      t.fromViewUp = function (e, i, n) {
        var a;
        var o;
        var c;
        a = new s.default(0, 1, 0);
        o = new s.default();
        c = new s.default();
        return function (e, i, n) {
          return s.default.lengthSqr(i) < r.EPSILON * r.EPSILON ? (t.identity(e), e) : (n = n || a, s.default.normalize(o, s.default.cross(o, n, i)), s.default.lengthSqr(o) < r.EPSILON * r.EPSILON ? (t.identity(e), e) : (s.default.cross(c, i, o), t.set(e, o.x, o.y, o.z, c.x, c.y, c.z, i.x, i.y, i.z), e));
        }(e, i, n);
      };
      t.normalFromMat4 = function (t, e) {
        var i = e.m;
        var n = t.m;
        var r = i[0];
        var s = i[1];
        var a = i[2];
        var o = i[3];
        var c = i[4];
        var l = i[5];
        var h = i[6];
        var u = i[7];
        var f = i[8];
        var d = i[9];
        var _ = i[10];
        var p = i[11];
        var v = i[12];
        var g = i[13];
        var m = i[14];
        var y = i[15];
        var T = r * l - s * c;
        var E = r * h - a * c;
        var A = r * u - o * c;
        var x = s * h - a * l;
        var C = s * u - o * l;
        var b = a * u - o * h;
        var S = f * g - d * v;
        var R = f * m - _ * v;
        var M = f * y - p * v;
        var w = d * m - _ * g;
        var I = d * y - p * g;
        var O = _ * y - p * m;
        var L = T * O - E * I + A * w + x * M - C * R + b * S;
        return L ? (L = 1 / L, n[0] = (l * O - h * I + u * w) * L, n[1] = (h * M - c * O - u * R) * L, n[2] = (c * I - l * M + u * S) * L, n[3] = (a * I - s * O - o * w) * L, n[4] = (r * O - a * M + o * R) * L, n[5] = (s * M - r * I - o * S) * L, n[6] = (g * b - m * C + y * x) * L, n[7] = (m * A - v * b - y * E) * L, n[8] = (v * C - g * A + y * T) * L, t) : t;
      };
      t.frob = function (t) {
        var e = t.m;
        return Math.sqrt(Math.pow(e[0], 2) + Math.pow(e[1], 2) + Math.pow(e[2], 2) + Math.pow(e[3], 2) + Math.pow(e[4], 2) + Math.pow(e[5], 2) + Math.pow(e[6], 2) + Math.pow(e[7], 2) + Math.pow(e[8], 2));
      };
      t.add = function (t, e, i) {
        var n = e.m;
        var r = i.m;
        var s = t.m;
        s[0] = n[0] + r[0];
        s[1] = n[1] + r[1];
        s[2] = n[2] + r[2];
        s[3] = n[3] + r[3];
        s[4] = n[4] + r[4];
        s[5] = n[5] + r[5];
        s[6] = n[6] + r[6];
        s[7] = n[7] + r[7];
        s[8] = n[8] + r[8];
        return t;
      };
      t.subtract = function (t, e, i) {
        var n = e.m;
        var r = i.m;
        var s = t.m;
        s[0] = n[0] - r[0];
        s[1] = n[1] - r[1];
        s[2] = n[2] - r[2];
        s[3] = n[3] - r[3];
        s[4] = n[4] - r[4];
        s[5] = n[5] - r[5];
        s[6] = n[6] - r[6];
        s[7] = n[7] - r[7];
        s[8] = n[8] - r[8];
        return t;
      };
      t.multiplyScalar = function (t, e, i) {
        var n = e.m;
        var r = t.m;
        r[0] = n[0] * i;
        r[1] = n[1] * i;
        r[2] = n[2] * i;
        r[3] = n[3] * i;
        r[4] = n[4] * i;
        r[5] = n[5] * i;
        r[6] = n[6] * i;
        r[7] = n[7] * i;
        r[8] = n[8] * i;
        return t;
      };
      t.multiplyScalarAndAdd = function (t, e, i, n) {
        var r = e.m;
        var s = i.m;
        var a = t.m;
        a[0] = r[0] + s[0] * n;
        a[1] = r[1] + s[1] * n;
        a[2] = r[2] + s[2] * n;
        a[3] = r[3] + s[3] * n;
        a[4] = r[4] + s[4] * n;
        a[5] = r[5] + s[5] * n;
        a[6] = r[6] + s[6] * n;
        a[7] = r[7] + s[7] * n;
        a[8] = r[8] + s[8] * n;
        return t;
      };
      t.exactEquals = function (t, e) {
        var i = t.m;
        var n = e.m;
        return i[0] === n[0] && i[1] === n[1] && i[2] === n[2] && i[3] === n[3] && i[4] === n[4] && i[5] === n[5] && i[6] === n[6] && i[7] === n[7] && i[8] === n[8];
      };
      t.equals = function (t, e) {
        var i = t.m;
        var n = e.m;
        var s = i[0];
        var a = i[1];
        var o = i[2];
        var c = i[3];
        var l = i[4];
        var h = i[5];
        var u = i[6];
        var f = i[7];
        var d = i[8];
        var _ = n[0];
        var p = n[1];
        var v = n[2];
        var g = n[3];
        var m = n[4];
        var y = n[5];
        var T = n[6];
        var E = n[7];
        var A = n[8];
        return Math.abs(s - _) <= r.EPSILON * Math.max(1, Math.abs(s), Math.abs(_)) && Math.abs(a - p) <= r.EPSILON * Math.max(1, Math.abs(a), Math.abs(p)) && Math.abs(o - v) <= r.EPSILON * Math.max(1, Math.abs(o), Math.abs(v)) && Math.abs(c - g) <= r.EPSILON * Math.max(1, Math.abs(c), Math.abs(g)) && Math.abs(l - m) <= r.EPSILON * Math.max(1, Math.abs(l), Math.abs(m)) && Math.abs(h - y) <= r.EPSILON * Math.max(1, Math.abs(h), Math.abs(y)) && Math.abs(u - T) <= r.EPSILON * Math.max(1, Math.abs(u), Math.abs(T)) && Math.abs(f - E) <= r.EPSILON * Math.max(1, Math.abs(f), Math.abs(E)) && Math.abs(d - A) <= r.EPSILON * Math.max(1, Math.abs(d), Math.abs(A));
      };
      t.toArray = function (t, e, i) {
        if (undefined === i) {
          i = 0;
        }
        var n = e.m;
        for (var r = 0; r < 9; r++) {
          t[i + r] = n[r];
        }
        return t;
      };
      t.fromArray = function (t, e, i) {
        if (undefined === i) {
          i = 0;
        }
        var n = t.m;
        for (var r = 0; r < 9; r++) {
          n[r] = e[i + r];
        }
        return t;
      };
      t.prototype.toString = function () {
        var t = this.m;
        return "mat3(" + t[0] + ", " + t[1] + ", " + t[2] + ", " + t[3] + ", " + t[4] + ", " + t[5] + ", " + t[6] + ", " + t[7] + ", " + t[8] + ")";
      };
      return t;
    }();
    i.default = a;
    a.sub = a.subtract;
    a.mul = a.multiply;
    a.IDENTITY = Object.freeze(new a());
    cc.Mat3 = a;
    e.exports = i.default;
  }, {
    "../value-types/utils": 258,
    "./vec3": 261
  }],
  253: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n = t("./value-type") && t("./value-type").__esModule ? t("./value-type") : {
      default: t("./value-type")
    };
    var r = t("../platform/CCClass") && t("../platform/CCClass").__esModule ? t("../platform/CCClass") : {
      default: t("../platform/CCClass")
    };
    var s = t("./vec3") && t("./vec3").__esModule ? t("./vec3") : {
      default: t("./vec3")
    };
    var a = t("./quat") && t("./quat").__esModule ? t("./quat") : {
      default: t("./quat")
    };
    var o = t("./utils");
    var c = t("./mat3") && t("./mat3").__esModule ? t("./mat3") : {
      default: t("./mat3")
    };
    function h(t, e) {
      return (h = Object.setPrototypeOf || function (t, e) {
        t.__proto__ = e;
        return t;
      })(t, e);
    }
    var u = 0;
    var f = 0;
    var d = 0;
    var _ = 0;
    var p = 0;
    var v = 0;
    var g = 0;
    var m = 0;
    var y = 0;
    var T = 0;
    var E = 0;
    var A = 0;
    var x = 0;
    var C = 0;
    var b = 0;
    var S = 0;
    var R = function (t) {
      r.prototype = Object.create(t.prototype);
      r.prototype.constructor = r;
      h(r, t);
      var n = r.prototype;
      function r(e, i, n, r, s, a, c, l, h, u, f, d, _, p, v, g) {
        var m;
        if (undefined === e) {
          e = 1;
        }
        if (undefined === i) {
          i = 0;
        }
        if (undefined === n) {
          n = 0;
        }
        if (undefined === r) {
          r = 0;
        }
        if (undefined === s) {
          s = 0;
        }
        if (undefined === a) {
          a = 1;
        }
        if (undefined === c) {
          c = 0;
        }
        if (undefined === l) {
          l = 0;
        }
        if (undefined === h) {
          h = 0;
        }
        if (undefined === u) {
          u = 0;
        }
        if (undefined === f) {
          f = 1;
        }
        if (undefined === d) {
          d = 0;
        }
        if (undefined === _) {
          _ = 0;
        }
        if (undefined === p) {
          p = 0;
        }
        if (undefined === v) {
          v = 0;
        }
        if (undefined === g) {
          g = 1;
        }
        (m = t.call(this) || this).m = undefined;
        if (e instanceof o.FLOAT_ARRAY_TYPE) {
          m.m = e;
        } else {
          m.m = new o.FLOAT_ARRAY_TYPE(16);
          var y = m.m;
          y[0] = e;
          y[1] = i;
          y[2] = n;
          y[3] = r;
          y[4] = s;
          y[5] = a;
          y[6] = c;
          y[7] = l;
          y[8] = h;
          y[9] = u;
          y[10] = f;
          y[11] = d;
          y[12] = _;
          y[13] = p;
          y[14] = v;
          y[15] = g;
        }
        return m;
      }
      n.mul = function (t, e) {
        return r.multiply(e || new r(), this, t);
      };
      n.mulScalar = function (t, e) {
        r.multiplyScalar(e || new r(), this, t);
      };
      n.sub = function (t, e) {
        r.subtract(e || new r(), this, t);
      };
      r.clone = function (t) {
        var e = t.m;
        return new r(e[0], e[1], e[2], e[3], e[4], e[5], e[6], e[7], e[8], e[9], e[10], e[11], e[12], e[13], e[14], e[15]);
      };
      r.copy = function (t, e) {
        var i = t.m;
        var n = e.m;
        i[0] = n[0];
        i[1] = n[1];
        i[2] = n[2];
        i[3] = n[3];
        i[4] = n[4];
        i[5] = n[5];
        i[6] = n[6];
        i[7] = n[7];
        i[8] = n[8];
        i[9] = n[9];
        i[10] = n[10];
        i[11] = n[11];
        i[12] = n[12];
        i[13] = n[13];
        i[14] = n[14];
        i[15] = n[15];
        return t;
      };
      r.set = function (t, e, i, n, r, s, a, o, c, l, h, u, f, d, _, p, v) {
        var g = t.m;
        g[0] = e;
        g[1] = i;
        g[2] = n;
        g[3] = r;
        g[4] = s;
        g[5] = a;
        g[6] = o;
        g[7] = c;
        g[8] = l;
        g[9] = h;
        g[10] = u;
        g[11] = f;
        g[12] = d;
        g[13] = _;
        g[14] = p;
        g[15] = v;
        return t;
      };
      r.identity = function (t) {
        var e = t.m;
        e[0] = 1;
        e[1] = 0;
        e[2] = 0;
        e[3] = 0;
        e[4] = 0;
        e[5] = 1;
        e[6] = 0;
        e[7] = 0;
        e[8] = 0;
        e[9] = 0;
        e[10] = 1;
        e[11] = 0;
        e[12] = 0;
        e[13] = 0;
        e[14] = 0;
        e[15] = 1;
        return t;
      };
      r.transpose = function (t, e) {
        var i = t.m;
        var n = e.m;
        if (t === e) {
          var r = n[1];
          var s = n[2];
          var a = n[3];
          var o = n[6];
          var c = n[7];
          var l = n[11];
          i[1] = n[4];
          i[2] = n[8];
          i[3] = n[12];
          i[4] = r;
          i[6] = n[9];
          i[7] = n[13];
          i[8] = s;
          i[9] = o;
          i[11] = n[14];
          i[12] = a;
          i[13] = c;
          i[14] = l;
        } else {
          i[0] = n[0];
          i[1] = n[4];
          i[2] = n[8];
          i[3] = n[12];
          i[4] = n[1];
          i[5] = n[5];
          i[6] = n[9];
          i[7] = n[13];
          i[8] = n[2];
          i[9] = n[6];
          i[10] = n[10];
          i[11] = n[14];
          i[12] = n[3];
          i[13] = n[7];
          i[14] = n[11];
          i[15] = n[15];
        }
        return t;
      };
      r.invert = function (t, e) {
        var i = e.m;
        u = i[0];
        f = i[1];
        d = i[2];
        _ = i[3];
        p = i[4];
        v = i[5];
        g = i[6];
        m = i[7];
        y = i[8];
        T = i[9];
        E = i[10];
        A = i[11];
        x = i[12];
        C = i[13];
        b = i[14];
        S = i[15];
        var n = u * v - f * p;
        var r = u * g - d * p;
        var s = u * m - _ * p;
        var a = f * g - d * v;
        var o = f * m - _ * v;
        var c = d * m - _ * g;
        var l = y * C - T * x;
        var h = y * b - E * x;
        var R = y * S - A * x;
        var M = T * b - E * C;
        var w = T * S - A * C;
        var I = E * S - A * b;
        var O = n * I - r * w + s * M + a * R - o * h + c * l;
        if (0 === O) {
          return null;
        }
        O = 1 / O;
        var L = t.m;
        L[0] = (v * I - g * w + m * M) * O;
        L[1] = (d * w - f * I - _ * M) * O;
        L[2] = (C * c - b * o + S * a) * O;
        L[3] = (E * o - T * c - A * a) * O;
        L[4] = (g * R - p * I - m * h) * O;
        L[5] = (u * I - d * R + _ * h) * O;
        L[6] = (b * s - x * c - S * r) * O;
        L[7] = (y * c - E * s + A * r) * O;
        L[8] = (p * w - v * R + m * l) * O;
        L[9] = (f * R - u * w - _ * l) * O;
        L[10] = (x * o - C * s + S * n) * O;
        L[11] = (T * s - y * o - A * n) * O;
        L[12] = (v * h - p * M - g * l) * O;
        L[13] = (u * M - f * h + d * l) * O;
        L[14] = (C * r - x * a - b * n) * O;
        L[15] = (y * a - T * r + E * n) * O;
        return t;
      };
      r.determinant = function (t) {
        var e = t.m;
        u = e[0];
        f = e[1];
        d = e[2];
        _ = e[3];
        p = e[4];
        v = e[5];
        g = e[6];
        m = e[7];
        y = e[8];
        T = e[9];
        E = e[10];
        A = e[11];
        x = e[12];
        C = e[13];
        b = e[14];
        S = e[15];
        return (u * v - f * p) * (E * S - A * b) - (u * g - d * p) * (T * S - A * C) + (u * m - _ * p) * (T * b - E * C) + (f * g - d * v) * (y * S - A * x) - (f * m - _ * v) * (y * b - E * x) + (d * m - _ * g) * (y * C - T * x);
      };
      r.multiply = function (t, e, i) {
        var n = t.m;
        var r = e.m;
        var s = i.m;
        u = r[0];
        f = r[1];
        d = r[2];
        _ = r[3];
        p = r[4];
        v = r[5];
        g = r[6];
        m = r[7];
        y = r[8];
        T = r[9];
        E = r[10];
        A = r[11];
        x = r[12];
        C = r[13];
        b = r[14];
        S = r[15];
        var a = s[0];
        var o = s[1];
        var c = s[2];
        var l = s[3];
        n[0] = a * u + o * p + c * y + l * x;
        n[1] = a * f + o * v + c * T + l * C;
        n[2] = a * d + o * g + c * E + l * b;
        n[3] = a * _ + o * m + c * A + l * S;
        a = s[4];
        o = s[5];
        c = s[6];
        l = s[7];
        n[4] = a * u + o * p + c * y + l * x;
        n[5] = a * f + o * v + c * T + l * C;
        n[6] = a * d + o * g + c * E + l * b;
        n[7] = a * _ + o * m + c * A + l * S;
        a = s[8];
        o = s[9];
        c = s[10];
        l = s[11];
        n[8] = a * u + o * p + c * y + l * x;
        n[9] = a * f + o * v + c * T + l * C;
        n[10] = a * d + o * g + c * E + l * b;
        n[11] = a * _ + o * m + c * A + l * S;
        a = s[12];
        o = s[13];
        c = s[14];
        l = s[15];
        n[12] = a * u + o * p + c * y + l * x;
        n[13] = a * f + o * v + c * T + l * C;
        n[14] = a * d + o * g + c * E + l * b;
        n[15] = a * _ + o * m + c * A + l * S;
        return t;
      };
      r.transform = function (t, e, i) {
        var n = i.x;
        var r = i.y;
        var s = i.z;
        var a = t.m;
        var o = e.m;
        if (e === t) {
          a[12] = o[0] * n + o[4] * r + o[8] * s + o[12];
          a[13] = o[1] * n + o[5] * r + o[9] * s + o[13];
          a[14] = o[2] * n + o[6] * r + o[10] * s + o[14];
          a[15] = o[3] * n + o[7] * r + o[11] * s + o[15];
        } else {
          u = o[0];
          f = o[1];
          d = o[2];
          _ = o[3];
          p = o[4];
          v = o[5];
          g = o[6];
          m = o[7];
          y = o[8];
          T = o[9];
          E = o[10];
          A = o[11];
          x = o[12];
          C = o[13];
          b = o[14];
          S = o[15];
          a[0] = u;
          a[1] = f;
          a[2] = d;
          a[3] = _;
          a[4] = p;
          a[5] = v;
          a[6] = g;
          a[7] = m;
          a[8] = y;
          a[9] = T;
          a[10] = E;
          a[11] = A;
          a[12] = u * n + p * r + y * s + o[12];
          a[13] = f * n + v * r + T * s + o[13];
          a[14] = d * n + g * r + E * s + o[14];
          a[15] = _ * n + m * r + A * s + o[15];
        }
        return t;
      };
      r.translate = function (t, e, i) {
        var n = t.m;
        var r = e.m;
        if (e === t) {
          n[12] += i.x;
          n[13] += i.y;
          n[14] += i.z;
        } else {
          n[0] = r[0];
          n[1] = r[1];
          n[2] = r[2];
          n[3] = r[3];
          n[4] = r[4];
          n[5] = r[5];
          n[6] = r[6];
          n[7] = r[7];
          n[8] = r[8];
          n[9] = r[9];
          n[10] = r[10];
          n[11] = r[11];
          n[12] += i.x;
          n[13] += i.y;
          n[14] += i.z;
          n[15] = r[15];
        }
        return t;
      };
      r.scale = function (t, e, i) {
        var n = i.x;
        var r = i.y;
        var s = i.z;
        var a = t.m;
        var o = e.m;
        a[0] = o[0] * n;
        a[1] = o[1] * n;
        a[2] = o[2] * n;
        a[3] = o[3] * n;
        a[4] = o[4] * r;
        a[5] = o[5] * r;
        a[6] = o[6] * r;
        a[7] = o[7] * r;
        a[8] = o[8] * s;
        a[9] = o[9] * s;
        a[10] = o[10] * s;
        a[11] = o[11] * s;
        a[12] = o[12];
        a[13] = o[13];
        a[14] = o[14];
        a[15] = o[15];
        return t;
      };
      r.rotate = function (t, e, i, n) {
        var r = n.x;
        var s = n.y;
        var a = n.z;
        var c = Math.sqrt(r * r + s * s + a * a);
        if (Math.abs(c) < o.EPSILON) {
          return null;
        }
        r *= c = 1 / c;
        s *= c;
        a *= c;
        var l = Math.sin(i);
        var h = Math.cos(i);
        var x = 1 - h;
        var C = e.m;
        u = C[0];
        f = C[1];
        d = C[2];
        _ = C[3];
        p = C[4];
        v = C[5];
        g = C[6];
        m = C[7];
        y = C[8];
        T = C[9];
        E = C[10];
        A = C[11];
        var b = r * r * x + h;
        var S = s * r * x + a * l;
        var R = a * r * x - s * l;
        var M = r * s * x - a * l;
        var w = s * s * x + h;
        var I = a * s * x + r * l;
        var O = r * a * x + s * l;
        var L = s * a * x - r * l;
        var P = a * a * x + h;
        var D = t.m;
        D[0] = u * b + p * S + y * R;
        D[1] = f * b + v * S + T * R;
        D[2] = d * b + g * S + E * R;
        D[3] = _ * b + m * S + A * R;
        D[4] = u * M + p * w + y * I;
        D[5] = f * M + v * w + T * I;
        D[6] = d * M + g * w + E * I;
        D[7] = _ * M + m * w + A * I;
        D[8] = u * O + p * L + y * P;
        D[9] = f * O + v * L + T * P;
        D[10] = d * O + g * L + E * P;
        D[11] = _ * O + m * L + A * P;
        if (e !== t) {
          D[12] = C[12];
          D[13] = C[13];
          D[14] = C[14];
          D[15] = C[15];
        }
        return t;
      };
      r.rotateX = function (t, e, i) {
        var n = t.m;
        var r = e.m;
        var s = Math.sin(i);
        var a = Math.cos(i);
        var o = r[4];
        var c = r[5];
        var l = r[6];
        var h = r[7];
        var u = r[8];
        var f = r[9];
        var d = r[10];
        var _ = r[11];
        if (e !== t) {
          n[0] = r[0];
          n[1] = r[1];
          n[2] = r[2];
          n[3] = r[3];
          n[12] = r[12];
          n[13] = r[13];
          n[14] = r[14];
          n[15] = r[15];
        }
        n[4] = o * a + u * s;
        n[5] = c * a + f * s;
        n[6] = l * a + d * s;
        n[7] = h * a + _ * s;
        n[8] = u * a - o * s;
        n[9] = f * a - c * s;
        n[10] = d * a - l * s;
        n[11] = _ * a - h * s;
        return t;
      };
      r.rotateY = function (t, e, i) {
        var n = t.m;
        var r = e.m;
        var s = Math.sin(i);
        var a = Math.cos(i);
        var o = r[0];
        var c = r[1];
        var l = r[2];
        var h = r[3];
        var u = r[8];
        var f = r[9];
        var d = r[10];
        var _ = r[11];
        if (e !== t) {
          n[4] = r[4];
          n[5] = r[5];
          n[6] = r[6];
          n[7] = r[7];
          n[12] = r[12];
          n[13] = r[13];
          n[14] = r[14];
          n[15] = r[15];
        }
        n[0] = o * a - u * s;
        n[1] = c * a - f * s;
        n[2] = l * a - d * s;
        n[3] = h * a - _ * s;
        n[8] = o * s + u * a;
        n[9] = c * s + f * a;
        n[10] = l * s + d * a;
        n[11] = h * s + _ * a;
        return t;
      };
      r.rotateZ = function (t, e, i) {
        var n = e.m;
        var r = t.m;
        var s = Math.sin(i);
        var a = Math.cos(i);
        var o = e.m[0];
        var c = e.m[1];
        var l = e.m[2];
        var h = e.m[3];
        var u = e.m[4];
        var f = e.m[5];
        var d = e.m[6];
        var _ = e.m[7];
        if (e !== t) {
          r[8] = n[8];
          r[9] = n[9];
          r[10] = n[10];
          r[11] = n[11];
          r[12] = n[12];
          r[13] = n[13];
          r[14] = n[14];
          r[15] = n[15];
        }
        r[0] = o * a + u * s;
        r[1] = c * a + f * s;
        r[2] = l * a + d * s;
        r[3] = h * a + _ * s;
        r[4] = u * a - o * s;
        r[5] = f * a - c * s;
        r[6] = d * a - l * s;
        r[7] = _ * a - h * s;
        return t;
      };
      r.fromTranslation = function (t, e) {
        var i = t.m;
        i[0] = 1;
        i[1] = 0;
        i[2] = 0;
        i[3] = 0;
        i[4] = 0;
        i[5] = 1;
        i[6] = 0;
        i[7] = 0;
        i[8] = 0;
        i[9] = 0;
        i[10] = 1;
        i[11] = 0;
        i[12] = e.x;
        i[13] = e.y;
        i[14] = e.z;
        i[15] = 1;
        return t;
      };
      r.fromScaling = function (t, e) {
        var i = t.m;
        i[0] = e.x;
        i[1] = 0;
        i[2] = 0;
        i[3] = 0;
        i[4] = 0;
        i[5] = e.y;
        i[6] = 0;
        i[7] = 0;
        i[8] = 0;
        i[9] = 0;
        i[10] = e.z;
        i[11] = 0;
        i[12] = 0;
        i[13] = 0;
        i[14] = 0;
        i[15] = 1;
        return t;
      };
      r.fromRotation = function (t, e, i) {
        var n = i.x;
        var r = i.y;
        var s = i.z;
        var a = Math.sqrt(n * n + r * r + s * s);
        if (Math.abs(a) < o.EPSILON) {
          return null;
        }
        n *= a = 1 / a;
        r *= a;
        s *= a;
        var c = Math.sin(e);
        var l = Math.cos(e);
        var h = 1 - l;
        var u = t.m;
        u[0] = n * n * h + l;
        u[1] = r * n * h + s * c;
        u[2] = s * n * h - r * c;
        u[3] = 0;
        u[4] = n * r * h - s * c;
        u[5] = r * r * h + l;
        u[6] = s * r * h + n * c;
        u[7] = 0;
        u[8] = n * s * h + r * c;
        u[9] = r * s * h - n * c;
        u[10] = s * s * h + l;
        u[11] = 0;
        u[12] = 0;
        u[13] = 0;
        u[14] = 0;
        u[15] = 1;
        return t;
      };
      r.fromXRotation = function (t, e) {
        var i = Math.sin(e);
        var n = Math.cos(e);
        var r = t.m;
        r[0] = 1;
        r[1] = 0;
        r[2] = 0;
        r[3] = 0;
        r[4] = 0;
        r[5] = n;
        r[6] = i;
        r[7] = 0;
        r[8] = 0;
        r[9] = -i;
        r[10] = n;
        r[11] = 0;
        r[12] = 0;
        r[13] = 0;
        r[14] = 0;
        r[15] = 1;
        return t;
      };
      r.fromYRotation = function (t, e) {
        var i = Math.sin(e);
        var n = Math.cos(e);
        var r = t.m;
        r[0] = n;
        r[1] = 0;
        r[2] = -i;
        r[3] = 0;
        r[4] = 0;
        r[5] = 1;
        r[6] = 0;
        r[7] = 0;
        r[8] = i;
        r[9] = 0;
        r[10] = n;
        r[11] = 0;
        r[12] = 0;
        r[13] = 0;
        r[14] = 0;
        r[15] = 1;
        return t;
      };
      r.fromZRotation = function (t, e) {
        var i = Math.sin(e);
        var n = Math.cos(e);
        var r = t.m;
        r[0] = n;
        r[1] = i;
        r[2] = 0;
        r[3] = 0;
        r[4] = -i;
        r[5] = n;
        r[6] = 0;
        r[7] = 0;
        r[8] = 0;
        r[9] = 0;
        r[10] = 1;
        r[11] = 0;
        r[12] = 0;
        r[13] = 0;
        r[14] = 0;
        r[15] = 1;
        return t;
      };
      r.fromRT = function (t, e, i) {
        var n = e.x;
        var r = e.y;
        var s = e.z;
        var a = e.w;
        var o = n + n;
        var c = r + r;
        var l = s + s;
        var h = n * o;
        var u = n * c;
        var f = n * l;
        var d = r * c;
        var _ = r * l;
        var p = s * l;
        var v = a * o;
        var g = a * c;
        var m = a * l;
        var y = t.m;
        y[0] = 1 - (d + p);
        y[1] = u + m;
        y[2] = f - g;
        y[3] = 0;
        y[4] = u - m;
        y[5] = 1 - (h + p);
        y[6] = _ + v;
        y[7] = 0;
        y[8] = f + g;
        y[9] = _ - v;
        y[10] = 1 - (h + d);
        y[11] = 0;
        y[12] = i.x;
        y[13] = i.y;
        y[14] = i.z;
        y[15] = 1;
        return t;
      };
      r.getTranslation = function (t, e) {
        var i = e.m;
        t.x = i[12];
        t.y = i[13];
        t.z = i[14];
        return t;
      };
      r.getScaling = function (t, e) {
        var i = e.m;
        var n = w.m;
        var r = n[0] = i[0];
        var s = n[1] = i[1];
        var a = n[2] = i[2];
        var o = n[3] = i[4];
        var l = n[4] = i[5];
        var h = n[5] = i[6];
        var u = n[6] = i[8];
        var f = n[7] = i[9];
        var d = n[8] = i[10];
        t.x = Math.sqrt(r * r + s * s + a * a);
        t.y = Math.sqrt(o * o + l * l + h * h);
        t.z = Math.sqrt(u * u + f * f + d * d);
        if (c.default.determinant(w) < 0) {
          t.x *= -1;
        }
        return t;
      };
      r.getRotation = function (t, e) {
        var i = e.m;
        var n = i[0] + i[5] + i[10];
        var r = 0;
        if (n > 0) {
          r = 2 * Math.sqrt(n + 1);
          t.w = .25 * r;
          t.x = (i[6] - i[9]) / r;
          t.y = (i[8] - i[2]) / r;
          t.z = (i[1] - i[4]) / r;
        } else if (i[0] > i[5] && i[0] > i[10]) {
          r = 2 * Math.sqrt(1 + i[0] - i[5] - i[10]);
          t.w = (i[6] - i[9]) / r;
          t.x = .25 * r;
          t.y = (i[1] + i[4]) / r;
          t.z = (i[8] + i[2]) / r;
        } else if (i[5] > i[10]) {
          r = 2 * Math.sqrt(1 + i[5] - i[0] - i[10]);
          t.w = (i[8] - i[2]) / r;
          t.x = (i[1] + i[4]) / r;
          t.y = .25 * r;
          t.z = (i[6] + i[9]) / r;
        } else {
          r = 2 * Math.sqrt(1 + i[10] - i[0] - i[5]);
          t.w = (i[1] - i[4]) / r;
          t.x = (i[8] + i[2]) / r;
          t.y = (i[6] + i[9]) / r;
          t.z = .25 * r;
        }
        return t;
      };
      r.toRTS = function (t, e, i, n) {
        var r = t.m;
        var o = w.m;
        n.x = s.default.set(M, r[0], r[1], r[2]).mag();
        o[0] = r[0] / n.x;
        o[1] = r[1] / n.x;
        o[2] = r[2] / n.x;
        n.y = s.default.set(M, r[4], r[5], r[6]).mag();
        o[3] = r[4] / n.y;
        o[4] = r[5] / n.y;
        o[5] = r[6] / n.y;
        n.z = s.default.set(M, r[8], r[9], r[10]).mag();
        o[6] = r[8] / n.z;
        o[7] = r[9] / n.z;
        o[8] = r[10] / n.z;
        if (c.default.determinant(w) < 0) {
          n.x *= -1;
          o[0] *= -1;
          o[1] *= -1;
          o[2] *= -1;
        }
        a.default.fromMat3(e, w);
        s.default.set(i, r[12], r[13], r[14]);
      };
      r.fromRTS = function (t, e, i, n) {
        var r = e.x;
        var s = e.y;
        var a = e.z;
        var o = e.w;
        var c = r + r;
        var l = s + s;
        var h = a + a;
        var u = r * c;
        var f = r * l;
        var d = r * h;
        var _ = s * l;
        var p = s * h;
        var v = a * h;
        var g = o * c;
        var m = o * l;
        var y = o * h;
        var T = n.x;
        var E = n.y;
        var A = n.z;
        var x = t.m;
        x[0] = (1 - (_ + v)) * T;
        x[1] = (f + y) * T;
        x[2] = (d - m) * T;
        x[3] = 0;
        x[4] = (f - y) * E;
        x[5] = (1 - (u + v)) * E;
        x[6] = (p + g) * E;
        x[7] = 0;
        x[8] = (d + m) * A;
        x[9] = (p - g) * A;
        x[10] = (1 - (u + _)) * A;
        x[11] = 0;
        x[12] = i.x;
        x[13] = i.y;
        x[14] = i.z;
        x[15] = 1;
        return t;
      };
      r.fromRTSOrigin = function (t, e, i, n, r) {
        var s = e.x;
        var a = e.y;
        var o = e.z;
        var c = e.w;
        var l = s + s;
        var h = a + a;
        var u = o + o;
        var f = s * l;
        var d = s * h;
        var _ = s * u;
        var p = a * h;
        var v = a * u;
        var g = o * u;
        var m = c * l;
        var y = c * h;
        var T = c * u;
        var E = n.x;
        var A = n.y;
        var x = n.z;
        var C = r.x;
        var b = r.y;
        var S = r.z;
        var R = t.m;
        R[0] = (1 - (p + g)) * E;
        R[1] = (d + T) * E;
        R[2] = (_ - y) * E;
        R[3] = 0;
        R[4] = (d - T) * A;
        R[5] = (1 - (f + g)) * A;
        R[6] = (v + m) * A;
        R[7] = 0;
        R[8] = (_ + y) * x;
        R[9] = (v - m) * x;
        R[10] = (1 - (f + p)) * x;
        R[11] = 0;
        R[12] = i.x + C - (R[0] * C + R[4] * b + R[8] * S);
        R[13] = i.y + b - (R[1] * C + R[5] * b + R[9] * S);
        R[14] = i.z + S - (R[2] * C + R[6] * b + R[10] * S);
        R[15] = 1;
        return t;
      };
      r.fromQuat = function (t, e) {
        var i = e.x;
        var n = e.y;
        var r = e.z;
        var s = e.w;
        var a = i + i;
        var o = n + n;
        var c = r + r;
        var l = i * a;
        var h = n * a;
        var u = n * o;
        var f = r * a;
        var d = r * o;
        var _ = r * c;
        var p = s * a;
        var v = s * o;
        var g = s * c;
        var m = t.m;
        m[0] = 1 - u - _;
        m[1] = h + g;
        m[2] = f - v;
        m[3] = 0;
        m[4] = h - g;
        m[5] = 1 - l - _;
        m[6] = d + p;
        m[7] = 0;
        m[8] = f + v;
        m[9] = d - p;
        m[10] = 1 - l - u;
        m[11] = 0;
        m[12] = 0;
        m[13] = 0;
        m[14] = 0;
        m[15] = 1;
        return t;
      };
      r.frustum = function (t, e, i, n, r, s, a) {
        var o = 1 / (i - e);
        var c = 1 / (r - n);
        var l = 1 / (s - a);
        var h = t.m;
        h[0] = 2 * s * o;
        h[1] = 0;
        h[2] = 0;
        h[3] = 0;
        h[4] = 0;
        h[5] = 2 * s * c;
        h[6] = 0;
        h[7] = 0;
        h[8] = (i + e) * o;
        h[9] = (r + n) * c;
        h[10] = (a + s) * l;
        h[11] = -1;
        h[12] = 0;
        h[13] = 0;
        h[14] = a * s * 2 * l;
        h[15] = 0;
        return t;
      };
      r.perspective = function (t, e, i, n, r) {
        var s = 1 / Math.tan(e / 2);
        var a = 1 / (n - r);
        var o = t.m;
        o[0] = s / i;
        o[1] = 0;
        o[2] = 0;
        o[3] = 0;
        o[4] = 0;
        o[5] = s;
        o[6] = 0;
        o[7] = 0;
        o[8] = 0;
        o[9] = 0;
        o[10] = (r + n) * a;
        o[11] = -1;
        o[12] = 0;
        o[13] = 0;
        o[14] = 2 * r * n * a;
        o[15] = 0;
        return t;
      };
      r.ortho = function (t, e, i, n, r, s, a) {
        var o = 1 / (e - i);
        var c = 1 / (n - r);
        var l = 1 / (s - a);
        var h = t.m;
        h[0] = -2 * o;
        h[1] = 0;
        h[2] = 0;
        h[3] = 0;
        h[4] = 0;
        h[5] = -2 * c;
        h[6] = 0;
        h[7] = 0;
        h[8] = 0;
        h[9] = 0;
        h[10] = 2 * l;
        h[11] = 0;
        h[12] = (e + i) * o;
        h[13] = (r + n) * c;
        h[14] = (a + s) * l;
        h[15] = 1;
        return t;
      };
      r.lookAt = function (t, e, i, n) {
        var r = e.x;
        var s = e.y;
        var a = e.z;
        var o = n.x;
        var c = n.y;
        var l = n.z;
        var h = r - i.x;
        var u = s - i.y;
        var f = a - i.z;
        var d = 1 / Math.sqrt(h * h + u * u + f * f);
        var _ = c * (f *= d) - l * (u *= d);
        var p = l * (h *= d) - o * f;
        var v = o * u - c * h;
        var g = u * (v *= d = 1 / Math.sqrt(_ * _ + p * p + v * v)) - f * (p *= d);
        var m = f * (_ *= d) - h * v;
        var y = h * p - u * _;
        var T = t.m;
        T[0] = _;
        T[1] = g;
        T[2] = h;
        T[3] = 0;
        T[4] = p;
        T[5] = m;
        T[6] = u;
        T[7] = 0;
        T[8] = v;
        T[9] = y;
        T[10] = f;
        T[11] = 0;
        T[12] = -(_ * r + p * s + v * a);
        T[13] = -(g * r + m * s + y * a);
        T[14] = -(h * r + u * s + f * a);
        T[15] = 1;
        return t;
      };
      r.inverseTranspose = function (t, e) {
        var i = e.m;
        u = i[0];
        f = i[1];
        d = i[2];
        _ = i[3];
        p = i[4];
        v = i[5];
        g = i[6];
        m = i[7];
        y = i[8];
        T = i[9];
        E = i[10];
        A = i[11];
        x = i[12];
        C = i[13];
        b = i[14];
        S = i[15];
        var n = u * v - f * p;
        var r = u * g - d * p;
        var s = u * m - _ * p;
        var a = f * g - d * v;
        var o = f * m - _ * v;
        var c = d * m - _ * g;
        var l = y * C - T * x;
        var h = y * b - E * x;
        var R = y * S - A * x;
        var M = T * b - E * C;
        var w = T * S - A * C;
        var I = E * S - A * b;
        var O = n * I - r * w + s * M + a * R - o * h + c * l;
        return O ? (O = 1 / O, (i = t.m)[0] = (v * I - g * w + m * M) * O, i[1] = (g * R - p * I - m * h) * O, i[2] = (p * w - v * R + m * l) * O, i[3] = 0, i[4] = (d * w - f * I - _ * M) * O, i[5] = (u * I - d * R + _ * h) * O, i[6] = (f * R - u * w - _ * l) * O, i[7] = 0, i[8] = (C * c - b * o + S * a) * O, i[9] = (b * s - x * c - S * r) * O, i[10] = (x * o - C * s + S * n) * O, i[11] = 0, i[12] = 0, i[13] = 0, i[14] = 0, i[15] = 1, t) : null;
      };
      r.add = function (t, e, i) {
        var n = t.m;
        var r = e.m;
        var s = i.m;
        n[0] = r[0] + s[0];
        n[1] = r[1] + s[1];
        n[2] = r[2] + s[2];
        n[3] = r[3] + s[3];
        n[4] = r[4] + s[4];
        n[5] = r[5] + s[5];
        n[6] = r[6] + s[6];
        n[7] = r[7] + s[7];
        n[8] = r[8] + s[8];
        n[9] = r[9] + s[9];
        n[10] = r[10] + s[10];
        n[11] = r[11] + s[11];
        n[12] = r[12] + s[12];
        n[13] = r[13] + s[13];
        n[14] = r[14] + s[14];
        n[15] = r[15] + s[15];
        return t;
      };
      r.subtract = function (t, e, i) {
        var n = t.m;
        var r = e.m;
        var s = i.m;
        n[0] = r[0] - s[0];
        n[1] = r[1] - s[1];
        n[2] = r[2] - s[2];
        n[3] = r[3] - s[3];
        n[4] = r[4] - s[4];
        n[5] = r[5] - s[5];
        n[6] = r[6] - s[6];
        n[7] = r[7] - s[7];
        n[8] = r[8] - s[8];
        n[9] = r[9] - s[9];
        n[10] = r[10] - s[10];
        n[11] = r[11] - s[11];
        n[12] = r[12] - s[12];
        n[13] = r[13] - s[13];
        n[14] = r[14] - s[14];
        n[15] = r[15] - s[15];
        return t;
      };
      r.multiplyScalar = function (t, e, i) {
        var n = t.m;
        var r = e.m;
        n[0] = r[0] * i;
        n[1] = r[1] * i;
        n[2] = r[2] * i;
        n[3] = r[3] * i;
        n[4] = r[4] * i;
        n[5] = r[5] * i;
        n[6] = r[6] * i;
        n[7] = r[7] * i;
        n[8] = r[8] * i;
        n[9] = r[9] * i;
        n[10] = r[10] * i;
        n[11] = r[11] * i;
        n[12] = r[12] * i;
        n[13] = r[13] * i;
        n[14] = r[14] * i;
        n[15] = r[15] * i;
        return t;
      };
      r.multiplyScalarAndAdd = function (t, e, i, n) {
        var r = t.m;
        var s = e.m;
        var a = i.m;
        r[0] = s[0] + a[0] * n;
        r[1] = s[1] + a[1] * n;
        r[2] = s[2] + a[2] * n;
        r[3] = s[3] + a[3] * n;
        r[4] = s[4] + a[4] * n;
        r[5] = s[5] + a[5] * n;
        r[6] = s[6] + a[6] * n;
        r[7] = s[7] + a[7] * n;
        r[8] = s[8] + a[8] * n;
        r[9] = s[9] + a[9] * n;
        r[10] = s[10] + a[10] * n;
        r[11] = s[11] + a[11] * n;
        r[12] = s[12] + a[12] * n;
        r[13] = s[13] + a[13] * n;
        r[14] = s[14] + a[14] * n;
        r[15] = s[15] + a[15] * n;
        return t;
      };
      r.strictEquals = function (t, e) {
        var i = t.m;
        var n = e.m;
        return i[0] === n[0] && i[1] === n[1] && i[2] === n[2] && i[3] === n[3] && i[4] === n[4] && i[5] === n[5] && i[6] === n[6] && i[7] === n[7] && i[8] === n[8] && i[9] === n[9] && i[10] === n[10] && i[11] === n[11] && i[12] === n[12] && i[13] === n[13] && i[14] === n[14] && i[15] === n[15];
      };
      r.equals = function (t, e, i) {
        if (undefined === i) {
          i = o.EPSILON;
        }
        var n = t.m;
        var r = e.m;
        return Math.abs(n[0] - r[0]) <= i * Math.max(1, Math.abs(n[0]), Math.abs(r[0])) && Math.abs(n[1] - r[1]) <= i * Math.max(1, Math.abs(n[1]), Math.abs(r[1])) && Math.abs(n[2] - r[2]) <= i * Math.max(1, Math.abs(n[2]), Math.abs(r[2])) && Math.abs(n[3] - r[3]) <= i * Math.max(1, Math.abs(n[3]), Math.abs(r[3])) && Math.abs(n[4] - r[4]) <= i * Math.max(1, Math.abs(n[4]), Math.abs(r[4])) && Math.abs(n[5] - r[5]) <= i * Math.max(1, Math.abs(n[5]), Math.abs(r[5])) && Math.abs(n[6] - r[6]) <= i * Math.max(1, Math.abs(n[6]), Math.abs(r[6])) && Math.abs(n[7] - r[7]) <= i * Math.max(1, Math.abs(n[7]), Math.abs(r[7])) && Math.abs(n[8] - r[8]) <= i * Math.max(1, Math.abs(n[8]), Math.abs(r[8])) && Math.abs(n[9] - r[9]) <= i * Math.max(1, Math.abs(n[9]), Math.abs(r[9])) && Math.abs(n[10] - r[10]) <= i * Math.max(1, Math.abs(n[10]), Math.abs(r[10])) && Math.abs(n[11] - r[11]) <= i * Math.max(1, Math.abs(n[11]), Math.abs(r[11])) && Math.abs(n[12] - r[12]) <= i * Math.max(1, Math.abs(n[12]), Math.abs(r[12])) && Math.abs(n[13] - r[13]) <= i * Math.max(1, Math.abs(n[13]), Math.abs(r[13])) && Math.abs(n[14] - r[14]) <= i * Math.max(1, Math.abs(n[14]), Math.abs(r[14])) && Math.abs(n[15] - r[15]) <= i * Math.max(1, Math.abs(n[15]), Math.abs(r[15]));
      };
      r.adjoint = function (t, e) {
        var i = e.m;
        var n = t.m;
        var r = i[0];
        var s = i[1];
        var a = i[2];
        var o = i[3];
        var c = i[4];
        var l = i[5];
        var h = i[6];
        var u = i[7];
        var f = i[8];
        var d = i[9];
        var _ = i[10];
        var p = i[11];
        var v = i[12];
        var g = i[13];
        var m = i[14];
        var y = i[15];
        n[0] = l * (_ * y - p * m) - d * (h * y - u * m) + g * (h * p - u * _);
        n[1] = -(s * (_ * y - p * m) - d * (a * y - o * m) + g * (a * p - o * _));
        n[2] = s * (h * y - u * m) - l * (a * y - o * m) + g * (a * u - o * h);
        n[3] = -(s * (h * p - u * _) - l * (a * p - o * _) + d * (a * u - o * h));
        n[4] = -(c * (_ * y - p * m) - f * (h * y - u * m) + v * (h * p - u * _));
        n[5] = r * (_ * y - p * m) - f * (a * y - o * m) + v * (a * p - o * _);
        n[6] = -(r * (h * y - u * m) - c * (a * y - o * m) + v * (a * u - o * h));
        n[7] = r * (h * p - u * _) - c * (a * p - o * _) + f * (a * u - o * h);
        n[8] = c * (d * y - p * g) - f * (l * y - u * g) + v * (l * p - u * d);
        n[9] = -(r * (d * y - p * g) - f * (s * y - o * g) + v * (s * p - o * d));
        n[10] = r * (l * y - u * g) - c * (s * y - o * g) + v * (s * u - o * l);
        n[11] = -(r * (l * p - u * d) - c * (s * p - o * d) + f * (s * u - o * l));
        n[12] = -(c * (d * m - _ * g) - f * (l * m - h * g) + v * (l * _ - h * d));
        n[13] = r * (d * m - _ * g) - f * (s * m - a * g) + v * (s * _ - a * d);
        n[14] = -(r * (l * m - h * g) - c * (s * m - a * g) + v * (s * h - a * l));
        n[15] = r * (l * _ - h * d) - c * (s * _ - a * d) + f * (s * h - a * l);
        return t;
      };
      r.toArray = function (t, e, i) {
        if (undefined === i) {
          i = 0;
        }
        var n = e.m;
        for (var r = 0; r < 16; r++) {
          t[i + r] = n[r];
        }
        return t;
      };
      r.fromArray = function (t, e, i) {
        if (undefined === i) {
          i = 0;
        }
        var n = t.m;
        for (var r = 0; r < 16; r++) {
          n[r] = e[i + r];
        }
        return t;
      };
      n.clone = function () {
        var t = this.m;
        return new r(t[0], t[1], t[2], t[3], t[4], t[5], t[6], t[7], t[8], t[9], t[10], t[11], t[12], t[13], t[14], t[15]);
      };
      n.set = function (t) {
        var e = this.m;
        var i = t.m;
        e[0] = i[0];
        e[1] = i[1];
        e[2] = i[2];
        e[3] = i[3];
        e[4] = i[4];
        e[5] = i[5];
        e[6] = i[6];
        e[7] = i[7];
        e[8] = i[8];
        e[9] = i[9];
        e[10] = i[10];
        e[11] = i[11];
        e[12] = i[12];
        e[13] = i[13];
        e[14] = i[14];
        e[15] = i[15];
        return this;
      };
      n.equals = function (t) {
        return r.strictEquals(this, t);
      };
      n.fuzzyEquals = function (t) {
        return r.equals(this, t);
      };
      n.toString = function () {
        var t = this.m;
        return t ? "[\n" + t[0] + ", " + t[1] + ", " + t[2] + ", " + t[3] + ",\n" + t[4] + ", " + t[5] + ", " + t[6] + ", " + t[7] + ",\n" + t[8] + ", " + t[9] + ", " + t[10] + ", " + t[11] + ",\n" + t[12] + ", " + t[13] + ", " + t[14] + ", " + t[15] + "\n]" : "[\n1, 0, 0, 0\n0, 1, 0, 0\n0, 0, 1, 0\n0, 0, 0, 1\n]";
      };
      n.identity = function () {
        return r.identity(this);
      };
      n.transpose = function (t) {
        t = t || new r();
        return r.transpose(t, this);
      };
      n.invert = function (t) {
        t = t || new r();
        return r.invert(t, this);
      };
      n.adjoint = function (t) {
        t = t || new r();
        return r.adjoint(t, this);
      };
      n.determinant = function () {
        return r.determinant(this);
      };
      n.add = function (t, e) {
        e = e || new r();
        return r.add(e, this, t);
      };
      n.subtract = function (t) {
        return r.subtract(this, this, t);
      };
      n.multiply = function (t) {
        return r.multiply(this, this, t);
      };
      n.multiplyScalar = function (t) {
        return r.multiplyScalar(this, this, t);
      };
      n.translate = function (t, e) {
        e = e || new r();
        return r.translate(e, this, t);
      };
      n.scale = function (t, e) {
        e = e || new r();
        return r.scale(e, this, t);
      };
      n.rotate = function (t, e, i) {
        i = i || new r();
        return r.rotate(i, this, t, e);
      };
      n.getTranslation = function (t) {
        t = t || new s.default();
        return r.getTranslation(t, this);
      };
      n.getScale = function (t) {
        t = t || new s.default();
        return r.getScaling(t, this);
      };
      n.getRotation = function (t) {
        t = t || new a.default();
        return r.getRotation(t, this);
      };
      n.fromRTS = function (t, e, i) {
        return r.fromRTS(this, t, e, i);
      };
      n.fromQuat = function (t) {
        return r.fromQuat(this, t);
      };
      return r;
    }(n.default);
    i.default = R;
    R.mul = R.multiply;
    R.sub = R.subtract;
    R.IDENTITY = Object.freeze(new R());
    var M = new s.default();
    var w = new c.default();
    r.default.fastDefine("cc.Mat4", R, {
      m00: 1,
      m01: 0,
      m02: 0,
      m03: 0,
      m04: 0,
      m05: 1,
      m06: 0,
      m07: 0,
      m08: 0,
      m09: 0,
      m10: 1,
      m11: 0,
      m12: 0,
      m13: 0,
      m14: 0,
      m15: 1
    });
    var I = function (t) {
      Object.defineProperty(R.prototype, "m" + t, {
        get: function () {
          return this.m[t];
        },
        set: function (e) {
          this.m[t] = e;
        }
      });
    };
    for (var O = 0; O < 16; O++) {
      I(O);
    }
    cc.mat4 = function (t, e, i, n, r, s, a, o, c, l, h, u, f, d, _, p) {
      var v = new R(t, e, i, n, r, s, a, o, c, l, h, u, f, d, _, p);
      if (undefined === t) {
        R.identity(v);
      }
      return v;
    };
    cc.Mat4 = R;
    e.exports = i.default;
  }, {
    "../platform/CCClass": 162,
    "./mat3": 252,
    "./quat": 254,
    "./utils": 258,
    "./value-type": 259,
    "./vec3": 261
  }],
  254: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n = t("./value-type") && t("./value-type").__esModule ? t("./value-type") : {
      default: t("./value-type")
    };
    var r = t("../platform/CCClass") && t("../platform/CCClass").__esModule ? t("../platform/CCClass") : {
      default: t("../platform/CCClass")
    };
    var s = t("./vec3") && t("./vec3").__esModule ? t("./vec3") : {
      default: t("./vec3")
    };
    var a = t("./mat3") && t("./mat3").__esModule ? t("./mat3") : {
      default: t("./mat3")
    };
    var o = t("./utils");
    function l(t, e) {
      return (l = Object.setPrototypeOf || function (t, e) {
        t.__proto__ = e;
        return t;
      })(t, e);
    }
    var h = 0;
    var u = 0;
    var f = 0;
    var d = 0;
    var _ = function (t) {
      r.prototype = Object.create(t.prototype);
      r.prototype.constructor = r;
      l(r, t);
      var n = r.prototype;
      function r(e, i, n, r) {
        var s;
        if (undefined === e) {
          e = 0;
        }
        if (undefined === i) {
          i = 0;
        }
        if (undefined === n) {
          n = 0;
        }
        if (undefined === r) {
          r = 1;
        }
        (s = t.call(this) || this).x = undefined;
        s.y = undefined;
        s.z = undefined;
        s.w = undefined;
        if (e && "object" == typeof e) {
          s.x = e.x;
          s.y = e.y;
          s.z = e.z;
          s.w = e.w;
        } else {
          s.x = e;
          s.y = i;
          s.z = n;
          s.w = r;
        }
        return s;
      }
      n.mul = function (t, e) {
        return r.multiply(e || new r(), this, t);
      };
      r.clone = function (t) {
        return new r(t.x, t.y, t.z, t.w);
      };
      r.copy = function (t, e) {
        t.x = e.x;
        t.y = e.y;
        t.z = e.z;
        t.w = e.w;
        return t;
      };
      r.set = function (t, e, i, n, r) {
        t.x = e;
        t.y = i;
        t.z = n;
        t.w = r;
        return t;
      };
      r.identity = function (t) {
        t.x = 0;
        t.y = 0;
        t.z = 0;
        t.w = 1;
        return t;
      };
      r.rotationTo = function (t, e, i) {
        var n = s.default.dot(e, i);
        return n < -.999999 ? (s.default.cross(g, s.default.RIGHT, e), g.mag() < 1e-6 && s.default.cross(g, s.default.UP, e), s.default.normalize(g, g), r.fromAxisAngle(t, g, Math.PI), t) : n > .999999 ? (t.x = 0, t.y = 0, t.z = 0, t.w = 1, t) : (s.default.cross(g, e, i), t.x = g.x, t.y = g.y, t.z = g.z, t.w = 1 + n, r.normalize(t, t));
      };
      r.getAxisAngle = function (t, e) {
        var i = 2 * Math.acos(e.w);
        var n = Math.sin(i / 2);
        if (0 !== n) {
          t.x = e.x / n;
          t.y = e.y / n;
          t.z = e.z / n;
        } else {
          t.x = 1;
          t.y = 0;
          t.z = 0;
        }
        return i;
      };
      r.multiply = function (t, e, i) {
        h = e.x * i.w + e.w * i.x + e.y * i.z - e.z * i.y;
        u = e.y * i.w + e.w * i.y + e.z * i.x - e.x * i.z;
        f = e.z * i.w + e.w * i.z + e.x * i.y - e.y * i.x;
        d = e.w * i.w - e.x * i.x - e.y * i.y - e.z * i.z;
        t.x = h;
        t.y = u;
        t.z = f;
        t.w = d;
        return t;
      };
      r.multiplyScalar = function (t, e, i) {
        t.x = e.x * i;
        t.y = e.y * i;
        t.z = e.z * i;
        t.w = e.w * i;
        return t;
      };
      r.scaleAndAdd = function (t, e, i, n) {
        t.x = e.x + i.x * n;
        t.y = e.y + i.y * n;
        t.z = e.z + i.z * n;
        t.w = e.w + i.w * n;
        return t;
      };
      r.rotateX = function (t, e, i) {
        var n = Math.sin(i *= .5);
        var r = Math.cos(i);
        h = e.x * r + e.w * n;
        u = e.y * r + e.z * n;
        f = e.z * r - e.y * n;
        d = e.w * r - e.x * n;
        t.x = h;
        t.y = u;
        t.z = f;
        t.w = d;
        return t;
      };
      r.rotateY = function (t, e, i) {
        var n = Math.sin(i *= .5);
        var r = Math.cos(i);
        h = e.x * r - e.z * n;
        u = e.y * r + e.w * n;
        f = e.z * r + e.x * n;
        d = e.w * r - e.y * n;
        t.x = h;
        t.y = u;
        t.z = f;
        t.w = d;
        return t;
      };
      r.rotateZ = function (t, e, i) {
        var n = Math.sin(i *= .5);
        var r = Math.cos(i);
        h = e.x * r + e.y * n;
        u = e.y * r - e.x * n;
        f = e.z * r + e.w * n;
        d = e.w * r - e.z * n;
        t.x = h;
        t.y = u;
        t.z = f;
        t.w = d;
        return t;
      };
      r.rotateAround = function (t, e, i, n) {
        r.invert(p, e);
        s.default.transformQuat(g, i, p);
        r.fromAxisAngle(p, g, n);
        r.multiply(t, e, p);
        return t;
      };
      r.rotateAroundLocal = function (t, e, i, n) {
        r.fromAxisAngle(p, i, n);
        r.multiply(t, e, p);
        return t;
      };
      r.calculateW = function (t, e) {
        t.x = e.x;
        t.y = e.y;
        t.z = e.z;
        t.w = Math.sqrt(Math.abs(1 - e.x * e.x - e.y * e.y - e.z * e.z));
        return t;
      };
      r.dot = function (t, e) {
        return t.x * e.x + t.y * e.y + t.z * e.z + t.w * e.w;
      };
      r.lerp = function (t, e, i, n) {
        t.x = e.x + n * (i.x - e.x);
        t.y = e.y + n * (i.y - e.y);
        t.z = e.z + n * (i.z - e.z);
        t.w = e.w + n * (i.w - e.w);
        return t;
      };
      r.slerp = function (t, e, i, n) {
        var r = 0;
        var s = 0;
        var a = e.x * i.x + e.y * i.y + e.z * i.z + e.w * i.w;
        if (a < 0) {
          a = -a;
          i.x = -i.x;
          i.y = -i.y;
          i.z = -i.z;
          i.w = -i.w;
        }
        if (1 - a > 1e-6) {
          var o = Math.acos(a);
          var c = Math.sin(o);
          r = Math.sin((1 - n) * o) / c;
          s = Math.sin(n * o) / c;
        } else {
          r = 1 - n;
          s = n;
        }
        t.x = r * e.x + s * i.x;
        t.y = r * e.y + s * i.y;
        t.z = r * e.z + s * i.z;
        t.w = r * e.w + s * i.w;
        return t;
      };
      r.sqlerp = function (t, e, i, n, s, a) {
        r.slerp(p, e, s, a);
        r.slerp(v, i, n, a);
        r.slerp(t, p, v, 2 * a * (1 - a));
        return t;
      };
      r.invert = function (t, e) {
        var i = e.x * e.x + e.y * e.y + e.z * e.z + e.w * e.w;
        var n = i ? 1 / i : 0;
        t.x = -e.x * n;
        t.y = -e.y * n;
        t.z = -e.z * n;
        t.w = e.w * n;
        return t;
      };
      r.conjugate = function (t, e) {
        t.x = -e.x;
        t.y = -e.y;
        t.z = -e.z;
        t.w = e.w;
        return t;
      };
      r.len = function (t) {
        return Math.sqrt(t.x * t.x + t.y * t.y + t.z * t.z + t.w * t.w);
      };
      r.lengthSqr = function (t) {
        return t.x * t.x + t.y * t.y + t.z * t.z + t.w * t.w;
      };
      r.normalize = function (t, e) {
        var i = e.x * e.x + e.y * e.y + e.z * e.z + e.w * e.w;
        if (i > 0) {
          i = 1 / Math.sqrt(i);
          t.x = e.x * i;
          t.y = e.y * i;
          t.z = e.z * i;
          t.w = e.w * i;
        }
        return t;
      };
      r.fromAxes = function (t, e, i, n) {
        a.default.set(m, e.x, e.y, e.z, i.x, i.y, i.z, n.x, n.y, n.z);
        return r.normalize(t, r.fromMat3(t, m));
      };
      r.fromViewUp = function (t, e, i) {
        a.default.fromViewUp(m, e, i);
        return r.normalize(t, r.fromMat3(t, m));
      };
      r.fromAxisAngle = function (t, e, i) {
        var n = Math.sin(i *= .5);
        t.x = n * e.x;
        t.y = n * e.y;
        t.z = n * e.z;
        t.w = Math.cos(i);
        return t;
      };
      r.fromAngleZ = function (t, e) {
        e *= y;
        t.x = t.y = 0;
        t.z = Math.sin(e);
        t.w = Math.cos(e);
        return t;
      };
      r.fromMat3 = function (t, e) {
        var i = e.m;
        var n = i[0];
        var r = i[1];
        var s = i[2];
        var a = i[3];
        var o = i[4];
        var c = i[5];
        var l = i[6];
        var h = i[7];
        var u = i[8];
        var f = n + o + u;
        if (f > 0) {
          var d = .5 / Math.sqrt(f + 1);
          t.w = .25 / d;
          t.x = (c - h) * d;
          t.y = (l - s) * d;
          t.z = (r - a) * d;
        } else if (n > o && n > u) {
          var _ = 2 * Math.sqrt(1 + n - o - u);
          t.w = (c - h) / _;
          t.x = .25 * _;
          t.y = (a + r) / _;
          t.z = (l + s) / _;
        } else if (o > u) {
          var p = 2 * Math.sqrt(1 + o - n - u);
          t.w = (l - s) / p;
          t.x = (a + r) / p;
          t.y = .25 * p;
          t.z = (h + c) / p;
        } else {
          var v = 2 * Math.sqrt(1 + u - n - o);
          t.w = (r - a) / v;
          t.x = (l + s) / v;
          t.y = (h + c) / v;
          t.z = .25 * v;
        }
        return t;
      };
      r.fromEuler = function (t, e, i, n) {
        i *= y;
        n *= y;
        var r = Math.sin(e *= y);
        var s = Math.cos(e);
        var a = Math.sin(i);
        var o = Math.cos(i);
        var c = Math.sin(n);
        var l = Math.cos(n);
        t.x = r * o * l + s * a * c;
        t.y = s * a * l + r * o * c;
        t.z = s * o * c - r * a * l;
        t.w = s * o * l - r * a * c;
        return t;
      };
      r.toAxisX = function (t, e) {
        var i = 2 * e.y;
        var n = 2 * e.z;
        t.x = 1 - i * e.y - n * e.z;
        t.y = i * e.x + n * e.w;
        t.z = n * e.x + i * e.w;
        return t;
      };
      r.toAxisY = function (t, e) {
        var i = 2 * e.x;
        var n = 2 * e.y;
        var r = 2 * e.z;
        t.x = n * e.x - r * e.w;
        t.y = 1 - i * e.x - r * e.z;
        t.z = r * e.y + i * e.w;
        return t;
      };
      r.toAxisZ = function (t, e) {
        var i = 2 * e.x;
        var n = 2 * e.y;
        var r = 2 * e.z;
        t.x = r * e.x - n * e.w;
        t.y = r * e.y - i * e.w;
        t.z = 1 - i * e.x - n * e.y;
        return t;
      };
      r.toEuler = function (t, e, i) {
        var n = e.x;
        var r = e.y;
        var s = e.z;
        var a = e.w;
        var c = 0;
        var l = 0;
        var h = 0;
        var u = n * r + s * a;
        if (u > .499999) {
          c = 0;
          0;
          l = o.toDegree(2 * Math.atan2(n, a));
          h = 90;
        } else if (u < -.499999) {
          c = 0;
          0;
          l = -o.toDegree(2 * Math.atan2(n, a));
          h = -90;
        } else {
          var f = n * n;
          var d = r * r;
          var _ = s * s;
          0;
          c = o.toDegree(Math.atan2(2 * n * a - 2 * r * s, 1 - 2 * f - 2 * _));
          0;
          l = o.toDegree(Math.atan2(2 * r * a - 2 * n * s, 1 - 2 * d - 2 * _));
          0;
          h = o.toDegree(Math.asin(2 * u));
          if (i) {
            c = -180 * Math.sign(c + 1e-6) + c;
            l = -180 * Math.sign(l + 1e-6) + l;
            h = 180 * Math.sign(h + 1e-6) - h;
          }
        }
        t.x = c;
        t.y = l;
        t.z = h;
        return t;
      };
      r.strictEquals = function (t, e) {
        return t.x === e.x && t.y === e.y && t.z === e.z && t.w === e.w;
      };
      r.equals = function (t, e, i) {
        if (undefined === i) {
          i = o.EPSILON;
        }
        return Math.abs(t.x - e.x) <= i * Math.max(1, Math.abs(t.x), Math.abs(e.x)) && Math.abs(t.y - e.y) <= i * Math.max(1, Math.abs(t.y), Math.abs(e.y)) && Math.abs(t.z - e.z) <= i * Math.max(1, Math.abs(t.z), Math.abs(e.z)) && Math.abs(t.w - e.w) <= i * Math.max(1, Math.abs(t.w), Math.abs(e.w));
      };
      r.toArray = function (t, e, i) {
        if (undefined === i) {
          i = 0;
        }
        t[i + 0] = e.x;
        t[i + 1] = e.y;
        t[i + 2] = e.z;
        t[i + 3] = e.w;
        return t;
      };
      r.fromArray = function (t, e, i) {
        if (undefined === i) {
          i = 0;
        }
        t.x = e[i + 0];
        t.y = e[i + 1];
        t.z = e[i + 2];
        t.w = e[i + 3];
        return t;
      };
      n.clone = function () {
        return new r(this.x, this.y, this.z, this.w);
      };
      n.set = function (t) {
        this.x = t.x;
        this.y = t.y;
        this.z = t.z;
        this.w = t.w;
        return this;
      };
      n.equals = function (t) {
        return t && this.x === t.x && this.y === t.y && this.z === t.z && this.w === t.w;
      };
      n.toEuler = function (t) {
        return r.toEuler(t, this);
      };
      n.fromEuler = function (t) {
        return r.fromEuler(this, t.x, t.y, t.z);
      };
      n.lerp = function (t, e, i) {
        i = i || new r();
        r.slerp(i, this, t, e);
        return i;
      };
      n.multiply = function (t) {
        return r.multiply(this, this, t);
      };
      n.rotateAround = function (t, e, i, n) {
        n = n || new r();
        return r.rotateAround(n, t, e, i);
      };
      return r;
    }(n.default);
    i.default = _;
    _.mul = _.multiply;
    _.scale = _.multiplyScalar;
    _.mag = _.len;
    _.IDENTITY = Object.freeze(new _());
    var p = new _();
    var v = new _();
    var g = new s.default();
    var m = new a.default();
    var y = .5 * Math.PI / 180;
    r.default.fastDefine("cc.Quat", _, {
      x: 0,
      y: 0,
      z: 0,
      w: 1
    });
    cc.quat = function (t, e, i, n) {
      return new _(t, e, i, n);
    };
    cc.Quat = _;
    e.exports = i.default;
  }, {
    "../platform/CCClass": 162,
    "./mat3": 252,
    "./utils": 258,
    "./value-type": 259,
    "./vec3": 261
  }],
  255: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n = t("./value-type") && t("./value-type").__esModule ? t("./value-type") : {
      default: t("./value-type")
    };
    var r = t("../platform/CCClass") && t("../platform/CCClass").__esModule ? t("../platform/CCClass") : {
      default: t("../platform/CCClass")
    };
    var s = t("./vec2") && t("./vec2").__esModule ? t("./vec2") : {
      default: t("./vec2")
    };
    var a = t("./size") && t("./size").__esModule ? t("./size") : {
      default: t("./size")
    };
    function c(t, e) {
      for (var i = 0; i < e.length; i++) {
        var n = e[i];
        n.enumerable = n.enumerable || false;
        n.configurable = true;
        if ("value" in n) {
          n.writable = true;
        }
        Object.defineProperty(t, n.key, n);
      }
    }
    function l(t, e) {
      return (l = Object.setPrototypeOf || function (t, e) {
        t.__proto__ = e;
        return t;
      })(t, e);
    }
    var h = function (t) {
      function n(e, i, n, r) {
        var s;
        if (undefined === e) {
          e = 0;
        }
        if (undefined === i) {
          i = 0;
        }
        if (undefined === n) {
          n = 0;
        }
        if (undefined === r) {
          r = 0;
        }
        (s = t.call(this) || this).x = undefined;
        s.y = undefined;
        s.width = undefined;
        s.height = undefined;
        if (e && "object" == typeof e) {
          i = e.y;
          n = e.width;
          r = e.height;
          e = e.x;
        }
        s.x = e || 0;
        s.y = i || 0;
        s.width = n || 0;
        s.height = r || 0;
        return s;
      }
      n.prototype = Object.create(t.prototype);
      n.prototype.constructor = n;
      l(n, t);
      n.fromMinMax = function (t, e) {
        var i = Math.min(t.x, e.x);
        var r = Math.min(t.y, e.y);
        return new n(i, r, Math.max(t.x, e.x) - i, Math.max(t.y, e.y) - r);
      };
      var o;
      var h = n.prototype;
      h.clone = function () {
        return new n(this.x, this.y, this.width, this.height);
      };
      h.equals = function (t) {
        return t && this.x === t.x && this.y === t.y && this.width === t.width && this.height === t.height;
      };
      h.lerp = function (t, e, i) {
        i = i || new n();
        var r = this.x;
        var s = this.y;
        var a = this.width;
        var o = this.height;
        i.x = r + (t.x - r) * e;
        i.y = s + (t.y - s) * e;
        i.width = a + (t.width - a) * e;
        i.height = o + (t.height - o) * e;
        return i;
      };
      h.set = function (t) {
        this.x = t.x;
        this.y = t.y;
        this.width = t.width;
        this.height = t.height;
        return this;
      };
      h.intersects = function (t) {
        var e = this.x + this.width;
        var i = this.y + this.height;
        var n = t.x + t.width;
        var r = t.y + t.height;
        return !(e < t.x || n < this.x || i < t.y || r < this.y);
      };
      h.intersection = function (t, e) {
        var i = this.x;
        var n = this.y;
        var r = this.x + this.width;
        var s = this.y + this.height;
        var a = e.x;
        var o = e.y;
        var c = e.x + e.width;
        var l = e.y + e.height;
        t.x = Math.max(i, a);
        t.y = Math.max(n, o);
        t.width = Math.min(r, c) - t.x;
        t.height = Math.min(s, l) - t.y;
        return t;
      };
      h.contains = function (t) {
        return this.x <= t.x && this.x + this.width >= t.x && this.y <= t.y && this.y + this.height >= t.y;
      };
      h.containsRect = function (t) {
        return this.x <= t.x && this.x + this.width >= t.x + t.width && this.y <= t.y && this.y + this.height >= t.y + t.height;
      };
      h.union = function (t, e) {
        var i = this.x;
        var n = this.y;
        var r = this.width;
        var s = this.height;
        var a = e.x;
        var o = e.y;
        var c = e.width;
        var l = e.height;
        t.x = Math.min(i, a);
        t.y = Math.min(n, o);
        t.width = Math.max(i + r, a + c) - t.x;
        t.height = Math.max(n + s, o + l) - t.y;
        return t;
      };
      h.transformMat4 = function (t, e) {
        var i = this.x;
        var n = this.y;
        var r = i + this.width;
        var s = n + this.height;
        var a = e.m;
        var o = a[0] * i + a[4] * n + a[12];
        var c = a[1] * i + a[5] * n + a[13];
        var l = a[0] * r + a[4] * n + a[12];
        var h = a[1] * r + a[5] * n + a[13];
        var u = a[0] * i + a[4] * s + a[12];
        var f = a[1] * i + a[5] * s + a[13];
        var d = a[0] * r + a[4] * s + a[12];
        var _ = a[1] * r + a[5] * s + a[13];
        var p = Math.min(o, l, u, d);
        var v = Math.max(o, l, u, d);
        var g = Math.min(c, h, f, _);
        var m = Math.max(c, h, f, _);
        t.x = p;
        t.y = g;
        t.width = v - p;
        t.height = m - g;
        return t;
      };
      h.toString = function () {
        return "(" + this.x.toFixed(2) + ", " + this.y.toFixed(2) + ", " + this.width.toFixed(2) + ", " + this.height.toFixed(2) + ")";
      };
      if (o = [{
        key: "xMin",
        get: function () {
          return this.x;
        },
        set: function (t) {
          this.width += this.x - t;
          this.x = t;
        }
      }, {
        key: "yMin",
        get: function () {
          return this.y;
        },
        set: function (t) {
          this.height += this.y - t;
          this.y = t;
        }
      }, {
        key: "xMax",
        get: function () {
          return this.x + this.width;
        },
        set: function (t) {
          this.width = t - this.x;
        }
      }, {
        key: "yMax",
        get: function () {
          return this.y + this.height;
        },
        set: function (t) {
          this.height = t - this.y;
        }
      }, {
        key: "center",
        get: function () {
          return new s.default(this.x + .5 * this.width, this.y + .5 * this.height);
        },
        set: function (t) {
          this.x = t.x - .5 * this.width;
          this.y = t.y - .5 * this.height;
        }
      }, {
        key: "origin",
        get: function () {
          return new s.default(this.x, this.y);
        },
        set: function (t) {
          this.x = t.x;
          this.y = t.y;
        }
      }, {
        key: "size",
        get: function () {
          return new a.default(this.width, this.height);
        },
        set: function (t) {
          this.width = t.width;
          this.height = t.height;
        }
      }]) {
        c(n.prototype, o);
      }
      Object.defineProperty(n, "prototype", {
        writable: false
      });
      return n;
    }(n.default);
    i.default = h;
    r.default.fastDefine("cc.Rect", h, {
      x: 0,
      y: 0,
      width: 0,
      height: 0
    });
    cc.Rect = h;
    cc.rect = function (t, e, i, n) {
      return new h(t, e, i, n);
    };
    e.exports = i.default;
  }, {
    "../platform/CCClass": 162,
    "./size": 256,
    "./value-type": 259,
    "./vec2": 260
  }],
  256: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n = t("./value-type") && t("./value-type").__esModule ? t("./value-type") : {
      default: t("./value-type")
    };
    var r = t("../platform/CCClass") && t("../platform/CCClass").__esModule ? t("../platform/CCClass") : {
      default: t("../platform/CCClass")
    };
    function a(t, e) {
      for (var i = 0; i < e.length; i++) {
        var n = e[i];
        n.enumerable = n.enumerable || false;
        n.configurable = true;
        if ("value" in n) {
          n.writable = true;
        }
        Object.defineProperty(t, n.key, n);
      }
    }
    function o(t, e) {
      return (o = Object.setPrototypeOf || function (t, e) {
        t.__proto__ = e;
        return t;
      })(t, e);
    }
    var c = function (t) {
      function n(e, i) {
        var n;
        if (undefined === e) {
          e = 0;
        }
        if (undefined === i) {
          i = 0;
        }
        (n = t.call(this) || this).width = undefined;
        n.height = undefined;
        if (e && "object" == typeof e) {
          n.width = e.width;
          n.height = e.height;
        } else {
          n.width = e || 0;
          n.height = i || 0;
        }
        return n;
      }
      n.prototype = Object.create(t.prototype);
      n.prototype.constructor = n;
      o(n, t);
      var s;
      var c = n.prototype;
      c.clone = function () {
        return new n(this.width, this.height);
      };
      c.equals = function (t) {
        return t && this.width === t.width && this.height === t.height;
      };
      c.lerp = function (t, e, i) {
        i = i || new n();
        var r = this.width;
        var s = this.height;
        i.width = r + (t.width - r) * e;
        i.height = s + (t.height - s) * e;
        return i;
      };
      c.set = function (t) {
        this.width = t.width;
        this.height = t.height;
        return this;
      };
      c.toString = function () {
        return "(" + this.width.toFixed(2) + ", " + this.height.toFixed(2) + ")";
      };
      s = [{
        key: "ZERO",
        get: function () {
          return new n();
        }
      }];
      a(n.prototype, null);
      if (s) {
        a(n, s);
      }
      Object.defineProperty(n, "prototype", {
        writable: false
      });
      return n;
    }(n.default);
    i.default = c;
    c.ZERO_R = c.ZERO;
    r.default.fastDefine("cc.Size", c, {
      width: 0,
      height: 0
    });
    cc.size = function (t, e) {
      return new c(t, e);
    };
    cc.Size = c;
    e.exports = i.default;
  }, {
    "../platform/CCClass": 162,
    "./value-type": 259
  }],
  257: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n;
    var r = (n = t("./quat")) && n.__esModule ? n : {
      default: n
    };
    var s = new r.default();
    var a = function () {
      function t() {}
      t.toRotation = function (t, e) {
        t.x = e[3];
        t.y = e[4];
        t.z = e[5];
        t.w = e[6];
        return t;
      };
      t.fromRotation = function (t, e) {
        t[3] = e.x;
        t[4] = e.y;
        t[5] = e.z;
        t[6] = e.w;
        return t;
      };
      t.toEuler = function (e, i) {
        t.toRotation(s, i);
        r.default.toEuler(e, s);
        return e;
      };
      t.fromEuler = function (e, i) {
        r.default.fromEuler(s, i.x, i.y, i.z);
        t.fromRotation(e, s);
        return e;
      };
      t.fromEulerNumber = function (e, i, n, a) {
        r.default.fromEuler(s, i, n, a);
        t.fromRotation(e, s);
        return e;
      };
      t.toScale = function (t, e) {
        t.x = e[7];
        t.y = e[8];
        t.z = e[9];
        return t;
      };
      t.fromScale = function (t, e) {
        t[7] = e.x;
        t[8] = e.y;
        t[9] = e.z;
        return t;
      };
      t.toPosition = function (t, e) {
        t.x = e[0];
        t.y = e[1];
        t.z = e[2];
        return t;
      };
      t.fromPosition = function (t, e) {
        t[0] = e.x;
        t[1] = e.y;
        t[2] = e.z;
        return t;
      };
      t.fromAngleZ = function (e, i) {
        r.default.fromAngleZ(s, i);
        t.fromRotation(e, s);
        return e;
      };
      t.toMat4 = function (t, e) {
        var i = e[3];
        var n = e[4];
        var r = e[5];
        var s = e[6];
        var a = i + i;
        var o = n + n;
        var c = r + r;
        var l = i * a;
        var h = i * o;
        var u = i * c;
        var f = n * o;
        var d = n * c;
        var _ = r * c;
        var p = s * a;
        var v = s * o;
        var g = s * c;
        var m = e[7];
        var y = e[8];
        var T = e[9];
        var E = t.m;
        E[0] = (1 - (f + _)) * m;
        E[1] = (h + g) * m;
        E[2] = (u - v) * m;
        E[3] = 0;
        E[4] = (h - g) * y;
        E[5] = (1 - (l + _)) * y;
        E[6] = (d + p) * y;
        E[7] = 0;
        E[8] = (u + v) * T;
        E[9] = (d - p) * T;
        E[10] = (1 - (l + f)) * T;
        E[11] = 0;
        E[12] = e[0];
        E[13] = e[1];
        E[14] = e[2];
        E[15] = 1;
        return t;
      };
      return t;
    }();
    i.default = a;
    cc.Trs = a;
    e.exports = i.default;
  }, {
    "./quat": 254
  }],
  258: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.INT_MIN = i.INT_MAX = i.INT_BITS = i.FLOAT_BYTES = i.FLOAT_ARRAY_TYPE = i.EPSILON = undefined;
    i.approx = function (t, e, i) {
      i = i || 1e-6;
      return Math.abs(t - e) <= i;
    };
    i.clamp = function (t, e, i) {
      return t < e ? e : t > i ? i : t;
    };
    i.clamp01 = function (t) {
      return t < 0 ? 0 : t > 1 ? 1 : t;
    };
    i.equals = function (t, e) {
      return Math.abs(t - e) <= 1e-6 * Math.max(1, Math.abs(t), Math.abs(e));
    };
    i.inverseLerp = function (t, e, i) {
      return (i - t) / (e - t);
    };
    i.lerp = function (t, e, i) {
      return t + (e - t) * i;
    };
    i.nextPow2 = function (t) {
      --t;
      t |= t >> 1;
      t |= t >> 2;
      t |= t >> 4;
      t |= t >> 8;
      t |= t >> 16;
      return ++t;
    };
    i.pingPong = function (t, e) {
      t = t - Math.floor(t / (2 * e)) * (2 * e);
      return e - Math.abs(t - e);
    };
    i.pseudoRandom = l;
    i.pseudoRandomRange = h;
    i.pseudoRandomRangeInt = function (t, e, i) {
      return Math.floor(l(t) * (i - e) + e);
    };
    i.random = undefined;
    i.randomRange = c;
    i.randomRangeInt = function (t, e) {
      return Math.floor(Math.random() * (e - t) + t);
    };
    i.repeat = u;
    i.sign = function (t) {
      return (t > 0) - (t < 0);
    };
    i.toDegree = function (t) {
      return t * r;
    };
    i.toRadian = function (t) {
      return t * n;
    };
    var n = Math.PI / 180;
    var r = 180 / Math.PI;
    i.EPSILON = 1e-6;
    i.INT_BITS = 32;
    i.INT_MAX = 2147483647;
    i.INT_MIN = -2147483648;
    i.FLOAT_ARRAY_TYPE = Float64Array;
    i.FLOAT_BYTES = 8;
    var o = Math.random;
    function c(t, e) {
      return Math.random() * (e - t) + t;
    }
    function l(t) {
      return (t = (9301 * t + 49297) % 233280) / 233280;
    }
    function h(t, e, i) {
      return l(t) * (i - e) + e;
    }
    function u(t, e) {
      return t - Math.floor(t / e) * e;
    }
    i.random = o;
  }, {}],
  259: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n;
    var r = (n = t("../platform/js")) && n.__esModule ? n : {
      default: n
    };
    var s = function () {
      function t() {}
      var e = t.prototype;
      e.clone = function () {
        return null;
      };
      e.equals = function () {
        return false;
      };
      e.lerp = function () {
        return this.clone();
      };
      e.set = function () {};
      e.toString = function () {
        return "[object Object]";
      };
      return t;
    }();
    i.default = s;
    r.default.setClassName("cc.ValueType", s);
    cc.ValueType = s;
    e.exports = i.default;
  }, {
    "../platform/js": 183
  }],
  260: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n = t("./value-type") && t("./value-type").__esModule ? t("./value-type") : {
      default: t("./value-type")
    };
    var r = t("../platform/CCClass") && t("../platform/CCClass").__esModule ? t("../platform/CCClass") : {
      default: t("../platform/CCClass")
    };
    var s = t("../utils/misc") && t("../utils/misc").__esModule ? t("../utils/misc") : {
      default: t("../utils/misc")
    };
    var a = t("./utils");
    function c(t, e) {
      for (var i = 0; i < e.length; i++) {
        var n = e[i];
        n.enumerable = n.enumerable || false;
        n.configurable = true;
        if ("value" in n) {
          n.writable = true;
        }
        Object.defineProperty(t, n.key, n);
      }
    }
    function l(t, e) {
      return (l = Object.setPrototypeOf || function (t, e) {
        t.__proto__ = e;
        return t;
      })(t, e);
    }
    var h = 0;
    var u = 0;
    var f = function (t) {
      f.prototype = Object.create(t.prototype);
      f.prototype.constructor = f;
      l(f, t);
      var r;
      var o = f.prototype;
      function f(e, i) {
        var n;
        if (undefined === e) {
          e = 0;
        }
        if (undefined === i) {
          i = 0;
        }
        (n = t.call(this) || this).mag = f.prototype.len;
        n.magSqr = f.prototype.lengthSqr;
        n.subSelf = f.prototype.subtract;
        n.mulSelf = f.prototype.multiplyScalar;
        n.divSelf = f.prototype.divide;
        n.scaleSelf = f.prototype.multiply;
        n.negSelf = f.prototype.negate;
        n.x = undefined;
        n.y = undefined;
        n.z = 0;
        if (e && "object" == typeof e) {
          n.x = e.x || 0;
          n.y = e.y || 0;
        } else {
          n.x = e || 0;
          n.y = i || 0;
        }
        return n;
      }
      o.sub = function (t, e) {
        return f.subtract(e || new f(), this, t);
      };
      o.mul = function (t, e) {
        return f.multiplyScalar(e || new f(), this, t);
      };
      o.div = function (t, e) {
        return f.multiplyScalar(e || new f(), this, 1 / t);
      };
      o.scale = function (t, e) {
        return f.multiply(e || new f(), this, t);
      };
      o.neg = function (t) {
        return f.negate(t || new f(), this);
      };
      f.clone = function (t) {
        return new f(t.x, t.y);
      };
      f.copy = function (t, e) {
        t.x = e.x;
        t.y = e.y;
        return t;
      };
      f.set = function (t, e, i) {
        t.x = e;
        t.y = i;
        return t;
      };
      f.add = function (t, e, i) {
        t.x = e.x + i.x;
        t.y = e.y + i.y;
        return t;
      };
      f.subtract = function (t, e, i) {
        t.x = e.x - i.x;
        t.y = e.y - i.y;
        return t;
      };
      f.multiply = function (t, e, i) {
        t.x = e.x * i.x;
        t.y = e.y * i.y;
        return t;
      };
      f.divide = function (t, e, i) {
        t.x = e.x / i.x;
        t.y = e.y / i.y;
        return t;
      };
      f.ceil = function (t, e) {
        t.x = Math.ceil(e.x);
        t.y = Math.ceil(e.y);
        return t;
      };
      f.floor = function (t, e) {
        t.x = Math.floor(e.x);
        t.y = Math.floor(e.y);
        return t;
      };
      f.min = function (t, e, i) {
        t.x = Math.min(e.x, i.x);
        t.y = Math.min(e.y, i.y);
        return t;
      };
      f.max = function (t, e, i) {
        t.x = Math.max(e.x, i.x);
        t.y = Math.max(e.y, i.y);
        return t;
      };
      f.round = function (t, e) {
        t.x = Math.round(e.x);
        t.y = Math.round(e.y);
        return t;
      };
      f.multiplyScalar = function (t, e, i) {
        t.x = e.x * i;
        t.y = e.y * i;
        return t;
      };
      f.scaleAndAdd = function (t, e, i, n) {
        t.x = e.x + i.x * n;
        t.y = e.y + i.y * n;
        return t;
      };
      f.distance = function (t, e) {
        h = e.x - t.x;
        u = e.y - t.y;
        return Math.sqrt(h * h + u * u);
      };
      f.squaredDistance = function (t, e) {
        h = e.x - t.x;
        u = e.y - t.y;
        return h * h + u * u;
      };
      f.len = function (t) {
        h = t.x;
        u = t.y;
        return Math.sqrt(h * h + u * u);
      };
      f.lengthSqr = function (t) {
        h = t.x;
        u = t.y;
        return h * h + u * u;
      };
      f.negate = function (t, e) {
        t.x = -e.x;
        t.y = -e.y;
        return t;
      };
      f.inverse = function (t, e) {
        t.x = 1 / e.x;
        t.y = 1 / e.y;
        return t;
      };
      f.inverseSafe = function (t, e) {
        h = e.x;
        u = e.y;
        if (Math.abs(h) < a.EPSILON) {
          t.x = 0;
        } else {
          t.x = 1 / h;
        }
        if (Math.abs(u) < a.EPSILON) {
          t.y = 0;
        } else {
          t.y = 1 / u;
        }
        return t;
      };
      f.normalize = function (t, e) {
        h = e.x;
        u = e.y;
        var i = h * h + u * u;
        if (i > 0) {
          i = 1 / Math.sqrt(i);
          t.x = h * i;
          t.y = u * i;
        }
        return t;
      };
      f.dot = function (t, e) {
        return t.x * e.x + t.y * e.y;
      };
      f.cross = function (t, e, i) {
        t.x = t.y = 0;
        t.z = e.x * i.y - e.y * i.x;
        return t;
      };
      f.lerp = function (t, e, i, n) {
        h = e.x;
        u = e.y;
        t.x = h + n * (i.x - h);
        t.y = u + n * (i.y - u);
        return t;
      };
      f.random = function (t, e) {
        e = e || 1;
        0;
        var i = 2 * a.random() * Math.PI;
        t.x = Math.cos(i) * e;
        t.y = Math.sin(i) * e;
        return t;
      };
      f.transformMat3 = function (t, e, i) {
        h = e.x;
        u = e.y;
        var n = i.m;
        t.x = n[0] * h + n[3] * u + n[6];
        t.y = n[1] * h + n[4] * u + n[7];
        return t;
      };
      f.transformMat4 = function (t, e, i) {
        h = e.x;
        u = e.y;
        var n = i.m;
        t.x = n[0] * h + n[4] * u + n[12];
        t.y = n[1] * h + n[5] * u + n[13];
        return t;
      };
      f.strictEquals = function (t, e) {
        return t.x === e.x && t.y === e.y;
      };
      f.equals = function (t, e, i) {
        if (undefined === i) {
          i = a.EPSILON;
        }
        return Math.abs(t.x - e.x) <= i * Math.max(1, Math.abs(t.x), Math.abs(e.x)) && Math.abs(t.y - e.y) <= i * Math.max(1, Math.abs(t.y), Math.abs(e.y));
      };
      f.angle = function (t, e) {
        f.normalize(d, t);
        f.normalize(_, e);
        var i = f.dot(d, _);
        return i > 1 ? 0 : i < -1 ? Math.PI : Math.acos(i);
      };
      f.toArray = function (t, e, i) {
        if (undefined === i) {
          i = 0;
        }
        t[i + 0] = e.x;
        t[i + 1] = e.y;
        return t;
      };
      f.fromArray = function (t, e, i) {
        if (undefined === i) {
          i = 0;
        }
        t.x = e[i + 0];
        t.y = e[i + 1];
        return t;
      };
      o.clone = function () {
        return new f(this.x, this.y);
      };
      o.set = function (t) {
        this.x = t.x;
        this.y = t.y;
        return this;
      };
      o.equals = function (t) {
        return t && this.x === t.x && this.y === t.y;
      };
      o.fuzzyEquals = function (t, e) {
        return this.x - e <= t.x && t.x <= this.x + e && this.y - e <= t.y && t.y <= this.y + e;
      };
      o.toString = function () {
        return "(" + this.x.toFixed(2) + ", " + this.y.toFixed(2) + ")";
      };
      o.lerp = function (t, e, i) {
        i = i || new f();
        var n = this.x;
        var r = this.y;
        i.x = n + (t.x - n) * e;
        i.y = r + (t.y - r) * e;
        return i;
      };
      o.clampf = function (t, e) {
        this.x = s.default.clampf(this.x, t.x, e.x);
        this.y = s.default.clampf(this.y, t.y, e.y);
        return this;
      };
      o.add = function (t, e) {
        (e = e || new f()).x = this.x + t.x;
        e.y = this.y + t.y;
        return e;
      };
      o.addSelf = function (t) {
        this.x += t.x;
        this.y += t.y;
        return this;
      };
      o.subtract = function (t) {
        this.x -= t.x;
        this.y -= t.y;
        return this;
      };
      o.multiplyScalar = function (t) {
        this.x *= t;
        this.y *= t;
        return this;
      };
      o.multiply = function (t) {
        this.x *= t.x;
        this.y *= t.y;
        return this;
      };
      o.divide = function (t) {
        this.x /= t;
        this.y /= t;
        return this;
      };
      o.negate = function () {
        this.x = -this.x;
        this.y = -this.y;
        return this;
      };
      o.dot = function (t) {
        return this.x * t.x + this.y * t.y;
      };
      o.cross = function (t) {
        return this.x * t.y - this.y * t.x;
      };
      o.len = function () {
        return Math.sqrt(this.x * this.x + this.y * this.y);
      };
      o.lengthSqr = function () {
        return this.x * this.x + this.y * this.y;
      };
      o.normalizeSelf = function () {
        var t = this.x * this.x + this.y * this.y;
        if (1 === t) {
          return this;
        }
        if (0 === t) {
          return this;
        }
        var e = 1 / Math.sqrt(t);
        this.x *= e;
        this.y *= e;
        return this;
      };
      o.normalize = function (t) {
        (t = t || new f()).x = this.x;
        t.y = this.y;
        t.normalizeSelf();
        return t;
      };
      o.angle = function (t) {
        var e = this.magSqr();
        var i = t.magSqr();
        if (0 === e || 0 === i) {
          return 0;
        }
        var n = this.dot(t) / Math.sqrt(e * i);
        n = s.default.clampf(n, -1, 1);
        return Math.acos(n);
      };
      o.signAngle = function (t) {
        var e = this.angle(t);
        return this.cross(t) < 0 ? -e : e;
      };
      o.rotate = function (t, e) {
        (e = e || new f()).x = this.x;
        e.y = this.y;
        return e.rotateSelf(t);
      };
      o.rotateSelf = function (t) {
        var e = Math.sin(t);
        var i = Math.cos(t);
        var n = this.x;
        this.x = i * n - e * this.y;
        this.y = e * n + i * this.y;
        return this;
      };
      o.project = function (t) {
        return t.multiplyScalar(this.dot(t) / t.dot(t));
      };
      o.transformMat4 = function (t, e) {
        e = e || new f();
        f.transformMat4(e, this, t);
        return e;
      };
      o.maxAxis = function () {
        return Math.max(this.x, this.y);
      };
      r = [{
        key: "ONE",
        get: function () {
          return new f(1, 1);
        }
      }, {
        key: "ZERO",
        get: function () {
          return new f(0, 0);
        }
      }, {
        key: "UP",
        get: function () {
          return new f(0, 1);
        }
      }, {
        key: "RIGHT",
        get: function () {
          return new f(1, 0);
        }
      }];
      c(f.prototype, null);
      if (r) {
        c(f, r);
      }
      Object.defineProperty(f, "prototype", {
        writable: false
      });
      return f;
    }(n.default);
    i.default = f;
    f.sub = f.subtract;
    f.mul = f.multiply;
    f.scale = f.multiplyScalar;
    f.mag = f.len;
    f.squaredMagnitude = f.lengthSqr;
    f.div = f.divide;
    f.ONE_R = f.ONE;
    f.ZERO_R = f.ZERO;
    f.UP_R = f.UP;
    f.RIGHT_R = f.RIGHT;
    var d = new f();
    var _ = new f();
    r.default.fastDefine("cc.Vec2", f, {
      x: 0,
      y: 0
    });
    cc.v2 = function (t, e) {
      return new f(t, e);
    };
    cc.Vec2 = f;
    e.exports = i.default;
  }, {
    "../platform/CCClass": 162,
    "../utils/misc": 236,
    "./utils": 258,
    "./value-type": 259
  }],
  261: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n = t("./value-type") && t("./value-type").__esModule ? t("./value-type") : {
      default: t("./value-type")
    };
    var r = t("../platform/CCClass") && t("../platform/CCClass").__esModule ? t("../platform/CCClass") : {
      default: t("../platform/CCClass")
    };
    var s = t("../utils/misc") && t("../utils/misc").__esModule ? t("../utils/misc") : {
      default: t("../utils/misc")
    };
    var a = t("./vec2") && t("./vec2").__esModule ? t("./vec2") : {
      default: t("./vec2")
    };
    var o = t("./utils");
    function l(t, e) {
      for (var i = 0; i < e.length; i++) {
        var n = e[i];
        n.enumerable = n.enumerable || false;
        n.configurable = true;
        if ("value" in n) {
          n.writable = true;
        }
        Object.defineProperty(t, n.key, n);
      }
    }
    function h(t, e) {
      return (h = Object.setPrototypeOf || function (t, e) {
        t.__proto__ = e;
        return t;
      })(t, e);
    }
    var u = 0;
    var f = 0;
    var d = 0;
    var _ = function (t) {
      _.prototype = Object.create(t.prototype);
      _.prototype.constructor = _;
      h(_, t);
      var r;
      var c = _.prototype;
      function _(e, i, n) {
        var r;
        if (undefined === e) {
          e = 0;
        }
        if (undefined === i) {
          i = 0;
        }
        if (undefined === n) {
          n = 0;
        }
        (r = t.call(this) || this).mag = _.prototype.len;
        r.magSqr = _.prototype.lengthSqr;
        r.subSelf = _.prototype.subtract;
        r.mulSelf = _.prototype.multiplyScalar;
        r.divSelf = _.prototype.divide;
        r.scaleSelf = _.prototype.multiply;
        r.negSelf = _.prototype.negate;
        r.x = undefined;
        r.y = undefined;
        r.z = undefined;
        r.angle = a.default.prototype.angle;
        r.project = a.default.prototype.project;
        if (e && "object" == typeof e) {
          r.x = e.x;
          r.y = e.y;
          r.z = e.z;
        } else {
          r.x = e;
          r.y = i;
          r.z = n;
        }
        return r;
      }
      c.sub = function (t, e) {
        return _.subtract(e || new _(), this, t);
      };
      c.mul = function (t, e) {
        return _.multiplyScalar(e || new _(), this, t);
      };
      c.div = function (t, e) {
        return _.multiplyScalar(e || new _(), this, 1 / t);
      };
      c.scale = function (t, e) {
        return _.multiply(e || new _(), this, t);
      };
      c.neg = function (t) {
        return _.negate(t || new _(), this);
      };
      _.zero = function (t) {
        t.x = 0;
        t.y = 0;
        t.z = 0;
        return t;
      };
      _.clone = function (t) {
        return new _(t.x, t.y, t.z);
      };
      _.copy = function (t, e) {
        t.x = e.x;
        t.y = e.y;
        t.z = e.z;
        return t;
      };
      _.set = function (t, e, i, n) {
        t.x = e;
        t.y = i;
        t.z = n;
        return t;
      };
      _.add = function (t, e, i) {
        t.x = e.x + i.x;
        t.y = e.y + i.y;
        t.z = e.z + i.z;
        return t;
      };
      _.subtract = function (t, e, i) {
        t.x = e.x - i.x;
        t.y = e.y - i.y;
        t.z = e.z - i.z;
        return t;
      };
      _.multiply = function (t, e, i) {
        t.x = e.x * i.x;
        t.y = e.y * i.y;
        t.z = e.z * i.z;
        return t;
      };
      _.divide = function (t, e, i) {
        t.x = e.x / i.x;
        t.y = e.y / i.y;
        t.z = e.z / i.z;
        return t;
      };
      _.ceil = function (t, e) {
        t.x = Math.ceil(e.x);
        t.y = Math.ceil(e.y);
        t.z = Math.ceil(e.z);
        return t;
      };
      _.floor = function (t, e) {
        t.x = Math.floor(e.x);
        t.y = Math.floor(e.y);
        t.z = Math.floor(e.z);
        return t;
      };
      _.min = function (t, e, i) {
        t.x = Math.min(e.x, i.x);
        t.y = Math.min(e.y, i.y);
        t.z = Math.min(e.z, i.z);
        return t;
      };
      _.max = function (t, e, i) {
        t.x = Math.max(e.x, i.x);
        t.y = Math.max(e.y, i.y);
        t.z = Math.max(e.z, i.z);
        return t;
      };
      _.round = function (t, e) {
        t.x = Math.round(e.x);
        t.y = Math.round(e.y);
        t.z = Math.round(e.z);
        return t;
      };
      _.multiplyScalar = function (t, e, i) {
        t.x = e.x * i;
        t.y = e.y * i;
        t.z = e.z * i;
        return t;
      };
      _.scaleAndAdd = function (t, e, i, n) {
        t.x = e.x + i.x * n;
        t.y = e.y + i.y * n;
        t.z = e.z + i.z * n;
        return t;
      };
      _.distance = function (t, e) {
        u = e.x - t.x;
        f = e.y - t.y;
        d = e.z - t.z;
        return Math.sqrt(u * u + f * f + d * d);
      };
      _.squaredDistance = function (t, e) {
        u = e.x - t.x;
        f = e.y - t.y;
        d = e.z - t.z;
        return u * u + f * f + d * d;
      };
      _.len = function (t) {
        u = t.x;
        f = t.y;
        d = t.z;
        return Math.sqrt(u * u + f * f + d * d);
      };
      _.lengthSqr = function (t) {
        u = t.x;
        f = t.y;
        d = t.z;
        return u * u + f * f + d * d;
      };
      _.negate = function (t, e) {
        t.x = -e.x;
        t.y = -e.y;
        t.z = -e.z;
        return t;
      };
      _.inverse = function (t, e) {
        t.x = 1 / e.x;
        t.y = 1 / e.y;
        t.z = 1 / e.z;
        return t;
      };
      _.inverseSafe = function (t, e) {
        u = e.x;
        f = e.y;
        d = e.z;
        if (Math.abs(u) < o.EPSILON) {
          t.x = 0;
        } else {
          t.x = 1 / u;
        }
        if (Math.abs(f) < o.EPSILON) {
          t.y = 0;
        } else {
          t.y = 1 / f;
        }
        if (Math.abs(d) < o.EPSILON) {
          t.z = 0;
        } else {
          t.z = 1 / d;
        }
        return t;
      };
      _.normalize = function (t, e) {
        u = e.x;
        f = e.y;
        d = e.z;
        var i = u * u + f * f + d * d;
        if (i > 0) {
          i = 1 / Math.sqrt(i);
          t.x = u * i;
          t.y = f * i;
          t.z = d * i;
        }
        return t;
      };
      _.dot = function (t, e) {
        return t.x * e.x + t.y * e.y + t.z * e.z;
      };
      _.cross = function (t, e, i) {
        var n = e.x;
        var r = e.y;
        var s = e.z;
        var a = i.x;
        var o = i.y;
        var c = i.z;
        t.x = r * c - s * o;
        t.y = s * a - n * c;
        t.z = n * o - r * a;
        return t;
      };
      _.lerp = function (t, e, i, n) {
        t.x = e.x + n * (i.x - e.x);
        t.y = e.y + n * (i.y - e.y);
        t.z = e.z + n * (i.z - e.z);
        return t;
      };
      _.random = function (t, e) {
        e = e || 1;
        0;
        var i = 2 * o.random() * Math.PI;
        0;
        var n = 2 * o.random() - 1;
        var r = Math.sqrt(1 - n * n);
        t.x = r * Math.cos(i) * e;
        t.y = r * Math.sin(i) * e;
        t.z = n * e;
        return t;
      };
      _.transformMat4 = function (t, e, i) {
        u = e.x;
        f = e.y;
        d = e.z;
        var n = i.m;
        var r = n[3] * u + n[7] * f + n[11] * d + n[15];
        r = r ? 1 / r : 1;
        t.x = (n[0] * u + n[4] * f + n[8] * d + n[12]) * r;
        t.y = (n[1] * u + n[5] * f + n[9] * d + n[13]) * r;
        t.z = (n[2] * u + n[6] * f + n[10] * d + n[14]) * r;
        return t;
      };
      _.transformMat4Normal = function (t, e, i) {
        u = e.x;
        f = e.y;
        d = e.z;
        var n = i.m;
        var r = n[3] * u + n[7] * f + n[11] * d;
        r = r ? 1 / r : 1;
        t.x = (n[0] * u + n[4] * f + n[8] * d) * r;
        t.y = (n[1] * u + n[5] * f + n[9] * d) * r;
        t.z = (n[2] * u + n[6] * f + n[10] * d) * r;
        return t;
      };
      _.transformMat3 = function (t, e, i) {
        u = e.x;
        f = e.y;
        d = e.z;
        var n = i.m;
        t.x = u * n[0] + f * n[3] + d * n[6];
        t.y = u * n[1] + f * n[4] + d * n[7];
        t.z = u * n[2] + f * n[5] + d * n[8];
        return t;
      };
      _.transformAffine = function (t, e, i) {
        u = e.x;
        f = e.y;
        d = e.z;
        var n = i.m;
        t.x = n[0] * u + n[1] * f + n[2] * d + n[3];
        t.y = n[4] * u + n[5] * f + n[6] * d + n[7];
        t.x = n[8] * u + n[9] * f + n[10] * d + n[11];
        return t;
      };
      _.transformQuat = function (t, e, i) {
        var n = i.w * e.x + i.y * e.z - i.z * e.y;
        var r = i.w * e.y + i.z * e.x - i.x * e.z;
        var s = i.w * e.z + i.x * e.y - i.y * e.x;
        var a = -i.x * e.x - i.y * e.y - i.z * e.z;
        t.x = n * i.w + a * -i.x + r * -i.z - s * -i.y;
        t.y = r * i.w + a * -i.y + s * -i.x - n * -i.z;
        t.z = s * i.w + a * -i.z + n * -i.y - r * -i.x;
        return t;
      };
      _.transformRTS = function (t, e, i, n, r) {
        var s = e.x * r.x;
        var a = e.y * r.y;
        var o = e.z * r.z;
        var c = i.w * s + i.y * o - i.z * a;
        var l = i.w * a + i.z * s - i.x * o;
        var h = i.w * o + i.x * a - i.y * s;
        var u = -i.x * s - i.y * a - i.z * o;
        t.x = c * i.w + u * -i.x + l * -i.z - h * -i.y + n.x;
        t.y = l * i.w + u * -i.y + h * -i.x - c * -i.z + n.y;
        t.z = h * i.w + u * -i.z + c * -i.y - l * -i.x + n.z;
        return t;
      };
      _.transformInverseRTS = function (t, e, i, n, r) {
        var s = e.x - n.x;
        var a = e.y - n.y;
        var o = e.z - n.z;
        var c = i.w * s - i.y * o + i.z * a;
        var l = i.w * a - i.z * s + i.x * o;
        var h = i.w * o - i.x * a + i.y * s;
        var u = i.x * s + i.y * a + i.z * o;
        t.x = (c * i.w + u * i.x + l * i.z - h * i.y) / r.x;
        t.y = (l * i.w + u * i.y + h * i.x - c * i.z) / r.y;
        t.z = (h * i.w + u * i.z + c * i.y - l * i.x) / r.z;
        return t;
      };
      _.rotateX = function (t, e, i, n) {
        u = e.x - i.x;
        f = e.y - i.y;
        d = e.z - i.z;
        var r = Math.cos(n);
        var s = Math.sin(n);
        var a = u;
        var o = f * r - d * s;
        var c = f * s + d * r;
        t.x = a + i.x;
        t.y = o + i.y;
        t.z = c + i.z;
        return t;
      };
      _.rotateY = function (t, e, i, n) {
        u = e.x - i.x;
        f = e.y - i.y;
        d = e.z - i.z;
        var r = Math.cos(n);
        var s = Math.sin(n);
        var a = d * s + u * r;
        var o = f;
        var c = d * r - u * s;
        t.x = a + i.x;
        t.y = o + i.y;
        t.z = c + i.z;
        return t;
      };
      _.rotateZ = function (t, e, i, n) {
        u = e.x - i.x;
        f = e.y - i.y;
        d = e.z - i.z;
        var r = Math.cos(n);
        var s = Math.sin(n);
        var a = u * r - f * s;
        var o = u * s + f * r;
        var c = d;
        t.x = a + i.x;
        t.y = o + i.y;
        t.z = c + i.z;
        return t;
      };
      _.strictEquals = function (t, e) {
        return t.x === e.x && t.y === e.y && t.z === e.z;
      };
      _.equals = function (t, e, i) {
        if (undefined === i) {
          i = o.EPSILON;
        }
        var n = t.x;
        var r = t.y;
        var s = t.z;
        var a = e.x;
        var c = e.y;
        var l = e.z;
        return Math.abs(n - a) <= i * Math.max(1, Math.abs(n), Math.abs(a)) && Math.abs(r - c) <= i * Math.max(1, Math.abs(r), Math.abs(c)) && Math.abs(s - l) <= i * Math.max(1, Math.abs(s), Math.abs(l));
      };
      _.angle = function (t, e) {
        _.normalize(p, t);
        _.normalize(v, e);
        var i = _.dot(p, v);
        return i > 1 ? 0 : i < -1 ? Math.PI : Math.acos(i);
      };
      _.projectOnPlane = function (t, e, i) {
        return _.subtract(t, e, _.project(t, e, i));
      };
      _.project = function (t, e, i) {
        var n = _.lengthSqr(i);
        return n < 1e-6 ? _.set(t, 0, 0, 0) : _.multiplyScalar(t, i, _.dot(e, i) / n);
      };
      _.toArray = function (t, e, i) {
        if (undefined === i) {
          i = 0;
        }
        t[i + 0] = e.x;
        t[i + 1] = e.y;
        t[i + 2] = e.z;
        return t;
      };
      _.fromArray = function (t, e, i) {
        if (undefined === i) {
          i = 0;
        }
        t.x = e[i + 0];
        t.y = e[i + 1];
        t.z = e[i + 2];
        return t;
      };
      c.clone = function () {
        return new _(this.x, this.y, this.z);
      };
      c.set = function (t) {
        this.x = t.x;
        this.y = t.y;
        this.z = t.z;
        return this;
      };
      c.equals = function (t) {
        return t && this.x === t.x && this.y === t.y && this.z === t.z;
      };
      c.fuzzyEquals = function (t, e) {
        return this.x - e <= t.x && t.x <= this.x + e && this.y - e <= t.y && t.y <= this.y + e && this.z - e <= t.z && t.z <= this.z + e;
      };
      c.toString = function () {
        return "(" + this.x.toFixed(2) + ", " + this.y.toFixed(2) + ", " + this.z.toFixed(2) + ")";
      };
      c.lerp = function (t, e, i) {
        i = i || new _();
        _.lerp(i, this, t, e);
        return i;
      };
      c.clampf = function (t, e) {
        this.x = s.default.clampf(this.x, t.x, e.x);
        this.y = s.default.clampf(this.y, t.y, e.y);
        this.z = s.default.clampf(this.z, t.z, e.z);
        return this;
      };
      c.addSelf = function (t) {
        this.x += t.x;
        this.y += t.y;
        this.z += t.z;
        return this;
      };
      c.add = function (t, e) {
        (e = e || new _()).x = this.x + t.x;
        e.y = this.y + t.y;
        e.z = this.z + t.z;
        return e;
      };
      c.subtract = function (t) {
        this.x -= t.x;
        this.y -= t.y;
        this.z -= t.z;
        return this;
      };
      c.multiplyScalar = function (t) {
        this.x *= t;
        this.y *= t;
        this.z *= t;
        return this;
      };
      c.multiply = function (t) {
        this.x *= t.x;
        this.y *= t.y;
        this.z *= t.z;
        return this;
      };
      c.divide = function (t) {
        this.x /= t;
        this.y /= t;
        this.z /= t;
        return this;
      };
      c.negate = function () {
        this.x = -this.x;
        this.y = -this.y;
        this.z = -this.z;
        return this;
      };
      c.dot = function (t) {
        return this.x * t.x + this.y * t.y + this.z * t.z;
      };
      c.cross = function (t, e) {
        e = e || new _();
        _.cross(e, this, t);
        return e;
      };
      c.len = function () {
        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
      };
      c.lengthSqr = function () {
        return this.x * this.x + this.y * this.y + this.z * this.z;
      };
      c.normalizeSelf = function () {
        _.normalize(this, this);
        return this;
      };
      c.normalize = function (t) {
        t = t || new _();
        _.normalize(t, this);
        return t;
      };
      c.transformMat4 = function (t, e) {
        e = e || new _();
        _.transformMat4(e, this, t);
        return e;
      };
      c.maxAxis = function () {
        return Math.max(this.x, this.y, this.z);
      };
      c.signAngle = function (t) {
        var e = new a.default(this.x, this.y);
        var i = new a.default(t.x, t.y);
        return e.signAngle(i);
      };
      c.rotate = function (t, e) {
        return a.default.prototype.rotate.call(this, t, e);
      };
      c.rotateSelf = function (t) {
        return a.default.prototype.rotateSelf.call(this, t);
      };
      r = [{
        key: "ONE",
        get: function () {
          return new _(1, 1, 1);
        }
      }, {
        key: "ZERO",
        get: function () {
          return new _();
        }
      }, {
        key: "UP",
        get: function () {
          return new _(0, 1, 0);
        }
      }, {
        key: "RIGHT",
        get: function () {
          return new _(1, 0, 0);
        }
      }, {
        key: "FORWARD",
        get: function () {
          return new _(0, 0, 1);
        }
      }];
      l(_.prototype, null);
      if (r) {
        l(_, r);
      }
      Object.defineProperty(_, "prototype", {
        writable: false
      });
      return _;
    }(n.default);
    i.default = _;
    _.sub = _.subtract;
    _.mul = _.multiply;
    _.scale = _.multiplyScalar;
    _.mag = _.len;
    _.squaredMagnitude = _.lengthSqr;
    _.div = _.divide;
    _.ONE_R = _.ONE;
    _.ZERO_R = _.ZERO;
    _.UP_R = _.UP;
    _.RIGHT_R = _.RIGHT;
    _.FRONT_R = _.FORWARD;
    var p = new _();
    var v = new _();
    r.default.fastDefine("cc.Vec3", _, {
      x: 0,
      y: 0,
      z: 0
    });
    cc.v3 = function (t, e, i) {
      return new _(t, e, i);
    };
    cc.Vec3 = _;
    e.exports = i.default;
  }, {
    "../platform/CCClass": 162,
    "../utils/misc": 236,
    "./utils": 258,
    "./value-type": 259,
    "./vec2": 260
  }],
  262: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    i.v4 = _;
    var n = t("../platform/CCClass") && t("../platform/CCClass").__esModule ? t("../platform/CCClass") : {
      default: t("../platform/CCClass")
    };
    var r = t("./value-type") && t("./value-type").__esModule ? t("./value-type") : {
      default: t("./value-type")
    };
    var s = t("./utils");
    function o(t, e) {
      for (var i = 0; i < e.length; i++) {
        var n = e[i];
        n.enumerable = n.enumerable || false;
        n.configurable = true;
        if ("value" in n) {
          n.writable = true;
        }
        Object.defineProperty(t, n.key, n);
      }
    }
    function c(t, e) {
      return (c = Object.setPrototypeOf || function (t, e) {
        t.__proto__ = e;
        return t;
      })(t, e);
    }
    var l = 0;
    var h = 0;
    var u = 0;
    var f = 0;
    var d = function (t) {
      d.prototype = Object.create(t.prototype);
      d.prototype.constructor = d;
      c(d, t);
      var r;
      var a = d.prototype;
      function d(e, i, n, r) {
        var s;
        if (undefined === e) {
          e = 0;
        }
        if (undefined === i) {
          i = 0;
        }
        if (undefined === n) {
          n = 0;
        }
        if (undefined === r) {
          r = 0;
        }
        (s = t.call(this) || this).mag = d.prototype.len;
        s.magSqr = d.prototype.lengthSqr;
        s.subSelf = d.prototype.subtract;
        s.mulSelf = d.prototype.multiplyScalar;
        s.divSelf = d.prototype.divide;
        s.scaleSelf = d.prototype.multiply;
        s.negSelf = d.prototype.negate;
        s.x = undefined;
        s.y = undefined;
        s.z = undefined;
        s.w = undefined;
        if (e && "object" == typeof e) {
          s.x = e.x;
          s.y = e.y;
          s.z = e.z;
          s.w = e.w;
        } else {
          s.x = e;
          s.y = i;
          s.z = n;
          s.w = r;
        }
        return s;
      }
      a.sub = function (t, e) {
        return d.subtract(e || new d(), this, t);
      };
      a.mul = function (t, e) {
        return d.multiplyScalar(e || new d(), this, t);
      };
      a.div = function (t, e) {
        return d.multiplyScalar(e || new d(), this, 1 / t);
      };
      a.scale = function (t, e) {
        return d.multiply(e || new d(), this, t);
      };
      a.neg = function (t) {
        return d.negate(t || new d(), this);
      };
      d.clone = function (t) {
        return new d(t.x, t.y, t.z, t.w);
      };
      d.copy = function (t, e) {
        t.x = e.x;
        t.y = e.y;
        t.z = e.z;
        t.w = e.w;
        return t;
      };
      d.set = function (t, e, i, n, r) {
        t.x = e;
        t.y = i;
        t.z = n;
        t.w = r;
        return t;
      };
      d.add = function (t, e, i) {
        t.x = e.x + i.x;
        t.y = e.y + i.y;
        t.z = e.z + i.z;
        t.w = e.w + i.w;
        return t;
      };
      d.subtract = function (t, e, i) {
        t.x = e.x - i.x;
        t.y = e.y - i.y;
        t.z = e.z - i.z;
        t.w = e.w - i.w;
        return t;
      };
      d.multiply = function (t, e, i) {
        t.x = e.x * i.x;
        t.y = e.y * i.y;
        t.z = e.z * i.z;
        t.w = e.w * i.w;
        return t;
      };
      d.divide = function (t, e, i) {
        t.x = e.x / i.x;
        t.y = e.y / i.y;
        t.z = e.z / i.z;
        t.w = e.w / i.w;
        return t;
      };
      d.ceil = function (t, e) {
        t.x = Math.ceil(e.x);
        t.y = Math.ceil(e.y);
        t.z = Math.ceil(e.z);
        t.w = Math.ceil(e.w);
        return t;
      };
      d.floor = function (t, e) {
        t.x = Math.floor(e.x);
        t.y = Math.floor(e.y);
        t.z = Math.floor(e.z);
        t.w = Math.floor(e.w);
        return t;
      };
      d.min = function (t, e, i) {
        t.x = Math.min(e.x, i.x);
        t.y = Math.min(e.y, i.y);
        t.z = Math.min(e.z, i.z);
        t.w = Math.min(e.w, i.w);
        return t;
      };
      d.max = function (t, e, i) {
        t.x = Math.max(e.x, i.x);
        t.y = Math.max(e.y, i.y);
        t.z = Math.max(e.z, i.z);
        t.w = Math.max(e.w, i.w);
        return t;
      };
      d.round = function (t, e) {
        t.x = Math.round(e.x);
        t.y = Math.round(e.y);
        t.z = Math.round(e.z);
        t.w = Math.round(e.w);
        return t;
      };
      d.multiplyScalar = function (t, e, i) {
        t.x = e.x * i;
        t.y = e.y * i;
        t.z = e.z * i;
        t.w = e.w * i;
        return t;
      };
      d.scaleAndAdd = function (t, e, i, n) {
        t.x = e.x + i.x * n;
        t.y = e.y + i.y * n;
        t.z = e.z + i.z * n;
        t.w = e.w + i.w * n;
        return t;
      };
      d.distance = function (t, e) {
        var i = e.x - t.x;
        var n = e.y - t.y;
        var r = e.z - t.z;
        var s = e.w - t.w;
        return Math.sqrt(i * i + n * n + r * r + s * s);
      };
      d.squaredDistance = function (t, e) {
        var i = e.x - t.x;
        var n = e.y - t.y;
        var r = e.z - t.z;
        var s = e.w - t.w;
        return i * i + n * n + r * r + s * s;
      };
      d.len = function (t) {
        l = t.x;
        h = t.y;
        u = t.z;
        f = t.w;
        return Math.sqrt(l * l + h * h + u * u + f * f);
      };
      d.lengthSqr = function (t) {
        l = t.x;
        h = t.y;
        u = t.z;
        f = t.w;
        return l * l + h * h + u * u + f * f;
      };
      d.negate = function (t, e) {
        t.x = -e.x;
        t.y = -e.y;
        t.z = -e.z;
        t.w = -e.w;
        return t;
      };
      d.inverse = function (t, e) {
        t.x = 1 / e.x;
        t.y = 1 / e.y;
        t.z = 1 / e.z;
        t.w = 1 / e.w;
        return t;
      };
      d.inverseSafe = function (t, e) {
        l = e.x;
        h = e.y;
        u = e.z;
        f = e.w;
        if (Math.abs(l) < s.EPSILON) {
          t.x = 0;
        } else {
          t.x = 1 / l;
        }
        if (Math.abs(h) < s.EPSILON) {
          t.y = 0;
        } else {
          t.y = 1 / h;
        }
        if (Math.abs(u) < s.EPSILON) {
          t.z = 0;
        } else {
          t.z = 1 / u;
        }
        if (Math.abs(f) < s.EPSILON) {
          t.w = 0;
        } else {
          t.w = 1 / f;
        }
        return t;
      };
      d.normalize = function (t, e) {
        l = e.x;
        h = e.y;
        u = e.z;
        f = e.w;
        var i = l * l + h * h + u * u + f * f;
        if (i > 0) {
          i = 1 / Math.sqrt(i);
          t.x = l * i;
          t.y = h * i;
          t.z = u * i;
          t.w = f * i;
        }
        return t;
      };
      d.dot = function (t, e) {
        return t.x * e.x + t.y * e.y + t.z * e.z + t.w * e.w;
      };
      d.lerp = function (t, e, i, n) {
        t.x = e.x + n * (i.x - e.x);
        t.y = e.y + n * (i.y - e.y);
        t.z = e.z + n * (i.z - e.z);
        t.w = e.w + n * (i.w - e.w);
        return t;
      };
      d.random = function (t, e) {
        e = e || 1;
        0;
        var i = 2 * s.random() * Math.PI;
        0;
        var n = 2 * s.random() - 1;
        var r = Math.sqrt(1 - n * n);
        t.x = r * Math.cos(i) * e;
        t.y = r * Math.sin(i) * e;
        t.z = n * e;
        t.w = 0;
        return t;
      };
      d.transformMat4 = function (t, e, i) {
        l = e.x;
        h = e.y;
        u = e.z;
        f = e.w;
        var n = i.m;
        t.x = n[0] * l + n[4] * h + n[8] * u + n[12] * f;
        t.y = n[1] * l + n[5] * h + n[9] * u + n[13] * f;
        t.z = n[2] * l + n[6] * h + n[10] * u + n[14] * f;
        t.w = n[3] * l + n[7] * h + n[11] * u + n[15] * f;
        return t;
      };
      d.transformAffine = function (t, e, i) {
        l = e.x;
        h = e.y;
        u = e.z;
        f = e.w;
        var n = i.m;
        t.x = n[0] * l + n[1] * h + n[2] * u + n[3] * f;
        t.y = n[4] * l + n[5] * h + n[6] * u + n[7] * f;
        t.x = n[8] * l + n[9] * h + n[10] * u + n[11] * f;
        t.w = e.w;
        return t;
      };
      d.transformQuat = function (t, e, i) {
        var n = e.x;
        var r = e.y;
        var s = e.z;
        l = i.x;
        h = i.y;
        u = i.z;
        var a = (f = i.w) * n + h * s - u * r;
        var o = f * r + u * n - l * s;
        var c = f * s + l * r - h * n;
        var d = -l * n - h * r - u * s;
        t.x = a * f + d * -l + o * -u - c * -h;
        t.y = o * f + d * -h + c * -l - a * -u;
        t.z = c * f + d * -u + a * -h - o * -l;
        t.w = e.w;
        return t;
      };
      d.strictEquals = function (t, e) {
        return t.x === e.x && t.y === e.y && t.z === e.z && t.w === e.w;
      };
      d.equals = function (t, e, i) {
        if (undefined === i) {
          i = s.EPSILON;
        }
        return Math.abs(t.x - e.x) <= i * Math.max(1, Math.abs(t.x), Math.abs(e.x)) && Math.abs(t.y - e.y) <= i * Math.max(1, Math.abs(t.y), Math.abs(e.y)) && Math.abs(t.z - e.z) <= i * Math.max(1, Math.abs(t.z), Math.abs(e.z)) && Math.abs(t.w - e.w) <= i * Math.max(1, Math.abs(t.w), Math.abs(e.w));
      };
      d.toArray = function (t, e, i) {
        if (undefined === i) {
          i = 0;
        }
        t[i + 0] = e.x;
        t[i + 1] = e.y;
        t[i + 2] = e.z;
        t[i + 3] = e.w;
        return t;
      };
      d.fromArray = function (t, e, i) {
        if (undefined === i) {
          i = 0;
        }
        t.x = e[i + 0];
        t.y = e[i + 1];
        t.z = e[i + 2];
        t.w = e[i + 3];
        return t;
      };
      a.clone = function () {
        return new d(this.x, this.y, this.z, this.w);
      };
      a.set = function (t, e, i, n) {
        if (t && "object" == typeof t) {
          this.x = t.x;
          this.y = t.y;
          this.z = t.z;
          this.w = t.w;
        } else {
          this.x = t || 0;
          this.y = e || 0;
          this.z = i || 0;
          this.w = n || 0;
        }
        return this;
      };
      a.equals = function (t, e) {
        if (undefined === e) {
          e = s.EPSILON;
        }
        return Math.abs(this.x - t.x) <= e * Math.max(1, Math.abs(this.x), Math.abs(t.x)) && Math.abs(this.y - t.y) <= e * Math.max(1, Math.abs(this.y), Math.abs(t.y)) && Math.abs(this.z - t.z) <= e * Math.max(1, Math.abs(this.z), Math.abs(t.z)) && Math.abs(this.w - t.w) <= e * Math.max(1, Math.abs(this.w), Math.abs(t.w));
      };
      a.equals4f = function (t, e, i, n, r) {
        if (undefined === r) {
          r = s.EPSILON;
        }
        return Math.abs(this.x - t) <= r * Math.max(1, Math.abs(this.x), Math.abs(t)) && Math.abs(this.y - e) <= r * Math.max(1, Math.abs(this.y), Math.abs(e)) && Math.abs(this.z - i) <= r * Math.max(1, Math.abs(this.z), Math.abs(i)) && Math.abs(this.w - n) <= r * Math.max(1, Math.abs(this.w), Math.abs(n));
      };
      a.strictEquals = function (t) {
        return this.x === t.x && this.y === t.y && this.z === t.z && this.w === t.w;
      };
      a.strictEquals4f = function (t, e, i, n) {
        return this.x === t && this.y === e && this.z === i && this.w === n;
      };
      a.lerp = function (t, e) {
        l = this.x;
        h = this.y;
        u = this.z;
        f = this.w;
        this.x = l + e * (t.x - l);
        this.y = h + e * (t.y - h);
        this.z = u + e * (t.z - u);
        this.w = f + e * (t.w - f);
        return this;
      };
      a.toString = function () {
        return "(" + this.x.toFixed(2) + ", " + this.y.toFixed(2) + ", " + this.z.toFixed(2) + ", " + this.w.toFixed(2) + ")";
      };
      a.clampf = function (t, e) {
        0;
        this.x = s.clamp(this.x, t.x, e.x);
        0;
        this.y = s.clamp(this.y, t.y, e.y);
        0;
        this.z = s.clamp(this.z, t.z, e.z);
        0;
        this.w = s.clamp(this.w, t.w, e.w);
        return this;
      };
      a.addSelf = function (t) {
        this.x += t.x;
        this.y += t.y;
        this.z += t.z;
        this.w += t.w;
        return this;
      };
      a.add = function (t, e) {
        (e = e || new d()).x = this.x + t.x;
        e.y = this.y + t.y;
        e.z = this.z + t.z;
        e.w = this.w + t.w;
        return e;
      };
      a.subtract = function (t, e) {
        (e = e || new d()).x = this.x - t.x;
        e.y = this.y - t.y;
        e.z = this.z - t.z;
        e.w = this.w - t.w;
        return e;
      };
      a.multiplyScalar = function (t) {
        this.x *= t;
        this.y *= t;
        this.z *= t;
        this.w *= t;
        return this;
      };
      a.multiply = function (t) {
        this.x *= t.x;
        this.y *= t.y;
        this.z *= t.z;
        this.w *= t.w;
        return this;
      };
      a.divide = function (t) {
        this.x /= t;
        this.y /= t;
        this.z /= t;
        this.w /= t;
        return this;
      };
      a.negate = function () {
        this.x = -this.x;
        this.y = -this.y;
        this.z = -this.z;
        this.w = -this.w;
        return this;
      };
      a.dot = function (t) {
        return this.x * t.x + this.y * t.y + this.z * t.z + this.w * t.w;
      };
      a.cross = function (t, e) {
        e = e || new d();
        var i = this.x;
        var n = this.y;
        var r = this.z;
        var s = t.x;
        var a = t.y;
        var o = t.z;
        e.x = n * o - r * a;
        e.y = r * s - i * o;
        e.z = i * a - n * s;
        return e;
      };
      a.len = function () {
        var t = this.x;
        var e = this.y;
        var i = this.z;
        var n = this.w;
        return Math.sqrt(t * t + e * e + i * i + n * n);
      };
      a.lengthSqr = function () {
        var t = this.x;
        var e = this.y;
        var i = this.z;
        var n = this.w;
        return t * t + e * e + i * i + n * n;
      };
      a.normalizeSelf = function () {
        this.normalize(this);
        return this;
      };
      a.normalize = function (t) {
        t = t || new d();
        l = this.x;
        h = this.y;
        u = this.z;
        f = this.w;
        var e = l * l + h * h + u * u + f * f;
        if (e > 0) {
          e = 1 / Math.sqrt(e);
          t.x = l * e;
          t.y = h * e;
          t.z = u * e;
          t.w = f * e;
        }
        return t;
      };
      a.transformMat4 = function (t, e) {
        e = e || new d();
        l = this.x;
        h = this.y;
        u = this.z;
        f = this.w;
        var i = t.m;
        e.x = i[0] * l + i[4] * h + i[8] * u + i[12] * f;
        e.y = i[1] * l + i[5] * h + i[9] * u + i[13] * f;
        e.z = i[2] * l + i[6] * h + i[10] * u + i[14] * f;
        e.w = i[3] * l + i[7] * h + i[11] * u + i[15] * f;
        return e;
      };
      a.maxAxis = function () {
        return Math.max(this.x, this.y, this.z, this.w);
      };
      r = [{
        key: "ZERO",
        get: function () {
          return new d(0, 0, 0, 0);
        }
      }, {
        key: "ONE",
        get: function () {
          return new d(1, 1, 1, 1);
        }
      }, {
        key: "NEG_ONE",
        get: function () {
          return new d(-1, -1, -1, -1);
        }
      }];
      o(d.prototype, null);
      if (r) {
        o(d, r);
      }
      Object.defineProperty(d, "prototype", {
        writable: false
      });
      return d;
    }(r.default);
    function _(t, e, i, n) {
      return new d(t, e, i, n);
    }
    i.default = d;
    d.sub = d.subtract;
    d.mul = d.multiply;
    d.div = d.divide;
    d.scale = d.multiplyScalar;
    d.mag = d.len;
    d.squaredMagnitude = d.lengthSqr;
    d.ZERO_R = d.ZERO;
    d.ONE_R = d.ONE;
    d.NEG_ONE_R = d.NEG_ONE;
    n.default.fastDefine("cc.Vec4", d, {
      x: 0,
      y: 0,
      z: 0,
      w: 0
    });
    cc.v4 = _;
    cc.Vec4 = d;
  }, {
    "../platform/CCClass": 162,
    "./utils": 258,
    "./value-type": 259
  }],
  263: [function () {
    "use strict";

    cc.js;
  }, {}],
  264: [function (t) {
    "use strict";

    t("./core/CCGame");
    t("./actions");
    t("./audio/CCAudio");
  }, {
    "./actions": 7,
    "./audio/CCAudio": 20,
    "./core/CCGame": 25
  }],
  265: [function (t, e) {
    "use strict";

    var i = t("../core/assets/CCAsset");
    var n = t("../core/assets/CCSpriteFrame");
    var r = cc.Class({
      name: "cc.ParticleAsset",
      extends: i,
      properties: {
        spriteFrame: {
          default: null,
          type: n
        }
      }
    });
    cc.ParticleAsset = e.exports = r;
  }, {
    "../core/assets/CCAsset": 57,
    "../core/assets/CCSpriteFrame": 69
  }],
  266: [function (t, e) {
    "use strict";

    var i = t("../core/platform/CCMacro");
    var n = t("./CCParticleAsset");
    var r = t("../core/components/CCRenderComponent");
    var s = t("../core/CCDebug");
    var a = t("../core/utils/texture-util");
    t("../core/renderer/render-flow");
    var o = t("./particle-simulator");
    t("../core/assets/material/CCMaterial");
    var c = t("../core/utils/blend-func");
    var l = cc.Enum({
      GRAVITY: 0,
      RADIUS: 1
    });
    var h = cc.Enum({
      FREE: 0,
      RELATIVE: 1,
      GROUPED: 2
    });
    var u = {
      preview: {
        default: true,
        editorOnly: true,
        notify: false,
        animatable: false,
        tooltip: false
      },
      _custom: false,
      custom: {
        get: function () {
          return this._custom;
        },
        set: function (t) {
          if (this._custom !== t) {
            this._custom = t;
            this._applyFile();
          }
        },
        animatable: false,
        tooltip: false
      },
      _file: {
        default: null,
        type: n
      },
      file: {
        get: function () {
          return this._file;
        },
        set: function (t) {
          if (this._file !== t) {
            this._file = t;
            if (t) {
              this._applyFile();
            } else {
              this.custom = true;
            }
          }
        },
        animatable: false,
        type: n,
        tooltip: false
      },
      _spriteFrame: {
        default: null,
        type: cc.SpriteFrame
      },
      spriteFrame: {
        get: function () {
          return this._spriteFrame;
        },
        set: function (t) {
          var e = this._renderSpriteFrame;
          if (e !== t) {
            this._renderSpriteFrame = t;
            if (!(t && !t._uuid)) {
              this._spriteFrame = t;
            }
            this._applySpriteFrame(e);
          }
        },
        type: cc.SpriteFrame,
        tooltip: false
      },
      _texture: {
        default: null,
        type: cc.Texture2D,
        editorOnly: true
      },
      texture: {
        get: function () {
          return this._getTexture();
        },
        set: function () {},
        type: cc.Texture2D,
        tooltip: false,
        readonly: true,
        visible: false,
        animatable: false
      },
      particleCount: {
        visible: false,
        get: function () {
          return this._simulator.particles.length;
        },
        readonly: true
      },
      _stopped: true,
      stopped: {
        get: function () {
          return this._stopped;
        },
        animatable: false,
        visible: false
      },
      playOnLoad: true,
      autoRemoveOnFinish: {
        default: false,
        animatable: false,
        tooltip: false
      },
      active: {
        get: function () {
          return this._simulator.active;
        },
        visible: false
      },
      totalParticles: 150,
      duration: -1,
      emissionRate: 10,
      life: 1,
      lifeVar: 0,
      _startColor: null,
      startColor: {
        type: cc.Color,
        get: function () {
          return this._startColor;
        },
        set: function (t) {
          this._startColor.r = t.r;
          this._startColor.g = t.g;
          this._startColor.b = t.b;
          this._startColor.a = t.a;
        }
      },
      _startColorVar: null,
      startColorVar: {
        type: cc.Color,
        get: function () {
          return this._startColorVar;
        },
        set: function (t) {
          this._startColorVar.r = t.r;
          this._startColorVar.g = t.g;
          this._startColorVar.b = t.b;
          this._startColorVar.a = t.a;
        }
      },
      _endColor: null,
      endColor: {
        type: cc.Color,
        get: function () {
          return this._endColor;
        },
        set: function (t) {
          this._endColor.r = t.r;
          this._endColor.g = t.g;
          this._endColor.b = t.b;
          this._endColor.a = t.a;
        }
      },
      _endColorVar: null,
      endColorVar: {
        type: cc.Color,
        get: function () {
          return this._endColorVar;
        },
        set: function (t) {
          this._endColorVar.r = t.r;
          this._endColorVar.g = t.g;
          this._endColorVar.b = t.b;
          this._endColorVar.a = t.a;
        }
      },
      angle: 90,
      angleVar: 20,
      startSize: 50,
      startSizeVar: 0,
      endSize: 0,
      endSizeVar: 0,
      startSpin: 0,
      startSpinVar: 0,
      endSpin: 0,
      endSpinVar: 0,
      sourcePos: cc.Vec2.ZERO,
      posVar: cc.Vec2.ZERO,
      _positionType: {
        default: h.FREE,
        formerlySerializedAs: "positionType"
      },
      positionType: {
        type: h,
        get: function () {
          return this._positionType;
        },
        set: function (t) {
          this._positionType = t;
          this._updateMaterial();
        }
      },
      emitterMode: {
        default: l.GRAVITY,
        type: l
      },
      gravity: cc.Vec2.ZERO,
      speed: 180,
      speedVar: 50,
      tangentialAccel: 80,
      tangentialAccelVar: 0,
      radialAccel: 0,
      radialAccelVar: 0,
      rotationIsDir: false,
      startRadius: 0,
      startRadiusVar: 0,
      endRadius: 0,
      endRadiusVar: 0,
      rotatePerS: 0,
      rotatePerSVar: 0
    };
    var f = cc.Class({
      name: "cc.ParticleSystem",
      extends: r,
      mixins: [c],
      editor: false,
      ctor: function () {
        this.initProperties();
      },
      initProperties: function () {
        this._previewTimer = null;
        this._focused = false;
        this._aspectRatio = 1;
        this._simulator = new o(this);
        this._startColor = cc.color(255, 255, 255, 255);
        this._startColorVar = cc.color(0, 0, 0, 0);
        this._endColor = cc.color(255, 255, 255, 0);
        this._endColorVar = cc.color(0, 0, 0, 0);
        this._renderSpriteFrame = null;
      },
      properties: u,
      statics: {
        DURATION_INFINITY: -1,
        START_SIZE_EQUAL_TO_END_SIZE: -1,
        START_RADIUS_EQUAL_TO_END_RADIUS: -1,
        EmitterMode: l,
        PositionType: h
      },
      onFocusInEditor: false,
      onLostFocusInEditor: false,
      onRestore: false,
      _startPreview: false,
      _stopPreview: false,
      _convertTextureToSpriteFrame: false,
      __preload: function () {
        this._super();
        if (this._custom && this.spriteFrame && !this._renderSpriteFrame) {
          this._applySpriteFrame(this.spriteFrame);
        } else if (this._file) {
          if (this._custom) {
            if (!this._getTexture()) {
              this._applyFile();
            }
          } else {
            this._applyFile();
          }
        }
        if (this.playOnLoad) {
          this.resetSystem();
        }
      },
      onDestroy: function () {
        if (this.autoRemoveOnFinish) {
          this.autoRemoveOnFinish = false;
        }
        if (this._buffer) {
          this._buffer.destroy();
          this._buffer = null;
        }
        this._super();
      },
      lateUpdate: function (t) {
        if (!this._simulator.finished) {
          this._simulator.step(t);
        }
      },
      addParticle: function () {},
      stopSystem: function () {
        this._stopped = true;
        this._simulator.stop();
      },
      resetSystem: function () {
        this._stopped = false;
        this._simulator.reset();
        this.markForRender(true);
      },
      isFull: function () {
        return this.particleCount >= this.totalParticles;
      },
      setTextureWithRect: function (t, e) {
        if (t instanceof cc.Texture2D) {
          this.spriteFrame = new cc.SpriteFrame(t, e);
        }
      },
      _applyFile: function () {
        var t = this._file;
        if (t) {
          var e = this;
          cc.assetManager.postLoadNative(t, function (i) {
            if (!i && t._nativeAsset && e.isValid) {
              e._plistFile = t.nativeUrl;
              if (!e._custom) {
                if (e._spriteFrame !== t.spriteFrame) {
                  e.spriteFrame = t.spriteFrame;
                }
                e._initWithDictionary(t._nativeAsset);
              }
              if (e._spriteFrame) {
                if (!e._renderSpriteFrame && e._spriteFrame) {
                  e._applySpriteFrame(e.spriteFrame);
                }
              } else if (t.spriteFrame) {
                e.spriteFrame = t.spriteFrame;
              } else if (e._custom) {
                e._initTextureWithDictionary(t._nativeAsset);
              }
            }
          });
        }
      },
      _initTextureWithDictionary: function (t) {
        var e = cc.path.changeBasename(this._plistFile, t.textureFileName || "");
        if (t.textureFileName) {
          a.loadImage(e, function (i, n) {
            if (i) {
              t.textureFileName = undefined;
              this._initTextureWithDictionary(t);
            } else {
              cc.assetManager.assets.add(e, n);
              this.spriteFrame = new cc.SpriteFrame(n);
            }
          }, this);
        } else if (t.textureImageData) {
          throw Error(s.getError(100));
        }
        return true;
      },
      _initWithDictionary: function (t) {
        this.totalParticles = parseInt(t.maxParticles || 0);
        this.life = parseFloat(t.particleLifespan || 0);
        this.lifeVar = parseFloat(t.particleLifespanVariance || 0);
        var e = t.emissionRate;
        this.emissionRate = e || Math.min(this.totalParticles / this.life, Number.MAX_VALUE);
        this.duration = parseFloat(t.duration || 0);
        this.srcBlendFactor = parseInt(t.blendFuncSource || i.SRC_ALPHA);
        this.dstBlendFactor = parseInt(t.blendFuncDestination || i.ONE_MINUS_SRC_ALPHA);
        var n = this._startColor;
        n.r = 255 * parseFloat(t.startColorRed || 0);
        n.g = 255 * parseFloat(t.startColorGreen || 0);
        n.b = 255 * parseFloat(t.startColorBlue || 0);
        n.a = 255 * parseFloat(t.startColorAlpha || 0);
        var r = this._startColorVar;
        r.r = 255 * parseFloat(t.startColorVarianceRed || 0);
        r.g = 255 * parseFloat(t.startColorVarianceGreen || 0);
        r.b = 255 * parseFloat(t.startColorVarianceBlue || 0);
        r.a = 255 * parseFloat(t.startColorVarianceAlpha || 0);
        var s = this._endColor;
        s.r = 255 * parseFloat(t.finishColorRed || 0);
        s.g = 255 * parseFloat(t.finishColorGreen || 0);
        s.b = 255 * parseFloat(t.finishColorBlue || 0);
        s.a = 255 * parseFloat(t.finishColorAlpha || 0);
        var a = this._endColorVar;
        a.r = 255 * parseFloat(t.finishColorVarianceRed || 0);
        a.g = 255 * parseFloat(t.finishColorVarianceGreen || 0);
        a.b = 255 * parseFloat(t.finishColorVarianceBlue || 0);
        a.a = 255 * parseFloat(t.finishColorVarianceAlpha || 0);
        this.startSize = parseFloat(t.startParticleSize || 0);
        this.startSizeVar = parseFloat(t.startParticleSizeVariance || 0);
        this.endSize = parseFloat(t.finishParticleSize || 0);
        this.endSizeVar = parseFloat(t.finishParticleSizeVariance || 0);
        this.positionType = parseFloat(undefined !== t.positionType ? t.positionType : h.RELATIVE);
        this.sourcePos.x = 0;
        this.sourcePos.y = 0;
        this.posVar.x = parseFloat(t.sourcePositionVariancex || 0);
        this.posVar.y = parseFloat(t.sourcePositionVariancey || 0);
        this.angle = parseFloat(t.angle || 0);
        this.angleVar = parseFloat(t.angleVariance || 0);
        this.startSpin = parseFloat(t.rotationStart || 0);
        this.startSpinVar = parseFloat(t.rotationStartVariance || 0);
        this.endSpin = parseFloat(t.rotationEnd || 0);
        this.endSpinVar = parseFloat(t.rotationEndVariance || 0);
        this.emitterMode = parseInt(t.emitterType || l.GRAVITY);
        if (this.emitterMode === l.GRAVITY) {
          this.gravity.x = parseFloat(t.gravityx || 0);
          this.gravity.y = parseFloat(t.gravityy || 0);
          this.speed = parseFloat(t.speed || 0);
          this.speedVar = parseFloat(t.speedVariance || 0);
          this.radialAccel = parseFloat(t.radialAcceleration || 0);
          this.radialAccelVar = parseFloat(t.radialAccelVariance || 0);
          this.tangentialAccel = parseFloat(t.tangentialAcceleration || 0);
          this.tangentialAccelVar = parseFloat(t.tangentialAccelVariance || 0);
          var o = t.rotationIsDir || "";
          if (null !== o) {
            o = o.toString().toLowerCase();
            this.rotationIsDir = "true" === o || "1" === o;
          } else {
            this.rotationIsDir = false;
          }
        } else {
          if (this.emitterMode !== l.RADIUS) {
            return false;
          }
          this.startRadius = parseFloat(t.maxRadius || 0);
          this.startRadiusVar = parseFloat(t.maxRadiusVariance || 0);
          this.endRadius = parseFloat(t.minRadius || 0);
          this.endRadiusVar = parseFloat(t.minRadiusVariance || 0);
          this.rotatePerS = parseFloat(t.rotatePerSecond || 0);
          this.rotatePerSVar = parseFloat(t.rotatePerSecondVariance || 0);
        }
        this._initTextureWithDictionary(t);
        return true;
      },
      _validateRender: function () {
        var t = this._getTexture();
        if (t && t.loaded) {
          this._super();
        } else {
          this.disableRender();
        }
      },
      _onTextureLoaded: function () {
        this._simulator.updateUVs(true);
        this._syncAspect();
        this._updateMaterial();
        this.markForRender(true);
      },
      _syncAspect: function () {
        var t = this._renderSpriteFrame._rect;
        this._aspectRatio = t.width / t.height;
      },
      _applySpriteFrame: function () {
        this._renderSpriteFrame = this._renderSpriteFrame || this._spriteFrame;
        if (this._renderSpriteFrame) {
          if (this._renderSpriteFrame.textureLoaded()) {
            this._onTextureLoaded();
          } else {
            this._renderSpriteFrame.onTextureLoaded(this._onTextureLoaded, this);
          }
        }
      },
      _getTexture: function () {
        return this._renderSpriteFrame && this._renderSpriteFrame.getTexture() || this._texture;
      },
      _updateMaterial: function () {
        var t = this.getMaterial(0);
        if (t) {
          t.define("CC_USE_MODEL", this._positionType !== h.FREE);
          t.setProperty("texture", this._getTexture());
          c.prototype._updateMaterial.call(this);
        }
      },
      _finishedSimulation: function () {
        this.disableRender();
        if (this.autoRemoveOnFinish && this._stopped) {
          this.node.destroy();
        }
      }
    });
    cc.ParticleSystem = e.exports = f;
  }, {
    "../core/CCDebug": 23,
    "../core/assets/material/CCMaterial": 76,
    "../core/components/CCRenderComponent": 109,
    "../core/platform/CCMacro": 167,
    "../core/renderer/render-flow": 194,
    "../core/utils/blend-func": 230,
    "../core/utils/texture-util": 244,
    "./CCParticleAsset": 265,
    "./particle-simulator": 268,
    "fire-url": undefined
  }],
  267: [function (t) {
    "use strict";

    t("./CCParticleAsset");
    t("./CCParticleSystem");
    t("./particle-simulator");
    t("./particle-system-assembler");
  }, {
    "./CCParticleAsset": 265,
    "./CCParticleSystem": 266,
    "./particle-simulator": 268,
    "./particle-system-assembler": 269
  }],
  268: [function (t, e) {
    "use strict";

    var i = t("../core/platform/js");
    var n = t("../core/utils/misc");
    var r = cc.v2(0, 0);
    var s = cc.v2();
    var a = cc.v2();
    var o = cc.v2();
    var c = cc.v2();
    var l = function () {
      this.pos = cc.v2(0, 0);
      this.startPos = cc.v2(0, 0);
      this.color = cc.color(0, 0, 0, 255);
      this.deltaColor = {
        r: 0,
        g: 0,
        b: 0,
        a: 255
      };
      this.preciseColor = {
        r: 0,
        g: 0,
        b: 0,
        a: 255
      };
      this.size = 0;
      this.deltaSize = 0;
      this.rotation = 0;
      this.deltaRotation = 0;
      this.timeToLive = 0;
      this.drawPos = cc.v2(0, 0);
      this.aspectRatio = 1;
      this.dir = cc.v2(0, 0);
      this.radialAccel = 0;
      this.tangentialAccel = 0;
      this.angle = 0;
      this.degreesPerSecond = 0;
      this.radius = 0;
      this.deltaRadius = 0;
    };
    var h = new i.Pool(function (t) {
      t.pos.set(r);
      t.startPos.set(r);
      t.color._val = 4278190080;
      t.deltaColor.r = t.deltaColor.g = t.deltaColor.b = 0;
      t.deltaColor.a = 255;
      t.size = 0;
      t.deltaSize = 0;
      t.rotation = 0;
      t.deltaRotation = 0;
      t.timeToLive = 0;
      t.drawPos.set(r);
      t.aspectRatio = 1;
      t.dir.set(r);
      t.radialAccel = 0;
      t.tangentialAccel = 0;
      t.angle = 0;
      t.degreesPerSecond = 0;
      t.radius = 0;
      t.deltaRadius = 0;
    }, 1024);
    h.get = function () {
      return this._get() || new l();
    };
    var u = function (t) {
      this.sys = t;
      this.particles = [];
      this.active = false;
      this.readyToPlay = true;
      this.finished = false;
      this.elapsed = 0;
      this.emitCounter = 0;
      this._uvFilled = 0;
      this._worldRotation = 0;
    };
    function f(t) {
      var e = 0;
      for (var i = t; i;) {
        e += i.angle;
        i = i.parent;
      }
      return e;
    }
    u.prototype.stop = function () {
      this.active = false;
      this.readyToPlay = false;
      this.elapsed = this.sys.duration;
      this.emitCounter = 0;
    };
    u.prototype.reset = function () {
      this.active = true;
      this.readyToPlay = true;
      this.elapsed = 0;
      this.emitCounter = 0;
      this.finished = false;
      var t = this.particles;
      var e = t.length;
      for (var i = 0; i < e; ++i) {
        h.put(t[i]);
      }
      t.length = 0;
      var n = this.sys._buffer;
      if (n && n.byteOffset > 0 && e > 0) {
        var r = 4 * this.sys._vertexFormat._bytes / 4;
        var s = n._uintVData;
        for (var a = 0; a < e; a++) {
          var o = r * a;
          s[o + 4] = s[o + 9] = s[o + 14] = s[o + 19] = 0;
        }
        n._dirty = true;
        n.uploadData();
      }
    };
    u.prototype.emitParticle = function (t) {
      var e = this.sys;
      var i = n.clampf;
      var r = h.get();
      this.particles.push(r);
      r.timeToLive = e.life + e.lifeVar * (Math.random() - .5) * 2;
      var s;
      var a;
      var o;
      var c;
      var l = r.timeToLive = Math.max(0, r.timeToLive);
      r.pos.x = e.sourcePos.x + e.posVar.x * (Math.random() - .5) * 2;
      r.pos.y = e.sourcePos.y + e.posVar.y * (Math.random() - .5) * 2;
      var u = e._startColor;
      var f = e._startColorVar;
      var d = e._endColor;
      var _ = e._endColorVar;
      r.color.r = s = i(u.r + f.r * (Math.random() - .5) * 2, 0, 255);
      r.color.g = a = i(u.g + f.g * (Math.random() - .5) * 2, 0, 255);
      r.color.b = o = i(u.b + f.b * (Math.random() - .5) * 2, 0, 255);
      r.color.a = c = i(u.a + f.a * (Math.random() - .5) * 2, 0, 255);
      var p = r.color;
      var v = r.preciseColor;
      v.r = p.r;
      v.g = p.g;
      v.b = p.b;
      v.a = p.a;
      r.deltaColor.r = (i(d.r + _.r * (Math.random() - .5) * 2, 0, 255) - s) / l;
      r.deltaColor.g = (i(d.g + _.g * (Math.random() - .5) * 2, 0, 255) - a) / l;
      r.deltaColor.b = (i(d.b + _.b * (Math.random() - .5) * 2, 0, 255) - o) / l;
      r.deltaColor.a = (i(d.a + _.a * (Math.random() - .5) * 2, 0, 255) - c) / l;
      var g = e.startSize + e.startSizeVar * (Math.random() - .5) * 2;
      g = Math.max(0, g);
      r.size = g;
      if (e.endSize === cc.ParticleSystem.START_SIZE_EQUAL_TO_END_SIZE) {
        r.deltaSize = 0;
      } else {
        var m = e.endSize + e.endSizeVar * (Math.random() - .5) * 2;
        m = Math.max(0, m);
        r.deltaSize = (m - g) / l;
      }
      var y = e.startSpin + e.startSpinVar * (Math.random() - .5) * 2;
      var T = e.endSpin + e.endSpinVar * (Math.random() - .5) * 2;
      r.rotation = y;
      r.deltaRotation = (T - y) / l;
      r.startPos.x = t.x;
      r.startPos.y = t.y;
      r.aspectRatio = e._aspectRatio || 1;
      var E = n.degreesToRadians(e.angle + this._worldRotation + e.angleVar * (Math.random() - .5) * 2);
      if (e.emitterMode === cc.ParticleSystem.EmitterMode.GRAVITY) {
        var A = e.speed + e.speedVar * (Math.random() - .5) * 2;
        r.dir.x = Math.cos(E);
        r.dir.y = Math.sin(E);
        r.dir.mulSelf(A);
        r.radialAccel = e.radialAccel + e.radialAccelVar * (Math.random() - .5) * 2;
        r.tangentialAccel = e.tangentialAccel + e.tangentialAccelVar * (Math.random() - .5) * 2;
        if (e.rotationIsDir) {
          r.rotation = -n.radiansToDegrees(Math.atan2(r.dir.y, r.dir.x));
        }
      } else {
        var x = e.startRadius + e.startRadiusVar * (Math.random() - .5) * 2;
        var C = e.endRadius + e.endRadiusVar * (Math.random() - .5) * 2;
        r.radius = x;
        r.deltaRadius = e.endRadius === cc.ParticleSystem.START_RADIUS_EQUAL_TO_END_RADIUS ? 0 : (C - x) / l;
        r.angle = E;
        r.degreesPerSecond = n.degreesToRadians(e.rotatePerS + e.rotatePerSVar * (Math.random() - .5) * 2);
      }
    };
    u.prototype.updateUVs = function (t) {
      var e = this.sys._assembler;
      if (e) {
        var i = e.getBuffer();
        if (i && this.sys._renderSpriteFrame) {
          var n = 4 * e._vfmt._bytes / 4;
          var r = i._vData;
          var s = this.sys._renderSpriteFrame.uv;
          var a = t ? 0 : this._uvFilled;
          var o = this.particles.length;
          for (var c = a; c < o; c++) {
            var l = c * n;
            r[l + 2] = s[0];
            r[l + 3] = s[1];
            r[l + 7] = s[2];
            r[l + 8] = s[3];
            r[l + 12] = s[4];
            r[l + 13] = s[5];
            r[l + 17] = s[6];
            r[l + 18] = s[7];
          }
          this._uvFilled = o;
        }
      }
    };
    u.prototype.updateParticleBuffer = function (t, e, i, r) {
      var s = i._vData;
      var a = i._uintVData;
      var o = e.x;
      var c = e.y;
      var l = t.size;
      var h = l;
      var u = t.aspectRatio;
      if (u > 1) {
        h = l / u;
      } else {
        l = h * u;
      }
      var f = l / 2;
      var d = h / 2;
      if (t.rotation) {
        var _ = -f;
        var p = -d;
        var m = -n.degreesToRadians(t.rotation);
        var y = Math.cos(m);
        var T = Math.sin(m);
        s[r] = _ * y - p * T + o;
        s[r + 1] = _ * T + p * y + c;
        s[r + 5] = f * y - p * T + o;
        s[r + 6] = f * T + p * y + c;
        s[r + 10] = _ * y - d * T + o;
        s[r + 11] = _ * T + d * y + c;
        s[r + 15] = f * y - d * T + o;
        s[r + 16] = f * T + d * y + c;
      } else {
        s[r] = o - f;
        s[r + 1] = c - d;
        s[r + 5] = o + f;
        s[r + 6] = c - d;
        s[r + 10] = o - f;
        s[r + 11] = c + d;
        s[r + 15] = o + f;
        s[r + 16] = c + d;
      }
      a[r + 4] = t.color._val;
      a[r + 9] = t.color._val;
      a[r + 14] = t.color._val;
      a[r + 19] = t.color._val;
    };
    u.prototype.step = function (t) {
      t = t > cc.director._maxParticleDeltaTime ? cc.director._maxParticleDeltaTime : t;
      var e = this.sys;
      var i = e.node;
      var n = this.particles;
      var r = 4 * this.sys._assembler._vfmt._bytes / 4;
      var l = cc.ParticleSystem.PositionType;
      i._updateWorldMatrix();
      if (e.positionType === l.FREE) {
        this._worldRotation = f(i);
        var u = i._worldMatrix.m;
        s.x = u[12];
        s.y = u[13];
      } else if (e.positionType === l.RELATIVE) {
        this._worldRotation = i.angle;
        s.x = i.x;
        s.y = i.y;
      } else {
        this._worldRotation = 0;
      }
      if (this.active && e.emissionRate) {
        var d = 1 / e.emissionRate;
        for (n.length < e.totalParticles && (this.emitCounter += t); n.length < e.totalParticles && this.emitCounter > d;) {
          this.emitParticle(s);
          this.emitCounter -= d;
        }
        this.elapsed += t;
        if (-1 !== e.duration && e.duration < this.elapsed) {
          e.stopSystem();
        }
      }
      var _ = e._assembler.getBuffer();
      var p = n.length;
      _.reset();
      _.request(4 * p, 6 * p);
      if (p > this._uvFilled) {
        this.updateUVs();
      }
      for (var v = 0; v < n.length;) {
        a.x = a.y = o.x = o.y = c.x = c.y = 0;
        var g = n[v];
        g.timeToLive -= t;
        if (g.timeToLive > 0) {
          if (e.emitterMode === cc.ParticleSystem.EmitterMode.GRAVITY) {
            if (g.pos.x || g.pos.y) {
              a.set(g.pos);
              a.normalizeSelf();
            }
            o.set(a);
            a.mulSelf(g.radialAccel);
            var E = o.x;
            o.x = -o.y;
            o.y = E;
            o.mulSelf(g.tangentialAccel);
            c.set(a);
            c.addSelf(o);
            c.addSelf(e.gravity);
            c.mulSelf(t);
            g.dir.addSelf(c);
            c.set(g.dir);
            c.mulSelf(t);
            g.pos.addSelf(c);
          } else {
            g.angle += g.degreesPerSecond * t;
            g.radius += g.deltaRadius * t;
            g.pos.x = -Math.cos(g.angle) * g.radius;
            g.pos.y = -Math.sin(g.angle) * g.radius;
          }
          var A = g.preciseColor;
          var x = g.deltaColor;
          A.r += x.r * t;
          A.g += x.g * t;
          A.b += x.b * t;
          A.a += x.a * t;
          var C = g.color;
          C.r = A.r;
          C.g = A.g;
          C.b = A.b;
          C.a = A.a;
          g.size += g.deltaSize * t;
          if (g.size < 0) {
            g.size = 0;
          }
          g.rotation += g.deltaRotation * t;
          a.set(g.pos);
          if (e.positionType !== l.GROUPED) {
            a.addSelf(g.startPos);
          }
          var S = r * v;
          this.updateParticleBuffer(g, a, _, S);
          ++v;
        } else {
          var R = n[v];
          if (v !== n.length - 1) {
            n[v] = n[n.length - 1];
          }
          h.put(R);
          n.length--;
        }
      }
      e._assembler._ia._count = 6 * n.length;
      if (n.length > 0) {
        _.uploadData();
      } else if (!(this.active || this.readyToPlay)) {
        this.finished = true;
        e._finishedSimulation();
      }
    };
    e.exports = u;
  }, {
    "../core/platform/js": 183,
    "../core/utils/misc": 236
  }],
  269: [function (t, e) {
    "use strict";

    var i = t("../core/renderer/assembler") && t("../core/renderer/assembler").__esModule ? t("../core/renderer/assembler") : {
      default: t("../core/renderer/assembler")
    };
    var n = t("../renderer/core/input-assembler") && t("../renderer/core/input-assembler").__esModule ? t("../renderer/core/input-assembler") : {
      default: t("../renderer/core/input-assembler")
    };
    function s(t, e) {
      return (s = Object.setPrototypeOf || function (t, e) {
        t.__proto__ = e;
        return t;
      })(t, e);
    }
    var a = t("./CCParticleSystem");
    var o = t("../core/renderer/");
    var c = t("../core/renderer/webgl/quad-buffer");
    var l = t("../core/renderer/webgl/vertex-format").vfmtPosUvColor;
    var h = function (t) {
      function r(e) {
        var i;
        (i = t.call(this, e) || this)._buffer = null;
        i._ia = null;
        i._vfmt = l;
        return i;
      }
      r.prototype = Object.create(t.prototype);
      r.prototype.constructor = r;
      s(r, t);
      var a = r.prototype;
      a.getBuffer = function () {
        if (!this._buffer) {
          this._buffer = new c(o._handle, l);
          this._ia = new n.default();
          this._ia._vertexBuffer = this._buffer._vb;
          this._ia._indexBuffer = this._buffer._ib;
          this._ia._start = 0;
          this._ia._count = 0;
        }
        return this._buffer;
      };
      a.fillBuffers = function (t, e) {
        if (this._ia) {
          var i = cc.ParticleSystem.PositionType;
          if (t.positionType === i.RELATIVE) {
            e.node = t.node.parent;
          } else {
            e.node = t.node;
          }
          e.material = t._materials[0];
          e._flushIA(this._ia);
        }
      };
      return r;
    }(i.default);
    i.default.register(a, h);
    e.exports = h;
  }, {
    "../core/renderer/": 193,
    "../core/renderer/assembler": 190,
    "../core/renderer/webgl/quad-buffer": 222,
    "../core/renderer/webgl/vertex-format": 225,
    "../renderer/core/input-assembler": 272,
    "./CCParticleSystem": 266
  }],
  270: [function (t, e) {
    "use strict";

    var i;
    var n;
    var r;
    var s;
    var a;
    var o;
    var c;
    var l;
    var h;
    var u;
    var f;
    var d;
    var _;
    var p;
    var v;
    var g;
    var m;
    var y;
    var T;
    var E;
    var A;
    var x;
    var C;
    var b;
    var S;
    var R;
    var M;
    var w;
    var I;
    var O;
    var L;
    var P;
    var D;
    var N;
    var F;
    var B;
    var V;
    var k;
    var U;
    var z;
    var G;
    var H;
    (function (t) {
      t[t.COMPRESSED_RGB_S3TC_DXT1_EXT = 33776] = "COMPRESSED_RGB_S3TC_DXT1_EXT";
      t[t.COMPRESSED_RGBA_S3TC_DXT1_EXT = 33777] = "COMPRESSED_RGBA_S3TC_DXT1_EXT";
      t[t.COMPRESSED_RGBA_S3TC_DXT3_EXT = 33778] = "COMPRESSED_RGBA_S3TC_DXT3_EXT";
      t[t.COMPRESSED_RGBA_S3TC_DXT5_EXT = 33779] = "COMPRESSED_RGBA_S3TC_DXT5_EXT";
      t[t.COMPRESSED_SRGB_S3TC_DXT1_EXT = 35916] = "COMPRESSED_SRGB_S3TC_DXT1_EXT";
      t[t.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 35917] = "COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT";
      t[t.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 35918] = "COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT";
      t[t.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 35919] = "COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT";
      t[t.COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 35840] = "COMPRESSED_RGB_PVRTC_4BPPV1_IMG";
      t[t.COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 35841] = "COMPRESSED_RGB_PVRTC_2BPPV1_IMG";
      t[t.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 35842] = "COMPRESSED_RGBA_PVRTC_4BPPV1_IMG";
      t[t.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 35843] = "COMPRESSED_RGBA_PVRTC_2BPPV1_IMG";
      t[t.COMPRESSED_RGB_ETC1_WEBGL = 36196] = "COMPRESSED_RGB_ETC1_WEBGL";
    })(i || (i = {}));
    (function (t) {
      t[t.UNKNOWN = 0] = "UNKNOWN";
      t[t.BUFFER = 1] = "BUFFER";
      t[t.TEXTURE = 2] = "TEXTURE";
      t[t.TEXTURE_VIEW = 3] = "TEXTURE_VIEW";
      t[t.RENDER_PASS = 4] = "RENDER_PASS";
      t[t.FRAMEBUFFER = 5] = "FRAMEBUFFER";
      t[t.SAMPLER = 6] = "SAMPLER";
      t[t.SHADER = 7] = "SHADER";
      t[t.PIPELINE_LAYOUT = 8] = "PIPELINE_LAYOUT";
      t[t.PIPELINE_STATE = 9] = "PIPELINE_STATE";
      t[t.BINDING_LAYOUT = 10] = "BINDING_LAYOUT";
      t[t.INPUT_ASSEMBLER = 11] = "INPUT_ASSEMBLER";
      t[t.COMMAND_ALLOCATOR = 12] = "COMMAND_ALLOCATOR";
      t[t.COMMAND_BUFFER = 13] = "COMMAND_BUFFER";
      t[t.QUEUE = 14] = "QUEUE";
      t[t.WINDOW = 15] = "WINDOW";
    })(n || (n = {}));
    (function (t) {
      t[t.UNREADY = 0] = "UNREADY";
      t[t.FAILED = 1] = "FAILED";
      t[t.SUCCESS = 2] = "SUCCESS";
    })(r || (r = {}));
    (function () {
      function t(t) {
        this._gfxType = n.UNKNOWN;
        this._status = r.UNREADY;
        this._gfxType = t;
      }
      Object.defineProperty(t.prototype, "gfxType", {
        get: function () {
          return this._gfxType;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(t.prototype, "status", {
        get: function () {
          return this._status;
        },
        enumerable: true,
        configurable: true
      });
    })();
    (function (t) {
      t.ATTR_POSITION = "a_position";
      t.ATTR_NORMAL = "a_normal";
      t.ATTR_TANGENT = "a_tangent";
      t.ATTR_BITANGENT = "a_bitangent";
      t.ATTR_WEIGHTS = "a_weights";
      t.ATTR_JOINTS = "a_joints";
      t.ATTR_COLOR = "a_color";
      t.ATTR_COLOR1 = "a_color1";
      t.ATTR_COLOR2 = "a_color2";
      t.ATTR_TEX_COORD = "a_texCoord";
      t.ATTR_TEX_COORD1 = "a_texCoord1";
      t.ATTR_TEX_COORD2 = "a_texCoord2";
      t.ATTR_TEX_COORD3 = "a_texCoord3";
      t.ATTR_TEX_COORD4 = "a_texCoord4";
      t.ATTR_TEX_COORD5 = "a_texCoord5";
      t.ATTR_TEX_COORD6 = "a_texCoord6";
      t.ATTR_TEX_COORD7 = "a_texCoord7";
      t.ATTR_TEX_COORD8 = "a_texCoord8";
    })(s || (s = {}));
    (function (t) {
      t[t.UNKNOWN = 0] = "UNKNOWN";
      t[t.BOOL = 1] = "BOOL";
      t[t.BOOL2 = 2] = "BOOL2";
      t[t.BOOL3 = 3] = "BOOL3";
      t[t.BOOL4 = 4] = "BOOL4";
      t[t.INT = 5] = "INT";
      t[t.INT2 = 6] = "INT2";
      t[t.INT3 = 7] = "INT3";
      t[t.INT4 = 8] = "INT4";
      t[t.UINT = 9] = "UINT";
      t[t.UINT2 = 10] = "UINT2";
      t[t.UINT3 = 11] = "UINT3";
      t[t.UINT4 = 12] = "UINT4";
      t[t.FLOAT = 13] = "FLOAT";
      t[t.FLOAT2 = 14] = "FLOAT2";
      t[t.FLOAT3 = 15] = "FLOAT3";
      t[t.FLOAT4 = 16] = "FLOAT4";
      t[t.COLOR4 = 17] = "COLOR4";
      t[t.MAT2 = 18] = "MAT2";
      t[t.MAT2X3 = 19] = "MAT2X3";
      t[t.MAT2X4 = 20] = "MAT2X4";
      t[t.MAT3X2 = 21] = "MAT3X2";
      t[t.MAT3 = 22] = "MAT3";
      t[t.MAT3X4 = 23] = "MAT3X4";
      t[t.MAT4X2 = 24] = "MAT4X2";
      t[t.MAT4X3 = 25] = "MAT4X3";
      t[t.MAT4 = 26] = "MAT4";
      t[t.SAMPLER1D = 27] = "SAMPLER1D";
      t[t.SAMPLER1D_ARRAY = 28] = "SAMPLER1D_ARRAY";
      t[t.SAMPLER2D = 29] = "SAMPLER2D";
      t[t.SAMPLER2D_ARRAY = 30] = "SAMPLER2D_ARRAY";
      t[t.SAMPLER3D = 31] = "SAMPLER3D";
      t[t.SAMPLER_CUBE = 32] = "SAMPLER_CUBE";
      t[t.COUNT = 33] = "COUNT";
    })(a || (a = {}));
    (function (t) {
      t[t.UNKNOWN = 0] = "UNKNOWN";
      t[t.A8 = 1] = "A8";
      t[t.L8 = 2] = "L8";
      t[t.LA8 = 3] = "LA8";
      t[t.R8 = 4] = "R8";
      t[t.R8SN = 5] = "R8SN";
      t[t.R8UI = 6] = "R8UI";
      t[t.R8I = 7] = "R8I";
      t[t.R16F = 8] = "R16F";
      t[t.R16UI = 9] = "R16UI";
      t[t.R16I = 10] = "R16I";
      t[t.R32F = 11] = "R32F";
      t[t.R32UI = 12] = "R32UI";
      t[t.R32I = 13] = "R32I";
      t[t.RG8 = 14] = "RG8";
      t[t.RG8SN = 15] = "RG8SN";
      t[t.RG8UI = 16] = "RG8UI";
      t[t.RG8I = 17] = "RG8I";
      t[t.RG16F = 18] = "RG16F";
      t[t.RG16UI = 19] = "RG16UI";
      t[t.RG16I = 20] = "RG16I";
      t[t.RG32F = 21] = "RG32F";
      t[t.RG32UI = 22] = "RG32UI";
      t[t.RG32I = 23] = "RG32I";
      t[t.RGB8 = 24] = "RGB8";
      t[t.SRGB8 = 25] = "SRGB8";
      t[t.RGB8SN = 26] = "RGB8SN";
      t[t.RGB8UI = 27] = "RGB8UI";
      t[t.RGB8I = 28] = "RGB8I";
      t[t.RGB16F = 29] = "RGB16F";
      t[t.RGB16UI = 30] = "RGB16UI";
      t[t.RGB16I = 31] = "RGB16I";
      t[t.RGB32F = 32] = "RGB32F";
      t[t.RGB32UI = 33] = "RGB32UI";
      t[t.RGB32I = 34] = "RGB32I";
      t[t.RGBA8 = 35] = "RGBA8";
      t[t.SRGB8_A8 = 36] = "SRGB8_A8";
      t[t.RGBA8SN = 37] = "RGBA8SN";
      t[t.RGBA8UI = 38] = "RGBA8UI";
      t[t.RGBA8I = 39] = "RGBA8I";
      t[t.RGBA16F = 40] = "RGBA16F";
      t[t.RGBA16UI = 41] = "RGBA16UI";
      t[t.RGBA16I = 42] = "RGBA16I";
      t[t.RGBA32F = 43] = "RGBA32F";
      t[t.RGBA32UI = 44] = "RGBA32UI";
      t[t.RGBA32I = 45] = "RGBA32I";
      t[t.R5G6B5 = 46] = "R5G6B5";
      t[t.R11G11B10F = 47] = "R11G11B10F";
      t[t.RGB5A1 = 48] = "RGB5A1";
      t[t.RGBA4 = 49] = "RGBA4";
      t[t.RGB10A2 = 50] = "RGB10A2";
      t[t.RGB10A2UI = 51] = "RGB10A2UI";
      t[t.RGB9E5 = 52] = "RGB9E5";
      t[t.D16 = 53] = "D16";
      t[t.D16S8 = 54] = "D16S8";
      t[t.D24 = 55] = "D24";
      t[t.D24S8 = 56] = "D24S8";
      t[t.D32F = 57] = "D32F";
      t[t.D32F_S8 = 58] = "D32F_S8";
      t[t.BC1 = 59] = "BC1";
      t[t.BC1_ALPHA = 60] = "BC1_ALPHA";
      t[t.BC1_SRGB = 61] = "BC1_SRGB";
      t[t.BC1_SRGB_ALPHA = 62] = "BC1_SRGB_ALPHA";
      t[t.BC2 = 63] = "BC2";
      t[t.BC2_SRGB = 64] = "BC2_SRGB";
      t[t.BC3 = 65] = "BC3";
      t[t.BC3_SRGB = 66] = "BC3_SRGB";
      t[t.BC4 = 67] = "BC4";
      t[t.BC4_SNORM = 68] = "BC4_SNORM";
      t[t.BC5 = 69] = "BC5";
      t[t.BC5_SNORM = 70] = "BC5_SNORM";
      t[t.BC6H_UF16 = 71] = "BC6H_UF16";
      t[t.BC6H_SF16 = 72] = "BC6H_SF16";
      t[t.BC7 = 73] = "BC7";
      t[t.BC7_SRGB = 74] = "BC7_SRGB";
      t[t.ETC_RGB8 = 75] = "ETC_RGB8";
      t[t.ETC2_RGB8 = 76] = "ETC2_RGB8";
      t[t.ETC2_SRGB8 = 77] = "ETC2_SRGB8";
      t[t.ETC2_RGB8_A1 = 78] = "ETC2_RGB8_A1";
      t[t.ETC2_SRGB8_A1 = 79] = "ETC2_SRGB8_A1";
      t[t.ETC2_RGBA8 = 80] = "ETC2_RGBA8";
      t[t.ETC2_SRGB8_A8 = 81] = "ETC2_SRGB8_A8";
      t[t.EAC_R11 = 82] = "EAC_R11";
      t[t.EAC_R11SN = 83] = "EAC_R11SN";
      t[t.EAC_RG11 = 84] = "EAC_RG11";
      t[t.EAC_RG11SN = 85] = "EAC_RG11SN";
      t[t.PVRTC_RGB2 = 86] = "PVRTC_RGB2";
      t[t.PVRTC_RGBA2 = 87] = "PVRTC_RGBA2";
      t[t.PVRTC_RGB4 = 88] = "PVRTC_RGB4";
      t[t.PVRTC_RGBA4 = 89] = "PVRTC_RGBA4";
      t[t.PVRTC2_2BPP = 90] = "PVRTC2_2BPP";
      t[t.PVRTC2_4BPP = 91] = "PVRTC2_4BPP";
      t[t.ASTC_RGBA_4x4 = 92] = "ASTC_RGBA_4x4";
      t[t.ASTC_RGBA_5x4 = 92] = "ASTC_RGBA_5x4";
      t[t.ASTC_RGBA_5x5 = 92] = "ASTC_RGBA_5x5";
      t[t.ASTC_RGBA_6x5 = 92] = "ASTC_RGBA_6x5";
      t[t.ASTC_RGBA_6x6 = 92] = "ASTC_RGBA_6x6";
      t[t.ASTC_RGBA_8x5 = 92] = "ASTC_RGBA_8x5";
      t[t.ASTC_RGBA_8x6 = 92] = "ASTC_RGBA_8x6";
      t[t.ASTC_RGBA_8x8 = 92] = "ASTC_RGBA_8x8";
      t[t.ASTC_RGBA_10x5 = 92] = "ASTC_RGBA_10x5";
      t[t.ASTC_RGBA_10x6 = 92] = "ASTC_RGBA_10x6";
      t[t.ASTC_RGBA_10x8 = 92] = "ASTC_RGBA_10x8";
      t[t.ASTC_RGBA_10x10 = 92] = "ASTC_RGBA_10x10";
      t[t.ASTC_RGBA_12x10 = 92] = "ASTC_RGBA_12x10";
      t[t.ASTC_RGBA_12x12 = 92] = "ASTC_RGBA_12x12";
      t[t.ASTC_SRGBA_4x4 = 92] = "ASTC_SRGBA_4x4";
      t[t.ASTC_SRGBA_5x4 = 92] = "ASTC_SRGBA_5x4";
      t[t.ASTC_SRGBA_5x5 = 92] = "ASTC_SRGBA_5x5";
      t[t.ASTC_SRGBA_6x5 = 92] = "ASTC_SRGBA_6x5";
      t[t.ASTC_SRGBA_6x6 = 92] = "ASTC_SRGBA_6x6";
      t[t.ASTC_SRGBA_8x5 = 92] = "ASTC_SRGBA_8x5";
      t[t.ASTC_SRGBA_8x6 = 92] = "ASTC_SRGBA_8x6";
      t[t.ASTC_SRGBA_8x8 = 92] = "ASTC_SRGBA_8x8";
      t[t.ASTC_SRGBA_10x5 = 92] = "ASTC_SRGBA_10x5";
      t[t.ASTC_SRGBA_10x6 = 92] = "ASTC_SRGBA_10x6";
      t[t.ASTC_SRGBA_10x8 = 92] = "ASTC_SRGBA_10x8";
      t[t.ASTC_SRGBA_10x10 = 92] = "ASTC_SRGBA_10x10";
      t[t.ASTC_SRGBA_12x10 = 92] = "ASTC_SRGBA_12x10";
      t[t.ASTC_SRGBA_12x12 = 92] = "ASTC_SRGBA_12x12";
    })(o || (o = {}));
    (function (t) {
      t[t.NONE = 0] = "NONE";
      t[t.TRANSFER_SRC = 1] = "TRANSFER_SRC";
      t[t.TRANSFER_DST = 2] = "TRANSFER_DST";
      t[t.INDEX = 4] = "INDEX";
      t[t.VERTEX = 8] = "VERTEX";
      t[t.UNIFORM = 16] = "UNIFORM";
      t[t.STORAGE = 32] = "STORAGE";
      t[t.INDIRECT = 64] = "INDIRECT";
    })(c || (c = {}));
    (function (t) {
      t[t.NONE = 0] = "NONE";
      t[t.DEVICE = 1] = "DEVICE";
      t[t.HOST = 2] = "HOST";
    })(l || (l = {}));
    (function (t) {
      t[t.NONE = 0] = "NONE";
      t[t.READ = 1] = "READ";
      t[t.WRITE = 2] = "WRITE";
    })(h || (h = {}));
    (function (t) {
      t[t.POINT_LIST = 0] = "POINT_LIST";
      t[t.LINE_LIST = 1] = "LINE_LIST";
      t[t.LINE_STRIP = 2] = "LINE_STRIP";
      t[t.LINE_LOOP = 3] = "LINE_LOOP";
      t[t.LINE_LIST_ADJACENCY = 4] = "LINE_LIST_ADJACENCY";
      t[t.LINE_STRIP_ADJACENCY = 5] = "LINE_STRIP_ADJACENCY";
      t[t.ISO_LINE_LIST = 6] = "ISO_LINE_LIST";
      t[t.TRIANGLE_LIST = 7] = "TRIANGLE_LIST";
      t[t.TRIANGLE_STRIP = 8] = "TRIANGLE_STRIP";
      t[t.TRIANGLE_FAN = 9] = "TRIANGLE_FAN";
      t[t.TRIANGLE_LIST_ADJACENCY = 10] = "TRIANGLE_LIST_ADJACENCY";
      t[t.TRIANGLE_STRIP_ADJACENCY = 11] = "TRIANGLE_STRIP_ADJACENCY";
      t[t.TRIANGLE_PATCH_ADJACENCY = 12] = "TRIANGLE_PATCH_ADJACENCY";
      t[t.QUAD_PATCH_LIST = 13] = "QUAD_PATCH_LIST";
    })(u || (u = {}));
    (function (t) {
      t[t.FILL = 0] = "FILL";
      t[t.POINT = 1] = "POINT";
      t[t.LINE = 2] = "LINE";
    })(f || (f = {}));
    (function (t) {
      t[t.GOURAND = 0] = "GOURAND";
      t[t.FLAT = 1] = "FLAT";
    })(d || (d = {}));
    (function (t) {
      t[t.NONE = 0] = "NONE";
      t[t.FRONT = 1] = "FRONT";
      t[t.BACK = 2] = "BACK";
    })(_ || (_ = {}));
    (function (t) {
      t[t.NEVER = 0] = "NEVER";
      t[t.LESS = 1] = "LESS";
      t[t.EQUAL = 2] = "EQUAL";
      t[t.LESS_EQUAL = 3] = "LESS_EQUAL";
      t[t.GREATER = 4] = "GREATER";
      t[t.NOT_EQUAL = 5] = "NOT_EQUAL";
      t[t.GREATER_EQUAL = 6] = "GREATER_EQUAL";
      t[t.ALWAYS = 7] = "ALWAYS";
    })(p || (p = {}));
    (function (t) {
      t[t.ZERO = 0] = "ZERO";
      t[t.KEEP = 1] = "KEEP";
      t[t.REPLACE = 2] = "REPLACE";
      t[t.INCR = 3] = "INCR";
      t[t.DECR = 4] = "DECR";
      t[t.INVERT = 5] = "INVERT";
      t[t.INCR_WRAP = 6] = "INCR_WRAP";
      t[t.DECR_WRAP = 7] = "DECR_WRAP";
    })(v || (v = {}));
    (function (t) {
      t[t.ADD = 0] = "ADD";
      t[t.SUB = 1] = "SUB";
      t[t.REV_SUB = 2] = "REV_SUB";
      t[t.MIN = 3] = "MIN";
      t[t.MAX = 4] = "MAX";
    })(g || (g = {}));
    (function (t) {
      t[t.ZERO = 0] = "ZERO";
      t[t.ONE = 1] = "ONE";
      t[t.SRC_ALPHA = 2] = "SRC_ALPHA";
      t[t.DST_ALPHA = 3] = "DST_ALPHA";
      t[t.ONE_MINUS_SRC_ALPHA = 4] = "ONE_MINUS_SRC_ALPHA";
      t[t.ONE_MINUS_DST_ALPHA = 5] = "ONE_MINUS_DST_ALPHA";
      t[t.SRC_COLOR = 6] = "SRC_COLOR";
      t[t.DST_COLOR = 7] = "DST_COLOR";
      t[t.ONE_MINUS_SRC_COLOR = 8] = "ONE_MINUS_SRC_COLOR";
      t[t.ONE_MINUS_DST_COLOR = 9] = "ONE_MINUS_DST_COLOR";
      t[t.SRC_ALPHA_SATURATE = 10] = "SRC_ALPHA_SATURATE";
      t[t.CONSTANT_COLOR = 11] = "CONSTANT_COLOR";
      t[t.ONE_MINUS_CONSTANT_COLOR = 12] = "ONE_MINUS_CONSTANT_COLOR";
      t[t.CONSTANT_ALPHA = 13] = "CONSTANT_ALPHA";
      t[t.ONE_MINUS_CONSTANT_ALPHA = 14] = "ONE_MINUS_CONSTANT_ALPHA";
    })(m || (m = {}));
    (function (t) {
      t[t.NONE = 0] = "NONE";
      t[t.R = 1] = "R";
      t[t.G = 2] = "G";
      t[t.B = 4] = "B";
      t[t.A = 8] = "A";
      t[t.ALL = 15] = "ALL";
    })(y || (y = {}));
    (function (t) {
      t[t.NONE = 0] = "NONE";
      t[t.POINT = 1] = "POINT";
      t[t.LINEAR = 2] = "LINEAR";
      t[t.ANISOTROPIC = 3] = "ANISOTROPIC";
    })(T || (T = {}));
    (function (t) {
      t[t.WRAP = 0] = "WRAP";
      t[t.MIRROR = 1] = "MIRROR";
      t[t.CLAMP = 2] = "CLAMP";
      t[t.BORDER = 3] = "BORDER";
    })(E || (E = {}));
    (function (t) {
      t[t.TEX1D = 0] = "TEX1D";
      t[t.TEX2D = 1] = "TEX2D";
      t[t.TEX3D = 2] = "TEX3D";
    })(A || (A = {}));
    (function (t) {
      t[t.NONE = 0] = "NONE";
      t[t.TRANSFER_SRC = 1] = "TRANSFER_SRC";
      t[t.TRANSFER_DST = 2] = "TRANSFER_DST";
      t[t.SAMPLED = 4] = "SAMPLED";
      t[t.STORAGE = 8] = "STORAGE";
      t[t.COLOR_ATTACHMENT = 16] = "COLOR_ATTACHMENT";
      t[t.DEPTH_STENCIL_ATTACHMENT = 32] = "DEPTH_STENCIL_ATTACHMENT";
      t[t.TRANSIENT_ATTACHMENT = 64] = "TRANSIENT_ATTACHMENT";
      t[t.INPUT_ATTACHMENT = 128] = "INPUT_ATTACHMENT";
    })(x || (x = {}));
    (function (t) {
      t[t.X1 = 0] = "X1";
      t[t.X2 = 1] = "X2";
      t[t.X4 = 2] = "X4";
      t[t.X8 = 3] = "X8";
      t[t.X16 = 4] = "X16";
      t[t.X32 = 5] = "X32";
      t[t.X64 = 6] = "X64";
    })(C || (C = {}));
    (function (t) {
      t[t.NONE = 0] = "NONE";
      t[t.GEN_MIPMAP = 1] = "GEN_MIPMAP";
      t[t.CUBEMAP = 2] = "CUBEMAP";
      t[t.BAKUP_BUFFER = 4] = "BAKUP_BUFFER";
    })(b || (b = {}));
    (function (t) {
      t[t.TV1D = 0] = "TV1D";
      t[t.TV2D = 1] = "TV2D";
      t[t.TV3D = 2] = "TV3D";
      t[t.CUBE = 3] = "CUBE";
      t[t.TV1D_ARRAY = 4] = "TV1D_ARRAY";
      t[t.TV2D_ARRAY = 5] = "TV2D_ARRAY";
    })(S || (S = {}));
    (function (t) {
      t[t.VERTEX = 0] = "VERTEX";
      t[t.HULL = 1] = "HULL";
      t[t.DOMAIN = 2] = "DOMAIN";
      t[t.GEOMETRY = 3] = "GEOMETRY";
      t[t.FRAGMENT = 4] = "FRAGMENT";
      t[t.COMPUTE = 5] = "COMPUTE";
      t[t.COUNT = 6] = "COUNT";
    })(R || (R = {}));
    (function (t) {
      t[t.UNKNOWN = 0] = "UNKNOWN";
      t[t.UNIFORM_BUFFER = 1] = "UNIFORM_BUFFER";
      t[t.SAMPLER = 2] = "SAMPLER";
      t[t.STORAGE_BUFFER = 3] = "STORAGE_BUFFER";
    })(M || (M = {}));
    (function (t) {
      t[t.PRIMARY = 0] = "PRIMARY";
      t[t.SECONDARY = 1] = "SECONDARY";
    })(w || (w = {}));
    (function (t) {
      t[t.LOAD = 0] = "LOAD";
      t[t.CLEAR = 1] = "CLEAR";
      t[t.DISCARD = 2] = "DISCARD";
    })(I || (I = {}));
    (function (t) {
      t[t.STORE = 0] = "STORE";
      t[t.DISCARD = 1] = "DISCARD";
    })(O || (O = {}));
    (function (t) {
      t[t.UNDEFINED = 0] = "UNDEFINED";
      t[t.GENERAL = 1] = "GENERAL";
      t[t.COLOR_ATTACHMENT_OPTIMAL = 2] = "COLOR_ATTACHMENT_OPTIMAL";
      t[t.DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3] = "DEPTH_STENCIL_ATTACHMENT_OPTIMAL";
      t[t.DEPTH_STENCIL_READONLY_OPTIMAL = 4] = "DEPTH_STENCIL_READONLY_OPTIMAL";
      t[t.SHADER_READONLY_OPTIMAL = 5] = "SHADER_READONLY_OPTIMAL";
      t[t.TRANSFER_SRC_OPTIMAL = 6] = "TRANSFER_SRC_OPTIMAL";
      t[t.TRANSFER_DST_OPTIMAL = 7] = "TRANSFER_DST_OPTIMAL";
      t[t.PREINITIALIZED = 8] = "PREINITIALIZED";
      t[t.PRESENT_SRC = 9] = "PRESENT_SRC";
    })(L || (L = {}));
    (function (t) {
      t[t.GRAPHICS = 0] = "GRAPHICS";
      t[t.COMPUTE = 1] = "COMPUTE";
      t[t.RAY_TRACING = 2] = "RAY_TRACING";
    })(P || (P = {}));
    (function (t) {
      t[t.VIEWPORT = 0] = "VIEWPORT";
      t[t.SCISSOR = 1] = "SCISSOR";
      t[t.LINE_WIDTH = 2] = "LINE_WIDTH";
      t[t.DEPTH_BIAS = 3] = "DEPTH_BIAS";
      t[t.BLEND_CONSTANTS = 4] = "BLEND_CONSTANTS";
      t[t.DEPTH_BOUNDS = 5] = "DEPTH_BOUNDS";
      t[t.STENCIL_WRITE_MASK = 6] = "STENCIL_WRITE_MASK";
      t[t.STENCIL_COMPARE_MASK = 7] = "STENCIL_COMPARE_MASK";
    })(D || (D = {}));
    (function (t) {
      t[t.FRONT = 0] = "FRONT";
      t[t.BACK = 1] = "BACK";
      t[t.ALL = 2] = "ALL";
    })(N || (N = {}));
    (function (t) {
      t[t.GRAPHICS = 0] = "GRAPHICS";
      t[t.COMPUTE = 1] = "COMPUTE";
      t[t.TRANSFER = 2] = "TRANSFER";
    })(F || (F = {}));
    (function (t) {
      t[t.NONE = 0] = "NONE";
      t[t.COLOR = 1] = "COLOR";
      t[t.DEPTH = 2] = "DEPTH";
      t[t.STENCIL = 4] = "STENCIL";
      t[t.DEPTH_STENCIL = 6] = "DEPTH_STENCIL";
      t[t.ALL = 7] = "ALL";
    })(B || (B = {}));
    (function (t) {
      t[t.DEFAULT = 100] = "DEFAULT";
    })(V || (V = {}));
    (function (t) {
      t[t.MIN = 0] = "MIN";
      t[t.MAX = 255] = "MAX";
      t[t.DEFAULT = 128] = "DEFAULT";
    })(k || (k = {}));
    (function (t) {
      t[t.UBO_GLOBAL = 23] = "UBO_GLOBAL";
      t[t.UBO_SHADOW = 22] = "UBO_SHADOW";
      t[t.UBO_LOCAL = 21] = "UBO_LOCAL";
      t[t.UBO_FORWARD_LIGHTS = 20] = "UBO_FORWARD_LIGHTS";
      t[t.UBO_SKINNING = 19] = "UBO_SKINNING";
      t[t.UBO_SKINNING_TEXTURE = 18] = "UBO_SKINNING_TEXTURE";
      t[t.UBO_UI = 17] = "UBO_UI";
      t[t.SAMPLER_JOINTS = 25] = "SAMPLER_JOINTS";
      t[t.SAMPLER_ENVIRONMENT = 26] = "SAMPLER_ENVIRONMENT";
      t[t.CUSTUM_UBO_BINDING_END_POINT = 17] = "CUSTUM_UBO_BINDING_END_POINT";
      t[t.CUSTOM_SAMPLER_BINDING_START_POINT = 30] = "CUSTOM_SAMPLER_BINDING_START_POINT";
    })(U || (U = {}));
    (function (t) {
      t[t.minFilter = 0] = "minFilter";
      t[t.magFilter = 1] = "magFilter";
      t[t.mipFilter = 2] = "mipFilter";
      t[t.addressU = 3] = "addressU";
      t[t.addressV = 4] = "addressV";
      t[t.addressW = 5] = "addressW";
      t[t.maxAnisotropy = 6] = "maxAnisotropy";
      t[t.cmpFunc = 7] = "cmpFunc";
      t[t.minLOD = 8] = "minLOD";
      t[t.maxLOD = 9] = "maxLOD";
      t[t.mipLODBias = 10] = "mipLODBias";
      t[t.borderColor = 11] = "borderColor";
      t[t.total = 15] = "total";
    })(H || (H = {}));
    var W = {
      [W.bool = a.BOOL]: "bool",
      [W.int = a.INT]: "int",
      [W.ivec2 = a.INT2]: "ivec2invTypeParams",
      [W.ivec3 = a.INT3]: "ivec3",
      [W.ivec4 = a.INT4]: "ivec4",
      [W.float = a.FLOAT]: "float",
      [W.vec2 = a.FLOAT2]: "vec2",
      [W.vec3 = a.FLOAT3]: "vec3",
      [W.vec4 = a.FLOAT4]: "vec4",
      [W.mat2 = a.MAT2]: "mat2",
      [W.mat3 = a.MAT3]: "mat3",
      [W.mat4 = a.MAT4]: "mat4",
      [W.sampler2D = a.SAMPLER2D]: "sampler2D",
      [W.samplerCube = a.SAMPLER_CUBE]: "samplerCube"
    };
    (z = {
      [a.INT]: 4,
      [a.INT2]: 8,
      [a.INT3]: 12,
      [a.INT4]: 16,
      [a.FLOAT]: 4,
      [a.FLOAT2]: 8,
      [a.FLOAT3]: 12,
      [a.FLOAT4]: 16,
      [a.MAT2]: 16,
      [a.MAT3]: 36,
      [a.MAT4]: 64,
      [a.SAMPLER2D]: 4,
      [a.SAMPLER_CUBE]: 4
    })[a.BOOL] = 4;
    (G = {
      [a.INT]: o.R32I,
      [a.INT2]: o.RG32I,
      [a.INT3]: o.RGB32I,
      [a.INT4]: o.RGBA32I,
      [a.FLOAT]: o.R32F,
      [a.FLOAT2]: o.RG32F,
      [a.FLOAT3]: o.RGB32F,
      [a.FLOAT4]: o.RGBA32F
    })[a.BOOL] = o.R32I;
    var j = {
      BACK: 1029,
      FRONT: 1028,
      NONE: 0,
      ADD: 32774,
      SUB: 32778,
      REV_SUB: 32779,
      ZERO: 0,
      ONE: 1,
      SRC_COLOR: 768,
      ONE_MINUS_SRC_COLOR: 769,
      DST_COLOR: 774,
      ONE_MINUS_DST_COLOR: 775,
      SRC_ALPHA: 770,
      ONE_MINUS_SRC_ALPHA: 771,
      DST_ALPHA: 772,
      ONE_MINUS_DST_ALPHA: 773,
      CONSTANT_COLOR: 32769,
      ONE_MINUS_CONSTANT_COLOR: 32770,
      CONSTANT_ALPHA: 32771,
      ONE_MINUS_CONSTANT_ALPHA: 32772,
      SRC_ALPHA_SATURATE: 776,
      NEVER: 512,
      LESS: 513,
      EQUAL: 514,
      LEQUAL: 515,
      GREATER: 516,
      NOTEQUAL: 517,
      GEQUAL: 518,
      ALWAYS: 519,
      KEEP: 7680,
      REPLACE: 7681,
      INCR: 7682,
      INCR_WRAP: 34055,
      DECR: 7683,
      DECR_WRAP: 34056,
      INVERT: 5386
    };
    Object.assign(j, V);
    var q = {
      murmurhash2_32_gc: function (t, e) {
        var i;
        var n = t.length;
        var r = e ^ n;
        for (var s = 0; n >= 4;) {
          i = 1540483477 * (65535 & (i = 255 & t.charCodeAt(s) | (255 & t.charCodeAt(++s)) << 8 | (255 & t.charCodeAt(++s)) << 16 | (255 & t.charCodeAt(++s)) << 24)) + ((1540483477 * (i >>> 16) & 65535) << 16);
          r = 1540483477 * (65535 & r) + ((1540483477 * (r >>> 16) & 65535) << 16) ^ (i = 1540483477 * (65535 & (i ^= i >>> 24)) + ((1540483477 * (i >>> 16) & 65535) << 16));
          n -= 4;
          ++s;
        }
        switch (n) {
          case 3:
            r ^= (255 & t.charCodeAt(s + 2)) << 16;
          case 2:
            r ^= (255 & t.charCodeAt(s + 1)) << 8;
          case 1:
            r = 1540483477 * (65535 & (r ^= 255 & t.charCodeAt(s))) + ((1540483477 * (r >>> 16) & 65535) << 16);
        }
        r = 1540483477 * (65535 & (r ^= r >>> 13)) + ((1540483477 * (r >>> 16) & 65535) << 16);
        return (r ^= r >>> 15) >>> 0;
      },
      SamplerInfoIndex: H,
      effectStructure: {
        $techniques: [{
          $passes: [{
            depthStencilState: {},
            rasterizerState: {},
            blendState: {
              targets: [{}]
            },
            properties: {
              any: {
                sampler: {},
                inspector: {}
              }
            }
          }]
        }]
      },
      typeMap: W,
      sizeMap: z,
      formatMap: G,
      passParams: j,
      RenderQueue: {
        OPAQUE: 0,
        TRANSPARENT: 1,
        OVERLAY: 2
      },
      RenderPriority: k,
      GFXGetTypeSize: function (t) {
        switch (t) {
          case a.BOOL:
          case a.INT:
          case a.UINT:
          case a.FLOAT:
            return 4;
          case a.BOOL2:
          case a.INT2:
          case a.UINT2:
          case a.FLOAT2:
            return 8;
          case a.BOOL3:
          case a.INT3:
          case a.UINT3:
          case a.FLOAT3:
            return 12;
          case a.BOOL4:
          case a.INT4:
          case a.UINT4:
          case a.FLOAT4:
          case a.MAT2:
            return 16;
          case a.MAT2X3:
            return 24;
          case a.MAT2X4:
            return 32;
          case a.MAT3X2:
            return 24;
          case a.MAT3:
            return 36;
          case a.MAT3X4:
            return 48;
          case a.MAT4X2:
          case a.MAT4X2:
            return 32;
          case a.MAT4:
            return 64;
          case a.SAMPLER1D:
          case a.SAMPLER1D_ARRAY:
          case a.SAMPLER2D:
          case a.SAMPLER2D_ARRAY:
          case a.SAMPLER3D:
          case a.SAMPLER_CUBE:
            return 4;
          default:
            return 0;
        }
      },
      UniformBinding: U
    };
    e.exports = q;
  }, {}],
  271: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n = t("../memop");
    var r = t("../enums") && t("../enums").__esModule ? t("../enums") : {
      default: t("../enums")
    };
    var s = t("../../core/value-types");
    var a = t("./program-lib") && t("./program-lib").__esModule ? t("./program-lib") : {
      default: t("./program-lib")
    };
    var o = t("./view") && t("./view").__esModule ? t("./view") : {
      default: t("./view")
    };
    var c = t("../gfx") && t("../gfx").__esModule ? t("../gfx") : {
      default: t("../gfx")
    };
    var h = new s.Mat4();
    var u = new n.RecyclePool(function () {
      return {
        stage: null,
        items: null
      };
    }, 8);
    var f = new n.RecyclePool(function () {
      return new Float32Array(2);
    }, 8);
    var d = new n.RecyclePool(function () {
      return new Float32Array(3);
    }, 8);
    var _ = new n.RecyclePool(function () {
      return new Float32Array(4);
    }, 8);
    var p = new n.RecyclePool(function () {
      return new Float32Array(9);
    }, 8);
    var v = new n.RecyclePool(function () {
      return new Float32Array(16);
    }, 8);
    var g = new n.RecyclePool(function () {
      return new Float32Array(64);
    }, 8);
    var m = new n.RecyclePool(function () {
      return new Int32Array(2);
    }, 8);
    var y = new n.RecyclePool(function () {
      return new Int32Array(3);
    }, 8);
    var T = new n.RecyclePool(function () {
      return new Int32Array(4);
    }, 8);
    var E = new n.RecyclePool(function () {
      return new Int32Array(64);
    }, 8);
    var A = function () {
      function t(t, e) {
        var i;
        this._device = t;
        this._programLib = new a.default(t);
        this._opts = e;
        (i = {
          [r.default.PARAM_INT2]: new s.Vec2(0, 0),
          [r.default.PARAM_INT3]: new s.Vec3(0, 0, 0),
          [r.default.PARAM_INT4]: new s.Vec4(0, 0, 0, 0),
          [r.default.PARAM_FLOAT]: 0,
          [r.default.PARAM_FLOAT2]: new s.Vec2(0, 0),
          [r.default.PARAM_FLOAT3]: new s.Vec3(0, 0, 0),
          [r.default.PARAM_FLOAT4]: new s.Vec4(0, 0, 0, 0),
          [r.default.PARAM_COLOR4]: new s.Color(0, 0, 0, 1),
          [r.default.PARAM_MAT3]: new s.Mat3(),
          [r.default.PARAM_MAT4]: new s.Mat4(),
          [r.default.PARAM_TEXTURE_2D]: e.defaultTexture,
          [r.default.PARAM_TEXTURE_CUBE]: e.defaultTextureCube
        })[r.default.PARAM_INT] = 0;
        this._type2defaultValue = i;
        this._stage2fn = {};
        this._usedTextureUnits = 0;
        this._viewPools = new n.RecyclePool(function () {
          return new o.default();
        }, 8);
        this._drawItemsPools = new n.RecyclePool(function () {
          return {
            model: null,
            node: null,
            ia: null,
            effect: null,
            defines: null,
            uniforms: null
          };
        }, 100);
        this._stageItemsPools = new n.RecyclePool(function () {
          return new n.RecyclePool(function () {
            return {
              model: null,
              node: null,
              ia: null,
              effect: null,
              defines: null,
              passes: [],
              sortKey: -1,
              uniforms: null
            };
          }, 100);
        }, 16);
        this._definesChanged = false;
      }
      var e = t.prototype;
      e._resetTextuerUnit = function () {
        this._usedTextureUnits = 0;
      };
      e._allocTextureUnit = function () {
        var t = this._device;
        var e = this._usedTextureUnits;
        t._caps.maxTextureUnits;
        this._usedTextureUnits += 1;
        return e;
      };
      e._registerStage = function (t, e) {
        this._stage2fn[t] = e;
      };
      e.clear = function () {
        this._programLib.clear();
        this.reset();
      };
      e.reset = function () {
        this._viewPools.reset();
        this._stageItemsPools.reset();
        this._definesChanged = false;
      };
      e._requestView = function () {
        return this._viewPools.add();
      };
      e._render = function (t, e) {
        var i = this._device;
        i.setFrameBuffer(t._framebuffer);
        i.setViewport(t._rect.x, t._rect.y, t._rect.w, t._rect.h);
        var n = {};
        if (t._clearFlags & r.default.CLEAR_COLOR) {
          n.color = s.Vec4.toArray([], t._color);
        }
        if (t._clearFlags & r.default.CLEAR_DEPTH) {
          n.depth = t._depth;
        }
        if (t._clearFlags & r.default.CLEAR_STENCIL) {
          n.stencil = t._stencil;
        }
        i.clear(n);
        this._drawItemsPools.reset();
        for (var a = 0; a < e._models.length; ++a) {
          var o = e._models.data[a];
          if (0 != (o._cullingMask & t._cullingMask)) {
            var c = this._drawItemsPools.add();
            o.extractDrawItem(c);
          }
        }
        u.reset();
        for (var l = 0; l < t._stages.length; ++l) {
          var h = t._stages[l];
          var f = this._stageItemsPools.add();
          f.reset();
          for (var d = 0; d < this._drawItemsPools.length; ++d) {
            var _ = this._drawItemsPools.data[d];
            var p = _.effect.stagePasses[h];
            if (p && 0 !== p.length) {
              var v = f.add();
              v.passes = p;
              v.model = _.model;
              v.node = _.node;
              v.ia = _.ia;
              v.effect = _.effect;
              v.defines = _.defines;
              v.sortKey = -1;
              v.uniforms = _.uniforms;
            }
          }
          var g = u.add();
          g.stage = h;
          g.items = f;
        }
        for (var m = 0; m < u.length; ++m) {
          var y = u.data[m];
          0;
          this._stage2fn[y.stage](t, y.items);
        }
      };
      e._setProperty = function (t) {
        var e = this._device;
        var i = t.value;
        if (undefined === i) {
          i = t.val;
        }
        if (undefined === i) {
          i = this._type2defaultValue[t.type];
        }
        if (undefined !== i) {
          if (t.type === r.default.PARAM_TEXTURE_2D || t.type === r.default.PARAM_TEXTURE_CUBE) {
            if (Array.isArray(i)) {
              if (i.length > t.count) {
                return;
              }
              var n = E.add();
              for (var s = 0; s < i.length; ++s) {
                n[s] = this._allocTextureUnit();
              }
              e.setTextureArray(t.name, i, n);
            } else {
              e.setTexture(t.name, i, this._allocTextureUnit());
            }
          } else if (t.directly) {
            e.setUniformDirectly(t.name, i);
          } else {
            e.setUniform(t.name, i);
          }
        }
      };
      e._draw = function (t) {
        var e = this._device;
        var i = this._programLib;
        var n = t.node;
        var r = t.ia;
        var a = t.passes;
        var o = t.effect;
        f.reset();
        d.reset();
        _.reset();
        p.reset();
        v.reset();
        g.reset();
        m.reset();
        y.reset();
        T.reset();
        E.reset();
        n.getWorldMatrix(h);
        e.setUniform("cc_matWorld", s.Mat4.toArray(v.add(), h));
        s.Mat4.invert(h, h);
        s.Mat4.transpose(h, h);
        e.setUniform("cc_matWorldIT", s.Mat4.toArray(v.add(), h));
        var l = this._defines;
        for (var u = 0; u < a.length; ++u) {
          var A = a[u];
          if (this._definesChanged) {
            A._programKey = null;
          }
          var x = r.count;
          if (r._vertexBuffer) {
            e.setVertexBuffer(0, r._vertexBuffer);
          }
          if (r._indexBuffer) {
            e.setIndexBuffer(r._indexBuffer);
          }
          e.setPrimitiveType(r._primitiveType);
          Object.setPrototypeOf(l, A._defines);
          var C = i.getProgram(A, l, o.name);
          e.setProgram(C);
          var b = C._uniforms;
          var S = A._properties;
          for (var R = 0; R < b.length; R++) {
            var M = S[b[R].name];
            if (undefined !== M) {
              this._setProperty(M);
            }
          }
          e.setCullMode(A._cullMode);
          if (A._blend) {
            e.enableBlend();
            e.setBlendFuncSep(A._blendSrc, A._blendDst, A._blendSrcAlpha, A._blendDstAlpha);
            e.setBlendEqSep(A._blendEq, A._blendAlphaEq);
            e.setBlendColor32(A._blendColor);
          }
          if (A._depthTest) {
            e.enableDepthTest();
            e.setDepthFunc(A._depthFunc);
          }
          if (A._depthWrite) {
            e.enableDepthWrite();
          }
          e.setStencilTest(A._stencilTest);
          if (A._stencilTest === c.default.STENCIL_ENABLE) {
            e.setStencilFuncFront(A._stencilFuncFront, A._stencilRefFront, A._stencilMaskFront);
            e.setStencilOpFront(A._stencilFailOpFront, A._stencilZFailOpFront, A._stencilZPassOpFront, A._stencilWriteMaskFront);
            e.setStencilFuncBack(A._stencilFuncBack, A._stencilRefBack, A._stencilMaskBack);
            e.setStencilOpBack(A._stencilFailOpBack, A._stencilZFailOpBack, A._stencilZPassOpBack, A._stencilWriteMaskBack);
          }
          e.draw(r._start, x);
          this._resetTextuerUnit();
        }
      };
      return t;
    }();
    i.default = A;
    e.exports = i.default;
  }, {
    "../../core/value-types": 251,
    "../enums": 277,
    "../gfx": 282,
    "../memop": 294,
    "./program-lib": 274,
    "./view": 276
  }],
  272: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n;
    var r = (n = t("../gfx")) && n.__esModule ? n : {
      default: n
    };
    function s(t, e) {
      for (var i = 0; i < e.length; i++) {
        var n = e[i];
        n.enumerable = n.enumerable || false;
        n.configurable = true;
        if ("value" in n) {
          n.writable = true;
        }
        Object.defineProperty(t, n.key, n);
      }
    }
    var a = function () {
      function t(t, e, i) {
        if (undefined === i) {
          i = r.default.PT_TRIANGLES;
        }
        this._vertexBuffer = t;
        this._indexBuffer = e;
        this._primitiveType = i;
        this._start = 0;
        this._count = -1;
      }
      var i;
      if (i = [{
        key: "count",
        get: function () {
          return -1 !== this._count ? this._count : this._indexBuffer ? this._indexBuffer.count : this._vertexBuffer ? this._vertexBuffer.count : 0;
        }
      }]) {
        s(t.prototype, i);
      }
      Object.defineProperty(t, "prototype", {
        writable: false
      });
      return t;
    }();
    i.default = a;
    e.exports = i.default;
  }, {
    "../gfx": 282
  }],
  273: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n = t("../gfx") && t("../gfx").__esModule ? t("../gfx") : {
      default: t("../gfx")
    };
    var r = t("../enums") && t("../enums").__esModule ? t("../enums") : {
      default: t("../enums")
    };
    var s = t("../../core/value-types/value-type") && t("../../core/value-types/value-type").__esModule ? t("../../core/value-types/value-type") : {
      default: t("../../core/value-types/value-type")
    };
    var o = function () {
      function t(t, e, i, r, s, a) {
        if (undefined === s) {
          s = {};
        }
        if (undefined === a) {
          a = {};
        }
        this._name = t;
        this._detailName = e;
        this._programName = i;
        this._programKey = null;
        this._stage = r;
        this._properties = s;
        this._defines = a;
        this._propertyNames = Object.keys(s);
        this._defineNames = Object.keys(a);
        this._cullMode = n.default.CULL_BACK;
        this._blend = false;
        this._blendEq = n.default.BLEND_FUNC_ADD;
        this._blendAlphaEq = n.default.BLEND_FUNC_ADD;
        this._blendSrc = n.default.BLEND_SRC_ALPHA;
        this._blendDst = n.default.BLEND_ONE_MINUS_SRC_ALPHA;
        this._blendSrcAlpha = n.default.BLEND_SRC_ALPHA;
        this._blendDstAlpha = n.default.BLEND_ONE_MINUS_SRC_ALPHA;
        this._blendColor = 4294967295;
        this._depthTest = false;
        this._depthWrite = false;
        this._depthFunc = n.default.DS_FUNC_LESS;
        this._stencilTest = n.default.STENCIL_INHERIT;
        this._stencilFuncFront = n.default.DS_FUNC_ALWAYS;
        this._stencilRefFront = 0;
        this._stencilMaskFront = 255;
        this._stencilFailOpFront = n.default.STENCIL_OP_KEEP;
        this._stencilZFailOpFront = n.default.STENCIL_OP_KEEP;
        this._stencilZPassOpFront = n.default.STENCIL_OP_KEEP;
        this._stencilWriteMaskFront = 255;
        this._stencilFuncBack = n.default.DS_FUNC_ALWAYS;
        this._stencilRefBack = 0;
        this._stencilMaskBack = 255;
        this._stencilFailOpBack = n.default.STENCIL_OP_KEEP;
        this._stencilZFailOpBack = n.default.STENCIL_OP_KEEP;
        this._stencilZPassOpBack = n.default.STENCIL_OP_KEEP;
        this._stencilWriteMaskBack = 255;
      }
      var e = t.prototype;
      e.setCullMode = function (t) {
        if (undefined === t) {
          t = n.default.CULL_BACK;
        }
        this._cullMode = t;
      };
      e.setBlend = function (t, e, i, r, s, a, o, c) {
        if (undefined === t) {
          t = false;
        }
        if (undefined === e) {
          e = n.default.BLEND_FUNC_ADD;
        }
        if (undefined === i) {
          i = n.default.BLEND_SRC_ALPHA;
        }
        if (undefined === r) {
          r = n.default.BLEND_ONE_MINUS_SRC_ALPHA;
        }
        if (undefined === s) {
          s = n.default.BLEND_FUNC_ADD;
        }
        if (undefined === a) {
          a = n.default.BLEND_SRC_ALPHA;
        }
        if (undefined === o) {
          o = n.default.BLEND_ONE_MINUS_SRC_ALPHA;
        }
        if (undefined === c) {
          c = 4294967295;
        }
        this._blend = t;
        this._blendEq = e;
        this._blendSrc = i;
        this._blendDst = r;
        this._blendAlphaEq = s;
        this._blendSrcAlpha = a;
        this._blendDstAlpha = o;
        this._blendColor = c;
      };
      e.setDepth = function (t, e, i) {
        if (undefined === t) {
          t = false;
        }
        if (undefined === e) {
          e = false;
        }
        if (undefined === i) {
          i = n.default.DS_FUNC_LESS;
        }
        this._depthTest = t;
        this._depthWrite = e;
        this._depthFunc = i;
      };
      e.setStencilFront = function (t, e, i, r, s, a, o, c) {
        if (undefined === t) {
          t = n.default.STENCIL_INHERIT;
        }
        if (undefined === e) {
          e = n.default.DS_FUNC_ALWAYS;
        }
        if (undefined === i) {
          i = 0;
        }
        if (undefined === r) {
          r = 255;
        }
        if (undefined === s) {
          s = n.default.STENCIL_OP_KEEP;
        }
        if (undefined === a) {
          a = n.default.STENCIL_OP_KEEP;
        }
        if (undefined === o) {
          o = n.default.STENCIL_OP_KEEP;
        }
        if (undefined === c) {
          c = 255;
        }
        this._stencilTest = t;
        this._stencilFuncFront = e;
        this._stencilRefFront = i;
        this._stencilMaskFront = r;
        this._stencilFailOpFront = s;
        this._stencilZFailOpFront = a;
        this._stencilZPassOpFront = o;
        this._stencilWriteMaskFront = c;
      };
      e.setStencilEnabled = function (t) {
        if (undefined === t) {
          t = n.default.STENCIL_INHERIT;
        }
        this._stencilTest = t;
      };
      e.setStencilBack = function (t, e, i, r, s, a, o, c) {
        if (undefined === t) {
          t = n.default.STENCIL_INHERIT;
        }
        if (undefined === e) {
          e = n.default.DS_FUNC_ALWAYS;
        }
        if (undefined === i) {
          i = 0;
        }
        if (undefined === r) {
          r = 255;
        }
        if (undefined === s) {
          s = n.default.STENCIL_OP_KEEP;
        }
        if (undefined === a) {
          a = n.default.STENCIL_OP_KEEP;
        }
        if (undefined === o) {
          o = n.default.STENCIL_OP_KEEP;
        }
        if (undefined === c) {
          c = 255;
        }
        this._stencilTest = t;
        this._stencilFuncBack = e;
        this._stencilRefBack = i;
        this._stencilMaskBack = r;
        this._stencilFailOpBack = s;
        this._stencilZFailOpBack = a;
        this._stencilZPassOpBack = o;
        this._stencilWriteMaskBack = c;
      };
      e.setStage = function (t) {
        this._stage = t;
      };
      e.setProperties = function (t) {
        this._properties = t;
      };
      e.getProperty = function (t) {
        if (this._properties[t]) {
          return this._properties[t].value;
        }
      };
      e.setProperty = function (t, e, i) {
        var n = this._properties[t];
        if (!n) {
          return false;
        }
        n.directly = i;
        if (Array.isArray(e)) {
          var a = n.value;
          if (a.length !== e.length) {
            return;
          }
          for (var o = 0; o < e.length; o++) {
            a[o] = e[o];
          }
        } else if (e && !ArrayBuffer.isView(e)) {
          if (n.type === r.default.PARAM_TEXTURE_2D) {
            n.value = e.getImpl();
          } else if (e instanceof s.default) {
            e.constructor.toArray(n.value, e);
          } else {
            n.value = e;
          }
        } else {
          n.value = e;
        }
        return true;
      };
      e.getDefine = function (t) {
        return this._defines[t];
      };
      e.define = function (t, e, i) {
        var n = this._defines[t];
        return !(!i && undefined === n || (n !== e && (this._defines[t] = e, this._programKey = null), 0));
      };
      e.clone = function () {
        var e = new t(this._programName);
        Object.assign(e, this);
        var i = {};
        var n = this._properties;
        for (var r in n) {
          var s = n[r];
          var a = i[r] = {};
          var o = s.value;
          if (Array.isArray(o)) {
            a.value = o.concat();
          } else if (ArrayBuffer.isView(o)) {
            a.value = new o.__proto__.constructor(o);
          } else {
            a.value = o;
          }
          for (var c in s) if ("value" !== c) {
            a[c] = s[c];
          }
        }
        e._properties = i;
        e._defines = Object.assign({}, this._defines);
        e._propertyNames = this._propertyNames;
        e._defineNames = this._defineNames;
        return e;
      };
      return t;
    }();
    i.default = o;
    e.exports = i.default;
  }, {
    "../../core/value-types/value-type": 259,
    "../enums": 277,
    "../gfx": 282
  }],
  274: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n;
    var r = (n = t("../gfx")) && n.__esModule ? n : {
      default: n
    };
    var s = 0;
    function a(t, e) {
      var i = [];
      for (var n = 0; n < t.length; n++) {
        var r = t[n].name;
        var s = e[r];
        if ("number" != typeof s) {
          s = s ? 1 : 0;
        }
        i.push("#define " + r + " " + s);
      }
      return i.join("\n") + "\n";
    }
    function o(t, e, i) {
      var n = t;
      for (var r = 0; r < e.length; r++) {
        var s = e[r].name;
        var a = i[s];
        if (Number.isInteger(a)) {
          var o = RegExp(s, "g");
          n = n.replace(o, a);
        }
      }
      return n;
    }
    function c(t) {
      return t.replace(/#pragma for (\w+) in range\(\s*(\d+)\s*,\s*(\d+)\s*\)([\s\S]+?)#pragma endFor/g, function (t, e, i, n, r) {
        var s = "";
        var a = parseInt(i);
        var o = parseInt(n);
        for (var c = a; c < o; ++c) {
          s += r.replace(RegExp("{" + e + "}", "g"), c);
        }
        return s;
      });
    }
    var h = function () {
      function t(t) {
        this._device = t;
        this._templates = {};
        this._cache = {};
        this._checkPrecision();
      }
      var e = t.prototype;
      e.clear = function () {
        this._templates = {};
        this._cache = {};
      };
      e.define = function (t) {
        var e = t.name;
        var i = t.defines;
        var n = t.glsl1 || t;
        var r = n.vert;
        var a = n.frag;
        if (!this._templates[e]) {
          var o = ++s;
          var c = 0;
          for (var l = 0; l < i.length; ++l) {
            var h = i[l];
            var u = 1;
            if ("number" === h.type) {
              var f = h.range || [];
              h.min = f[0] || 0;
              h.max = f[1] || 4;
              u = Math.ceil(Math.log2(h.max - h.min));
              h._map = function (t) {
                return t - this.min << this._offset;
              }.bind(h);
            } else {
              h._map = function (t) {
                return t ? 1 << this._offset : 0;
              }.bind(h);
            }
            h._offset = c;
            c += u;
          }
          var d = t.uniforms || [];
          if (t.samplers) {
            for (var _ = 0; _ < t.samplers.length; _++) {
              d.push(t.samplers[_]);
            }
          }
          if (t.blocks) {
            for (var p = 0; p < t.blocks.length; p++) {
              var v = t.blocks[p].defines;
              var g = t.blocks[p].members;
              for (var m = 0; m < g.length; m++) {
                d.push({
                  defines: v,
                  name: g[m].name,
                  type: g[m].type
                });
              }
            }
          }
          this._templates[e] = {
            id: o,
            name: e,
            vert: r,
            frag: a,
            defines: i,
            attributes: t.attributes,
            uniforms: d,
            extensions: t.extensions
          };
        }
      };
      e.getTemplate = function (t) {
        return this._templates[t];
      };
      e.hasProgram = function (t) {
        return undefined !== this._templates[t];
      };
      e.getKey = function (t, e) {
        var i = this._templates[t];
        var n = 0;
        for (var r = 0; r < i.defines.length; ++r) {
          var s = i.defines[r];
          var a = e[s.name];
          if (undefined !== a) {
            n |= s._map(a);
          }
        }
        return i.id + ":" + n;
      };
      e.getProgram = function (t, e) {
        var i = t._programKey = t._programKey || this.getKey(t._programName, e);
        var n = this._cache[i];
        if (n) {
          return n;
        }
        var s = this._templates[t._programName];
        var h = a(s.defines, e);
        var u = o(s.vert, s.defines, e);
        u = h + c(u);
        if (!this._highpSupported) {
          u = u.replace(/\bhighp\b/g, "mediump");
        }
        var f = o(s.frag, s.defines, e);
        f = h + c(f);
        if (!this._highpSupported) {
          f = f.replace(/\bhighp\b/g, "mediump");
        }
        (n = new r.default.Program(this._device, {
          vert: u,
          frag: f
        })).link();
        this._cache[i] = n;
        return n;
      };
      e._checkPrecision = function () {
        var t = this._device._gl;
        var e = false;
        if (t.getShaderPrecisionFormat) {
          var i = t.getShaderPrecisionFormat(t.VERTEX_SHADER, t.HIGH_FLOAT);
          var n = t.getShaderPrecisionFormat(t.FRAGMENT_SHADER, t.HIGH_FLOAT);
          e = i && i.precision > 0 && n && n.precision > 0;
        }
        this._highpSupported = e;
      };
      return t;
    }();
    i.default = h;
    e.exports = i.default;
  }, {
    "../gfx": 282
  }],
  275: [function (t, e, i) {
    "use strict";

    function n(t, e) {
      for (var i = 0; i < e.length; i++) {
        var n = e[i];
        n.enumerable = n.enumerable || false;
        n.configurable = true;
        if ("value" in n) {
          n.writable = true;
        }
        Object.defineProperty(t, n.key, n);
      }
    }
    i.__esModule = true;
    i.default = undefined;
    var r = function () {
      function t(t, e) {
        this._name = t;
        this._passes = e;
      }
      var i;
      t.prototype.clone = function () {
        var e = [];
        for (var i = 0; i < this._passes.length; i++) {
          e.push(this._passes[i].clone());
        }
        return new t(this._name, e);
      };
      if (i = [{
        key: "name",
        get: function () {
          return this._name;
        }
      }, {
        key: "passes",
        get: function () {
          return this._passes;
        }
      }]) {
        n(t.prototype, i);
      }
      Object.defineProperty(t, "prototype", {
        writable: false
      });
      return t;
    }();
    i.default = r;
    e.exports = i.default;
  }, {}],
  276: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n;
    var r = t("../../core/value-types");
    var s = (n = t("../enums")) && n.__esModule ? n : {
      default: n
    };
    var a = new r.Mat4();
    var o = 0;
    var c = function () {
      function t() {
        this._id = o++;
        this._priority = 0;
        this._rect = {
          x: 0,
          y: 0,
          w: 1,
          h: 1
        };
        this._color = new r.Vec4(.3, .3, .3, 1);
        this._depth = 1;
        this._stencil = 0;
        this._clearFlags = s.default.CLEAR_COLOR | s.default.CLEAR_DEPTH;
        this._clearModel = null;
        this._matView = cc.mat4();
        this._matViewInv = cc.mat4();
        this._matProj = cc.mat4();
        this._matViewProj = cc.mat4();
        this._matInvViewProj = cc.mat4();
        this._stages = [];
        this._cullingByID = false;
        this._framebuffer = null;
        this._shadowLight = null;
        this._cullingMask = 4294967295;
      }
      var e = t.prototype;
      e.getForward = function (t) {
        var e = this._matView.m;
        return r.Vec3.set(t, -e[2], -e[6], -e[10]);
      };
      e.getPosition = function (t) {
        r.Mat4.invert(a, this._matView);
        return r.Mat4.getTranslation(t, a);
      };
      return t;
    }();
    i.default = c;
    e.exports = i.default;
  }, {
    "../../core/value-types": 251,
    "../enums": 277
  }],
  277: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n = t("./build/mappings");
    var r = {
      PROJ_PERSPECTIVE: 0,
      PROJ_ORTHO: 1,
      LIGHT_DIRECTIONAL: 0,
      LIGHT_POINT: 1,
      LIGHT_SPOT: 2,
      LIGHT_AMBIENT: 3,
      SHADOW_NONE: 0,
      SHADOW_HARD: 1,
      SHADOW_SOFT: 2,
      PARAM_INT: n.typeMap.int,
      PARAM_INT2: n.typeMap.ivec2,
      PARAM_INT3: n.typeMap.ivec3,
      PARAM_INT4: n.typeMap.ivec4,
      PARAM_FLOAT: n.typeMap.float,
      PARAM_FLOAT2: n.typeMap.vec2,
      PARAM_FLOAT3: n.typeMap.vec3,
      PARAM_FLOAT4: n.typeMap.vec4,
      PARAM_MAT2: n.typeMap.mat2,
      PARAM_MAT3: n.typeMap.mat3,
      PARAM_MAT4: n.typeMap.mat4,
      PARAM_TEXTURE_2D: n.typeMap.sampler2D,
      PARAM_TEXTURE_CUBE: n.typeMap.samplerCube,
      CLEAR_COLOR: 1,
      CLEAR_DEPTH: 2,
      CLEAR_STENCIL: 4,
      CLEAR_SKYBOX: 8,
      BUFFER_VIEW_INT8: 0,
      BUFFER_VIEW_UINT8: 1,
      BUFFER_VIEW_INT16: 2,
      BUFFER_VIEW_UINT16: 3,
      BUFFER_VIEW_INT32: 4,
      BUFFER_VIEW_UINT32: 5,
      BUFFER_VIEW_FLOAT32: 6
    };
    i.default = r;
    e.exports = i.default;
  }, {
    "./build/mappings": 270
  }],
  278: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n;
    var r;
    var s = t("./state") && t("./state").__esModule ? t("./state") : {
      default: t("./state")
    };
    var a = t("./enums");
    var o = t("./texture-2d") && t("./texture-2d").__esModule ? t("./texture-2d") : {
      default: t("./texture-2d")
    };
    var c = t("./texture-cube") && t("./texture-cube").__esModule ? t("./texture-cube") : {
      default: t("./texture-cube")
    };
    function h(t, e) {
      for (var i = 0; i < e.length; i++) {
        var n = e[i];
        n.enumerable = n.enumerable || false;
        n.configurable = true;
        if ("value" in n) {
          n.writable = true;
        }
        Object.defineProperty(t, n.key, n);
      }
    }
    (n = {
      5126: function (t, e, i) {
        t.uniform1f(e, i);
      },
      35664: function (t, e, i) {
        t.uniform2fv(e, i);
      },
      35665: function (t, e, i) {
        t.uniform3fv(e, i);
      },
      35666: function (t, e, i) {
        t.uniform4fv(e, i);
      },
      35667: function (t, e, i) {
        t.uniform2iv(e, i);
      },
      35668: function (t, e, i) {
        t.uniform3iv(e, i);
      },
      35669: function (t, e, i) {
        t.uniform4iv(e, i);
      },
      35670: function (t, e, i) {
        t.uniform1i(e, i);
      },
      35671: function (t, e, i) {
        t.uniform2iv(e, i);
      },
      35672: function (t, e, i) {
        t.uniform3iv(e, i);
      },
      35673: function (t, e, i) {
        t.uniform4iv(e, i);
      },
      35674: function (t, e, i) {
        t.uniformMatrix2fv(e, false, i);
      },
      35675: function (t, e, i) {
        t.uniformMatrix3fv(e, false, i);
      },
      35676: function (t, e, i) {
        t.uniformMatrix4fv(e, false, i);
      },
      35678: function (t, e, i) {
        t.uniform1i(e, i);
      },
      35680: function (t, e, i) {
        t.uniform1i(e, i);
      }
    })[5124] = function (t, e, i) {
      t.uniform1i(e, i);
    };
    (r = {
      5126: function (t, e, i) {
        t.uniform1fv(e, i);
      },
      35664: function (t, e, i) {
        t.uniform2fv(e, i);
      },
      35665: function (t, e, i) {
        t.uniform3fv(e, i);
      },
      35666: function (t, e, i) {
        t.uniform4fv(e, i);
      },
      35667: function (t, e, i) {
        t.uniform2iv(e, i);
      },
      35668: function (t, e, i) {
        t.uniform3iv(e, i);
      },
      35669: function (t, e, i) {
        t.uniform4iv(e, i);
      },
      35670: function (t, e, i) {
        t.uniform1iv(e, i);
      },
      35671: function (t, e, i) {
        t.uniform2iv(e, i);
      },
      35672: function (t, e, i) {
        t.uniform3iv(e, i);
      },
      35673: function (t, e, i) {
        t.uniform4iv(e, i);
      },
      35674: function (t, e, i) {
        t.uniformMatrix2fv(e, false, i);
      },
      35675: function (t, e, i) {
        t.uniformMatrix3fv(e, false, i);
      },
      35676: function (t, e, i) {
        t.uniformMatrix4fv(e, false, i);
      },
      35678: function (t, e, i) {
        t.uniform1iv(e, i);
      },
      35680: function (t, e, i) {
        t.uniform1iv(e, i);
      }
    })[5124] = function (t, e, i) {
      t.uniform1iv(e, i);
    };
    function d(t, e, i) {
      if (e.blend !== i.blend) {
        return i.blend ? (t.enable(t.BLEND), i.blendSrc !== a.enums.BLEND_CONSTANT_COLOR && i.blendSrc !== a.enums.BLEND_ONE_MINUS_CONSTANT_COLOR && i.blendDst !== a.enums.BLEND_CONSTANT_COLOR && i.blendDst !== a.enums.BLEND_ONE_MINUS_CONSTANT_COLOR || t.blendColor((i.blendColor >> 24) / 255, (i.blendColor >> 16 & 255) / 255, (i.blendColor >> 8 & 255) / 255, (255 & i.blendColor) / 255), void (i.blendSep ? (t.blendFuncSeparate(i.blendSrc, i.blendDst, i.blendSrcAlpha, i.blendDstAlpha), t.blendEquationSeparate(i.blendEq, i.blendAlphaEq)) : (t.blendFunc(i.blendSrc, i.blendDst), t.blendEquation(i.blendEq)))) : void t.disable(t.BLEND);
      }
      if (false !== i.blend) {
        if (e.blendColor !== i.blendColor) {
          t.blendColor((i.blendColor >> 24) / 255, (i.blendColor >> 16 & 255) / 255, (i.blendColor >> 8 & 255) / 255, (255 & i.blendColor) / 255);
        }
        if (e.blendSep === i.blendSep) {
          if (i.blendSep) {
            if (!(e.blendSrc === i.blendSrc && e.blendDst === i.blendDst && e.blendSrcAlpha === i.blendSrcAlpha && e.blendDstAlpha === i.blendDstAlpha)) {
              t.blendFuncSeparate(i.blendSrc, i.blendDst, i.blendSrcAlpha, i.blendDstAlpha);
            }
            if (!(e.blendEq === i.blendEq && e.blendAlphaEq === i.blendAlphaEq)) {
              t.blendEquationSeparate(i.blendEq, i.blendAlphaEq);
            }
          } else {
            if (!(e.blendSrc === i.blendSrc && e.blendDst === i.blendDst)) {
              t.blendFunc(i.blendSrc, i.blendDst);
            }
            if (e.blendEq !== i.blendEq) {
              t.blendEquation(i.blendEq);
            }
          }
        } else if (i.blendSep) {
          t.blendFuncSeparate(i.blendSrc, i.blendDst, i.blendSrcAlpha, i.blendDstAlpha);
          t.blendEquationSeparate(i.blendEq, i.blendAlphaEq);
        } else {
          t.blendFunc(i.blendSrc, i.blendDst);
          t.blendEquation(i.blendEq);
        }
      }
    }
    function _(t, e, i) {
      if (e.depthTest !== i.depthTest) {
        return i.depthTest ? (t.enable(t.DEPTH_TEST), t.depthFunc(i.depthFunc), void t.depthMask(i.depthWrite)) : void t.disable(t.DEPTH_TEST);
      }
      if (e.depthWrite !== i.depthWrite) {
        t.depthMask(i.depthWrite);
      }
      if (false !== i.depthTest) {
        if (e.depthFunc !== i.depthFunc) {
          t.depthFunc(i.depthFunc);
        }
      } else if (i.depthWrite) {
        i.depthTest = true;
        i.depthFunc = a.enums.DS_FUNC_ALWAYS;
        t.enable(t.DEPTH_TEST);
        t.depthFunc(i.depthFunc);
      }
    }
    function p(t, e, i) {
      if (i.stencilTest !== a.enums.STENCIL_INHERIT) {
        return i.stencilTest !== e.stencilTest ? i.stencilTest === a.enums.STENCIL_DISABLE ? void t.disable(t.STENCIL_TEST) : (t.enable(t.STENCIL_TEST), void (i.stencilSep ? (t.stencilFuncSeparate(t.FRONT, i.stencilFuncFront, i.stencilRefFront, i.stencilMaskFront), t.stencilMaskSeparate(t.FRONT, i.stencilWriteMaskFront), t.stencilOpSeparate(t.FRONT, i.stencilFailOpFront, i.stencilZFailOpFront, i.stencilZPassOpFront), t.stencilFuncSeparate(t.BACK, i.stencilFuncBack, i.stencilRefBack, i.stencilMaskBack), t.stencilMaskSeparate(t.BACK, i.stencilWriteMaskBack), t.stencilOpSeparate(t.BACK, i.stencilFailOpBack, i.stencilZFailOpBack, i.stencilZPassOpBack)) : (t.stencilFunc(i.stencilFuncFront, i.stencilRefFront, i.stencilMaskFront), t.stencilMask(i.stencilWriteMaskFront), t.stencilOp(i.stencilFailOpFront, i.stencilZFailOpFront, i.stencilZPassOpFront)))) : void (i.stencilTest !== a.enums.STENCIL_DISABLE && (e.stencilSep === i.stencilSep ? i.stencilSep ? (e.stencilFuncFront === i.stencilFuncFront && e.stencilRefFront === i.stencilRefFront && e.stencilMaskFront === i.stencilMaskFront || t.stencilFuncSeparate(t.FRONT, i.stencilFuncFront, i.stencilRefFront, i.stencilMaskFront), e.stencilWriteMaskFront !== i.stencilWriteMaskFront && t.stencilMaskSeparate(t.FRONT, i.stencilWriteMaskFront), e.stencilFailOpFront === i.stencilFailOpFront && e.stencilZFailOpFront === i.stencilZFailOpFront && e.stencilZPassOpFront === i.stencilZPassOpFront || t.stencilOpSeparate(t.FRONT, i.stencilFailOpFront, i.stencilZFailOpFront, i.stencilZPassOpFront), e.stencilFuncBack === i.stencilFuncBack && e.stencilRefBack === i.stencilRefBack && e.stencilMaskBack === i.stencilMaskBack || t.stencilFuncSeparate(t.BACK, i.stencilFuncBack, i.stencilRefBack, i.stencilMaskBack), e.stencilWriteMaskBack !== i.stencilWriteMaskBack && t.stencilMaskSeparate(t.BACK, i.stencilWriteMaskBack), e.stencilFailOpBack === i.stencilFailOpBack && e.stencilZFailOpBack === i.stencilZFailOpBack && e.stencilZPassOpBack === i.stencilZPassOpBack || t.stencilOpSeparate(t.BACK, i.stencilFailOpBack, i.stencilZFailOpBack, i.stencilZPassOpBack)) : (e.stencilFuncFront === i.stencilFuncFront && e.stencilRefFront === i.stencilRefFront && e.stencilMaskFront === i.stencilMaskFront || t.stencilFunc(i.stencilFuncFront, i.stencilRefFront, i.stencilMaskFront), e.stencilWriteMaskFront !== i.stencilWriteMaskFront && t.stencilMask(i.stencilWriteMaskFront), e.stencilFailOpFront === i.stencilFailOpFront && e.stencilZFailOpFront === i.stencilZFailOpFront && e.stencilZPassOpFront === i.stencilZPassOpFront || t.stencilOp(i.stencilFailOpFront, i.stencilZFailOpFront, i.stencilZPassOpFront)) : i.stencilSep ? (t.stencilFuncSeparate(t.FRONT, i.stencilFuncFront, i.stencilRefFront, i.stencilMaskFront), t.stencilMaskSeparate(t.FRONT, i.stencilWriteMaskFront), t.stencilOpSeparate(t.FRONT, i.stencilFailOpFront, i.stencilZFailOpFront, i.stencilZPassOpFront), t.stencilFuncSeparate(t.BACK, i.stencilFuncBack, i.stencilRefBack, i.stencilMaskBack), t.stencilMaskSeparate(t.BACK, i.stencilWriteMaskBack), t.stencilOpSeparate(t.BACK, i.stencilFailOpBack, i.stencilZFailOpBack, i.stencilZPassOpBack)) : (t.stencilFunc(i.stencilFuncFront, i.stencilRefFront, i.stencilMaskFront), t.stencilMask(i.stencilWriteMaskFront), t.stencilOp(i.stencilFailOpFront, i.stencilZFailOpFront, i.stencilZPassOpFront))));
      }
    }
    function v(t, e, i) {
      if (e.cullMode !== i.cullMode) {
        if (i.cullMode !== a.enums.CULL_NONE) {
          t.enable(t.CULL_FACE);
          t.cullFace(i.cullMode);
        } else {
          t.disable(t.CULL_FACE);
        }
      }
    }
    function g(t, e, i, n) {
      var r = false;
      if (-1 !== n.maxStream) {
        if (i.maxStream !== n.maxStream) {
          r = true;
        } else if (i.program !== n.program) {
          r = true;
        } else {
          for (var s = 0; s < n.maxStream + 1; ++s) {
            if (i.vertexBuffers[s] !== n.vertexBuffers[s] || i.vertexBufferOffsets[s] !== n.vertexBufferOffsets[s]) {
              r = true;
              break;
            }
          }
        }
        if (r) {
          for (var a = 0; a < t._caps.maxVertexAttribs; ++a) {
            t._newAttributes[a] = 0;
          }
          for (var o = 0; o < n.maxStream + 1; ++o) {
            var c = n.vertexBuffers[o];
            var l = n.vertexBufferOffsets[o];
            if (c && -1 !== c._glID) {
              e.bindBuffer(e.ARRAY_BUFFER, c._glID);
              for (var h = 0; h < n.program._attributes.length; ++h) {
                var u = n.program._attributes[h];
                var f = c._format.element(u.name);
                if (f) {
                  if (0 === t._enabledAttributes[u.location]) {
                    e.enableVertexAttribArray(u.location);
                    t._enabledAttributes[u.location] = 1;
                  }
                  t._newAttributes[u.location] = 1;
                  e.vertexAttribPointer(u.location, f.num, f.type, f.normalize, f.stride, f.offset + l * f.stride);
                }
              }
            }
          }
          for (var d = 0; d < t._caps.maxVertexAttribs; ++d) {
            if (t._enabledAttributes[d] !== t._newAttributes[d]) {
              e.disableVertexAttribArray(d);
              t._enabledAttributes[d] = 0;
            }
          }
        }
      }
    }
    function m(t, e, i) {
      for (var n = 0; n < i.maxTextureSlot + 1; ++n) {
        if (e.textureUnits[n] !== i.textureUnits[n]) {
          var r = i.textureUnits[n];
          if (r && -1 !== r._glID) {
            t.activeTexture(t.TEXTURE0 + n);
            t.bindTexture(r._target, r._glID);
          }
        }
      }
    }
    function y(t, e, i, n) {
      if (undefined === n) {
        n = 0;
      }
      if (i instanceof o.default) {
        t.framebufferTexture2D(t.FRAMEBUFFER, e, t.TEXTURE_2D, i._glID, 0);
      } else if (i instanceof c.default) {
        t.framebufferTexture2D(t.FRAMEBUFFER, e, t.TEXTURE_CUBE_MAP_POSITIVE_X + n, i._glID, 0);
      } else {
        t.framebufferRenderbuffer(t.FRAMEBUFFER, e, t.RENDERBUFFER, i._glID);
      }
    }
    var T = function () {
      function t(t, e) {
        var i;
        if (undefined === (e = e || {}).alpha) {
          e.alpha = false;
        }
        if (undefined === e.stencil) {
          e.stencil = true;
        }
        if (undefined === e.depth) {
          e.depth = true;
        }
        if (undefined === e.antialias) {
          e.antialias = false;
        }
        if (undefined === e.preserveDrawingBuffer) {
          e.preserveDrawingBuffer = false;
        }
        try {
          i = t.getContext("webgl", e) || t.getContext("experimental-webgl", e) || t.getContext("webkit-3d", e) || t.getContext("moz-webgl", e);
        } catch (r) {
          i = null;
        }
        if (!i) {
          throw Error(cc.debug.getError(2400, "no webgl"));
        }
        this._gl = i;
        this._extensions = {};
        this._caps = {};
        this._stats = {
          texture: 0,
          vb: 0,
          ib: 0,
          drawcalls: 0
        };
        this._initExtensions(["EXT_texture_filter_anisotropic", "EXT_shader_texture_lod", "OES_standard_derivatives", "OES_texture_float", "OES_texture_float_linear", "OES_texture_half_float", "OES_texture_half_float_linear", "OES_vertex_array_object", "WEBGL_compressed_texture_astc", "WEBGL_compressed_texture_etc", "WEBGL_compressed_texture_etc1", "WEBGL_compressed_texture_pvrtc", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture", "WEBGL_draw_buffers"]);
        this._initCaps();
        this._initStates();
        s.default.initDefault(this);
        this._current = new s.default(this);
        this._next = new s.default(this);
        this._uniforms = {};
        this._vx = this._vy = this._vw = this._vh = 0;
        this._sx = this._sy = this._sw = this._sh = 0;
        this._framebuffer = null;
        this._enabledAttributes = Array(this._caps.maxVertexAttribs);
        this._newAttributes = Array(this._caps.maxVertexAttribs);
        for (var n = 0; n < this._caps.maxVertexAttribs; ++n) {
          this._enabledAttributes[n] = 0;
          this._newAttributes[n] = 0;
        }
      }
      var i;
      var n = t.prototype;
      n._initExtensions = function (t) {
        var e = this._gl;
        var i = ["", "WEBKIT_", "MOZ_"];
        for (var n = 0; n < t.length; ++n) {
          var r = t[n];
          for (var s = 0; s < 3; s++) {
            try {
              var a = e.getExtension(i[s] + r);
              if (a) {
                this._extensions[r] = a;
                break;
              }
            } catch (o) {}
          }
        }
      };
      n._initCaps = function () {
        var t = this._gl;
        var e = this.ext("WEBGL_draw_buffers");
        this._caps.maxVertexStreams = 4;
        this._caps.maxVertexTextures = t.getParameter(t.MAX_VERTEX_TEXTURE_IMAGE_UNITS);
        this._caps.maxFragUniforms = t.getParameter(t.MAX_FRAGMENT_UNIFORM_VECTORS);
        this._caps.maxTextureUnits = t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS);
        this._caps.maxVertexAttribs = t.getParameter(t.MAX_VERTEX_ATTRIBS);
        this._caps.maxTextureSize = t.getParameter(t.MAX_TEXTURE_SIZE);
        this._caps.maxDrawBuffers = e ? t.getParameter(e.MAX_DRAW_BUFFERS_WEBGL) : 1;
        this._caps.maxColorAttachments = e ? t.getParameter(e.MAX_COLOR_ATTACHMENTS_WEBGL) : 1;
      };
      n._initStates = function () {
        var t = this._gl;
        t.disable(t.BLEND);
        t.blendFunc(t.ONE, t.ZERO);
        t.blendEquation(t.FUNC_ADD);
        t.blendColor(1, 1, 1, 1);
        t.colorMask(true, true, true, true);
        t.enable(t.CULL_FACE);
        t.cullFace(t.BACK);
        t.disable(t.DEPTH_TEST);
        t.depthFunc(t.LESS);
        t.depthMask(false);
        t.disable(t.POLYGON_OFFSET_FILL);
        t.depthRange(0, 1);
        t.disable(t.STENCIL_TEST);
        t.stencilFunc(t.ALWAYS, 0, 255);
        t.stencilMask(255);
        t.stencilOp(t.KEEP, t.KEEP, t.KEEP);
        t.clearDepth(1);
        t.clearColor(0, 0, 0, 0);
        t.clearStencil(0);
        t.disable(t.SCISSOR_TEST);
      };
      n._restoreTexture = function (t) {
        var e = this._gl;
        var i = this._current.textureUnits[t];
        if (i && -1 !== i._glID) {
          e.bindTexture(i._target, i._glID);
        } else {
          e.bindTexture(e.TEXTURE_2D, null);
        }
      };
      n._restoreIndexBuffer = function () {
        var t = this._gl;
        var e = this._current.indexBuffer;
        if (e && -1 !== e._glID) {
          t.bindBuffer(t.ELEMENT_ARRAY_BUFFER, e._glID);
        } else {
          t.bindBuffer(t.ELEMENT_ARRAY_BUFFER, null);
        }
      };
      n.ext = function (t) {
        return this._extensions[t];
      };
      n.allowFloatTexture = function () {
        return null != this.ext("OES_texture_float");
      };
      n.setFrameBuffer = function (t) {
        if (this._framebuffer !== t) {
          this._framebuffer = t;
          var e = this._gl;
          if (t) {
            e.bindFramebuffer(e.FRAMEBUFFER, t._glID);
            var i = t._colors.length;
            for (var n = 0; n < i; ++n) {
              var r = t._colors[n];
              y(e, e.COLOR_ATTACHMENT0 + n, r);
            }
            for (var s = i; s < this._caps.maxColorAttachments; ++s) {
              e.framebufferTexture2D(e.FRAMEBUFFER, e.COLOR_ATTACHMENT0 + s, e.TEXTURE_2D, null, 0);
            }
            if (t._depth) {
              y(e, e.DEPTH_ATTACHMENT, t._depth);
            }
            if (t._stencil) {
              y(e, e.STENCIL_ATTACHMENT, t._stencil);
            }
            if (t._depthStencil) {
              y(e, e.DEPTH_STENCIL_ATTACHMENT, t._depthStencil);
            }
          } else {
            e.bindFramebuffer(e.FRAMEBUFFER, null);
          }
        }
      };
      n.setViewport = function (t, e, i, n) {
        if (!(this._vx === t && this._vy === e && this._vw === i && this._vh === n)) {
          this._gl.viewport(t, e, i, n);
          this._vx = t;
          this._vy = e;
          this._vw = i;
          this._vh = n;
        }
      };
      n.setScissor = function (t, e, i, n) {
        if (!(this._sx === t && this._sy === e && this._sw === i && this._sh === n)) {
          this._gl.scissor(t, e, i, n);
          this._sx = t;
          this._sy = e;
          this._sw = i;
          this._sh = n;
        }
      };
      n.clear = function (t) {
        if (undefined !== t.color || undefined !== t.depth || undefined !== t.stencil) {
          var e = this._gl;
          var i = 0;
          if (undefined !== t.color) {
            i |= e.COLOR_BUFFER_BIT;
            e.clearColor(t.color[0], t.color[1], t.color[2], t.color[3]);
          }
          if (undefined !== t.depth) {
            i |= e.DEPTH_BUFFER_BIT;
            e.clearDepth(t.depth);
            e.enable(e.DEPTH_TEST);
            e.depthMask(true);
            e.depthFunc(e.ALWAYS);
          }
          if (undefined !== t.stencil) {
            i |= e.STENCIL_BUFFER_BIT;
            e.clearStencil(t.stencil);
          }
          e.clear(i);
          if (undefined !== t.depth) {
            if (false === this._current.depthTest) {
              e.disable(e.DEPTH_TEST);
            } else {
              if (false === this._current.depthWrite) {
                e.depthMask(false);
              }
              if (this._current.depthFunc !== a.enums.DS_FUNC_ALWAYS) {
                e.depthFunc(this._current.depthFunc);
              }
            }
          }
        }
      };
      n.enableBlend = function () {
        this._next.blend = true;
      };
      n.enableDepthTest = function () {
        this._next.depthTest = true;
      };
      n.enableDepthWrite = function () {
        this._next.depthWrite = true;
      };
      n.setStencilTest = function (t) {
        this._next.stencilTest = t;
      };
      n.setStencilFunc = function (t, e, i) {
        this._next.stencilSep = false;
        this._next.stencilFuncFront = this._next.stencilFuncBack = t;
        this._next.stencilRefFront = this._next.stencilRefBack = e;
        this._next.stencilMaskFront = this._next.stencilMaskBack = i;
      };
      n.setStencilFuncFront = function (t, e, i) {
        this._next.stencilSep = true;
        this._next.stencilFuncFront = t;
        this._next.stencilRefFront = e;
        this._next.stencilMaskFront = i;
      };
      n.setStencilFuncBack = function (t, e, i) {
        this._next.stencilSep = true;
        this._next.stencilFuncBack = t;
        this._next.stencilRefBack = e;
        this._next.stencilMaskBack = i;
      };
      n.setStencilOp = function (t, e, i, n) {
        this._next.stencilFailOpFront = this._next.stencilFailOpBack = t;
        this._next.stencilZFailOpFront = this._next.stencilZFailOpBack = e;
        this._next.stencilZPassOpFront = this._next.stencilZPassOpBack = i;
        this._next.stencilWriteMaskFront = this._next.stencilWriteMaskBack = n;
      };
      n.setStencilOpFront = function (t, e, i, n) {
        this._next.stencilSep = true;
        this._next.stencilFailOpFront = t;
        this._next.stencilZFailOpFront = e;
        this._next.stencilZPassOpFront = i;
        this._next.stencilWriteMaskFront = n;
      };
      n.setStencilOpBack = function (t, e, i, n) {
        this._next.stencilSep = true;
        this._next.stencilFailOpBack = t;
        this._next.stencilZFailOpBack = e;
        this._next.stencilZPassOpBack = i;
        this._next.stencilWriteMaskBack = n;
      };
      n.setDepthFunc = function (t) {
        this._next.depthFunc = t;
      };
      n.setBlendColor32 = function (t) {
        this._next.blendColor = t;
      };
      n.setBlendColor = function (t, e, i, n) {
        this._next.blendColor = (255 * t << 24 | 255 * e << 16 | 255 * i << 8 | 255 * n) >>> 0;
      };
      n.setBlendFunc = function (t, e) {
        this._next.blendSep = false;
        this._next.blendSrc = t;
        this._next.blendDst = e;
      };
      n.setBlendFuncSep = function (t, e, i, n) {
        this._next.blendSep = true;
        this._next.blendSrc = t;
        this._next.blendDst = e;
        this._next.blendSrcAlpha = i;
        this._next.blendDstAlpha = n;
      };
      n.setBlendEq = function (t) {
        this._next.blendSep = false;
        this._next.blendEq = t;
      };
      n.setBlendEqSep = function (t, e) {
        this._next.blendSep = true;
        this._next.blendEq = t;
        this._next.blendAlphaEq = e;
      };
      n.setCullMode = function (t) {
        this._next.cullMode = t;
      };
      n.setVertexBuffer = function (t, e, i) {
        if (undefined === i) {
          i = 0;
        }
        this._next.vertexBuffers[t] = e;
        this._next.vertexBufferOffsets[t] = i;
        if (this._next.maxStream < t) {
          this._next.maxStream = t;
        }
      };
      n.setIndexBuffer = function (t) {
        this._next.indexBuffer = t;
      };
      n.setProgram = function (t) {
        this._next.program = t;
      };
      n.setTexture = function (t, e, i) {
        if (!(i >= this._caps.maxTextureUnits)) {
          this._next.textureUnits[i] = e;
          this.setUniform(t, i);
          if (this._next.maxTextureSlot < i) {
            this._next.maxTextureSlot = i;
          }
        }
      };
      n.setTextureArray = function (t, e, i) {
        var n = e.length;
        if (!(n >= this._caps.maxTextureUnits)) {
          for (var r = 0; r < n; ++r) {
            var s = i[r];
            this._next.textureUnits[s] = e[r];
            if (this._next.maxTextureSlot < s) {
              this._next.maxTextureSlot = s;
            }
          }
          this.setUniform(t, i);
        }
      };
      n.setUniform = function (t, e) {
        var i = this._uniforms[t];
        var n = false;
        var r = false;
        var s = false;
        var a = false;
        do {
          if (!i) {
            break;
          }
          s = Array.isArray(e) || e instanceof Float32Array;
          a = e instanceof Int32Array;
          r = s || a;
          if (i.isArray !== r) {
            break;
          }
          if (i.isArray && i.value.length !== e.length) {
            break;
          }
          n = true;
        } while (0);
        if (n) {
          var o = i.value;
          var c = false;
          if (i.isArray) {
            var l = 0;
            for (var h = o.length; l < h; l++) {
              if (o[l] !== e[l]) {
                c = true;
                o[l] = e[l];
              }
            }
          } else if (o !== e) {
            c = true;
            i.value = e;
          }
          if (c) {
            i.dirty = true;
          }
        } else {
          var u = e;
          if (s) {
            u = new Float32Array(e);
          } else if (a) {
            u = new Int32Array(e);
          }
          i = {
            dirty: true,
            value: u,
            isArray: r
          };
        }
        this._uniforms[t] = i;
      };
      n.setUniformDirectly = function (t, e) {
        var i = this._uniforms[t];
        if (!i) {
          this._uniforms[t] = i = {};
        }
        i.dirty = true;
        i.value = e;
      };
      n.setPrimitiveType = function (t) {
        this._next.primitiveType = t;
      };
      n.resetDrawCalls = function () {
        this._stats.drawcalls = 0;
      };
      n.getDrawCalls = function () {
        return this._stats.drawcalls;
      };
      n.draw = function (t, e) {
        var i = this._gl;
        var n = this._current;
        var r = this._next;
        d(i, n, r);
        _(i, n, r);
        p(i, n, r);
        v(i, n, r);
        g(this, i, n, r);
        if (n.indexBuffer !== r.indexBuffer) {
          i.bindBuffer(i.ELEMENT_ARRAY_BUFFER, r.indexBuffer && -1 !== r.indexBuffer._glID ? r.indexBuffer._glID : null);
        }
        var s = false;
        if (n.program !== r.program) {
          if (r.program._linked) {
            i.useProgram(r.program._glID);
          }
          s = true;
        }
        m(i, n, r);
        for (var a = 0; a < r.program._uniforms.length; ++a) {
          var o = r.program._uniforms[a];
          var c = this._uniforms[o.name];
          if (c && (s || c.dirty)) {
            c.dirty = false;
            var l = undefined === o.size ? n[o.type] : r[o.type];
            if (l) {
              l(i, o.location, c.value);
            }
          }
        }
        if (e) {
          if (r.indexBuffer) {
            i.drawElements(this._next.primitiveType, e, r.indexBuffer._format, t * r.indexBuffer._bytesPerIndex);
          } else {
            i.drawArrays(this._next.primitiveType, t, e);
          }
          this._stats.drawcalls++;
        }
        n.set(r);
        r.reset();
      };
      if (i = [{
        key: "caps",
        get: function () {
          return this._caps;
        }
      }]) {
        h(t.prototype, i);
      }
      Object.defineProperty(t, "prototype", {
        writable: false
      });
      return t;
    }();
    i.default = T;
    e.exports = i.default;
  }, {
    "./enums": 279,
    "./state": 286,
    "./texture-2d": 287,
    "./texture-cube": 288
  }],
  279: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.attrTypeBytes = function (t) {
      return t === 5120 ? 1 : t === 5121 ? 1 : t === 5122 ? 2 : t === 5123 ? 2 : t === 5124 ? 4 : t === 5125 ? 4 : t === 5126 ? 4 : 0;
    };
    i.enums = undefined;
    i.glFilter = function (t, e, i) {
      if (undefined === i) {
        i = -1;
      }
      var r = n[e][i + 1];
      return undefined === r ? -1 === i ? t.LINEAR : t.LINEAR_MIPMAP_LINEAR : r;
    };
    i.glTextureFmt = function (t) {
      var e = r[t];
      return undefined === e ? r[16] : e;
    };
    var n = [[9728, 9984, 9986], [9729, 9985, 9987]];
    var r = [{
      format: 6407,
      internalFormat: 33776,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 33777,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 33778,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 33779,
      pixelType: null
    }, {
      format: 6407,
      internalFormat: 36196,
      pixelType: null
    }, {
      format: 6407,
      internalFormat: 35841,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 35843,
      pixelType: null
    }, {
      format: 6407,
      internalFormat: 35840,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 35842,
      pixelType: null
    }, {
      format: 6406,
      internalFormat: 6406,
      pixelType: 5121
    }, {
      format: 6409,
      internalFormat: 6409,
      pixelType: 5121
    }, {
      format: 6410,
      internalFormat: 6410,
      pixelType: 5121
    }, {
      format: 6407,
      internalFormat: 6407,
      pixelType: 33635
    }, {
      format: 6408,
      internalFormat: 6408,
      pixelType: 32820
    }, {
      format: 6408,
      internalFormat: 6408,
      pixelType: 32819
    }, {
      format: 6407,
      internalFormat: 6407,
      pixelType: 5121
    }, {
      format: 6408,
      internalFormat: 6408,
      pixelType: 5121
    }, {
      format: 6407,
      internalFormat: 6407,
      pixelType: 36193
    }, {
      format: 6408,
      internalFormat: 6408,
      pixelType: 36193
    }, {
      format: 6407,
      internalFormat: 6407,
      pixelType: 5126
    }, {
      format: 6408,
      internalFormat: 6408,
      pixelType: 5126
    }, {
      format: null,
      internalFormat: null,
      pixelType: null
    }, {
      format: null,
      internalFormat: null,
      pixelType: null
    }, {
      format: null,
      internalFormat: null,
      pixelType: null
    }, {
      format: null,
      internalFormat: null,
      pixelType: null
    }, {
      format: 6402,
      internalFormat: 6402,
      pixelType: 5123
    }, {
      format: 6402,
      internalFormat: 6402,
      pixelType: 5125
    }, {
      format: 6402,
      internalFormat: 6402,
      pixelType: 5125
    }, {
      format: 6407,
      internalFormat: 37492,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37496,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37808,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37809,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37810,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37811,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37812,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37813,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37814,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37815,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37816,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37817,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37818,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37819,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37820,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37821,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37840,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37841,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37842,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37843,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37844,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37845,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37846,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37847,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37848,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37849,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37850,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37851,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37852,
      pixelType: null
    }, {
      format: 6408,
      internalFormat: 37853,
      pixelType: null
    }];
    var s = {
      USAGE_STATIC: 35044,
      USAGE_DYNAMIC: 35048,
      USAGE_STREAM: 35040,
      INDEX_FMT_UINT8: 5121,
      INDEX_FMT_UINT16: 5123,
      INDEX_FMT_UINT32: 5125,
      ATTR_POSITION: "a_position",
      ATTR_NORMAL: "a_normal",
      ATTR_TANGENT: "a_tangent",
      ATTR_BITANGENT: "a_bitangent",
      ATTR_WEIGHTS: "a_weights",
      ATTR_JOINTS: "a_joints",
      ATTR_COLOR: "a_color",
      ATTR_COLOR0: "a_color0",
      ATTR_COLOR1: "a_color1",
      ATTR_UV: "a_uv",
      ATTR_UV0: "a_uv0",
      ATTR_UV1: "a_uv1",
      ATTR_UV2: "a_uv2",
      ATTR_UV3: "a_uv3",
      ATTR_UV4: "a_uv4",
      ATTR_UV5: "a_uv5",
      ATTR_UV6: "a_uv6",
      ATTR_UV7: "a_uv7",
      ATTR_TEX_COORD: "a_texCoord",
      ATTR_TEX_COORD1: "a_texCoord1",
      ATTR_TEX_COORD2: "a_texCoord2",
      ATTR_TEX_COORD3: "a_texCoord3",
      ATTR_TEX_COORD4: "a_texCoord4",
      ATTR_TEX_COORD5: "a_texCoord5",
      ATTR_TEX_COORD6: "a_texCoord6",
      ATTR_TEX_COORD7: "a_texCoord7",
      ATTR_TEX_COORD8: "a_texCoord8",
      ATTR_TYPE_INT8: 5120,
      ATTR_TYPE_UINT8: 5121,
      ATTR_TYPE_INT16: 5122,
      ATTR_TYPE_UINT16: 5123,
      ATTR_TYPE_INT32: 5124,
      ATTR_TYPE_UINT32: 5125,
      ATTR_TYPE_FLOAT32: 5126,
      FILTER_NEAREST: 0,
      FILTER_LINEAR: 1,
      WRAP_REPEAT: 10497,
      WRAP_CLAMP: 33071,
      WRAP_MIRROR: 33648,
      TEXTURE_FMT_RGB_DXT1: 0,
      TEXTURE_FMT_RGBA_DXT1: 1,
      TEXTURE_FMT_RGBA_DXT3: 2,
      TEXTURE_FMT_RGBA_DXT5: 3,
      TEXTURE_FMT_RGB_ETC1: 4,
      TEXTURE_FMT_RGB_PVRTC_2BPPV1: 5,
      TEXTURE_FMT_RGBA_PVRTC_2BPPV1: 6,
      TEXTURE_FMT_RGB_PVRTC_4BPPV1: 7,
      TEXTURE_FMT_RGBA_PVRTC_4BPPV1: 8,
      TEXTURE_FMT_A8: 9,
      TEXTURE_FMT_L8: 10,
      TEXTURE_FMT_L8_A8: 11,
      TEXTURE_FMT_R5_G6_B5: 12,
      TEXTURE_FMT_R5_G5_B5_A1: 13,
      TEXTURE_FMT_R4_G4_B4_A4: 14,
      TEXTURE_FMT_RGB8: 15,
      TEXTURE_FMT_RGBA8: 16,
      TEXTURE_FMT_RGB16F: 17,
      TEXTURE_FMT_RGBA16F: 18,
      TEXTURE_FMT_RGB32F: 19,
      TEXTURE_FMT_RGBA32F: 20,
      TEXTURE_FMT_R32F: 21,
      TEXTURE_FMT_111110F: 22,
      TEXTURE_FMT_SRGB: 23,
      TEXTURE_FMT_SRGBA: 24,
      TEXTURE_FMT_D16: 25,
      TEXTURE_FMT_D32: 26,
      TEXTURE_FMT_D24S8: 27,
      TEXTURE_FMT_RGB_ETC2: 28,
      TEXTURE_FMT_RGBA_ETC2: 29,
      TEXTURE_FMT_RGBA_ASTC_4X4: 30,
      TEXTURE_FMT_RGBA_ASTC_5X4: 31,
      TEXTURE_FMT_RGBA_ASTC_5X5: 32,
      TEXTURE_FMT_RGBA_ASTC_6X5: 33,
      TEXTURE_FMT_RGBA_ASTC_6X6: 34,
      TEXTURE_FMT_RGBA_ASTC_8X5: 35,
      TEXTURE_FMT_RGBA_ASTC_8X6: 36,
      TEXTURE_FMT_RGBA_ASTC_8X8: 37,
      TEXTURE_FMT_RGBA_ASTC_10X5: 38,
      TEXTURE_FMT_RGBA_ASTC_10X6: 39,
      TEXTURE_FMT_RGBA_ASTC_10X8: 40,
      TEXTURE_FMT_RGBA_ASTC_10X10: 41,
      TEXTURE_FMT_RGBA_ASTC_12X10: 42,
      TEXTURE_FMT_RGBA_ASTC_12X12: 43,
      TEXTURE_FMT_SRGBA_ASTC_4X4: 44,
      TEXTURE_FMT_SRGBA_ASTC_5X4: 45,
      TEXTURE_FMT_SRGBA_ASTC_5X5: 46,
      TEXTURE_FMT_SRGBA_ASTC_6X5: 47,
      TEXTURE_FMT_SRGBA_ASTC_6X6: 48,
      TEXTURE_FMT_SRGBA_ASTC_8X5: 49,
      TEXTURE_FMT_SRGBA_ASTC_8X6: 50,
      TEXTURE_FMT_SRGBA_ASTC_8X8: 51,
      TEXTURE_FMT_SRGBA_ASTC_10X5: 52,
      TEXTURE_FMT_SRGBA_ASTC_10X6: 53,
      TEXTURE_FMT_SRGBA_ASTC_10X8: 54,
      TEXTURE_FMT_SRGBA_ASTC_10X10: 55,
      TEXTURE_FMT_SRGBA_ASTC_12X10: 56,
      TEXTURE_FMT_SRGBA_ASTC_12X12: 57,
      DS_FUNC_NEVER: 512,
      DS_FUNC_LESS: 513,
      DS_FUNC_EQUAL: 514,
      DS_FUNC_LEQUAL: 515,
      DS_FUNC_GREATER: 516,
      DS_FUNC_NOTEQUAL: 517,
      DS_FUNC_GEQUAL: 518,
      DS_FUNC_ALWAYS: 519,
      RB_FMT_RGBA4: 32854,
      RB_FMT_RGB5_A1: 32855,
      RB_FMT_RGB565: 36194,
      RB_FMT_D16: 33189,
      RB_FMT_S8: 36168,
      RB_FMT_D24S8: 34041,
      BLEND_FUNC_ADD: 32774,
      BLEND_FUNC_SUBTRACT: 32778,
      BLEND_FUNC_REVERSE_SUBTRACT: 32779,
      BLEND_ZERO: 0,
      BLEND_ONE: 1,
      BLEND_SRC_COLOR: 768,
      BLEND_ONE_MINUS_SRC_COLOR: 769,
      BLEND_DST_COLOR: 774,
      BLEND_ONE_MINUS_DST_COLOR: 775,
      BLEND_SRC_ALPHA: 770,
      BLEND_ONE_MINUS_SRC_ALPHA: 771,
      BLEND_DST_ALPHA: 772,
      BLEND_ONE_MINUS_DST_ALPHA: 773,
      BLEND_CONSTANT_COLOR: 32769,
      BLEND_ONE_MINUS_CONSTANT_COLOR: 32770,
      BLEND_CONSTANT_ALPHA: 32771,
      BLEND_ONE_MINUS_CONSTANT_ALPHA: 32772,
      BLEND_SRC_ALPHA_SATURATE: 776,
      STENCIL_DISABLE: 0,
      STENCIL_ENABLE: 1,
      STENCIL_INHERIT: 2,
      STENCIL_OP_KEEP: 7680,
      STENCIL_OP_ZERO: 0,
      STENCIL_OP_REPLACE: 7681,
      STENCIL_OP_INCR: 7682,
      STENCIL_OP_INCR_WRAP: 34055,
      STENCIL_OP_DECR: 7683,
      STENCIL_OP_DECR_WRAP: 34056,
      STENCIL_OP_INVERT: 5386,
      CULL_NONE: 0,
      CULL_FRONT: 1028,
      CULL_BACK: 1029,
      CULL_FRONT_AND_BACK: 1032,
      PT_POINTS: 0,
      PT_LINES: 1,
      PT_LINE_LOOP: 2,
      PT_LINE_STRIP: 3,
      PT_TRIANGLES: 4,
      PT_TRIANGLE_STRIP: 5,
      PT_TRIANGLE_FAN: 6
    };
    i.enums = s;
  }, {}],
  280: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n = function () {
      function t(t, e, i, n) {
        this._device = t;
        this._width = e;
        this._height = i;
        this._colors = n.colors || [];
        this._depth = n.depth || null;
        this._stencil = n.stencil || null;
        this._depthStencil = n.depthStencil || null;
        this._glID = t._gl.createFramebuffer();
      }
      var e = t.prototype;
      e.destroy = function () {
        if (null !== this._glID) {
          this._device._gl.deleteFramebuffer(this._glID);
          this._glID = null;
        }
      };
      e.getHandle = function () {
        return this._glID;
      };
      return t;
    }();
    i.default = n;
    e.exports = i.default;
  }, {}],
  281: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n;
    var r = t("./enums");
    function s(t, e) {
      for (var i = 0; i < e.length; i++) {
        var n = e[i];
        n.enumerable = n.enumerable || false;
        n.configurable = true;
        if ("value" in n) {
          n.writable = true;
        }
        Object.defineProperty(t, n.key, n);
      }
    }
    (n = {
      [r.enums.INDEX_FMT_UINT16]: 2,
      [r.enums.INDEX_FMT_UINT32]: 4
    })[r.enums.INDEX_FMT_UINT8] = 1;
    var o = function () {
      function t(t, e, i, n) {
        this._device = t;
        this._format = e;
        this._usage = i;
        this._bytesPerIndex = n[e];
        this._bytes = n.byteLength;
        this._numIndices = this._bytes / this._bytesPerIndex;
        this._needExpandDataStore = true;
        this._glID = t._gl.createBuffer();
        this.update(0, n);
        t._stats.ib += this._bytes;
      }
      var i;
      var n = t.prototype;
      n.destroy = function () {
        if (-1 !== this._glID) {
          this._device._gl.deleteBuffer(this._glID);
          this._device._stats.ib -= this.bytes;
          this._glID = -1;
        }
      };
      n.update = function (t, e) {
        if (-1 !== this._glID && 0 !== e.byteLength) {
          if (t + e.byteLength > this._bytes) {
            if (t) {
              return;
            }
            this._needExpandDataStore = true;
            this._bytes = t + e.byteLength;
            this._numIndices = this._bytes / this._bytesPerIndex;
          }
          var i = this._device._gl;
          var n = this._usage;
          i.bindBuffer(i.ELEMENT_ARRAY_BUFFER, this._glID);
          if (this._needExpandDataStore) {
            i.bufferData(i.ELEMENT_ARRAY_BUFFER, e, n);
            this._needExpandDataStore = false;
          } else {
            i.bufferSubData(i.ELEMENT_ARRAY_BUFFER, t, e);
          }
          this._device._restoreIndexBuffer();
        }
      };
      n.setUsage = function (t) {
        this._usage = t;
      };
      if (i = [{
        key: "count",
        get: function () {
          return this._numIndices;
        }
      }]) {
        s(t.prototype, i);
      }
      Object.defineProperty(t, "prototype", {
        writable: false
      });
      return t;
    }();
    o.BYTES_PER_INDEX = n;
    i.default = o;
    e.exports = i.default;
  }, {
    "./enums": 279
  }],
  282: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n;
    var r = t("./enums");
    n = {
      VertexFormat: t("./vertex-format"),
      IndexBuffer: t("./index-buffer"),
      VertexBuffer: t("./vertex-buffer"),
      Program: t("./program"),
      Texture: t("./texture"),
      Texture2D: t("./texture-2d"),
      TextureCube: t("./texture-cube"),
      RenderBuffer: t("./render-buffer"),
      FrameBuffer: t("./frame-buffer"),
      Device: t("./device"),
      attrTypeBytes: r.attrTypeBytes,
      glFilter: r.glFilter,
      glTextureFmt: r.glTextureFmt
    };
    Object.assign(n, r.enums);
    i.default = n;
    cc.gfx = n;
    e.exports = i.default;
  }, {
    "./device": 278,
    "./enums": 279,
    "./frame-buffer": 280,
    "./index-buffer": 281,
    "./program": 284,
    "./render-buffer": 285,
    "./texture": 289,
    "./texture-2d": 287,
    "./texture-cube": 288,
    "./vertex-buffer": 290,
    "./vertex-format": 291
  }],
  283: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.isPow2 = function (t) {
      return !(t & t - 1 || !t);
    };
  }, {}],
  284: [function (t, e, i) {
    "use strict";

    function n(t, e) {
      for (var i = 0; i < e.length; i++) {
        var n = e[i];
        n.enumerable = n.enumerable || false;
        n.configurable = true;
        if ("value" in n) {
          n.writable = true;
        }
        Object.defineProperty(t, n.key, n);
      }
    }
    i.__esModule = true;
    i.default = undefined;
    var r = 0;
    function s(t, e, i) {
      if (i) {
        i.split("\n").forEach(function (i) {
          if (!(i.length < 5)) {
            var n = /^ERROR:\s+(\d+):(\d+):\s*(.*)$/.exec(i);
            if (n) {
              t.push({
                type: e,
                fileID: 0 | n[1],
                line: 0 | n[2],
                message: n[3].trim()
              });
            } else if (i.length > 0) {
              t.push({
                type: e,
                fileID: -1,
                line: 0,
                message: i
              });
            }
          }
        });
      }
    }
    var a = function () {
      function t(t, e) {
        this._device = t;
        this._attributes = [];
        this._uniforms = [];
        this._samplers = [];
        this._errors = [];
        this._linked = false;
        this._vertSource = e.vert;
        this._fragSource = e.frag;
        this._glID = null;
        this._id = r++;
      }
      var i;
      var a = t.prototype;
      a.link = function () {
        if (!this._linked) {
          var t = this._device._gl;
          if (!t.isContextLost()) {
            var e = o(t, t.VERTEX_SHADER, this._vertSource);
            var i = o(t, t.FRAGMENT_SHADER, this._fragSource);
            var n = t.createProgram();
            t.attachShader(n, e);
            t.attachShader(n, i);
            t.linkProgram(n);
            var r = false;
            var a = this._errors;
            if (!t.getShaderParameter(e, t.COMPILE_STATUS)) {
              s(a, "vs", t.getShaderInfoLog(e) || "");
              r = true;
            }
            if (!t.getShaderParameter(i, t.COMPILE_STATUS)) {
              s(a, "fs", t.getShaderInfoLog(i) || "");
              r = true;
            }
            t.deleteShader(e);
            t.deleteShader(i);
            if (r) {
              return a;
            }
            if (!t.getProgramParameter(n, t.LINK_STATUS)) {
              a.push({
                info: "Failed to link shader program: " + t.getProgramInfoLog(n)
              });
              return a;
            }
            this._glID = n;
            var c = t.getProgramParameter(n, t.ACTIVE_ATTRIBUTES);
            for (var l = 0; l < c; ++l) {
              var h = t.getActiveAttrib(n, l);
              var u = t.getAttribLocation(n, h.name);
              this._attributes.push({
                name: h.name,
                location: u,
                type: h.type
              });
            }
            var f = t.getProgramParameter(n, t.ACTIVE_UNIFORMS);
            for (var d = 0; d < f; ++d) {
              var _ = t.getActiveUniform(n, d);
              var p = _.name;
              var v = t.getUniformLocation(n, p);
              var g = "[0]" === p.substr(p.length - 3);
              if (g) {
                p = p.substr(0, p.length - 3);
              }
              var m = {
                name: p,
                location: v,
                type: _.type,
                size: g ? _.size : undefined
              };
              this._uniforms.push(m);
            }
            this._linked = true;
          }
        }
      };
      a.destroy = function () {
        this._device._gl.deleteProgram(this._glID);
        this._linked = false;
        this._glID = null;
        this._attributes = [];
        this._uniforms = [];
        this._samplers = [];
      };
      if (i = [{
        key: "id",
        get: function () {
          return this._id;
        }
      }]) {
        n(t.prototype, i);
      }
      Object.defineProperty(t, "prototype", {
        writable: false
      });
      return t;
    }();
    function o(t, e, i) {
      var n = t.createShader(e);
      t.shaderSource(n, i);
      t.compileShader(n);
      return n;
    }
    i.default = a;
    e.exports = i.default;
  }, {}],
  285: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n = function () {
      function t(t, e, i, n) {
        this._device = t;
        this._format = e;
        this._glID = t._gl.createRenderbuffer();
        this.update(i, n);
      }
      var e = t.prototype;
      e.update = function (t, e) {
        this._width = t;
        this._height = e;
        var i = this._device._gl;
        i.bindRenderbuffer(i.RENDERBUFFER, this._glID);
        i.renderbufferStorage(i.RENDERBUFFER, this._format, t, e);
        i.bindRenderbuffer(i.RENDERBUFFER, null);
      };
      e.destroy = function () {
        if (null !== this._glID) {
          var t = this._device._gl;
          t.bindRenderbuffer(t.RENDERBUFFER, null);
          t.deleteRenderbuffer(this._glID);
          this._glID = null;
        }
      };
      return t;
    }();
    i.default = n;
    e.exports = i.default;
  }, {}],
  286: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n = t("./enums");
    var r = {
      blend: false,
      blendSep: false,
      blendColor: 4294967295,
      blendEq: n.enums.BLEND_FUNC_ADD,
      blendAlphaEq: n.enums.BLEND_FUNC_ADD,
      blendSrc: n.enums.BLEND_ONE,
      blendDst: n.enums.BLEND_ZERO,
      blendSrcAlpha: n.enums.BLEND_ONE,
      blendDstAlpha: n.enums.BLEND_ZERO,
      depthTest: false,
      depthWrite: false,
      depthFunc: n.enums.DS_FUNC_LESS,
      stencilTest: false,
      stencilSep: false,
      stencilFuncFront: n.enums.DS_FUNC_ALWAYS,
      stencilRefFront: 0,
      stencilMaskFront: 255,
      stencilFailOpFront: n.enums.STENCIL_OP_KEEP,
      stencilZFailOpFront: n.enums.STENCIL_OP_KEEP,
      stencilZPassOpFront: n.enums.STENCIL_OP_KEEP,
      stencilWriteMaskFront: 255,
      stencilFuncBack: n.enums.DS_FUNC_ALWAYS,
      stencilRefBack: 0,
      stencilMaskBack: 255,
      stencilFailOpBack: n.enums.STENCIL_OP_KEEP,
      stencilZFailOpBack: n.enums.STENCIL_OP_KEEP,
      stencilZPassOpBack: n.enums.STENCIL_OP_KEEP,
      stencilWriteMaskBack: 255,
      cullMode: n.enums.CULL_BACK,
      primitiveType: n.enums.PT_TRIANGLES,
      maxStream: -1,
      vertexBuffers: [],
      vertexBufferOffsets: [],
      indexBuffer: null,
      maxTextureSlot: -1,
      textureUnits: [],
      program: null
    };
    var s = function () {
      function t(t) {
        this.vertexBuffers = Array(t._caps.maxVertexStreams);
        this.vertexBufferOffsets = Array(t._caps.maxVertexStreams);
        this.textureUnits = Array(t._caps.maxTextureUnits);
        this.set(r);
      }
      t.initDefault = function (t) {
        r.vertexBuffers = Array(t._caps.maxVertexStreams);
        r.vertexBufferOffsets = Array(t._caps.maxVertexStreams);
        r.textureUnits = Array(t._caps.maxTextureUnits);
      };
      var e = t.prototype;
      e.reset = function () {
        this.set(r);
      };
      e.set = function (t) {
        this.blend = t.blend;
        this.blendSep = t.blendSep;
        this.blendColor = t.blendColor;
        this.blendEq = t.blendEq;
        this.blendAlphaEq = t.blendAlphaEq;
        this.blendSrc = t.blendSrc;
        this.blendDst = t.blendDst;
        this.blendSrcAlpha = t.blendSrcAlpha;
        this.blendDstAlpha = t.blendDstAlpha;
        this.depthTest = t.depthTest;
        this.depthWrite = t.depthWrite;
        this.depthFunc = t.depthFunc;
        this.stencilTest = t.stencilTest;
        this.stencilSep = t.stencilSep;
        this.stencilFuncFront = t.stencilFuncFront;
        this.stencilRefFront = t.stencilRefFront;
        this.stencilMaskFront = t.stencilMaskFront;
        this.stencilFailOpFront = t.stencilFailOpFront;
        this.stencilZFailOpFront = t.stencilZFailOpFront;
        this.stencilZPassOpFront = t.stencilZPassOpFront;
        this.stencilWriteMaskFront = t.stencilWriteMaskFront;
        this.stencilFuncBack = t.stencilFuncBack;
        this.stencilRefBack = t.stencilRefBack;
        this.stencilMaskBack = t.stencilMaskBack;
        this.stencilFailOpBack = t.stencilFailOpBack;
        this.stencilZFailOpBack = t.stencilZFailOpBack;
        this.stencilZPassOpBack = t.stencilZPassOpBack;
        this.stencilWriteMaskBack = t.stencilWriteMaskBack;
        this.cullMode = t.cullMode;
        this.primitiveType = t.primitiveType;
        this.maxStream = t.maxStream;
        for (var e = 0; e < t.vertexBuffers.length; ++e) {
          this.vertexBuffers[e] = t.vertexBuffers[e];
        }
        for (var i = 0; i < t.vertexBufferOffsets.length; ++i) {
          this.vertexBufferOffsets[i] = t.vertexBufferOffsets[i];
        }
        this.indexBuffer = t.indexBuffer;
        this.maxTextureSlot = t.maxTextureSlot;
        for (var n = 0; n < t.textureUnits.length; ++n) {
          this.textureUnits[n] = t.textureUnits[n];
        }
        this.program = t.program;
      };
      return t;
    }();
    i.default = s;
    e.exports = i.default;
  }, {
    "./enums": 279
  }],
  287: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n;
    var r = (n = t("./texture")) && n.__esModule ? n : {
      default: n
    };
    var s = t("./enums");
    var a = t("./misc");
    function o(t, e) {
      return (o = Object.setPrototypeOf || function (t, e) {
        t.__proto__ = e;
        return t;
      })(t, e);
    }
    var c = function (t) {
      function n(e, i) {
        var n;
        var r = (n = t.call(this, e) || this)._device._gl;
        n._target = r.TEXTURE_2D;
        n._glID = r.createTexture();
        i.images = i.images || [null];
        n.update(i);
        return n;
      }
      n.prototype = Object.create(t.prototype);
      n.prototype.constructor = n;
      o(n, t);
      var r = n.prototype;
      r.update = function (t) {
        var e = this._device._gl;
        var i = this._genMipmap;
        if (t) {
          if (undefined !== t.width) {
            this._width = t.width;
          }
          if (undefined !== t.height) {
            this._height = t.height;
          }
          if (undefined !== t.anisotropy) {
            this._anisotropy = t.anisotropy;
          }
          if (undefined !== t.minFilter) {
            this._minFilter = t.minFilter;
          }
          if (undefined !== t.magFilter) {
            this._magFilter = t.magFilter;
          }
          if (undefined !== t.mipFilter) {
            this._mipFilter = t.mipFilter;
          }
          if (undefined !== t.wrapS) {
            this._wrapS = t.wrapS;
          }
          if (undefined !== t.wrapT) {
            this._wrapT = t.wrapT;
          }
          if (undefined !== t.format) {
            this._format = t.format;
            this._compressed = this._format >= s.enums.TEXTURE_FMT_RGB_DXT1 && this._format <= s.enums.TEXTURE_FMT_RGBA_PVRTC_4BPPV1 || this._format >= s.enums.TEXTURE_FMT_RGB_ETC2 && this._format <= s.enums.TEXTURE_FMT_RGBA_ETC2 || this._format >= s.enums.TEXTURE_FMT_RGBA_ASTC_4X4 && this._format <= s.enums.TEXTURE_FMT_SRGBA_ASTC_12X12;
          }
          if (undefined !== t.genMipmaps) {
            this._genMipmap = t.genMipmaps;
            i = t.genMipmaps;
          }
          this._device.caps.maxTextureSize;
          t.width;
          t.height;
          if (undefined !== t.images && t.images.length > 1) {
            i = false;
            if (t.width > t.height) {
              t.width;
            } else {
              t.height;
            }
            t.images.length;
          }
        }
        0;
        if (!(a.isPow2(this._width) && (0, a.isPow2)(this._height))) {
          i = false;
        }
        e.activeTexture(e.TEXTURE0);
        e.bindTexture(e.TEXTURE_2D, this._glID);
        if (undefined !== t.images && t.images.length > 0) {
          this._setMipmap(t.images, t.flipY, t.premultiplyAlpha);
          if (t.images.length > 1) {
            this._genMipmap = true;
          }
        }
        if (i) {
          e.hint(e.GENERATE_MIPMAP_HINT, e.NICEST);
          e.generateMipmap(e.TEXTURE_2D);
          this._genMipmap = true;
        }
        this._setTexInfo();
        this._device._restoreTexture(0);
      };
      r.updateSubImage = function (t) {
        var e = this._device._gl;
        0;
        var i = s.glTextureFmt(this._format);
        e.activeTexture(e.TEXTURE0);
        e.bindTexture(e.TEXTURE_2D, this._glID);
        this._setSubImage(i, t);
        this._device._restoreTexture(0);
      };
      r.updateImage = function (t) {
        var e = this._device._gl;
        0;
        var i = s.glTextureFmt(this._format);
        e.activeTexture(e.TEXTURE0);
        e.bindTexture(e.TEXTURE_2D, this._glID);
        this._setImage(i, t);
        this._device._restoreTexture(0);
      };
      r._setSubImage = function (t, e) {
        var i = this._device._gl;
        var n = e.flipY;
        var r = e.premultiplyAlpha;
        var s = e.image;
        if (!s || ArrayBuffer.isView(s) || s instanceof ArrayBuffer) {
          if (undefined === n) {
            i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL, false);
          } else {
            i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL, n);
          }
          if (undefined === r) {
            i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
          } else {
            i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL, r);
          }
          if (this._compressed) {
            i.compressedTexSubImage2D(i.TEXTURE_2D, e.level, e.x, e.y, e.width, e.height, t.format, s);
          } else {
            i.texSubImage2D(i.TEXTURE_2D, e.level, e.x, e.y, e.width, e.height, t.format, t.pixelType, s);
          }
        } else {
          if (undefined === n) {
            i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL, true);
          } else {
            i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL, n);
          }
          if (undefined === r) {
            i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
          } else {
            i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL, r);
          }
          i.texSubImage2D(i.TEXTURE_2D, e.level, e.x, e.y, t.format, t.pixelType, s);
        }
      };
      r._setImage = function (t, e) {
        var i = this._device._gl;
        var n = e.flipY;
        var r = e.premultiplyAlpha;
        var s = e.image;
        if (!s || ArrayBuffer.isView(s) || s instanceof ArrayBuffer) {
          if (undefined === n) {
            i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL, false);
          } else {
            i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL, n);
          }
          if (undefined === r) {
            i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
          } else {
            i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL, r);
          }
          if (this._compressed) {
            i.compressedTexImage2D(i.TEXTURE_2D, e.level, t.internalFormat, e.width, e.height, 0, s);
          } else {
            i.texImage2D(i.TEXTURE_2D, e.level, t.internalFormat, e.width, e.height, 0, t.format, t.pixelType, s);
          }
        } else {
          if (undefined === n) {
            i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL, true);
          } else {
            i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL, n);
          }
          if (undefined === r) {
            i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
          } else {
            i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL, r);
          }
          i.texImage2D(i.TEXTURE_2D, e.level, t.internalFormat, t.format, t.pixelType, s);
        }
      };
      r._setMipmap = function (t, e, i) {
        var n = s.glTextureFmt(this._format);
        var r = {
          width: this._width,
          height: this._height,
          flipY: e,
          premultiplyAlpha: i,
          level: 0,
          image: null
        };
        for (var a = 0; a < t.length; ++a) {
          var n;
          var r;
          var a;
          r.level = a;
          r.width = this._width >> a;
          r.height = this._height >> a;
          r.image = t[a];
          this._setImage(n, r);
        }
      };
      r._setTexInfo = function () {
        var t = this._device._gl;
        0;
        var e = a.isPow2(this._width) && (0, a.isPow2)(this._height);
        if (!(e || this._wrapS === s.enums.WRAP_CLAMP && this._wrapT === s.enums.WRAP_CLAMP)) {
          this._wrapS = s.enums.WRAP_CLAMP;
          this._wrapT = s.enums.WRAP_CLAMP;
        }
        var i = this._genMipmap ? this._mipFilter : -1;
        if (!(e || -1 === i)) {
          i = -1;
        }
        0;
        t.texParameteri(t.TEXTURE_2D, t.TEXTURE_MIN_FILTER, s.glFilter(t, this._minFilter, i));
        0;
        t.texParameteri(t.TEXTURE_2D, t.TEXTURE_MAG_FILTER, s.glFilter(t, this._magFilter, -1));
        t.texParameteri(t.TEXTURE_2D, t.TEXTURE_WRAP_S, this._wrapS);
        t.texParameteri(t.TEXTURE_2D, t.TEXTURE_WRAP_T, this._wrapT);
        var n = this._device.ext("EXT_texture_filter_anisotropic");
        if (n) {
          t.texParameteri(t.TEXTURE_2D, n.TEXTURE_MAX_ANISOTROPY_EXT, this._anisotropy);
        }
      };
      return n;
    }(r.default);
    i.default = c;
    e.exports = i.default;
  }, {
    "./enums": 279,
    "./misc": 283,
    "./texture": 289
  }],
  288: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n;
    var r = (n = t("./texture")) && n.__esModule ? n : {
      default: n
    };
    var s = t("./enums");
    var a = t("./misc");
    function o(t, e) {
      return (o = Object.setPrototypeOf || function (t, e) {
        t.__proto__ = e;
        return t;
      })(t, e);
    }
    var c = function (t) {
      function n(e, i) {
        var n;
        var r = (n = t.call(this, e) || this)._device._gl;
        n._target = r.TEXTURE_CUBE_MAP;
        n._glID = r.createTexture();
        n.update(i);
        return n;
      }
      n.prototype = Object.create(t.prototype);
      n.prototype.constructor = n;
      o(n, t);
      var r = n.prototype;
      r.update = function (t) {
        var e = this._device._gl;
        var i = this._genMipmaps;
        if (t) {
          if (undefined !== t.width) {
            this._width = t.width;
          }
          if (undefined !== t.height) {
            this._height = t.height;
          }
          if (undefined !== t.anisotropy) {
            this._anisotropy = t.anisotropy;
          }
          if (undefined !== t.minFilter) {
            this._minFilter = t.minFilter;
          }
          if (undefined !== t.magFilter) {
            this._magFilter = t.magFilter;
          }
          if (undefined !== t.mipFilter) {
            this._mipFilter = t.mipFilter;
          }
          if (undefined !== t.wrapS) {
            this._wrapS = t.wrapS;
          }
          if (undefined !== t.wrapT) {
            this._wrapT = t.wrapT;
          }
          if (undefined !== t.format) {
            this._format = t.format;
            this._compressed = this._format >= s.enums.TEXTURE_FMT_RGB_DXT1 && this._format <= s.enums.TEXTURE_FMT_RGBA_PVRTC_4BPPV1 || this._format >= s.enums.TEXTURE_FMT_RGB_ETC2 && this._format <= s.enums.TEXTURE_FMT_RGBA_ETC2 || this._format >= s.enums.TEXTURE_FMT_RGBA_ASTC_4X4 && this._format <= s.enums.TEXTURE_FMT_SRGBA_ASTC_12X12;
          }
          if (undefined !== t.genMipmaps) {
            this._genMipmaps = t.genMipmaps;
            i = t.genMipmaps;
          }
          if (undefined !== t.images && t.images.length > 1) {
            i = false;
            t.width;
            t.height;
            t.width;
            t.images.length;
          }
        }
        0;
        if (!(a.isPow2(this._width) && (0, a.isPow2)(this._height))) {
          i = false;
        }
        e.activeTexture(e.TEXTURE0);
        e.bindTexture(e.TEXTURE_CUBE_MAP, this._glID);
        if (undefined !== t.images && t.images.length > 0) {
          this._setMipmap(t.images, t.flipY, t.premultiplyAlpha);
          if (t.images.length > 1) {
            this._genMipmaps = true;
          }
        }
        if (i) {
          e.hint(e.GENERATE_MIPMAP_HINT, e.NICEST);
          e.generateMipmap(e.TEXTURE_CUBE_MAP);
          this._genMipmaps = true;
        }
        this._setTexInfo();
        this._device._restoreTexture(0);
      };
      r.updateSubImage = function (t) {
        var e = this._device._gl;
        0;
        var i = s.glTextureFmt(this._format);
        e.activeTexture(e.TEXTURE0);
        e.bindTexture(e.TEXTURE_CUBE_MAP, this._glID);
        this._setSubImage(i, t);
        this._device._restoreTexture(0);
      };
      r.updateImage = function (t) {
        var e = this._device._gl;
        0;
        var i = s.glTextureFmt(this._format);
        e.activeTexture(e.TEXTURE0);
        e.bindTexture(e.TEXTURE_CUBE_MAP, this._glID);
        this._setImage(i, t);
        this._device._restoreTexture(0);
      };
      r._setSubImage = function (t, e) {
        var i = this._device._gl;
        var n = e.flipY;
        var r = e.premultiplyAlpha;
        var s = e.faceIndex;
        var a = e.image;
        if (undefined === n) {
          i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL, false);
        } else {
          i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL, n);
        }
        if (undefined === r) {
          i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
        } else {
          i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL, r);
        }
        if (!a || ArrayBuffer.isView(a) || a instanceof ArrayBuffer) {
          if (this._compressed) {
            i.compressedTexSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X + s, e.level, e.x, e.y, e.width, e.height, t.format, a);
          } else {
            i.texSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X + s, e.level, e.x, e.y, e.width, e.height, t.format, t.pixelType, a);
          }
        } else {
          i.texSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X + s, e.level, e.x, e.y, t.format, t.pixelType, a);
        }
      };
      r._setImage = function (t, e) {
        var i = this._device._gl;
        var n = e.flipY;
        var r = e.premultiplyAlpha;
        var s = e.faceIndex;
        var a = e.image;
        if (undefined === n) {
          i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL, false);
        } else {
          i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL, n);
        }
        if (undefined === r) {
          i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
        } else {
          i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL, r);
        }
        if (!a || ArrayBuffer.isView(a) || a instanceof ArrayBuffer) {
          if (this._compressed) {
            i.compressedTexImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X + s, e.level, t.internalFormat, e.width, e.height, 0, a);
          } else {
            i.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X + s, e.level, t.internalFormat, e.width, e.height, 0, t.format, t.pixelType, a);
          }
        } else {
          i.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X + s, e.level, t.internalFormat, t.format, t.pixelType, a);
        }
      };
      r._setMipmap = function (t, e, i) {
        var n = s.glTextureFmt(this._format);
        var r = {
          width: this._width,
          height: this._height,
          faceIndex: 0,
          flipY: e,
          premultiplyAlpha: i,
          level: 0,
          image: null
        };
        for (var a = 0; a < t.length; ++a) {
          var n;
          var r;
          var a;
          var o = t[a];
          r.level = a;
          r.width = this._width >> a;
          r.height = this._height >> a;
          for (var c = 0; c < 6; ++c) {
            r.faceIndex = c;
            r.image = o[c];
            this._setImage(n, r);
          }
        }
      };
      r._setTexInfo = function () {
        var t = this._device._gl;
        0;
        var e = a.isPow2(this._width) && (0, a.isPow2)(this._height);
        if (!(e || this._wrapS === s.enums.WRAP_CLAMP && this._wrapT === s.enums.WRAP_CLAMP)) {
          this._wrapS = s.enums.WRAP_CLAMP;
          this._wrapT = s.enums.WRAP_CLAMP;
        }
        var i = this._genMipmaps ? this._mipFilter : -1;
        if (!(e || -1 === i)) {
          i = -1;
        }
        0;
        t.texParameteri(t.TEXTURE_CUBE_MAP, t.TEXTURE_MIN_FILTER, s.glFilter(t, this._minFilter, i));
        0;
        t.texParameteri(t.TEXTURE_CUBE_MAP, t.TEXTURE_MAG_FILTER, s.glFilter(t, this._magFilter, -1));
        t.texParameteri(t.TEXTURE_CUBE_MAP, t.TEXTURE_WRAP_S, this._wrapS);
        t.texParameteri(t.TEXTURE_CUBE_MAP, t.TEXTURE_WRAP_T, this._wrapT);
        var n = this._device.ext("EXT_texture_filter_anisotropic");
        if (n) {
          t.texParameteri(t.TEXTURE_CUBE_MAP, n.TEXTURE_MAX_ANISOTROPY_EXT, this._anisotropy);
        }
      };
      return n;
    }(r.default);
    i.default = c;
    e.exports = i.default;
  }, {
    "./enums": 279,
    "./misc": 283,
    "./texture": 289
  }],
  289: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n = t("./enums");
    var r = 0;
    var s = function () {
      function t(t) {
        this._device = t;
        this._width = 4;
        this._height = 4;
        this._genMipmaps = false;
        this._compressed = false;
        this._anisotropy = 1;
        this._minFilter = n.enums.FILTER_LINEAR;
        this._magFilter = n.enums.FILTER_LINEAR;
        this._mipFilter = n.enums.FILTER_LINEAR;
        this._wrapS = n.enums.WRAP_REPEAT;
        this._wrapT = n.enums.WRAP_REPEAT;
        this._format = n.enums.TEXTURE_FMT_RGBA8;
        this._target = -1;
        this._id = r++;
      }
      t.prototype.destroy = function () {
        if (null !== this._glID) {
          this._device._gl.deleteTexture(this._glID);
          this._device._stats.tex -= this.bytes;
          this._glID = null;
        }
      };
      return t;
    }();
    i.default = s;
    e.exports = i.default;
  }, {
    "./enums": 279
  }],
  290: [function (t, e, i) {
    "use strict";

    function n(t, e) {
      for (var i = 0; i < e.length; i++) {
        var n = e[i];
        n.enumerable = n.enumerable || false;
        n.configurable = true;
        if ("value" in n) {
          n.writable = true;
        }
        Object.defineProperty(t, n.key, n);
      }
    }
    i.__esModule = true;
    i.default = undefined;
    t("./enums");
    var r = function () {
      function t(t, e, i, n) {
        this._device = t;
        this._format = e;
        this._usage = i;
        this._bytesPerVertex = this._format._bytes;
        this._bytes = n.byteLength;
        this._numVertices = this._bytes / this._bytesPerVertex;
        this._needExpandDataStore = true;
        this._glID = t._gl.createBuffer();
        this.update(0, n);
        t._stats.vb += this._bytes;
      }
      var i;
      var r = t.prototype;
      r.destroy = function () {
        if (-1 !== this._glID) {
          this._device._gl.deleteBuffer(this._glID);
          this._device._stats.vb -= this.bytes;
          this._glID = -1;
        }
      };
      r.update = function (t, e) {
        if (-1 !== this._glID && 0 !== e.byteLength) {
          if (t + e.byteLength > this._bytes) {
            if (t) {
              return;
            }
            this._needExpandDataStore = true;
            this._bytes = t + e.byteLength;
            this._numVertices = this._bytes / this._bytesPerVertex;
          }
          var i = this._device._gl;
          var n = this._usage;
          i.bindBuffer(i.ARRAY_BUFFER, this._glID);
          if (this._needExpandDataStore) {
            i.bufferData(i.ARRAY_BUFFER, e, n);
            this._needExpandDataStore = false;
          } else {
            i.bufferSubData(i.ARRAY_BUFFER, t, e);
          }
          i.bindBuffer(i.ARRAY_BUFFER, null);
        }
      };
      r.getFormat = function (t) {
        return this._format.element(t);
      };
      r.setUsage = function (t) {
        this._usage = t;
      };
      if (i = [{
        key: "count",
        get: function () {
          return this._numVertices;
        }
      }]) {
        n(t.prototype, i);
      }
      Object.defineProperty(t, "prototype", {
        writable: false
      });
      return t;
    }();
    i.default = r;
    e.exports = i.default;
  }, {
    "./enums": 279
  }],
  291: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n;
    var r = t("./enums");
    var s = (n = t("../murmurhash2_gc")) && n.__esModule ? n : {
      default: n
    };
    var a = function () {
      function t(t) {
        this._attr2el = {};
        this._elements = [];
        this._bytes = 0;
        var e = "";
        var i = 0;
        for (var n = t.length; i < n; ++i) {
          var a = t[i];
          0;
          var o = {
            name: a.name,
            offset: this._bytes,
            stride: 0,
            stream: -1,
            type: a.type,
            num: a.num,
            normalize: undefined !== a.normalize && a.normalize,
            bytes: a.num * r.attrTypeBytes(a.type)
          };
          this._attr2el[o.name] = o;
          this._elements.push(o);
          this._bytes += o.bytes;
          e += o.name + ":" + o.num + ":" + o.type + ":" + o.normalize;
        }
        var c = 0;
        for (var l = this._elements.length; c < l; ++c) {
          this._elements[c].stride = this._bytes;
        }
        0;
        this._hash = s.default(e, 666);
      }
      var e = t.prototype;
      e.element = function (t) {
        return this._attr2el[t];
      };
      e.getHash = function () {
        return this._hash;
      };
      return t;
    }();
    i.default = a;
    e.exports = i.default;
  }, {
    "../murmurhash2_gc": 300,
    "./enums": 279
  }],
  292: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n = function () {
      function t(t, e) {
        this._cursor = 0;
        this._data = Array(e);
        for (var i = 0; i < e; ++i) {
          this._data[i] = t();
        }
      }
      t.prototype.request = function () {
        var t = this._data[this._cursor];
        this._cursor = (this._cursor + 1) % this._data.length;
        return t;
      };
      return t;
    }();
    i.default = n;
    e.exports = i.default;
  }, {}],
  293: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n;
    var r = (n = t("./timsort")) && n.__esModule ? n : {
      default: n
    };
    function s(t, e) {
      for (var i = 0; i < e.length; i++) {
        var n = e[i];
        n.enumerable = n.enumerable || false;
        n.configurable = true;
        if ("value" in n) {
          n.writable = true;
        }
        Object.defineProperty(t, n.key, n);
      }
    }
    var a = function () {
      function t(t) {
        this._count = 0;
        this._data = Array(t);
      }
      var i;
      var n = t.prototype;
      n._resize = function (t) {
        if (t > this._data.length) {
          for (var e = this._data.length; e < t; ++e) {
            this._data[e] = undefined;
          }
        }
      };
      n.reset = function () {
        for (var t = 0; t < this._count; ++t) {
          this._data[t] = undefined;
        }
        this._count = 0;
      };
      n.push = function (t) {
        if (this._count >= this._data.length) {
          this._resize(2 * this._data.length);
        }
        this._data[this._count] = t;
        ++this._count;
      };
      n.pop = function () {
        --this._count;
        if (this._count < 0) {
          this._count = 0;
        }
        var t = this._data[this._count];
        this._data[this._count] = undefined;
        return t;
      };
      n.fastRemove = function (t) {
        if (!(t >= this._count || t < 0)) {
          var e = this._count - 1;
          this._data[t] = this._data[e];
          this._data[e] = undefined;
          this._count -= 1;
        }
      };
      n.indexOf = function (t) {
        return this._data.indexOf(t);
      };
      n.sort = function (t) {
        0;
        return r.default(this._data, 0, this._count, t);
      };
      if (i = [{
        key: "length",
        get: function () {
          return this._count;
        }
      }, {
        key: "data",
        get: function () {
          return this._data;
        }
      }]) {
        s(t.prototype, i);
      }
      Object.defineProperty(t, "prototype", {
        writable: false
      });
      return t;
    }();
    i.default = a;
    e.exports = i.default;
  }, {
    "./timsort": 298
  }],
  294: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.TypedArrayPool = i.RecyclePool = i.Pool = i.LinkedArray = i.FixedArray = i.CircularPool = undefined;
    var n = t("./circular-pool") && t("./circular-pool").__esModule ? t("./circular-pool") : {
      default: t("./circular-pool")
    };
    i.CircularPool = n.default;
    var r = t("./fixed-array") && t("./fixed-array").__esModule ? t("./fixed-array") : {
      default: t("./fixed-array")
    };
    i.FixedArray = r.default;
    var s = t("./linked-array") && t("./linked-array").__esModule ? t("./linked-array") : {
      default: t("./linked-array")
    };
    i.LinkedArray = s.default;
    var a = t("./pool") && t("./pool").__esModule ? t("./pool") : {
      default: t("./pool")
    };
    i.Pool = a.default;
    var o = t("./recycle-pool") && t("./recycle-pool").__esModule ? t("./recycle-pool") : {
      default: t("./recycle-pool")
    };
    i.RecyclePool = o.default;
    var c = t("./typed-array-pool") && t("./typed-array-pool").__esModule ? t("./typed-array-pool") : {
      default: t("./typed-array-pool")
    };
    i.TypedArrayPool = c.default;
  }, {
    "./circular-pool": 292,
    "./fixed-array": 293,
    "./linked-array": 295,
    "./pool": 296,
    "./recycle-pool": 297,
    "./typed-array-pool": 299
  }],
  295: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n;
    var r = (n = t("./pool")) && n.__esModule ? n : {
      default: n
    };
    function s(t, e) {
      for (var i = 0; i < e.length; i++) {
        var n = e[i];
        n.enumerable = n.enumerable || false;
        n.configurable = true;
        if ("value" in n) {
          n.writable = true;
        }
        Object.defineProperty(t, n.key, n);
      }
    }
    var a = function () {
      function t(t, e) {
        this._fn = t;
        this._count = 0;
        this._head = null;
        this._tail = null;
        this._pool = new r.default(t, e);
      }
      var i;
      var n = t.prototype;
      n.add = function () {
        var t = this._pool.alloc();
        if (this._tail) {
          this._tail._next = t;
          t._prev = this._tail;
        } else {
          this._head = t;
        }
        this._tail = t;
        this._count += 1;
        return t;
      };
      n.remove = function (t) {
        if (t._prev) {
          t._prev._next = t._next;
        } else {
          this._head = t._next;
        }
        if (t._next) {
          t._next._prev = t._prev;
        } else {
          this._tail = t._prev;
        }
        t._next = null;
        t._prev = null;
        this._pool.free(t);
        this._count -= 1;
      };
      n.forEach = function (t, e) {
        var i = this._head;
        if (i) {
          if (e) {
            t = t.bind(e);
          }
          var n = 0;
          for (var r = i; i;) {
            r = i._next;
            t(i, n, this);
            i = r;
            ++n;
          }
        }
      };
      if (i = [{
        key: "head",
        get: function () {
          return this._head;
        }
      }, {
        key: "tail",
        get: function () {
          return this._tail;
        }
      }, {
        key: "length",
        get: function () {
          return this._count;
        }
      }]) {
        s(t.prototype, i);
      }
      Object.defineProperty(t, "prototype", {
        writable: false
      });
      return t;
    }();
    i.default = a;
    e.exports = i.default;
  }, {
    "./pool": 296
  }],
  296: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n = function () {
      function t(t, e) {
        this._fn = t;
        this._idx = e - 1;
        this._frees = Array(e);
        for (var i = 0; i < e; ++i) {
          this._frees[i] = t();
        }
      }
      var e = t.prototype;
      e._expand = function (t) {
        var e = this._frees;
        this._frees = Array(t);
        var i = t - e.length;
        for (var n = 0; n < i; ++n) {
          this._frees[n] = this._fn();
        }
        var r = i;
        for (var s = 0; r < t; ++r, ++s) {
          this._frees[r] = e[s];
        }
        this._idx += i;
      };
      e.alloc = function () {
        if (this._idx < 0) {
          this._expand(Math.round(1.2 * this._frees.length) + 1);
        }
        var t = this._frees[this._idx];
        this._frees[this._idx] = null;
        --this._idx;
        return t;
      };
      e.free = function (t) {
        ++this._idx;
        this._frees[this._idx] = t;
      };
      e.clear = function (t) {
        for (var e = 0; e <= this._idx; e++) {
          if (t) {
            t(this._frees[e]);
          }
        }
        this._frees.length = 0;
        this._idx = -1;
      };
      return t;
    }();
    i.default = n;
    e.exports = i.default;
  }, {}],
  297: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n;
    var r = (n = t("./timsort")) && n.__esModule ? n : {
      default: n
    };
    function s(t, e) {
      for (var i = 0; i < e.length; i++) {
        var n = e[i];
        n.enumerable = n.enumerable || false;
        n.configurable = true;
        if ("value" in n) {
          n.writable = true;
        }
        Object.defineProperty(t, n.key, n);
      }
    }
    var a = function () {
      function t(t, e) {
        this._fn = t;
        this._count = 0;
        this._data = Array(e);
        for (var i = 0; i < e; ++i) {
          this._data[i] = t();
        }
      }
      var i;
      var n = t.prototype;
      n.reset = function () {
        this._count = 0;
      };
      n.resize = function (t) {
        if (t > this._data.length) {
          for (var e = this._data.length; e < t; ++e) {
            this._data[e] = this._fn();
          }
        }
      };
      n.add = function () {
        if (this._count >= this._data.length) {
          this.resize(2 * this._data.length);
        }
        return this._data[this._count++];
      };
      n.remove = function (t) {
        if (!(t >= this._count)) {
          var e = this._count - 1;
          var i = this._data[t];
          this._data[t] = this._data[e];
          this._data[e] = i;
          this._count -= 1;
        }
      };
      n.sort = function (t) {
        0;
        return r.default(this._data, 0, this._count, t);
      };
      if (i = [{
        key: "length",
        get: function () {
          return this._count;
        }
      }, {
        key: "data",
        get: function () {
          return this._data;
        }
      }]) {
        s(t.prototype, i);
      }
      Object.defineProperty(t, "prototype", {
        writable: false
      });
      return t;
    }();
    i.default = a;
    cc.RecyclePool = a;
    e.exports = i.default;
  }, {
    "./timsort": 298
  }],
  298: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = function (t, e, i, r) {
      if (!Array.isArray(t)) {
        throw new TypeError(cc.debug.getError(665905));
      }
      if (undefined === e) {
        e = 0;
      }
      if (undefined === i) {
        i = t.length;
      }
      if (undefined === r) {
        r = c;
      }
      var s = i - e;
      if (!(s < 2)) {
        var a = 0;
        if (s < 32) {
          return void f(t, e, i, e + (a = h(t, e, i, r)), r);
        }
        var o = new p(t, r);
        var u = l(s);
        do {
          if ((a = h(t, e, i, r)) < u) {
            var d = s;
            if (d > u) {
              d = u;
            }
            f(t, e, e + d, e + a, r);
            a = d;
          }
          o.pushRun(e, a);
          o.mergeRuns();
          s -= a;
          e += a;
        } while (0 !== s);
        o.forceMergeRuns();
      }
    };
    var a = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9];
    function c(t, e) {
      if (t === e) {
        return 0;
      }
      if (~~t === t && ~~e === e) {
        if (0 === t || 0 === e) {
          return t < e ? -1 : 1;
        }
        if (t < 0 || e < 0) {
          if (e >= 0) {
            return -1;
          }
          if (t >= 0) {
            return 1;
          }
          t = -t;
          e = -e;
        }
        var i = t < 1e5 ? t < 100 ? t < 10 ? 0 : 1 : t < 1e4 ? t < 1e3 ? 2 : 3 : 4 : t < 1e7 ? t < 1e6 ? 5 : 6 : t < 1e9 ? t < 1e8 ? 7 : 8 : 9;
        var n = e < 1e5 ? e < 100 ? e < 10 ? 0 : 1 : e < 1e4 ? e < 1e3 ? 2 : 3 : 4 : e < 1e7 ? e < 1e6 ? 5 : 6 : e < 1e9 ? e < 1e8 ? 7 : 8 : 9;
        var r = 0;
        if (i < n) {
          t *= a[n - i - 1];
          e /= 10;
          r = -1;
        } else if (i > n) {
          e *= a[i - n - 1];
          t /= 10;
          r = 1;
        }
        return t === e ? r : t < e ? -1 : 1;
      }
      var s = t + "";
      var c = e + "";
      return s === c ? 0 : s < c ? -1 : 1;
    }
    function l(t) {
      for (var e = 0; t >= 32;) {
        e |= 1 & t;
        t >>= 1;
      }
      return t + e;
    }
    function h(t, e, i, n) {
      var r = e + 1;
      if (r === i) {
        return 1;
      }
      if (n(t[r++], t[e]) < 0) {
        for (; r < i && n(t[r], t[r - 1]) < 0;) {
          r++;
        }
        u(t, e, r);
      } else {
        for (; r < i && n(t[r], t[r - 1]) >= 0;) {
          r++;
        }
      }
      return r - e;
    }
    function u(t, e, i) {
      for (i--; e < i;) {
        var n = t[e];
        t[e++] = t[i];
        t[i--] = n;
      }
    }
    function f(t, e, i, n, r) {
      for (n === e && n++; n < i; n++) {
        var s = t[n];
        var a = e;
        for (var o = n; a < o;) {
          var c = a + o >>> 1;
          if (r(s, t[c]) < 0) {
            o = c;
          } else {
            a = c + 1;
          }
        }
        var l = n - a;
        switch (l) {
          case 3:
            t[a + 3] = t[a + 2];
          case 2:
            t[a + 2] = t[a + 1];
          case 1:
            t[a + 1] = t[a];
            break;
          default:
            for (; l > 0;) {
              t[a + l] = t[a + l - 1];
              l--;
            }
        }
        t[a] = s;
      }
    }
    function d(t, e, i, n, r, s) {
      var a = 0;
      var o = 0;
      var c = 1;
      if (s(t, e[i + r]) > 0) {
        for (o = n - r; c < o && s(t, e[i + r + c]) > 0;) {
          a = c;
          if ((c = 1 + (c << 1)) <= 0) {
            c = o;
          }
        }
        if (c > o) {
          c = o;
        }
        a += r;
        c += r;
      } else {
        for (o = r + 1; c < o && s(t, e[i + r - c]) <= 0;) {
          a = c;
          if ((c = 1 + (c << 1)) <= 0) {
            c = o;
          }
        }
        if (c > o) {
          c = o;
        }
        var l = a;
        a = r - c;
        c = r - l;
      }
      for (a++; a < c;) {
        var h = a + (c - a >>> 1);
        if (s(t, e[i + h]) > 0) {
          a = h + 1;
        } else {
          c = h;
        }
      }
      return c;
    }
    function _(t, e, i, n, r, s) {
      var a = 0;
      var o = 0;
      var c = 1;
      if (s(t, e[i + r]) < 0) {
        for (o = r + 1; c < o && s(t, e[i + r - c]) < 0;) {
          a = c;
          if ((c = 1 + (c << 1)) <= 0) {
            c = o;
          }
        }
        if (c > o) {
          c = o;
        }
        var l = a;
        a = r - c;
        c = r - l;
      } else {
        for (o = n - r; c < o && s(t, e[i + r + c]) >= 0;) {
          a = c;
          if ((c = 1 + (c << 1)) <= 0) {
            c = o;
          }
        }
        if (c > o) {
          c = o;
        }
        a += r;
        c += r;
      }
      for (a++; a < c;) {
        var h = a + (c - a >>> 1);
        if (s(t, e[i + h]) < 0) {
          c = h;
        } else {
          a = h + 1;
        }
      }
      return c;
    }
    var p = function () {
      function t(t, e) {
        this.array = t;
        this.compare = e;
        this.minGallop = 7;
        this.length = t.length;
        this.tmpStorageLength = 256;
        if (this.length < 512) {
          this.tmpStorageLength = this.length >>> 1;
        }
        this.tmp = Array(this.tmpStorageLength);
        this.stackLength = this.length < 120 ? 5 : this.length < 1542 ? 10 : this.length < 119151 ? 19 : 40;
        this.runStart = Array(this.stackLength);
        this.runLength = Array(this.stackLength);
        this.stackSize = 0;
      }
      var e = t.prototype;
      e.pushRun = function (t, e) {
        this.runStart[this.stackSize] = t;
        this.runLength[this.stackSize] = e;
        this.stackSize += 1;
      };
      e.mergeRuns = function () {
        for (; this.stackSize > 1;) {
          var t = this.stackSize - 2;
          if (t >= 1 && this.runLength[t - 1] <= this.runLength[t] + this.runLength[t + 1] || t >= 2 && this.runLength[t - 2] <= this.runLength[t] + this.runLength[t - 1]) {
            if (this.runLength[t - 1] < this.runLength[t + 1]) {
              t--;
            }
          } else if (this.runLength[t] > this.runLength[t + 1]) {
            break;
          }
          this.mergeAt(t);
        }
      };
      e.forceMergeRuns = function () {
        for (; this.stackSize > 1;) {
          var t = this.stackSize - 2;
          if (t > 0 && this.runLength[t - 1] < this.runLength[t + 1]) {
            t--;
          }
          this.mergeAt(t);
        }
      };
      e.mergeAt = function (t) {
        var e = this.compare;
        var i = this.array;
        var n = this.runStart[t];
        var r = this.runLength[t];
        var s = this.runStart[t + 1];
        var a = this.runLength[t + 1];
        this.runLength[t] = r + a;
        if (t === this.stackSize - 3) {
          this.runStart[t + 1] = this.runStart[t + 2];
          this.runLength[t + 1] = this.runLength[t + 2];
        }
        this.stackSize--;
        var o = _(i[s], i, n, r, 0, e);
        n += o;
        if (0 != (r -= o) && 0 !== (a = d(i[n + r - 1], i, s, a, a - 1, e))) {
          if (r <= a) {
            this.mergeLow(n, r, s, a);
          } else {
            this.mergeHigh(n, r, s, a);
          }
        }
      };
      e.mergeLow = function (t, e, i, n) {
        var s = this.compare;
        var a = this.array;
        var o = this.tmp;
        var c = 0;
        for (c = 0; c < e; c++) {
          o[c] = a[t + c];
        }
        var l = 0;
        var h = i;
        var u = t;
        a[u++] = a[h++];
        if (0 != --n) {
          if (1 !== e) {
            for (var f = this.minGallop;;) {
              var p = 0;
              var v = 0;
              var g = false;
              do {
                if (s(a[h], o[l]) < 0) {
                  a[u++] = a[h++];
                  v++;
                  p = 0;
                  if (0 == --n) {
                    g = true;
                    break;
                  }
                } else {
                  a[u++] = o[l++];
                  p++;
                  v = 0;
                  if (1 == --e) {
                    g = true;
                    break;
                  }
                }
              } while ((p | v) < f);
              if (g) {
                break;
              }
              do {
                if (0 !== (p = _(a[h], o, l, e, 0, s))) {
                  for (c = 0; c < p; c++) {
                    a[u + c] = o[l + c];
                  }
                  u += p;
                  l += p;
                  if ((e -= p) <= 1) {
                    g = true;
                    break;
                  }
                }
                a[u++] = a[h++];
                if (0 == --n) {
                  g = true;
                  break;
                }
                if (0 !== (v = d(o[l], a, h, n, 0, s))) {
                  for (c = 0; c < v; c++) {
                    a[u + c] = a[h + c];
                  }
                  u += v;
                  h += v;
                  if (0 == (n -= v)) {
                    g = true;
                    break;
                  }
                }
                a[u++] = o[l++];
                if (1 == --e) {
                  g = true;
                  break;
                }
                f--;
              } while (p >= 7 || v >= 7);
              if (g) {
                break;
              }
              if (f < 0) {
                f = 0;
              }
              f += 2;
            }
            this.minGallop = f;
            if (f < 1) {
              this.minGallop = 1;
            }
            if (1 === e) {
              for (c = 0; c < n; c++) {
                a[u + c] = a[h + c];
              }
              a[u + n] = o[l];
            } else {
              if (0 === e) {
                throw Error(cc.debug.getError(665903));
              }
              for (c = 0; c < e; c++) {
                a[u + c] = o[l + c];
              }
            }
          } else {
            for (c = 0; c < n; c++) {
              a[u + c] = a[h + c];
            }
            a[u + n] = o[l];
          }
        } else {
          for (c = 0; c < e; c++) {
            a[u + c] = o[l + c];
          }
        }
      };
      e.mergeHigh = function (t, e, i, n) {
        var s = this.compare;
        var a = this.array;
        var o = this.tmp;
        var c = 0;
        for (c = 0; c < n; c++) {
          o[c] = a[i + c];
        }
        var l = t + e - 1;
        var h = n - 1;
        var u = i + n - 1;
        var f = 0;
        var p = 0;
        a[u--] = a[l--];
        if (0 != --e) {
          if (1 !== n) {
            for (var v = this.minGallop;;) {
              var g = 0;
              var m = 0;
              var y = false;
              do {
                if (s(o[h], a[l]) < 0) {
                  a[u--] = a[l--];
                  g++;
                  m = 0;
                  if (0 == --e) {
                    y = true;
                    break;
                  }
                } else {
                  a[u--] = o[h--];
                  m++;
                  g = 0;
                  if (1 == --n) {
                    y = true;
                    break;
                  }
                }
              } while ((g | m) < v);
              if (y) {
                break;
              }
              do {
                if (0 != (g = e - _(o[h], a, t, e, e - 1, s))) {
                  e -= g;
                  p = 1 + (u -= g);
                  f = 1 + (l -= g);
                  for (c = g - 1; c >= 0; c--) {
                    a[p + c] = a[f + c];
                  }
                  if (0 === e) {
                    y = true;
                    break;
                  }
                }
                a[u--] = o[h--];
                if (1 == --n) {
                  y = true;
                  break;
                }
                if (0 != (m = n - d(a[l], o, 0, n, n - 1, s))) {
                  n -= m;
                  p = 1 + (u -= m);
                  f = 1 + (h -= m);
                  for (c = 0; c < m; c++) {
                    a[p + c] = o[f + c];
                  }
                  if (n <= 1) {
                    y = true;
                    break;
                  }
                }
                a[u--] = a[l--];
                if (0 == --e) {
                  y = true;
                  break;
                }
                v--;
              } while (g >= 7 || m >= 7);
              if (y) {
                break;
              }
              if (v < 0) {
                v = 0;
              }
              v += 2;
            }
            this.minGallop = v;
            if (v < 1) {
              this.minGallop = 1;
            }
            if (1 === n) {
              p = 1 + (u -= e);
              f = 1 + (l -= e);
              for (c = e - 1; c >= 0; c--) {
                a[p + c] = a[f + c];
              }
              a[u] = o[h];
            } else {
              if (0 === n) {
                throw Error(cc.debug.getError(665904));
              }
              f = u - (n - 1);
              for (c = 0; c < n; c++) {
                a[f + c] = o[c];
              }
            }
          } else {
            p = 1 + (u -= e);
            f = 1 + (l -= e);
            for (c = e - 1; c >= 0; c--) {
              a[p + c] = a[f + c];
            }
            a[u] = o[h];
          }
        } else {
          f = u - (n - 1);
          for (c = 0; c < n; c++) {
            a[f + c] = o[c];
          }
        }
      };
      return t;
    }();
    e.exports = i.default;
  }, {}],
  299: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n = [,,,,,,,,];
    for (var r = 0; r < 8; ++r) {
      n[r] = [];
    }
    function s(t) {
      for (var e = 16; e <= 268435456; e *= 16) {
        if (t <= e) {
          return e;
        }
      }
      return 0;
    }
    function a(t) {
      var e;
      var i;
      e = (t > 65535) << 4;
      e |= i = ((t >>>= e) > 255) << 3;
      e |= i = ((t >>>= i) > 15) << 2;
      return (e |= i = ((t >>>= i) > 3) << 1) | (t >>>= i) >> 1;
    }
    function o(t) {
      var e = s(t);
      var i = n[a(e) >> 2];
      return i.length > 0 ? i.pop() : new ArrayBuffer(e);
    }
    var c = {
      alloc_int8: function (t) {
        var e = new Int8Array(o(t), 0, t);
        return e.length !== t ? e.subarray(0, t) : e;
      },
      alloc_uint8: function (t) {
        var e = new Uint8Array(o(t), 0, t);
        return e.length !== t ? e.subarray(0, t) : e;
      },
      alloc_int16: function (t) {
        var e = new Int16Array(o(2 * t), 0, t);
        return e.length !== t ? e.subarray(0, t) : e;
      },
      alloc_uint16: function (t) {
        var e = new Uint16Array(o(2 * t), 0, t);
        return e.length !== t ? e.subarray(0, t) : e;
      },
      alloc_int32: function (t) {
        var e = new Int32Array(o(4 * t), 0, t);
        return e.length !== t ? e.subarray(0, t) : e;
      },
      alloc_uint32: function (t) {
        var e = new Uint32Array(o(4 * t), 0, t);
        return e.length !== t ? e.subarray(0, t) : e;
      },
      alloc_float32: function (t) {
        var e = new Float32Array(o(4 * t), 0, t);
        return e.length !== t ? e.subarray(0, t) : e;
      },
      alloc_float64: function (t) {
        var e = new Float64Array(o(8 * t), 0, t);
        return e.length !== t ? e.subarray(0, t) : e;
      },
      alloc_dataview: function (t) {
        var e = new DataView(o(t), 0, t);
        return e.length !== t ? e.subarray(0, t) : e;
      },
      free: function (t) {
        var e;
        e = t.buffer;
        n[a(e.byteLength) >> 2].push(e);
      },
      reset: function () {
        var t = [,,,,,,,,];
        for (var e = 0; e < 8; ++e) {
          t[e] = [];
        }
      }
    };
    i.default = c;
    e.exports = i.default;
  }, {}],
  300: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = function (t, e) {
      var i;
      var n = t.length;
      var r = e ^ n;
      for (var s = 0; n >= 4;) {
        i = 1540483477 * (65535 & (i = 255 & t.charCodeAt(s) | (255 & t.charCodeAt(++s)) << 8 | (255 & t.charCodeAt(++s)) << 16 | (255 & t.charCodeAt(++s)) << 24)) + ((1540483477 * (i >>> 16) & 65535) << 16);
        r = 1540483477 * (65535 & r) + ((1540483477 * (r >>> 16) & 65535) << 16) ^ (i = 1540483477 * (65535 & (i ^= i >>> 24)) + ((1540483477 * (i >>> 16) & 65535) << 16));
        n -= 4;
        ++s;
      }
      switch (n) {
        case 3:
          r ^= (255 & t.charCodeAt(s + 2)) << 16;
        case 2:
          r ^= (255 & t.charCodeAt(s + 1)) << 8;
        case 1:
          r = 1540483477 * (65535 & (r ^= 255 & t.charCodeAt(s))) + ((1540483477 * (r >>> 16) & 65535) << 16);
      }
      r = 1540483477 * (65535 & (r ^= r >>> 13)) + ((1540483477 * (r >>> 16) & 65535) << 16);
      return (r ^= r >>> 15) >>> 0;
    };
    e.exports = i.default;
  }, {}],
  301: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n = t("../../core/value-types");
    var r = t("../core/base-renderer") && t("../core/base-renderer").__esModule ? t("../core/base-renderer") : {
      default: t("../core/base-renderer")
    };
    var s = t("../enums") && t("../enums").__esModule ? t("../enums") : {
      default: t("../enums")
    };
    var a = t("../memop");
    function c(t) {
      if (undefined === t) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return t;
    }
    function l(t, e) {
      return (l = Object.setPrototypeOf || function (t, e) {
        t.__proto__ = e;
        return t;
      })(t, e);
    }
    var h = new Float32Array(16);
    var u = new Float32Array(16);
    var f = new Float32Array(16);
    var d = new Float32Array(16);
    var _ = new Float32Array(4);
    var p = new Float32Array(64);
    var v = [];
    var g = new Float32Array(4);
    var m = new n.Vec4(0, 0, 0, 0);
    var y = new n.Vec3(0, 0, 0);
    var T = new n.Vec3(0, 0, 0);
    var E = new a.RecyclePool(function () {
      return new Float32Array(16);
    }, 8);
    function A(t, e) {
      return t._priority - e._priority;
    }
    var x = function (t) {
      function r(e, i) {
        var n;
        (n = t.call(this, e, i) || this)._time = new Float32Array(4);
        n._lights = [];
        n._shadowLights = [];
        n._numLights = 0;
        n._defines = {};
        n._registerStage("shadowcast", n._shadowStage.bind(c(n)));
        n._registerStage("opaque", n._opaqueStage.bind(c(n)));
        n._registerStage("transparent", n._transparentStage.bind(c(n)));
        return n;
      }
      r.prototype = Object.create(t.prototype);
      r.prototype.constructor = r;
      l(r, t);
      var a = r.prototype;
      a.reset = function () {
        E.reset();
        t.prototype.reset.call(this);
      };
      a.render = function (t, e) {
        this.reset();
        if (e) {
          this._time[0] += e;
          this._time[1] = e;
          this._time[2]++;
        }
        this._device.setUniform("cc_time", this._time);
        this._updateLights(t);
        var i = this._device._gl.canvas;
        for (var n = 0; n < t._cameras.length; ++n) {
          var r = this._requestView();
          var s = i.width;
          var a = i.height;
          t._cameras.data[n].extractView(r, s, a);
        }
        this._viewPools.sort(A);
        for (var o = 0; o < this._viewPools.length; ++o) {
          var c = this._viewPools.data[o];
          this._render(c, t);
        }
      };
      a.renderCamera = function (t, e) {
        this.reset();
        this._updateLights(e);
        var i = this._device._gl.canvas;
        var n = i.width;
        var r = i.height;
        var s = this._requestView();
        t.extractView(s, n, r);
        this._viewPools.sort(A);
        for (var a = 0; a < this._viewPools.length; ++a) {
          var o = this._viewPools.data[a];
          this._render(o, e);
        }
      };
      a._updateLights = function (t) {
        this._lights.length = 0;
        this._shadowLights.length = 0;
        var e = t._lights;
        for (var i = 0; i < e.length; ++i) {
          var n = e.data[i];
          n.update(this._device);
          if (n.shadowType !== s.default.SHADOW_NONE) {
            if (this._shadowLights.length < 2) {
              this._shadowLights.unshift(n);
            }
            var r = this._requestView();
            n.extractView(r, ["shadowcast"]);
            this._lights.splice(0, 0, n);
          } else {
            this._lights.push(n);
          }
        }
        this._updateLightDefines();
        this._numLights = e._count;
      };
      a._updateLightDefines = function () {
        var t = this._defines;
        for (var e = 0; e < this._lights.length; ++e) {
          var i = this._lights[e];
          var n = "CC_LIGHT_" + e + "_TYPE";
          var r = "CC_SHADOW_" + e + "_TYPE";
          if (t[n] !== i._type) {
            t[n] = i._type;
            this._definesChanged = true;
          }
          if (t[r] !== i._shadowType) {
            t[r] = i._shadowType;
            this._definesChanged = true;
          }
        }
        var s = Math.min(4, this._lights.length);
        if (t.CC_NUM_LIGHTS !== s) {
          t.CC_NUM_LIGHTS = s;
          this._definesChanged = true;
        }
        s = Math.min(4, this._shadowLights.length);
        if (t.CC_NUM_SHADOW_LIGHTS !== s) {
          t.CC_NUM_SHADOW_LIGHTS = s;
          this._definesChanged = true;
        }
      };
      a._submitLightsUniforms = function () {
        var t = this._device;
        if (this._lights.length > 0) {
          var e = E.add();
          var i = E.add();
          var n = E.add();
          var r = Math.min(4, this._lights.length);
          for (var a = 0; a < r; ++a) {
            var o = this._lights[a];
            var c = 4 * a;
            n.set(o._colorUniform, c);
            i.set(o._directionUniform, c);
            e.set(o._positionUniform, c);
            e[c + 3] = o._range;
            if (o._type === s.default.LIGHT_SPOT) {
              i[c + 3] = o._spotUniform[0];
              n[c + 3] = o._spotUniform[1];
            } else {
              i[c + 3] = 0;
              n[c + 3] = 0;
            }
          }
          t.setUniform("cc_lightDirection", i);
          t.setUniform("cc_lightColor", n);
          t.setUniform("cc_lightPositionAndRange", e);
        }
      };
      a._submitShadowStageUniforms = function (t) {
        var e = t._shadowLight;
        g[0] = e.shadowMinDepth;
        g[1] = e.shadowMaxDepth;
        g[2] = e.shadowDepthScale;
        g[3] = e.shadowDarkness;
        this._device.setUniform("cc_shadow_map_lightViewProjMatrix", n.Mat4.toArray(d, t._matViewProj));
        this._device.setUniform("cc_shadow_map_info", g);
        this._device.setUniform("cc_shadow_map_bias", e.shadowBias);
        this._defines.CC_SHADOW_TYPE = e._shadowType;
      };
      a._submitOtherStagesUniforms = function () {
        var t = E.add();
        for (var e = 0; e < this._shadowLights.length; ++e) {
          var i = this._shadowLights[e];
          var r = v[e];
          if (!r) {
            r = v[e] = new Float32Array(p.buffer, 64 * e, 16);
          }
          n.Mat4.toArray(r, i.viewProjMatrix);
          var s = 4 * e;
          t[s] = i.shadowMinDepth;
          t[s + 1] = i.shadowMaxDepth;
          t[s + 2] = i._shadowResolution;
          t[s + 3] = i.shadowDarkness;
        }
        this._device.setUniform("cc_shadow_lightViewProjMatrix", p);
        this._device.setUniform("cc_shadow_info", t);
      };
      a._sortItems = function (t) {
        t.sort(function (t, e) {
          return t.passes.length !== e.passes.length ? t.passes.length - e.passes.length : t.sortKey - e.sortKey;
        });
      };
      a._shadowStage = function (t, e) {
        this._submitShadowStageUniforms(t);
        for (var i = 0; i < e.length; ++i) {
          var n = e.data[i];
          if (n.effect.getDefine("CC_CASTING_SHADOW")) {
            this._draw(n);
          }
        }
      };
      a._drawItems = function (t, e) {
        var i = this._shadowLights;
        if (0 === i.length && 0 === this._numLights) {
          for (var n = 0; n < e.length; ++n) {
            var r = e.data[n];
            this._draw(r);
          }
        } else {
          for (var s = 0; s < e.length; ++s) {
            var a = e.data[s];
            for (var o = 0; o < i.length; ++o) {
              this._device.setTexture("cc_shadow_map_" + o, i[o].shadowMap, this._allocTextureUnit());
            }
            this._draw(a);
          }
        }
      };
      a._opaqueStage = function (t, e) {
        t.getPosition(m);
        this._device.setUniform("cc_matView", n.Mat4.toArray(h, t._matView));
        this._device.setUniform("cc_matViewInv", n.Mat4.toArray(u, t._matViewInv));
        this._device.setUniform("cc_matProj", n.Mat4.toArray(f, t._matProj));
        this._device.setUniform("cc_matViewProj", n.Mat4.toArray(d, t._matViewProj));
        this._device.setUniform("cc_cameraPos", n.Vec4.toArray(_, m));
        this._submitLightsUniforms();
        this._submitOtherStagesUniforms();
        this._drawItems(t, e);
      };
      a._transparentStage = function (t, e) {
        t.getPosition(m);
        t.getForward(y);
        this._device.setUniform("cc_matView", n.Mat4.toArray(h, t._matView));
        this._device.setUniform("cc_matViewInv", n.Mat4.toArray(u, t._matViewInv));
        this._device.setUniform("cc_matProj", n.Mat4.toArray(f, t._matProj));
        this._device.setUniform("cc_matViewProj", n.Mat4.toArray(d, t._matViewProj));
        this._device.setUniform("cc_cameraPos", n.Vec4.toArray(_, m));
        this._submitLightsUniforms();
        this._submitOtherStagesUniforms();
        for (var i = 0; i < e.length; ++i) {
          var r = e.data[i];
          r.node.getWorldPosition(T);
          n.Vec3.sub(T, T, m);
          r.sortKey = -n.Vec3.dot(T, y);
        }
        this._sortItems(e);
        this._drawItems(t, e);
      };
      return r;
    }(r.default);
    i.default = x;
    e.exports = i.default;
  }, {
    "../../core/value-types": 251,
    "../core/base-renderer": 271,
    "../enums": 277,
    "../memop": 294
  }],
  302: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n;
    var r = t("../../core/value-types");
    var s = t("../../core/geom-utils");
    var a = (n = t("../enums")) && n.__esModule ? n : {
      default: n
    };
    function o(t, e) {
      for (var i = 0; i < e.length; i++) {
        var n = e[i];
        n.enumerable = n.enumerable || false;
        n.configurable = true;
        if ("value" in n) {
          n.writable = true;
        }
        Object.defineProperty(t, n.key, n);
      }
    }
    var c = new r.Mat4();
    var l = new r.Mat4();
    var h = new r.Mat4();
    var u = new r.Mat4();
    var f = new r.Mat4();
    var d = new r.Mat4();
    var _ = new r.Vec3();
    var p = new r.Vec3();
    var v = function () {
      function t() {
        this._poolID = -1;
        this._node = null;
        this._projection = a.default.PROJ_PERSPECTIVE;
        this._priority = 0;
        this._color = new r.Vec4(.2, .3, .47, 1);
        this._depth = 1;
        this._stencil = 0;
        this._clearFlags = a.default.CLEAR_COLOR | a.default.CLEAR_DEPTH;
        this._clearModel = null;
        this._stages = [];
        this._framebuffer = null;
        this._near = .01;
        this._far = 1e3;
        this._fov = Math.PI / 4;
        this._rect = {
          x: 0,
          y: 0,
          w: 1,
          h: 1
        };
        this._orthoHeight = 10;
        this._cullingMask = 4294967295;
      }
      var i;
      var n = t.prototype;
      n.setCullingMask = function (t) {
        this._cullingMask = t;
      };
      n.getNode = function () {
        return this._node;
      };
      n.setNode = function (t) {
        this._node = t;
      };
      n.getType = function () {
        return this._projection;
      };
      n.setType = function (t) {
        this._projection = t;
      };
      n.getPriority = function () {
        return this._priority;
      };
      n.setPriority = function (t) {
        this._priority = t;
      };
      n.getOrthoHeight = function () {
        return this._orthoHeight;
      };
      n.setOrthoHeight = function (t) {
        this._orthoHeight = t;
      };
      n.getFov = function () {
        return this._fov;
      };
      n.setFov = function (t) {
        this._fov = t;
      };
      n.getNear = function () {
        return this._near;
      };
      n.setNear = function (t) {
        this._near = t;
      };
      n.getFar = function () {
        return this._far;
      };
      n.setFar = function (t) {
        this._far = t;
      };
      n.getColor = function (t) {
        return r.Vec4.copy(t, this._color);
      };
      n.setColor = function (t, e, i, n) {
        r.Vec4.set(this._color, t, e, i, n);
      };
      n.getDepth = function () {
        return this._depth;
      };
      n.setDepth = function (t) {
        this._depth = t;
      };
      n.getStencil = function () {
        return this._stencil;
      };
      n.setStencil = function (t) {
        this._stencil = t;
      };
      n.getClearFlags = function () {
        return this._clearFlags;
      };
      n.setClearFlags = function (t) {
        this._clearFlags = t;
      };
      n.getRect = function (t) {
        t.x = this._rect.x;
        t.y = this._rect.y;
        t.w = this._rect.w;
        t.h = this._rect.h;
        return t;
      };
      n.setRect = function (t, e, i, n) {
        this._rect.x = t;
        this._rect.y = e;
        this._rect.w = i;
        this._rect.h = n;
      };
      n.getStages = function () {
        return this._stages;
      };
      n.setStages = function (t) {
        this._stages = t;
      };
      n.getFramebuffer = function () {
        return this._framebuffer;
      };
      n.setFrameBuffer = function (t) {
        this._framebuffer = t;
      };
      n._calcMatrices = function (t, e) {
        this._node.getWorldRT(h);
        r.Mat4.invert(l, h);
        var i = t / e;
        if (this._projection === a.default.PROJ_PERSPECTIVE) {
          r.Mat4.perspective(u, this._fov, i, this._near, this._far);
        } else {
          var n = this._orthoHeight * i;
          var s = this._orthoHeight;
          r.Mat4.ortho(u, -n, n, -s, s, this._near, this._far);
        }
        r.Mat4.mul(f, u, l);
        r.Mat4.invert(d, f);
      };
      n.extractView = function (t, e, i) {
        if (this._framebuffer) {
          e = this._framebuffer._width;
          i = this._framebuffer._height;
        }
        t._priority = this._priority;
        t._rect.x = this._rect.x * e;
        t._rect.y = this._rect.y * i;
        t._rect.w = this._rect.w * e;
        t._rect.h = this._rect.h * i;
        this.getColor(t._color);
        t._depth = this._depth;
        t._stencil = this._stencil;
        t._clearFlags = this._clearFlags;
        t._clearModel = this._clearModel;
        t._stages = this._stages;
        t._framebuffer = this._framebuffer;
        this._calcMatrices(e, i);
        r.Mat4.copy(t._matView, l);
        r.Mat4.copy(t._matViewInv, h);
        r.Mat4.copy(t._matProj, u);
        r.Mat4.copy(t._matViewProj, f);
        r.Mat4.copy(t._matInvViewProj, d);
        t._cullingMask = this._cullingMask;
      };
      n.screenPointToRay = function (t, e, i, n, o) {
        if (!cc.geomUtils) {
          return o;
        }
        o = o || new s.Ray();
        this._calcMatrices(i, n);
        var c = this._rect.x * i;
        var l = this._rect.y * n;
        var h = this._rect.w * i;
        var u = this._rect.h * n;
        r.Vec3.set(p, (t - c) / h * 2 - 1, (e - l) / u * 2 - 1, 1);
        r.Vec3.transformMat4(p, p, d);
        if (this._projection === a.default.PROJ_PERSPECTIVE) {
          this._node.getWorldPosition(_);
        } else {
          r.Vec3.set(_, (t - c) / h * 2 - 1, (e - l) / u * 2 - 1, -1);
          r.Vec3.transformMat4(_, _, d);
        }
        return s.Ray.fromPoints(o, _, p);
      };
      n.screenToWorld = function (t, e, i, n) {
        this._calcMatrices(i, n);
        var s = this._rect.x * i;
        var o = this._rect.y * n;
        var c = this._rect.w * i;
        var l = this._rect.h * n;
        if (this._projection === a.default.PROJ_PERSPECTIVE) {
          r.Vec3.set(t, (e.x - s) / c * 2 - 1, (e.y - o) / l * 2 - 1, .9999);
          r.Vec3.transformMat4(t, t, d);
          this._node.getWorldPosition(_);
          0;
          r.Vec3.lerp(t, _, t, r.lerp(this._near / this._far, 1, e.z));
        } else {
          r.Vec3.set(t, (e.x - s) / c * 2 - 1, (e.y - o) / l * 2 - 1, 2 * e.z - 1);
          r.Vec3.transformMat4(t, t, d);
        }
        return t;
      };
      n.worldToScreen = function (t, e, i, n) {
        this._calcMatrices(i, n);
        var s = this._rect.x * i;
        var a = this._rect.y * n;
        var o = this._rect.w * i;
        var c = this._rect.h * n;
        r.Vec3.transformMat4(t, e, f);
        t.x = s + .5 * (t.x + 1) * o;
        t.y = a + .5 * (t.y + 1) * c;
        t.z = .5 * t.z + .5;
        return t;
      };
      n.worldMatrixToScreen = function (t, e, i, n) {
        this._calcMatrices(i, n);
        r.Mat4.mul(t, f, e);
        var s = i / 2;
        var a = n / 2;
        r.Mat4.identity(c);
        r.Mat4.transform(c, c, r.Vec3.set(_, s, a, 0));
        r.Mat4.scale(c, c, r.Vec3.set(_, s, a, 1));
        r.Mat4.mul(t, c, t);
        return t;
      };
      if (i = [{
        key: "cullingMask",
        get: function () {
          return this._cullingMask;
        },
        set: function (t) {
          this._cullingMask = t;
        }
      }]) {
        o(t.prototype, i);
      }
      Object.defineProperty(t, "prototype", {
        writable: false
      });
      return t;
    }();
    i.default = v;
    e.exports = i.default;
  }, {
    "../../core/geom-utils": 142,
    "../../core/value-types": 251,
    "../enums": 277
  }],
  303: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n = function () {
      function t() {
        this._type = "default";
        this._poolID = -1;
        this._node = null;
        this._inputAssembler = null;
        this._effect = null;
        this._viewID = -1;
        this._cameraID = -1;
        this._userKey = -1;
        this._castShadow = false;
        this._boundingShape = null;
      }
      var e = t.prototype;
      e.setNode = function (t) {
        this._node = t;
      };
      e.setInputAssembler = function (t) {
        this._inputAssembler = t;
      };
      e.setEffect = function (t) {
        this._effect = t;
      };
      e.setUserKey = function (t) {
        this._userKey = t;
      };
      e.extractDrawItem = function (t) {
        t.model = this;
        t.node = this._node;
        t.ia = this._inputAssembler;
        t.effect = this._effect;
      };
      return t;
    }();
    i.default = n;
    e.exports = i.default;
  }, {}],
  304: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n = t("../memop");
    var r = function () {
      function t(t) {
        this._lights = new n.FixedArray(16);
        this._models = new n.FixedArray(16);
        this._cameras = new n.FixedArray(16);
        this._debugCamera = null;
        this._app = t;
        this._views = [];
      }
      var e = t.prototype;
      e._add = function (t, e) {
        if (-1 === e._poolID) {
          t.push(e);
          e._poolID = t.length - 1;
        }
      };
      e._remove = function (t, e) {
        if (-1 !== e._poolID) {
          t.data[t.length - 1]._poolID = e._poolID;
          t.fastRemove(e._poolID);
          e._poolID = -1;
        }
      };
      e.reset = function () {
        for (var t = 0; t < this._models.length; ++t) {
          this._models.data[t]._viewID = -1;
        }
      };
      e.setDebugCamera = function (t) {
        this._debugCamera = t;
      };
      e.getCameraCount = function () {
        return this._cameras.length;
      };
      e.getCamera = function (t) {
        return this._cameras.data[t];
      };
      e.addCamera = function (t) {
        this._add(this._cameras, t);
      };
      e.removeCamera = function (t) {
        this._remove(this._cameras, t);
      };
      e.getModelCount = function () {
        return this._models.length;
      };
      e.getModel = function (t) {
        return this._models.data[t];
      };
      e.addModel = function (t) {
        this._add(this._models, t);
      };
      e.removeModel = function (t) {
        this._remove(this._models, t);
      };
      e.getLightCount = function () {
        return this._lights.length;
      };
      e.getLight = function (t) {
        return this._lights.data[t];
      };
      e.addLight = function (t) {
        this._add(this._lights, t);
      };
      e.removeLight = function (t) {
        this._remove(this._lights, t);
      };
      e.addView = function (t) {
        if (-1 === this._views.indexOf(t)) {
          this._views.push(t);
        }
      };
      e.removeView = function (t) {
        var e = this._views.indexOf(t);
        if (-1 !== e) {
          this._views.splice(e, 1);
        }
      };
      return t;
    }();
    i.default = r;
    e.exports = i.default;
  }, {
    "../memop": 294
  }],
  305: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.getClassName = i.enums2default = i.ctor2enums = undefined;
    i.getInspectorProps = function (t) {
      var e = {
        type: t.type
      };
      Object.assign(e, t.editor || t.inspector);
      e.defines = t.defines;
      e.value = n[r[t] || r.default](t.value);
      if (t.range) {
        e.range = t.range;
      }
      var i = cc.js.getClassName(r[t] || r.default);
      e.typeName = T[i] || i;
      e.valueCtor = r[e.type];
      if ("cc.Texture2D" == e.typeName) {
        e.typeName = "cc.Asset";
        e.assetType = "cc.Texture2D";
      }
      return e;
    };
    i.getInstanceType = i.getInstanceCtor = undefined;
    var n;
    var r;
    var s;
    var a;
    var o = t("./enums") && t("./enums").__esModule ? t("./enums") : {
      default: t("./enums")
    };
    var c = t("../core/value-types");
    var l = t("../core/assets/CCTexture2D") && t("../core/assets/CCTexture2D").__esModule ? t("../core/assets/CCTexture2D") : {
      default: t("../core/assets/CCTexture2D")
    };
    var u;
    u = t("./gfx/texture-2d");
    var f = cc.Object;
    (n = {
      Number: function (t) {
        return t ? ArrayBuffer.isView(t) ? t[0] : t : 0;
      },
      [c.Vec2]: function (t) {
        return t ? cc.v2(t[0], t[1]) : cc.v2();
      },
      [c.Vec3]: function (t) {
        return t ? cc.v3(t[0], t[1], t[2]) : cc.v3();
      },
      [c.Vec4]: function (t) {
        return t ? cc.v4(t[0], t[1], t[2], t[3]) : cc.v4();
      },
      [c.Color]: function (t) {
        return t ? cc.color(255 * t[0], 255 * t[1], 255 * t[2], 255 * (t[3] || 1)) : cc.color();
      },
      [c.Mat4]: function (t) {
        return t ? cc.mat4(t[0], t[1], t[2], t[3], t[4], t[5], t[6], t[7], t[8], t[9], t[10], t[11], t[12], t[13], t[14], t[15]) : cc.mat4();
      },
      [l.default]: function () {
        return null;
      },
      f: function () {
        return null;
      }
    })[Boolean] = function (t) {
      return t || false;
    };
    (r = {
      [o.default.PARAM_INT2]: c.Vec2,
      [o.default.PARAM_INT3]: c.Vec3,
      [o.default.PARAM_INT4]: c.Vec4,
      [o.default.PARAM_FLOAT]: Number,
      [o.default.PARAM_FLOAT2]: c.Vec2,
      [o.default.PARAM_FLOAT3]: c.Vec3,
      [o.default.PARAM_FLOAT4]: c.Vec4,
      [o.default.PARAM_MAT4]: c.Mat4,
      [o.default.PARAM_TEXTURE_2D]: l.default,
      color: c.Color,
      number: Number,
      boolean: Boolean,
      default: f
    })[o.default.PARAM_INT] = Number;
    (s = {
      [c.Vec2]: o.default.PARAM_FLOAT2,
      [c.Vec3]: o.default.PARAM_FLOAT3,
      [c.Vec4]: o.default.PARAM_FLOAT4,
      [c.Color]: o.default.PARAM_COLOR3,
      [c.Color]: o.default.PARAM_COLOR4,
      [c.Mat4]: o.default.PARAM_MAT4,
      [l.default]: o.default.PARAM_TEXTURE_2D,
      u: o.default.PARAM_TEXTURE_2D
    })[Number] = o.default.PARAM_FLOAT;
    i.ctor2enums = s;
    (a = {
      [o.default.PARAM_INT2]: new Uint32Array([0, 0]),
      [o.default.PARAM_INT3]: new Uint32Array([0, 0, 0]),
      [o.default.PARAM_INT4]: new Uint32Array([0, 0, 0, 0]),
      [o.default.PARAM_FLOAT]: new Float32Array([0]),
      [o.default.PARAM_FLOAT2]: new Float32Array([0, 0]),
      [o.default.PARAM_FLOAT3]: new Float32Array([0, 0, 0]),
      [o.default.PARAM_FLOAT4]: new Float32Array([0, 0, 0, 0]),
      [o.default.PARAM_MAT4]: new Float32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
      [o.default.PARAM_TEXTURE_2D]: null,
      number: 0,
      boolean: false
    })[o.default.PARAM_INT] = new Uint32Array([0]);
    i.enums2default = a;
    var g = function (t) {
      return r[t] || r.default;
    };
    i.getInstanceType = g;
    var m = function (t) {
      return n[r[t] || r.default];
    };
    i.getInstanceCtor = m;
    var y = function (t) {
      return cc.js.getClassName(r[t] || r.default);
    };
    i.getClassName = y;
    var T = {
      Number: "number",
      Boolean: "boolean"
    };
  }, {
    "../core/assets/CCTexture2D": 72,
    "../core/value-types": 251,
    "./enums": 277,
    "./gfx/texture-2d": 287
  }],
  306: [function (t) {
    "use strict";

    var e = t("../core/CCDebug");
    var i = t("../compression/ZipUtils");
    var n = t("../core/platform/js");
    function r(t) {
      var e = cc.Label.HorizontalAlign;
      switch (t) {
        case "center":
          return e.CENTER;
        case "right":
          return e.RIGHT;
        default:
          return e.LEFT;
      }
    }
    function s(t) {
      var e = cc.Label.VerticalAlign;
      switch (t) {
        case "center":
          return e.CENTER;
        case "bottom":
          return e.BOTTOM;
        default:
          return e.TOP;
      }
    }
    function a(t) {
      if (!t) {
        return cc.color(0, 0, 0, 255);
      }
      if (8 === (t = -1 !== t.indexOf("#") ? t.substring(1) : t).length) {
        var e = parseInt(t.substr(0, 2), 16) || 255;
        var i = parseInt(t.substr(2, 2), 16) || 0;
        var n = parseInt(t.substr(4, 2), 16) || 0;
        var r = parseInt(t.substr(6, 2), 16) || 0;
        return cc.color(i, n, r, e);
      }
      var s = parseInt(t.substr(0, 2), 16) || 0;
      var a = parseInt(t.substr(2, 2), 16) || 0;
      var o = parseInt(t.substr(4, 2), 16) || 0;
      return cc.color(s, a, o, 255);
    }
    function o(t, e) {
      var i = [];
      var n = t.getElementsByTagName("properties");
      for (var r = 0; r < n.length; ++r) {
        var s = n[r].getElementsByTagName("property");
        for (var o = 0; o < s.length; ++o) {
          i.push(s[o]);
        }
      }
      e = e || {};
      for (var c = 0; c < i.length; c++) {
        var l = i[c];
        var h = l.getAttribute("name");
        var u = l.getAttribute("type") || "string";
        var f = l.getAttribute("value");
        if ("int" === u) {
          f = parseInt(f);
        } else if ("float" === u) {
          f = parseFloat(f);
        } else if ("bool" === u) {
          f = "true" === f;
        } else if ("color" === u) {
          f = a(f);
        }
        e[h] = f;
      }
      return e;
    }
    t("../core/platform/CCSAXParser");
    cc.TMXLayerInfo = function () {
      this.properties = {};
      this.name = "";
      this._layerSize = null;
      this._tiles = [];
      this.visible = true;
      this._opacity = 0;
      this.ownTiles = true;
      this._minGID = 1e5;
      this._maxGID = 0;
      this.offset = cc.v2(0, 0);
    };
    cc.TMXLayerInfo.prototype = {
      constructor: cc.TMXLayerInfo,
      getProperties: function () {
        return this.properties;
      },
      setProperties: function (t) {
        this.properties = t;
      }
    };
    cc.TMXImageLayerInfo = function () {
      this.name = "";
      this.visible = true;
      this.width = 0;
      this.height = 0;
      this.offset = cc.v2(0, 0);
      this._opacity = 0;
      this._trans = new cc.Color(255, 255, 255, 255);
      this.sourceImage = null;
    };
    cc.TMXObjectGroupInfo = function () {
      this.properties = {};
      this.name = "";
      this._objects = [];
      this.visible = true;
      this._opacity = 0;
      this._color = new cc.Color(255, 255, 255, 255);
      this.offset = cc.v2(0, 0);
      this._draworder = "topdown";
    };
    cc.TMXObjectGroupInfo.prototype = {
      constructor: cc.TMXObjectGroupInfo,
      getProperties: function () {
        return this.properties;
      },
      setProperties: function (t) {
        this.properties = t;
      }
    };
    cc.TMXTilesetInfo = function () {
      this.name = "";
      this.firstGid = 0;
      this.spacing = 0;
      this.margin = 0;
      this.sourceImage = null;
      this.imageSize = cc.size(0, 0);
      this.tileOffset = cc.v2(0, 0);
      this._tileSize = cc.size(0, 0);
    };
    cc.TMXTilesetInfo.prototype = {
      constructor: cc.TMXTilesetInfo,
      rectForGID: function (t, e) {
        var i = e || cc.rect(0, 0, 0, 0);
        i.width = this._tileSize.width;
        i.height = this._tileSize.height;
        t &= cc.TiledMap.TileFlag.FLIPPED_MASK;
        t -= parseInt(this.firstGid, 10);
        var n = parseInt((this.imageSize.width - 2 * this.margin + this.spacing) / (this._tileSize.width + this.spacing), 10);
        i.x = parseInt(t % n * (this._tileSize.width + this.spacing) + this.margin, 10);
        i.y = parseInt(parseInt(t / n, 10) * (this._tileSize.height + this.spacing) + this.margin, 10);
        return i;
      }
    };
    cc.TMXMapInfo = function (t, e, i, n, r) {
      this.properties = [];
      this.orientation = null;
      this.parentElement = null;
      this.parentGID = null;
      this.layerAttrs = 0;
      this.storingCharacters = false;
      this.currentString = null;
      this.renderOrder = cc.TiledMap.RenderOrder.RightDown;
      this._supportVersion = [1, 2, 0];
      this._parser = new cc.SAXParser();
      this._objectGroups = [];
      this._allChildren = [];
      this._mapSize = cc.size(0, 0);
      this._tileSize = cc.size(0, 0);
      this._layers = [];
      this._tilesets = [];
      this._imageLayers = [];
      this._tileProperties = {};
      this._tileAnimations = {};
      this._tsxMap = null;
      this._textures = null;
      this._staggerAxis = null;
      this._staggerIndex = null;
      this._hexSideLength = 0;
      this._imageLayerTextures = null;
      this.initWithXML(t, e, i, n, r);
    };
    cc.TMXMapInfo.prototype = {
      constructor: cc.TMXMapInfo,
      getOrientation: function () {
        return this.orientation;
      },
      setOrientation: function (t) {
        this.orientation = t;
      },
      getStaggerAxis: function () {
        return this._staggerAxis;
      },
      setStaggerAxis: function (t) {
        this._staggerAxis = t;
      },
      getStaggerIndex: function () {
        return this._staggerIndex;
      },
      setStaggerIndex: function (t) {
        this._staggerIndex = t;
      },
      getHexSideLength: function () {
        return this._hexSideLength;
      },
      setHexSideLength: function (t) {
        this._hexSideLength = t;
      },
      getMapSize: function () {
        return cc.size(this._mapSize.width, this._mapSize.height);
      },
      setMapSize: function (t) {
        this._mapSize.width = t.width;
        this._mapSize.height = t.height;
      },
      _getMapWidth: function () {
        return this._mapSize.width;
      },
      _setMapWidth: function (t) {
        this._mapSize.width = t;
      },
      _getMapHeight: function () {
        return this._mapSize.height;
      },
      _setMapHeight: function (t) {
        this._mapSize.height = t;
      },
      getTileSize: function () {
        return cc.size(this._tileSize.width, this._tileSize.height);
      },
      setTileSize: function (t) {
        this._tileSize.width = t.width;
        this._tileSize.height = t.height;
      },
      _getTileWidth: function () {
        return this._tileSize.width;
      },
      _setTileWidth: function (t) {
        this._tileSize.width = t;
      },
      _getTileHeight: function () {
        return this._tileSize.height;
      },
      _setTileHeight: function (t) {
        this._tileSize.height = t;
      },
      getLayers: function () {
        return this._layers;
      },
      setLayers: function (t) {
        this._allChildren.push(t);
        this._layers.push(t);
      },
      getImageLayers: function () {
        return this._imageLayers;
      },
      setImageLayers: function (t) {
        this._allChildren.push(t);
        this._imageLayers.push(t);
      },
      getTilesets: function () {
        return this._tilesets;
      },
      setTilesets: function (t) {
        this._tilesets.push(t);
      },
      getObjectGroups: function () {
        return this._objectGroups;
      },
      setObjectGroups: function (t) {
        this._allChildren.push(t);
        this._objectGroups.push(t);
      },
      getAllChildren: function () {
        return this._allChildren;
      },
      getParentElement: function () {
        return this.parentElement;
      },
      setParentElement: function (t) {
        this.parentElement = t;
      },
      getParentGID: function () {
        return this.parentGID;
      },
      setParentGID: function (t) {
        this.parentGID = t;
      },
      getLayerAttribs: function () {
        return this.layerAttrs;
      },
      setLayerAttribs: function (t) {
        this.layerAttrs = t;
      },
      getStoringCharacters: function () {
        return this.storingCharacters;
      },
      setStoringCharacters: function (t) {
        this.storingCharacters = t;
      },
      getProperties: function () {
        return this.properties;
      },
      setProperties: function (t) {
        this.properties = t;
      },
      initWithXML: function (t, e, i, n, r) {
        this._tilesets.length = 0;
        this._layers.length = 0;
        this._imageLayers.length = 0;
        this._tsxMap = e;
        this._textures = i;
        this._imageLayerTextures = r;
        this._textureSizes = n;
        this._objectGroups.length = 0;
        this._allChildren.length = 0;
        this.properties.length = 0;
        this._tileProperties = {};
        this._tileAnimations = {};
        this.currentString = "";
        this.storingCharacters = false;
        this.layerAttrs = cc.TMXLayerInfo.ATTRIB_NONE;
        this.parentElement = cc.TiledMap.NONE;
        return this.parseXMLString(t);
      },
      parseXMLString: function (t, e) {
        var i;
        var n = this._parser._parseXML(t).documentElement;
        var r = n.getAttribute("orientation");
        var s = n.getAttribute("staggeraxis");
        var a = n.getAttribute("staggerindex");
        var c = n.getAttribute("hexsidelength");
        var l = n.getAttribute("renderorder");
        var h = n.getAttribute("version") || "1.0.0";
        if ("map" === n.nodeName) {
          var u = h.split(".");
          var f = this._supportVersion;
          for (var d = 0; d < f.length; d++) {
            var _ = parseInt(u[d]) || 0;
            if (f[d] < _) {
              break;
            }
          }
          if ("orthogonal" === r) {
            this.orientation = cc.TiledMap.Orientation.ORTHO;
          } else if ("isometric" === r) {
            this.orientation = cc.TiledMap.Orientation.ISO;
          } else if ("hexagonal" === r) {
            this.orientation = cc.TiledMap.Orientation.HEX;
          }
          this.renderOrder = "right-up" === l ? cc.TiledMap.RenderOrder.RightUp : "left-up" === l ? cc.TiledMap.RenderOrder.LeftUp : "left-down" === l ? cc.TiledMap.RenderOrder.LeftDown : cc.TiledMap.RenderOrder.RightDown;
          if ("x" === s) {
            this.setStaggerAxis(cc.TiledMap.StaggerAxis.STAGGERAXIS_X);
          } else if ("y" === s) {
            this.setStaggerAxis(cc.TiledMap.StaggerAxis.STAGGERAXIS_Y);
          }
          if ("odd" === a) {
            this.setStaggerIndex(cc.TiledMap.StaggerIndex.STAGGERINDEX_ODD);
          } else if ("even" === a) {
            this.setStaggerIndex(cc.TiledMap.StaggerIndex.STAGGERINDEX_EVEN);
          }
          if (c) {
            this.setHexSideLength(parseFloat(c));
          }
          var p = cc.size(0, 0);
          p.width = parseFloat(n.getAttribute("width"));
          p.height = parseFloat(n.getAttribute("height"));
          this.setMapSize(p);
          (p = cc.size(0, 0)).width = parseFloat(n.getAttribute("tilewidth"));
          p.height = parseFloat(n.getAttribute("tileheight"));
          this.setTileSize(p);
          this.properties = o(n);
        }
        var v = n.getElementsByTagName("tileset");
        if ("map" !== n.nodeName) {
          (v = []).push(n);
        }
        for (i = 0; i < v.length; i++) {
          var g = v[i];
          var m = g.getAttribute("source");
          if (m) {
            var y = parseInt(g.getAttribute("firstgid"));
            var T = this._tsxMap[m];
            if (T) {
              this.parseXMLString(T, y);
            }
          } else {
            var E = g.getElementsByTagName("image");
            var A = E.length > 1;
            var x = E[0];
            var C = x.getAttribute("source");
            C = C.replace(/\\/g, "/");
            var b = g.getElementsByTagName("tile");
            var S = b && b.length || 1;
            var R = null;
            var M = g.getAttribute("name") || "";
            var w = parseInt(g.getAttribute("spacing")) || 0;
            var I = parseInt(g.getAttribute("margin")) || 0;
            var O = parseInt(e);
            if (!O) {
              O = parseInt(g.getAttribute("firstgid")) || 0;
            }
            var L = cc.size(0, 0);
            L.width = parseFloat(g.getAttribute("tilewidth"));
            L.height = parseFloat(g.getAttribute("tileheight"));
            var P = g.getElementsByTagName("tileoffset")[0];
            var D = cc.v2(0, 0);
            if (P) {
              D.x = parseFloat(P.getAttribute("x"));
              D.y = parseFloat(P.getAttribute("y"));
            }
            var N = null;
            for (var F = 0; F < S; F++) {
              if (!(N && !A)) {
                (N = new cc.TMXTilesetInfo()).name = M;
                N.firstGid = O;
                N.spacing = w;
                N.margin = I;
                N._tileSize = L;
                N.tileOffset = D;
                N.sourceImage = this._textures[C];
                N.imageSize = this._textureSizes[C] || N.imageSize;
                N.sourceImage;
                this.setTilesets(N);
              }
              if (R = b && b[F]) {
                this.parentGID = parseInt(O) + parseInt(R.getAttribute("id") || 0);
                var B = R.getElementsByTagName("image");
                if (B && B.length > 0) {
                  var V = (x = B[0]).getAttribute("source");
                  V = V.replace(/\\/g, "/");
                  N.sourceImage = this._textures[V];
                  N.sourceImage;
                  var k = cc.size(0, 0);
                  k.width = parseFloat(x.getAttribute("width"));
                  k.height = parseFloat(x.getAttribute("height"));
                  N._tileSize = k;
                  N.firstGid = this.parentGID;
                }
                this._tileProperties[this.parentGID] = o(R);
                var U = R.getElementsByTagName("animation");
                if (U && U.length > 0) {
                  var z = U[0].getElementsByTagName("frame");
                  var G = {
                    frames: [],
                    dt: 0,
                    frameIdx: 0
                  };
                  this._tileAnimations[this.parentGID] = G;
                  var H = G.frames;
                  for (var W = 0; W < z.length; W++) {
                    var X = z[W];
                    var Y = parseInt(O) + parseInt(X.getAttribute("tileid"));
                    var j = parseFloat(X.getAttribute("duration"));
                    H.push({
                      tileid: Y,
                      duration: j / 1e3,
                      grid: null
                    });
                  }
                }
              }
            }
          }
        }
        var q = n.childNodes;
        for (i = 0; i < q.length; i++) {
          var Z = q[i];
          if (!this._shouldIgnoreNode(Z)) {
            if ("imagelayer" === Z.nodeName) {
              var K = this._parseImageLayer(Z);
              if (K) {
                this.setImageLayers(K);
              }
            }
            if ("layer" === Z.nodeName) {
              var Q = this._parseLayer(Z);
              this.setLayers(Q);
            }
            if ("objectgroup" === Z.nodeName) {
              var J = this._parseObjectGroup(Z);
              this.setObjectGroups(J);
            }
          }
        }
        return n;
      },
      _shouldIgnoreNode: function (t) {
        return 3 === t.nodeType || 8 === t.nodeType || 4 === t.nodeType;
      },
      _parseImageLayer: function (t) {
        var e = t.getElementsByTagName("image");
        if (!e || 0 == e.length) {
          return null;
        }
        var i = new cc.TMXImageLayerInfo();
        i.name = t.getAttribute("name");
        i.offset.x = parseFloat(t.getAttribute("offsetx")) || 0;
        i.offset.y = parseFloat(t.getAttribute("offsety")) || 0;
        var n = t.getAttribute("visible");
        i.visible = !("0" === n);
        var r = t.getAttribute("opacity") || 1;
        i.opacity = parseInt(255 * parseFloat(r)) || 255;
        var s = e[0];
        var o = s.getAttribute("source");
        i.sourceImage = this._imageLayerTextures[o];
        i.width = parseInt(s.getAttribute("width")) || 0;
        i.height = parseInt(s.getAttribute("height")) || 0;
        i.trans = a(s.getAttribute("trans"));
        return i.sourceImage ? i : null;
      },
      _parseLayer: function (t) {
        var n = t.getElementsByTagName("data")[0];
        var r = new cc.TMXLayerInfo();
        r.name = t.getAttribute("name");
        var s = cc.size(0, 0);
        s.width = parseFloat(t.getAttribute("width"));
        s.height = parseFloat(t.getAttribute("height"));
        r._layerSize = s;
        var a = t.getAttribute("visible");
        r.visible = !("0" === a);
        var c = t.getAttribute("opacity") || 1;
        r._opacity = c ? parseInt(255 * parseFloat(c)) : 255;
        r.offset = cc.v2(parseFloat(t.getAttribute("offsetx")) || 0, parseFloat(t.getAttribute("offsety")) || 0);
        var l = "";
        for (var h = 0; h < n.childNodes.length; h++) {
          l += n.childNodes[h].nodeValue;
        }
        l = l.trim();
        var u;
        var f = n.getAttribute("compression");
        var d = n.getAttribute("encoding");
        if (f && "gzip" !== f && "zlib" !== f) {
          return null;
        }
        switch (f) {
          case "gzip":
          case "zlib":
            throw Error(e.getError(100));
          case null:
          case "":
            if ("base64" === d) {
              u = i.Base64.decodeAsArray(l, 4);
            } else if ("csv" === d) {
              u = [];
              var _ = l.split(",");
              for (var p = 0; p < _.length; p++) {
                u.push(parseInt(_[p]));
              }
            } else {
              var v = n.getElementsByTagName("tile");
              u = [];
              for (var g = 0; g < v.length; g++) {
                u.push(parseInt(v[g].getAttribute("gid")));
              }
            }
            break;
          default:
            this.layerAttrs;
            cc.TMXLayerInfo.ATTRIB_NONE;
        }
        if (u) {
          r._tiles = new Uint32Array(u);
        }
        r.properties = o(t);
        return r;
      },
      _parseObjectGroup: function (t) {
        var e = new cc.TMXObjectGroupInfo();
        e.name = t.getAttribute("name") || "";
        e.offset = cc.v2(parseFloat(t.getAttribute("offsetx")), parseFloat(t.getAttribute("offsety")));
        var i = t.getAttribute("opacity") || 1;
        e._opacity = i ? parseInt(255 * parseFloat(i)) : 255;
        var n = t.getAttribute("visible");
        if (n && 0 === parseInt(n)) {
          e.visible = false;
        }
        var c = t.getAttribute("color");
        if (c) {
          e._color.fromHEX(c);
        }
        var l = t.getAttribute("draworder");
        if (l) {
          e._draworder = l;
        }
        e.setProperties(o(t));
        var h = t.getElementsByTagName("object");
        if (h) {
          for (var u = 0; u < h.length; u++) {
            var f = h[u];
            var d = {
              id: f.getAttribute("id") || u,
              name: f.getAttribute("name") || "",
              width: parseFloat(f.getAttribute("width")) || 0,
              height: parseFloat(f.getAttribute("height")) || 0,
              x: parseFloat(f.getAttribute("x")) || 0,
              y: parseFloat(f.getAttribute("y")) || 0,
              rotation: parseFloat(f.getAttribute("rotation")) || 0
            };
            o(f, d);
            var _ = f.getAttribute("visible");
            d.visible = !(_ && 0 === parseInt(_));
            var p = f.getElementsByTagName("text");
            if (p && p.length > 0) {
              var v = p[0];
              d.type = cc.TiledMap.TMXObjectType.TEXT;
              d.wrap = "1" == v.getAttribute("wrap");
              d.color = a(v.getAttribute("color"));
              d.halign = r(v.getAttribute("halign"));
              d.valign = s(v.getAttribute("valign"));
              d.pixelsize = parseInt(v.getAttribute("pixelsize")) || 16;
              d.text = v.childNodes[0].nodeValue;
            }
            var g = f.getAttribute("gid");
            if (g) {
              d.gid = parseInt(g);
              d.type = cc.TiledMap.TMXObjectType.IMAGE;
            }
            var m = f.getElementsByTagName("ellipse");
            if (m && m.length > 0) {
              d.type = cc.TiledMap.TMXObjectType.ELLIPSE;
            }
            var y = f.getElementsByTagName("polygon");
            if (y && y.length > 0) {
              d.type = cc.TiledMap.TMXObjectType.POLYGON;
              var T = y[0].getAttribute("points");
              if (T) {
                d.points = this._parsePointsString(T);
              }
            }
            var E = f.getElementsByTagName("polyline");
            if (E && E.length > 0) {
              d.type = cc.TiledMap.TMXObjectType.POLYLINE;
              var A = E[0].getAttribute("points");
              if (A) {
                d.polylinePoints = this._parsePointsString(A);
              }
            }
            if (!d.type) {
              d.type = cc.TiledMap.TMXObjectType.RECT;
            }
            e._objects.push(d);
          }
          if ("index" !== l) {
            e._objects.sort(function (t, e) {
              return t.y - e.y;
            });
          }
        }
        return e;
      },
      _parsePointsString: function (t) {
        if (!t) {
          return null;
        }
        var e = [];
        var i = t.split(" ");
        for (var n = 0; n < i.length; n++) {
          var r = i[n].split(",");
          e.push({
            x: parseFloat(r[0]),
            y: parseFloat(r[1])
          });
        }
        return e;
      },
      setTileAnimations: function (t) {
        this._tileAnimations = t;
      },
      getTileAnimations: function () {
        return this._tileAnimations;
      },
      getTileProperties: function () {
        return this._tileProperties;
      },
      setTileProperties: function (t) {
        this._tileProperties = t;
      },
      getCurrentString: function () {
        return this.currentString;
      },
      setCurrentString: function (t) {
        this.currentString = t;
      }
    };
    var c = cc.TMXMapInfo.prototype;
    n.getset(c, "mapWidth", c._getMapWidth, c._setMapWidth);
    n.getset(c, "mapHeight", c._getMapHeight, c._setMapHeight);
    n.getset(c, "tileWidth", c._getTileWidth, c._setTileWidth);
    n.getset(c, "tileHeight", c._getTileHeight, c._setTileHeight);
    cc.TMXLayerInfo.ATTRIB_NONE = 1;
    cc.TMXLayerInfo.ATTRIB_BASE64 = 2;
    cc.TMXLayerInfo.ATTRIB_GZIP = 4;
    cc.TMXLayerInfo.ATTRIB_ZLIB = 8;
  }, {
    "../compression/ZipUtils": 21,
    "../core/CCDebug": 23,
    "../core/platform/CCSAXParser": 169,
    "../core/platform/js": 183
  }],
  307: [function (t, e) {
    "use strict";

    var i;
    var n = t("../core/value-types");
    var r = (i = t("../core/assets/material/material-variant")) && i.__esModule ? i : {
      default: i
    };
    var s = t("../core/components/CCRenderComponent");
    var a = t("../core/assets/material/CCMaterial");
    var o = t("../core/renderer/render-flow");
    var c = cc.mat4();
    var l = cc.v2();
    var h = cc.v2();
    var u = cc.v2();
    var f = {
      row: 0,
      col: 0
    };
    var d = cc.Class({
      name: "cc.TiledUserNodeData",
      extends: cc.Component,
      ctor: function () {
        this._index = -1;
        this._row = -1;
        this._col = -1;
        this._tiledLayer = null;
      }
    });
    var _ = cc.Class({
      name: "cc.TiledLayer",
      extends: s,
      editor: {
        inspector: "packages://inspector/inspectors/comps/tiled-layer.js"
      },
      ctor: function () {
        this._userNodeGrid = {};
        this._userNodeMap = {};
        this._userNodeDirty = false;
        this._tiledTiles = [];
        this._tilesetIndexArr = [];
        this._tilesetIndexToArrIndex = {};
        this._texIdToMatIndex = {};
        this._viewPort = {
          x: -1,
          y: -1,
          width: -1,
          height: -1
        };
        this._cullingRect = {
          leftDown: {
            row: -1,
            col: -1
          },
          rightTop: {
            row: -1,
            col: -1
          }
        };
        this._cullingDirty = true;
        this._rightTop = {
          row: -1,
          col: -1
        };
        this._layerInfo = null;
        this._mapInfo = null;
        this._topOffset = 0;
        this._downOffset = 0;
        this._leftOffset = 0;
        this._rightOffset = 0;
        this._tiles = [];
        this._vertices = [];
        this._verticesDirty = true;
        this._layerName = "";
        this._layerOrientation = null;
        this._texGrids = null;
        this._textures = null;
        this._tilesets = null;
        this._leftDownToCenterX = 0;
        this._leftDownToCenterY = 0;
        this._hasTiledNodeGrid = false;
        this._hasAniGrid = false;
        this._animations = null;
        this._enableCulling = cc.macro.ENABLE_TILEDMAP_CULLING;
      },
      _hasTiledNode: function () {
        return this._hasTiledNodeGrid;
      },
      _hasAnimation: function () {
        return this._hasAniGrid;
      },
      enableCulling: function (t) {
        if (this._enableCulling != t) {
          this._enableCulling = t;
          this._cullingDirty = true;
        }
      },
      addUserNode: function (t) {
        var e = t.getComponent(d);
        return !e && (e = t.addComponent(d), t.parent = this.node, t._renderFlag |= o.FLAG_BREAK_FLOW, this._userNodeMap[t._id] = e, e._row = -1, e._col = -1, e._tiledLayer = this, this._nodeLocalPosToLayerPos(t, l), this._positionToRowCol(l.x, l.y, f), this._addUserNodeToGrid(e, f), this._updateCullingOffsetByUserNode(t), t.on(cc.Node.EventType.POSITION_CHANGED, this._userNodePosChange, e), t.on(cc.Node.EventType.SIZE_CHANGED, this._userNodeSizeChange, e), true);
      },
      removeUserNode: function (t) {
        var e = t.getComponent(d);
        return !!e && (t.off(cc.Node.EventType.POSITION_CHANGED, this._userNodePosChange, e), t.off(cc.Node.EventType.SIZE_CHANGED, this._userNodeSizeChange, e), this._removeUserNodeFromGrid(e), delete this._userNodeMap[t._id], t._removeComponent(e), e.destroy(), t.removeFromParent(true), t._renderFlag &= ~o.FLAG_BREAK_FLOW, true);
      },
      destroyUserNode: function (t) {
        this.removeUserNode(t);
        t.destroy();
      },
      _nodeLocalPosToLayerPos: function (t, e) {
        e.x = t.x + this._leftDownToCenterX;
        e.y = t.y + this._leftDownToCenterY;
      },
      _getNodesByRowCol: function (t, e) {
        var i = this._userNodeGrid[t];
        return i ? i[e] : null;
      },
      _getNodesCountByRow: function (t) {
        var e = this._userNodeGrid[t];
        return e ? e.count : 0;
      },
      _updateAllUserNode: function () {
        this._userNodeGrid = {};
        for (var t in this._userNodeMap) {
          var e = this._userNodeMap[t];
          this._nodeLocalPosToLayerPos(e.node, l);
          this._positionToRowCol(l.x, l.y, f);
          this._addUserNodeToGrid(e, f);
          this._updateCullingOffsetByUserNode(e.node);
        }
      },
      _updateCullingOffsetByUserNode: function (t) {
        if (this._topOffset < t.height) {
          this._topOffset = t.height;
        }
        if (this._downOffset < t.height) {
          this._downOffset = t.height;
        }
        if (this._leftOffset < t.width) {
          this._leftOffset = t.width;
        }
        if (this._rightOffset < t.width) {
          this._rightOffset = t.width;
        }
      },
      _userNodeSizeChange: function () {
        var t = this.node;
        this._tiledLayer._updateCullingOffsetByUserNode(t);
      },
      _userNodePosChange: function () {
        var t = this.node;
        var e = this._tiledLayer;
        e._nodeLocalPosToLayerPos(t, l);
        e._positionToRowCol(l.x, l.y, f);
        e._limitInLayer(f);
        if (!(0 === this._row && 0 === this._col)) {
          e._removeUserNodeFromGrid(this);
          e._addUserNodeToGrid(this, f);
        }
      },
      _removeUserNodeFromGrid: function (t) {
        var e = t._row;
        var i = t._col;
        var n = t._index;
        var r = this._userNodeGrid[e];
        var s = r && r[i];
        if (s) {
          r.count--;
          s.count--;
          s.list[n] = null;
          if (s.count <= 0) {
            s.list.length = 0;
            s.count = 0;
          }
        }
        t._row = -1;
        t._col = -1;
        t._index = -1;
        this._userNodeDirty = true;
      },
      _limitInLayer: function (t) {
        var e = t.row;
        var i = t.col;
        if (e < 0) {
          t.row = 0;
        }
        if (e > this._rightTop.row) {
          t.row = this._rightTop.row;
        }
        if (i < 0) {
          t.col = 0;
        }
        if (i > this._rightTop.col) {
          t.col = this._rightTop.col;
        }
      },
      _addUserNodeToGrid: function (t, e) {
        var i = e.row;
        var n = e.col;
        var r = this._userNodeGrid[i] = this._userNodeGrid[i] || {
          count: 0
        };
        var s = r[n] = r[n] || {
          count: 0,
          list: []
        };
        t._row = i;
        t._col = n;
        t._index = s.list.length;
        r.count++;
        s.count++;
        s.list.push(t);
        this._userNodeDirty = true;
      },
      _isUserNodeDirty: function () {
        return this._userNodeDirty;
      },
      _setUserNodeDirty: function (t) {
        this._userNodeDirty = t;
      },
      onEnable: function () {
        this._super();
        this.node.on(cc.Node.EventType.ANCHOR_CHANGED, this._syncAnchorPoint, this);
        this._activateMaterial();
      },
      onDisable: function () {
        this._super();
        this.node.off(cc.Node.EventType.ANCHOR_CHANGED, this._syncAnchorPoint, this);
      },
      _syncAnchorPoint: function () {
        var t = this.node;
        this._leftDownToCenterX = t.width * t.anchorX * t.scaleX;
        this._leftDownToCenterY = t.height * t.anchorY * t.scaleY;
        this._cullingDirty = true;
      },
      onDestroy: function () {
        this._super();
        if (this._buffer) {
          this._buffer.destroy();
          this._buffer = null;
        }
        this._renderDataList = null;
      },
      getLayerName: function () {
        return this._layerName;
      },
      setLayerName: function (t) {
        this._layerName = t;
      },
      getProperty: function (t) {
        return this._properties[t];
      },
      getPositionAt: function (t, e) {
        var i;
        var n;
        if (undefined !== e) {
          i = Math.floor(t);
          e = Math.floor(e);
        } else {
          i = Math.floor(t.x);
          e = Math.floor(t.y);
        }
        switch (this._layerOrientation) {
          case cc.TiledMap.Orientation.ORTHO:
            n = this._positionForOrthoAt(i, e);
            break;
          case cc.TiledMap.Orientation.ISO:
            n = this._positionForIsoAt(i, e);
            break;
          case cc.TiledMap.Orientation.HEX:
            n = this._positionForHexAt(i, e);
        }
        return n;
      },
      _isInvalidPosition: function (t, e) {
        if (t && "object" == typeof t) {
          var i = t;
          e = i.y;
          t = i.x;
        }
        return t >= this._layerSize.width || e >= this._layerSize.height || t < 0 || e < 0;
      },
      _positionForIsoAt: function (t, e) {
        var i = 0;
        var n = 0;
        var r = Math.floor(t) + Math.floor(e) * this._layerSize.width;
        var s = this._tiles[r];
        if (s) {
          var a = (s & cc.TiledMap.TileFlag.FLIPPED_MASK) >>> 0;
          var o = this._texGrids[a].tileset.tileOffset;
          i = o.x;
          n = o.y;
        }
        return cc.v2(.5 * this._mapTileSize.width * (this._layerSize.height + t - e - 1) + i, .5 * this._mapTileSize.height * (this._layerSize.width - t + this._layerSize.height - e - 2) - n);
      },
      _positionForOrthoAt: function (t, e) {
        var i = 0;
        var n = 0;
        var r = Math.floor(t) + Math.floor(e) * this._layerSize.width;
        var s = this._tiles[r];
        if (s) {
          var a = (s & cc.TiledMap.TileFlag.FLIPPED_MASK) >>> 0;
          var o = this._texGrids[a].tileset.tileOffset;
          i = o.x;
          n = o.y;
        }
        return cc.v2(t * this._mapTileSize.width + i, (this._layerSize.height - e - 1) * this._mapTileSize.height - n);
      },
      _positionForHexAt: function (t, e) {
        var i;
        var n = this._mapTileSize.width;
        var r = this._mapTileSize.height;
        var s = this._layerSize.height;
        var a = Math.floor(t) + Math.floor(e) * this._layerSize.width;
        var o = this._tiles[a];
        i = this._texGrids[o] ? this._texGrids[o].tileset.tileOffset : {
          x: 0,
          y: 0
        };
        var c = this._staggerIndex === cc.TiledMap.StaggerIndex.STAGGERINDEX_ODD ? 1 : -1;
        var l = 0;
        var h = 0;
        var u = 0;
        var f = 0;
        switch (this._staggerAxis) {
          case cc.TiledMap.StaggerAxis.STAGGERAXIS_Y:
            u = 0;
            if (e % 2 == 1) {
              u = n / 2 * c;
            }
            l = t * n + u + i.x;
            h = (s - e - 1) * (r - (r - this._hexSideLength) / 2) - i.y;
            break;
          case cc.TiledMap.StaggerAxis.STAGGERAXIS_X:
            f = 0;
            if (t % 2 == 1) {
              f = r / 2 * -c;
            }
            l = t * (n - (n - this._hexSideLength) / 2) + i.x;
            h = (s - e - 1) * r + f - i.y;
        }
        return cc.v2(l, h);
      },
      setTilesGIDAt: function (t, e, i, n) {
        if (t && 0 !== t.length && !(n <= 0)) {
          if (i < 0) {
            i = 0;
          }
          if (e < 0) {
            e = 0;
          }
          var r = 0;
          var s = e + n;
          for (var a = i;; a++) {
            for (var o = e; o < s; o++) {
              if (r >= t.length) {
                return;
              }
              this._updateTileForGID(t[r], o, a);
              r++;
            }
          }
        }
      },
      setTileGIDAt: function (t, e, i, n) {
        if (undefined === e) {
          throw Error(cc.debug.getError(667242));
        }
        var r;
        if (undefined === n && e instanceof cc.Vec2) {
          r = e;
          n = i;
        } else {
          u.x = e;
          u.y = i;
          r = u;
        }
        var s = t & cc.TiledMap.TileFlag.FLIPPED_MASK;
        r.x = Math.floor(r.x);
        r.y = Math.floor(r.y);
        if (this._isInvalidPosition(r)) {
          throw Error(cc.debug.getError(667243));
        }
        if (this._tiles && this._tilesets && 0 != this._tilesets.length) {
          if (!(0 !== s && s < this._tilesets[0].firstGid)) {
            n = n || 0;
            this._updateTileForGID((t | n) >>> 0, r.x, r.y);
          }
        }
      },
      _updateTileForGID: function (t, e, i) {
        var n = 0 | e + i * this._layerSize.width;
        if (!(n >= this._tiles.length) && t !== this._tiles[n]) {
          var r = (t & cc.TiledMap.TileFlag.FLIPPED_MASK) >>> 0;
          var s = this._texGrids[r];
          var a = s && s.texId;
          if (s) {
            this._tiles[n] = t;
            this._updateVertex(e, i);
            this._buildMaterial(a);
          } else {
            this._tiles[n] = 0;
          }
          this._cullingDirty = true;
        }
      },
      getTiles: function () {
        return this._tiles;
      },
      getTileGIDAt: function (t, e) {
        if (undefined === t) {
          throw Error(cc.debug.getError(667244));
        }
        var i = t;
        if (undefined === e) {
          i = t.x;
          e = t.y;
        }
        if (this._isInvalidPosition(i, e)) {
          throw Error(cc.debug.getError(667245));
        }
        if (!this._tiles) {
          return null;
        }
        var n = Math.floor(i) + Math.floor(e) * this._layerSize.width;
        return (this._tiles[n] & cc.TiledMap.TileFlag.FLIPPED_MASK) >>> 0;
      },
      getTileFlagsAt: function (t, e) {
        if (!t) {
          throw Error(cc.debug.getError(667246));
        }
        if (undefined !== e) {
          t = cc.v2(t, e);
        }
        if (this._isInvalidPosition(t)) {
          throw Error(cc.debug.getError(667247));
        }
        if (!this._tiles) {
          return null;
        }
        var i = Math.floor(t.x) + Math.floor(t.y) * this._layerSize.width;
        return (this._tiles[i] & cc.TiledMap.TileFlag.FLIPPED_ALL) >>> 0;
      },
      _setCullingDirty: function (t) {
        this._cullingDirty = t;
      },
      _isCullingDirty: function () {
        return this._cullingDirty;
      },
      _updateViewPort: function (t, e, i, n) {
        if (this._viewPort.width !== i || this._viewPort.height !== n || this._viewPort.x !== t || this._viewPort.y !== e) {
          this._viewPort.x = t;
          this._viewPort.y = e;
          this._viewPort.width = i;
          this._viewPort.height = n;
          var r = 1;
          if (this._layerOrientation === cc.TiledMap.Orientation.ISO) {
            r = 2;
          }
          var s = this._viewPort.x - this._offset.x + this._leftDownToCenterX;
          var a = this._viewPort.y - this._offset.y + this._leftDownToCenterY;
          var o = s - this._leftOffset;
          var c = a - this._downOffset;
          var l = s + i + this._rightOffset;
          var h = a + n + this._topOffset;
          var u = this._cullingRect.leftDown;
          var d = this._cullingRect.rightTop;
          if (o < 0) {
            o = 0;
          }
          if (c < 0) {
            c = 0;
          }
          this._positionToRowCol(o, c, f);
          f.row -= r;
          f.col -= r;
          f.row = 0;
          f.col = 0;
          if (!(0 === u.row && 0 === u.col)) {
            u.row = 0;
            u.col = 0;
            this._cullingDirty = true;
          }
          if (l < 0 || h < 0) {
            f.row = -1;
            f.col = -1;
          } else {
            this._positionToRowCol(l, h, f);
            0++;
            0++;
          }
          if (0 > this._rightTop.row) {
            f.row = this._rightTop.row;
          }
          if (0 > this._rightTop.col) {
            f.col = this._rightTop.col;
          }
          if (!(0 === d.row && 0 === d.col)) {
            d.row = 0;
            d.col = 0;
            this._cullingDirty = true;
          }
        }
      },
      _positionToRowCol: function (t, e, i) {
        var n = cc.TiledMap;
        var r = n.Orientation;
        var s = n.StaggerAxis;
        var a = this._mapTileSize.width;
        var o = this._mapTileSize.height;
        var c = .5 * a;
        var l = .5 * o;
        var h = 0;
        var u = 0;
        var f = 0;
        var d = 0;
        var _ = this._staggerAxis;
        this._layerSize.width;
        switch (this._layerOrientation) {
          case r.ORTHO:
            u = Math.floor(t / a);
            h = Math.floor(e / o);
            break;
          case r.ISO:
            u = Math.floor(t / c);
            h = Math.floor(e / l);
            break;
          case r.HEX:
            if (_ === s.STAGGERAXIS_Y) {
              f = (h = Math.floor(e / (o - this._diffY1))) % 2 == 1 ? c * this._odd_even : 0;
              u = Math.floor((t - f) / a);
            } else {
              d = (u = Math.floor(t / (a - this._diffX1))) % 2 == 1 ? l * -this._odd_even : 0;
              h = Math.floor((e - d) / o);
            }
        }
        i.row = h;
        i.col = u;
        return i;
      },
      _updateCulling: function () {
        if (this._enableCulling) {
          this.node._updateWorldMatrix();
          n.Mat4.invert(c, this.node._worldMatrix);
          var t = cc.visibleRect;
          var e = cc.Camera.findCamera(this.node);
          if (e) {
            l.x = 0;
            l.y = 0;
            h.x = l.x + t.width;
            h.y = l.y + t.height;
            e.getScreenToWorldPoint(l, l);
            e.getScreenToWorldPoint(h, h);
            n.Vec2.transformMat4(l, l, c);
            n.Vec2.transformMat4(h, h, c);
            this._updateViewPort(l.x, l.y, h.x - l.x, h.y - l.y);
          }
        }
      },
      getLayerOrientation: function () {
        return this._layerOrientation;
      },
      getProperties: function () {
        return this._properties;
      },
      _updateVertex: function (t, e) {
        var i = cc.TiledMap;
        var n = i.TileFlag.FLIPPED_MASK;
        var r = i.StaggerAxis;
        var s = i.Orientation;
        var a = this._vertices;
        var o = this._layerOrientation;
        var c = this._tiles;
        if (c) {
          var l;
          var h;
          var u;
          var f;
          var d;
          var _;
          var p;
          var v = this._rightTop;
          var g = this._mapTileSize.width;
          var m = this._mapTileSize.height;
          var y = .5 * g;
          var T = .5 * m;
          var E = this._layerSize.height;
          var A = this._layerSize.width;
          var x = this._texGrids;
          if (o === s.HEX) {
            f = this._staggerAxis;
            d = this._diffX1;
            _ = this._diffY1;
            p = this._odd_even;
          }
          var C;
          var b;
          var S;
          var R;
          var M = 0;
          var w = 0;
          var I = 0;
          var O = 0;
          var L = e * A + t;
          if (l = x[b = (c[L] & n) >>> 0]) {
            if (this._animations[b]) {
              this._hasAniGrid = this._hasAniGrid || true;
            }
            switch (o) {
              case s.ORTHO:
                h = (M = t) * g;
                u = (w = E - e - 1) * m;
                break;
              case s.ISO:
                h = y * (M = E + t - e - 1);
                u = T * (w = E + A - t - e - 2);
                break;
              case s.HEX:
                h = t * (g - d) + (f === r.STAGGERAXIS_Y && e % 2 == 1 ? y * p : 0);
                u = (E - e - 1) * (m - _) + (f === r.STAGGERAXIS_X && t % 2 == 1 ? T * -p : 0);
                M = t;
                w = E - e - 1;
            }
            var P = a[w] = a[w] || {
              minCol: 0,
              maxCol: 0
            };
            var D = P[M] = P[M] || {};
            if (P.minCol > M) {
              P.minCol = M;
            }
            if (P.maxCol < M) {
              P.maxCol = M;
            }
            if (v.row < w) {
              v.row = w;
            }
            if (v.col < M) {
              v.col = M;
            }
            C = l.tileset.tileOffset;
            h += this._offset.x + C.x;
            u += this._offset.y - C.y;
            I = (I = -C.y + l.tileset._tileSize.height - m) < 0 ? 0 : I;
            S = C.y < 0 ? 0 : C.y;
            R = -C.x < 0 ? 0 : -C.x;
            O = (O = C.x + l.tileset._tileSize.width - g) < 0 ? 0 : O;
            if (this._rightOffset < R) {
              this._rightOffset = R;
            }
            if (this._leftOffset < O) {
              this._leftOffset = O;
            }
            if (this._topOffset < S) {
              this._topOffset = S;
            }
            if (this._downOffset < I) {
              this._downOffset = I;
            }
            D.left = h;
            D.bottom = u;
            D.index = L;
            this._cullingDirty = true;
          }
        }
      },
      _updateVertices: function () {
        this._vertices.length = 0;
        if (this._tiles) {
          var t = this._rightTop;
          t.row = -1;
          t.col = -1;
          var e = this._layerSize.height;
          var i = this._layerSize.width;
          this._topOffset = 0;
          this._downOffset = 0;
          this._leftOffset = 0;
          this._rightOffset = 0;
          this._hasAniGrid = false;
          for (var n = 0; n < e; ++n) {
            for (var r = 0; r < i; ++r) {
              this._updateVertex(r, n);
            }
          }
          this._verticesDirty = false;
        }
      },
      getTiledTileAt: function (t, e, i) {
        if (this._isInvalidPosition(t, e)) {
          throw Error(cc.debug.getError(667248));
        }
        if (!this._tiles) {
          return null;
        }
        var n = Math.floor(t) + Math.floor(e) * this._layerSize.width;
        var r = this._tiledTiles[n];
        if (!r && i) {
          var s = new cc.Node();
          (r = s.addComponent(cc.TiledTile))._x = t;
          r._y = e;
          r._layer = this;
          r._updateInfo();
          s.parent = this.node;
          return r;
        }
        return r;
      },
      setTiledTileAt: function (t, e, i) {
        if (this._isInvalidPosition(t, e)) {
          throw Error(cc.debug.getError(667249));
        }
        if (!this._tiles) {
          return null;
        }
        var n = Math.floor(t) + Math.floor(e) * this._layerSize.width;
        this._tiledTiles[n] = i;
        this._cullingDirty = true;
        this._hasTiledNodeGrid = !!i || this._tiledTiles.some(function (t) {
          return !!t;
        });
        return i;
      },
      getTexture: function (t) {
        t = t || 0;
        return this._textures && t >= 0 && this._textures.length > t ? this._textures[t] : null;
      },
      getTextures: function () {
        return this._textures;
      },
      setTexture: function (t) {
        this.setTextures([t]);
      },
      setTextures: function (t) {
        this._textures = t;
        this._activateMaterial();
      },
      getLayerSize: function () {
        return this._layerSize;
      },
      getMapTileSize: function () {
        return this._mapTileSize;
      },
      getTileSet: function (t) {
        t = t || 0;
        return this._tilesets && t >= 0 && this._tilesets.length > t ? this._tilesets[t] : null;
      },
      getTileSets: function () {
        return this._tilesets;
      },
      setTileSet: function (t) {
        this.setTileSets([t]);
      },
      setTileSets: function (t) {
        this._tilesets = t;
        var e = this._textures = [];
        var i = this._texGrids = [];
        for (var n = 0; n < t.length; n++) {
          var r = t[n];
          if (r) {
            e[n] = r.sourceImage;
          }
        }
        cc.TiledMap.loadAllTextures(e, function () {
          var e = 0;
          for (var n = t.length; e < n; ++e) {
            var r = t[e];
            if (r) {
              cc.TiledMap.fillTextureGrids(r, i, e);
            }
          }
          this._prepareToRender();
        }.bind(this));
      },
      _traverseAllGrid: function () {
        var t = this._tiles;
        var e = this._texGrids;
        var i = this._tilesetIndexArr;
        var n = this._tilesetIndexToArrIndex = {};
        var r = cc.TiledMap.TileFlag.FLIPPED_MASK;
        i.length = 0;
        for (var s = 0; s < t.length; s++) {
          var a = t[s];
          if (0 !== a) {
            var o = e[a = (a & r) >>> 0];
            if (o) {
              var c = o.texId;
              if (undefined === n[c]) {
                n[c] = i.length;
                i.push(c);
              }
            }
          }
        }
      },
      _init: function (t, e, i, n, r) {
        this._cullingDirty = true;
        this._layerInfo = t;
        this._mapInfo = e;
        var s = t._layerSize;
        this._layerName = t.name;
        this._tiles = t._tiles;
        this._properties = t.properties;
        this._layerSize = s;
        this._minGID = t._minGID;
        this._maxGID = t._maxGID;
        this._opacity = t._opacity;
        this._renderOrder = e.renderOrder;
        this._staggerAxis = e.getStaggerAxis();
        this._staggerIndex = e.getStaggerIndex();
        this._hexSideLength = e.getHexSideLength();
        this._animations = e.getTileAnimations();
        this._tilesets = i;
        this._textures = n;
        this._texGrids = r;
        this._layerOrientation = e.orientation;
        this._mapTileSize = e.getTileSize();
        var a = this._mapTileSize.width;
        var o = this._mapTileSize.height;
        var c = this._layerSize.width;
        var l = this._layerSize.height;
        if (this._layerOrientation === cc.TiledMap.Orientation.HEX) {
          var h = cc.TiledMap;
          var u = h.StaggerAxis;
          var f = h.StaggerIndex;
          var d = 0;
          var _ = 0;
          this._odd_even = this._staggerIndex === f.STAGGERINDEX_ODD ? 1 : -1;
          if (this._staggerAxis === u.STAGGERAXIS_X) {
            this._diffX1 = (a - this._hexSideLength) / 2;
            this._diffY1 = 0;
            _ = o * (l + .5);
            d = (a + this._hexSideLength) * Math.floor(c / 2) + a * (c % 2);
          } else {
            this._diffX1 = 0;
            this._diffY1 = (o - this._hexSideLength) / 2;
            d = a * (c + .5);
            _ = (o + this._hexSideLength) * Math.floor(l / 2) + o * (l % 2);
          }
          this.node.setContentSize(d, _);
        } else if (this._layerOrientation === cc.TiledMap.Orientation.ISO) {
          var p = c + l;
          this.node.setContentSize(.5 * a * p, .5 * o * p);
        } else {
          this.node.setContentSize(c * a, l * o);
        }
        this._offset = cc.v2(t.offset.x, -t.offset.y);
        this._useAutomaticVertexZ = false;
        this._vertexZvalue = 0;
        this._syncAnchorPoint();
        this._prepareToRender();
      },
      _prepareToRender: function () {
        this._updateVertices();
        this._traverseAllGrid();
        this._updateAllUserNode();
        this._activateMaterial();
      },
      _buildMaterial: function (t) {
        var e = this._texIdToMatIndex;
        if (undefined !== e[t]) {
          return null;
        }
        var i = this._tilesetIndexArr;
        var n = this._tilesetIndexToArrIndex;
        var s = n[t];
        if (undefined === s) {
          n[t] = s = i.length;
          i.push(t);
        }
        var o = this._textures[t];
        var c = this._materials[s];
        if (!c) {
          c = a.getBuiltinMaterial("2d-sprite");
        }
        (c = r.default.create(c, this)).define("CC_USE_MODEL", true);
        c.setProperty("texture", o);
        this._materials[s] = c;
        e[t] = s;
        return c;
      },
      _activateMaterial: function () {
        var t = this._tilesetIndexArr;
        if (0 !== t.length) {
          var e = t.length;
          for (var i = 0; i < e; i++) {
            this._buildMaterial(t[i]);
          }
          this._materials.length = e;
          this.markForRender(true);
        } else {
          this.disableRender();
        }
      }
    });
    cc.TiledLayer = e.exports = _;
  }, {
    "../core/assets/material/CCMaterial": 76,
    "../core/assets/material/material-variant": 83,
    "../core/components/CCRenderComponent": 109,
    "../core/renderer/render-flow": 194,
    "../core/value-types": 251
  }],
  308: [function (t, e) {
    "use strict";

    t("./CCTMXXMLParser");
    t("./CCTiledMapAsset");
    t("./CCTiledLayer");
    t("./CCTiledTile");
    t("./CCTiledObjectGroup");
    var i = cc.Enum({
      ORTHO: 0,
      HEX: 1,
      ISO: 2
    });
    var n = cc.Enum({
      NONE: 0,
      MAP: 1,
      LAYER: 2,
      OBJECTGROUP: 3,
      OBJECT: 4,
      TILE: 5
    });
    var r = cc.Enum({
      HORIZONTAL: 2147483648,
      VERTICAL: 1073741824,
      DIAGONAL: 536870912,
      FLIPPED_ALL: 4026531840,
      FLIPPED_MASK: 268435455
    });
    var s = cc.Enum({
      STAGGERAXIS_X: 0,
      STAGGERAXIS_Y: 1
    });
    var a = cc.Enum({
      STAGGERINDEX_ODD: 0,
      STAGGERINDEX_EVEN: 1
    });
    var o = cc.Enum({
      RightDown: 0,
      RightUp: 1,
      LeftDown: 2,
      LeftUp: 3
    });
    var c = cc.Enum({
      RECT: 0,
      ELLIPSE: 1,
      POLYGON: 2,
      POLYLINE: 3,
      IMAGE: 4,
      TEXT: 5
    });
    var l = cc.Class({
      name: "cc.TiledMap",
      extends: cc.Component,
      editor: false,
      ctor: function () {
        this._texGrids = [];
        this._textures = [];
        this._tilesets = [];
        this._animations = [];
        this._imageLayers = [];
        this._layers = [];
        this._groups = [];
        this._images = [];
        this._properties = [];
        this._tileProperties = [];
        this._mapSize = cc.size(0, 0);
        this._tileSize = cc.size(0, 0);
      },
      statics: {
        Orientation: i,
        Property: n,
        TileFlag: r,
        StaggerAxis: s,
        StaggerIndex: a,
        TMXObjectType: c,
        RenderOrder: o
      },
      properties: {
        _tmxFile: {
          default: null,
          type: cc.TiledMapAsset
        },
        tmxAsset: {
          get: function () {
            return this._tmxFile;
          },
          set: function (t) {
            if (this._tmxFile !== t) {
              this._tmxFile = t;
              this._applyFile();
            }
          },
          type: cc.TiledMapAsset
        }
      },
      getMapSize: function () {
        return this._mapSize;
      },
      getTileSize: function () {
        return this._tileSize;
      },
      getMapOrientation: function () {
        return this._mapOrientation;
      },
      getObjectGroups: function () {
        return this._groups;
      },
      getObjectGroup: function (t) {
        var e = this._groups;
        var i = 0;
        for (var n = e.length; i < n; i++) {
          var r = e[i];
          if (r && r.getGroupName() === t) {
            return r;
          }
        }
        return null;
      },
      enableCulling: function (t) {
        var e = this._layers;
        for (var i = 0; i < e.length; ++i) {
          e[i].enableCulling(t);
        }
      },
      getProperties: function () {
        return this._properties;
      },
      getLayers: function () {
        return this._layers;
      },
      getLayer: function (t) {
        var e = this._layers;
        var i = 0;
        for (var n = e.length; i < n; i++) {
          var r = e[i];
          if (r && r.getLayerName() === t) {
            return r;
          }
        }
        return null;
      },
      _changeLayer: function (t, e) {
        var i = this._layers;
        var n = 0;
        for (var r = i.length; n < r; n++) {
          var s = i[n];
          if (s && s.getLayerName() === t) {
            return void (i[n] = e);
          }
        }
      },
      getProperty: function (t) {
        return this._properties[t.toString()];
      },
      getPropertiesForGID: function (t) {
        return this._tileProperties[t];
      },
      __preload: function () {
        if (this._tmxFile) {
          this._applyFile();
        }
      },
      onEnable: function () {
        this.node.on(cc.Node.EventType.ANCHOR_CHANGED, this._syncAnchorPoint, this);
      },
      onDisable: function () {
        this.node.off(cc.Node.EventType.ANCHOR_CHANGED, this._syncAnchorPoint, this);
      },
      _applyFile: function () {
        var t = this._tmxFile;
        if (t) {
          var e = t.textures;
          var i = t.textureNames;
          var n = t.textureSizes;
          var r = {};
          var s = {};
          for (var a = 0; a < e.length; ++a) {
            var o = i[a];
            r[o] = e[a];
            s[o] = n[a];
          }
          var c = {};
          e = t.imageLayerTextures;
          i = t.imageLayerTextureNames;
          for (var l = 0; l < e.length; ++l) {
            c[i[l]] = e[l];
          }
          var h = t.tsxFileNames;
          var u = t.tsxFiles;
          var f = {};
          for (var d = 0; d < h.length; ++d) {
            if (h[d].length > 0) {
              f[h[d]] = u[d].text;
            }
          }
          var _ = new cc.TMXMapInfo(t.tmxXmlStr, f, r, s, c);
          var p = _.getTilesets();
          if (!!p) {
            p.length;
          }
          this._buildWithMapInfo(_);
        } else {
          this._releaseMapInfo();
        }
      },
      _releaseMapInfo: function () {
        var t = this._layers;
        var e = 0;
        for (var i = t.length; e < i; e++) {
          t[e].node.removeFromParent(true);
          t[e].node.destroy();
        }
        t.length = 0;
        var n = this._groups;
        var r = 0;
        for (var s = n.length; r < s; r++) {
          n[r].node.removeFromParent(true);
          n[r].node.destroy();
        }
        n.length = 0;
        var a = this._images;
        var o = 0;
        for (var c = a.length; o < c; o++) {
          a[o].removeFromParent(true);
          a[o].destroy();
        }
        a.length = 0;
      },
      _syncAnchorPoint: function () {
        var t;
        var e;
        var i = this.node.getAnchorPoint();
        var n = this.node.width * i.x;
        var r = this.node.height * (1 - i.y);
        t = 0;
        for (e = this._layers.length; t < e; t++) {
          this._layers[t].node.setAnchorPoint(i);
        }
        t = 0;
        for (e = this._groups.length; t < e; t++) {
          var s = this._groups[t];
          var a = s.node;
          a.anchorX = .5;
          a.anchorY = .5;
          a.x = s._offset.x - n + a.width * a.anchorX;
          a.y = s._offset.y + r - a.height * a.anchorY;
        }
        t = 0;
        for (e = this._images.length; t < e; t++) {
          var o = this._images[t];
          o.anchorX = .5;
          o.anchorY = .5;
          o.x = o._offset.x - n + o.width * o.anchorX;
          o.y = o._offset.y + r - o.height * o.anchorY;
        }
      },
      _fillAniGrids: function (t, e) {
        for (var i in e) {
          var n = e[i];
          if (n) {
            var r = n.frames;
            for (var s = 0; s < r.length; s++) {
              var a = r[s];
              a.grid = t[a.tileid];
            }
          }
        }
      },
      _buildLayerAndGroup: function () {
        var t = this._tilesets;
        var e = this._texGrids;
        var i = this._animations;
        e.length = 0;
        var n = 0;
        for (var r = t.length; n < r; ++n) {
          var s = t[n];
          if (s) {
            cc.TiledMap.fillTextureGrids(s, e, n);
          }
        }
        this._fillAniGrids(e, i);
        var a = this._layers;
        var o = this._groups;
        var c = this._images;
        var l = {};
        var h = 0;
        for (var u = a.length; h < u; h++) {
          l[a[h].node._name] = true;
        }
        var f = 0;
        for (var d = o.length; f < d; f++) {
          l[o[f].node._name] = true;
        }
        var _ = 0;
        for (var p = c.length; _ < p; _++) {
          l[c[_]._name] = true;
        }
        a = this._layers = [];
        o = this._groups = [];
        c = this._images = [];
        var v = this._mapInfo;
        var g = this.node;
        var m = v.getAllChildren();
        var y = this._textures;
        var T = 0;
        var E = 0;
        if (m && m.length > 0) {
          var A = 0;
          for (var x = m.length; A < x; A++) {
            var C = m[A];
            var b = C.name;
            var S = this.node.getChildByName(b);
            l[b] = false;
            if (!S) {
              (S = new cc.Node()).name = b;
              g.addChild(S);
            }
            S.setSiblingIndex(A);
            S.active = C.visible;
            if (C instanceof cc.TMXLayerInfo) {
              var R = S.getComponent(cc.TiledLayer);
              if (!R) {
                R = S.addComponent(cc.TiledLayer);
              }
              R._init(C, v, t, y, e);
              C.ownTiles = false;
              a.push(R);
            } else if (C instanceof cc.TMXObjectGroupInfo) {
              var M = S.getComponent(cc.TiledObjectGroup);
              if (!M) {
                M = S.addComponent(cc.TiledObjectGroup);
              }
              M._init(C, v, e);
              o.push(M);
            } else if (C instanceof cc.TMXImageLayerInfo) {
              var w = C.sourceImage;
              S.opacity = C.opacity;
              S.layerInfo = C;
              S._offset = cc.v2(C.offset.x, -C.offset.y);
              var I = S.getComponent(cc.Sprite);
              if (!I) {
                I = S.addComponent(cc.Sprite);
              }
              var O = I.spriteFrame || new cc.SpriteFrame();
              O.setTexture(w);
              I.spriteFrame = O;
              S.width = w.width;
              S.height = w.height;
              c.push(S);
            }
            T = Math.max(T, S.width);
            E = Math.max(E, S.height);
          }
        }
        var L = g.children;
        var P = 0;
        for (var D = L.length; P < D; P++) {
          var N = L[P];
          if (l[N._name]) {
            N.destroy();
          }
        }
        this.node.width = T;
        this.node.height = E;
        this._syncAnchorPoint();
      },
      _buildWithMapInfo: function (t) {
        this._mapInfo = t;
        this._mapSize = t.getMapSize();
        this._tileSize = t.getTileSize();
        this._mapOrientation = t.orientation;
        this._properties = t.properties;
        this._tileProperties = t.getTileProperties();
        this._imageLayers = t.getImageLayers();
        this._animations = t.getTileAnimations();
        this._tilesets = t.getTilesets();
        var e = this._tilesets;
        this._textures.length = 0;
        var i = [];
        var n = 0;
        for (var r = e.length; n < r; ++n) {
          var s = e[n];
          if (s && s.sourceImage) {
            this._textures[n] = s.sourceImage;
            i.push(s.sourceImage);
          }
        }
        for (var a = 0; a < this._imageLayers.length; a++) {
          var o = this._imageLayers[a];
          if (o && o.sourceImage) {
            i.push(o.sourceImage);
          }
        }
        cc.TiledMap.loadAllTextures(i, function () {
          this._buildLayerAndGroup();
        }.bind(this));
      },
      update: function (t) {
        var e = this._animations;
        var i = this._texGrids;
        for (var n in e) {
          var r = e[n];
          var s = r.frames;
          var a = s[r.frameIdx];
          r.dt += t;
          if (a.duration < r.dt) {
            r.dt = 0;
            r.frameIdx++;
            if (r.frameIdx >= s.length) {
              r.frameIdx = 0;
            }
            a = s[r.frameIdx];
          }
          i[n] = a.grid;
        }
      }
    });
    cc.TiledMap = e.exports = l;
    cc.TiledMap.loadAllTextures = function (t, e) {
      var i = t.length;
      if (0 !== i) {
        var n = 0;
        var r = function () {
          if (++n >= i) {
            e();
          }
        };
        for (var s = 0; s < i; s++) {
          var a = t[s];
          if (a.loaded) {
            r();
          } else {
            a.once("load", function () {
              r();
            });
          }
        }
      } else {
        e();
      }
    };
    cc.TiledMap.fillTextureGrids = function (t, e, i) {
      var n = t.sourceImage;
      if (!(t.imageSize.width && t.imageSize.height)) {
        t.imageSize.width = n.width;
        t.imageSize.height = n.height;
      }
      var r = t._tileSize.width;
      var s = t._tileSize.height;
      var a = n.width;
      var o = n.height;
      var c = t.spacing;
      var l = t.margin;
      var h = Math.floor((a - 2 * l + c) / (r + c));
      var u = Math.floor((o - 2 * l + c) / (s + c)) * h;
      var f = t.firstGid;
      var d = null;
      var _ = !!e[f];
      var p = cc.macro.FIX_ARTIFACTS_BY_STRECHING_TEXEL_TMX ? .5 : 0;
      if (u <= 0) {
        u = 1;
      }
      for (var v = t.firstGid + u; f < v && (_ && !e[f] && (_ = false), _ || !e[f]); ++f) {
        d = {
          texId: i,
          tileset: t,
          x: 0,
          y: 0,
          width: r,
          height: s,
          t: 0,
          l: 0,
          r: 0,
          b: 0,
          gid: f
        };
        t.rectForGID(f, d);
        d.x += p;
        d.y += p;
        d.width -= 2 * p;
        d.height -= 2 * p;
        d.t = d.y / o;
        d.l = d.x / a;
        d.r = (d.x + d.width) / a;
        d.b = (d.y + d.height) / o;
        e[f] = d;
      }
    };
    cc.js.obsolete(cc.TiledMap.prototype, "cc.TiledMap.tmxFile", "tmxAsset", true);
    cc.js.get(cc.TiledMap.prototype, "mapLoaded", function () {
      return [];
    }, false);
  }, {
    "./CCTMXXMLParser": 306,
    "./CCTiledLayer": 307,
    "./CCTiledMapAsset": 309,
    "./CCTiledObjectGroup": 311,
    "./CCTiledTile": 312
  }],
  309: [function (t, e) {
    "use strict";

    var i = cc.Class({
      name: "cc.TiledMapAsset",
      extends: cc.Asset,
      properties: {
        tmxXmlStr: "",
        textures: {
          default: [],
          type: [cc.Texture2D]
        },
        textureNames: [cc.String],
        textureSizes: {
          default: [],
          type: [cc.Size]
        },
        imageLayerTextures: {
          default: [],
          type: [cc.Texture2D]
        },
        imageLayerTextureNames: [cc.String],
        tsxFiles: [cc.TextAsset],
        tsxFileNames: [cc.String]
      },
      statics: {
        preventDeferredLoadDependents: true
      },
      createNode: false
    });
    cc.TiledMapAsset = i;
    e.exports = i;
  }, {}],
  310: [function (t, e) {
    "use strict";

    var i;
    var n = (i = t("../renderer/core/input-assembler")) && i.__esModule ? i : {
      default: i
    };
    var r = cc.Class({
      name: "cc.TiledMapRenderDataList",
      ctor: function () {
        this._dataList = [];
        this._offset = 0;
      },
      _pushRenderData: function () {
        var t = {
          ia: new n.default(),
          nodesRenderList: []
        };
        this._dataList.push(t);
      },
      popRenderData: function (t) {
        if (this._offset >= this._dataList.length) {
          this._pushRenderData();
        }
        var e = this._dataList[this._offset];
        e.nodesRenderList.length = 0;
        var i = e.ia;
        i._vertexBuffer = t._vb;
        i._indexBuffer = t._ib;
        i._start = t.indiceOffset;
        i._count = 0;
        this._offset++;
        return e;
      },
      pushNodesList: function (t, e) {
        t.nodesRenderList.push(e);
      },
      reset: function () {
        this._offset = 0;
      }
    });
    cc.TiledMapRenderDataList = e.exports = r;
  }, {
    "../renderer/core/input-assembler": 272
  }],
  311: [function (t, e) {
    "use strict";

    var i = cc.Class({
      name: "cc.TiledObjectGroup",
      extends: cc.Component,
      getPositionOffset: function () {
        return this._positionOffset;
      },
      getProperties: function () {
        return this._properties;
      },
      getGroupName: function () {
        return this._groupName;
      },
      getProperty: function (t) {
        return this._properties[t.toString()];
      },
      getObject: function (t) {
        var e = 0;
        for (var i = this._objects.length; e < i; e++) {
          var n = this._objects[e];
          if (n && n.name === t) {
            return n;
          }
        }
        return null;
      },
      getObjects: function () {
        return this._objects;
      },
      _init: function (t, e, i) {
        var n = cc.TiledMap;
        var r = n.TMXObjectType;
        var s = n.Orientation;
        var a = n.StaggerAxis;
        var o = n.TileFlag;
        var c = o.FLIPPED_MASK;
        var l = o.HORIZONTAL;
        var h = o.VERTICAL;
        this._groupName = t.name;
        this._positionOffset = t.offset;
        this._mapInfo = e;
        this._properties = t.getProperties();
        this._offset = cc.v2(t.offset.x, -t.offset.y);
        this._opacity = t._opacity;
        var u = e._mapSize;
        var f = e._tileSize;
        var d = 0;
        var _ = 0;
        if (e.orientation === s.HEX) {
          if (e.getStaggerAxis() === a.STAGGERAXIS_X) {
            _ = f.height * (u.height + .5);
            d = (f.width + e.getHexSideLength()) * Math.floor(u.width / 2) + f.width * (u.width % 2);
          } else {
            d = f.width * (u.width + .5);
            _ = (f.height + e.getHexSideLength()) * Math.floor(u.height / 2) + f.height * (u.height % 2);
          }
        } else if (e.orientation === s.ISO) {
          var p = u.width + u.height;
          d = .5 * f.width * p;
          _ = .5 * f.height * p;
        } else {
          d = u.width * f.width;
          _ = u.height * f.height;
        }
        this.node.setContentSize(d, _);
        var v = d * this.node.anchorX;
        var g = _ * (1 - this.node.anchorY);
        var m = t._objects;
        var y = {};
        var T = 0;
        for (var E = m.length; T < E; T++) {
          var A = m[T];
          var x = A.type;
          A.offset = cc.v2(A.x, A.y);
          var C = A.points || A.polylinePoints;
          if (C) {
            for (var b = 0; b < C.length; b++) {
              C[b].y *= -1;
            }
          }
          if (s.ISO !== e.orientation) {
            A.y = _ - A.y;
          } else {
            var S = A.x / f.height;
            var R = A.y / f.height;
            A.x = .5 * f.width * (u.height + S - R);
            A.y = .5 * f.height * (u.width + u.height - S - R);
          }
          if (x === r.TEXT) {
            var M = "text" + A.id;
            y[M] = true;
            var w = this.node.getChildByName(M);
            if (!w) {
              w = new cc.Node();
            }
            w.active = A.visible;
            w.anchorX = 0;
            w.anchorY = 1;
            w.angle = -A.rotation;
            w.x = A.x - v;
            w.y = A.y - g;
            w.name = M;
            w.parent = this.node;
            w.color = A.color;
            w.opacity = this._opacity;
            w.setSiblingIndex(T);
            var I = w.getComponent(cc.Label);
            if (!I) {
              I = w.addComponent(cc.Label);
            }
            I.overflow = cc.Label.Overflow.SHRINK;
            I.lineHeight = A.height;
            I.string = A.text;
            I.horizontalAlign = A.halign;
            I.verticalAlign = A.valign;
            I.fontSize = A.pixelsize;
            w.width = A.width;
            w.height = A.height;
          }
          if (x === r.IMAGE) {
            var O = A.gid;
            var L = i[(O & c) >>> 0];
            if (!L) {
              continue;
            }
            var P = L.tileset;
            var D = "img" + A.id;
            y[D] = true;
            var N = this.node.getChildByName(D);
            var F = A.width || L.width;
            var B = A.height || L.height;
            var V = P.tileOffset.x;
            var k = P.tileOffset.y;
            if (N instanceof cc.PrivateNode) {
              N.removeFromParent();
              N.destroy();
              N = null;
            }
            if (!N) {
              N = new cc.Node();
            }
            if (s.ISO == e.orientation) {
              N.anchorX = .5 + V / F;
              N.anchorY = k / B;
            } else {
              N.anchorX = V / F;
              N.anchorY = k / B;
            }
            N.active = A.visible;
            N.angle = -A.rotation;
            N.x = A.x - v;
            N.y = A.y - g;
            N.name = D;
            N.parent = this.node;
            N.opacity = this._opacity;
            N.setSiblingIndex(T);
            var U = N.getComponent(cc.Sprite);
            if (!U) {
              U = N.addComponent(cc.Sprite);
            }
            var z = U.spriteFrame;
            if (!z) {
              z = new cc.SpriteFrame();
            }
            if ((O & l) >>> 0) {
              z.setFlipX(true);
            } else {
              z.setFlipX(false);
            }
            if ((O & h) >>> 0) {
              z.setFlipY(true);
            } else {
              z.setFlipY(false);
            }
            z.setTexture(L.tileset.sourceImage, cc.rect(L));
            U.spriteFrame = z;
            U.setVertsDirty();
            N.width = F;
            N.height = B;
          }
        }
        this._objects = m;
        var G = this.node.children;
        var H = /^(?:img|text)\d+$/;
        var W = 0;
        for (var X = G.length; W < X; W++) {
          var Y = G[W];
          var j = Y._name;
          if (H.test(j) && !y[j]) {
            Y.destroy();
          }
        }
      }
    });
    cc.TiledObjectGroup = e.exports = i;
  }, {}],
  312: [function (t, e) {
    "use strict";

    var i = cc.Class({
      name: "cc.TiledTile",
      extends: cc.Component,
      editor: false,
      ctor: function () {
        this._layer = null;
      },
      properties: {
        _x: 0,
        _y: 0,
        x: {
          get: function () {
            return this._x;
          },
          set: function (t) {
            if (t !== this._x) {
              if (!(this._layer && this._layer._isInvalidPosition(t, this._y))) {
                this._resetTile();
                this._x = t;
                this._updateInfo();
              }
            }
          },
          type: cc.Integer
        },
        y: {
          get: function () {
            return this._y;
          },
          set: function (t) {
            if (t !== this._y) {
              if (!(this._layer && this._layer._isInvalidPosition(this._x, t))) {
                this._resetTile();
                this._y = t;
                this._updateInfo();
              }
            }
          },
          type: cc.Integer
        },
        gid: {
          get: function () {
            return this._layer ? this._layer.getTileGIDAt(this._x, this._y) : 0;
          },
          set: function (t) {
            if (this._layer) {
              this._layer.setTileGIDAt(t, this._x, this._y);
            }
          },
          type: cc.Integer
        }
      },
      onEnable: function () {
        var t = this.node.parent;
        this._layer = t.getComponent(cc.TiledLayer);
        this._resetTile();
        this._updateInfo();
      },
      onDisable: function () {
        this._resetTile();
      },
      _resetTile: function () {
        if (this._layer && this._layer.getTiledTileAt(this._x, this._y) === this) {
          this._layer.setTiledTileAt(this._x, this._y, null);
        }
      },
      _updateInfo: function () {
        if (this._layer) {
          var t = this._x;
          var e = this._y;
          if (!this._layer.getTiledTileAt(t, e)) {
            this.node.setPosition(this._layer.getPositionAt(t, e));
            this._layer.setTiledTileAt(t, e, this);
          }
        }
      }
    });
    cc.TiledTile = e.exports = i;
  }, {}],
  313: [function (t) {
    "use strict";

    t("./CCTiledMap");
    t("./CCTiledMapRenderDataList");
    t("./tiledmap-buffer");
    t("./tmx-layer-assembler");
  }, {
    "./CCTiledMap": 308,
    "./CCTiledMapRenderDataList": 310,
    "./tiledmap-buffer": 314,
    "./tmx-layer-assembler": 315
  }],
  314: [function (t, e) {
    "use strict";

    var i = cc.Class({
      name: "cc.TiledMapBuffer",
      extends: t("../core/renderer/webgl/quad-buffer"),
      _updateOffset: function () {
        var t = this._offsetInfo;
        t.vertexOffset = this.vertexOffset;
        t.indiceOffset = this.indiceOffset;
        t.byteOffset = this.byteOffset;
      },
      adjust: function (t, e) {
        this.vertexOffset += t;
        this.indiceOffset += e;
        this.indiceStart = this.indiceOffset;
        this.byteOffset = this.byteOffset + t * this._vertexBytes;
        this._dirty = true;
      }
    });
    cc.TiledMapBuffer = e.exports = i;
  }, {
    "../core/renderer/webgl/quad-buffer": 222
  }],
  315: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n;
    var r = (n = t("../core/renderer/assembler")) && n.__esModule ? n : {
      default: n
    };
    var s = t("../core/value-types");
    function a(t, e) {
      return (a = Object.setPrototypeOf || function (t, e) {
        t.__proto__ = e;
        return t;
      })(t, e);
    }
    var o = t("./CCTiledLayer");
    var c = t("./CCTiledMap");
    var l = c.TileFlag;
    var h = l.FLIPPED_MASK;
    var u = t("../core/renderer/");
    var f = t("../core/renderer/webgl/vertex-format").vfmtPosUvColor;
    var d = parseInt(10922.5);
    var _ = c.RenderOrder;
    var p = t("../core/renderer/render-flow");
    var v = cc.mat4();
    var g = cc.v3();
    var m = {
      row: 0,
      col: 0
    };
    var y = {
      x: 0,
      y: 0
    };
    var T = {
      x: 0,
      y: 0
    };
    var E = {
      x: 0,
      y: 0
    };
    var A = {
      x: 0,
      y: 0
    };
    var x = null;
    var C = null;
    var b = 0;
    var S = 0;
    var R = 0;
    var M = 0;
    var w = null;
    var I = null;
    var O = null;
    var L = null;
    var P = null;
    var D = null;
    var N = null;
    var F = null;
    function B(t) {
      t._updateLocalMatrix();
      s.Mat4.mul(t._worldMatrix, w, t._matrix);
      t._renderFlag &= ~(p.FLAG_TRANSFORM | p.FLAG_BREAK_FLOW);
      p.visitRootNode(t);
      t._renderFlag |= p.FLAG_BREAK_FLOW;
    }
    function V() {
      if (0 !== C._count) {
        I.material = x.material;
        I.node = D.node;
        I._flushIA(x.ia);
        if (b >= d) {
          L.uploadData();
          L.switchBuffer();
          N = L._vData;
          F = L._uintVData;
          x = O.popRenderData(L);
          C = x.ia;
          S = 0;
          b = 0;
        } else {
          x = O.popRenderData(L);
          C = x.ia;
        }
        x.material = P;
      }
    }
    function k(t, e) {
      var i = D._getNodesByRowCol(t, e);
      if (i && 0 != i.count) {
        var n = i.list;
        var r = 0;
        var s = 0;
        V();
        for (I.worldMatDirty++; r < i.count;) {
          var a = n[s];
          s++;
          if (a) {
            B(a.node);
            if (r !== s) {
              n[r] = a;
              a._index = r;
            }
            r++;
          }
        }
        n.length = r;
        I.worldMatDirty--;
        O.pushNodesList(x, n);
        I._flush();
        I.node = D.node;
      }
    }
    function U(t, e) {
      y.x = t.l;
      y.y = t.t;
      T.x = t.r;
      T.y = t.t;
      E.x = t.l;
      E.y = t.b;
      A.x = t.r;
      A.y = t.b;
      var i = null;
      if ((e & l.DIAGONAL) >>> 0) {
        i = T;
        T = E;
        E = i;
      }
      if ((e & l.HORIZONTAL) >>> 0) {
        i = y;
        y = T;
        T = i;
        i = E;
        E = A;
        A = i;
      }
      if ((e & l.VERTICAL) >>> 0) {
        i = y;
        y = E;
        E = i;
        i = T;
        T = A;
        A = i;
      }
    }
    var z = function (t) {
      function n() {
        return t.apply(this, arguments) || this;
      }
      n.prototype = Object.create(t.prototype);
      n.prototype.constructor = n;
      a(n, t);
      var r = n.prototype;
      r.updateRenderData = function (t) {
        if (!t._renderDataList) {
          t._buffer = new cc.TiledMapBuffer(u._handle, f);
          t._renderDataList = new cc.TiledMapRenderDataList();
        }
      };
      r.fillBuffers = function (t, e) {
        if (0 !== t._vertices.length) {
          t._updateCulling();
          var i = t.node;
          R = t._leftDownToCenterX;
          M = t._leftDownToCenterY;
          w = i._worldMatrix;
          I = e;
          D = t;
          O = t._renderDataList;
          L = t._buffer;
          if (t._isCullingDirty() || t._isUserNodeDirty() || t._hasAnimation() || t._hasTiledNode()) {
            var n;
            var r;
            L.reset();
            if (t._enableCulling) {
              var s = t._cullingRect;
              n = s.leftDown;
              r = s.rightTop;
            } else {
              n = m;
              r = t._rightTop;
            }
            var a = (r.row - n.row + 1) * (r.col - n.col + 1);
            if (a > d) {
              a = d;
            }
            L.request(4 * a, 6 * a);
            switch (t._renderOrder) {
              case _.RightDown:
                this.traverseGrids(n, r, -1, 1);
                break;
              case _.LeftDown:
                this.traverseGrids(n, r, -1, -1);
                break;
              case _.RightUp:
                this.traverseGrids(n, r, 1, 1);
                break;
              case _.LeftUp:
                this.traverseGrids(n, r, 1, -1);
            }
            t._setCullingDirty(false);
            t._setUserNodeDirty(false);
          } else {
            var o = null;
            var c = null;
            var l = null;
            for (var h = 0; h < O._offset; h++) {
              if ((c = (o = O._dataList[h]).nodesRenderList).length > 0) {
                e.worldMatDirty++;
                for (var u = 0; u < c.length; u++) {
                  if (l = c[u]) {
                    for (var f = 0; f < l.length; f++) {
                      var p = l[f];
                      if (p) {
                        B(p.node);
                      }
                    }
                  }
                }
                e.worldMatDirty--;
                e._flush();
              }
              if (o.ia._count > 0) {
                e.material = o.material;
                e.node = i;
                e._flushIA(o.ia);
              }
            }
          }
          x = null;
          C = null;
          w = null;
          I = null;
          O = null;
          L = null;
          P = null;
          D = null;
          N = null;
          F = null;
        }
      };
      r.traverseGrids = function (t, e, i, n) {
        O.reset();
        if (!(e.row < 0 || e.col < 0)) {
          x = O.popRenderData(L);
          C = x.ia;
          N = L._vData;
          F = L._uintVData;
          b = 0;
          S = 0;
          P = null;
          var r = D.node;
          var s = (r.parent ? r.parent._opacity / 255 : 1) * r._opacity;
          r._color._fastSetA(s);
          var a;
          var o;
          var c;
          var l;
          var u;
          var f;
          var _;
          var p;
          var v = r._color._val;
          var g = D._tiledTiles;
          var m = D._texGrids;
          var w = D._tiles;
          var B = D._texIdToMatIndex;
          var z = D._materials;
          var G = D._vertices;
          var H = null;
          var W = 0;
          var X = 0;
          var Y = 0;
          var j = 0;
          var q = 0;
          var Z = null;
          var K = -1;
          var Q = 0;
          var J = true;
          for (-1 == i ? (l = e.row, u = t.row) : (l = t.row, u = e.row); (u - l) * i >= 0; l += i) {
            a = G[l];
            J = 0 == (Q = D._getNodesCountByRow(l)) && null != a;
            for (1 == n ? (o = J && t.col < a.minCol ? a.minCol : t.col, c = J && e.col > a.maxCol ? a.maxCol : e.col) : (o = J && e.col > a.maxCol ? a.maxCol : e.col, c = J && t.col < a.minCol ? a.minCol : t.col); (c - o) * n >= 0; o += n) {
              if (f = a && a[o]) {
                if (H = m[((W = w[f.index]) & h) >>> 0]) {
                  if (K !== H.texId) {
                    if (-1 !== K) {
                      V();
                    }
                    p = B[K = H.texId];
                    P = z[p];
                    x.material = P;
                  }
                  if (P) {
                    X = f.left - R;
                    Y = f.bottom - M;
                    j = X + (_ = H.tileset._tileSize).width;
                    q = Y + _.height;
                    if (Z = g[f.index]) {
                      if (Z.node.active) {
                        Z.node._color._fastSetA(Z.node._opacity * s / 255);
                        this.fillByTiledNode(Z.node, N, F, X, j, q, Y);
                      }
                    } else {
                      N[S] = X;
                      N[S + 1] = q;
                      F[S + 4] = v;
                      N[S + 5] = X;
                      N[S + 6] = Y;
                      F[S + 9] = v;
                      N[S + 10] = j;
                      N[S + 11] = q;
                      F[S + 14] = v;
                      N[S + 15] = j;
                      N[S + 16] = Y;
                      F[S + 19] = v;
                    }
                    U(H, W);
                    N[S + 2] = y.x;
                    N[S + 3] = y.y;
                    N[S + 7] = E.x;
                    N[S + 8] = E.y;
                    N[S + 12] = T.x;
                    N[S + 13] = T.y;
                    N[S + 17] = A.x;
                    N[S + 18] = A.y;
                    S += 20;
                    L.adjust(4, 6);
                    C._count += 6;
                    b++;
                    if (Q > 0) {
                      k(l, o);
                    }
                    if (b >= d) {
                      V();
                    }
                  }
                }
              } else if (Q > 0) {
                k(l, o);
              }
            }
          }
          L.uploadData();
          if (C._count > 0) {
            I.material = x.material;
            I.node = D.node;
            I._flushIA(x.ia);
          }
        }
      };
      r.fillByTiledNode = function (t, e, i, n, r, a, o) {
        t._updateLocalMatrix();
        s.Mat4.copy(v, t._matrix);
        s.Vec3.set(g, -(n + R), -(o + M), 0);
        s.Mat4.transform(v, v, g);
        var c = v.m;
        var l = c[0];
        var h = c[1];
        var u = c[4];
        var f = c[5];
        var d = c[12];
        var _ = c[13];
        var p = t._color._val;
        e[S] = n * l + a * u + d;
        e[S + 1] = n * h + a * f + _;
        i[S + 4] = p;
        e[S + 5] = n * l + o * u + d;
        e[S + 6] = n * h + o * f + _;
        i[S + 9] = p;
        e[S + 10] = r * l + a * u + d;
        e[S + 11] = r * h + a * f + _;
        i[S + 14] = p;
        e[S + 15] = r * l + o * u + d;
        e[S + 16] = r * h + o * f + _;
        i[S + 19] = p;
      };
      return n;
    }(r.default);
    i.default = z;
    r.default.register(o, z);
    e.exports = i.default;
  }, {
    "../core/renderer/": 193,
    "../core/renderer/assembler": 190,
    "../core/renderer/render-flow": 194,
    "../core/renderer/webgl/vertex-format": 225,
    "../core/value-types": 251,
    "./CCTiledLayer": 307,
    "./CCTiledMap": 308
  }],
  316: [function (t) {
    "use strict";

    t("./cocos2d/core");
    t("./cocos2d/animation");
    t("./cocos2d/particle");
    t("./cocos2d/tilemap");
    t("./cocos2d/videoplayer/CCVideoPlayer");
    t("./cocos2d/webview/CCWebView");
    t("./cocos2d/core/components/CCStudioComponent");
    t("./extensions/ccpool/CCNodePool");
    t("./cocos2d/actions");
    t("./extensions/spine");
    t("./extensions/dragonbones");
    t("./cocos2d/deprecated");
  }, {
    "./cocos2d/actions": 7,
    "./cocos2d/animation": 16,
    "./cocos2d/core": 155,
    "./cocos2d/core/components/CCStudioComponent": undefined,
    "./cocos2d/deprecated": 263,
    "./cocos2d/particle": 267,
    "./cocos2d/particle/CCParticleAsset": 265,
    "./cocos2d/tilemap": 313,
    "./cocos2d/tilemap/CCTiledMapAsset": 309,
    "./cocos2d/videoplayer/CCVideoPlayer": undefined,
    "./cocos2d/webview/CCWebView": undefined,
    "./extensions/ccpool/CCNodePool": 317,
    "./extensions/dragonbones": undefined,
    "./extensions/spine": 320
  }],
  317: [function (t, e) {
    "use strict";

    cc.NodePool = function (t) {
      this.poolHandlerComp = t;
      this._pool = [];
    };
    cc.NodePool.prototype = {
      constructor: cc.NodePool,
      size: function () {
        return this._pool.length;
      },
      clear: function () {
        var t = this._pool.length;
        for (var e = 0; e < t; ++e) {
          this._pool[e].destroy();
        }
        this._pool.length = 0;
      },
      put: function (t) {
        if (t && -1 === this._pool.indexOf(t)) {
          t.removeFromParent(false);
          var e = this.poolHandlerComp ? t.getComponent(this.poolHandlerComp) : null;
          if (e && e.unuse) {
            e.unuse();
          }
          this._pool.push(t);
        }
      },
      get: function () {
        var t = this._pool.length - 1;
        if (t < 0) {
          return null;
        }
        var e = this._pool[t];
        this._pool.length = t;
        var i = this.poolHandlerComp ? e.getComponent(this.poolHandlerComp) : null;
        if (i && i.reuse) {
          i.reuse.apply(i, arguments);
        }
        return e;
      }
    };
    e.exports = cc.NodePool;
  }, {}],
  318: [function (t, e) {
    "use strict";

    var i;
    var n = (i = t("../../cocos2d/core/value-types/mat4")) && i.__esModule ? i : {
      default: i
    };
    var r = t("../../cocos2d/core/renderer/render-flow").FLAG_TRANSFORM;
    var s = function () {};
    var a = function (t) {
      Object.defineProperty(t, "_worldMatDirty", {
        get: function () {
          return true;
        },
        set: function () {}
      });
      t._calculWorldMatrix = s;
      t._mulMat = s;
    };
    var o = new n.default();
    var c = cc.Class({
      name: "sp.AttachUtil",
      ctor: function () {
        this._inited = false;
        this._skeleton = null;
        this._skeletonNode = null;
        this._skeletonComp = null;
        this._attachedRootNode = null;
        this._attachedNodeArray = [];
        this._boneIndexToNode = {};
      },
      init: function (t) {
        this._inited = true;
        this._skeleton = t._skeleton;
        this._skeletonNode = t.node;
        this._skeletonComp = t;
      },
      reset: function () {
        this._inited = false;
        this._skeleton = null;
        this._skeletonNode = null;
        this._skeletonComp = null;
      },
      _prepareAttachNode: function () {
        if (this._skeleton) {
          var t = this._skeletonNode.getChildByName("ATTACHED_NODE_TREE");
          if (!(t && t.isValid)) {
            t = new cc.Node("ATTACHED_NODE_TREE");
            a(t);
            this._skeletonNode.addChild(t);
          }
          if (this._skeletonComp.isAnimationCached() && this._skeletonComp._frameCache) {
            this._skeletonComp._frameCache.enableCacheAttachedInfo();
          }
          this._attachedRootNode = t;
          return t;
        }
      },
      _buildBoneAttachedNode: function (t, e) {
        var i = "ATTACHED_NODE:" + t.data.name;
        var n = new cc.Node(i);
        this._buildBoneRelation(n, t, e);
        return n;
      },
      _buildBoneRelation: function (t, e, i) {
        a(t);
        t._bone = e;
        t._boneIndex = i;
        this._attachedNodeArray.push(t);
        this._boneIndexToNode[i] = t;
      },
      getAttachedRootNode: function () {
        return this._attachedRootNode;
      },
      getAttachedNodes: function (t) {
        var e = this._attachedNodeArray;
        var i = [];
        if (!this._inited) {
          return i;
        }
        var n = 0;
        for (var r = e.length; n < r; n++) {
          var s = e[n];
          if (s && s.isValid && s.name === "ATTACHED_NODE:" + t) {
            i.push(s);
          }
        }
        return i;
      },
      _rebuildNodeArray: function () {
        var t = this._boneIndexToNode = {};
        var e = this._attachedNodeArray;
        var i = this._attachedNodeArray = [];
        var n = 0;
        for (var r = e.length; n < r; n++) {
          var s = e[n];
          if (s && s.isValid && !s._toRemove) {
            i.push(s);
            t[s._boneIndex] = s;
          }
        }
      },
      _sortNodeArray: function () {
        this._attachedNodeArray.sort(function (t, e) {
          return t._boneIndex < e._boneIndex ? -1 : 1;
        });
      },
      _getNodeByBoneIndex: function (t) {
        var e = this._boneIndexToNode[t];
        return e && e.isValid ? e : null;
      },
      destroyAttachedNodes: function (t) {
        if (this._inited) {
          var e = this._attachedNodeArray;
          var i = function t(e) {
            var i = e.children;
            var n = 0;
            for (var r = i.length; n < r; n++) {
              var s = i[n];
              if (s) {
                t(s);
              }
            }
            e._toRemove = true;
          };
          var n = 0;
          for (var r = e.length; n < r; n++) {
            var s = e[n];
            if (s && s.isValid && s.name.split("ATTACHED_NODE:")[1] === t) {
              i(s);
              s.removeFromParent(true);
              s.destroy();
              e[n] = null;
            }
          }
          this._rebuildNodeArray();
        }
      },
      generateAttachedNodes: function (t) {
        var e = [];
        if (!this._inited) {
          return e;
        }
        var i = this._prepareAttachNode();
        if (!i) {
          return e;
        }
        var n = [];
        var r = this._skeleton.bones;
        var s = 0;
        for (var a = r.length; s < a; s++) {
          var o = r[s];
          if (o.data.name == t) {
            n.push(o);
          }
        }
        var c = function (t) {
          if (t) {
            var e = t.data;
            var n = this._getNodeByBoneIndex(e.index);
            if (n) {
              return n;
            }
            n = this._buildBoneAttachedNode(t, e.index);
            var r = c(t.parent) || i;
            n.parent = r;
            return n;
          }
        }.bind(this);
        var l = 0;
        for (var h = n.length; l < h; l++) {
          var u = c(n[l]);
          e.push(u);
        }
        this._sortNodeArray();
        return e;
      },
      destroyAllAttachedNodes: function () {
        this._attachedRootNode = null;
        this._attachedNodeArray.length = 0;
        this._boneIndexToNode = {};
        if (this._inited) {
          var t = this._skeletonNode.getChildByName("ATTACHED_NODE_TREE");
          if (t) {
            t.removeFromParent(true);
            t.destroy();
            t = null;
          }
        }
      },
      generateAllAttachedNodes: function () {
        if (this._inited) {
          this._boneIndexToNode = {};
          this._attachedNodeArray.length = 0;
          var t = this._prepareAttachNode();
          if (t) {
            var e = this._skeleton.bones;
            var i = 0;
            for (var n = e.length; i < n; i++) {
              var r = e[i];
              var s = r.data;
              var a = null;
              if (r.parent) {
                var o = r.parent.data.index;
                a = this._boneIndexToNode[o];
              } else {
                a = t;
              }
              if (a) {
                var c = a.getChildByName("ATTACHED_NODE:" + s.name);
                if (c && c.isValid) {
                  this._buildBoneRelation(c, r, s.index);
                } else {
                  c = this._buildBoneAttachedNode(r, s.index);
                  a.addChild(c);
                }
              }
            }
            return t;
          }
        }
      },
      _hasAttachedNode: function () {
        return !!this._inited && !!this._skeletonNode.getChildByName("ATTACHED_NODE_TREE");
      },
      _associateAttachedNode: function () {
        if (this._inited) {
          var t = this._skeletonNode.getChildByName("ATTACHED_NODE_TREE");
          if (t && t.isValid) {
            this._attachedRootNode = t;
            this._boneIndexToNode = {};
            this._attachedNodeArray.length = 0;
            a(t);
            if (this._skeletonComp.isAnimationCached() && this._skeletonComp._frameCache) {
              this._skeletonComp._frameCache.enableCacheAttachedInfo();
            }
            var e = this._skeleton.bones;
            var i = 0;
            for (var n = e.length; i < n; i++) {
              var r = e[i];
              var s = r.data;
              var o = null;
              if (r.parent) {
                var c = r.parent.data.index;
                o = this._boneIndexToNode[c];
              } else {
                o = t;
              }
              if (o) {
                var l = o.getChildByName("ATTACHED_NODE:" + s.name);
                if (l && l.isValid) {
                  this._buildBoneRelation(l, r, s.index);
                }
              }
            }
          }
        }
      },
      _syncAttachedNode: function () {
        if (this._inited) {
          var t = this._attachedRootNode;
          var e = this._attachedNodeArray;
          if (!t || !t.isValid) {
            this._attachedRootNode = null;
            return void (e.length = 0);
          }
          var i = this._skeletonNode._worldMatrix;
          n.default.copy(t._worldMatrix, i);
          t._renderFlag &= ~r;
          var s;
          if (s = this._skeletonComp.isAnimationCached() ? this._skeletonComp._curFrame && this._skeletonComp._curFrame.boneInfos : this._skeleton.bones) {
            var a = this._skeletonNode._mulMat;
            var c = function (t, e, i) {
              var n = o.m;
              n[0] = i.a;
              n[1] = i.c;
              n[4] = i.b;
              n[5] = i.d;
              n[12] = i.worldX;
              n[13] = i.worldY;
              a(t, e, o);
            };
            var l = false;
            var h = 0;
            for (var u = e.length; h < u; h++) {
              var f = e[h];
              if (f && f.isValid) {
                var d = s[f._boneIndex];
                if (d) {
                  c(f._worldMatrix, t._worldMatrix, d);
                  f._renderFlag &= ~r;
                } else {
                  f.removeFromParent(true);
                  f.destroy();
                  e[h] = null;
                  l = true;
                }
              } else {
                e[h] = null;
                l = true;
              }
            }
            if (l) {
              this._rebuildNodeArray();
            }
          }
        }
      }
    });
    e.exports = sp.AttachUtil = c;
  }, {
    "../../cocos2d/core/renderer/render-flow": 194,
    "../../cocos2d/core/value-types/mat4": 253
  }],
  319: [function (t, e) {
    "use strict";

    var i = t("./track-entry-listeners");
    var n = t("../../cocos2d/core/components/CCRenderComponent");
    var r = t("./lib/spine");
    var s = t("../../cocos2d/core/graphics/graphics");
    var a = t("../../cocos2d/core/renderer/render-flow").FLAG_POST_RENDER;
    var o = t("./skeleton-cache");
    var c = t("./AttachUtil");
    var l = cc.Enum({
      default: -1
    });
    var h = cc.Enum({
      "<None>": 0
    });
    var u = cc.Enum({
      REALTIME: 0,
      SHARED_CACHE: 1,
      PRIVATE_CACHE: 2
    });
    sp.Skeleton = cc.Class({
      name: "sp.Skeleton",
      extends: n,
      editor: false,
      statics: {
        AnimationCacheMode: u
      },
      properties: {
        paused: {
          default: false,
          visible: false
        },
        skeletonData: {
          default: null,
          type: sp.SkeletonData,
          notify: function () {
            this.defaultSkin = "";
            this.defaultAnimation = "";
            this._updateSkeletonData();
          },
          tooltip: false
        },
        defaultSkin: {
          default: "",
          visible: false
        },
        defaultAnimation: {
          default: "",
          visible: false
        },
        animation: {
          get: function () {
            if (this.isAnimationCached()) {
              return this._animationName;
            }
            var t = this.getCurrent(0);
            return t && t.animation.name || "";
          },
          set: function (t) {
            this.defaultAnimation = t;
            if (t) {
              this.setAnimation(0, t, this.loop);
            } else if (!this.isAnimationCached()) {
              this.clearTrack(0);
              this.setToSetupPose();
            }
          },
          visible: false
        },
        _defaultSkinIndex: {
          get: function () {
            if (this.skeletonData) {
              var t = this.skeletonData.getSkinsEnum();
              if (t) {
                if ("" === this.defaultSkin) {
                  if (t.hasOwnProperty(0)) {
                    this._defaultSkinIndex = 0;
                    return 0;
                  }
                } else {
                  var e = t[this.defaultSkin];
                  if (undefined !== e) {
                    return e;
                  }
                }
              }
            }
            return 0;
          },
          set: function (t) {
            var e;
            if (this.skeletonData) {
              e = this.skeletonData.getSkinsEnum();
            }
            if (e) {
              var i = e[t];
              if (undefined !== i) {
                this.defaultSkin = i;
                this.setSkin(this.defaultSkin);
              }
            }
          },
          type: l,
          visible: true,
          animatable: false,
          displayName: "Default Skin",
          tooltip: false
        },
        _animationIndex: {
          get: function () {
            var t = this.animation;
            if (this.skeletonData && t) {
              var e = this.skeletonData.getAnimsEnum();
              if (e) {
                var i = e[t];
                if (undefined !== i) {
                  return i;
                }
              }
            }
            return 0;
          },
          set: function (t) {
            var e;
            if (0 !== t) {
              if (this.skeletonData) {
                e = this.skeletonData.getAnimsEnum();
              }
              if (e) {
                var i = e[t];
                if (undefined !== i) {
                  this.animation = i;
                }
              }
            } else {
              this.animation = "";
            }
          },
          type: h,
          visible: true,
          animatable: false,
          displayName: "Animation",
          tooltip: false
        },
        _preCacheMode: -1,
        _cacheMode: u.REALTIME,
        _defaultCacheMode: {
          default: 0,
          type: u,
          notify: function () {
            this.setAnimationCacheMode(this._defaultCacheMode);
          },
          editorOnly: true,
          visible: true,
          animatable: false,
          displayName: "Animation Cache Mode",
          tooltip: false
        },
        loop: {
          default: true,
          tooltip: false
        },
        premultipliedAlpha: {
          default: true,
          tooltip: false
        },
        timeScale: {
          default: 1,
          tooltip: false
        },
        debugSlots: {
          default: false,
          editorOnly: true,
          tooltip: false,
          notify: function () {
            this._updateDebugDraw();
          }
        },
        debugBones: {
          default: false,
          editorOnly: true,
          tooltip: false,
          notify: function () {
            this._updateDebugDraw();
          }
        },
        debugMesh: {
          default: false,
          editorOnly: true,
          tooltip: false,
          notify: function () {
            this._updateDebugDraw();
          }
        },
        useTint: {
          default: false,
          tooltip: false,
          notify: function () {
            this._updateUseTint();
          }
        },
        enableBatch: {
          default: false,
          notify: function () {
            this._updateBatch();
          },
          tooltip: false
        },
        _accTime: 0,
        _playCount: 0,
        _frameCache: null,
        _curFrame: null,
        _skeletonCache: null,
        _animationName: "",
        _animationQueue: [],
        _headAniInfo: null,
        _playTimes: 0,
        _isAniComplete: true
      },
      ctor: function () {
        this._effectDelegate = null;
        this._skeleton = null;
        this._rootBone = null;
        this._listener = null;
        this._materialCache = {};
        this._debugRenderer = null;
        this._startSlotIndex = -1;
        this._endSlotIndex = -1;
        this._startEntry = {
          animation: {
            name: ""
          },
          trackIndex: 0
        };
        this._endEntry = {
          animation: {
            name: ""
          },
          trackIndex: 0
        };
        this.attachUtil = new c();
      },
      _getDefaultMaterial: function () {
        return cc.Material.getBuiltinMaterial("2d-spine");
      },
      _updateMaterial: function () {
        var t = this.useTint || this.isAnimationCached() && true;
        var e = this.getMaterial(0);
        if (e) {
          e.define("USE_TINT", t);
          e.define("CC_USE_MODEL", !this.enableBatch);
          var i = this.premultipliedAlpha ? cc.gfx.BLEND_ONE : cc.gfx.BLEND_SRC_ALPHA;
          var n = cc.gfx.BLEND_ONE_MINUS_SRC_ALPHA;
          e.setBlend(true, cc.gfx.BLEND_FUNC_ADD, i, i, cc.gfx.BLEND_FUNC_ADD, n, n);
        }
        this._materialCache = {};
      },
      disableRender: function () {
        this._super();
        this.node._renderFlag &= ~a;
      },
      markForRender: function (t) {
        this._super(t);
        if (t) {
          this.node._renderFlag |= a;
        } else {
          this.node._renderFlag &= ~a;
        }
      },
      _updateUseTint: function () {
        var t = this.getMaterial(0);
        if (t) {
          var e = this.useTint || this.isAnimationCached() && true;
          t.define("USE_TINT", e);
        }
        this._materialCache = {};
      },
      _updateBatch: function () {
        var t = this.getMaterial(0);
        if (t) {
          t.define("CC_USE_MODEL", !this.enableBatch);
        }
        this._materialCache = {};
      },
      _validateRender: function () {
        var t = this.skeletonData;
        if (t && t.isTexturesLoaded()) {
          this._super();
        } else {
          this.disableRender();
        }
      },
      setSkeletonData: function (t) {
        if (null != t.width && null != t.height) {
          this.node.setContentSize(t.width, t.height);
        }
        if (this._cacheMode === u.SHARED_CACHE) {
          this._skeletonCache = o.sharedCache;
        } else if (this._cacheMode === u.PRIVATE_CACHE) {
          this._skeletonCache = new o();
          this._skeletonCache.enablePrivateMode();
        }
        if (this.isAnimationCached()) {
          if (!this.debugBones) {
            this.debugSlots;
          }
          var e = this._skeletonCache.getSkeletonCache(this.skeletonData._uuid, t);
          this._skeleton = e.skeleton;
          this._clipper = e.clipper;
          this._rootBone = this._skeleton.getRootBone();
        } else {
          this._skeleton = new r.Skeleton(t);
          this._clipper = new r.SkeletonClipping();
          this._rootBone = this._skeleton.getRootBone();
        }
        this.markForRender(true);
      },
      setSlotsRange: function (t, e) {
        if (!this.isAnimationCached()) {
          this._startSlotIndex = t;
          this._endSlotIndex = e;
        }
      },
      setAnimationStateData: function (t) {
        if (this.isAnimationCached()) {
          ;
        } else {
          var e = new r.AnimationState(t);
          if (this._listener) {
            if (this._state) {
              this._state.removeListener(this._listener);
            }
            e.addListener(this._listener);
          }
          this._state = e;
        }
      },
      __preload: function () {
        this._super();
        var t = this.node.children;
        var e = 0;
        for (var i = t.length; e < i; e++) {
          var n = t[e];
          if (n && "DEBUG_DRAW_NODE" === n._name) {
            n.destroy();
          }
        }
        this._updateSkeletonData();
        this._updateDebugDraw();
        this._updateUseTint();
        this._updateBatch();
      },
      setAnimationCacheMode: function (t) {
        if (this._preCacheMode !== t) {
          this._cacheMode = t;
          this._updateSkeletonData();
          this._updateUseTint();
        }
      },
      isAnimationCached: function () {
        return this._cacheMode !== u.REALTIME;
      },
      update: function (t) {
        if (!this.paused) {
          t *= this.timeScale * sp.timeScale;
          if (this.isAnimationCached()) {
            if (this._isAniComplete) {
              if (0 === this._animationQueue.length && !this._headAniInfo) {
                var e = this._frameCache;
                if (e && e.isInvalid()) {
                  e.updateToFrame();
                  var i = e.frames;
                  this._curFrame = i[i.length - 1];
                }
                return;
              }
              if (!this._headAniInfo) {
                this._headAniInfo = this._animationQueue.shift();
              }
              this._accTime += t;
              if (this._accTime > this._headAniInfo.delay) {
                var n = this._headAniInfo;
                this._headAniInfo = null;
                this.setAnimation(0, n.animationName, n.loop);
              }
              return;
            }
            this._updateCache(t);
          } else {
            this._updateRealtime(t);
          }
        }
      },
      _emitCacheCompleteEvent: function () {
        if (this._listener) {
          this._endEntry.animation.name = this._animationName;
          if (this._listener.complete) {
            this._listener.complete(this._endEntry);
          }
          if (this._listener.end) {
            this._listener.end(this._endEntry);
          }
        }
      },
      _updateCache: function (t) {
        var e = this._frameCache;
        if (e.isInited()) {
          var i = e.frames;
          var n = o.FrameTime;
          if (0 == this._accTime && 0 == this._playCount) {
            this._startEntry.animation.name = this._animationName;
            if (this._listener && this._listener.start) {
              this._listener.start(this._startEntry);
            }
          }
          this._accTime += t;
          var r = Math.floor(this._accTime / n);
          if (!e.isCompleted) {
            e.updateToFrame(r);
          }
          if (e.isCompleted && r >= i.length) {
            this._playCount++;
            if (this._playTimes > 0 && this._playCount >= this._playTimes) {
              this._curFrame = i[i.length - 1];
              this._accTime = 0;
              this._playCount = 0;
              this._isAniComplete = true;
              return void this._emitCacheCompleteEvent();
            }
            this._accTime = 0;
            r = 0;
            this._emitCacheCompleteEvent();
          }
          this._curFrame = i[r];
        }
      },
      _updateRealtime: function (t) {
        var e = this._skeleton;
        var i = this._state;
        if (e) {
          e.update(t);
          if (i) {
            i.update(t);
            i.apply(e);
          }
        }
      },
      setVertexEffectDelegate: function (t) {
        this._effectDelegate = t;
      },
      updateWorldTransform: function () {
        if (this.isAnimationCached() && this._skeleton) {
          this._skeleton.updateWorldTransform();
        }
      },
      setToSetupPose: function () {
        if (this._skeleton) {
          this._skeleton.setToSetupPose();
        }
      },
      setBonesToSetupPose: function () {
        if (this._skeleton) {
          this._skeleton.setBonesToSetupPose();
        }
      },
      setSlotsToSetupPose: function () {
        if (this._skeleton) {
          this._skeleton.setSlotsToSetupPose();
        }
      },
      updateAnimationCache: function (t) {
        if (this.isAnimationCached()) {
          var e = this.skeletonData._uuid;
          if (this._skeletonCache) {
            this._skeletonCache.updateAnimationCache(e, t);
          }
        }
      },
      invalidAnimationCache: function () {
        if (this.isAnimationCached() && this._skeletonCache) {
          this._skeletonCache.invalidAnimationCache(this.skeletonData._uuid);
        }
      },
      findBone: function (t) {
        return this._skeleton ? this._skeleton.findBone(t) : null;
      },
      findSlot: function (t) {
        return this._skeleton ? this._skeleton.findSlot(t) : null;
      },
      setSkin: function (t) {
        if (this._skeleton) {
          this._skeleton.setSkinByName(t);
          this._skeleton.setSlotsToSetupPose();
        }
        this.invalidAnimationCache();
      },
      getAttachment: function (t, e) {
        return this._skeleton ? this._skeleton.getAttachmentByName(t, e) : null;
      },
      setAttachment: function (t, e) {
        if (this._skeleton) {
          this._skeleton.setAttachment(t, e);
        }
        this.invalidAnimationCache();
      },
      getTextureAtlas: function (t) {
        return t.region;
      },
      setMix: function (t, e, i) {
        if (this._state) {
          this._state.data.setMix(t, e, i);
        }
      },
      setAnimation: function (t, e, i) {
        this._playTimes = i ? 0 : 1;
        this._animationName = e;
        if (this.isAnimationCached()) {
          if (!this._skeletonCache) {
            return null;
          }
          var n = this._skeletonCache.getAnimationCache(this.skeletonData._uuid, e);
          if (!n) {
            n = this._skeletonCache.initAnimationCache(this.skeletonData._uuid, e);
          }
          if (n) {
            this._isAniComplete = false;
            this._accTime = 0;
            this._playCount = 0;
            this._frameCache = n;
            if (this.attachUtil._hasAttachedNode()) {
              this._frameCache.enableCacheAttachedInfo();
            }
            this._frameCache.updateToFrame(0);
            this._curFrame = this._frameCache.frames[0];
          }
        } else if (this._skeleton) {
          var r = this._skeleton.data.findAnimation(e);
          if (!r) {
            return null;
          }
          var s = this._state.setAnimationWith(t, r, i);
          this._state.apply(this._skeleton);
          return s;
        }
        return null;
      },
      addAnimation: function (t, e, i, n) {
        n = n || 0;
        if (this.isAnimationCached()) {
          this._animationQueue.push({
            animationName: e,
            loop: i,
            delay: n
          });
        } else if (this._skeleton) {
          var r = this._skeleton.data.findAnimation(e);
          return r ? this._state.addAnimationWith(t, r, i, n) : null;
        }
        return null;
      },
      findAnimation: function (t) {
        return this._skeleton ? this._skeleton.data.findAnimation(t) : null;
      },
      getCurrent: function (t) {
        if (this.isAnimationCached()) {
          ;
        } else if (this._state) {
          return this._state.getCurrent(t);
        }
        return null;
      },
      clearTracks: function () {
        if (!this.isAnimationCached()) {
          if (this._state) {
            this._state.clearTracks();
          }
        }
      },
      clearTrack: function (t) {
        if (!this.isAnimationCached()) {
          if (this._state) {
            this._state.clearTrack(t);
          }
        }
      },
      setStartListener: function (t) {
        this._ensureListener();
        this._listener.start = t;
      },
      setInterruptListener: function (t) {
        this._ensureListener();
        this._listener.interrupt = t;
      },
      setEndListener: function (t) {
        this._ensureListener();
        this._listener.end = t;
      },
      setDisposeListener: function (t) {
        this._ensureListener();
        this._listener.dispose = t;
      },
      setCompleteListener: function (t) {
        this._ensureListener();
        this._listener.complete = t;
      },
      setEventListener: function (t) {
        this._ensureListener();
        this._listener.event = t;
      },
      setTrackStartListener: function (t, e) {
        i.getListeners(t).start = e;
      },
      setTrackInterruptListener: function (t, e) {
        i.getListeners(t).interrupt = e;
      },
      setTrackEndListener: function (t, e) {
        i.getListeners(t).end = e;
      },
      setTrackDisposeListener: function (t, e) {
        i.getListeners(t).dispose = e;
      },
      setTrackCompleteListener: function (t, e) {
        i.getListeners(t).complete = function (t) {
          var i = Math.floor(t.trackTime / t.animationEnd);
          e(t, i);
        };
      },
      setTrackEventListener: function (t, e) {
        i.getListeners(t).event = e;
      },
      getState: function () {
        return this._state;
      },
      _resetDefaultAnim: false,
      _resetDefaultSkin: false,
      _updateAnimEnum: false,
      _updateSkinEnum: false,
      _ensureListener: function () {
        if (!this._listener) {
          this._listener = new i();
          if (this._state) {
            this._state.addListener(this._listener);
          }
        }
      },
      _updateSkeletonData: function () {
        if (this.skeletonData) {
          var t = this.skeletonData.getRuntimeData();
          if (t) {
            try {
              this.setSkeletonData(t);
              if (!this.isAnimationCached()) {
                this.setAnimationStateData(new r.AnimationStateData(this._skeleton.data));
              }
              if (this.defaultSkin) {
                this.setSkin(this.defaultSkin);
              }
            } catch (e) {}
            this.attachUtil.init(this);
            this.attachUtil._associateAttachedNode();
            this._preCacheMode = this._cacheMode;
            this.animation = this.defaultAnimation;
          } else {
            this.disableRender();
          }
        } else {
          this.disableRender();
        }
      },
      _refreshInspector: function () {
        this._updateAnimEnum();
        this._updateSkinEnum();
        Editor.Utils.refreshSelectedInspector("node", this.node.uuid);
      },
      _updateDebugDraw: function () {
        if (this.debugBones || this.debugSlots) {
          if (!this._debugRenderer) {
            var t = new cc.PrivateNode();
            t.name = "DEBUG_DRAW_NODE";
            var e = t.addComponent(s);
            e.lineWidth = 1;
            e.strokeColor = cc.color(255, 0, 0, 255);
            this._debugRenderer = e;
          }
          this._debugRenderer.node.parent = this.node;
          this.isAnimationCached();
        } else if (this._debugRenderer) {
          this._debugRenderer.node.parent = null;
        }
      }
    });
    e.exports = sp.Skeleton;
  }, {
    "../../cocos2d/core/components/CCRenderComponent": 109,
    "../../cocos2d/core/graphics/graphics": 151,
    "../../cocos2d/core/renderer/render-flow": 194,
    "./AttachUtil": 318,
    "./lib/spine": 321,
    "./skeleton-cache": 322,
    "./track-entry-listeners": 326
  }],
  320: [function (t) {
    "use strict";

    var e = "undefined" == typeof window ? global : window;
    e.spine = t("./lib/spine");
    e.sp = e.sp || {};
    sp._timeScale = 1;
    Object.defineProperty(sp, "timeScale", {
      get: function () {
        return this._timeScale;
      },
      set: function (t) {
        this._timeScale = t;
      },
      configurable: true
    });
    sp.ATTACHMENT_TYPE = {
      REGION: 0,
      BOUNDING_BOX: 1,
      MESH: 2,
      SKINNED_MESH: 3
    };
    sp.AnimationEventType = cc.Enum({
      START: 0,
      INTERRUPT: 1,
      END: 2,
      DISPOSE: 3,
      COMPLETE: 4,
      EVENT: 5
    });
    sp.spine = e.spine;
    t("./skeleton-texture");
    t("./skeleton-data");
    t("./vertex-effect-delegate");
    t("./Skeleton");
    t("./spine-assembler");
  }, {
    "./Skeleton": 319,
    "./lib/spine": 321,
    "./skeleton-data": 323,
    "./skeleton-texture": 324,
    "./spine-assembler": 325,
    "./vertex-effect-delegate": 327
  }],
  321: [function (t, e) {
    "use strict";

    var i;
    var n;
    var r;
    i = function (t, e) {
      return (i = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (t, e) {
        t.__proto__ = e;
      } || function (t, e) {
        for (var i in e) if (e.hasOwnProperty(i)) {
          t[i] = e[i];
        }
      })(t, e);
    };
    var s = function (t, e) {
      function n() {
        this.constructor = t;
      }
      i(t, e);
      t.prototype = null === e ? Object.create(e) : (n.prototype = e.prototype, new n());
    };
    (function (t) {
      var e;
      var i;
      var n;
      var r = function () {
        function t(t, e, i) {
          if (null == t) {
            throw Error("name cannot be null.");
          }
          if (null == e) {
            throw Error("timelines cannot be null.");
          }
          this.name = t;
          this.timelines = e;
          this.timelineIds = [];
          for (var n = 0; n < e.length; n++) {
            this.timelineIds[e[n].getPropertyId()] = true;
          }
          this.duration = i;
        }
        t.prototype.hasTimeline = function (t) {
          return 1 == this.timelineIds[t];
        };
        t.prototype.apply = function (t, e, i, n, r, s, a, o) {
          if (null == t) {
            throw Error("skeleton cannot be null.");
          }
          if (n && 0 != this.duration) {
            i %= this.duration;
            if (e > 0) {
              e %= this.duration;
            }
          }
          var c = this.timelines;
          var l = 0;
          for (var h = c.length; l < h; l++) {
            c[l].apply(t, e, i, r, s, a, o);
          }
        };
        t.binarySearch = function (t, e, i) {
          if (undefined === i) {
            i = 1;
          }
          var n = 0;
          var r = t.length / i - 2;
          if (0 == r) {
            return i;
          }
          for (var s = r >>> 1;;) {
            if (t[(s + 1) * i] <= e) {
              n = s + 1;
            } else {
              r = s;
            }
            if (n == r) {
              return (n + 1) * i;
            }
            s = n + r >>> 1;
          }
        };
        t.linearSearch = function (t, e, i) {
          var n = 0;
          for (var r = t.length - i; n <= r; n += i) {
            if (t[n] > e) {
              return n;
            }
          }
          return -1;
        };
        return t;
      }();
      t.Animation = r;
      (function (t) {
        t[t.setup = 0] = "setup";
        t[t.first = 1] = "first";
        t[t.replace = 2] = "replace";
        t[t.add = 3] = "add";
      })(e = t.MixBlend || (t.MixBlend = {}));
      (function (t) {
        t[t.mixIn = 0] = "mixIn";
        t[t.mixOut = 1] = "mixOut";
      })(i = t.MixDirection || (t.MixDirection = {}));
      (function (t) {
        t[t.rotate = 0] = "rotate";
        t[t.translate = 1] = "translate";
        t[t.scale = 2] = "scale";
        t[t.shear = 3] = "shear";
        t[t.attachment = 4] = "attachment";
        t[t.color = 5] = "color";
        t[t.deform = 6] = "deform";
        t[t.event = 7] = "event";
        t[t.drawOrder = 8] = "drawOrder";
        t[t.ikConstraint = 9] = "ikConstraint";
        t[t.transformConstraint = 10] = "transformConstraint";
        t[t.pathConstraintPosition = 11] = "pathConstraintPosition";
        t[t.pathConstraintSpacing = 12] = "pathConstraintSpacing";
        t[t.pathConstraintMix = 13] = "pathConstraintMix";
        t[t.twoColor = 14] = "twoColor";
      })(n = t.TimelineType || (t.TimelineType = {}));
      var a = function () {
        function e(i) {
          if (i <= 0) {
            throw Error("frameCount must be > 0: " + i);
          }
          this.curves = t.Utils.newFloatArray((i - 1) * e.BEZIER_SIZE);
        }
        e.prototype.getFrameCount = function () {
          return this.curves.length / e.BEZIER_SIZE + 1;
        };
        e.prototype.setLinear = function (t) {
          this.curves[t * e.BEZIER_SIZE] = e.LINEAR;
        };
        e.prototype.setStepped = function (t) {
          this.curves[t * e.BEZIER_SIZE] = e.STEPPED;
        };
        e.prototype.getCurveType = function (t) {
          var i = t * e.BEZIER_SIZE;
          if (i == this.curves.length) {
            return e.LINEAR;
          }
          var n = this.curves[i];
          return n == e.LINEAR ? e.LINEAR : n == e.STEPPED ? e.STEPPED : e.BEZIER;
        };
        e.prototype.setCurve = function (t, i, n, r, s) {
          var a = .03 * (2 * -i + r);
          var o = .03 * (2 * -n + s);
          var c = .006 * (3 * (i - r) + 1);
          var l = .006 * (3 * (n - s) + 1);
          var h = 2 * a + c;
          var u = 2 * o + l;
          var f = .3 * i + a + .16666667 * c;
          var d = .3 * n + o + .16666667 * l;
          var _ = t * e.BEZIER_SIZE;
          var p = this.curves;
          p[_++] = e.BEZIER;
          var v = f;
          var g = d;
          for (var m = _ + e.BEZIER_SIZE - 1; _ < m; _ += 2) {
            p[_] = v;
            p[_ + 1] = g;
            f += h;
            d += u;
            h += c;
            u += l;
            v += f;
            g += d;
          }
        };
        e.prototype.getCurvePercent = function (i, n) {
          n = t.MathUtils.clamp(n, 0, 1);
          var r = this.curves;
          var s = i * e.BEZIER_SIZE;
          var a = r[s];
          if (a == e.LINEAR) {
            return n;
          }
          if (a == e.STEPPED) {
            return 0;
          }
          var o = 0;
          var c = ++s;
          for (var l = s + e.BEZIER_SIZE - 1; s < l; s += 2) {
            if ((o = r[s]) >= n) {
              var h = undefined;
              var u = undefined;
              if (s == c) {
                h = 0;
                u = 0;
              } else {
                h = r[s - 2];
                u = r[s - 1];
              }
              return u + (r[s + 1] - u) * (n - h) / (o - h);
            }
          }
          var f = r[s - 1];
          return f + (1 - f) * (n - o) / (1 - o);
        };
        e.LINEAR = 0;
        e.STEPPED = 1;
        e.BEZIER = 2;
        e.BEZIER_SIZE = 19;
        return e;
      }();
      t.CurveTimeline = a;
      var o = function (i) {
        function a(e) {
          var n = i.call(this, e) || this;
          n.frames = t.Utils.newFloatArray(e << 1);
          return n;
        }
        s(a, i);
        a.prototype.getPropertyId = function () {
          return (n.rotate << 24) + this.boneIndex;
        };
        a.prototype.setFrame = function (t, e, i) {
          t <<= 1;
          this.frames[t] = e;
          this.frames[t + a.ROTATION] = i;
        };
        a.prototype.apply = function (t, i, n, s, o, c) {
          var l = this.frames;
          var h = t.bones[this.boneIndex];
          if (h.active) {
            if (n < l[0]) {
              switch (c) {
                case e.setup:
                  return void (h.rotation = h.data.rotation);
                case e.first:
                  var u = h.data.rotation - h.rotation;
                  h.rotation += (u - 360 * (16384 - (16384.499999999996 - u / 360 | 0))) * o;
              }
            } else if (n >= l[l.length - a.ENTRIES]) {
              var f = l[l.length + a.PREV_ROTATION];
              switch (c) {
                case e.setup:
                  h.rotation = h.data.rotation + f * o;
                  break;
                case e.first:
                case e.replace:
                  f += h.data.rotation - h.rotation;
                  f -= 360 * (16384 - (16384.499999999996 - f / 360 | 0));
                case e.add:
                  h.rotation += f * o;
              }
            } else {
              var d = r.binarySearch(l, n, a.ENTRIES);
              var _ = l[d + a.PREV_ROTATION];
              var p = l[d];
              var v = this.getCurvePercent((d >> 1) - 1, 1 - (n - p) / (l[d + a.PREV_TIME] - p));
              var g = l[d + a.ROTATION] - _;
              g = _ + (g - 360 * (16384 - (16384.499999999996 - g / 360 | 0))) * v;
              switch (c) {
                case e.setup:
                  h.rotation = h.data.rotation + (g - 360 * (16384 - (16384.499999999996 - g / 360 | 0))) * o;
                  break;
                case e.first:
                case e.replace:
                  g += h.data.rotation - h.rotation;
                case e.add:
                  h.rotation += (g - 360 * (16384 - (16384.499999999996 - g / 360 | 0))) * o;
              }
            }
          }
        };
        a.ENTRIES = 2;
        a.PREV_TIME = -2;
        a.PREV_ROTATION = -1;
        a.ROTATION = 1;
        return a;
      }(a);
      t.RotateTimeline = o;
      var c = function (i) {
        function a(e) {
          var n = i.call(this, e) || this;
          n.frames = t.Utils.newFloatArray(e * a.ENTRIES);
          return n;
        }
        s(a, i);
        a.prototype.getPropertyId = function () {
          return (n.translate << 24) + this.boneIndex;
        };
        a.prototype.setFrame = function (t, e, i, n) {
          t *= a.ENTRIES;
          this.frames[t] = e;
          this.frames[t + a.X] = i;
          this.frames[t + a.Y] = n;
        };
        a.prototype.apply = function (t, i, n, s, o, c) {
          var l = this.frames;
          var h = t.bones[this.boneIndex];
          if (h.active) {
            if (n < l[0]) {
              switch (c) {
                case e.setup:
                  h.x = h.data.x;
                  return void (h.y = h.data.y);
                case e.first:
                  h.x += (h.data.x - h.x) * o;
                  h.y += (h.data.y - h.y) * o;
              }
            } else {
              var u = 0;
              var f = 0;
              if (n >= l[l.length - a.ENTRIES]) {
                u = l[l.length + a.PREV_X];
                f = l[l.length + a.PREV_Y];
              } else {
                var d = r.binarySearch(l, n, a.ENTRIES);
                u = l[d + a.PREV_X];
                f = l[d + a.PREV_Y];
                var _ = l[d];
                var p = this.getCurvePercent(d / a.ENTRIES - 1, 1 - (n - _) / (l[d + a.PREV_TIME] - _));
                u += (l[d + a.X] - u) * p;
                f += (l[d + a.Y] - f) * p;
              }
              switch (c) {
                case e.setup:
                  h.x = h.data.x + u * o;
                  h.y = h.data.y + f * o;
                  break;
                case e.first:
                case e.replace:
                  h.x += (h.data.x + u - h.x) * o;
                  h.y += (h.data.y + f - h.y) * o;
                  break;
                case e.add:
                  h.x += u * o;
                  h.y += f * o;
              }
            }
          }
        };
        a.ENTRIES = 3;
        a.PREV_TIME = -3;
        a.PREV_X = -2;
        a.PREV_Y = -1;
        a.X = 1;
        a.Y = 2;
        return a;
      }(a);
      t.TranslateTimeline = c;
      var l = function (a) {
        function o(t) {
          return a.call(this, t) || this;
        }
        s(o, a);
        o.prototype.getPropertyId = function () {
          return (n.scale << 24) + this.boneIndex;
        };
        o.prototype.apply = function (n, s, a, c, l, h, u) {
          var f = this.frames;
          var d = n.bones[this.boneIndex];
          if (d.active) {
            if (a < f[0]) {
              switch (h) {
                case e.setup:
                  d.scaleX = d.data.scaleX;
                  return void (d.scaleY = d.data.scaleY);
                case e.first:
                  d.scaleX += (d.data.scaleX - d.scaleX) * l;
                  d.scaleY += (d.data.scaleY - d.scaleY) * l;
              }
            } else {
              var _ = 0;
              var p = 0;
              if (a >= f[f.length - o.ENTRIES]) {
                _ = f[f.length + o.PREV_X] * d.data.scaleX;
                p = f[f.length + o.PREV_Y] * d.data.scaleY;
              } else {
                var v = r.binarySearch(f, a, o.ENTRIES);
                _ = f[v + o.PREV_X];
                p = f[v + o.PREV_Y];
                var g = f[v];
                var m = this.getCurvePercent(v / o.ENTRIES - 1, 1 - (a - g) / (f[v + o.PREV_TIME] - g));
                _ = (_ + (f[v + o.X] - _) * m) * d.data.scaleX;
                p = (p + (f[v + o.Y] - p) * m) * d.data.scaleY;
              }
              if (1 == l) {
                if (h == e.add) {
                  d.scaleX += _ - d.data.scaleX;
                  d.scaleY += p - d.data.scaleY;
                } else {
                  d.scaleX = _;
                  d.scaleY = p;
                }
              } else {
                var y = 0;
                var T = 0;
                if (u == i.mixOut) {
                  switch (h) {
                    case e.setup:
                      y = d.data.scaleX;
                      T = d.data.scaleY;
                      d.scaleX = y + (Math.abs(_) * t.MathUtils.signum(y) - y) * l;
                      d.scaleY = T + (Math.abs(p) * t.MathUtils.signum(T) - T) * l;
                      break;
                    case e.first:
                    case e.replace:
                      y = d.scaleX;
                      T = d.scaleY;
                      d.scaleX = y + (Math.abs(_) * t.MathUtils.signum(y) - y) * l;
                      d.scaleY = T + (Math.abs(p) * t.MathUtils.signum(T) - T) * l;
                      break;
                    case e.add:
                      y = d.scaleX;
                      T = d.scaleY;
                      d.scaleX = y + (Math.abs(_) * t.MathUtils.signum(y) - d.data.scaleX) * l;
                      d.scaleY = T + (Math.abs(p) * t.MathUtils.signum(T) - d.data.scaleY) * l;
                  }
                } else {
                  switch (h) {
                    case e.setup:
                      y = Math.abs(d.data.scaleX) * t.MathUtils.signum(_);
                      T = Math.abs(d.data.scaleY) * t.MathUtils.signum(p);
                      d.scaleX = y + (_ - y) * l;
                      d.scaleY = T + (p - T) * l;
                      break;
                    case e.first:
                    case e.replace:
                      y = Math.abs(d.scaleX) * t.MathUtils.signum(_);
                      T = Math.abs(d.scaleY) * t.MathUtils.signum(p);
                      d.scaleX = y + (_ - y) * l;
                      d.scaleY = T + (p - T) * l;
                      break;
                    case e.add:
                      y = t.MathUtils.signum(_);
                      T = t.MathUtils.signum(p);
                      d.scaleX = Math.abs(d.scaleX) * y + (_ - Math.abs(d.data.scaleX) * y) * l;
                      d.scaleY = Math.abs(d.scaleY) * T + (p - Math.abs(d.data.scaleY) * T) * l;
                  }
                }
              }
            }
          }
        };
        return o;
      }(c);
      t.ScaleTimeline = l;
      var h = function (t) {
        function i(e) {
          return t.call(this, e) || this;
        }
        s(i, t);
        i.prototype.getPropertyId = function () {
          return (n.shear << 24) + this.boneIndex;
        };
        i.prototype.apply = function (t, n, s, a, o, c) {
          var l = this.frames;
          var h = t.bones[this.boneIndex];
          if (h.active) {
            if (s < l[0]) {
              switch (c) {
                case e.setup:
                  h.shearX = h.data.shearX;
                  return void (h.shearY = h.data.shearY);
                case e.first:
                  h.shearX += (h.data.shearX - h.shearX) * o;
                  h.shearY += (h.data.shearY - h.shearY) * o;
              }
            } else {
              var u = 0;
              var f = 0;
              if (s >= l[l.length - i.ENTRIES]) {
                u = l[l.length + i.PREV_X];
                f = l[l.length + i.PREV_Y];
              } else {
                var d = r.binarySearch(l, s, i.ENTRIES);
                u = l[d + i.PREV_X];
                f = l[d + i.PREV_Y];
                var _ = l[d];
                var p = this.getCurvePercent(d / i.ENTRIES - 1, 1 - (s - _) / (l[d + i.PREV_TIME] - _));
                u += (l[d + i.X] - u) * p;
                f += (l[d + i.Y] - f) * p;
              }
              switch (c) {
                case e.setup:
                  h.shearX = h.data.shearX + u * o;
                  h.shearY = h.data.shearY + f * o;
                  break;
                case e.first:
                case e.replace:
                  h.shearX += (h.data.shearX + u - h.shearX) * o;
                  h.shearY += (h.data.shearY + f - h.shearY) * o;
                  break;
                case e.add:
                  h.shearX += u * o;
                  h.shearY += f * o;
              }
            }
          }
        };
        return i;
      }(c);
      t.ShearTimeline = h;
      var u = function (i) {
        function a(e) {
          var n = i.call(this, e) || this;
          n.frames = t.Utils.newFloatArray(e * a.ENTRIES);
          return n;
        }
        s(a, i);
        a.prototype.getPropertyId = function () {
          return (n.color << 24) + this.slotIndex;
        };
        a.prototype.setFrame = function (t, e, i, n, r, s) {
          t *= a.ENTRIES;
          this.frames[t] = e;
          this.frames[t + a.R] = i;
          this.frames[t + a.G] = n;
          this.frames[t + a.B] = r;
          this.frames[t + a.A] = s;
        };
        a.prototype.apply = function (t, i, n, s, o, c) {
          var l = t.slots[this.slotIndex];
          if (l.bone.active) {
            var h = this.frames;
            if (n < h[0]) {
              switch (c) {
                case e.setup:
                  return void l.color.setFromColor(l.data.color);
                case e.first:
                  var u = l.color;
                  var f = l.data.color;
                  u.add((f.r - u.r) * o, (f.g - u.g) * o, (f.b - u.b) * o, (f.a - u.a) * o);
              }
            } else {
              var d = 0;
              var _ = 0;
              var p = 0;
              var v = 0;
              if (n >= h[h.length - a.ENTRIES]) {
                var g = h.length;
                d = h[g + a.PREV_R];
                _ = h[g + a.PREV_G];
                p = h[g + a.PREV_B];
                v = h[g + a.PREV_A];
              } else {
                var m = r.binarySearch(h, n, a.ENTRIES);
                d = h[m + a.PREV_R];
                _ = h[m + a.PREV_G];
                p = h[m + a.PREV_B];
                v = h[m + a.PREV_A];
                var y = h[m];
                var T = this.getCurvePercent(m / a.ENTRIES - 1, 1 - (n - y) / (h[m + a.PREV_TIME] - y));
                d += (h[m + a.R] - d) * T;
                _ += (h[m + a.G] - _) * T;
                p += (h[m + a.B] - p) * T;
                v += (h[m + a.A] - v) * T;
              }
              if (1 == o) {
                l.color.set(d, _, p, v);
              } else {
                u = l.color;
                if (c == e.setup) {
                  u.setFromColor(l.data.color);
                }
                u.add((d - u.r) * o, (_ - u.g) * o, (p - u.b) * o, (v - u.a) * o);
              }
            }
          }
        };
        a.ENTRIES = 5;
        a.PREV_TIME = -5;
        a.PREV_R = -4;
        a.PREV_G = -3;
        a.PREV_B = -2;
        a.PREV_A = -1;
        a.R = 1;
        a.G = 2;
        a.B = 3;
        a.A = 4;
        return a;
      }(a);
      t.ColorTimeline = u;
      var f = function (i) {
        function a(e) {
          var n = i.call(this, e) || this;
          n.frames = t.Utils.newFloatArray(e * a.ENTRIES);
          return n;
        }
        s(a, i);
        a.prototype.getPropertyId = function () {
          return (n.twoColor << 24) + this.slotIndex;
        };
        a.prototype.setFrame = function (t, e, i, n, r, s, o, c, l) {
          t *= a.ENTRIES;
          this.frames[t] = e;
          this.frames[t + a.R] = i;
          this.frames[t + a.G] = n;
          this.frames[t + a.B] = r;
          this.frames[t + a.A] = s;
          this.frames[t + a.R2] = o;
          this.frames[t + a.G2] = c;
          this.frames[t + a.B2] = l;
        };
        a.prototype.apply = function (t, i, n, s, o, c) {
          var l = t.slots[this.slotIndex];
          if (l.bone.active) {
            var h = this.frames;
            if (n < h[0]) {
              switch (c) {
                case e.setup:
                  l.color.setFromColor(l.data.color);
                  return void l.darkColor.setFromColor(l.data.darkColor);
                case e.first:
                  var u = l.color;
                  var f = l.darkColor;
                  var d = l.data.color;
                  var _ = l.data.darkColor;
                  u.add((d.r - u.r) * o, (d.g - u.g) * o, (d.b - u.b) * o, (d.a - u.a) * o);
                  f.add((_.r - f.r) * o, (_.g - f.g) * o, (_.b - f.b) * o, 0);
              }
            } else {
              var p = 0;
              var v = 0;
              var g = 0;
              var m = 0;
              var y = 0;
              var T = 0;
              var E = 0;
              if (n >= h[h.length - a.ENTRIES]) {
                var A = h.length;
                p = h[A + a.PREV_R];
                v = h[A + a.PREV_G];
                g = h[A + a.PREV_B];
                m = h[A + a.PREV_A];
                y = h[A + a.PREV_R2];
                T = h[A + a.PREV_G2];
                E = h[A + a.PREV_B2];
              } else {
                var x = r.binarySearch(h, n, a.ENTRIES);
                p = h[x + a.PREV_R];
                v = h[x + a.PREV_G];
                g = h[x + a.PREV_B];
                m = h[x + a.PREV_A];
                y = h[x + a.PREV_R2];
                T = h[x + a.PREV_G2];
                E = h[x + a.PREV_B2];
                var C = h[x];
                var b = this.getCurvePercent(x / a.ENTRIES - 1, 1 - (n - C) / (h[x + a.PREV_TIME] - C));
                p += (h[x + a.R] - p) * b;
                v += (h[x + a.G] - v) * b;
                g += (h[x + a.B] - g) * b;
                m += (h[x + a.A] - m) * b;
                y += (h[x + a.R2] - y) * b;
                T += (h[x + a.G2] - T) * b;
                E += (h[x + a.B2] - E) * b;
              }
              if (1 == o) {
                l.color.set(p, v, g, m);
                l.darkColor.set(y, T, E, 1);
              } else {
                u = l.color;
                f = l.darkColor;
                if (c == e.setup) {
                  u.setFromColor(l.data.color);
                  f.setFromColor(l.data.darkColor);
                }
                u.add((p - u.r) * o, (v - u.g) * o, (g - u.b) * o, (m - u.a) * o);
                f.add((y - f.r) * o, (T - f.g) * o, (E - f.b) * o, 0);
              }
            }
          }
        };
        a.ENTRIES = 8;
        a.PREV_TIME = -8;
        a.PREV_R = -7;
        a.PREV_G = -6;
        a.PREV_B = -5;
        a.PREV_A = -4;
        a.PREV_R2 = -3;
        a.PREV_G2 = -2;
        a.PREV_B2 = -1;
        a.R = 1;
        a.G = 2;
        a.B = 3;
        a.A = 4;
        a.R2 = 5;
        a.G2 = 6;
        a.B2 = 7;
        return a;
      }(a);
      t.TwoColorTimeline = f;
      var d = function () {
        function s(e) {
          this.frames = t.Utils.newFloatArray(e);
          this.attachmentNames = Array(e);
        }
        s.prototype.getPropertyId = function () {
          return (n.attachment << 24) + this.slotIndex;
        };
        s.prototype.getFrameCount = function () {
          return this.frames.length;
        };
        s.prototype.setFrame = function (t, e, i) {
          this.frames[t] = e;
          this.attachmentNames[t] = i;
        };
        s.prototype.apply = function (t, n, s, a, o, c, l) {
          var h = t.slots[this.slotIndex];
          if (h.bone.active) {
            if (l != i.mixOut || c != e.setup) {
              var u = this.frames;
              if (s < u[0]) {
                if (c == e.setup || c == e.first) {
                  var f = h.data.attachmentName;
                  h.setAttachment(null == f ? null : t.getAttachment(this.slotIndex, f));
                }
              } else {
                var d;
                d = s >= u[u.length - 1] ? u.length - 1 : r.binarySearch(u, s, 1) - 1;
                var _ = this.attachmentNames[d];
                t.slots[this.slotIndex].setAttachment(null == _ ? null : t.getAttachment(this.slotIndex, _));
              }
            } else {
              var p = h.data.attachmentName;
              h.setAttachment(null == p ? null : t.getAttachment(this.slotIndex, p));
            }
          }
        };
        return s;
      }();
      t.AttachmentTimeline = d;
      var _ = null;
      var p = function (i) {
        function a(e) {
          var n = i.call(this, e) || this;
          n.frames = t.Utils.newFloatArray(e);
          n.frameVertices = Array(e);
          if (null == _) {
            _ = t.Utils.newFloatArray(64);
          }
          return n;
        }
        s(a, i);
        a.prototype.getPropertyId = function () {
          return (n.deform << 27) + +this.attachment.id + this.slotIndex;
        };
        a.prototype.setFrame = function (t, e, i) {
          this.frames[t] = e;
          this.frameVertices[t] = i;
        };
        a.prototype.apply = function (i, n, s, a, o, c) {
          var l = i.slots[this.slotIndex];
          if (l.bone.active) {
            var h = l.getAttachment();
            if (h instanceof t.VertexAttachment && h.deformAttachment == this.attachment) {
              var u = l.deform;
              if (0 == u.length) {
                c = e.setup;
              }
              var f = this.frameVertices;
              var d = f[0].length;
              var _ = this.frames;
              if (s < _[0]) {
                var p = h;
                switch (c) {
                  case e.setup:
                    return void (u.length = 0);
                  case e.first:
                    if (1 == o) {
                      u.length = 0;
                      break;
                    }
                    var v = t.Utils.setArraySize(u, d);
                    if (null == p.bones) {
                      var g = p.vertices;
                      for (var m = 0; m < d; m++) {
                        v[m] += (g[m] - v[m]) * o;
                      }
                    } else {
                      o = 1 - o;
                      for (m = 0; m < d; m++) {
                        v[m] *= o;
                      }
                    }
                }
              } else {
                var y = t.Utils.setArraySize(u, d);
                if (s >= _[_.length - 1]) {
                  var T = f[_.length - 1];
                  if (1 == o) {
                    if (c == e.add) {
                      if (null == (p = h).bones) {
                        g = p.vertices;
                        for (var E = 0; E < d; E++) {
                          y[E] += T[E] - g[E];
                        }
                      } else {
                        for (var A = 0; A < d; A++) {
                          y[A] += T[A];
                        }
                      }
                    } else {
                      t.Utils.arrayCopy(T, 0, y, 0, d);
                    }
                  } else {
                    switch (c) {
                      case e.setup:
                        if (null == h.bones) {
                          g = h.vertices;
                          for (var C = 0; C < d; C++) {
                            var b = g[C];
                            y[C] = b + (T[C] - b) * o;
                          }
                        } else {
                          for (var S = 0; S < d; S++) {
                            y[S] = T[S] * o;
                          }
                        }
                        break;
                      case e.first:
                      case e.replace:
                        for (var R = 0; R < d; R++) {
                          y[R] += (T[R] - y[R]) * o;
                        }
                      case e.add:
                        if (null == (p = h).bones) {
                          g = p.vertices;
                          for (var M = 0; M < d; M++) {
                            y[M] += (T[M] - g[M]) * o;
                          }
                        } else {
                          for (var w = 0; w < d; w++) {
                            y[w] += T[w] * o;
                          }
                        }
                    }
                  }
                } else {
                  var I = r.binarySearch(_, s);
                  var O = f[I - 1];
                  var L = f[I];
                  var P = _[I];
                  var D = this.getCurvePercent(I - 1, 1 - (s - P) / (_[I - 1] - P));
                  if (1 == o) {
                    if (c == e.add) {
                      if (null == (p = h).bones) {
                        g = p.vertices;
                        for (var N = 0; N < d; N++) {
                          var F = O[N];
                          y[N] += F + (L[N] - F) * D - g[N];
                        }
                      } else {
                        for (var B = 0; B < d; B++) {
                          F = O[B];
                          y[B] += F + (L[B] - F) * D;
                        }
                      }
                    } else {
                      for (var V = 0; V < d; V++) {
                        F = O[V];
                        y[V] = F + (L[V] - F) * D;
                      }
                    }
                  } else {
                    switch (c) {
                      case e.setup:
                        if (null == h.bones) {
                          g = h.vertices;
                          for (var U = 0; U < d; U++) {
                            F = O[U];
                            b = g[U];
                            y[U] = b + (F + (L[U] - F) * D - b) * o;
                          }
                        } else {
                          for (var z = 0; z < d; z++) {
                            F = O[z];
                            y[z] = (F + (L[z] - F) * D) * o;
                          }
                        }
                        break;
                      case e.first:
                      case e.replace:
                        for (var G = 0; G < d; G++) {
                          F = O[G];
                          y[G] += (F + (L[G] - F) * D - y[G]) * o;
                        }
                        break;
                      case e.add:
                        if (null == (p = h).bones) {
                          g = p.vertices;
                          for (var H = 0; H < d; H++) {
                            F = O[H];
                            y[H] += (F + (L[H] - F) * D - g[H]) * o;
                          }
                        } else {
                          for (var W = 0; W < d; W++) {
                            F = O[W];
                            y[W] += (F + (L[W] - F) * D) * o;
                          }
                        }
                    }
                  }
                }
              }
            }
          }
        };
        return a;
      }(a);
      t.DeformTimeline = p;
      var v = function () {
        function e(e) {
          this.frames = t.Utils.newFloatArray(e);
          this.events = Array(e);
        }
        e.prototype.getPropertyId = function () {
          return n.event << 24;
        };
        e.prototype.getFrameCount = function () {
          return this.frames.length;
        };
        e.prototype.setFrame = function (t, e) {
          this.frames[t] = e.time;
          this.events[t] = e;
        };
        e.prototype.apply = function (t, e, i, n, s, a, o) {
          if (null != n) {
            var c = this.frames;
            var l = this.frames.length;
            if (e > i) {
              this.apply(t, e, Number.MAX_VALUE, n, s, a, o);
              e = -1;
            } else if (e >= c[l - 1]) {
              return;
            }
            if (!(i < c[0])) {
              var h = 0;
              if (e < c[0]) {
                h = 0;
              } else {
                for (var u = c[h = r.binarySearch(c, e)]; h > 0 && c[h - 1] == u;) {
                  h--;
                }
              }
              for (; h < l && i >= c[h]; h++) {
                n.push(this.events[h]);
              }
            }
          }
        };
        return e;
      }();
      t.EventTimeline = v;
      var g = function () {
        function s(e) {
          this.frames = t.Utils.newFloatArray(e);
          this.drawOrders = Array(e);
        }
        s.prototype.getPropertyId = function () {
          return n.drawOrder << 24;
        };
        s.prototype.getFrameCount = function () {
          return this.frames.length;
        };
        s.prototype.setFrame = function (t, e, i) {
          this.frames[t] = e;
          this.drawOrders[t] = i;
        };
        s.prototype.apply = function (n, s, a, o, c, l, h) {
          var u = n.drawOrder;
          var f = n.slots;
          if (h != i.mixOut || l != e.setup) {
            var d = this.frames;
            if (a < d[0]) {
              if (!(l != e.setup && l != e.first)) {
                t.Utils.arrayCopy(n.slots, 0, n.drawOrder, 0, n.slots.length);
              }
            } else {
              var _;
              _ = a >= d[d.length - 1] ? d.length - 1 : r.binarySearch(d, a) - 1;
              var p = this.drawOrders[_];
              if (null == p) {
                t.Utils.arrayCopy(f, 0, u, 0, f.length);
              } else {
                var v = 0;
                for (var g = p.length; v < g; v++) {
                  u[v] = f[p[v]];
                }
              }
            }
          } else {
            t.Utils.arrayCopy(n.slots, 0, n.drawOrder, 0, n.slots.length);
          }
        };
        return s;
      }();
      t.DrawOrderTimeline = g;
      var m = function (a) {
        function o(e) {
          var i = a.call(this, e) || this;
          i.frames = t.Utils.newFloatArray(e * o.ENTRIES);
          return i;
        }
        s(o, a);
        o.prototype.getPropertyId = function () {
          return (n.ikConstraint << 24) + this.ikConstraintIndex;
        };
        o.prototype.setFrame = function (t, e, i, n, r, s, a) {
          t *= o.ENTRIES;
          this.frames[t] = e;
          this.frames[t + o.MIX] = i;
          this.frames[t + o.SOFTNESS] = n;
          this.frames[t + o.BEND_DIRECTION] = r;
          this.frames[t + o.COMPRESS] = s ? 1 : 0;
          this.frames[t + o.STRETCH] = a ? 1 : 0;
        };
        o.prototype.apply = function (t, n, s, a, c, l, h) {
          var u = this.frames;
          var f = t.ikConstraints[this.ikConstraintIndex];
          if (f.active) {
            if (s < u[0]) {
              switch (l) {
                case e.setup:
                  f.mix = f.data.mix;
                  f.softness = f.data.softness;
                  f.bendDirection = f.data.bendDirection;
                  f.compress = f.data.compress;
                  return void (f.stretch = f.data.stretch);
                case e.first:
                  f.mix += (f.data.mix - f.mix) * c;
                  f.softness += (f.data.softness - f.softness) * c;
                  f.bendDirection = f.data.bendDirection;
                  f.compress = f.data.compress;
                  f.stretch = f.data.stretch;
              }
            } else if (s >= u[u.length - o.ENTRIES]) {
              if (l == e.setup) {
                f.mix = f.data.mix + (u[u.length + o.PREV_MIX] - f.data.mix) * c;
                f.softness = f.data.softness + (u[u.length + o.PREV_SOFTNESS] - f.data.softness) * c;
                if (h == i.mixOut) {
                  f.bendDirection = f.data.bendDirection;
                  f.compress = f.data.compress;
                  f.stretch = f.data.stretch;
                } else {
                  f.bendDirection = u[u.length + o.PREV_BEND_DIRECTION];
                  f.compress = 0 != u[u.length + o.PREV_COMPRESS];
                  f.stretch = 0 != u[u.length + o.PREV_STRETCH];
                }
              } else {
                f.mix += (u[u.length + o.PREV_MIX] - f.mix) * c;
                f.softness += (u[u.length + o.PREV_SOFTNESS] - f.softness) * c;
                if (h == i.mixIn) {
                  f.bendDirection = u[u.length + o.PREV_BEND_DIRECTION];
                  f.compress = 0 != u[u.length + o.PREV_COMPRESS];
                  f.stretch = 0 != u[u.length + o.PREV_STRETCH];
                }
              }
            } else {
              var d = r.binarySearch(u, s, o.ENTRIES);
              var _ = u[d + o.PREV_MIX];
              var p = u[d + o.PREV_SOFTNESS];
              var v = u[d];
              var g = this.getCurvePercent(d / o.ENTRIES - 1, 1 - (s - v) / (u[d + o.PREV_TIME] - v));
              if (l == e.setup) {
                f.mix = f.data.mix + (_ + (u[d + o.MIX] - _) * g - f.data.mix) * c;
                f.softness = f.data.softness + (p + (u[d + o.SOFTNESS] - p) * g - f.data.softness) * c;
                if (h == i.mixOut) {
                  f.bendDirection = f.data.bendDirection;
                  f.compress = f.data.compress;
                  f.stretch = f.data.stretch;
                } else {
                  f.bendDirection = u[d + o.PREV_BEND_DIRECTION];
                  f.compress = 0 != u[d + o.PREV_COMPRESS];
                  f.stretch = 0 != u[d + o.PREV_STRETCH];
                }
              } else {
                f.mix += (_ + (u[d + o.MIX] - _) * g - f.mix) * c;
                f.softness += (p + (u[d + o.SOFTNESS] - p) * g - f.softness) * c;
                if (h == i.mixIn) {
                  f.bendDirection = u[d + o.PREV_BEND_DIRECTION];
                  f.compress = 0 != u[d + o.PREV_COMPRESS];
                  f.stretch = 0 != u[d + o.PREV_STRETCH];
                }
              }
            }
          }
        };
        o.ENTRIES = 6;
        o.PREV_TIME = -6;
        o.PREV_MIX = -5;
        o.PREV_SOFTNESS = -4;
        o.PREV_BEND_DIRECTION = -3;
        o.PREV_COMPRESS = -2;
        o.PREV_STRETCH = -1;
        o.MIX = 1;
        o.SOFTNESS = 2;
        o.BEND_DIRECTION = 3;
        o.COMPRESS = 4;
        o.STRETCH = 5;
        return o;
      }(a);
      t.IkConstraintTimeline = m;
      var y = function (i) {
        function a(e) {
          var n = i.call(this, e) || this;
          n.frames = t.Utils.newFloatArray(e * a.ENTRIES);
          return n;
        }
        s(a, i);
        a.prototype.getPropertyId = function () {
          return (n.transformConstraint << 24) + this.transformConstraintIndex;
        };
        a.prototype.setFrame = function (t, e, i, n, r, s) {
          t *= a.ENTRIES;
          this.frames[t] = e;
          this.frames[t + a.ROTATE] = i;
          this.frames[t + a.TRANSLATE] = n;
          this.frames[t + a.SCALE] = r;
          this.frames[t + a.SHEAR] = s;
        };
        a.prototype.apply = function (t, i, n, s, o, c) {
          var l = this.frames;
          var h = t.transformConstraints[this.transformConstraintIndex];
          if (h.active) {
            if (n < l[0]) {
              var u = h.data;
              switch (c) {
                case e.setup:
                  h.rotateMix = u.rotateMix;
                  h.translateMix = u.translateMix;
                  h.scaleMix = u.scaleMix;
                  return void (h.shearMix = u.shearMix);
                case e.first:
                  h.rotateMix += (u.rotateMix - h.rotateMix) * o;
                  h.translateMix += (u.translateMix - h.translateMix) * o;
                  h.scaleMix += (u.scaleMix - h.scaleMix) * o;
                  h.shearMix += (u.shearMix - h.shearMix) * o;
              }
            } else {
              var f = 0;
              var d = 0;
              var _ = 0;
              var p = 0;
              if (n >= l[l.length - a.ENTRIES]) {
                var v = l.length;
                f = l[v + a.PREV_ROTATE];
                d = l[v + a.PREV_TRANSLATE];
                _ = l[v + a.PREV_SCALE];
                p = l[v + a.PREV_SHEAR];
              } else {
                var g = r.binarySearch(l, n, a.ENTRIES);
                f = l[g + a.PREV_ROTATE];
                d = l[g + a.PREV_TRANSLATE];
                _ = l[g + a.PREV_SCALE];
                p = l[g + a.PREV_SHEAR];
                var m = l[g];
                var y = this.getCurvePercent(g / a.ENTRIES - 1, 1 - (n - m) / (l[g + a.PREV_TIME] - m));
                f += (l[g + a.ROTATE] - f) * y;
                d += (l[g + a.TRANSLATE] - d) * y;
                _ += (l[g + a.SCALE] - _) * y;
                p += (l[g + a.SHEAR] - p) * y;
              }
              if (c == e.setup) {
                u = h.data;
                h.rotateMix = u.rotateMix + (f - u.rotateMix) * o;
                h.translateMix = u.translateMix + (d - u.translateMix) * o;
                h.scaleMix = u.scaleMix + (_ - u.scaleMix) * o;
                h.shearMix = u.shearMix + (p - u.shearMix) * o;
              } else {
                h.rotateMix += (f - h.rotateMix) * o;
                h.translateMix += (d - h.translateMix) * o;
                h.scaleMix += (_ - h.scaleMix) * o;
                h.shearMix += (p - h.shearMix) * o;
              }
            }
          }
        };
        a.ENTRIES = 5;
        a.PREV_TIME = -5;
        a.PREV_ROTATE = -4;
        a.PREV_TRANSLATE = -3;
        a.PREV_SCALE = -2;
        a.PREV_SHEAR = -1;
        a.ROTATE = 1;
        a.TRANSLATE = 2;
        a.SCALE = 3;
        a.SHEAR = 4;
        return a;
      }(a);
      t.TransformConstraintTimeline = y;
      var T = function (i) {
        function a(e) {
          var n = i.call(this, e) || this;
          n.frames = t.Utils.newFloatArray(e * a.ENTRIES);
          return n;
        }
        s(a, i);
        a.prototype.getPropertyId = function () {
          return (n.pathConstraintPosition << 24) + this.pathConstraintIndex;
        };
        a.prototype.setFrame = function (t, e, i) {
          t *= a.ENTRIES;
          this.frames[t] = e;
          this.frames[t + a.VALUE] = i;
        };
        a.prototype.apply = function (t, i, n, s, o, c) {
          var l = this.frames;
          var h = t.pathConstraints[this.pathConstraintIndex];
          if (h.active) {
            if (n < l[0]) {
              switch (c) {
                case e.setup:
                  return void (h.position = h.data.position);
                case e.first:
                  h.position += (h.data.position - h.position) * o;
              }
            } else {
              var u = 0;
              if (n >= l[l.length - a.ENTRIES]) {
                u = l[l.length + a.PREV_VALUE];
              } else {
                var f = r.binarySearch(l, n, a.ENTRIES);
                u = l[f + a.PREV_VALUE];
                var d = l[f];
                var _ = this.getCurvePercent(f / a.ENTRIES - 1, 1 - (n - d) / (l[f + a.PREV_TIME] - d));
                u += (l[f + a.VALUE] - u) * _;
              }
              if (c == e.setup) {
                h.position = h.data.position + (u - h.data.position) * o;
              } else {
                h.position += (u - h.position) * o;
              }
            }
          }
        };
        a.ENTRIES = 2;
        a.PREV_TIME = -2;
        a.PREV_VALUE = -1;
        a.VALUE = 1;
        return a;
      }(a);
      t.PathConstraintPositionTimeline = T;
      var E = function (t) {
        function i(e) {
          return t.call(this, e) || this;
        }
        s(i, t);
        i.prototype.getPropertyId = function () {
          return (n.pathConstraintSpacing << 24) + this.pathConstraintIndex;
        };
        i.prototype.apply = function (t, n, s, a, o, c) {
          var l = this.frames;
          var h = t.pathConstraints[this.pathConstraintIndex];
          if (h.active) {
            if (s < l[0]) {
              switch (c) {
                case e.setup:
                  return void (h.spacing = h.data.spacing);
                case e.first:
                  h.spacing += (h.data.spacing - h.spacing) * o;
              }
            } else {
              var u = 0;
              if (s >= l[l.length - i.ENTRIES]) {
                u = l[l.length + i.PREV_VALUE];
              } else {
                var f = r.binarySearch(l, s, i.ENTRIES);
                u = l[f + i.PREV_VALUE];
                var d = l[f];
                var _ = this.getCurvePercent(f / i.ENTRIES - 1, 1 - (s - d) / (l[f + i.PREV_TIME] - d));
                u += (l[f + i.VALUE] - u) * _;
              }
              if (c == e.setup) {
                h.spacing = h.data.spacing + (u - h.data.spacing) * o;
              } else {
                h.spacing += (u - h.spacing) * o;
              }
            }
          }
        };
        return i;
      }(T);
      t.PathConstraintSpacingTimeline = E;
      var A = function (i) {
        function a(e) {
          var n = i.call(this, e) || this;
          n.frames = t.Utils.newFloatArray(e * a.ENTRIES);
          return n;
        }
        s(a, i);
        a.prototype.getPropertyId = function () {
          return (n.pathConstraintMix << 24) + this.pathConstraintIndex;
        };
        a.prototype.setFrame = function (t, e, i, n) {
          t *= a.ENTRIES;
          this.frames[t] = e;
          this.frames[t + a.ROTATE] = i;
          this.frames[t + a.TRANSLATE] = n;
        };
        a.prototype.apply = function (t, i, n, s, o, c) {
          var l = this.frames;
          var h = t.pathConstraints[this.pathConstraintIndex];
          if (h.active) {
            if (n < l[0]) {
              switch (c) {
                case e.setup:
                  h.rotateMix = h.data.rotateMix;
                  return void (h.translateMix = h.data.translateMix);
                case e.first:
                  h.rotateMix += (h.data.rotateMix - h.rotateMix) * o;
                  h.translateMix += (h.data.translateMix - h.translateMix) * o;
              }
            } else {
              var u = 0;
              var f = 0;
              if (n >= l[l.length - a.ENTRIES]) {
                u = l[l.length + a.PREV_ROTATE];
                f = l[l.length + a.PREV_TRANSLATE];
              } else {
                var d = r.binarySearch(l, n, a.ENTRIES);
                u = l[d + a.PREV_ROTATE];
                f = l[d + a.PREV_TRANSLATE];
                var _ = l[d];
                var p = this.getCurvePercent(d / a.ENTRIES - 1, 1 - (n - _) / (l[d + a.PREV_TIME] - _));
                u += (l[d + a.ROTATE] - u) * p;
                f += (l[d + a.TRANSLATE] - f) * p;
              }
              if (c == e.setup) {
                h.rotateMix = h.data.rotateMix + (u - h.data.rotateMix) * o;
                h.translateMix = h.data.translateMix + (f - h.data.translateMix) * o;
              } else {
                h.rotateMix += (u - h.rotateMix) * o;
                h.translateMix += (f - h.translateMix) * o;
              }
            }
          }
        };
        a.ENTRIES = 3;
        a.PREV_TIME = -3;
        a.PREV_ROTATE = -2;
        a.PREV_TRANSLATE = -1;
        a.ROTATE = 1;
        a.TRANSLATE = 2;
        return a;
      }(a);
      t.PathConstraintMixTimeline = A;
    })(r || (r = {}));
    (function (t) {
      var e = function () {
        function e(e) {
          this.tracks = [];
          this.timeScale = 1;
          this.events = [];
          this.listeners = [];
          this.queue = new r(this);
          this.propertyIDs = new t.IntSet();
          this.animationsChanged = false;
          this.trackEntryPool = new t.Pool(function () {
            return new i();
          });
          this.data = e;
        }
        e.prototype.update = function (t) {
          t *= this.timeScale;
          var e = this.tracks;
          var i = 0;
          for (var n = e.length; i < n; i++) {
            var r = e[i];
            if (null != r) {
              r.animationLast = r.nextAnimationLast;
              r.trackLast = r.nextTrackLast;
              var s = t * r.timeScale;
              if (r.delay > 0) {
                r.delay -= s;
                if (r.delay > 0) {
                  continue;
                }
                s = -r.delay;
                r.delay = 0;
              }
              var a = r.next;
              if (null != a) {
                var o = r.trackLast - a.delay;
                if (o >= 0) {
                  a.delay = 0;
                  a.trackTime += 0 == r.timeScale ? 0 : (o / r.timeScale + t) * a.timeScale;
                  r.trackTime += s;
                  for (this.setCurrent(i, a, true); null != a.mixingFrom;) {
                    a.mixTime += t;
                    a = a.mixingFrom;
                  }
                  continue;
                }
              } else if (r.trackLast >= r.trackEnd && null == r.mixingFrom) {
                e[i] = null;
                this.queue.end(r);
                this.disposeNext(r);
                continue;
              }
              if (null != r.mixingFrom && this.updateMixingFrom(r, t)) {
                var c = r.mixingFrom;
                r.mixingFrom = null;
                for (null != c && (c.mixingTo = null); null != c;) {
                  this.queue.end(c);
                  c = c.mixingFrom;
                }
              }
              r.trackTime += s;
            }
          }
          this.queue.drain();
        };
        e.prototype.updateMixingFrom = function (t, e) {
          var i = t.mixingFrom;
          if (null == i) {
            return true;
          }
          var n = this.updateMixingFrom(i, e);
          i.animationLast = i.nextAnimationLast;
          i.trackLast = i.nextTrackLast;
          return t.mixTime > 0 && t.mixTime >= t.mixDuration ? (0 != i.totalAlpha && 0 != t.mixDuration || (t.mixingFrom = i.mixingFrom, null != i.mixingFrom && (i.mixingFrom.mixingTo = t), t.interruptAlpha = i.interruptAlpha, this.queue.end(i)), n) : (i.trackTime += e * i.timeScale, t.mixTime += e, false);
        };
        e.prototype.apply = function (i) {
          if (null == i) {
            throw Error("skeleton cannot be null.");
          }
          if (this.animationsChanged) {
            this._animationsChanged();
          }
          var n = this.events;
          var r = this.tracks;
          var s = false;
          var a = 0;
          for (var o = r.length; a < o; a++) {
            var c = r[a];
            if (!(null == c || c.delay > 0)) {
              s = true;
              var l = 0 == a ? t.MixBlend.first : c.mixBlend;
              var h = c.alpha;
              if (null != c.mixingFrom) {
                h *= this.applyMixingFrom(c, i, l);
              } else if (c.trackTime >= c.trackEnd && null == c.next) {
                h = 0;
              }
              var u = c.animationLast;
              var f = c.getAnimationTime();
              var d = c.animation.timelines.length;
              var _ = c.animation.timelines;
              if (0 == a && 1 == h || l == t.MixBlend.add) {
                for (var p = 0; p < d; p++) {
                  t.Utils.webkit602BugfixHelper(h, l);
                  _[p].apply(i, u, f, n, h, l, t.MixDirection.mixIn);
                }
              } else {
                var v = c.timelineMode;
                var g = 0 == c.timelinesRotation.length;
                if (g) {
                  t.Utils.setArraySize(c.timelinesRotation, d << 1, null);
                }
                var m = c.timelinesRotation;
                for (p = 0; p < d; p++) {
                  var y = _[p];
                  var T = (v[p] & e.NOT_LAST - 1) == e.SUBSEQUENT ? l : t.MixBlend.setup;
                  if (y instanceof t.RotateTimeline) {
                    this.applyRotateTimeline(y, i, f, h, T, m, p << 1, g);
                  } else {
                    t.Utils.webkit602BugfixHelper(h, l);
                    y.apply(i, u, f, n, h, T, t.MixDirection.mixIn);
                  }
                }
              }
              this.queueEvents(c, f);
              n.length = 0;
              c.nextAnimationLast = f;
              c.nextTrackLast = c.trackTime;
            }
          }
          this.queue.drain();
          return s;
        };
        e.prototype.applyMixingFrom = function (i, n, r) {
          var s = i.mixingFrom;
          if (null != s.mixingFrom) {
            this.applyMixingFrom(s, n, r);
          }
          var a = 0;
          if (0 == i.mixDuration) {
            a = 1;
            if (r == t.MixBlend.first) {
              r = t.MixBlend.setup;
            }
          } else {
            if ((a = i.mixTime / i.mixDuration) > 1) {
              a = 1;
            }
            if (r != t.MixBlend.first) {
              r = s.mixBlend;
            }
          }
          var o = a < s.eventThreshold ? this.events : null;
          var c = a < s.attachmentThreshold;
          var l = a < s.drawOrderThreshold;
          var h = s.animationLast;
          var u = s.getAnimationTime();
          var f = s.animation.timelines.length;
          var d = s.animation.timelines;
          var _ = s.alpha * i.interruptAlpha;
          var p = _ * (1 - a);
          if (r == t.MixBlend.add) {
            for (var v = 0; v < f; v++) {
              d[v].apply(n, h, u, o, p, r, t.MixDirection.mixOut);
            }
          } else {
            var g = s.timelineMode;
            var m = s.timelineHoldMix;
            var y = 0 == s.timelinesRotation.length;
            if (y) {
              t.Utils.setArraySize(s.timelinesRotation, f << 1, null);
            }
            var T = s.timelinesRotation;
            s.totalAlpha = 0;
            for (v = 0; v < f; v++) {
              var E = d[v];
              var A = t.MixDirection.mixOut;
              var x = undefined;
              var C = 0;
              switch (g[v] & e.NOT_LAST - 1) {
                case e.SUBSEQUENT:
                  x = r;
                  if (!c && E instanceof t.AttachmentTimeline) {
                    if ((g[v] & e.NOT_LAST) == e.NOT_LAST) {
                      continue;
                    }
                    x = t.MixBlend.setup;
                  }
                  if (!l && E instanceof t.DrawOrderTimeline) {
                    continue;
                  }
                  C = p;
                  break;
                case e.FIRST:
                  x = t.MixBlend.setup;
                  C = p;
                  break;
                case e.HOLD:
                  x = t.MixBlend.setup;
                  C = _;
                  break;
                default:
                  x = t.MixBlend.setup;
                  var b = m[v];
                  C = _ * Math.max(0, 1 - b.mixTime / b.mixDuration);
              }
              s.totalAlpha += C;
              if (E instanceof t.RotateTimeline) {
                this.applyRotateTimeline(E, n, u, C, x, T, v << 1, y);
              } else {
                t.Utils.webkit602BugfixHelper(C, r);
                if (x == t.MixBlend.setup) {
                  if (E instanceof t.AttachmentTimeline) {
                    if (c || (g[v] & e.NOT_LAST) == e.NOT_LAST) {
                      A = t.MixDirection.mixIn;
                    }
                  } else if (E instanceof t.DrawOrderTimeline && l) {
                    A = t.MixDirection.mixIn;
                  }
                }
                E.apply(n, h, u, o, C, x, A);
              }
            }
          }
          if (i.mixDuration > 0) {
            this.queueEvents(s, u);
          }
          this.events.length = 0;
          s.nextAnimationLast = u;
          s.nextTrackLast = s.trackTime;
          return a;
        };
        e.prototype.applyRotateTimeline = function (e, i, n, r, s, a, o, c) {
          if (c) {
            a[o] = 0;
          }
          if (1 != r) {
            var h = e.frames;
            var u = i.bones[e.boneIndex];
            if (u.active) {
              var f = 0;
              var d = 0;
              if (n < h[0]) {
                switch (s) {
                  case t.MixBlend.setup:
                    u.rotation = u.data.rotation;
                  default:
                    return;
                  case t.MixBlend.first:
                    f = u.rotation;
                    d = u.data.rotation;
                }
              } else {
                f = s == t.MixBlend.setup ? u.data.rotation : u.rotation;
                if (n >= h[h.length - t.RotateTimeline.ENTRIES]) {
                  d = u.data.rotation + h[h.length + t.RotateTimeline.PREV_ROTATION];
                } else {
                  var _ = t.Animation.binarySearch(h, n, t.RotateTimeline.ENTRIES);
                  var p = h[_ + t.RotateTimeline.PREV_ROTATION];
                  var v = h[_];
                  var g = e.getCurvePercent((_ >> 1) - 1, 1 - (n - v) / (h[_ + t.RotateTimeline.PREV_TIME] - v));
                  d = h[_ + t.RotateTimeline.ROTATION] - p;
                  d = p + (d -= 360 * (16384 - (16384.499999999996 - d / 360 | 0))) * g + u.data.rotation;
                  d -= 360 * (16384 - (16384.499999999996 - d / 360 | 0));
                }
              }
              var m = 0;
              var y = d - f;
              if (0 == (y -= 360 * (16384 - (16384.499999999996 - y / 360 | 0)))) {
                m = a[o];
              } else {
                var T = 0;
                var E = 0;
                if (c) {
                  T = 0;
                  E = y;
                } else {
                  T = a[o];
                  E = a[o + 1];
                }
                var A = y > 0;
                var x = T >= 0;
                if (t.MathUtils.signum(E) != t.MathUtils.signum(y) && Math.abs(E) <= 90) {
                  if (Math.abs(T) > 180) {
                    T += 360 * t.MathUtils.signum(T);
                  }
                  x = A;
                }
                m = y + T - T % 360;
                if (x != A) {
                  m += 360 * t.MathUtils.signum(T);
                }
                a[o] = m;
              }
              a[o + 1] = y;
              f += m * r;
              u.rotation = f - 360 * (16384 - (16384.499999999996 - f / 360 | 0));
            }
          } else {
            e.apply(i, 0, n, null, 1, s, t.MixDirection.mixIn);
          }
        };
        e.prototype.queueEvents = function (t, e) {
          var i = t.animationStart;
          var n = t.animationEnd;
          var r = n - i;
          var s = t.trackLast % r;
          var a = this.events;
          var o = 0;
          for (var c = a.length; o < c; o++) {
            var l = a[o];
            if (l.time < s) {
              break;
            }
            if (!(l.time > n)) {
              this.queue.event(t, l);
            }
          }
          for ((t.loop ? 0 == r || s > t.trackTime % r : e >= n && t.animationLast < n) && this.queue.complete(t); o < c; o++) {
            if (!(a[o].time < i)) {
              this.queue.event(t, a[o]);
            }
          }
        };
        e.prototype.clearTracks = function () {
          var t = this.queue.drainDisabled;
          this.queue.drainDisabled = true;
          var e = 0;
          for (var i = this.tracks.length; e < i; e++) {
            this.clearTrack(e);
          }
          this.tracks.length = 0;
          this.queue.drainDisabled = t;
          this.queue.drain();
        };
        e.prototype.clearTrack = function (t) {
          if (!(t >= this.tracks.length)) {
            var e = this.tracks[t];
            if (null != e) {
              this.queue.end(e);
              this.disposeNext(e);
              for (var i = e;;) {
                var n = i.mixingFrom;
                if (null == n) {
                  break;
                }
                this.queue.end(n);
                i.mixingFrom = null;
                i.mixingTo = null;
                i = n;
              }
              this.tracks[e.trackIndex] = null;
              this.queue.drain();
            }
          }
        };
        e.prototype.setCurrent = function (t, e, i) {
          var n = this.expandToIndex(t);
          this.tracks[t] = e;
          if (null != n) {
            if (i) {
              this.queue.interrupt(n);
            }
            e.mixingFrom = n;
            n.mixingTo = e;
            e.mixTime = 0;
            if (null != n.mixingFrom && n.mixDuration > 0) {
              e.interruptAlpha *= Math.min(1, n.mixTime / n.mixDuration);
            }
            n.timelinesRotation.length = 0;
          }
          this.queue.start(e);
        };
        e.prototype.setAnimation = function (t, e, i) {
          var n = this.data.skeletonData.findAnimation(e);
          if (null == n) {
            throw Error("Animation not found: " + e);
          }
          return this.setAnimationWith(t, n, i);
        };
        e.prototype.setAnimationWith = function (t, e, i) {
          if (null == e) {
            throw Error("animation cannot be null.");
          }
          var n = true;
          var r = this.expandToIndex(t);
          if (null != r) {
            if (-1 == r.nextTrackLast) {
              this.tracks[t] = r.mixingFrom;
              this.queue.interrupt(r);
              this.queue.end(r);
              this.disposeNext(r);
              r = r.mixingFrom;
              n = false;
            } else {
              this.disposeNext(r);
            }
          }
          var s = this.trackEntry(t, e, i, r);
          this.setCurrent(t, s, n);
          this.queue.drain();
          return s;
        };
        e.prototype.addAnimation = function (t, e, i, n) {
          var r = this.data.skeletonData.findAnimation(e);
          if (null == r) {
            throw Error("Animation not found: " + e);
          }
          return this.addAnimationWith(t, r, i, n);
        };
        e.prototype.addAnimationWith = function (t, e, i, n) {
          if (null == e) {
            throw Error("animation cannot be null.");
          }
          var r = this.expandToIndex(t);
          if (null != r) {
            for (; null != r.next;) {
              r = r.next;
            }
          }
          var s = this.trackEntry(t, e, i, r);
          if (null == r) {
            this.setCurrent(t, s, true);
            this.queue.drain();
          } else {
            r.next = s;
            if (n <= 0) {
              var a = r.animationEnd - r.animationStart;
              if (0 != a) {
                if (r.loop) {
                  n += a * (1 + (r.trackTime / a | 0));
                } else {
                  n += Math.max(a, r.trackTime);
                }
                n -= this.data.getMix(r.animation, e);
              } else {
                n = r.trackTime;
              }
            }
          }
          s.delay = n;
          return s;
        };
        e.prototype.setEmptyAnimation = function (t, i) {
          var n = this.setAnimationWith(t, e.emptyAnimation, false);
          n.mixDuration = i;
          n.trackEnd = i;
          return n;
        };
        e.prototype.addEmptyAnimation = function (t, i, n) {
          if (n <= 0) {
            n -= i;
          }
          var r = this.addAnimationWith(t, e.emptyAnimation, false, n);
          r.mixDuration = i;
          r.trackEnd = i;
          return r;
        };
        e.prototype.setEmptyAnimations = function (t) {
          var e = this.queue.drainDisabled;
          this.queue.drainDisabled = true;
          var i = 0;
          for (var n = this.tracks.length; i < n; i++) {
            var r = this.tracks[i];
            if (null != r) {
              this.setEmptyAnimation(r.trackIndex, t);
            }
          }
          this.queue.drainDisabled = e;
          this.queue.drain();
        };
        e.prototype.expandToIndex = function (e) {
          return e < this.tracks.length ? this.tracks[e] : (t.Utils.ensureArrayCapacity(this.tracks, e + 1, null), this.tracks.length = e + 1, null);
        };
        e.prototype.trackEntry = function (t, e, i, n) {
          var r = this.trackEntryPool.obtain();
          r.trackIndex = t;
          r.animation = e;
          r.loop = i;
          r.holdPrevious = false;
          r.eventThreshold = 0;
          r.attachmentThreshold = 0;
          r.drawOrderThreshold = 0;
          r.animationStart = 0;
          r.animationEnd = e.duration;
          r.animationLast = -1;
          r.nextAnimationLast = -1;
          r.delay = 0;
          r.trackTime = 0;
          r.trackLast = -1;
          r.nextTrackLast = -1;
          r.trackEnd = Number.MAX_VALUE;
          r.timeScale = 1;
          r.alpha = 1;
          r.interruptAlpha = 1;
          r.mixTime = 0;
          r.mixDuration = null == n ? 0 : this.data.getMix(n.animation, e);
          return r;
        };
        e.prototype.disposeNext = function (t) {
          for (var e = t.next; null != e;) {
            this.queue.dispose(e);
            e = e.next;
          }
          t.next = null;
        };
        e.prototype._animationsChanged = function () {
          this.animationsChanged = false;
          this.propertyIDs.clear();
          var e = 0;
          for (var i = this.tracks.length; e < i; e++) {
            if (null != (n = this.tracks[e])) {
              for (; null != n.mixingFrom;) {
                n = n.mixingFrom;
              }
              do {
                if (!(null != n.mixingFrom && n.mixBlend == t.MixBlend.add)) {
                  this.computeHold(n);
                }
                n = n.mixingTo;
              } while (null != n);
            }
          }
          this.propertyIDs.clear();
          for (e = this.tracks.length - 1; e >= 0; e--) {
            for (var n = this.tracks[e]; null != n;) {
              this.computeNotLast(n);
              n = n.mixingFrom;
            }
          }
        };
        e.prototype.computeHold = function (i) {
          var n = i.mixingTo;
          var r = i.animation.timelines;
          var s = i.animation.timelines.length;
          var a = t.Utils.setArraySize(i.timelineMode, s);
          i.timelineHoldMix.length = 0;
          var o = t.Utils.setArraySize(i.timelineHoldMix, s);
          var c = this.propertyIDs;
          if (null != n && n.holdPrevious) {
            for (var l = 0; l < s; l++) {
              c.add(r[l].getPropertyId());
              a[l] = e.HOLD;
            }
          } else {
            t: for (l = 0; l < s; l++) {
              var h = r[l];
              var u = h.getPropertyId();
              if (c.add(u)) {
                if (null == n || h instanceof t.AttachmentTimeline || h instanceof t.DrawOrderTimeline || h instanceof t.EventTimeline || !n.animation.hasTimeline(u)) {
                  a[l] = e.FIRST;
                } else {
                  for (var f = n.mixingTo; null != f; f = f.mixingTo) {
                    if (!f.animation.hasTimeline(u)) {
                      if (i.mixDuration > 0) {
                        a[l] = e.HOLD_MIX;
                        o[l] = f;
                        continue t;
                      }
                      break;
                    }
                  }
                  a[l] = e.HOLD;
                }
              } else {
                a[l] = e.SUBSEQUENT;
              }
            }
          }
        };
        e.prototype.computeNotLast = function (i) {
          var n = i.animation.timelines;
          var r = i.animation.timelines.length;
          var s = i.timelineMode;
          var a = this.propertyIDs;
          for (var o = 0; o < r; o++) {
            if (n[o] instanceof t.AttachmentTimeline) {
              var c = n[o];
              if (!a.add(c.slotIndex)) {
                s[o] |= e.NOT_LAST;
              }
            }
          }
        };
        e.prototype.getCurrent = function (t) {
          return t >= this.tracks.length ? null : this.tracks[t];
        };
        e.prototype.addListener = function (t) {
          if (null == t) {
            throw Error("listener cannot be null.");
          }
          this.listeners.push(t);
        };
        e.prototype.removeListener = function (t) {
          var e = this.listeners.indexOf(t);
          if (e >= 0) {
            this.listeners.splice(e, 1);
          }
        };
        e.prototype.clearListeners = function () {
          this.listeners.length = 0;
        };
        e.prototype.clearListenerNotifications = function () {
          this.queue.clear();
        };
        e.emptyAnimation = new t.Animation("<empty>", [], 0);
        e.SUBSEQUENT = 0;
        e.FIRST = 1;
        e.HOLD = 2;
        e.HOLD_MIX = 3;
        e.NOT_LAST = 4;
        return e;
      }();
      t.AnimationState = e;
      var i = function () {
        function e() {
          this.mixBlend = t.MixBlend.replace;
          this.timelineMode = [];
          this.timelineHoldMix = [];
          this.timelinesRotation = [];
        }
        e.prototype.reset = function () {
          this.next = null;
          this.mixingFrom = null;
          this.mixingTo = null;
          this.animation = null;
          this.listener = null;
          this.timelineMode.length = 0;
          this.timelineHoldMix.length = 0;
          this.timelinesRotation.length = 0;
        };
        e.prototype.getAnimationTime = function () {
          if (this.loop) {
            var t = this.animationEnd - this.animationStart;
            return 0 == t ? this.animationStart : this.trackTime % t + this.animationStart;
          }
          return Math.min(this.trackTime + this.animationStart, this.animationEnd);
        };
        e.prototype.setAnimationLast = function (t) {
          this.animationLast = t;
          this.nextAnimationLast = t;
        };
        e.prototype.isComplete = function () {
          return this.trackTime >= this.animationEnd - this.animationStart;
        };
        e.prototype.resetRotationDirections = function () {
          this.timelinesRotation.length = 0;
        };
        return e;
      }();
      t.TrackEntry = i;
      var n;
      var r = function () {
        function t(t) {
          this.objects = [];
          this.drainDisabled = false;
          this.animState = t;
        }
        t.prototype.start = function (t) {
          this.objects.push(n.start);
          this.objects.push(t);
          this.animState.animationsChanged = true;
        };
        t.prototype.interrupt = function (t) {
          this.objects.push(n.interrupt);
          this.objects.push(t);
        };
        t.prototype.end = function (t) {
          this.objects.push(n.end);
          this.objects.push(t);
          this.animState.animationsChanged = true;
        };
        t.prototype.dispose = function (t) {
          this.objects.push(n.dispose);
          this.objects.push(t);
        };
        t.prototype.complete = function (t) {
          this.objects.push(n.complete);
          this.objects.push(t);
        };
        t.prototype.event = function (t, e) {
          this.objects.push(n.event);
          this.objects.push(t);
          this.objects.push(e);
        };
        t.prototype.drain = function () {
          if (!this.drainDisabled) {
            this.drainDisabled = true;
            var t = this.objects;
            var e = this.animState.listeners;
            for (var i = 0; i < t.length; i += 2) {
              var r = t[i];
              var s = t[i + 1];
              switch (r) {
                case n.start:
                  if (null != s.listener && s.listener.start) {
                    s.listener.start(s);
                  }
                  for (var a = 0; a < e.length; a++) {
                    if (e[a].start) {
                      e[a].start(s);
                    }
                  }
                  break;
                case n.interrupt:
                  if (null != s.listener && s.listener.interrupt) {
                    s.listener.interrupt(s);
                  }
                  for (a = 0; a < e.length; a++) {
                    if (e[a].interrupt) {
                      e[a].interrupt(s);
                    }
                  }
                  break;
                case n.end:
                  if (null != s.listener && s.listener.end) {
                    s.listener.end(s);
                  }
                  for (a = 0; a < e.length; a++) {
                    if (e[a].end) {
                      e[a].end(s);
                    }
                  }
                case n.dispose:
                  if (null != s.listener && s.listener.dispose) {
                    s.listener.dispose(s);
                  }
                  for (a = 0; a < e.length; a++) {
                    if (e[a].dispose) {
                      e[a].dispose(s);
                    }
                  }
                  this.animState.trackEntryPool.free(s);
                  break;
                case n.complete:
                  if (null != s.listener && s.listener.complete) {
                    s.listener.complete(s);
                  }
                  for (a = 0; a < e.length; a++) {
                    if (e[a].complete) {
                      e[a].complete(s);
                    }
                  }
                  break;
                case n.event:
                  var o = t[2 + i++];
                  if (null != s.listener && s.listener.event) {
                    s.listener.event(s, o);
                  }
                  for (a = 0; a < e.length; a++) {
                    if (e[a].event) {
                      e[a].event(s, o);
                    }
                  }
              }
            }
            this.clear();
            this.drainDisabled = false;
          }
        };
        t.prototype.clear = function () {
          this.objects.length = 0;
        };
        return t;
      }();
      t.EventQueue = r;
      (function (t) {
        t[t.start = 0] = "start";
        t[t.interrupt = 1] = "interrupt";
        t[t.end = 2] = "end";
        t[t.dispose = 3] = "dispose";
        t[t.complete = 4] = "complete";
        t[t.event = 5] = "event";
      })(n = t.EventType || (t.EventType = {}));
      var s = function () {
        function t() {}
        t.prototype.start = function () {};
        t.prototype.interrupt = function () {};
        t.prototype.end = function () {};
        t.prototype.dispose = function () {};
        t.prototype.complete = function () {};
        t.prototype.event = function () {};
        return t;
      }();
      t.AnimationStateAdapter = s;
    })(r || (r = {}));
    (function (t) {
      var e = function () {
        function t(t) {
          this.animationToMixTime = {};
          this.defaultMix = 0;
          if (null == t) {
            throw Error("skeletonData cannot be null.");
          }
          this.skeletonData = t;
        }
        t.prototype.setMix = function (t, e, i) {
          var n = this.skeletonData.findAnimation(t);
          if (null == n) {
            throw Error("Animation not found: " + t);
          }
          var r = this.skeletonData.findAnimation(e);
          if (null == r) {
            throw Error("Animation not found: " + e);
          }
          this.setMixWith(n, r, i);
        };
        t.prototype.setMixWith = function (t, e, i) {
          if (null == t) {
            throw Error("from cannot be null.");
          }
          if (null == e) {
            throw Error("to cannot be null.");
          }
          var n = t.name + "." + e.name;
          this.animationToMixTime[n] = i;
        };
        t.prototype.getMix = function (t, e) {
          var i = t.name + "." + e.name;
          var n = this.animationToMixTime[i];
          return undefined === n ? this.defaultMix : n;
        };
        return t;
      }();
      t.AnimationStateData = e;
    })(r || (r = {}));
    (function (t) {
      var e = function () {
        function e(t, e) {
          if (undefined === e) {
            e = "";
          }
          this.assets = {};
          this.errors = {};
          this.toLoad = 0;
          this.loaded = 0;
          this.textureLoader = t;
          this.pathPrefix = e;
        }
        e.downloadText = function (t, e, i) {
          var n = new XMLHttpRequest();
          n.open("GET", t, true);
          n.onload = function () {
            if (200 == n.status) {
              e(n.responseText);
            } else {
              i(n.status, n.responseText);
            }
          };
          n.onerror = function () {
            i(n.status, n.responseText);
          };
          n.send();
        };
        e.downloadBinary = function (t, e, i) {
          var n = new XMLHttpRequest();
          n.open("GET", t, true);
          n.responseType = "arraybuffer";
          n.onload = function () {
            if (200 == n.status) {
              e(new Uint8Array(n.response));
            } else {
              i(n.status, n.responseText);
            }
          };
          n.onerror = function () {
            i(n.status, n.responseText);
          };
          n.send();
        };
        e.prototype.loadBinary = function (t, i, n) {
          var r = this;
          if (undefined === i) {
            i = null;
          }
          if (undefined === n) {
            n = null;
          }
          t = this.pathPrefix + t;
          this.toLoad++;
          e.downloadBinary(t, function (e) {
            r.assets[t] = e;
            if (i) {
              i(t, e);
            }
            r.toLoad--;
            r.loaded++;
          }, function (e, i) {
            r.errors[t] = "Couldn't load binary " + t + ": status " + status + ", " + i;
            if (n) {
              n(t, "Couldn't load binary " + t + ": status " + status + ", " + i);
            }
            r.toLoad--;
            r.loaded++;
          });
        };
        e.prototype.loadText = function (t, i, n) {
          var r = this;
          if (undefined === i) {
            i = null;
          }
          if (undefined === n) {
            n = null;
          }
          t = this.pathPrefix + t;
          this.toLoad++;
          e.downloadText(t, function (e) {
            r.assets[t] = e;
            if (i) {
              i(t, e);
            }
            r.toLoad--;
            r.loaded++;
          }, function (e, i) {
            r.errors[t] = "Couldn't load text " + t + ": status " + status + ", " + i;
            if (n) {
              n(t, "Couldn't load text " + t + ": status " + status + ", " + i);
            }
            r.toLoad--;
            r.loaded++;
          });
        };
        e.prototype.loadTexture = function (t, e, i) {
          var n = this;
          if (undefined === e) {
            e = null;
          }
          if (undefined === i) {
            i = null;
          }
          t = this.pathPrefix + t;
          this.toLoad++;
          var r = new Image();
          r.crossOrigin = "anonymous";
          r.onload = function () {
            var i = n.textureLoader(r);
            n.assets[t] = i;
            n.toLoad--;
            n.loaded++;
            if (e) {
              e(t, r);
            }
          };
          r.onerror = function () {
            n.errors[t] = "Couldn't load image " + t;
            n.toLoad--;
            n.loaded++;
            if (i) {
              i(t, "Couldn't load image " + t);
            }
          };
          r.src = t;
        };
        e.prototype.loadTextureData = function (t, e, i, n) {
          var r = this;
          if (undefined === i) {
            i = null;
          }
          if (undefined === n) {
            n = null;
          }
          t = this.pathPrefix + t;
          this.toLoad++;
          var s = new Image();
          s.onload = function () {
            var e = r.textureLoader(s);
            r.assets[t] = e;
            r.toLoad--;
            r.loaded++;
            if (i) {
              i(t, s);
            }
          };
          s.onerror = function () {
            r.errors[t] = "Couldn't load image " + t;
            r.toLoad--;
            r.loaded++;
            if (n) {
              n(t, "Couldn't load image " + t);
            }
          };
          s.src = e;
        };
        e.prototype.loadTextureAtlas = function (i, n, r) {
          var s = this;
          if (undefined === n) {
            n = null;
          }
          if (undefined === r) {
            r = null;
          }
          var a = i.lastIndexOf("/") >= 0 ? i.substring(0, i.lastIndexOf("/")) : "";
          i = this.pathPrefix + i;
          this.toLoad++;
          e.downloadText(i, function (e) {
            var c = [];
            try {
              new t.TextureAtlas(e, function (e) {
                c.push(a + "/" + e);
                var i = document.createElement("img");
                i.width = 16;
                i.height = 16;
                return new t.FakeTexture(i);
              });
            } catch (d) {
              s.errors[i] = "Couldn't load texture atlas " + i + ": " + d.message;
              if (r) {
                r(i, "Couldn't load texture atlas " + i + ": " + d.message);
              }
              s.toLoad--;
              return void s.loaded++;
            }
            var h = function (l) {
              var h = false;
              s.loadTexture(l, function (l) {
                0++;
                if (0 == c.length) {
                  if (h) {
                    s.errors[i] = "Couldn't load texture atlas page " + l + "} of atlas " + i;
                    if (r) {
                      r(i, "Couldn't load texture atlas page " + l + " of atlas " + i);
                    }
                    s.toLoad--;
                    s.loaded++;
                  } else {
                    try {
                      var u = new t.TextureAtlas(e, function (t) {
                        return s.get(a + "/" + t);
                      });
                      s.assets[i] = u;
                      if (n) {
                        n(i, u);
                      }
                      s.toLoad--;
                      s.loaded++;
                    } catch (d) {
                      s.errors[i] = "Couldn't load texture atlas " + i + ": " + d.message;
                      if (r) {
                        r(i, "Couldn't load texture atlas " + i + ": " + d.message);
                      }
                      s.toLoad--;
                      s.loaded++;
                    }
                  }
                }
              }, function (t) {
                h = true;
                0++;
                if (0 == c.length) {
                  s.errors[i] = "Couldn't load texture atlas page " + t + "} of atlas " + i;
                  if (r) {
                    r(i, "Couldn't load texture atlas page " + t + " of atlas " + i);
                  }
                  s.toLoad--;
                  s.loaded++;
                }
              });
            };
            for (var u = 0; u < c.length; u++) {
              h(c[u]);
            }
          }, function (t, e) {
            s.errors[i] = "Couldn't load texture atlas " + i + ": status " + status + ", " + e;
            if (r) {
              r(i, "Couldn't load texture atlas " + i + ": status " + status + ", " + e);
            }
            s.toLoad--;
            s.loaded++;
          });
        };
        e.prototype.get = function (t) {
          t = this.pathPrefix + t;
          return this.assets[t];
        };
        e.prototype.remove = function (t) {
          t = this.pathPrefix + t;
          var e = this.assets[t];
          if (e.dispose) {
            e.dispose();
          }
          this.assets[t] = null;
        };
        e.prototype.removeAll = function () {
          for (var t in this.assets) {
            var e = this.assets[t];
            if (e.dispose) {
              e.dispose();
            }
          }
          this.assets = {};
        };
        e.prototype.isLoadingComplete = function () {
          return 0 == this.toLoad;
        };
        e.prototype.getToLoad = function () {
          return this.toLoad;
        };
        e.prototype.getLoaded = function () {
          return this.loaded;
        };
        e.prototype.dispose = function () {
          this.removeAll();
        };
        e.prototype.hasErrors = function () {
          return Object.keys(this.errors).length > 0;
        };
        e.prototype.getErrors = function () {
          return this.errors;
        };
        return e;
      }();
      t.AssetManager = e;
    })(r || (r = {}));
    (function (t) {
      var e = function () {
        function e(t) {
          this.atlas = t;
        }
        e.prototype.newRegionAttachment = function (e, i, n) {
          var r = this.atlas.findRegion(n);
          if (null == r) {
            return null;
          }
          r.renderObject = r;
          var s = new t.RegionAttachment(i);
          s.setRegion(r);
          return s;
        };
        e.prototype.newMeshAttachment = function (e, i, n) {
          var r = this.atlas.findRegion(n);
          if (null == r) {
            return null;
          }
          r.renderObject = r;
          var s = new t.MeshAttachment(i);
          s.region = r;
          return s;
        };
        e.prototype.newBoundingBoxAttachment = function (e, i) {
          return new t.BoundingBoxAttachment(i);
        };
        e.prototype.newPathAttachment = function (e, i) {
          return new t.PathAttachment(i);
        };
        e.prototype.newPointAttachment = function (e, i) {
          return new t.PointAttachment(i);
        };
        e.prototype.newClippingAttachment = function (e, i) {
          return new t.ClippingAttachment(i);
        };
        return e;
      }();
      t.AtlasAttachmentLoader = e;
    })(r || (r = {}));
    (function (t) {
      (function (t) {
        t[t.Normal = 0] = "Normal";
        t[t.Additive = 1] = "Additive";
        t[t.Multiply = 2] = "Multiply";
        t[t.Screen = 3] = "Screen";
      })(t.BlendMode || (t.BlendMode = {}));
    })(r || (r = {}));
    (function (t) {
      var e = function () {
        function e(t, e, i) {
          this.children = [];
          this.x = 0;
          this.y = 0;
          this.rotation = 0;
          this.scaleX = 0;
          this.scaleY = 0;
          this.shearX = 0;
          this.shearY = 0;
          this.ax = 0;
          this.ay = 0;
          this.arotation = 0;
          this.ascaleX = 0;
          this.ascaleY = 0;
          this.ashearX = 0;
          this.ashearY = 0;
          this.appliedValid = false;
          this.a = 0;
          this.b = 0;
          this.c = 0;
          this.d = 0;
          this.worldY = 0;
          this.worldX = 0;
          this.sorted = false;
          this.active = false;
          if (null == t) {
            throw Error("data cannot be null.");
          }
          if (null == e) {
            throw Error("skeleton cannot be null.");
          }
          this.data = t;
          this.skeleton = e;
          this.parent = i;
          this.setToSetupPose();
        }
        e.prototype.isActive = function () {
          return this.active;
        };
        e.prototype.update = function () {
          this.updateWorldTransformWith(this.x, this.y, this.rotation, this.scaleX, this.scaleY, this.shearX, this.shearY);
        };
        e.prototype.updateWorldTransform = function () {
          this.updateWorldTransformWith(this.x, this.y, this.rotation, this.scaleX, this.scaleY, this.shearX, this.shearY);
        };
        e.prototype.updateWorldTransformWith = function (e, i, n, r, s, a, o) {
          this.ax = e;
          this.ay = i;
          this.arotation = n;
          this.ascaleX = r;
          this.ascaleY = s;
          this.ashearX = a;
          this.ashearY = o;
          this.appliedValid = true;
          var c = this.parent;
          if (null == c) {
            var l = this.skeleton;
            var h = n + 90 + o;
            var u = l.scaleX;
            var f = l.scaleY;
            this.a = t.MathUtils.cosDeg(n + a) * r * u;
            this.b = t.MathUtils.cosDeg(h) * s * u;
            this.c = t.MathUtils.sinDeg(n + a) * r * f;
            this.d = t.MathUtils.sinDeg(h) * s * f;
            this.worldX = e * u + l.x;
            return void (this.worldY = i * f + l.y);
          }
          var d = c.a;
          var _ = c.b;
          var p = c.c;
          var v = c.d;
          this.worldX = d * e + _ * i + c.worldX;
          this.worldY = p * e + v * i + c.worldY;
          switch (this.data.transformMode) {
            case t.TransformMode.Normal:
              h = n + 90 + o;
              var g = t.MathUtils.cosDeg(n + a) * r;
              var m = t.MathUtils.cosDeg(h) * s;
              var y = t.MathUtils.sinDeg(n + a) * r;
              var T = t.MathUtils.sinDeg(h) * s;
              this.a = d * g + _ * y;
              this.b = d * m + _ * T;
              this.c = p * g + v * y;
              return void (this.d = p * m + v * T);
            case t.TransformMode.OnlyTranslation:
              h = n + 90 + o;
              this.a = t.MathUtils.cosDeg(n + a) * r;
              this.b = t.MathUtils.cosDeg(h) * s;
              this.c = t.MathUtils.sinDeg(n + a) * r;
              this.d = t.MathUtils.sinDeg(h) * s;
              break;
            case t.TransformMode.NoRotationOrReflection:
              var E = 0;
              if ((C = d * d + p * p) > 1e-4) {
                _ = p * (C = Math.abs(d * v - _ * p) / C);
                v = d * C;
                E = Math.atan2(p, d) * t.MathUtils.radDeg;
              } else {
                d = 0;
                p = 0;
                E = 90 - Math.atan2(v, _) * t.MathUtils.radDeg;
              }
              var A = n + a - E;
              var x = n + o - E + 90;
              g = t.MathUtils.cosDeg(A) * r;
              m = t.MathUtils.cosDeg(x) * s;
              y = t.MathUtils.sinDeg(A) * r;
              T = t.MathUtils.sinDeg(x) * s;
              this.a = d * g - _ * y;
              this.b = d * m - _ * T;
              this.c = p * g + v * y;
              this.d = p * m + v * T;
              break;
            case t.TransformMode.NoScale:
            case t.TransformMode.NoScaleOrReflection:
              var C;
              var b = t.MathUtils.cosDeg(n);
              var S = t.MathUtils.sinDeg(n);
              var R = (d * b + _ * S) / this.skeleton.scaleX;
              var M = (p * b + v * S) / this.skeleton.scaleY;
              if ((C = Math.sqrt(R * R + M * M)) > 1e-5) {
                C = 1 / C;
              }
              C = Math.sqrt((R *= C) * R + (M *= C) * M);
              if (this.data.transformMode == t.TransformMode.NoScale && d * v - _ * p < 0 != (this.skeleton.scaleX < 0 != this.skeleton.scaleY < 0)) {
                C = -C;
              }
              var w = Math.PI / 2 + Math.atan2(M, R);
              var I = Math.cos(w) * C;
              var O = Math.sin(w) * C;
              g = t.MathUtils.cosDeg(a) * r;
              m = t.MathUtils.cosDeg(90 + o) * s;
              y = t.MathUtils.sinDeg(a) * r;
              T = t.MathUtils.sinDeg(90 + o) * s;
              this.a = R * g + I * y;
              this.b = R * m + I * T;
              this.c = M * g + O * y;
              this.d = M * m + O * T;
          }
          this.a *= this.skeleton.scaleX;
          this.b *= this.skeleton.scaleX;
          this.c *= this.skeleton.scaleY;
          this.d *= this.skeleton.scaleY;
        };
        e.prototype.setToSetupPose = function () {
          var t = this.data;
          this.x = t.x;
          this.y = t.y;
          this.rotation = t.rotation;
          this.scaleX = t.scaleX;
          this.scaleY = t.scaleY;
          this.shearX = t.shearX;
          this.shearY = t.shearY;
        };
        e.prototype.getWorldRotationX = function () {
          return Math.atan2(this.c, this.a) * t.MathUtils.radDeg;
        };
        e.prototype.getWorldRotationY = function () {
          return Math.atan2(this.d, this.b) * t.MathUtils.radDeg;
        };
        e.prototype.getWorldScaleX = function () {
          return Math.sqrt(this.a * this.a + this.c * this.c);
        };
        e.prototype.getWorldScaleY = function () {
          return Math.sqrt(this.b * this.b + this.d * this.d);
        };
        e.prototype.updateAppliedTransform = function () {
          this.appliedValid = true;
          var e = this.parent;
          if (null == e) {
            this.ax = this.worldX;
            this.ay = this.worldY;
            this.arotation = Math.atan2(this.c, this.a) * t.MathUtils.radDeg;
            this.ascaleX = Math.sqrt(this.a * this.a + this.c * this.c);
            this.ascaleY = Math.sqrt(this.b * this.b + this.d * this.d);
            this.ashearX = 0;
            return void (this.ashearY = Math.atan2(this.a * this.b + this.c * this.d, this.a * this.d - this.b * this.c) * t.MathUtils.radDeg);
          }
          var i = e.a;
          var n = e.b;
          var r = e.c;
          var s = e.d;
          var a = 1 / (i * s - n * r);
          var o = this.worldX - e.worldX;
          var c = this.worldY - e.worldY;
          this.ax = o * s * a - c * n * a;
          this.ay = c * i * a - o * r * a;
          var l = a * s;
          var h = a * i;
          var u = a * n;
          var f = a * r;
          var d = l * this.a - u * this.c;
          var _ = l * this.b - u * this.d;
          var p = h * this.c - f * this.a;
          var v = h * this.d - f * this.b;
          this.ashearX = 0;
          this.ascaleX = Math.sqrt(d * d + p * p);
          if (this.ascaleX > 1e-4) {
            var g = d * v - _ * p;
            this.ascaleY = g / this.ascaleX;
            this.ashearY = Math.atan2(d * _ + p * v, g) * t.MathUtils.radDeg;
            this.arotation = Math.atan2(p, d) * t.MathUtils.radDeg;
          } else {
            this.ascaleX = 0;
            this.ascaleY = Math.sqrt(_ * _ + v * v);
            this.ashearY = 0;
            this.arotation = 90 - Math.atan2(v, _) * t.MathUtils.radDeg;
          }
        };
        e.prototype.worldToLocal = function (t) {
          var e = this.a;
          var i = this.b;
          var n = this.c;
          var r = this.d;
          var s = 1 / (e * r - i * n);
          var a = t.x - this.worldX;
          var o = t.y - this.worldY;
          t.x = a * r * s - o * i * s;
          t.y = o * e * s - a * n * s;
          return t;
        };
        e.prototype.localToWorld = function (t) {
          var e = t.x;
          var i = t.y;
          t.x = e * this.a + i * this.b + this.worldX;
          t.y = e * this.c + i * this.d + this.worldY;
          return t;
        };
        e.prototype.worldToLocalRotation = function (e) {
          var i = t.MathUtils.sinDeg(e);
          var n = t.MathUtils.cosDeg(e);
          return Math.atan2(this.a * i - this.c * n, this.d * n - this.b * i) * t.MathUtils.radDeg + this.rotation - this.shearX;
        };
        e.prototype.localToWorldRotation = function (e) {
          e -= this.rotation - this.shearX;
          var i = t.MathUtils.sinDeg(e);
          var n = t.MathUtils.cosDeg(e);
          return Math.atan2(n * this.c + i * this.d, n * this.a + i * this.b) * t.MathUtils.radDeg;
        };
        e.prototype.rotateWorld = function (e) {
          var i = this.a;
          var n = this.b;
          var r = this.c;
          var s = this.d;
          var a = t.MathUtils.cosDeg(e);
          var o = t.MathUtils.sinDeg(e);
          this.a = a * i - o * r;
          this.b = a * n - o * s;
          this.c = o * i + a * r;
          this.d = o * n + a * s;
          this.appliedValid = false;
        };
        return e;
      }();
      t.Bone = e;
    })(r || (r = {}));
    (function (t) {
      var e;
      t.BoneData = function (i, n, r) {
        this.x = 0;
        this.y = 0;
        this.rotation = 0;
        this.scaleX = 1;
        this.scaleY = 1;
        this.shearX = 0;
        this.shearY = 0;
        this.transformMode = e.Normal;
        this.skinRequired = false;
        this.color = new t.Color();
        if (i < 0) {
          throw Error("index must be >= 0.");
        }
        if (null == n) {
          throw Error("name cannot be null.");
        }
        this.index = i;
        this.name = n;
        this.parent = r;
      };
      (function (t) {
        t[t.Normal = 0] = "Normal";
        t[t.OnlyTranslation = 1] = "OnlyTranslation";
        t[t.NoRotationOrReflection = 2] = "NoRotationOrReflection";
        t[t.NoScale = 3] = "NoScale";
        t[t.NoScaleOrReflection = 4] = "NoScaleOrReflection";
      })(e = t.TransformMode || (t.TransformMode = {}));
    })(r || (r = {}));
    (function (t) {
      t.ConstraintData = function (t, e, i) {
        this.name = t;
        this.order = e;
        this.skinRequired = i;
      };
    })(r || (r = {}));
    (function (t) {
      t.Event = function (t, e) {
        if (null == e) {
          throw Error("data cannot be null.");
        }
        this.time = t;
        this.data = e;
      };
    })(r || (r = {}));
    (function (t) {
      t.EventData = function (t) {
        this.name = t;
      };
    })(r || (r = {}));
    (function (t) {
      var e = function () {
        function e(t, e) {
          this.bendDirection = 0;
          this.compress = false;
          this.stretch = false;
          this.mix = 1;
          this.softness = 0;
          this.active = false;
          if (null == t) {
            throw Error("data cannot be null.");
          }
          if (null == e) {
            throw Error("skeleton cannot be null.");
          }
          this.data = t;
          this.mix = t.mix;
          this.softness = t.softness;
          this.bendDirection = t.bendDirection;
          this.compress = t.compress;
          this.stretch = t.stretch;
          this.bones = [];
          for (var i = 0; i < t.bones.length; i++) {
            this.bones.push(e.findBone(t.bones[i].name));
          }
          this.target = e.findBone(t.target.name);
        }
        e.prototype.isActive = function () {
          return this.active;
        };
        e.prototype.apply = function () {
          this.update();
        };
        e.prototype.update = function () {
          var t = this.target;
          var e = this.bones;
          switch (e.length) {
            case 1:
              this.apply1(e[0], t.worldX, t.worldY, this.compress, this.stretch, this.data.uniform, this.mix);
              break;
            case 2:
              this.apply2(e[0], e[1], t.worldX, t.worldY, this.bendDirection, this.stretch, this.softness, this.mix);
          }
        };
        e.prototype.apply1 = function (e, i, n, r, s, a, o) {
          if (!e.appliedValid) {
            e.updateAppliedTransform();
          }
          var c = e.parent;
          var l = 1 / (c.a * c.d - c.b * c.c);
          var h = i - c.worldX;
          var u = n - c.worldY;
          var f = (h * c.d - u * c.b) * l - e.ax;
          var d = (u * c.a - h * c.c) * l - e.ay;
          var _ = Math.atan2(d, f) * t.MathUtils.radDeg - e.ashearX - e.arotation;
          if (e.ascaleX < 0) {
            _ += 180;
          }
          if (_ > 180) {
            _ -= 360;
          } else if (_ < -180) {
            _ += 360;
          }
          var p = e.ascaleX;
          var v = e.ascaleY;
          if (r || s) {
            var g = e.data.length * p;
            var m = Math.sqrt(f * f + d * d);
            if (r && m < g || s && m > g && g > 1e-4) {
              var y = (m / g - 1) * o + 1;
              p *= y;
              if (a) {
                v *= y;
              }
            }
          }
          e.updateWorldTransformWith(e.ax, e.ay, e.arotation + _ * o, p, v, e.ashearX, e.ashearY);
        };
        e.prototype.apply2 = function (e, i, n, r, s, a, o, c) {
          if (0 != c) {
            if (!e.appliedValid) {
              e.updateAppliedTransform();
            }
            if (!i.appliedValid) {
              i.updateAppliedTransform();
            }
            var l = e.ax;
            var h = e.ay;
            var u = e.ascaleX;
            var f = u;
            var d = e.ascaleY;
            var _ = i.ascaleX;
            var p = 0;
            var v = 0;
            var g = 0;
            if (u < 0) {
              u = -u;
              p = 180;
              g = -1;
            } else {
              p = 0;
              g = 1;
            }
            if (d < 0) {
              d = -d;
              g = -g;
            }
            if (_ < 0) {
              _ = -_;
              v = 180;
            } else {
              v = 0;
            }
            var m = i.ax;
            var y = 0;
            var T = 0;
            var E = 0;
            var A = e.a;
            var x = e.b;
            var C = e.c;
            var b = e.d;
            var S = Math.abs(u - d) <= 1e-4;
            if (S) {
              T = A * m + x * (y = i.ay) + e.worldX;
              E = C * m + b * y + e.worldY;
            } else {
              y = 0;
              T = A * m + e.worldX;
              E = C * m + e.worldY;
            }
            var R = e.parent;
            A = R.a;
            x = R.b;
            C = R.c;
            var M;
            var w;
            var I = 1 / (A * (b = R.d) - x * C);
            var O = T - R.worldX;
            var L = E - R.worldY;
            var P = (O * b - L * x) * I - l;
            var D = (L * A - O * C) * I - h;
            var N = Math.sqrt(P * P + D * D);
            var F = i.data.length * _;
            if (N < 1e-4) {
              this.apply1(e, n, r, false, a, false, c);
              return void i.updateWorldTransformWith(m, y, 0, i.ascaleX, i.ascaleY, i.ashearX, i.ashearY);
            }
            var B = ((O = n - R.worldX) * b - (L = r - R.worldY) * x) * I - l;
            var V = (L * A - O * C) * I - h;
            var k = B * B + V * V;
            if (0 != o) {
              o *= u * (_ + 1) / 2;
              var U = Math.sqrt(k);
              var z = U - N - F * u + o;
              if (z > 0) {
                var G = Math.min(1, z / (2 * o)) - 1;
                k = (B -= (G = (z - o * (1 - G * G)) / U) * B) * B + (V -= G * V) * V;
              }
            }
            t: if (S) {
              var H = (k - N * N - (F *= u) * F) / (2 * N * F);
              if (H < -1) {
                H = -1;
              } else if (H > 1) {
                H = 1;
                if (a) {
                  f *= (Math.sqrt(k) / (N + F) - 1) * c + 1;
                }
              }
              M = Math.atan2(V * (A = N + F * H) - B * (x = F * Math.sin(w = Math.acos(H) * s)), B * A + V * x);
            } else {
              var W = (A = u * F) * A;
              var X = (x = d * F) * x;
              var Y = Math.atan2(V, B);
              var j = -2 * X * N;
              var q = X - W;
              if ((b = j * j - 4 * q * (C = X * N * N + W * k - W * X)) >= 0) {
                var Z = Math.sqrt(b);
                if (j < 0) {
                  Z = -Z;
                }
                var K = (Z = -(j + Z) / 2) / q;
                var Q = C / Z;
                var J = Math.abs(K) < Math.abs(Q) ? K : Q;
                if (J * J <= k) {
                  M = Y - Math.atan2(L = Math.sqrt(k - J * J) * s, J);
                  w = Math.atan2(L / d, (J - N) / u);
                  break t;
                }
              }
              var $ = t.MathUtils.PI;
              var tt = N - A;
              var et = tt * tt;
              var it = 0;
              var nt = 0;
              var rt = N + A;
              var st = rt * rt;
              var at = 0;
              if ((C = -A * N / (W - X)) >= -1 && C <= 1) {
                if ((b = (O = A * Math.cos(C = Math.acos(C)) + N) * O + (L = x * Math.sin(C)) * L) < et) {
                  $ = C;
                  et = b;
                  tt = O;
                  it = L;
                }
                if (b > st) {
                  nt = C;
                  st = b;
                  rt = O;
                  at = L;
                }
              }
              if (k <= (et + st) / 2) {
                M = Y - Math.atan2(it * s, tt);
                w = $ * s;
              } else {
                M = Y - Math.atan2(at * s, rt);
                w = nt * s;
              }
            }
            var ot = Math.atan2(y, m) * g;
            var ct = e.arotation;
            if ((M = (M - ot) * t.MathUtils.radDeg + p - ct) > 180) {
              M -= 360;
            } else if (M < -180) {
              M += 360;
            }
            e.updateWorldTransformWith(l, h, ct + M * c, f, e.ascaleY, 0, 0);
            ct = i.arotation;
            if ((w = ((w + ot) * t.MathUtils.radDeg - i.ashearX) * g + v - ct) > 180) {
              w -= 360;
            } else if (w < -180) {
              w += 360;
            }
            i.updateWorldTransformWith(m, y, ct + w * c, i.ascaleX, i.ascaleY, i.ashearX, i.ashearY);
          } else {
            i.updateWorldTransform();
          }
        };
        return e;
      }();
      t.IkConstraint = e;
    })(r || (r = {}));
    (function (t) {
      var e = function (t) {
        function e(e) {
          var i = t.call(this, e, 0, false) || this;
          i.bones = [];
          i.bendDirection = 1;
          i.compress = false;
          i.stretch = false;
          i.uniform = false;
          i.mix = 1;
          i.softness = 0;
          return i;
        }
        s(e, t);
        return e;
      }(t.ConstraintData);
      t.IkConstraintData = e;
    })(r || (r = {}));
    (function (t) {
      var e = function () {
        function e(t, e) {
          this.position = 0;
          this.spacing = 0;
          this.rotateMix = 0;
          this.translateMix = 0;
          this.spaces = [];
          this.positions = [];
          this.world = [];
          this.curves = [];
          this.lengths = [];
          this.segments = [];
          this.active = false;
          if (null == t) {
            throw Error("data cannot be null.");
          }
          if (null == e) {
            throw Error("skeleton cannot be null.");
          }
          this.data = t;
          this.bones = [];
          var i = 0;
          for (var n = t.bones.length; i < n; i++) {
            this.bones.push(e.findBone(t.bones[i].name));
          }
          this.target = e.findSlot(t.target.name);
          this.position = t.position;
          this.spacing = t.spacing;
          this.rotateMix = t.rotateMix;
          this.translateMix = t.translateMix;
        }
        e.prototype.isActive = function () {
          return this.active;
        };
        e.prototype.apply = function () {
          this.update();
        };
        e.prototype.update = function () {
          var i = this.target.getAttachment();
          if (i instanceof t.PathAttachment) {
            var n = this.rotateMix;
            var r = this.translateMix;
            var s = n > 0;
            if (r > 0 || s) {
              var a = this.data;
              var o = a.spacingMode == t.SpacingMode.Percent;
              var c = a.rotateMode;
              var l = c == t.RotateMode.Tangent;
              var h = c == t.RotateMode.ChainScale;
              var u = this.bones.length;
              var f = l ? u : u + 1;
              var d = this.bones;
              var _ = t.Utils.setArraySize(this.spaces, f);
              var p = null;
              var v = this.spacing;
              if (h || !o) {
                if (h) {
                  p = t.Utils.setArraySize(this.lengths, u);
                }
                var g = a.spacingMode == t.SpacingMode.Length;
                var m = 0;
                for (var y = f - 1; m < y;) {
                  var T = (O = d[m]).data.length;
                  if (T < e.epsilon) {
                    if (h) {
                      p[m] = 0;
                    }
                    _[++m] = 0;
                  } else if (o) {
                    if (h) {
                      var E = T * O.a;
                      var A = T * O.c;
                      var x = Math.sqrt(E * E + A * A);
                      p[m] = x;
                    }
                    _[++m] = v;
                  } else {
                    E = T * O.a;
                    A = T * O.c;
                    var C = Math.sqrt(E * E + A * A);
                    if (h) {
                      p[m] = C;
                    }
                    _[++m] = (g ? T + v : v) * C / T;
                  }
                }
              } else {
                for (m = 1; m < f; m++) {
                  _[m] = v;
                }
              }
              var b = this.computeWorldPositions(i, f, l, a.positionMode == t.PositionMode.Percent, o);
              var S = b[0];
              var R = b[1];
              var M = a.offsetRotation;
              var w = false;
              if (0 == M) {
                w = c == t.RotateMode.Chain;
              } else {
                w = false;
                M *= (I = this.target.bone).a * I.d - I.b * I.c > 0 ? t.MathUtils.degRad : -t.MathUtils.degRad;
              }
              m = 0;
              for (var I = 3; m < u; m++, I += 3) {
                var O;
                (O = d[m]).worldX += (S - O.worldX) * r;
                O.worldY += (R - O.worldY) * r;
                var L = (E = b[I]) - S;
                var P = (A = b[I + 1]) - R;
                if (h) {
                  var D = p[m];
                  if (0 != D) {
                    var N = (Math.sqrt(L * L + P * P) / D - 1) * n + 1;
                    O.a *= N;
                    O.c *= N;
                  }
                }
                S = E;
                R = A;
                if (s) {
                  var F = O.a;
                  var B = O.b;
                  var V = O.c;
                  var k = O.d;
                  var U = 0;
                  var z = 0;
                  var G = 0;
                  U = l ? b[I - 1] : 0 == _[m + 1] ? b[I + 2] : Math.atan2(P, L);
                  U -= Math.atan2(V, F);
                  if (w) {
                    z = Math.cos(U);
                    G = Math.sin(U);
                    var H = O.data.length;
                    S += (H * (z * F - G * V) - L) * n;
                    R += (H * (G * F + z * V) - P) * n;
                  } else {
                    U += M;
                  }
                  if (U > t.MathUtils.PI) {
                    U -= t.MathUtils.PI2;
                  } else if (U < -t.MathUtils.PI) {
                    U += t.MathUtils.PI2;
                  }
                  z = Math.cos(U *= n);
                  G = Math.sin(U);
                  O.a = z * F - G * V;
                  O.b = z * B - G * k;
                  O.c = G * F + z * V;
                  O.d = G * B + z * k;
                }
                O.appliedValid = false;
              }
            }
          }
        };
        e.prototype.computeWorldPositions = function (i, n, r, s, a) {
          var o = this.target;
          var c = this.position;
          var l = this.spaces;
          var h = t.Utils.setArraySize(this.positions, 3 * n + 2);
          var u = null;
          var f = i.closed;
          var d = i.worldVerticesLength;
          var _ = d / 6;
          var p = e.NONE;
          if (!i.constantSpeed) {
            var v = i.lengths;
            var g = v[_ -= f ? 1 : 2];
            if (s) {
              c *= g;
            }
            if (a) {
              for (var m = 1; m < n; m++) {
                l[m] *= g;
              }
            }
            u = t.Utils.setArraySize(this.world, 8);
            m = 0;
            var y = 0;
            for (var T = 0; m < n; m++, y += 3) {
              var E = c += X = l[m];
              if (f) {
                if ((E %= g) < 0) {
                  E += g;
                }
                T = 0;
              } else {
                if (E < 0) {
                  if (p != e.BEFORE) {
                    p = e.BEFORE;
                    i.computeWorldVertices(o, 2, 4, u, 0, 2);
                  }
                  this.addBeforePosition(E, u, 0, h, y);
                  continue;
                }
                if (E > g) {
                  if (p != e.AFTER) {
                    p = e.AFTER;
                    i.computeWorldVertices(o, d - 6, 4, u, 0, 2);
                  }
                  this.addAfterPosition(E - g, u, 0, h, y);
                  continue;
                }
              }
              for (;; T++) {
                var A = v[T];
                if (!(E > A)) {
                  if (0 == T) {
                    E /= A;
                  } else {
                    E = (E - (Z = v[T - 1])) / (A - Z);
                  }
                  break;
                }
              }
              if (T != p) {
                p = T;
                if (f && T == _) {
                  i.computeWorldVertices(o, d - 4, 4, u, 0, 2);
                  i.computeWorldVertices(o, 0, 4, u, 4, 2);
                } else {
                  i.computeWorldVertices(o, 6 * T + 2, 8, u, 0, 2);
                }
              }
              this.addCurvePosition(E, u[0], u[1], u[2], u[3], u[4], u[5], u[6], u[7], h, y, r || m > 0 && 0 == X);
            }
            return h;
          }
          if (f) {
            d += 2;
            u = t.Utils.setArraySize(this.world, d);
            i.computeWorldVertices(o, 2, d - 4, u, 0, 2);
            i.computeWorldVertices(o, 0, 2, u, d - 4, 2);
            u[d - 2] = u[0];
            u[d - 1] = u[1];
          } else {
            _--;
            d -= 4;
            u = t.Utils.setArraySize(this.world, d);
            i.computeWorldVertices(o, 2, d, u, 0, 2);
          }
          var x = t.Utils.setArraySize(this.curves, _);
          var C = 0;
          var b = u[0];
          var S = u[1];
          var R = 0;
          var M = 0;
          var w = 0;
          var I = 0;
          var O = 0;
          var L = 0;
          var P = 0;
          var D = 0;
          var N = 0;
          var F = 0;
          var B = 0;
          var V = 0;
          var k = 0;
          var U = 0;
          for (var z = 2; m < _; m++, z += 6) {
            var x;
            var C;
            var b;
            var S;
            var R;
            var M;
            var w;
            var I;
            var O;
            var L;
            var P;
            var D;
            var N;
            var F;
            var B;
            var V;
            var k;
            var U;
            var z;
            R = u[z];
            M = u[z + 1];
            w = u[z + 2];
            I = u[z + 3];
            B = 2 * (P = .1875 * (b - 2 * R + w)) + (N = .09375 * (3 * (R - w) - b + (O = u[z + 4])));
            V = 2 * (D = .1875 * (S - 2 * M + I)) + (F = .09375 * (3 * (M - I) - S + (L = u[z + 5])));
            C += Math.sqrt((k = .75 * (R - b) + P + .16666667 * N) * k + (U = .75 * (M - S) + D + .16666667 * F) * U);
            k += B;
            U += V;
            B += N;
            V += F;
            C += Math.sqrt(k * k + U * U);
            C += Math.sqrt((k += B) * k + (U += V) * U);
            C += Math.sqrt((k += B + N) * k + (U += V + F) * U);
            x[m] = C;
            b = O;
            S = L;
          }
          c *= s ? C : C / i.lengths[_ - 1];
          if (a) {
            for (m = 1; m < n; m++) {
              l[m] *= C;
            }
          }
          var G = this.segments;
          var H = 0;
          for (var W = 0; m < n; m++, y += 3) {
            var G;
            var H;
            var W;
            var X;
            E = c += X = l[m];
            if (f) {
              if ((E %= C) < 0) {
                E += C;
              }
              T = 0;
            } else {
              if (E < 0) {
                this.addBeforePosition(E, u, 0, h, y);
                continue;
              }
              if (E > C) {
                this.addAfterPosition(E - C, u, d - 4, h, y);
                continue;
              }
            }
            for (;; T++) {
              var Y = x[T];
              if (!(E > Y)) {
                if (0 == T) {
                  E /= Y;
                } else {
                  E = (E - (Z = x[T - 1])) / (Y - Z);
                }
                break;
              }
            }
            if (T != p) {
              p = T;
              var j = 6 * T;
              b = u[j];
              S = u[j + 1];
              R = u[j + 2];
              M = u[j + 3];
              w = u[j + 4];
              I = u[j + 5];
              B = 2 * (P = .03 * (b - 2 * R + w)) + (N = .006 * (3 * (R - w) - b + (O = u[j + 6])));
              V = 2 * (D = .03 * (S - 2 * M + I)) + (F = .006 * (3 * (M - I) - S + (L = u[j + 7])));
              H = Math.sqrt((k = .3 * (R - b) + P + .16666667 * N) * k + (U = .3 * (M - S) + D + .16666667 * F) * U);
              G[0] = H;
              for (j = 1; j < 8; j++) {
                k += B;
                U += V;
                B += N;
                V += F;
                H += Math.sqrt(k * k + U * U);
                G[j] = H;
              }
              H += Math.sqrt((k += B) * k + (U += V) * U);
              G[8] = H;
              H += Math.sqrt((k += B + N) * k + (U += V + F) * U);
              G[9] = H;
              W = 0;
            }
            for (E *= H;; W++) {
              var q = G[W];
              if (!(E > q)) {
                var Z;
                if (0 == W) {
                  E /= q;
                } else {
                  E = W + (E - (Z = G[W - 1])) / (q - Z);
                }
                break;
              }
            }
            this.addCurvePosition(.1 * E, b, S, R, M, w, I, O, L, h, y, r || m > 0 && 0 == X);
          }
          return h;
        };
        e.prototype.addBeforePosition = function (t, e, i, n, r) {
          var s = e[i];
          var a = e[i + 1];
          var o = e[i + 2] - s;
          var c = e[i + 3] - a;
          var l = Math.atan2(c, o);
          n[r] = s + t * Math.cos(l);
          n[r + 1] = a + t * Math.sin(l);
          n[r + 2] = l;
        };
        e.prototype.addAfterPosition = function (t, e, i, n, r) {
          var s = e[i + 2];
          var a = e[i + 3];
          var o = s - e[i];
          var c = a - e[i + 1];
          var l = Math.atan2(c, o);
          n[r] = s + t * Math.cos(l);
          n[r + 1] = a + t * Math.sin(l);
          n[r + 2] = l;
        };
        e.prototype.addCurvePosition = function (t, e, i, n, r, s, a, o, c, l, h, u) {
          if (0 == t || isNaN(t)) {
            l[h] = e;
            l[h + 1] = i;
            return void (l[h + 2] = Math.atan2(r - i, n - e));
          }
          var f = t * t;
          var d = f * t;
          var _ = 1 - t;
          var p = _ * _;
          var v = p * _;
          var g = _ * t;
          var m = 3 * g;
          var y = _ * m;
          var T = m * t;
          var E = e * v + n * y + s * T + o * d;
          var A = i * v + r * y + a * T + c * d;
          l[h] = E;
          l[h + 1] = A;
          if (u) {
            l[h + 2] = t < .001 ? Math.atan2(r - i, n - e) : Math.atan2(A - (i * p + r * g * 2 + a * f), E - (e * p + n * g * 2 + s * f));
          }
        };
        e.NONE = -1;
        e.BEFORE = -2;
        e.AFTER = -3;
        e.epsilon = 1e-5;
        return e;
      }();
      t.PathConstraint = e;
    })(r || (r = {}));
    (function (t) {
      var e = function (t) {
        function e(e) {
          var i = t.call(this, e, 0, false) || this;
          i.bones = [];
          return i;
        }
        s(e, t);
        return e;
      }(t.ConstraintData);
      t.PathConstraintData = e;
      (function (t) {
        t[t.Fixed = 0] = "Fixed";
        t[t.Percent = 1] = "Percent";
      })(t.PositionMode || (t.PositionMode = {}));
      (function (t) {
        t[t.Length = 0] = "Length";
        t[t.Fixed = 1] = "Fixed";
        t[t.Percent = 2] = "Percent";
      })(t.SpacingMode || (t.SpacingMode = {}));
      (function (t) {
        t[t.Tangent = 0] = "Tangent";
        t[t.Chain = 1] = "Chain";
        t[t.ChainScale = 2] = "ChainScale";
      })(t.RotateMode || (t.RotateMode = {}));
    })(r || (r = {}));
    (function (t) {
      var e = function () {
        function t(t) {
          this.toLoad = [];
          this.assets = {};
          this.clientId = t;
        }
        t.prototype.loaded = function () {
          var t = 0;
          for (var e in this.assets) t++;
          return t;
        };
        return t;
      }();
      var i = function () {
        function t(t) {
          if (undefined === t) {
            t = "";
          }
          this.clientAssets = {};
          this.queuedAssets = {};
          this.rawAssets = {};
          this.errors = {};
          this.pathPrefix = t;
        }
        t.prototype.queueAsset = function (t, i, n) {
          var r = this.clientAssets[t];
          if (null == r) {
            r = new e(t);
            this.clientAssets[t] = r;
          }
          if (null !== i) {
            r.textureLoader = i;
          }
          r.toLoad.push(n);
          return this.queuedAssets[n] !== n && (this.queuedAssets[n] = n, true);
        };
        t.prototype.loadText = function (t, e) {
          var i = this;
          e = this.pathPrefix + e;
          if (this.queueAsset(t, null, e)) {
            var n = new XMLHttpRequest();
            n.onreadystatechange = function () {
              if (n.readyState == XMLHttpRequest.DONE) {
                if (n.status >= 200 && n.status < 300) {
                  i.rawAssets[e] = n.responseText;
                } else {
                  i.errors[e] = "Couldn't load text " + e + ": status " + n.status + ", " + n.responseText;
                }
              }
            };
            n.open("GET", e, true);
            n.send();
          }
        };
        t.prototype.loadJson = function (t, e) {
          var i = this;
          e = this.pathPrefix + e;
          if (this.queueAsset(t, null, e)) {
            var n = new XMLHttpRequest();
            n.onreadystatechange = function () {
              if (n.readyState == XMLHttpRequest.DONE) {
                if (n.status >= 200 && n.status < 300) {
                  i.rawAssets[e] = JSON.parse(n.responseText);
                } else {
                  i.errors[e] = "Couldn't load text " + e + ": status " + n.status + ", " + n.responseText;
                }
              }
            };
            n.open("GET", e, true);
            n.send();
          }
        };
        t.prototype.loadTexture = function (t, e, i) {
          var n = this;
          i = this.pathPrefix + i;
          if (this.queueAsset(t, e, i)) {
            var r = new Image();
            r.src = i;
            r.crossOrigin = "anonymous";
            r.onload = function () {
              n.rawAssets[i] = r;
            };
            r.onerror = function () {
              n.errors[i] = "Couldn't load image " + i;
            };
          }
        };
        t.prototype.get = function (t, e) {
          e = this.pathPrefix + e;
          var i = this.clientAssets[t];
          return null == i || i.assets[e];
        };
        t.prototype.updateClientAssets = function (t) {
          for (var e = 0; e < t.toLoad.length; e++) {
            var i = t.toLoad[e];
            if (null == t.assets[i]) {
              var n = this.rawAssets[i];
              if (null == n) {
                continue;
              }
              if (n instanceof HTMLImageElement) {
                t.assets[i] = t.textureLoader(n);
              } else {
                t.assets[i] = n;
              }
            }
          }
        };
        t.prototype.isLoadingComplete = function (t) {
          var e = this.clientAssets[t];
          return null == e || (this.updateClientAssets(e), e.toLoad.length == e.loaded());
        };
        t.prototype.dispose = function () {};
        t.prototype.hasErrors = function () {
          return Object.keys(this.errors).length > 0;
        };
        t.prototype.getErrors = function () {
          return this.errors;
        };
        return t;
      }();
      t.SharedAssetManager = i;
    })(r || (r = {}));
    (function (t) {
      var e = function () {
        function e(e) {
          this._updateCache = [];
          this.updateCacheReset = [];
          this.time = 0;
          this.scaleX = 1;
          this.scaleY = 1;
          this.x = 0;
          this.y = 0;
          if (null == e) {
            throw Error("data cannot be null.");
          }
          this.data = e;
          this.bones = [];
          for (var i = 0; i < e.bones.length; i++) {
            var n = e.bones[i];
            var r = undefined;
            if (null == n.parent) {
              r = new t.Bone(n, this, null);
            } else {
              var s = this.bones[n.parent.index];
              r = new t.Bone(n, this, s);
              s.children.push(r);
            }
            this.bones.push(r);
          }
          this.slots = [];
          this.drawOrder = [];
          for (i = 0; i < e.slots.length; i++) {
            var a = e.slots[i];
            r = this.bones[a.boneData.index];
            var o = new t.Slot(a, r);
            this.slots.push(o);
            this.drawOrder.push(o);
          }
          this.ikConstraints = [];
          for (i = 0; i < e.ikConstraints.length; i++) {
            var c = e.ikConstraints[i];
            this.ikConstraints.push(new t.IkConstraint(c, this));
          }
          this.transformConstraints = [];
          for (i = 0; i < e.transformConstraints.length; i++) {
            var l = e.transformConstraints[i];
            this.transformConstraints.push(new t.TransformConstraint(l, this));
          }
          this.pathConstraints = [];
          for (i = 0; i < e.pathConstraints.length; i++) {
            var h = e.pathConstraints[i];
            this.pathConstraints.push(new t.PathConstraint(h, this));
          }
          this.color = new t.Color(1, 1, 1, 1);
          this.updateCache();
        }
        e.prototype.updateCache = function () {
          this._updateCache.length = 0;
          this.updateCacheReset.length = 0;
          var t = this.bones;
          var e = 0;
          for (var i = t.length; e < i; e++) {
            (r = t[e]).sorted = r.data.skinRequired;
            r.active = !r.sorted;
          }
          if (null != this.skin) {
            var n = this.skin.bones;
            e = 0;
            for (i = this.skin.bones.length; e < i; e++) {
              var r = this.bones[n[e].index];
              do {
                r.sorted = false;
                r.active = true;
                r = r.parent;
              } while (null != r);
            }
          }
          var s = this.ikConstraints;
          var a = this.transformConstraints;
          var o = this.pathConstraints;
          var c = s.length;
          var l = a.length;
          var h = o.length;
          var u = c + l + h;
          t: for (e = 0; e < u; e++) {
            for (var f = 0; f < c; f++) {
              if ((d = s[f]).data.order == e) {
                this.sortIkConstraint(d);
                continue t;
              }
            }
            for (f = 0; f < l; f++) {
              if ((d = a[f]).data.order == e) {
                this.sortTransformConstraint(d);
                continue t;
              }
            }
            for (f = 0; f < h; f++) {
              var d;
              if ((d = o[f]).data.order == e) {
                this.sortPathConstraint(d);
                continue t;
              }
            }
          }
          e = 0;
          for (i = t.length; e < i; e++) {
            this.sortBone(t[e]);
          }
        };
        e.prototype.sortIkConstraint = function (e) {
          e.active = e.target.isActive() && (!e.data.skinRequired || null != this.skin && t.Utils.contains(this.skin.constraints, e.data, true));
          if (e.active) {
            var i = e.target;
            this.sortBone(i);
            var n = e.bones;
            var r = n[0];
            this.sortBone(r);
            if (n.length > 1) {
              var s = n[n.length - 1];
              if (!(this._updateCache.indexOf(s) > -1)) {
                this.updateCacheReset.push(s);
              }
            }
            this._updateCache.push(e);
            this.sortReset(r.children);
            n[n.length - 1].sorted = true;
          }
        };
        e.prototype.sortPathConstraint = function (e) {
          e.active = e.target.bone.isActive() && (!e.data.skinRequired || null != this.skin && t.Utils.contains(this.skin.constraints, e.data, true));
          if (e.active) {
            var i = e.target;
            var n = i.data.index;
            var r = i.bone;
            if (null != this.skin) {
              this.sortPathConstraintAttachment(this.skin, n, r);
            }
            if (null != this.data.defaultSkin && this.data.defaultSkin != this.skin) {
              this.sortPathConstraintAttachment(this.data.defaultSkin, n, r);
            }
            var s = 0;
            for (var a = this.data.skins.length; s < a; s++) {
              this.sortPathConstraintAttachment(this.data.skins[s], n, r);
            }
            var o = i.getAttachment();
            if (o instanceof t.PathAttachment) {
              this.sortPathConstraintAttachmentWith(o, r);
            }
            var c = e.bones;
            var l = c.length;
            for (s = 0; s < l; s++) {
              this.sortBone(c[s]);
            }
            this._updateCache.push(e);
            for (s = 0; s < l; s++) {
              this.sortReset(c[s].children);
            }
            for (s = 0; s < l; s++) {
              c[s].sorted = true;
            }
          }
        };
        e.prototype.sortTransformConstraint = function (e) {
          e.active = e.target.isActive() && (!e.data.skinRequired || null != this.skin && t.Utils.contains(this.skin.constraints, e.data, true));
          if (e.active) {
            this.sortBone(e.target);
            var i = e.bones;
            var n = i.length;
            if (e.data.local) {
              for (var r = 0; r < n; r++) {
                var s = i[r];
                this.sortBone(s.parent);
                if (!(this._updateCache.indexOf(s) > -1)) {
                  this.updateCacheReset.push(s);
                }
              }
            } else {
              for (r = 0; r < n; r++) {
                this.sortBone(i[r]);
              }
            }
            this._updateCache.push(e);
            for (var a = 0; a < n; a++) {
              this.sortReset(i[a].children);
            }
            for (a = 0; a < n; a++) {
              i[a].sorted = true;
            }
          }
        };
        e.prototype.sortPathConstraintAttachment = function (t, e, i) {
          var n = t.attachments[e];
          if (n) {
            for (var r in n) this.sortPathConstraintAttachmentWith(n[r], i);
          }
        };
        e.prototype.sortPathConstraintAttachmentWith = function (e, i) {
          if (e instanceof t.PathAttachment) {
            var n = e.bones;
            if (null == n) {
              this.sortBone(i);
            } else {
              var r = this.bones;
              for (var s = 0; s < n.length;) {
                var a = n[s++];
                for (var o = s + a; s < o; s++) {
                  var c = n[s];
                  this.sortBone(r[c]);
                }
              }
            }
          }
        };
        e.prototype.sortBone = function (t) {
          if (!t.sorted) {
            var e = t.parent;
            if (null != e) {
              this.sortBone(e);
            }
            t.sorted = true;
            this._updateCache.push(t);
          }
        };
        e.prototype.sortReset = function (t) {
          var e = 0;
          for (var i = t.length; e < i; e++) {
            var n = t[e];
            if (n.active) {
              if (n.sorted) {
                this.sortReset(n.children);
              }
              n.sorted = false;
            }
          }
        };
        e.prototype.updateWorldTransform = function () {
          var t = this.updateCacheReset;
          var e = 0;
          for (var i = t.length; e < i; e++) {
            var n = t[e];
            n.ax = n.x;
            n.ay = n.y;
            n.arotation = n.rotation;
            n.ascaleX = n.scaleX;
            n.ascaleY = n.scaleY;
            n.ashearX = n.shearX;
            n.ashearY = n.shearY;
            n.appliedValid = true;
          }
          var r = this._updateCache;
          e = 0;
          for (i = r.length; e < i; e++) {
            r[e].update();
          }
        };
        e.prototype.setToSetupPose = function () {
          this.setBonesToSetupPose();
          this.setSlotsToSetupPose();
        };
        e.prototype.setBonesToSetupPose = function () {
          var t = this.bones;
          var e = 0;
          for (var i = t.length; e < i; e++) {
            t[e].setToSetupPose();
          }
          var n = this.ikConstraints;
          e = 0;
          for (i = n.length; e < i; e++) {
            (o = n[e]).mix = o.data.mix;
            o.softness = o.data.softness;
            o.bendDirection = o.data.bendDirection;
            o.compress = o.data.compress;
            o.stretch = o.data.stretch;
          }
          var r = this.transformConstraints;
          e = 0;
          for (i = r.length; e < i; e++) {
            var s = (o = r[e]).data;
            o.rotateMix = s.rotateMix;
            o.translateMix = s.translateMix;
            o.scaleMix = s.scaleMix;
            o.shearMix = s.shearMix;
          }
          var a = this.pathConstraints;
          e = 0;
          for (i = a.length; e < i; e++) {
            var o;
            s = (o = a[e]).data;
            o.position = s.position;
            o.spacing = s.spacing;
            o.rotateMix = s.rotateMix;
            o.translateMix = s.translateMix;
          }
        };
        e.prototype.setSlotsToSetupPose = function () {
          var e = this.slots;
          t.Utils.arrayCopy(e, 0, this.drawOrder, 0, e.length);
          var i = 0;
          for (var n = e.length; i < n; i++) {
            e[i].setToSetupPose();
          }
        };
        e.prototype.getRootBone = function () {
          return 0 == this.bones.length ? null : this.bones[0];
        };
        e.prototype.findBone = function (t) {
          if (null == t) {
            throw Error("boneName cannot be null.");
          }
          var e = this.bones;
          var i = 0;
          for (var n = e.length; i < n; i++) {
            var r = e[i];
            if (r.data.name == t) {
              return r;
            }
          }
          return null;
        };
        e.prototype.findBoneIndex = function (t) {
          if (null == t) {
            throw Error("boneName cannot be null.");
          }
          var e = this.bones;
          var i = 0;
          for (var n = e.length; i < n; i++) {
            if (e[i].data.name == t) {
              return i;
            }
          }
          return -1;
        };
        e.prototype.findSlot = function (t) {
          if (null == t) {
            throw Error("slotName cannot be null.");
          }
          var e = this.slots;
          var i = 0;
          for (var n = e.length; i < n; i++) {
            var r = e[i];
            if (r.data.name == t) {
              return r;
            }
          }
          return null;
        };
        e.prototype.findSlotIndex = function (t) {
          if (null == t) {
            throw Error("slotName cannot be null.");
          }
          var e = this.slots;
          var i = 0;
          for (var n = e.length; i < n; i++) {
            if (e[i].data.name == t) {
              return i;
            }
          }
          return -1;
        };
        e.prototype.setSkinByName = function (t) {
          var e = this.data.findSkin(t);
          if (null == e) {
            throw Error("Skin not found: " + t);
          }
          this.setSkin(e);
        };
        e.prototype.setSkin = function (t) {
          if (t != this.skin) {
            if (null != t) {
              if (null != this.skin) {
                t.attachAll(this, this.skin);
              } else {
                var e = this.slots;
                var i = 0;
                for (var n = e.length; i < n; i++) {
                  var r = e[i];
                  var s = r.data.attachmentName;
                  if (null != s) {
                    var a = t.getAttachment(i, s);
                    if (null != a) {
                      r.setAttachment(a);
                    }
                  }
                }
              }
            }
            this.skin = t;
            this.updateCache();
          }
        };
        e.prototype.getAttachmentByName = function (t, e) {
          return this.getAttachment(this.data.findSlotIndex(t), e);
        };
        e.prototype.getAttachment = function (t, e) {
          if (null == e) {
            throw Error("attachmentName cannot be null.");
          }
          if (null != this.skin) {
            var i = this.skin.getAttachment(t, e);
            if (null != i) {
              return i;
            }
          }
          return null != this.data.defaultSkin ? this.data.defaultSkin.getAttachment(t, e) : null;
        };
        e.prototype.setAttachment = function (t, e) {
          if (null == t) {
            throw Error("slotName cannot be null.");
          }
          var i = this.slots;
          var n = 0;
          for (var r = i.length; n < r; n++) {
            var s = i[n];
            if (s.data.name == t) {
              var a = null;
              if (null != e && null == (a = this.getAttachment(n, e))) {
                throw Error("Attachment not found: " + e + ", for slot: " + t);
              }
              return void s.setAttachment(a);
            }
          }
          throw Error("Slot not found: " + t);
        };
        e.prototype.findIkConstraint = function (t) {
          if (null == t) {
            throw Error("constraintName cannot be null.");
          }
          var e = this.ikConstraints;
          var i = 0;
          for (var n = e.length; i < n; i++) {
            var r = e[i];
            if (r.data.name == t) {
              return r;
            }
          }
          return null;
        };
        e.prototype.findTransformConstraint = function (t) {
          if (null == t) {
            throw Error("constraintName cannot be null.");
          }
          var e = this.transformConstraints;
          var i = 0;
          for (var n = e.length; i < n; i++) {
            var r = e[i];
            if (r.data.name == t) {
              return r;
            }
          }
          return null;
        };
        e.prototype.findPathConstraint = function (t) {
          if (null == t) {
            throw Error("constraintName cannot be null.");
          }
          var e = this.pathConstraints;
          var i = 0;
          for (var n = e.length; i < n; i++) {
            var r = e[i];
            if (r.data.name == t) {
              return r;
            }
          }
          return null;
        };
        e.prototype.getBounds = function (e, i, n) {
          if (undefined === n) {
            n = [,,];
          }
          if (null == e) {
            throw Error("offset cannot be null.");
          }
          if (null == i) {
            throw Error("size cannot be null.");
          }
          var r = this.drawOrder;
          var s = Infinity;
          var a = Infinity;
          var o = -Infinity;
          var c = -Infinity;
          var l = 0;
          for (var h = r.length; l < h; l++) {
            var u = r[l];
            if (u.bone.active) {
              var f = 0;
              var d = null;
              var _ = u.getAttachment();
              if (_ instanceof t.RegionAttachment) {
                f = 8;
                d = t.Utils.setArraySize(n, f, 0);
                _.computeWorldVertices(u.bone, d, 0, 2);
              } else if (_ instanceof t.MeshAttachment) {
                var p = _;
                f = p.worldVerticesLength;
                d = t.Utils.setArraySize(n, f, 0);
                p.computeWorldVertices(u, 0, f, d, 0, 2);
              }
              if (null != d) {
                var v = 0;
                for (var g = d.length; v < g; v += 2) {
                  var m = d[v];
                  var y = d[v + 1];
                  s = Math.min(s, m);
                  a = Math.min(a, y);
                  o = Math.max(o, m);
                  c = Math.max(c, y);
                }
              }
            }
          }
          e.set(s, a);
          i.set(o - s, c - a);
        };
        e.prototype.update = function (t) {
          this.time += t;
        };
        return e;
      }();
      t.Skeleton = e;
    })(r || (r = {}));
    (function (t) {
      var e = function () {
        function e(t) {
          this.scale = 1;
          this.linkedMeshes = [];
          this.attachmentLoader = t;
        }
        e.prototype.readSkeletonData = function (n) {
          var r = this.scale;
          var s = new t.SkeletonData();
          s.name = "";
          var a = new i(n);
          s.hash = a.readString();
          s.version = a.readString();
          s.x = a.readFloat();
          s.y = a.readFloat();
          s.width = a.readFloat();
          s.height = a.readFloat();
          var o = a.readBoolean();
          if (o) {
            s.fps = a.readFloat();
            s.imagesPath = a.readString();
            s.audioPath = a.readString();
          }
          var c = 0;
          c = a.readInt(true);
          for (var l = 0; l < c; l++) {
            a.strings.push(a.readString());
          }
          c = a.readInt(true);
          for (l = 0; l < c; l++) {
            var h = a.readString();
            var u = 0 == l ? null : s.bones[a.readInt(true)];
            (_ = new t.BoneData(l, h, u)).rotation = a.readFloat();
            _.x = a.readFloat() * r;
            _.y = a.readFloat() * r;
            _.scaleX = a.readFloat();
            _.scaleY = a.readFloat();
            _.shearX = a.readFloat();
            _.shearY = a.readFloat();
            _.length = a.readFloat() * r;
            _.transformMode = e.TransformModeValues[a.readInt(true)];
            _.skinRequired = a.readBoolean();
            if (o) {
              t.Color.rgba8888ToColor(_.color, a.readInt32());
            }
            s.bones.push(_);
          }
          c = a.readInt(true);
          for (l = 0; l < c; l++) {
            var f = a.readString();
            var d = s.bones[a.readInt(true)];
            var _ = new t.SlotData(l, f, d);
            t.Color.rgba8888ToColor(_.color, a.readInt32());
            var p = a.readInt32();
            if (-1 != p) {
              t.Color.rgb888ToColor(_.darkColor = new t.Color(), p);
            }
            _.attachmentName = a.readStringRef();
            _.blendMode = e.BlendModeValues[a.readInt(true)];
            s.slots.push(_);
          }
          c = a.readInt(true);
          l = 0;
          for (var v = undefined; l < c; l++) {
            (_ = new t.IkConstraintData(a.readString())).order = a.readInt(true);
            _.skinRequired = a.readBoolean();
            v = a.readInt(true);
            for (var g = 0; g < v; g++) {
              _.bones.push(s.bones[a.readInt(true)]);
            }
            _.target = s.bones[a.readInt(true)];
            _.mix = a.readFloat();
            _.softness = a.readFloat() * r;
            _.bendDirection = a.readByte();
            _.compress = a.readBoolean();
            _.stretch = a.readBoolean();
            _.uniform = a.readBoolean();
            s.ikConstraints.push(_);
          }
          c = a.readInt(true);
          l = 0;
          for (v = undefined; l < c; l++) {
            (_ = new t.TransformConstraintData(a.readString())).order = a.readInt(true);
            _.skinRequired = a.readBoolean();
            v = a.readInt(true);
            for (g = 0; g < v; g++) {
              _.bones.push(s.bones[a.readInt(true)]);
            }
            _.target = s.bones[a.readInt(true)];
            _.local = a.readBoolean();
            _.relative = a.readBoolean();
            _.offsetRotation = a.readFloat();
            _.offsetX = a.readFloat() * r;
            _.offsetY = a.readFloat() * r;
            _.offsetScaleX = a.readFloat();
            _.offsetScaleY = a.readFloat();
            _.offsetShearY = a.readFloat();
            _.rotateMix = a.readFloat();
            _.translateMix = a.readFloat();
            _.scaleMix = a.readFloat();
            _.shearMix = a.readFloat();
            s.transformConstraints.push(_);
          }
          c = a.readInt(true);
          l = 0;
          for (v = undefined; l < c; l++) {
            (_ = new t.PathConstraintData(a.readString())).order = a.readInt(true);
            _.skinRequired = a.readBoolean();
            v = a.readInt(true);
            for (g = 0; g < v; g++) {
              _.bones.push(s.bones[a.readInt(true)]);
            }
            _.target = s.slots[a.readInt(true)];
            _.positionMode = e.PositionModeValues[a.readInt(true)];
            _.spacingMode = e.SpacingModeValues[a.readInt(true)];
            _.rotateMode = e.RotateModeValues[a.readInt(true)];
            _.offsetRotation = a.readFloat();
            _.position = a.readFloat();
            if (_.positionMode == t.PositionMode.Fixed) {
              _.position *= r;
            }
            _.spacing = a.readFloat();
            if (!(_.spacingMode != t.SpacingMode.Length && _.spacingMode != t.SpacingMode.Fixed)) {
              _.spacing *= r;
            }
            _.rotateMix = a.readFloat();
            _.translateMix = a.readFloat();
            s.pathConstraints.push(_);
          }
          var m = this.readSkin(a, s, true, o);
          if (null != m) {
            s.defaultSkin = m;
            s.skins.push(m);
          }
          l = s.skins.length;
          for (t.Utils.setArraySize(s.skins, c = l + a.readInt(true)); l < c; l++) {
            s.skins[l] = this.readSkin(a, s, false, o);
          }
          c = this.linkedMeshes.length;
          for (l = 0; l < c; l++) {
            var y = this.linkedMeshes[l];
            var T = null == y.skin ? s.defaultSkin : s.findSkin(y.skin);
            if (null == T) {
              throw Error("Skin not found: " + y.skin);
            }
            var E = T.getAttachment(y.slotIndex, y.parent);
            if (null == E) {
              throw Error("Parent mesh not found: " + y.parent);
            }
            y.mesh.deformAttachment = y.inheritDeform ? E : y.mesh;
            y.mesh.setParentMesh(E);
            y.mesh.updateUVs();
          }
          this.linkedMeshes.length = 0;
          c = a.readInt(true);
          for (l = 0; l < c; l++) {
            (_ = new t.EventData(a.readStringRef())).intValue = a.readInt(false);
            _.floatValue = a.readFloat();
            _.stringValue = a.readString();
            _.audioPath = a.readString();
            if (null != _.audioPath) {
              _.volume = a.readFloat();
              _.balance = a.readFloat();
            }
            s.events.push(_);
          }
          c = a.readInt(true);
          for (l = 0; l < c; l++) {
            s.animations.push(this.readAnimation(a, a.readString(), s));
          }
          return s;
        };
        e.prototype.readSkin = function (e, i, n, r) {
          var s = null;
          var a = 0;
          if (n) {
            if (0 == (a = e.readInt(true))) {
              return null;
            }
            s = new t.Skin("default");
          } else {
            (s = new t.Skin(e.readStringRef())).bones.length = e.readInt(true);
            var o = 0;
            for (var c = s.bones.length; o < c; o++) {
              s.bones[o] = i.bones[e.readInt(true)];
            }
            o = 0;
            for (c = e.readInt(true); o < c; o++) {
              s.constraints.push(i.ikConstraints[e.readInt(true)]);
            }
            o = 0;
            for (c = e.readInt(true); o < c; o++) {
              s.constraints.push(i.transformConstraints[e.readInt(true)]);
            }
            o = 0;
            for (c = e.readInt(true); o < c; o++) {
              s.constraints.push(i.pathConstraints[e.readInt(true)]);
            }
            a = e.readInt(true);
          }
          for (o = 0; o < a; o++) {
            var l = e.readInt(true);
            var h = 0;
            for (var u = e.readInt(true); h < u; h++) {
              var f = e.readStringRef();
              var d = this.readAttachment(e, i, s, l, f, r);
              if (null != d) {
                s.setAttachment(l, f, d);
              }
            }
          }
          return s;
        };
        e.prototype.readAttachment = function (i, r, s, a, o, c) {
          var l = this.scale;
          var h = i.readStringRef();
          if (null == h) {
            h = o;
          }
          var u = i.readByte();
          switch (e.AttachmentTypeValues[u]) {
            case t.AttachmentType.Region:
              var f = i.readStringRef();
              var d = i.readFloat();
              var _ = i.readFloat();
              var p = i.readFloat();
              var v = i.readFloat();
              var g = i.readFloat();
              var m = i.readFloat();
              var y = i.readFloat();
              var T = i.readInt32();
              if (null == f) {
                f = h;
              }
              var E = this.attachmentLoader.newRegionAttachment(s, h, f);
              return null == E ? null : (E.path = f, E.x = _ * l, E.y = p * l, E.scaleX = v, E.scaleY = g, E.rotation = d, E.width = m * l, E.height = y * l, t.Color.rgba8888ToColor(E.color, T), E.updateOffset(), E);
            case t.AttachmentType.BoundingBox:
              var A = i.readInt(true);
              var x = this.readVertices(i, A);
              T = c ? i.readInt32() : 0;
              var C = this.attachmentLoader.newBoundingBoxAttachment(s, h);
              return null == C ? null : (C.worldVerticesLength = A << 1, C.vertices = x.vertices, C.bones = x.bones, c && t.Color.rgba8888ToColor(C.color, T), C);
            case t.AttachmentType.Mesh:
              f = i.readStringRef();
              T = i.readInt32();
              A = i.readInt(true);
              var b = this.readFloatArray(i, A << 1, 1);
              var S = this.readShortArray(i);
              x = this.readVertices(i, A);
              var R = i.readInt(true);
              var M = null;
              m = 0;
              y = 0;
              if (c) {
                M = this.readShortArray(i);
                m = i.readFloat();
                y = i.readFloat();
              }
              if (null == f) {
                f = h;
              }
              return null == (w = this.attachmentLoader.newMeshAttachment(s, h, f)) ? null : (w.path = f, t.Color.rgba8888ToColor(w.color, T), w.bones = x.bones, w.vertices = x.vertices, w.worldVerticesLength = A << 1, w.triangles = S, w.regionUVs = b, w.updateUVs(), w.hullLength = R << 1, c && (w.edges = M, w.width = m * l, w.height = y * l), w);
            case t.AttachmentType.LinkedMesh:
              f = i.readStringRef();
              T = i.readInt32();
              var w;
              var I = i.readStringRef();
              var O = i.readStringRef();
              var L = i.readBoolean();
              m = 0;
              y = 0;
              if (c) {
                m = i.readFloat();
                y = i.readFloat();
              }
              if (null == f) {
                f = h;
              }
              return null == (w = this.attachmentLoader.newMeshAttachment(s, h, f)) ? null : (w.path = f, t.Color.rgba8888ToColor(w.color, T), c && (w.width = m * l, w.height = y * l), this.linkedMeshes.push(new n(w, I, a, O, L)), w);
            case t.AttachmentType.Path:
              var P = i.readBoolean();
              var D = i.readBoolean();
              var N = t.Utils.newArray(A / 3, 0);
              var F = 0;
              for (var B = N.length; F < B; F++) {
                var P;
                var D;
                var N;
                var F;
                var B;
                N[F] = i.readFloat() * l;
              }
              T = c ? i.readInt32() : 0;
              return null == (f = this.attachmentLoader.newPathAttachment(s, h)) ? null : (f.closed = P, f.constantSpeed = D, f.worldVerticesLength = A << 1, f.vertices = x.vertices, f.bones = x.bones, f.lengths = N, c && t.Color.rgba8888ToColor(f.color, T), f);
            case t.AttachmentType.Point:
              d = i.readFloat();
              _ = i.readFloat();
              p = i.readFloat();
              T = c ? i.readInt32() : 0;
              var V = this.attachmentLoader.newPointAttachment(s, h);
              return null == V ? null : (V.x = _ * l, V.y = p * l, V.rotation = d, c && t.Color.rgba8888ToColor(V.color, T), V);
            case t.AttachmentType.Clipping:
              var k = i.readInt(true);
              A = i.readInt(true);
              x = this.readVertices(i, A);
              T = c ? i.readInt32() : 0;
              var U = this.attachmentLoader.newClippingAttachment(s, h);
              return null == U ? null : (U.endSlot = r.slots[k], U.worldVerticesLength = A << 1, U.vertices = x.vertices, U.bones = x.bones, c && t.Color.rgba8888ToColor(U.color, T), U);
          }
          return null;
        };
        e.prototype.readVertices = function (e, i) {
          var n = i << 1;
          var s = new r();
          var a = this.scale;
          if (!e.readBoolean()) {
            s.vertices = this.readFloatArray(e, n, a);
            return s;
          }
          var o = [];
          var c = [];
          for (var l = 0; l < i; l++) {
            var h = e.readInt(true);
            c.push(h);
            for (var u = 0; u < h; u++) {
              c.push(e.readInt(true));
              o.push(e.readFloat() * a);
              o.push(e.readFloat() * a);
              o.push(e.readFloat());
            }
          }
          s.vertices = t.Utils.toFloatArray(o);
          s.bones = c;
          return s;
        };
        e.prototype.readFloatArray = function (t, e, i) {
          var n = Array(e);
          if (1 == i) {
            for (var r = 0; r < e; r++) {
              n[r] = t.readFloat();
            }
          } else {
            for (r = 0; r < e; r++) {
              n[r] = t.readFloat() * i;
            }
          }
          return n;
        };
        e.prototype.readShortArray = function (t) {
          var e = t.readInt(true);
          var i = Array(e);
          for (var n = 0; n < e; n++) {
            i[n] = t.readShort();
          }
          return i;
        };
        e.prototype.readAnimation = function (i, n, r) {
          var s = [];
          var a = this.scale;
          var o = 0;
          var c = new t.Color();
          var l = new t.Color();
          var h = 0;
          for (var u = i.readInt(true); h < u; h++) {
            var f = i.readInt(true);
            var d = 0;
            for (var _ = i.readInt(true); d < _; d++) {
              var p = i.readByte();
              var v = i.readInt(true);
              switch (p) {
                case e.SLOT_ATTACHMENT:
                  (T = new t.AttachmentTimeline(v)).slotIndex = f;
                  for (var g = 0; g < v; g++) {
                    T.setFrame(g, i.readFloat(), i.readStringRef());
                  }
                  s.push(T);
                  o = Math.max(o, T.frames[v - 1]);
                  break;
                case e.SLOT_COLOR:
                  (T = new t.ColorTimeline(v)).slotIndex = f;
                  for (g = 0; g < v; g++) {
                    var m = i.readFloat();
                    t.Color.rgba8888ToColor(c, i.readInt32());
                    T.setFrame(g, m, c.r, c.g, c.b, c.a);
                    if (g < v - 1) {
                      this.readCurve(i, g, T);
                    }
                  }
                  s.push(T);
                  o = Math.max(o, T.frames[(v - 1) * t.ColorTimeline.ENTRIES]);
                  break;
                case e.SLOT_TWO_COLOR:
                  (T = new t.TwoColorTimeline(v)).slotIndex = f;
                  for (g = 0; g < v; g++) {
                    m = i.readFloat();
                    t.Color.rgba8888ToColor(c, i.readInt32());
                    t.Color.rgb888ToColor(l, i.readInt32());
                    T.setFrame(g, m, c.r, c.g, c.b, c.a, l.r, l.g, l.b);
                    if (g < v - 1) {
                      this.readCurve(i, g, T);
                    }
                  }
                  s.push(T);
                  o = Math.max(o, T.frames[(v - 1) * t.TwoColorTimeline.ENTRIES]);
              }
            }
          }
          h = 0;
          for (u = i.readInt(true); h < u; h++) {
            var y = i.readInt(true);
            d = 0;
            for (_ = i.readInt(true); d < _; d++) {
              p = i.readByte();
              v = i.readInt(true);
              switch (p) {
                case e.BONE_ROTATE:
                  (T = new t.RotateTimeline(v)).boneIndex = y;
                  for (g = 0; g < v; g++) {
                    T.setFrame(g, i.readFloat(), i.readFloat());
                    if (g < v - 1) {
                      this.readCurve(i, g, T);
                    }
                  }
                  s.push(T);
                  o = Math.max(o, T.frames[(v - 1) * t.RotateTimeline.ENTRIES]);
                  break;
                case e.BONE_TRANSLATE:
                case e.BONE_SCALE:
                case e.BONE_SHEAR:
                  var T = undefined;
                  var E = 1;
                  if (p == e.BONE_SCALE) {
                    T = new t.ScaleTimeline(v);
                  } else if (p == e.BONE_SHEAR) {
                    T = new t.ShearTimeline(v);
                  } else {
                    T = new t.TranslateTimeline(v);
                    E = a;
                  }
                  T.boneIndex = y;
                  for (g = 0; g < v; g++) {
                    T.setFrame(g, i.readFloat(), i.readFloat() * E, i.readFloat() * E);
                    if (g < v - 1) {
                      this.readCurve(i, g, T);
                    }
                  }
                  s.push(T);
                  o = Math.max(o, T.frames[(v - 1) * t.TranslateTimeline.ENTRIES]);
              }
            }
          }
          h = 0;
          for (u = i.readInt(true); h < u; h++) {
            var A = i.readInt(true);
            v = i.readInt(true);
            (T = new t.IkConstraintTimeline(v)).ikConstraintIndex = A;
            for (g = 0; g < v; g++) {
              T.setFrame(g, i.readFloat(), i.readFloat(), i.readFloat() * a, i.readByte(), i.readBoolean(), i.readBoolean());
              if (g < v - 1) {
                this.readCurve(i, g, T);
              }
            }
            s.push(T);
            o = Math.max(o, T.frames[(v - 1) * t.IkConstraintTimeline.ENTRIES]);
          }
          h = 0;
          for (u = i.readInt(true); h < u; h++) {
            A = i.readInt(true);
            v = i.readInt(true);
            (T = new t.TransformConstraintTimeline(v)).transformConstraintIndex = A;
            for (g = 0; g < v; g++) {
              T.setFrame(g, i.readFloat(), i.readFloat(), i.readFloat(), i.readFloat(), i.readFloat());
              if (g < v - 1) {
                this.readCurve(i, g, T);
              }
            }
            s.push(T);
            o = Math.max(o, T.frames[(v - 1) * t.TransformConstraintTimeline.ENTRIES]);
          }
          h = 0;
          for (u = i.readInt(true); h < u; h++) {
            A = i.readInt(true);
            var x = r.pathConstraints[A];
            d = 0;
            for (_ = i.readInt(true); d < _; d++) {
              p = i.readByte();
              v = i.readInt(true);
              switch (p) {
                case e.PATH_POSITION:
                case e.PATH_SPACING:
                  T = undefined;
                  E = 1;
                  if (p == e.PATH_SPACING) {
                    T = new t.PathConstraintSpacingTimeline(v);
                    if (!(x.spacingMode != t.SpacingMode.Length && x.spacingMode != t.SpacingMode.Fixed)) {
                      E = a;
                    }
                  } else {
                    T = new t.PathConstraintPositionTimeline(v);
                    if (x.positionMode == t.PositionMode.Fixed) {
                      E = a;
                    }
                  }
                  T.pathConstraintIndex = A;
                  for (g = 0; g < v; g++) {
                    T.setFrame(g, i.readFloat(), i.readFloat() * E);
                    if (g < v - 1) {
                      this.readCurve(i, g, T);
                    }
                  }
                  s.push(T);
                  o = Math.max(o, T.frames[(v - 1) * t.PathConstraintPositionTimeline.ENTRIES]);
                  break;
                case e.PATH_MIX:
                  (T = new t.PathConstraintMixTimeline(v)).pathConstraintIndex = A;
                  for (g = 0; g < v; g++) {
                    T.setFrame(g, i.readFloat(), i.readFloat(), i.readFloat());
                    if (g < v - 1) {
                      this.readCurve(i, g, T);
                    }
                  }
                  s.push(T);
                  o = Math.max(o, T.frames[(v - 1) * t.PathConstraintMixTimeline.ENTRIES]);
              }
            }
          }
          h = 0;
          for (u = i.readInt(true); h < u; h++) {
            var C = r.skins[i.readInt(true)];
            d = 0;
            for (_ = i.readInt(true); d < _; d++) {
              f = i.readInt(true);
              var b = 0;
              for (var S = i.readInt(true); b < S; b++) {
                var R = C.getAttachment(f, i.readStringRef());
                var M = null != R.bones;
                var w = R.vertices;
                var I = M ? w.length / 3 * 2 : w.length;
                v = i.readInt(true);
                (T = new t.DeformTimeline(v)).slotIndex = f;
                T.attachment = R;
                for (g = 0; g < v; g++) {
                  m = i.readFloat();
                  var O = undefined;
                  var L = i.readInt(true);
                  if (0 == L) {
                    O = M ? t.Utils.newFloatArray(I) : w;
                  } else {
                    O = t.Utils.newFloatArray(I);
                    var P = i.readInt(true);
                    L += P;
                    if (1 == a) {
                      for (var D = P; D < L; D++) {
                        O[D] = i.readFloat();
                      }
                    } else {
                      for (D = P; D < L; D++) {
                        O[D] = i.readFloat() * a;
                      }
                    }
                    if (!M) {
                      D = 0;
                      for (var N = O.length; D < N; D++) {
                        O[D] += w[D];
                      }
                    }
                  }
                  T.setFrame(g, m, O);
                  if (g < v - 1) {
                    this.readCurve(i, g, T);
                  }
                }
                s.push(T);
                o = Math.max(o, T.frames[v - 1]);
              }
            }
          }
          var F = i.readInt(true);
          if (F > 0) {
            T = new t.DrawOrderTimeline(F);
            var B = r.slots.length;
            for (h = 0; h < F; h++) {
              m = i.readFloat();
              var V = i.readInt(true);
              var k = t.Utils.newArray(B, 0);
              for (d = B - 1; d >= 0; d--) {
                k[d] = -1;
              }
              var U = t.Utils.newArray(B - V, 0);
              var z = 0;
              var G = 0;
              for (d = 0; d < V; d++) {
                for (f = i.readInt(true); z != f;) {
                  U[G++] = z++;
                }
                k[z + i.readInt(true)] = z++;
              }
              for (; z < B;) {
                U[G++] = z++;
              }
              for (d = B - 1; d >= 0; d--) {
                if (-1 == k[d]) {
                  k[d] = U[--G];
                }
              }
              T.setFrame(h, m, k);
            }
            s.push(T);
            o = Math.max(o, T.frames[F - 1]);
          }
          var H = i.readInt(true);
          if (H > 0) {
            T = new t.EventTimeline(H);
            for (h = 0; h < H; h++) {
              m = i.readFloat();
              var W = r.events[i.readInt(true)];
              var X = new t.Event(m, W);
              X.intValue = i.readInt(false);
              X.floatValue = i.readFloat();
              X.stringValue = i.readBoolean() ? i.readString() : W.stringValue;
              if (null != X.data.audioPath) {
                X.volume = i.readFloat();
                X.balance = i.readFloat();
              }
              T.setFrame(h, X);
            }
            s.push(T);
            o = Math.max(o, T.frames[H - 1]);
          }
          return new t.Animation(n, s, o);
        };
        e.prototype.readCurve = function (t, i, n) {
          switch (t.readByte()) {
            case e.CURVE_STEPPED:
              n.setStepped(i);
              break;
            case e.CURVE_BEZIER:
              this.setCurve(n, i, t.readFloat(), t.readFloat(), t.readFloat(), t.readFloat());
          }
        };
        e.prototype.setCurve = function (t, e, i, n, r, s) {
          t.setCurve(e, i, n, r, s);
        };
        e.AttachmentTypeValues = [0, 1, 2, 3, 4, 5, 6];
        e.TransformModeValues = [t.TransformMode.Normal, t.TransformMode.OnlyTranslation, t.TransformMode.NoRotationOrReflection, t.TransformMode.NoScale, t.TransformMode.NoScaleOrReflection];
        e.PositionModeValues = [t.PositionMode.Fixed, t.PositionMode.Percent];
        e.SpacingModeValues = [t.SpacingMode.Length, t.SpacingMode.Fixed, t.SpacingMode.Percent];
        e.RotateModeValues = [t.RotateMode.Tangent, t.RotateMode.Chain, t.RotateMode.ChainScale];
        e.BlendModeValues = [t.BlendMode.Normal, t.BlendMode.Additive, t.BlendMode.Multiply, t.BlendMode.Screen];
        e.BONE_ROTATE = 0;
        e.BONE_TRANSLATE = 1;
        e.BONE_SCALE = 2;
        e.BONE_SHEAR = 3;
        e.SLOT_ATTACHMENT = 0;
        e.SLOT_COLOR = 1;
        e.SLOT_TWO_COLOR = 2;
        e.PATH_POSITION = 0;
        e.PATH_SPACING = 1;
        e.PATH_MIX = 2;
        e.CURVE_LINEAR = 0;
        e.CURVE_STEPPED = 1;
        e.CURVE_BEZIER = 2;
        return e;
      }();
      t.SkeletonBinary = e;
      var i = function () {
        function t(t, e, i, n) {
          if (undefined === e) {
            e = [];
          }
          if (undefined === i) {
            i = 0;
          }
          if (undefined === n) {
            n = new DataView(t.buffer);
          }
          this.strings = e;
          this.index = i;
          this.buffer = n;
        }
        t.prototype.readByte = function () {
          return this.buffer.getInt8(this.index++);
        };
        t.prototype.readShort = function () {
          var t = this.buffer.getInt16(this.index);
          this.index += 2;
          return t;
        };
        t.prototype.readInt32 = function () {
          var t = this.buffer.getInt32(this.index);
          this.index += 4;
          return t;
        };
        t.prototype.readInt = function (t) {
          var e = this.readByte();
          var i = 127 & e;
          if (0 != (128 & e)) {
            i |= (127 & (e = this.readByte())) << 7;
            if (0 != (128 & e)) {
              i |= (127 & (e = this.readByte())) << 14;
              if (0 != (128 & e)) {
                i |= (127 & (e = this.readByte())) << 21;
                if (0 != (128 & e)) {
                  i |= (127 & (e = this.readByte())) << 28;
                }
              }
            }
          }
          return t ? i : i >>> 1 ^ -(1 & i);
        };
        t.prototype.readStringRef = function () {
          var t = this.readInt(true);
          return 0 == t ? null : this.strings[t - 1];
        };
        t.prototype.readString = function () {
          var t = this.readInt(true);
          switch (t) {
            case 0:
              return null;
            case 1:
              return "";
          }
          t--;
          var e = "";
          for (var i = 0; i < t;) {
            var n = this.readByte();
            switch (n >> 4) {
              case 12:
              case 13:
                e += String.fromCharCode((31 & n) << 6 | 63 & this.readByte());
                i += 2;
                break;
              case 14:
                e += String.fromCharCode((15 & n) << 12 | (63 & this.readByte()) << 6 | 63 & this.readByte());
                i += 3;
                break;
              default:
                e += String.fromCharCode(n);
                i++;
            }
          }
          return e;
        };
        t.prototype.readFloat = function () {
          var t = this.buffer.getFloat32(this.index);
          this.index += 4;
          return t;
        };
        t.prototype.readBoolean = function () {
          return 0 != this.readByte();
        };
        return t;
      }();
      var n = function (t, e, i, n, r) {
        this.mesh = t;
        this.skin = e;
        this.slotIndex = i;
        this.parent = n;
        this.inheritDeform = r;
      };
      var r = function (t, e) {
        if (undefined === t) {
          t = null;
        }
        if (undefined === e) {
          e = null;
        }
        this.bones = t;
        this.vertices = e;
      };
    })(r || (r = {}));
    (function (t) {
      var e = function () {
        function e() {
          this.minX = 0;
          this.minY = 0;
          this.maxX = 0;
          this.maxY = 0;
          this.boundingBoxes = [];
          this.polygons = [];
          this.polygonPool = new t.Pool(function () {
            return t.Utils.newFloatArray(16);
          });
        }
        e.prototype.update = function (e, i) {
          if (null == e) {
            throw Error("skeleton cannot be null.");
          }
          var n = this.boundingBoxes;
          var r = this.polygons;
          var s = this.polygonPool;
          var a = e.slots;
          var o = a.length;
          n.length = 0;
          s.freeAll(r);
          r.length = 0;
          for (var c = 0; c < o; c++) {
            var l = a[c];
            if (l.bone.active) {
              var h = l.getAttachment();
              if (h instanceof t.BoundingBoxAttachment) {
                var u = h;
                n.push(u);
                var f = s.obtain();
                if (f.length != u.worldVerticesLength) {
                  f = t.Utils.newFloatArray(u.worldVerticesLength);
                }
                r.push(f);
                u.computeWorldVertices(l, 0, u.worldVerticesLength, f, 0, 2);
              }
            }
          }
          if (i) {
            this.aabbCompute();
          } else {
            this.minX = Infinity;
            this.minY = Infinity;
            this.maxX = -Infinity;
            this.maxY = -Infinity;
          }
        };
        e.prototype.aabbCompute = function () {
          var t = Infinity;
          var e = Infinity;
          var i = -Infinity;
          var n = -Infinity;
          var r = this.polygons;
          var s = 0;
          for (var a = r.length; s < a; s++) {
            var o = r[s];
            var c = o;
            var l = 0;
            for (var h = o.length; l < h; l += 2) {
              var u = c[l];
              var f = c[l + 1];
              t = Math.min(t, u);
              e = Math.min(e, f);
              i = Math.max(i, u);
              n = Math.max(n, f);
            }
          }
          this.minX = t;
          this.minY = e;
          this.maxX = i;
          this.maxY = n;
        };
        e.prototype.aabbContainsPoint = function (t, e) {
          return t >= this.minX && t <= this.maxX && e >= this.minY && e <= this.maxY;
        };
        e.prototype.aabbIntersectsSegment = function (t, e, i, n) {
          var r = this.minX;
          var s = this.minY;
          var a = this.maxX;
          var o = this.maxY;
          if (t <= r && i <= r || e <= s && n <= s || t >= a && i >= a || e >= o && n >= o) {
            return false;
          }
          var c = (n - e) / (i - t);
          var l = c * (r - t) + e;
          if (l > s && l < o) {
            return true;
          }
          if ((l = c * (a - t) + e) > s && l < o) {
            return true;
          }
          var h = (s - e) / c + t;
          return h > r && h < a || (h = (o - e) / c + t) > r && h < a;
        };
        e.prototype.aabbIntersectsSkeleton = function (t) {
          return this.minX < t.maxX && this.maxX > t.minX && this.minY < t.maxY && this.maxY > t.minY;
        };
        e.prototype.containsPoint = function (t, e) {
          var i = this.polygons;
          var n = 0;
          for (var r = i.length; n < r; n++) {
            if (this.containsPointPolygon(i[n], t, e)) {
              return this.boundingBoxes[n];
            }
          }
          return null;
        };
        e.prototype.containsPointPolygon = function (t, e, i) {
          var r = t.length;
          var s = r - 2;
          var a = false;
          for (var o = 0; o < r; o += 2) {
            var c = t[o + 1];
            var l = t[s + 1];
            if (c < i && l >= i || l < i && c >= i) {
              var h = t[o];
              if (h + (i - c) / (l - c) * (t[s] - h) < e) {
                a = !a;
              }
            }
            s = o;
          }
          return a;
        };
        e.prototype.intersectsSegment = function (t, e, i, n) {
          var r = this.polygons;
          var s = 0;
          for (var a = r.length; s < a; s++) {
            if (this.intersectsSegmentPolygon(r[s], t, e, i, n)) {
              return this.boundingBoxes[s];
            }
          }
          return null;
        };
        e.prototype.intersectsSegmentPolygon = function (t, e, i, n, r) {
          var a = t.length;
          var o = e - n;
          var c = i - r;
          var l = e * r - i * n;
          var h = t[a - 2];
          var u = t[a - 1];
          for (var f = 0; f < a; f += 2) {
            var d = t[f];
            var _ = t[f + 1];
            var p = h * _ - u * d;
            var v = h - d;
            var g = u - _;
            var m = o * g - c * v;
            var y = (l * v - o * p) / m;
            if ((y >= h && y <= d || y >= d && y <= h) && (y >= e && y <= n || y >= n && y <= e)) {
              var T = (l * g - c * p) / m;
              if ((T >= u && T <= _ || T >= _ && T <= u) && (T >= i && T <= r || T >= r && T <= i)) {
                return true;
              }
            }
            h = d;
            u = _;
          }
          return false;
        };
        e.prototype.getPolygon = function (t) {
          if (null == t) {
            throw Error("boundingBox cannot be null.");
          }
          var e = this.boundingBoxes.indexOf(t);
          return -1 == e ? null : this.polygons[e];
        };
        e.prototype.getWidth = function () {
          return this.maxX - this.minX;
        };
        e.prototype.getHeight = function () {
          return this.maxY - this.minY;
        };
        return e;
      }();
      t.SkeletonBounds = e;
    })(r || (r = {}));
    (function (t) {
      var e = function () {
        function e() {
          this.triangulator = new t.Triangulator();
          this.clippingPolygon = [];
          this.clipOutput = [];
          this.clippedVertices = [];
          this.clippedTriangles = [];
          this.scratch = [];
        }
        e.prototype.clipStart = function (i, n) {
          if (null != this.clipAttachment) {
            return 0;
          }
          this.clipAttachment = n;
          var r = n.worldVerticesLength;
          var s = t.Utils.setArraySize(this.clippingPolygon, r);
          n.computeWorldVertices(i, 0, r, s, 0, 2);
          var a = this.clippingPolygon;
          e.makeClockwise(a);
          var o = this.clippingPolygons = this.triangulator.decompose(a, this.triangulator.triangulate(a));
          var c = 0;
          for (var l = o.length; c < l; c++) {
            var h = o[c];
            e.makeClockwise(h);
            h.push(h[0]);
            h.push(h[1]);
          }
          return o.length;
        };
        e.prototype.clipEndWithSlot = function (t) {
          if (null != this.clipAttachment && this.clipAttachment.endSlot == t.data) {
            this.clipEnd();
          }
        };
        e.prototype.clipEnd = function () {
          if (null != this.clipAttachment) {
            this.clipAttachment = null;
            this.clippingPolygons = null;
            this.clippedVertices.length = 0;
            this.clippedTriangles.length = 0;
            this.clippingPolygon.length = 0;
          }
        };
        e.prototype.isClipping = function () {
          return null != this.clipAttachment;
        };
        e.prototype.clipTriangles = function (e, i, n, r, s, a, o, c, l, h, u, f) {
          var d = this.clipOutput;
          var _ = this.clippedVertices;
          var p = this.clippedTriangles;
          var v = this.clippingPolygons;
          var g = this.clippingPolygons.length;
          var m = c ? 12 : 8;
          var y = 0;
          h = h || 0;
          u = u || 0;
          f = f || 0;
          _.length = 0;
          p.length = 0;
          var T = h;
          t: for (var E = h + r; T < E; T += 3) {
            var A = n[T] * l;
            var x = A + u;
            var C = A + f;
            var b = e[x];
            var S = e[x + 1];
            var R = s[C];
            var M = s[C + 1];
            C = (A = n[T + 1] * l) + f;
            var w = e[x = A + u];
            var I = e[x + 1];
            var O = s[C];
            var L = s[C + 1];
            C = (A = n[T + 2] * l) + f;
            var P = e[x = A + u];
            var D = e[x + 1];
            var N = s[C];
            var F = s[C + 1];
            for (var B = 0; B < g; B++) {
              var V = _.length;
              if (!this.clip(b, S, w, I, P, D, v[B], d)) {
                (j = t.Utils.setArraySize(_, V + 3 * m))[V] = b;
                j[V + 1] = S;
                j[V + 2] = a.r;
                j[V + 3] = a.g;
                j[V + 4] = a.b;
                j[V + 5] = a.a;
                if (c) {
                  j[V + 6] = R;
                  j[V + 7] = M;
                  j[V + 8] = o.r;
                  j[V + 9] = o.g;
                  j[V + 10] = o.b;
                  j[V + 11] = o.a;
                  j[V + 12] = w;
                  j[V + 13] = I;
                  j[V + 14] = a.r;
                  j[V + 15] = a.g;
                  j[V + 16] = a.b;
                  j[V + 17] = a.a;
                  j[V + 18] = O;
                  j[V + 19] = L;
                  j[V + 20] = o.r;
                  j[V + 21] = o.g;
                  j[V + 22] = o.b;
                  j[V + 23] = o.a;
                  j[V + 24] = P;
                  j[V + 25] = D;
                  j[V + 26] = a.r;
                  j[V + 27] = a.g;
                  j[V + 28] = a.b;
                  j[V + 29] = a.a;
                  j[V + 30] = N;
                  j[V + 31] = F;
                  j[V + 32] = o.r;
                  j[V + 33] = o.g;
                  j[V + 34] = o.b;
                  j[V + 35] = o.a;
                } else {
                  j[V + 6] = R;
                  j[V + 7] = M;
                  j[V + 8] = w;
                  j[V + 9] = I;
                  j[V + 10] = a.r;
                  j[V + 11] = a.g;
                  j[V + 12] = a.b;
                  j[V + 13] = a.a;
                  j[V + 14] = O;
                  j[V + 15] = L;
                  j[V + 16] = P;
                  j[V + 17] = D;
                  j[V + 18] = a.r;
                  j[V + 19] = a.g;
                  j[V + 20] = a.b;
                  j[V + 21] = a.a;
                  j[V + 22] = N;
                  j[V + 23] = F;
                }
                V = p.length;
                (it = t.Utils.setArraySize(p, V + 3))[V] = y;
                it[V + 1] = y + 1;
                it[V + 2] = y + 2;
                y += 3;
                continue t;
              }
              var k = d.length;
              if (0 != k) {
                var U = I - D;
                var z = P - w;
                var G = b - P;
                var H = D - S;
                var W = 1 / (U * G + z * (S - D));
                var X = k >> 1;
                var Y = this.clipOutput;
                var j = t.Utils.setArraySize(_, V + X * m);
                for (var q = 0; q < k; q += 2) {
                  var Z = Y[q];
                  var K = Y[q + 1];
                  j[V] = Z;
                  j[V + 1] = K;
                  j[V + 2] = a.r;
                  j[V + 3] = a.g;
                  j[V + 4] = a.b;
                  j[V + 5] = a.a;
                  var Q = Z - P;
                  var J = K - D;
                  var $ = (U * Q + z * J) * W;
                  var tt = (H * Q + G * J) * W;
                  var et = 1 - $ - tt;
                  j[V + 6] = R * $ + O * tt + N * et;
                  j[V + 7] = M * $ + L * tt + F * et;
                  if (c) {
                    j[V + 8] = o.r;
                    j[V + 9] = o.g;
                    j[V + 10] = o.b;
                    j[V + 11] = o.a;
                  }
                  V += m;
                }
                V = p.length;
                var it = t.Utils.setArraySize(p, V + 3 * (X - 2));
                X--;
                for (q = 1; q < X; q++) {
                  it[V] = y;
                  it[V + 1] = y + q;
                  it[V + 2] = y + q + 1;
                  V += 3;
                }
                y += X + 1;
              }
            }
          }
        };
        e.prototype.clip = function (t, e, i, n, r, s, a, o) {
          var c = o;
          var l = false;
          var h = null;
          if (a.length % 4 >= 2) {
            h = o;
            o = this.scratch;
          } else {
            h = this.scratch;
          }
          h.length = 0;
          h.push(t);
          h.push(e);
          h.push(i);
          h.push(n);
          h.push(r);
          h.push(s);
          h.push(t);
          h.push(e);
          o.length = 0;
          var f = a.length - 4;
          for (var d = 0;; d += 2) {
            var _ = a[d];
            var p = a[d + 1];
            var v = a[d + 2];
            var g = a[d + 3];
            var m = _ - v;
            var y = p - g;
            var T = h;
            var E = h.length - 2;
            var A = o.length;
            for (var x = 0; x < E; x += 2) {
              var C = T[x];
              var b = T[x + 1];
              var S = T[x + 2];
              var R = T[x + 3];
              var M = m * (R - g) - y * (S - v) > 0;
              if (m * (b - g) - y * (C - v) > 0) {
                if (M) {
                  o.push(S);
                  o.push(R);
                  continue;
                }
                if (Math.abs(L = (I = R - b) * (v - _) - (O = S - C) * (g - p)) > 1e-6) {
                  var w = (O * (p - b) - I * (_ - C)) / L;
                  o.push(_ + (v - _) * w);
                  o.push(p + (g - p) * w);
                } else {
                  o.push(_);
                  o.push(p);
                }
              } else if (M) {
                var I;
                var O;
                var L;
                if (Math.abs(L = (I = R - b) * (v - _) - (O = S - C) * (g - p)) > 1e-6) {
                  w = (O * (p - b) - I * (_ - C)) / L;
                  o.push(_ + (v - _) * w);
                  o.push(p + (g - p) * w);
                } else {
                  o.push(_);
                  o.push(p);
                }
                o.push(S);
                o.push(R);
              }
              l = true;
            }
            if (A == o.length) {
              c.length = 0;
              return true;
            }
            o.push(o[0]);
            o.push(o[1]);
            if (d == f) {
              break;
            }
            var P = o;
            (o = h).length = 0;
            h = P;
          }
          if (c != o) {
            c.length = 0;
            d = 0;
            for (var D = o.length - 2; d < D; d++) {
              c[d] = o[d];
            }
          } else {
            c.length = c.length - 2;
          }
          return l;
        };
        e.makeClockwise = function (t) {
          var i = t.length;
          var n = t[i - 2] * t[1] - t[0] * t[i - 1];
          var r = 0;
          var s = 0;
          var a = 0;
          var o = 0;
          for (var c = i - 3; o < c; o += 2) {
            r = t[o];
            s = t[o + 1];
            a = t[o + 2];
            n += r * t[o + 3] - a * s;
          }
          if (!(n < 0)) {
            o = 0;
            var l = i - 2;
            for (c = i >> 1; o < c; o += 2) {
              var h = t[o];
              var u = t[o + 1];
              var f = l - o;
              t[o] = t[f];
              t[o + 1] = t[f + 1];
              t[f] = h;
              t[f + 1] = u;
            }
          }
        };
        return e;
      }();
      t.SkeletonClipping = e;
    })(r || (r = {}));
    (function (t) {
      var e = function () {
        function t() {
          this.bones = [];
          this.slots = [];
          this.skins = [];
          this.events = [];
          this.animations = [];
          this.ikConstraints = [];
          this.transformConstraints = [];
          this.pathConstraints = [];
          this.fps = 0;
        }
        t.prototype.findBone = function (t) {
          if (null == t) {
            throw Error("boneName cannot be null.");
          }
          var e = this.bones;
          var i = 0;
          for (var n = e.length; i < n; i++) {
            var r = e[i];
            if (r.name == t) {
              return r;
            }
          }
          return null;
        };
        t.prototype.findBoneIndex = function (t) {
          if (null == t) {
            throw Error("boneName cannot be null.");
          }
          var e = this.bones;
          var i = 0;
          for (var n = e.length; i < n; i++) {
            if (e[i].name == t) {
              return i;
            }
          }
          return -1;
        };
        t.prototype.findSlot = function (t) {
          if (null == t) {
            throw Error("slotName cannot be null.");
          }
          var e = this.slots;
          var i = 0;
          for (var n = e.length; i < n; i++) {
            var r = e[i];
            if (r.name == t) {
              return r;
            }
          }
          return null;
        };
        t.prototype.findSlotIndex = function (t) {
          if (null == t) {
            throw Error("slotName cannot be null.");
          }
          var e = this.slots;
          var i = 0;
          for (var n = e.length; i < n; i++) {
            if (e[i].name == t) {
              return i;
            }
          }
          return -1;
        };
        t.prototype.findSkin = function (t) {
          if (null == t) {
            throw Error("skinName cannot be null.");
          }
          var e = this.skins;
          var i = 0;
          for (var n = e.length; i < n; i++) {
            var r = e[i];
            if (r.name == t) {
              return r;
            }
          }
          return null;
        };
        t.prototype.findEvent = function (t) {
          if (null == t) {
            throw Error("eventDataName cannot be null.");
          }
          var e = this.events;
          var i = 0;
          for (var n = e.length; i < n; i++) {
            var r = e[i];
            if (r.name == t) {
              return r;
            }
          }
          return null;
        };
        t.prototype.findAnimation = function (t) {
          if (null == t) {
            throw Error("animationName cannot be null.");
          }
          var e = this.animations;
          var i = 0;
          for (var n = e.length; i < n; i++) {
            var r = e[i];
            if (r.name == t) {
              return r;
            }
          }
          return null;
        };
        t.prototype.findIkConstraint = function (t) {
          if (null == t) {
            throw Error("constraintName cannot be null.");
          }
          var e = this.ikConstraints;
          var i = 0;
          for (var n = e.length; i < n; i++) {
            var r = e[i];
            if (r.name == t) {
              return r;
            }
          }
          return null;
        };
        t.prototype.findTransformConstraint = function (t) {
          if (null == t) {
            throw Error("constraintName cannot be null.");
          }
          var e = this.transformConstraints;
          var i = 0;
          for (var n = e.length; i < n; i++) {
            var r = e[i];
            if (r.name == t) {
              return r;
            }
          }
          return null;
        };
        t.prototype.findPathConstraint = function (t) {
          if (null == t) {
            throw Error("constraintName cannot be null.");
          }
          var e = this.pathConstraints;
          var i = 0;
          for (var n = e.length; i < n; i++) {
            var r = e[i];
            if (r.name == t) {
              return r;
            }
          }
          return null;
        };
        t.prototype.findPathConstraintIndex = function (t) {
          if (null == t) {
            throw Error("pathConstraintName cannot be null.");
          }
          var e = this.pathConstraints;
          var i = 0;
          for (var n = e.length; i < n; i++) {
            if (e[i].name == t) {
              return i;
            }
          }
          return -1;
        };
        return t;
      }();
      t.SkeletonData = e;
    })(r || (r = {}));
    (function (t) {
      var e = function () {
        function e(t) {
          this.scale = 1;
          this.linkedMeshes = [];
          this.attachmentLoader = t;
        }
        e.prototype.readSkeletonData = function (i) {
          var n = this.scale;
          var r = new t.SkeletonData();
          var s = "string" == typeof i ? JSON.parse(i) : i;
          var a = s.skeleton;
          if (null != a) {
            r.hash = a.hash;
            r.version = a.spine;
            r.x = a.x;
            r.y = a.y;
            r.width = a.width;
            r.height = a.height;
            r.fps = a.fps;
            r.imagesPath = a.images;
          }
          if (s.bones) {
            for (var o = 0; o < s.bones.length; o++) {
              var c = s.bones[o];
              var l = null;
              var h = this.getValue(c, "parent", null);
              if (null != h && null == (l = r.findBone(h))) {
                throw Error("Parent bone not found: " + h);
              }
              (_ = new t.BoneData(r.bones.length, c.name, l)).length = this.getValue(c, "length", 0) * n;
              _.x = this.getValue(c, "x", 0) * n;
              _.y = this.getValue(c, "y", 0) * n;
              _.rotation = this.getValue(c, "rotation", 0);
              _.scaleX = this.getValue(c, "scaleX", 1);
              _.scaleY = this.getValue(c, "scaleY", 1);
              _.shearX = this.getValue(c, "shearX", 0);
              _.shearY = this.getValue(c, "shearY", 0);
              _.transformMode = e.transformModeFromString(this.getValue(c, "transform", "normal"));
              _.skinRequired = this.getValue(c, "skin", false);
              r.bones.push(_);
            }
          }
          if (s.slots) {
            for (o = 0; o < s.slots.length; o++) {
              var u = (w = s.slots[o]).name;
              var f = w.bone;
              var d = r.findBone(f);
              if (null == d) {
                throw Error("Slot bone not found: " + f);
              }
              var _ = new t.SlotData(r.slots.length, u, d);
              var p = this.getValue(w, "color", null);
              if (null != p) {
                _.color.setFromString(p);
              }
              var v = this.getValue(w, "dark", null);
              if (null != v) {
                _.darkColor = new t.Color(1, 1, 1, 1);
                _.darkColor.setFromString(v);
              }
              _.attachmentName = this.getValue(w, "attachment", null);
              _.blendMode = e.blendModeFromString(this.getValue(w, "blend", "normal"));
              r.slots.push(_);
            }
          }
          if (s.ik) {
            for (o = 0; o < s.ik.length; o++) {
              var g = s.ik[o];
              (_ = new t.IkConstraintData(g.name)).order = this.getValue(g, "order", 0);
              _.skinRequired = this.getValue(g, "skin", false);
              for (var m = 0; m < g.bones.length; m++) {
                f = g.bones[m];
                if (null == (S = r.findBone(f))) {
                  throw Error("IK bone not found: " + f);
                }
                _.bones.push(S);
              }
              var y = g.target;
              _.target = r.findBone(y);
              if (null == _.target) {
                throw Error("IK target bone not found: " + y);
              }
              _.mix = this.getValue(g, "mix", 1);
              _.softness = this.getValue(g, "softness", 0) * n;
              _.bendDirection = this.getValue(g, "bendPositive", true) ? 1 : -1;
              _.compress = this.getValue(g, "compress", false);
              _.stretch = this.getValue(g, "stretch", false);
              _.uniform = this.getValue(g, "uniform", false);
              r.ikConstraints.push(_);
            }
          }
          if (s.transform) {
            for (o = 0; o < s.transform.length; o++) {
              g = s.transform[o];
              (_ = new t.TransformConstraintData(g.name)).order = this.getValue(g, "order", 0);
              _.skinRequired = this.getValue(g, "skin", false);
              for (m = 0; m < g.bones.length; m++) {
                f = g.bones[m];
                if (null == (S = r.findBone(f))) {
                  throw Error("Transform constraint bone not found: " + f);
                }
                _.bones.push(S);
              }
              y = g.target;
              _.target = r.findBone(y);
              if (null == _.target) {
                throw Error("Transform constraint target bone not found: " + y);
              }
              _.local = this.getValue(g, "local", false);
              _.relative = this.getValue(g, "relative", false);
              _.offsetRotation = this.getValue(g, "rotation", 0);
              _.offsetX = this.getValue(g, "x", 0) * n;
              _.offsetY = this.getValue(g, "y", 0) * n;
              _.offsetScaleX = this.getValue(g, "scaleX", 0);
              _.offsetScaleY = this.getValue(g, "scaleY", 0);
              _.offsetShearY = this.getValue(g, "shearY", 0);
              _.rotateMix = this.getValue(g, "rotateMix", 1);
              _.translateMix = this.getValue(g, "translateMix", 1);
              _.scaleMix = this.getValue(g, "scaleMix", 1);
              _.shearMix = this.getValue(g, "shearMix", 1);
              r.transformConstraints.push(_);
            }
          }
          if (s.path) {
            for (o = 0; o < s.path.length; o++) {
              g = s.path[o];
              (_ = new t.PathConstraintData(g.name)).order = this.getValue(g, "order", 0);
              _.skinRequired = this.getValue(g, "skin", false);
              for (m = 0; m < g.bones.length; m++) {
                f = g.bones[m];
                if (null == (S = r.findBone(f))) {
                  throw Error("Transform constraint bone not found: " + f);
                }
                _.bones.push(S);
              }
              y = g.target;
              _.target = r.findSlot(y);
              if (null == _.target) {
                throw Error("Path target slot not found: " + y);
              }
              _.positionMode = e.positionModeFromString(this.getValue(g, "positionMode", "percent"));
              _.spacingMode = e.spacingModeFromString(this.getValue(g, "spacingMode", "length"));
              _.rotateMode = e.rotateModeFromString(this.getValue(g, "rotateMode", "tangent"));
              _.offsetRotation = this.getValue(g, "rotation", 0);
              _.position = this.getValue(g, "position", 0);
              if (_.positionMode == t.PositionMode.Fixed) {
                _.position *= n;
              }
              _.spacing = this.getValue(g, "spacing", 0);
              if (!(_.spacingMode != t.SpacingMode.Length && _.spacingMode != t.SpacingMode.Fixed)) {
                _.spacing *= n;
              }
              _.rotateMix = this.getValue(g, "rotateMix", 1);
              _.translateMix = this.getValue(g, "translateMix", 1);
              r.pathConstraints.push(_);
            }
          }
          if (s.skins) {
            var T = s.skins;
            if (!(T instanceof Array)) {
              var E = [];
              for (var A in T) E.push({
                name: A,
                attachments: T[A]
              });
              T = E;
            }
            for (o = 0; o < T.length; o++) {
              var x = T[o];
              var C = new t.Skin(x.name);
              if (x.bones) {
                for (var b = 0; b < x.bones.length; b++) {
                  var S;
                  if (null == (S = r.findBone(x.bones[b]))) {
                    throw Error("Skin bone not found: " + x.bones[o]);
                  }
                  C.bones.push(S);
                }
              }
              if (x.ik) {
                for (b = 0; b < x.ik.length; b++) {
                  if (null == (R = r.findIkConstraint(x.ik[b]))) {
                    throw Error("Skin IK constraint not found: " + x.ik[o]);
                  }
                  C.constraints.push(R);
                }
              }
              if (x.transform) {
                for (b = 0; b < x.transform.length; b++) {
                  if (null == (R = r.findTransformConstraint(x.transform[b]))) {
                    throw Error("Skin transform constraint not found: " + x.transform[o]);
                  }
                  C.constraints.push(R);
                }
              }
              if (x.path) {
                for (b = 0; b < x.path.length; b++) {
                  var R;
                  if (null == (R = r.findPathConstraint(x.path[b]))) {
                    throw Error("Skin path constraint not found: " + x.path[o]);
                  }
                  C.constraints.push(R);
                }
              }
              for (var u in x.attachments) {
                var M = r.findSlot(u);
                if (null == M) {
                  throw Error("Slot not found: " + u);
                }
                var w = x.attachments[u];
                for (var I in w) {
                  var O = this.readAttachment(w[I], C, M.index, I, r);
                  if (null != O) {
                    C.setAttachment(M.index, I, O);
                  }
                }
              }
              r.skins.push(C);
              if ("default" == C.name) {
                r.defaultSkin = C;
              }
            }
          }
          o = 0;
          for (var L = this.linkedMeshes.length; o < L; o++) {
            var P = this.linkedMeshes[o];
            if (null == (C = null == P.skin ? r.defaultSkin : r.findSkin(P.skin))) {
              throw Error("Skin not found: " + P.skin);
            }
            var D = C.getAttachment(P.slotIndex, P.parent);
            if (null == D) {
              throw Error("Parent mesh not found: " + P.parent);
            }
            P.mesh.deformAttachment = P.inheritDeform ? D : P.mesh;
            P.mesh.setParentMesh(D);
            P.mesh.updateUVs();
          }
          this.linkedMeshes.length = 0;
          if (s.events) {
            for (var N in s.events) {
              var F = s.events[N];
              (_ = new t.EventData(N)).intValue = this.getValue(F, "int", 0);
              _.floatValue = this.getValue(F, "float", 0);
              _.stringValue = this.getValue(F, "string", "");
              _.audioPath = this.getValue(F, "audio", null);
              if (null != _.audioPath) {
                _.volume = this.getValue(F, "volume", 1);
                _.balance = this.getValue(F, "balance", 0);
              }
              r.events.push(_);
            }
          }
          if (s.animations) {
            for (var B in s.animations) {
              var V = s.animations[B];
              this.readAnimation(V, B, r);
            }
          }
          return r;
        };
        e.prototype.readAttachment = function (e, n, r, s, a) {
          var o = this.scale;
          s = this.getValue(e, "name", s);
          switch (this.getValue(e, "type", "region")) {
            case "region":
              var c = this.getValue(e, "path", s);
              var l = this.attachmentLoader.newRegionAttachment(n, s, c);
              return null == l ? null : (l.path = c, l.x = this.getValue(e, "x", 0) * o, l.y = this.getValue(e, "y", 0) * o, l.scaleX = this.getValue(e, "scaleX", 1), l.scaleY = this.getValue(e, "scaleY", 1), l.rotation = this.getValue(e, "rotation", 0), l.width = e.width * o, l.height = e.height * o, null != (y = this.getValue(e, "color", null)) && l.color.setFromString(y), l.updateOffset(), l);
            case "boundingbox":
              var h = this.attachmentLoader.newBoundingBoxAttachment(n, s);
              return null == h ? null : (this.readVertices(e, h, e.vertexCount << 1), null != (y = this.getValue(e, "color", null)) && h.color.setFromString(y), h);
            case "mesh":
            case "linkedmesh":
              c = this.getValue(e, "path", s);
              var u = this.attachmentLoader.newMeshAttachment(n, s, c);
              if (null == u) {
                return null;
              }
              u.path = c;
              if (null != (y = this.getValue(e, "color", null))) {
                u.color.setFromString(y);
              }
              u.width = this.getValue(e, "width", 0) * o;
              u.height = this.getValue(e, "height", 0) * o;
              var f = this.getValue(e, "parent", null);
              if (null != f) {
                this.linkedMeshes.push(new i(u, this.getValue(e, "skin", null), r, f, this.getValue(e, "deform", true)));
                return u;
              }
              var d = e.uvs;
              this.readVertices(e, u, d.length);
              u.triangles = e.triangles;
              u.regionUVs = d;
              u.updateUVs();
              u.edges = this.getValue(e, "edges", null);
              u.hullLength = 2 * this.getValue(e, "hull", 0);
              return u;
            case "path":
              if (null == (c = this.attachmentLoader.newPathAttachment(n, s))) {
                return null;
              }
              c.closed = this.getValue(e, "closed", false);
              c.constantSpeed = this.getValue(e, "constantSpeed", true);
              var _ = e.vertexCount;
              this.readVertices(e, c, _ << 1);
              var p = t.Utils.newArray(_ / 3, 0);
              for (var v = 0; v < e.lengths.length; v++) {
                p[v] = e.lengths[v] * o;
              }
              c.lengths = p;
              if (null != (y = this.getValue(e, "color", null))) {
                c.color.setFromString(y);
              }
              return c;
            case "point":
              var g = this.attachmentLoader.newPointAttachment(n, s);
              return null == g ? null : (g.x = this.getValue(e, "x", 0) * o, g.y = this.getValue(e, "y", 0) * o, g.rotation = this.getValue(e, "rotation", 0), null != (y = this.getValue(e, "color", null)) && g.color.setFromString(y), g);
            case "clipping":
              var m = this.attachmentLoader.newClippingAttachment(n, s);
              if (null == m) {
                return null;
              }
              var y;
              var T = this.getValue(e, "end", null);
              if (null != T) {
                var E = a.findSlot(T);
                if (null == E) {
                  throw Error("Clipping end slot not found: " + T);
                }
                m.endSlot = E;
              }
              _ = e.vertexCount;
              this.readVertices(e, m, _ << 1);
              if (null != (y = this.getValue(e, "color", null))) {
                m.color.setFromString(y);
              }
              return m;
          }
          return null;
        };
        e.prototype.readVertices = function (e, i, n) {
          var r = this.scale;
          i.worldVerticesLength = n;
          var s = e.vertices;
          if (n != s.length) {
            var a = [];
            var o = [];
            u = 0;
            for (f = s.length; u < f;) {
              var c = s[u++];
              o.push(c);
              for (var l = u + 4 * c; u < l; u += 4) {
                o.push(s[u]);
                a.push(s[u + 1] * r);
                a.push(s[u + 2] * r);
                a.push(s[u + 3]);
              }
            }
            i.bones = o;
            i.vertices = t.Utils.toFloatArray(a);
          } else {
            var h = t.Utils.toFloatArray(s);
            if (1 != r) {
              var u = 0;
              for (var f = s.length; u < f; u++) {
                h[u] *= r;
              }
            }
            i.vertices = h;
          }
        };
        e.prototype.readAnimation = function (e, i, n) {
          var r = this.scale;
          var s = [];
          var a = 0;
          if (e.slots) {
            for (var o in e.slots) {
              var c = e.slots[o];
              if (-1 == (Q = n.findSlotIndex(o))) {
                throw Error("Slot not found: " + o);
              }
              for (var l in c) {
                var h = c[l];
                if ("attachment" == l) {
                  (T = new t.AttachmentTimeline(h.length)).slotIndex = Q;
                  var u = 0;
                  for (var f = 0; f < h.length; f++) {
                    var d = h[f];
                    T.setFrame(u++, this.getValue(d, "time", 0), d.name);
                  }
                  s.push(T);
                  a = Math.max(a, T.frames[T.getFrameCount() - 1]);
                } else if ("color" == l) {
                  (T = new t.ColorTimeline(h.length)).slotIndex = Q;
                  u = 0;
                  for (f = 0; f < h.length; f++) {
                    d = h[f];
                    var _ = new t.Color();
                    _.setFromString(d.color);
                    T.setFrame(u, this.getValue(d, "time", 0), _.r, _.g, _.b, _.a);
                    this.readCurve(d, T, u);
                    u++;
                  }
                  s.push(T);
                  a = Math.max(a, T.frames[(T.getFrameCount() - 1) * t.ColorTimeline.ENTRIES]);
                } else {
                  if ("twoColor" != l) {
                    throw Error("Invalid timeline type for a slot: " + l + " (" + o + ")");
                  }
                  (T = new t.TwoColorTimeline(h.length)).slotIndex = Q;
                  u = 0;
                  for (f = 0; f < h.length; f++) {
                    d = h[f];
                    var p = new t.Color();
                    var v = new t.Color();
                    p.setFromString(d.light);
                    v.setFromString(d.dark);
                    T.setFrame(u, this.getValue(d, "time", 0), p.r, p.g, p.b, p.a, v.r, v.g, v.b);
                    this.readCurve(d, T, u);
                    u++;
                  }
                  s.push(T);
                  a = Math.max(a, T.frames[(T.getFrameCount() - 1) * t.TwoColorTimeline.ENTRIES]);
                }
              }
            }
          }
          if (e.bones) {
            for (var g in e.bones) {
              var m = e.bones[g];
              var y = n.findBoneIndex(g);
              if (-1 == y) {
                throw Error("Bone not found: " + g);
              }
              for (var l in m) {
                h = m[l];
                if ("rotate" === l) {
                  (T = new t.RotateTimeline(h.length)).boneIndex = y;
                  u = 0;
                  for (f = 0; f < h.length; f++) {
                    d = h[f];
                    T.setFrame(u, this.getValue(d, "time", 0), this.getValue(d, "angle", 0));
                    this.readCurve(d, T, u);
                    u++;
                  }
                  s.push(T);
                  a = Math.max(a, T.frames[(T.getFrameCount() - 1) * t.RotateTimeline.ENTRIES]);
                } else {
                  if ("translate" !== l && "scale" !== l && "shear" !== l) {
                    throw Error("Invalid timeline type for a bone: " + l + " (" + g + ")");
                  }
                  var T = null;
                  var E = 1;
                  var A = 0;
                  if ("scale" === l) {
                    T = new t.ScaleTimeline(h.length);
                    A = 1;
                  } else if ("shear" === l) {
                    T = new t.ShearTimeline(h.length);
                  } else {
                    T = new t.TranslateTimeline(h.length);
                    E = r;
                  }
                  T.boneIndex = y;
                  u = 0;
                  for (f = 0; f < h.length; f++) {
                    d = h[f];
                    var x = this.getValue(d, "x", A);
                    var C = this.getValue(d, "y", A);
                    T.setFrame(u, this.getValue(d, "time", 0), x * E, C * E);
                    this.readCurve(d, T, u);
                    u++;
                  }
                  s.push(T);
                  a = Math.max(a, T.frames[(T.getFrameCount() - 1) * t.TranslateTimeline.ENTRIES]);
                }
              }
            }
          }
          if (e.ik) {
            for (var b in e.ik) {
              var S = e.ik[b];
              var R = n.findIkConstraint(b);
              (T = new t.IkConstraintTimeline(S.length)).ikConstraintIndex = n.ikConstraints.indexOf(R);
              u = 0;
              for (f = 0; f < S.length; f++) {
                d = S[f];
                T.setFrame(u, this.getValue(d, "time", 0), this.getValue(d, "mix", 1), this.getValue(d, "softness", 0) * r, this.getValue(d, "bendPositive", true) ? 1 : -1, this.getValue(d, "compress", false), this.getValue(d, "stretch", false));
                this.readCurve(d, T, u);
                u++;
              }
              s.push(T);
              a = Math.max(a, T.frames[(T.getFrameCount() - 1) * t.IkConstraintTimeline.ENTRIES]);
            }
          }
          if (e.transform) {
            for (var b in e.transform) {
              S = e.transform[b];
              R = n.findTransformConstraint(b);
              (T = new t.TransformConstraintTimeline(S.length)).transformConstraintIndex = n.transformConstraints.indexOf(R);
              u = 0;
              for (f = 0; f < S.length; f++) {
                d = S[f];
                T.setFrame(u, this.getValue(d, "time", 0), this.getValue(d, "rotateMix", 1), this.getValue(d, "translateMix", 1), this.getValue(d, "scaleMix", 1), this.getValue(d, "shearMix", 1));
                this.readCurve(d, T, u);
                u++;
              }
              s.push(T);
              a = Math.max(a, T.frames[(T.getFrameCount() - 1) * t.TransformConstraintTimeline.ENTRIES]);
            }
          }
          var M = e.path || e.paths;
          if (M) {
            for (var b in M) {
              S = M[b];
              var w = n.findPathConstraintIndex(b);
              if (-1 == w) {
                throw Error("Path constraint not found: " + b);
              }
              var I = n.pathConstraints[w];
              for (var l in S) {
                h = S[l];
                if ("position" === l || "spacing" === l) {
                  T = null;
                  E = 1;
                  if ("spacing" === l) {
                    T = new t.PathConstraintSpacingTimeline(h.length);
                    if (!(I.spacingMode != t.SpacingMode.Length && I.spacingMode != t.SpacingMode.Fixed)) {
                      E = r;
                    }
                  } else {
                    T = new t.PathConstraintPositionTimeline(h.length);
                    if (I.positionMode == t.PositionMode.Fixed) {
                      E = r;
                    }
                  }
                  T.pathConstraintIndex = w;
                  u = 0;
                  for (f = 0; f < h.length; f++) {
                    d = h[f];
                    T.setFrame(u, this.getValue(d, "time", 0), this.getValue(d, l, 0) * E);
                    this.readCurve(d, T, u);
                    u++;
                  }
                  s.push(T);
                  a = Math.max(a, T.frames[(T.getFrameCount() - 1) * t.PathConstraintPositionTimeline.ENTRIES]);
                } else if ("mix" === l) {
                  (T = new t.PathConstraintMixTimeline(h.length)).pathConstraintIndex = w;
                  u = 0;
                  for (f = 0; f < h.length; f++) {
                    d = h[f];
                    T.setFrame(u, this.getValue(d, "time", 0), this.getValue(d, "rotateMix", 1), this.getValue(d, "translateMix", 1));
                    this.readCurve(d, T, u);
                    u++;
                  }
                  s.push(T);
                  a = Math.max(a, T.frames[(T.getFrameCount() - 1) * t.PathConstraintMixTimeline.ENTRIES]);
                }
              }
            }
          }
          if (e.deform) {
            for (var O in e.deform) {
              var L = e.deform[O];
              var P = n.findSkin(O);
              if (null == P) {
                throw Error("Skin not found: " + O);
              }
              for (var o in L) {
                c = L[o];
                if (-1 == (Q = n.findSlotIndex(o))) {
                  throw Error("Slot not found: " + c.name);
                }
                for (var l in c) {
                  h = c[l];
                  var D = P.getAttachment(Q, l);
                  if (null != D) {
                    var N = null != D.bones;
                    var F = D.vertices;
                    var B = N ? F.length / 3 * 2 : F.length;
                    (T = new t.DeformTimeline(h.length)).slotIndex = Q;
                    T.attachment = D;
                    u = 0;
                    for (var V = 0; V < h.length; V++) {
                      d = h[V];
                      var k = undefined;
                      var U = this.getValue(d, "vertices", null);
                      if (null == U) {
                        k = N ? t.Utils.newFloatArray(B) : F;
                      } else {
                        k = t.Utils.newFloatArray(B);
                        var z = this.getValue(d, "offset", 0);
                        t.Utils.arrayCopy(U, 0, k, z, U.length);
                        if (1 != r) {
                          for (var G = (f = z) + U.length; f < G; f++) {
                            k[f] *= r;
                          }
                        }
                        if (!N) {
                          for (f = 0; f < B; f++) {
                            k[f] += F[f];
                          }
                        }
                      }
                      T.setFrame(u, this.getValue(d, "time", 0), k);
                      this.readCurve(d, T, u);
                      u++;
                    }
                    s.push(T);
                    a = Math.max(a, T.frames[T.getFrameCount() - 1]);
                  }
                }
              }
            }
          }
          var H = e.drawOrder;
          if (null == H) {
            H = e.draworder;
          }
          if (null != H) {
            T = new t.DrawOrderTimeline(H.length);
            var W = n.slots.length;
            u = 0;
            for (V = 0; V < H.length; V++) {
              var X = H[V];
              var Y = null;
              var j = this.getValue(X, "offsets", null);
              if (null != j) {
                Y = t.Utils.newArray(W, -1);
                var q = t.Utils.newArray(W - j.length, 0);
                var Z = 0;
                var K = 0;
                for (f = 0; f < j.length; f++) {
                  var Q;
                  var J = j[f];
                  if (-1 == (Q = n.findSlotIndex(J.slot))) {
                    throw Error("Slot not found: " + J.slot);
                  }
                  for (; Z != Q;) {
                    q[K++] = Z++;
                  }
                  Y[Z + J.offset] = Z++;
                }
                for (; Z < W;) {
                  q[K++] = Z++;
                }
                for (f = W - 1; f >= 0; f--) {
                  if (-1 == Y[f]) {
                    Y[f] = q[--K];
                  }
                }
              }
              T.setFrame(u++, this.getValue(X, "time", 0), Y);
            }
            s.push(T);
            a = Math.max(a, T.frames[T.getFrameCount() - 1]);
          }
          if (e.events) {
            T = new t.EventTimeline(e.events.length);
            u = 0;
            for (f = 0; f < e.events.length; f++) {
              var $ = e.events[f];
              var tt = n.findEvent($.name);
              if (null == tt) {
                throw Error("Event not found: " + $.name);
              }
              var et = new t.Event(t.Utils.toSinglePrecision(this.getValue($, "time", 0)), tt);
              et.intValue = this.getValue($, "int", tt.intValue);
              et.floatValue = this.getValue($, "float", tt.floatValue);
              et.stringValue = this.getValue($, "string", tt.stringValue);
              if (null != et.data.audioPath) {
                et.volume = this.getValue($, "volume", 1);
                et.balance = this.getValue($, "balance", 0);
              }
              T.setFrame(u++, et);
            }
            s.push(T);
            a = Math.max(a, T.frames[T.getFrameCount() - 1]);
          }
          if (isNaN(a)) {
            throw Error("Error while parsing animation, duration is NaN");
          }
          n.animations.push(new t.Animation(i, s, a));
        };
        e.prototype.readCurve = function (t, e, i) {
          var n = t.curve;
          if (n) {
            if ("stepped" == n) {
              e.setStepped(i);
            } else if ("[object Array]" === Object.prototype.toString.call(n)) {
              e.setCurve(i, n[0], n[1], n[2], n[3]);
            } else {
              e.setCurve(i, n, this.getValue(t, "c2", 0), this.getValue(t, "c3", 1), this.getValue(t, "c4", 1));
            }
          }
        };
        e.prototype.getValue = function (t, e, i) {
          return undefined !== t[e] ? t[e] : i;
        };
        e.blendModeFromString = function (e) {
          if ("normal" == (e = e.toLowerCase())) {
            return t.BlendMode.Normal;
          }
          if ("additive" == e) {
            return t.BlendMode.Additive;
          }
          if ("multiply" == e) {
            return t.BlendMode.Multiply;
          }
          if ("screen" == e) {
            return t.BlendMode.Screen;
          }
          throw Error("Unknown blend mode: " + e);
        };
        e.positionModeFromString = function (e) {
          if ("fixed" == (e = e.toLowerCase())) {
            return t.PositionMode.Fixed;
          }
          if ("percent" == e) {
            return t.PositionMode.Percent;
          }
          throw Error("Unknown position mode: " + e);
        };
        e.spacingModeFromString = function (e) {
          if ("length" == (e = e.toLowerCase())) {
            return t.SpacingMode.Length;
          }
          if ("fixed" == e) {
            return t.SpacingMode.Fixed;
          }
          if ("percent" == e) {
            return t.SpacingMode.Percent;
          }
          throw Error("Unknown position mode: " + e);
        };
        e.rotateModeFromString = function (e) {
          if ("tangent" == (e = e.toLowerCase())) {
            return t.RotateMode.Tangent;
          }
          if ("chain" == e) {
            return t.RotateMode.Chain;
          }
          if ("chainscale" == e) {
            return t.RotateMode.ChainScale;
          }
          throw Error("Unknown rotate mode: " + e);
        };
        e.transformModeFromString = function (e) {
          if ("normal" == (e = e.toLowerCase())) {
            return t.TransformMode.Normal;
          }
          if ("onlytranslation" == e) {
            return t.TransformMode.OnlyTranslation;
          }
          if ("norotationorreflection" == e) {
            return t.TransformMode.NoRotationOrReflection;
          }
          if ("noscale" == e) {
            return t.TransformMode.NoScale;
          }
          if ("noscaleorreflection" == e) {
            return t.TransformMode.NoScaleOrReflection;
          }
          throw Error("Unknown transform mode: " + e);
        };
        return e;
      }();
      t.SkeletonJson = e;
      var i = function (t, e, i, n, r) {
        this.mesh = t;
        this.skin = e;
        this.slotIndex = i;
        this.parent = n;
        this.inheritDeform = r;
      };
    })(r || (r = {}));
    (function (t) {
      var e = function (t, e, i) {
        this.slotIndex = t;
        this.name = e;
        this.attachment = i;
      };
      t.SkinEntry = e;
      var i = function () {
        function i(t) {
          this.attachments = [];
          this.bones = [];
          this.constraints = [];
          if (null == t) {
            throw Error("name cannot be null.");
          }
          this.name = t;
        }
        i.prototype.setAttachment = function (t, e, i) {
          if (null == i) {
            throw Error("attachment cannot be null.");
          }
          var n = this.attachments;
          if (t >= n.length) {
            n.length = t + 1;
          }
          if (!n[t]) {
            n[t] = {};
          }
          n[t][e] = i;
        };
        i.prototype.addSkin = function (t) {
          for (var e = 0; e < t.bones.length; e++) {
            var i = t.bones[e];
            var n = false;
            for (var r = 0; r < this.bones.length; r++) {
              if (this.bones[r] == i) {
                n = true;
                break;
              }
            }
            if (!n) {
              this.bones.push(i);
            }
          }
          for (e = 0; e < t.constraints.length; e++) {
            var s = t.constraints[e];
            n = false;
            for (r = 0; r < this.constraints.length; r++) {
              if (this.constraints[r] == s) {
                n = true;
                break;
              }
            }
            if (!n) {
              this.constraints.push(s);
            }
          }
          var a = t.getAttachments();
          for (e = 0; e < a.length; e++) {
            var o = a[e];
            this.setAttachment(o.slotIndex, o.name, o.attachment);
          }
        };
        i.prototype.copySkin = function (e) {
          for (var i = 0; i < e.bones.length; i++) {
            var n = e.bones[i];
            var r = false;
            for (var s = 0; s < this.bones.length; s++) {
              if (this.bones[s] == n) {
                r = true;
                break;
              }
            }
            if (!r) {
              this.bones.push(n);
            }
          }
          for (i = 0; i < e.constraints.length; i++) {
            var a = e.constraints[i];
            r = false;
            for (s = 0; s < this.constraints.length; s++) {
              if (this.constraints[s] == a) {
                r = true;
                break;
              }
            }
            if (!r) {
              this.constraints.push(a);
            }
          }
          var o = e.getAttachments();
          for (i = 0; i < o.length; i++) {
            var c = o[i];
            if (null != c.attachment) {
              if (c.attachment instanceof t.MeshAttachment) {
                c.attachment = c.attachment.newLinkedMesh();
                this.setAttachment(c.slotIndex, c.name, c.attachment);
              } else {
                c.attachment = c.attachment.copy();
                this.setAttachment(c.slotIndex, c.name, c.attachment);
              }
            }
          }
        };
        i.prototype.getAttachment = function (t, e) {
          var i = this.attachments[t];
          return i ? i[e] : null;
        };
        i.prototype.removeAttachment = function (t, e) {
          var i = this.attachments[t];
          if (i) {
            i[e] = null;
          }
        };
        i.prototype.getAttachments = function () {
          var t = [];
          for (var i = 0; i < this.attachments.length; i++) {
            var n = this.attachments[i];
            if (n) {
              for (var r in n) {
                var s = n[r];
                if (s) {
                  t.push(new e(i, r, s));
                }
              }
            }
          }
          return t;
        };
        i.prototype.getAttachmentsForSlot = function (t, i) {
          var n = this.attachments[t];
          if (n) {
            for (var r in n) {
              var s = n[r];
              if (s) {
                i.push(new e(t, r, s));
              }
            }
          }
        };
        i.prototype.clear = function () {
          this.attachments.length = 0;
          this.bones.length = 0;
          this.constraints.length = 0;
        };
        i.prototype.attachAll = function (t, e) {
          var i = 0;
          for (var n = 0; n < t.slots.length; n++) {
            var r = t.slots[n];
            var s = r.getAttachment();
            if (s && i < e.attachments.length) {
              var a = e.attachments[i];
              for (var o in a) if (s == a[o]) {
                var c = this.getAttachment(i, o);
                if (null != c) {
                  r.setAttachment(c);
                }
                break;
              }
            }
            i++;
          }
        };
        return i;
      }();
      t.Skin = i;
    })(r || (r = {}));
    (function (t) {
      var e = function () {
        function e(e, i) {
          this.deform = [];
          if (null == e) {
            throw Error("data cannot be null.");
          }
          if (null == i) {
            throw Error("bone cannot be null.");
          }
          this.data = e;
          this.bone = i;
          this.color = new t.Color();
          this.darkColor = null == e.darkColor ? null : new t.Color();
          this.setToSetupPose();
        }
        e.prototype.getSkeleton = function () {
          return this.bone.skeleton;
        };
        e.prototype.getAttachment = function () {
          return this.attachment;
        };
        e.prototype.setAttachment = function (t) {
          if (this.attachment != t) {
            this.attachment = t;
            this.attachmentTime = this.bone.skeleton.time;
            this.deform.length = 0;
          }
        };
        e.prototype.setAttachmentTime = function (t) {
          this.attachmentTime = this.bone.skeleton.time - t;
        };
        e.prototype.getAttachmentTime = function () {
          return this.bone.skeleton.time - this.attachmentTime;
        };
        e.prototype.setToSetupPose = function () {
          this.color.setFromColor(this.data.color);
          if (null != this.darkColor) {
            this.darkColor.setFromColor(this.data.darkColor);
          }
          if (null == this.data.attachmentName) {
            this.attachment = null;
          } else {
            this.attachment = null;
            this.setAttachment(this.bone.skeleton.getAttachment(this.data.index, this.data.attachmentName));
          }
        };
        return e;
      }();
      t.Slot = e;
    })(r || (r = {}));
    (function (t) {
      t.SlotData = function (e, i, n) {
        this.color = new t.Color(1, 1, 1, 1);
        if (e < 0) {
          throw Error("index must be >= 0.");
        }
        if (null == i) {
          throw Error("name cannot be null.");
        }
        if (null == n) {
          throw Error("boneData cannot be null.");
        }
        this.index = e;
        this.name = i;
        this.boneData = n;
      };
    })(r || (r = {}));
    (function (t) {
      var e;
      var i;
      var n = function () {
        function t(t) {
          this._image = t;
        }
        t.prototype.getImage = function () {
          return this._image;
        };
        t.filterFromString = function (t) {
          switch (t.toLowerCase()) {
            case "nearest":
              return e.Nearest;
            case "linear":
              return e.Linear;
            case "mipmap":
              return e.MipMap;
            case "mipmapnearestnearest":
              return e.MipMapNearestNearest;
            case "mipmaplinearnearest":
              return e.MipMapLinearNearest;
            case "mipmapnearestlinear":
              return e.MipMapNearestLinear;
            case "mipmaplinearlinear":
              return e.MipMapLinearLinear;
            default:
              throw Error("Unknown texture filter " + t);
          }
        };
        t.wrapFromString = function (t) {
          switch (t.toLowerCase()) {
            case "mirroredtepeat":
              return i.MirroredRepeat;
            case "clamptoedge":
              return i.ClampToEdge;
            case "repeat":
              return i.Repeat;
            default:
              throw Error("Unknown texture wrap " + t);
          }
        };
        return t;
      }();
      t.Texture = n;
      (function (t) {
        t[t.Nearest = 9728] = "Nearest";
        t[t.Linear = 9729] = "Linear";
        t[t.MipMap = 9987] = "MipMap";
        t[t.MipMapNearestNearest = 9984] = "MipMapNearestNearest";
        t[t.MipMapLinearNearest = 9985] = "MipMapLinearNearest";
        t[t.MipMapNearestLinear = 9986] = "MipMapNearestLinear";
        t[t.MipMapLinearLinear = 9987] = "MipMapLinearLinear";
      })(e = t.TextureFilter || (t.TextureFilter = {}));
      (function (t) {
        t[t.MirroredRepeat = 33648] = "MirroredRepeat";
        t[t.ClampToEdge = 33071] = "ClampToEdge";
        t[t.Repeat = 10497] = "Repeat";
      })(i = t.TextureWrap || (t.TextureWrap = {}));
      t.TextureRegion = function () {
        this.u = 0;
        this.v = 0;
        this.u2 = 0;
        this.v2 = 0;
        this.width = 0;
        this.height = 0;
        this.rotate = false;
        this.offsetX = 0;
        this.offsetY = 0;
        this.originalWidth = 0;
        this.originalHeight = 0;
      };
      var r = function (t) {
        function e() {
          return null !== t && t.apply(this, arguments) || this;
        }
        s(e, t);
        e.prototype.setFilters = function () {};
        e.prototype.setWraps = function () {};
        e.prototype.dispose = function () {};
        return e;
      }(n);
      t.FakeTexture = r;
    })(r || (r = {}));
    (function (t) {
      var e = function () {
        function e(t, e) {
          this.pages = [];
          this.regions = [];
          this.load(t, e);
        }
        e.prototype.load = function (e, s) {
          if (null == s) {
            throw Error("textureLoader cannot be null.");
          }
          var a = new i(e);
          var o = [,,,,];
          for (var c = null;;) {
            var l = a.readLine();
            if (null == l) {
              break;
            }
            if (0 == (l = l.trim()).length) {
              c = null;
            } else if (c) {
              var h = new r();
              h.name = l;
              h.page = c;
              var u = a.readValue();
              if ("true" == u.toLocaleLowerCase()) {
                h.degrees = 90;
              } else if ("false" == u.toLocaleLowerCase()) {
                h.degrees = 0;
              } else {
                h.degrees = parseFloat(u);
              }
              h.rotate = 90 == h.degrees;
              a.readTuple(o);
              var f = parseInt(o[0]);
              var d = parseInt(o[1]);
              a.readTuple(o);
              var _ = parseInt(o[0]);
              var p = parseInt(o[1]);
              h.u = f / c.width;
              h.v = d / c.height;
              if (h.rotate) {
                h.u2 = (f + p) / c.width;
                h.v2 = (d + _) / c.height;
              } else {
                h.u2 = (f + _) / c.width;
                h.v2 = (d + p) / c.height;
              }
              h.x = f;
              h.y = d;
              h.width = Math.abs(_);
              h.height = Math.abs(p);
              if (4 == a.readTuple(o) && 4 == a.readTuple(o)) {
                a.readTuple(o);
              }
              h.originalWidth = parseInt(o[0]);
              h.originalHeight = parseInt(o[1]);
              a.readTuple(o);
              h.offsetX = parseInt(o[0]);
              h.offsetY = parseInt(o[1]);
              h.index = parseInt(a.readValue());
              h.texture = c.texture;
              this.regions.push(h);
            } else {
              (c = new n()).name = l;
              if (2 == a.readTuple(o)) {
                c.width = parseInt(o[0]);
                c.height = parseInt(o[1]);
                a.readTuple(o);
              }
              a.readTuple(o);
              c.minFilter = t.Texture.filterFromString(o[0]);
              c.magFilter = t.Texture.filterFromString(o[1]);
              var v = a.readValue();
              c.uWrap = t.TextureWrap.ClampToEdge;
              c.vWrap = t.TextureWrap.ClampToEdge;
              if ("x" == v) {
                c.uWrap = t.TextureWrap.Repeat;
              } else if ("y" == v) {
                c.vWrap = t.TextureWrap.Repeat;
              } else if ("xy" == v) {
                c.uWrap = c.vWrap = t.TextureWrap.Repeat;
              }
              c.texture = s(l);
              c.texture.setFilters(c.minFilter, c.magFilter);
              c.texture.setWraps(c.uWrap, c.vWrap);
              c.width = c.texture.getImage().width;
              c.height = c.texture.getImage().height;
              this.pages.push(c);
            }
          }
        };
        e.prototype.findRegion = function (t) {
          for (var e = 0; e < this.regions.length; e++) {
            if (this.regions[e].name == t) {
              return this.regions[e];
            }
          }
          return null;
        };
        e.prototype.dispose = function () {
          for (var t = 0; t < this.pages.length; t++) {
            this.pages[t].texture.dispose();
          }
        };
        return e;
      }();
      t.TextureAtlas = e;
      var i = function () {
        function t(t) {
          this.index = 0;
          this.lines = t.split(/\r\n|\r|\n/);
        }
        t.prototype.readLine = function () {
          return this.index >= this.lines.length ? null : this.lines[this.index++];
        };
        t.prototype.readValue = function () {
          var t = this.readLine();
          var e = t.indexOf(":");
          if (-1 == e) {
            throw Error("Invalid line: " + t);
          }
          return t.substring(e + 1).trim();
        };
        t.prototype.readTuple = function (t) {
          var e = this.readLine();
          var i = e.indexOf(":");
          if (-1 == i) {
            throw Error("Invalid line: " + e);
          }
          var n = 0;
          for (var r = i + 1; n < 3; n++) {
            var s = e.indexOf(",", r);
            if (-1 == s) {
              break;
            }
            t[n] = e.substr(r, s - r).trim();
            r = s + 1;
          }
          t[n] = e.substring(r).trim();
          return n + 1;
        };
        return t;
      }();
      var n = function () {};
      t.TextureAtlasPage = n;
      var r = function (t) {
        function e() {
          return null !== t && t.apply(this, arguments) || this;
        }
        s(e, t);
        return e;
      }(t.TextureRegion);
      t.TextureAtlasRegion = r;
    })(r || (r = {}));
    (function (t) {
      var e = function () {
        function e(e, i) {
          this.rotateMix = 0;
          this.translateMix = 0;
          this.scaleMix = 0;
          this.shearMix = 0;
          this.temp = new t.Vector2();
          this.active = false;
          if (null == e) {
            throw Error("data cannot be null.");
          }
          if (null == i) {
            throw Error("skeleton cannot be null.");
          }
          this.data = e;
          this.rotateMix = e.rotateMix;
          this.translateMix = e.translateMix;
          this.scaleMix = e.scaleMix;
          this.shearMix = e.shearMix;
          this.bones = [];
          for (var n = 0; n < e.bones.length; n++) {
            this.bones.push(i.findBone(e.bones[n].name));
          }
          this.target = i.findBone(e.target.name);
        }
        e.prototype.isActive = function () {
          return this.active;
        };
        e.prototype.apply = function () {
          this.update();
        };
        e.prototype.update = function () {
          if (this.data.local) {
            if (this.data.relative) {
              this.applyRelativeLocal();
            } else {
              this.applyAbsoluteLocal();
            }
          } else if (this.data.relative) {
            this.applyRelativeWorld();
          } else {
            this.applyAbsoluteWorld();
          }
        };
        e.prototype.applyAbsoluteWorld = function () {
          var e = this.rotateMix;
          var i = this.translateMix;
          var n = this.scaleMix;
          var r = this.shearMix;
          var s = this.target;
          var a = s.a;
          var o = s.b;
          var c = s.c;
          var l = s.d;
          var h = a * l - o * c > 0 ? t.MathUtils.degRad : -t.MathUtils.degRad;
          var u = this.data.offsetRotation * h;
          var f = this.data.offsetShearY * h;
          var d = this.bones;
          var _ = 0;
          for (var p = d.length; _ < p; _++) {
            var v = d[_];
            var g = false;
            if (0 != e) {
              var m = v.a;
              var y = v.b;
              var T = v.c;
              var E = v.d;
              if ((R = Math.atan2(c, a) - Math.atan2(T, m) + u) > t.MathUtils.PI) {
                R -= t.MathUtils.PI2;
              } else if (R < -t.MathUtils.PI) {
                R += t.MathUtils.PI2;
              }
              var A = Math.cos(R *= e);
              var x = Math.sin(R);
              v.a = A * m - x * T;
              v.b = A * y - x * E;
              v.c = x * m + A * T;
              v.d = x * y + A * E;
              g = true;
            }
            if (0 != i) {
              var C = this.temp;
              s.localToWorld(C.set(this.data.offsetX, this.data.offsetY));
              v.worldX += (C.x - v.worldX) * i;
              v.worldY += (C.y - v.worldY) * i;
              g = true;
            }
            if (n > 0) {
              var b = Math.sqrt(v.a * v.a + v.c * v.c);
              var S = Math.sqrt(a * a + c * c);
              if (b > 1e-5) {
                b = (b + (S - b + this.data.offsetScaleX) * n) / b;
              }
              v.a *= b;
              v.c *= b;
              b = Math.sqrt(v.b * v.b + v.d * v.d);
              S = Math.sqrt(o * o + l * l);
              if (b > 1e-5) {
                b = (b + (S - b + this.data.offsetScaleY) * n) / b;
              }
              v.b *= b;
              v.d *= b;
              g = true;
            }
            if (r > 0) {
              y = v.b;
              E = v.d;
              var R;
              var M = Math.atan2(E, y);
              if ((R = Math.atan2(l, o) - Math.atan2(c, a) - (M - Math.atan2(v.c, v.a))) > t.MathUtils.PI) {
                R -= t.MathUtils.PI2;
              } else if (R < -t.MathUtils.PI) {
                R += t.MathUtils.PI2;
              }
              R = M + (R + f) * r;
              b = Math.sqrt(y * y + E * E);
              v.b = Math.cos(R) * b;
              v.d = Math.sin(R) * b;
              g = true;
            }
            if (g) {
              v.appliedValid = false;
            }
          }
        };
        e.prototype.applyRelativeWorld = function () {
          var e = this.rotateMix;
          var i = this.translateMix;
          var n = this.scaleMix;
          var r = this.shearMix;
          var s = this.target;
          var a = s.a;
          var o = s.b;
          var c = s.c;
          var l = s.d;
          var h = a * l - o * c > 0 ? t.MathUtils.degRad : -t.MathUtils.degRad;
          var u = this.data.offsetRotation * h;
          var f = this.data.offsetShearY * h;
          var d = this.bones;
          var _ = 0;
          for (var p = d.length; _ < p; _++) {
            var v;
            var g = d[_];
            var m = false;
            if (0 != e) {
              var y = g.a;
              var T = g.b;
              var E = g.c;
              var A = g.d;
              if ((v = Math.atan2(c, a) + u) > t.MathUtils.PI) {
                v -= t.MathUtils.PI2;
              } else if (v < -t.MathUtils.PI) {
                v += t.MathUtils.PI2;
              }
              var x = Math.cos(v *= e);
              var C = Math.sin(v);
              g.a = x * y - C * E;
              g.b = x * T - C * A;
              g.c = C * y + x * E;
              g.d = C * T + x * A;
              m = true;
            }
            if (0 != i) {
              var b = this.temp;
              s.localToWorld(b.set(this.data.offsetX, this.data.offsetY));
              g.worldX += b.x * i;
              g.worldY += b.y * i;
              m = true;
            }
            if (n > 0) {
              var S = (Math.sqrt(a * a + c * c) - 1 + this.data.offsetScaleX) * n + 1;
              g.a *= S;
              g.c *= S;
              S = (Math.sqrt(o * o + l * l) - 1 + this.data.offsetScaleY) * n + 1;
              g.b *= S;
              g.d *= S;
              m = true;
            }
            if (r > 0) {
              if ((v = Math.atan2(l, o) - Math.atan2(c, a)) > t.MathUtils.PI) {
                v -= t.MathUtils.PI2;
              } else if (v < -t.MathUtils.PI) {
                v += t.MathUtils.PI2;
              }
              T = g.b;
              A = g.d;
              v = Math.atan2(A, T) + (v - t.MathUtils.PI / 2 + f) * r;
              S = Math.sqrt(T * T + A * A);
              g.b = Math.cos(v) * S;
              g.d = Math.sin(v) * S;
              m = true;
            }
            if (m) {
              g.appliedValid = false;
            }
          }
        };
        e.prototype.applyAbsoluteLocal = function () {
          var t = this.rotateMix;
          var e = this.translateMix;
          var i = this.scaleMix;
          var n = this.shearMix;
          var r = this.target;
          if (!r.appliedValid) {
            r.updateAppliedTransform();
          }
          var s = this.bones;
          var a = 0;
          for (var o = s.length; a < o; a++) {
            var c = s[a];
            if (!c.appliedValid) {
              c.updateAppliedTransform();
            }
            var l = c.arotation;
            if (0 != t) {
              var h = r.arotation - l + this.data.offsetRotation;
              l += (h -= 360 * (16384 - (16384.499999999996 - h / 360 | 0))) * t;
            }
            var u = c.ax;
            var f = c.ay;
            if (0 != e) {
              u += (r.ax - u + this.data.offsetX) * e;
              f += (r.ay - f + this.data.offsetY) * e;
            }
            var d = c.ascaleX;
            var _ = c.ascaleY;
            if (0 != i) {
              if (d > 1e-5) {
                d = (d + (r.ascaleX - d + this.data.offsetScaleX) * i) / d;
              }
              if (_ > 1e-5) {
                _ = (_ + (r.ascaleY - _ + this.data.offsetScaleY) * i) / _;
              }
            }
            var p = c.ashearY;
            if (0 != n) {
              h = r.ashearY - p + this.data.offsetShearY;
              h -= 360 * (16384 - (16384.499999999996 - h / 360 | 0));
              c.shearY += h * n;
            }
            c.updateWorldTransformWith(u, f, l, d, _, c.ashearX, p);
          }
        };
        e.prototype.applyRelativeLocal = function () {
          var t = this.rotateMix;
          var e = this.translateMix;
          var i = this.scaleMix;
          var n = this.shearMix;
          var r = this.target;
          if (!r.appliedValid) {
            r.updateAppliedTransform();
          }
          var s = this.bones;
          var a = 0;
          for (var o = s.length; a < o; a++) {
            var c = s[a];
            if (!c.appliedValid) {
              c.updateAppliedTransform();
            }
            var l = c.arotation;
            if (0 != t) {
              l += (r.arotation + this.data.offsetRotation) * t;
            }
            var h = c.ax;
            var u = c.ay;
            if (0 != e) {
              h += (r.ax + this.data.offsetX) * e;
              u += (r.ay + this.data.offsetY) * e;
            }
            var f = c.ascaleX;
            var d = c.ascaleY;
            if (0 != i) {
              if (f > 1e-5) {
                f *= (r.ascaleX - 1 + this.data.offsetScaleX) * i + 1;
              }
              if (d > 1e-5) {
                d *= (r.ascaleY - 1 + this.data.offsetScaleY) * i + 1;
              }
            }
            var _ = c.ashearY;
            if (0 != n) {
              _ += (r.ashearY + this.data.offsetShearY) * n;
            }
            c.updateWorldTransformWith(h, u, l, f, d, c.ashearX, _);
          }
        };
        return e;
      }();
      t.TransformConstraint = e;
    })(r || (r = {}));
    (function (t) {
      var e = function (t) {
        function e(e) {
          var i = t.call(this, e, 0, false) || this;
          i.bones = [];
          i.rotateMix = 0;
          i.translateMix = 0;
          i.scaleMix = 0;
          i.shearMix = 0;
          i.offsetRotation = 0;
          i.offsetX = 0;
          i.offsetY = 0;
          i.offsetScaleX = 0;
          i.offsetScaleY = 0;
          i.offsetShearY = 0;
          i.relative = false;
          i.local = false;
          return i;
        }
        s(e, t);
        return e;
      }(t.ConstraintData);
      t.TransformConstraintData = e;
    })(r || (r = {}));
    (function (t) {
      var e = function () {
        function e() {
          this.convexPolygons = [];
          this.convexPolygonsIndices = [];
          this.indicesArray = [];
          this.isConcaveArray = [];
          this.triangles = [];
          this.polygonPool = new t.Pool(function () {
            return [];
          });
          this.polygonIndicesPool = new t.Pool(function () {
            return [];
          });
        }
        e.prototype.triangulate = function (t) {
          var n = t.length >> 1;
          var r = this.indicesArray;
          r.length = 0;
          for (var s = 0; s < n; s++) {
            r[s] = s;
          }
          var a = this.isConcaveArray;
          a.length = 0;
          s = 0;
          for (var o = n; s < o; ++s) {
            a[s] = e.isConcave(s, n, t, r);
          }
          var c = this.triangles;
          for (c.length = 0; n > 3;) {
            var l = n - 1;
            for (var h = 1;;) {
              var l;
              var h;
              t: if (!a[s]) {
                var u = r[l] << 1;
                var f = r[s] << 1;
                var d = r[h] << 1;
                var _ = t[u];
                var p = t[u + 1];
                var v = t[f];
                var g = t[f + 1];
                var m = t[d];
                var y = t[d + 1];
                for (var T = (h + 1) % n; T != l; T = (T + 1) % n) {
                  if (a[T]) {
                    var E = r[T] << 1;
                    var A = t[E];
                    var x = t[E + 1];
                    if (e.positiveArea(m, y, _, p, A, x) && e.positiveArea(_, p, v, g, A, x) && e.positiveArea(v, g, m, y, A, x)) {
                      break t;
                    }
                  }
                }
                break;
              }
              if (0 == h) {
                do {
                  if (!a[s]) {
                    break;
                  }
                  s--;
                } while (s > 0);
                break;
              }
              l = s;
              s = h;
              h = (h + 1) % n;
            }
            c.push(r[(n + s - 1) % n]);
            c.push(r[s]);
            c.push(r[(s + 1) % n]);
            r.splice(s, 1);
            a.splice(s, 1);
            var C = (--n + s - 1) % n;
            var b = s == n ? 0 : s;
            a[C] = e.isConcave(C, n, t, r);
            a[b] = e.isConcave(b, n, t, r);
          }
          if (3 == n) {
            c.push(r[2]);
            c.push(r[0]);
            c.push(r[1]);
          }
          return c;
        };
        e.prototype.decompose = function (t, i) {
          var r = this.convexPolygons;
          this.polygonPool.freeAll(r);
          r.length = 0;
          var s = this.convexPolygonsIndices;
          this.polygonIndicesPool.freeAll(s);
          s.length = 0;
          var a = this.polygonIndicesPool.obtain();
          a.length = 0;
          var o = this.polygonPool.obtain();
          o.length = 0;
          var c = -1;
          var l = 0;
          var h = 0;
          for (var u = i.length; h < u; h += 3) {
            var f = i[h] << 1;
            var d = i[h + 1] << 1;
            var _ = i[h + 2] << 1;
            var p = t[f];
            var v = t[f + 1];
            var g = t[d];
            var m = t[d + 1];
            var y = t[_];
            var T = t[_ + 1];
            var E = false;
            if (c == f) {
              var A = o.length - 4;
              var x = e.winding(o[A], o[A + 1], o[A + 2], o[A + 3], y, T);
              var C = e.winding(y, T, o[0], o[1], o[2], o[3]);
              if (x == l && C == l) {
                o.push(y);
                o.push(T);
                a.push(_);
                E = true;
              }
            }
            if (!E) {
              if (o.length > 0) {
                r.push(o);
                s.push(a);
              } else {
                this.polygonPool.free(o);
                this.polygonIndicesPool.free(a);
              }
              (o = this.polygonPool.obtain()).length = 0;
              o.push(p);
              o.push(v);
              o.push(g);
              o.push(m);
              o.push(y);
              o.push(T);
              (a = this.polygonIndicesPool.obtain()).length = 0;
              a.push(f);
              a.push(d);
              a.push(_);
              l = e.winding(p, v, g, m, y, T);
              c = f;
            }
          }
          if (o.length > 0) {
            r.push(o);
            s.push(a);
          }
          h = 0;
          for (u = r.length; h < u; h++) {
            if (0 != (a = s[h]).length) {
              var b = a[0];
              var S = a[a.length - 1];
              var R = (o = r[h])[A = o.length - 4];
              var M = o[A + 1];
              var w = o[A + 2];
              var I = o[A + 3];
              var O = o[0];
              var L = o[1];
              var P = o[2];
              var D = o[3];
              var N = e.winding(R, M, w, I, O, L);
              for (var F = 0; F < u; F++) {
                if (F != h) {
                  var B = s[F];
                  if (3 == B.length) {
                    var V = B[0];
                    var k = B[1];
                    var U = B[2];
                    var z = r[F];
                    y = z[z.length - 2];
                    T = z[z.length - 1];
                    if (V == b && k == S) {
                      x = e.winding(R, M, w, I, y, T);
                      C = e.winding(y, T, O, L, P, D);
                      if (x == N && C == N) {
                        z.length = 0;
                        B.length = 0;
                        o.push(y);
                        o.push(T);
                        a.push(U);
                        R = w;
                        M = I;
                        w = y;
                        I = T;
                        F = 0;
                      }
                    }
                  }
                }
              }
            }
          }
          for (h = r.length - 1; h >= 0; h--) {
            if (0 == (o = r[h]).length) {
              r.splice(h, 1);
              this.polygonPool.free(o);
              a = s[h];
              s.splice(h, 1);
              this.polygonIndicesPool.free(a);
            }
          }
          return r;
        };
        e.isConcave = function (t, e, i, n) {
          var r = n[(e + t - 1) % e] << 1;
          var s = n[t] << 1;
          var a = n[(t + 1) % e] << 1;
          return !this.positiveArea(i[r], i[r + 1], i[s], i[s + 1], i[a], i[a + 1]);
        };
        e.positiveArea = function (t, e, i, n, r, s) {
          return t * (s - n) + i * (e - s) + r * (n - e) >= 0;
        };
        e.winding = function (t, e, i, n, r, s) {
          var a = i - t;
          var o = n - e;
          return r * o - s * a + a * e - t * o >= 0 ? 1 : -1;
        };
        return e;
      }();
      t.Triangulator = e;
    })(r || (r = {}));
    (function (t) {
      var e = function () {
        function t() {
          this.array = [];
        }
        t.prototype.add = function (t) {
          var e = this.contains(t);
          this.array[0 | t] = 0 | t;
          return !e;
        };
        t.prototype.contains = function (t) {
          return null != this.array[0 | t];
        };
        t.prototype.remove = function (t) {
          this.array[0 | t] = undefined;
        };
        t.prototype.clear = function () {
          this.array.length = 0;
        };
        return t;
      }();
      t.IntSet = e;
      var i = function () {
        function t(t, e, i, n) {
          if (undefined === t) {
            t = 0;
          }
          if (undefined === e) {
            e = 0;
          }
          if (undefined === i) {
            i = 0;
          }
          if (undefined === n) {
            n = 0;
          }
          this.r = t;
          this.g = e;
          this.b = i;
          this.a = n;
        }
        t.prototype.set = function (t, e, i, n) {
          this.r = t;
          this.g = e;
          this.b = i;
          this.a = n;
          this.clamp();
          return this;
        };
        t.prototype.setFromColor = function (t) {
          this.r = t.r;
          this.g = t.g;
          this.b = t.b;
          this.a = t.a;
          return this;
        };
        t.prototype.setFromString = function (t) {
          t = "#" == t.charAt(0) ? t.substr(1) : t;
          this.r = parseInt(t.substr(0, 2), 16) / 255;
          this.g = parseInt(t.substr(2, 2), 16) / 255;
          this.b = parseInt(t.substr(4, 2), 16) / 255;
          this.a = (8 != t.length ? 255 : parseInt(t.substr(6, 2), 16)) / 255;
          return this;
        };
        t.prototype.add = function (t, e, i, n) {
          this.r += t;
          this.g += e;
          this.b += i;
          this.a += n;
          this.clamp();
          return this;
        };
        t.prototype.clamp = function () {
          if (this.r < 0) {
            this.r = 0;
          } else if (this.r > 1) {
            this.r = 1;
          }
          if (this.g < 0) {
            this.g = 0;
          } else if (this.g > 1) {
            this.g = 1;
          }
          if (this.b < 0) {
            this.b = 0;
          } else if (this.b > 1) {
            this.b = 1;
          }
          if (this.a < 0) {
            this.a = 0;
          } else if (this.a > 1) {
            this.a = 1;
          }
          return this;
        };
        t.rgba8888ToColor = function (t, e) {
          t.r = ((4278190080 & e) >>> 24) / 255;
          t.g = ((16711680 & e) >>> 16) / 255;
          t.b = ((65280 & e) >>> 8) / 255;
          t.a = (255 & e) / 255;
        };
        t.rgb888ToColor = function (t, e) {
          t.r = ((16711680 & e) >>> 16) / 255;
          t.g = ((65280 & e) >>> 8) / 255;
          t.b = (255 & e) / 255;
        };
        t.WHITE = new t(1, 1, 1, 1);
        t.RED = new t(1, 0, 0, 1);
        t.GREEN = new t(0, 1, 0, 1);
        t.BLUE = new t(0, 0, 1, 1);
        t.MAGENTA = new t(1, 0, 1, 1);
        return t;
      }();
      t.Color = i;
      var n = function () {
        function t() {}
        t.clamp = function (t, e, i) {
          return t < e ? e : t > i ? i : t;
        };
        t.cosDeg = function (e) {
          return Math.cos(e * t.degRad);
        };
        t.sinDeg = function (e) {
          return Math.sin(e * t.degRad);
        };
        t.signum = function (t) {
          return t > 0 ? 1 : t < 0 ? -1 : 0;
        };
        t.toInt = function (t) {
          return t > 0 ? Math.floor(t) : Math.ceil(t);
        };
        t.cbrt = function (t) {
          var e = Math.pow(Math.abs(t), 0.3333333333333333);
          return t < 0 ? -e : e;
        };
        t.randomTriangular = function (e, i) {
          return t.randomTriangularWith(e, i, .5 * (e + i));
        };
        t.randomTriangularWith = function (t, e, i) {
          var n = Math.random();
          var r = e - t;
          return n <= (i - t) / r ? t + Math.sqrt(n * r * (i - t)) : e - Math.sqrt((1 - n) * r * (e - i));
        };
        t.PI = 3.1415927;
        t.PI2 = 2 * t.PI;
        t.radiansToDegrees = 180 / t.PI;
        t.radDeg = t.radiansToDegrees;
        t.degreesToRadians = t.PI / 180;
        t.degRad = t.degreesToRadians;
        return t;
      }();
      t.MathUtils = n;
      var r = function () {
        function t() {}
        t.prototype.apply = function (t, e, i) {
          return t + (e - t) * this.applyInternal(i);
        };
        return t;
      }();
      t.Interpolation = r;
      var a = function (t) {
        function e(e) {
          var i = t.call(this) || this;
          i.power = 2;
          i.power = e;
          return i;
        }
        s(e, t);
        e.prototype.applyInternal = function (t) {
          return t <= .5 ? Math.pow(2 * t, this.power) / 2 : Math.pow(2 * (t - 1), this.power) / (this.power % 2 == 0 ? -2 : 2) + 1;
        };
        return e;
      }(r);
      t.Pow = a;
      var o = function (t) {
        function e(e) {
          return t.call(this, e) || this;
        }
        s(e, t);
        e.prototype.applyInternal = function (t) {
          return Math.pow(t - 1, this.power) * (this.power % 2 == 0 ? -1 : 1) + 1;
        };
        return e;
      }(a);
      t.PowOut = o;
      var c = function () {
        function t() {}
        t.arrayCopy = function (t, e, i, n, r) {
          var s = e;
          for (var a = n; s < e + r; s++, a++) {
            i[a] = t[s];
          }
        };
        t.setArraySize = function (t, e, i) {
          if (undefined === i) {
            i = 0;
          }
          var n = t.length;
          if (n == e) {
            return t;
          }
          t.length = e;
          if (n < e) {
            for (var r = n; r < e; r++) {
              t[r] = i;
            }
          }
          return t;
        };
        t.ensureArrayCapacity = function (e, i, n) {
          if (undefined === n) {
            n = 0;
          }
          return e.length >= i ? e : t.setArraySize(e, i, n);
        };
        t.newArray = function (t, e) {
          var i = Array(t);
          for (var n = 0; n < t; n++) {
            i[n] = e;
          }
          return i;
        };
        t.newFloatArray = function (e) {
          if (t.SUPPORTS_TYPED_ARRAYS) {
            return new Float32Array(e);
          }
          var i = Array(e);
          for (var n = 0; n < i.length; n++) {
            i[n] = 0;
          }
          return i;
        };
        t.newShortArray = function (e) {
          if (t.SUPPORTS_TYPED_ARRAYS) {
            return new Int16Array(e);
          }
          var i = Array(e);
          for (var n = 0; n < i.length; n++) {
            i[n] = 0;
          }
          return i;
        };
        t.toFloatArray = function (e) {
          return t.SUPPORTS_TYPED_ARRAYS ? new Float32Array(e) : e;
        };
        t.toSinglePrecision = function (e) {
          return t.SUPPORTS_TYPED_ARRAYS ? Math.fround(e) : e;
        };
        t.webkit602BugfixHelper = function () {};
        t.contains = function (t, e, i) {
          if (undefined === i) {
            i = true;
          }
          for (var n = 0; n < t.length; n++) {
            if (t[n] == e) {
              return true;
            }
          }
          return false;
        };
        t.SUPPORTS_TYPED_ARRAYS = "undefined" != typeof Float32Array;
        return t;
      }();
      t.Utils = c;
      var l = function () {
        function t() {}
        t.logBones = function (t) {
          for (var e = 0; e < t.bones.length; e++) {
            t.bones[e];
          }
        };
        return t;
      }();
      t.DebugUtils = l;
      var h = function () {
        function t(t) {
          this.items = [];
          this.instantiator = t;
        }
        t.prototype.obtain = function () {
          return this.items.length > 0 ? this.items.pop() : this.instantiator();
        };
        t.prototype.free = function (t) {
          if (t.reset) {
            t.reset();
          }
          this.items.push(t);
        };
        t.prototype.freeAll = function (t) {
          for (var e = 0; e < t.length; e++) {
            if (t[e].reset) {
              t[e].reset();
            }
            this.items[e] = t[e];
          }
        };
        t.prototype.clear = function () {
          this.items.length = 0;
        };
        return t;
      }();
      t.Pool = h;
      var u = function () {
        function t(t, e) {
          if (undefined === t) {
            t = 0;
          }
          if (undefined === e) {
            e = 0;
          }
          this.x = t;
          this.y = e;
        }
        t.prototype.set = function (t, e) {
          this.x = t;
          this.y = e;
          return this;
        };
        t.prototype.length = function () {
          var t = this.x;
          var e = this.y;
          return Math.sqrt(t * t + e * e);
        };
        t.prototype.normalize = function () {
          var t = this.length();
          if (0 != t) {
            this.x /= t;
            this.y /= t;
          }
          return this;
        };
        return t;
      }();
      t.Vector2 = u;
      var f = function () {
        function t() {
          this.maxDelta = .064;
          this.framesPerSecond = 0;
          this.delta = 0;
          this.totalTime = 0;
          this.lastTime = Date.now() / 1e3;
          this.frameCount = 0;
          this.frameTime = 0;
        }
        t.prototype.update = function () {
          var t = Date.now() / 1e3;
          this.delta = t - this.lastTime;
          this.frameTime += this.delta;
          this.totalTime += this.delta;
          if (this.delta > this.maxDelta) {
            this.delta = this.maxDelta;
          }
          this.lastTime = t;
          this.frameCount++;
          if (this.frameTime > 1) {
            this.framesPerSecond = this.frameCount / this.frameTime;
            this.frameTime = 0;
            this.frameCount = 0;
          }
        };
        return t;
      }();
      t.TimeKeeper = f;
      var d = function () {
        function t(t) {
          if (undefined === t) {
            t = 32;
          }
          this.addedValues = 0;
          this.lastValue = 0;
          this.mean = 0;
          this.dirty = true;
          this.values = Array(t);
        }
        t.prototype.hasEnoughData = function () {
          return this.addedValues >= this.values.length;
        };
        t.prototype.addValue = function (t) {
          if (this.addedValues < this.values.length) {
            this.addedValues++;
          }
          this.values[this.lastValue++] = t;
          if (this.lastValue > this.values.length - 1) {
            this.lastValue = 0;
          }
          this.dirty = true;
        };
        t.prototype.getMean = function () {
          if (this.hasEnoughData()) {
            if (this.dirty) {
              var t = 0;
              for (var e = 0; e < this.values.length; e++) {
                t += this.values[e];
              }
              this.mean = t / this.values.length;
              this.dirty = false;
            }
            return this.mean;
          }
          return 0;
        };
        return t;
      }();
      t.WindowedMean = d;
    })(r || (r = {}));
    if (!Math.fround) {
      n = new Float32Array(1);
      Math.fround = function (t) {
        n[0] = t;
        return n[0];
      };
    }
    (function (t) {
      var e = function (t) {
        if (null == t) {
          throw Error("name cannot be null.");
        }
        this.name = t;
      };
      t.Attachment = e;
      var i = function (e) {
        function i(t) {
          var n = e.call(this, t) || this;
          n.id = (65535 & i.nextID++) << 11;
          n.worldVerticesLength = 0;
          n.deformAttachment = n;
          return n;
        }
        s(i, e);
        i.prototype.computeWorldVertices = function (t, e, i, n, r, s) {
          i = r + (i >> 1) * s;
          var a = t.bone.skeleton;
          var o = t.deform;
          var c = this.vertices;
          var l = this.bones;
          if (null != l) {
            var h = 0;
            var u = 0;
            for (var f = 0; f < e; f += 2) {
              h += (v = l[h]) + 1;
              u += v;
            }
            var d = a.bones;
            if (0 == o.length) {
              M = r;
              for (C = 3 * u; M < i; M += s) {
                var _ = 0;
                var p = 0;
                var v = l[h++];
                for (v += h; h < v; h++, C += 3) {
                  T = d[l[h]];
                  w = c[C];
                  I = c[C + 1];
                  var g = c[C + 2];
                  _ += (w * T.a + I * T.b + T.worldX) * g;
                  p += (w * T.c + I * T.d + T.worldY) * g;
                }
                n[M] = _;
                n[M + 1] = p;
              }
            } else {
              M = r;
              C = 3 * u;
              M = r;
              y = C = 3 * u;
              for (undefined; M < i; M += s) {
                var y;
                _ = 0;
                p = 0;
                v = l[h++];
                for (v += h; h < v; h++, C += 3, y += 2) {
                  T = d[l[h]];
                  w = c[C] + o[y];
                  I = c[C + 1] + o[y + 1];
                  g = c[C + 2];
                  _ += (w * T.a + I * T.b + T.worldX) * g;
                  p += (w * T.c + I * T.d + T.worldY) * g;
                }
                n[M] = _;
                n[M + 1] = p;
              }
            }
          } else {
            if (o.length > 0) {
              c = o;
            }
            var T;
            var E = (T = t.bone).worldX;
            var A = T.worldY;
            var x = T.a;
            var C = T.b;
            var b = T.c;
            var S = T.d;
            var R = e;
            for (var M = r; M < i; R += 2, M += s) {
              var w = c[R];
              var I = c[R + 1];
              n[M] = w * x + I * C + E;
              n[M + 1] = w * b + I * S + A;
            }
          }
        };
        i.prototype.copyTo = function (e) {
          if (null != this.bones) {
            e.bones = Array(this.bones.length);
            t.Utils.arrayCopy(this.bones, 0, e.bones, 0, this.bones.length);
          } else {
            e.bones = null;
          }
          if (null != this.vertices) {
            e.vertices = t.Utils.newFloatArray(this.vertices.length);
            t.Utils.arrayCopy(this.vertices, 0, e.vertices, 0, this.vertices.length);
          } else {
            e.vertices = null;
          }
          e.worldVerticesLength = this.worldVerticesLength;
          e.deformAttachment = this.deformAttachment;
        };
        i.nextID = 0;
        return i;
      }(e);
      t.VertexAttachment = i;
    })(r || (r = {}));
    (function (t) {
      (function (t) {
        t[t.Region = 0] = "Region";
        t[t.BoundingBox = 1] = "BoundingBox";
        t[t.Mesh = 2] = "Mesh";
        t[t.LinkedMesh = 3] = "LinkedMesh";
        t[t.Path = 4] = "Path";
        t[t.Point = 5] = "Point";
        t[t.Clipping = 6] = "Clipping";
      })(t.AttachmentType || (t.AttachmentType = {}));
    })(r || (r = {}));
    (function (t) {
      var e = function (e) {
        function i(i) {
          var n = e.call(this, i) || this;
          n.color = new t.Color(1, 1, 1, 1);
          return n;
        }
        s(i, e);
        i.prototype.copy = function () {
          var t = new i(name);
          this.copyTo(t);
          t.color.setFromColor(this.color);
          return t;
        };
        return i;
      }(t.VertexAttachment);
      t.BoundingBoxAttachment = e;
    })(r || (r = {}));
    (function (t) {
      var e = function (e) {
        function i(i) {
          var n = e.call(this, i) || this;
          n.color = new t.Color(.2275, .2275, .8078, 1);
          return n;
        }
        s(i, e);
        i.prototype.copy = function () {
          var t = new i(name);
          this.copyTo(t);
          t.endSlot = this.endSlot;
          t.color.setFromColor(this.color);
          return t;
        };
        return i;
      }(t.VertexAttachment);
      t.ClippingAttachment = e;
    })(r || (r = {}));
    (function (t) {
      var e = function (e) {
        function i(i) {
          var n = e.call(this, i) || this;
          n.color = new t.Color(1, 1, 1, 1);
          n.tempColor = new t.Color(0, 0, 0, 0);
          return n;
        }
        s(i, e);
        i.prototype.updateUVs = function () {
          var e = this.regionUVs;
          if (!(null != this.uvs && this.uvs.length == e.length)) {
            this.uvs = t.Utils.newFloatArray(e.length);
          }
          var i = this.uvs;
          var n = this.uvs.length;
          var r = this.region.u;
          var s = this.region.v;
          var a = 0;
          var o = 0;
          if (this.region instanceof t.TextureAtlasRegion) {
            var c = this.region;
            var l = c.texture.getImage().width;
            var h = c.texture.getImage().height;
            switch (c.degrees) {
              case 90:
                r -= (c.originalHeight - c.offsetY - c.height) / l;
                s -= (c.originalWidth - c.offsetX - c.width) / h;
                a = c.originalHeight / l;
                o = c.originalWidth / h;
                for (var u = 0; u < n; u += 2) {
                  i[u] = r + e[u + 1] * a;
                  i[u + 1] = s + (1 - e[u]) * o;
                }
                return;
              case 180:
                r -= (c.originalWidth - c.offsetX - c.width) / l;
                s -= c.offsetY / h;
                a = c.originalWidth / l;
                o = c.originalHeight / h;
                for (u = 0; u < n; u += 2) {
                  i[u] = r + (1 - e[u]) * a;
                  i[u + 1] = s + (1 - e[u + 1]) * o;
                }
                return;
              case 270:
                r -= c.offsetY / l;
                s -= c.offsetX / h;
                a = c.originalHeight / l;
                o = c.originalWidth / h;
                for (u = 0; u < n; u += 2) {
                  i[u] = r + (1 - e[u + 1]) * a;
                  i[u + 1] = s + e[u] * o;
                }
                return;
            }
            r -= c.offsetX / l;
            s -= (c.originalHeight - c.offsetY - c.height) / h;
            a = c.originalWidth / l;
            o = c.originalHeight / h;
          } else if (null == this.region) {
            r = s = 0;
            a = o = 1;
          } else {
            a = this.region.u2 - r;
            o = this.region.v2 - s;
          }
          for (u = 0; u < n; u += 2) {
            i[u] = r + e[u] * a;
            i[u + 1] = s + e[u + 1] * o;
          }
        };
        i.prototype.getParentMesh = function () {
          return this.parentMesh;
        };
        i.prototype.setParentMesh = function (t) {
          this.parentMesh = t;
          if (null != t) {
            this.bones = t.bones;
            this.vertices = t.vertices;
            this.worldVerticesLength = t.worldVerticesLength;
            this.regionUVs = t.regionUVs;
            this.triangles = t.triangles;
            this.hullLength = t.hullLength;
            this.worldVerticesLength = t.worldVerticesLength;
          }
        };
        i.prototype.copy = function () {
          if (null != this.parentMesh) {
            return this.newLinkedMesh();
          }
          var e = new i(this.name);
          e.region = this.region;
          e.path = this.path;
          e.color.setFromColor(this.color);
          this.copyTo(e);
          e.regionUVs = Array(this.regionUVs.length);
          t.Utils.arrayCopy(this.regionUVs, 0, e.regionUVs, 0, this.regionUVs.length);
          e.uvs = Array(this.uvs.length);
          t.Utils.arrayCopy(this.uvs, 0, e.uvs, 0, this.uvs.length);
          e.triangles = Array(this.triangles.length);
          t.Utils.arrayCopy(this.triangles, 0, e.triangles, 0, this.triangles.length);
          e.hullLength = this.hullLength;
          if (null != this.edges) {
            e.edges = Array(this.edges.length);
            t.Utils.arrayCopy(this.edges, 0, e.edges, 0, this.edges.length);
          }
          e.width = this.width;
          e.height = this.height;
          return e;
        };
        i.prototype.newLinkedMesh = function () {
          var t = new i(this.name);
          t.region = this.region;
          t.path = this.path;
          t.color.setFromColor(this.color);
          t.deformAttachment = this.deformAttachment;
          t.setParentMesh(null != this.parentMesh ? this.parentMesh : this);
          t.updateUVs();
          return t;
        };
        return i;
      }(t.VertexAttachment);
      t.MeshAttachment = e;
    })(r || (r = {}));
    (function (t) {
      var e = function (e) {
        function i(i) {
          var n = e.call(this, i) || this;
          n.closed = false;
          n.constantSpeed = false;
          n.color = new t.Color(1, 1, 1, 1);
          return n;
        }
        s(i, e);
        i.prototype.copy = function () {
          var e = new i(name);
          this.copyTo(e);
          e.lengths = Array(this.lengths.length);
          t.Utils.arrayCopy(this.lengths, 0, e.lengths, 0, this.lengths.length);
          e.closed = closed;
          e.constantSpeed = this.constantSpeed;
          e.color.setFromColor(this.color);
          return e;
        };
        return i;
      }(t.VertexAttachment);
      t.PathAttachment = e;
    })(r || (r = {}));
    (function (t) {
      var e = function (e) {
        function i(i) {
          var n = e.call(this, i) || this;
          n.color = new t.Color(.38, .94, 0, 1);
          return n;
        }
        s(i, e);
        i.prototype.computeWorldPosition = function (t, e) {
          e.x = this.x * t.a + this.y * t.b + t.worldX;
          e.y = this.x * t.c + this.y * t.d + t.worldY;
          return e;
        };
        i.prototype.computeWorldRotation = function (e) {
          var i = t.MathUtils.cosDeg(this.rotation);
          var n = t.MathUtils.sinDeg(this.rotation);
          var r = i * e.a + n * e.b;
          var s = i * e.c + n * e.d;
          return Math.atan2(s, r) * t.MathUtils.radDeg;
        };
        i.prototype.copy = function () {
          var t = new i(name);
          t.x = this.x;
          t.y = this.y;
          t.rotation = this.rotation;
          t.color.setFromColor(this.color);
          return t;
        };
        return i;
      }(t.VertexAttachment);
      t.PointAttachment = e;
    })(r || (r = {}));
    (function (t) {
      var e = function (e) {
        function i(i) {
          var n = e.call(this, i) || this;
          n.x = 0;
          n.y = 0;
          n.scaleX = 1;
          n.scaleY = 1;
          n.rotation = 0;
          n.width = 0;
          n.height = 0;
          n.color = new t.Color(1, 1, 1, 1);
          n.offset = t.Utils.newFloatArray(8);
          n.uvs = t.Utils.newFloatArray(8);
          n.tempColor = new t.Color(1, 1, 1, 1);
          return n;
        }
        s(i, e);
        i.prototype.updateOffset = function () {
          var t = this.width / this.region.originalWidth * this.scaleX;
          var e = this.height / this.region.originalHeight * this.scaleY;
          var n = -this.width / 2 * this.scaleX + this.region.offsetX * t;
          var r = -this.height / 2 * this.scaleY + this.region.offsetY * e;
          var s = n + this.region.width * t;
          var a = r + this.region.height * e;
          var o = this.rotation * Math.PI / 180;
          var c = Math.cos(o);
          var l = Math.sin(o);
          var h = n * c + this.x;
          var u = n * l;
          var f = r * c + this.y;
          var d = r * l;
          var _ = s * c + this.x;
          var p = s * l;
          var v = a * c + this.y;
          var g = a * l;
          var m = this.offset;
          m[i.OX1] = h - d;
          m[i.OY1] = f + u;
          m[i.OX2] = h - g;
          m[i.OY2] = v + u;
          m[i.OX3] = _ - g;
          m[i.OY3] = v + p;
          m[i.OX4] = _ - d;
          m[i.OY4] = f + p;
        };
        i.prototype.setRegion = function (t) {
          this.region = t;
          var e = this.uvs;
          if (t.rotate) {
            e[2] = t.u;
            e[3] = t.v2;
            e[4] = t.u;
            e[5] = t.v;
            e[6] = t.u2;
            e[7] = t.v;
            e[0] = t.u2;
            e[1] = t.v2;
          } else {
            e[0] = t.u;
            e[1] = t.v2;
            e[2] = t.u;
            e[3] = t.v;
            e[4] = t.u2;
            e[5] = t.v;
            e[6] = t.u2;
            e[7] = t.v2;
          }
        };
        i.prototype.computeWorldVertices = function (t, e, n, r) {
          var s = this.offset;
          var a = t.worldX;
          var o = t.worldY;
          var c = t.a;
          var l = t.b;
          var h = t.c;
          var u = t.d;
          var f = 0;
          var d = 0;
          f = s[i.OX1];
          d = s[i.OY1];
          e[n] = f * c + d * l + a;
          e[n + 1] = f * h + d * u + o;
          n += r;
          f = s[i.OX2];
          d = s[i.OY2];
          e[n] = f * c + d * l + a;
          e[n + 1] = f * h + d * u + o;
          n += r;
          f = s[i.OX3];
          d = s[i.OY3];
          e[n] = f * c + d * l + a;
          e[n + 1] = f * h + d * u + o;
          n += r;
          f = s[i.OX4];
          d = s[i.OY4];
          e[n] = f * c + d * l + a;
          e[n + 1] = f * h + d * u + o;
        };
        i.prototype.copy = function () {
          var e = new i(name);
          e.region = this.region;
          e.rendererObject = this.rendererObject;
          e.path = this.path;
          e.x = this.x;
          e.y = this.y;
          e.scaleX = this.scaleX;
          e.scaleY = this.scaleY;
          e.rotation = this.rotation;
          e.width = this.width;
          e.height = this.height;
          t.Utils.arrayCopy(this.uvs, 0, e.uvs, 0, 8);
          t.Utils.arrayCopy(this.offset, 0, e.offset, 0, 8);
          e.color.setFromColor(this.color);
          return e;
        };
        i.OX1 = 0;
        i.OY1 = 1;
        i.OX2 = 2;
        i.OY2 = 3;
        i.OX3 = 4;
        i.OY3 = 5;
        i.OX4 = 6;
        i.OY4 = 7;
        i.X1 = 0;
        i.Y1 = 1;
        i.C1R = 2;
        i.C1G = 3;
        i.C1B = 4;
        i.C1A = 5;
        i.U1 = 6;
        i.V1 = 7;
        i.X2 = 8;
        i.Y2 = 9;
        i.C2R = 10;
        i.C2G = 11;
        i.C2B = 12;
        i.C2A = 13;
        i.U2 = 14;
        i.V2 = 15;
        i.X3 = 16;
        i.Y3 = 17;
        i.C3R = 18;
        i.C3G = 19;
        i.C3B = 20;
        i.C3A = 21;
        i.U3 = 22;
        i.V3 = 23;
        i.X4 = 24;
        i.Y4 = 25;
        i.C4R = 26;
        i.C4G = 27;
        i.C4B = 28;
        i.C4A = 29;
        i.U4 = 30;
        i.V4 = 31;
        return i;
      }(t.Attachment);
      t.RegionAttachment = e;
    })(r || (r = {}));
    (function (t) {
      var e = function () {
        function e(t, e) {
          this.jitterX = 0;
          this.jitterY = 0;
          this.jitterX = t;
          this.jitterY = e;
        }
        e.prototype.begin = function () {};
        e.prototype.transform = function (e) {
          e.x += t.MathUtils.randomTriangular(-this.jitterX, this.jitterY);
          e.y += t.MathUtils.randomTriangular(-this.jitterX, this.jitterY);
        };
        e.prototype.end = function () {};
        return e;
      }();
      t.JitterEffect = e;
    })(r || (r = {}));
    (function (t) {
      var e = function () {
        function e(t, e) {
          this.centerX = 0;
          this.centerY = 0;
          this.radius = 0;
          this.angle = 0;
          this.worldX = 0;
          this.worldY = 0;
          this.radius = t;
          this.interpolation = e;
        }
        e.prototype.begin = function (t) {
          this.worldX = t.x + this.centerX;
          this.worldY = t.y + this.centerY;
        };
        e.prototype.transform = function (e) {
          var i = this.angle * t.MathUtils.degreesToRadians;
          var n = e.x - this.worldX;
          var r = e.y - this.worldY;
          var s = Math.sqrt(n * n + r * r);
          if (s < this.radius) {
            var a = this.interpolation.apply(0, i, (this.radius - s) / this.radius);
            var o = Math.cos(a);
            var c = Math.sin(a);
            e.x = o * n - c * r + this.worldX;
            e.y = c * n + o * r + this.worldY;
          }
        };
        e.prototype.end = function () {};
        e.interpolation = new t.PowOut(2);
        return e;
      }();
      t.SwirlEffect = e;
    })(r || (r = {}));
    e.exports = r;
  }, {}],
  322: [function (t, e) {
    "use strict";

    var i;
    var n;
    var r;
    var s;
    var a;
    var o;
    var c = t("./track-entry-listeners");
    var l = t("./lib/spine");
    var h = [];
    var u = [];
    var f = 0;
    var d = 0;
    var _ = 0;
    var p = null;
    var v = null;
    var g = 0;
    var m = 0;
    var y = 0;
    var T = 0;
    var E = null;
    var A = null;
    var x = 0;
    var C = 0;
    var b = new l.Color(1, 1, 1, 1);
    var S = new l.Color(1, 1, 1, 1);
    var R = [0, 1, 2, 2, 3, 0];
    var M = cc.Class({
      ctor: function () {
        this._privateMode = false;
        this._inited = false;
        this._invalid = true;
        this._enableCacheAttachedInfo = false;
        this.frames = [];
        this.totalTime = 0;
        this._frameIdx = -1;
        this.isCompleted = false;
        this._skeletonInfo = null;
        this._animationName = null;
        this._tempSegments = null;
        this._tempColors = null;
        this._tempBoneInfos = null;
      },
      init: function (t, e) {
        this._inited = true;
        this._animationName = e;
        this._skeletonInfo = t;
      },
      clear: function () {
        this._inited = false;
        var t = 0;
        for (var e = this.frames.length; t < e; t++) {
          this.frames[t].segments.length = 0;
        }
        this.invalidAllFrame();
      },
      bind: function (t) {
        var e = function (t) {
          if (t && t.animation.name === this._animationName) {
            this.isCompleted = true;
          }
        }.bind(this);
        t.complete = e;
      },
      unbind: function (t) {
        t.complete = null;
      },
      begin: function () {
        if (this._invalid) {
          var t = this._skeletonInfo;
          var e = t.curAnimationCache;
          if (e && e !== this) {
            if (this._privateMode) {
              e.invalidAllFrame();
            } else {
              e.updateToFrame();
            }
          }
          var i = t.skeleton;
          var n = t.listener;
          var r = t.state;
          var s = i.data.findAnimation(this._animationName);
          r.setAnimationWith(0, s, false);
          this.bind(n);
          t.curAnimationCache = this;
          this._frameIdx = -1;
          this.isCompleted = false;
          this.totalTime = 0;
          this._invalid = false;
        }
      },
      end: function () {
        if (!this._needToUpdate()) {
          this._skeletonInfo.curAnimationCache = null;
          this.frames.length = this._frameIdx + 1;
          this.isCompleted = true;
          this.unbind(this._skeletonInfo.listener);
        }
      },
      _needToUpdate: function (t) {
        return !this.isCompleted && this.totalTime < 30 && (null == t || this._frameIdx < t);
      },
      updateToFrame: function (t) {
        if (this._inited && (this.begin(), this._needToUpdate(t))) {
          var e = this._skeletonInfo;
          var i = e.skeleton;
          var n = e.clipper;
          var r = e.state;
          do {
            i.update(0.016666666666666666);
            r.update(0.016666666666666666);
            r.apply(i);
            i.updateWorldTransform();
            this._frameIdx++;
            this._updateFrame(i, n, this._frameIdx);
            this.totalTime += 0.016666666666666666;
          } while (this._needToUpdate(t));
          this.end();
        }
      },
      isInited: function () {
        return this._inited;
      },
      isInvalid: function () {
        return this._invalid;
      },
      invalidAllFrame: function () {
        this.isCompleted = false;
        this._invalid = true;
      },
      updateAllFrame: function () {
        this.invalidAllFrame();
        this.updateToFrame();
      },
      enableCacheAttachedInfo: function () {
        if (!this._enableCacheAttachedInfo) {
          this._enableCacheAttachedInfo = true;
          this.invalidAllFrame();
        }
      },
      _updateFrame: function (t, e, i) {
        _ = 0;
        f = 0;
        d = 0;
        p = null;
        v = null;
        g = 0;
        m = 0;
        y = 0;
        T = 0;
        E = null;
        A = null;
        this.frames[i] = this.frames[i] || {
          segments: [],
          colors: [],
          boneInfos: [],
          vertices: null,
          uintVert: null,
          indices: null
        };
        var n = this.frames[i];
        var r = this._tempSegments = n.segments;
        var s = this._tempColors = n.colors;
        var a = this._tempBoneInfos = n.boneInfos;
        this._traverseSkeleton(t, e);
        if (T > 0) {
          s[T - 1].vfOffset = _;
        }
        s.length = T;
        a.length = f;
        var o = y - 1;
        if (o >= 0) {
          if (m > 0) {
            var c = r[o];
            c.indexCount = m;
            c.vfCount = 6 * g;
            c.vertexCount = g;
            r.length = y;
          } else {
            r.length = y - 1;
          }
        }
        if (0 != r.length) {
          var l = n.vertices;
          var x = n.uintVert;
          if (!l || l.length < _) {
            l = n.vertices = new Float32Array(_);
            x = n.uintVert = new Uint32Array(l.buffer);
          }
          var C = 0;
          for (var b = 0; C < _;) {
            l[C++] = h[b++];
            l[C++] = h[b++];
            l[C++] = h[b++];
            l[C++] = h[b++];
            x[C++] = h[b++];
            x[C++] = h[b++];
          }
          var S = n.indices;
          if (!S || S.length < d) {
            S = n.indices = new Uint16Array(d);
          }
          for (var R = 0; R < d; R++) {
            S[R] = u[R];
          }
          n.vertices = l;
          n.uintVert = x;
          n.indices = S;
        }
      },
      fillVertices: function (t, e, c, l, f) {
        s = c.a * e.a * t.a * 255;
        i = e.r * t.r * 255;
        n = e.g * t.g * 255;
        r = e.b * t.b * 255;
        b.r = i * c.r;
        b.g = n * c.g;
        b.b = r * c.b;
        b.a = s;
        if (null == f.darkColor) {
          S.set(0, 0, 0, 1);
        } else {
          S.r = f.darkColor.r * i;
          S.g = f.darkColor.g * n;
          S.b = f.darkColor.b * r;
        }
        S.a = 0;
        a = (b.a << 24 >>> 0) + (b.b << 16) + (b.g << 8) + b.r;
        o = (S.a << 24 >>> 0) + (S.b << 16) + (S.g << 8) + S.r;
        if (E !== a || A !== o) {
          var p = this._tempColors;
          E = a;
          A = o;
          if (T > 0) {
            p[T - 1].vfOffset = _;
          }
          p[T++] = {
            fr: b.r,
            fg: b.g,
            fb: b.b,
            fa: b.a,
            dr: S.r,
            dg: S.g,
            db: S.b,
            da: S.a,
            vfOffset: 0
          };
        }
        if (l.isClipping()) {
          l.clipTriangles(h, x, u, C, h, b, S, true, 6, d, _, _ + 2);
          var v = l.clippedVertices;
          var g = l.clippedTriangles;
          C = g.length;
          x = v.length / 12 * 6;
          var m = 0;
          var y = d;
          for (var R = g.length; m < R;) {
            u[y++] = g[m++];
          }
          var M = 0;
          var w = v.length;
          for (var I = _; M < w; M += 12, I += 6) {
            h[I] = v[M];
            h[I + 1] = v[M + 1];
            h[I + 2] = v[M + 6];
            h[I + 3] = v[M + 7];
            h[I + 4] = a;
            h[I + 5] = o;
          }
        } else {
          var O = _;
          for (var L = _ + x; O < L; O += 6) {
            h[O + 4] = a;
            h[O + 5] = o;
          }
        }
      },
      _traverseSkeleton: function (t, e) {
        var i;
        var n;
        var r;
        var s;
        var a;
        var o;
        var c;
        var T;
        var E;
        var A;
        var b;
        var S;
        var M = this._tempSegments;
        var w = this._tempBoneInfos;
        var I = t.color;
        var O = t.bones;
        if (this._enableCacheAttachedInfo) {
          var L = 0;
          for (var P = O.length; L < P; L++, f++) {
            var D = O[L];
            var N = w[f];
            if (!N) {
              N = w[f] = {};
            }
            N.a = D.a;
            N.b = D.b;
            N.c = D.c;
            N.d = D.d;
            N.worldX = D.worldX;
            N.worldY = D.worldY;
          }
        }
        var F = 0;
        for (var B = t.drawOrder.length; F < B; F++) {
          if ((S = t.drawOrder[F]).bone.active) {
            x = 0;
            C = 0;
            if (i = S.getAttachment()) {
              o = i instanceof l.RegionAttachment;
              c = i instanceof l.MeshAttachment;
              if (i instanceof l.ClippingAttachment) {
                e.clipStart(S, i);
              } else if (o || c) {
                if (T = i.region.texture._texture) {
                  b = S.data.blendMode;
                  if (!(p === T.nativeUrl && v === b)) {
                    p = T.nativeUrl;
                    v = b;
                    if ((E = y - 1) >= 0) {
                      if (m > 0) {
                        (A = M[E]).indexCount = m;
                        A.vertexCount = g;
                        A.vfCount = 6 * g;
                      } else {
                        y--;
                      }
                    }
                    M[y] = {
                      tex: T,
                      blendMode: b,
                      indexCount: 0,
                      vertexCount: 0,
                      vfCount: 0
                    };
                    y++;
                    m = 0;
                    g = 0;
                  }
                  if (o) {
                    a = R;
                    x = 24;
                    C = 6;
                    i.computeWorldVertices(S.bone, h, _, 6);
                  } else if (c) {
                    a = i.triangles;
                    x = 6 * (i.worldVerticesLength >> 1);
                    C = a.length;
                    i.computeWorldVertices(S, 0, i.worldVerticesLength, h, _, 6);
                  }
                  if (0 != x && 0 != C) {
                    var V = 0;
                    var k = d;
                    for (var U = a.length; V < U;) {
                      u[k++] = a[V++];
                    }
                    s = i.uvs;
                    var z = _;
                    var G = _ + x;
                    for (var H = 0; z < G; z += 6, H += 2) {
                      h[z + 2] = s[H];
                      h[z + 3] = s[H + 1];
                    }
                    n = i.color;
                    r = S.color;
                    this.fillVertices(I, n, r, e, S);
                    if (C > 0) {
                      var W = d;
                      for (var X = d + C; W < X; W++) {
                        u[W] += g;
                      }
                      d += C;
                      _ += x;
                      m += C;
                      g += x / 6;
                    }
                    e.clipEndWithSlot(S);
                  } else {
                    e.clipEndWithSlot(S);
                  }
                } else {
                  e.clipEndWithSlot(S);
                }
              } else {
                e.clipEndWithSlot(S);
              }
            } else {
              e.clipEndWithSlot(S);
            }
          }
        }
        e.clipEnd();
      }
    });
    var w = cc.Class({
      ctor: function () {
        this._privateMode = false;
        this._animationPool = {};
        this._skeletonCache = {};
      },
      enablePrivateMode: function () {
        this._privateMode = true;
      },
      clear: function () {
        this._animationPool = {};
        this._skeletonCache = {};
      },
      removeSkeleton: function (t) {
        var e = this._skeletonCache[t];
        if (e) {
          var i = e.animationsCache;
          for (var n in i) {
            var r = i[n];
            if (r) {
              this._animationPool[t + "#" + n] = r;
              r.clear();
            }
          }
          delete this._skeletonCache[t];
        }
      },
      getSkeletonCache: function (t, e) {
        var i = this._skeletonCache[t];
        if (!i) {
          var n = new l.Skeleton(e);
          var r = new l.SkeletonClipping();
          var s = new l.AnimationStateData(n.data);
          var a = new l.AnimationState(s);
          var o = new c();
          a.addListener(o);
          this._skeletonCache[t] = i = {
            skeleton: n,
            clipper: r,
            state: a,
            listener: o,
            animationsCache: {},
            curAnimationCache: null
          };
        }
        return i;
      },
      getAnimationCache: function (t, e) {
        var i = this._skeletonCache[t];
        return i ? i.animationsCache[e] : null;
      },
      invalidAnimationCache: function (t) {
        var e = this._skeletonCache[t];
        if (e && e.skeleton) {
          var i = e.animationsCache;
          for (var n in i) i[n].invalidAllFrame();
        }
      },
      initAnimationCache: function (t, e) {
        if (!e) {
          return null;
        }
        var i = this._skeletonCache[t];
        var n = i && i.skeleton;
        if (!n) {
          return null;
        }
        if (!n.data.findAnimation(e)) {
          return null;
        }
        var r = i.animationsCache;
        var s = r[e];
        if (!s) {
          var a = t + "#" + e;
          if (s = this._animationPool[a]) {
            delete this._animationPool[a];
          } else {
            (s = new M())._privateMode = this._privateMode;
          }
          s.init(i, e);
          r[e] = s;
        }
        return s;
      },
      updateAnimationCache: function (t, e) {
        if (e) {
          var i = this.initAnimationCache(t, e);
          if (!i) {
            return null;
          }
          i.updateAllFrame();
        } else {
          var n = this._skeletonCache[t];
          if (!n || !n.skeleton) {
            return;
          }
          var r = n.animationsCache;
          for (var s in r) r[s].updateAllFrame();
        }
      }
    });
    w.FrameTime = 0.016666666666666666;
    w.sharedCache = new w();
    e.exports = w;
  }, {
    "./lib/spine": 321,
    "./track-entry-listeners": 326
  }],
  323: [function (t, e) {
    "use strict";

    var i = t("./skeleton-cache").sharedCache;
    var n = cc.Class({
      name: "sp.SkeletonData",
      extends: cc.Asset,
      ctor: function () {
        this.reset();
      },
      properties: {
        _skeletonJson: null,
        skeletonJsonStr: {
          get: function () {
            return this._skeletonJson ? JSON.stringify(this._skeletonJson) : "";
          }
        },
        skeletonJson: {
          get: function () {
            return this._skeletonJson;
          },
          set: function (t) {
            this.reset();
            this._skeletonJson = "string" == typeof t ? JSON.parse(t) : t;
            if (!this._uuid && t.skeleton) {
              this._uuid = t.skeleton.hash;
            }
          }
        },
        _atlasText: "",
        atlasText: {
          get: function () {
            return this._atlasText;
          },
          set: function (t) {
            this._atlasText = t;
            this.reset();
          }
        },
        atlas: {
          default: null,
          type: cc.TextAsset
        },
        textures: {
          default: [],
          type: [cc.Texture2D]
        },
        textureNames: {
          default: [],
          type: [cc.String]
        },
        scale: 1,
        _nativeAsset: {
          get: function () {
            return this._buffer;
          },
          set: function (t) {
            this._buffer = t.buffer || t;
            this.reset();
          },
          override: true
        }
      },
      statics: {
        preventDeferredLoadDependents: true
      },
      createNode: false,
      reset: function () {
        this._skeletonCache = null;
        this._atlasCache = null;
      },
      ensureTexturesLoaded: function (t, e) {
        var i = this.textures;
        var n = i.length;
        if (0 != n) {
          var r = 0;
          var s = function () {
            if (++r >= n) {
              if (t) {
                t.call(e, true);
              }
              t = null;
            }
          };
          for (var a = 0; a < n; a++) {
            var o = i[a];
            if (o.loaded) {
              s();
            } else {
              o.once("load", s);
            }
          }
        } else {
          t.call(e, false);
        }
      },
      isTexturesLoaded: function () {
        var t = this.textures;
        var e = t.length;
        for (var i = 0; i < e; i++) {
          if (!t[i].loaded) {
            return false;
          }
        }
        return true;
      },
      getRuntimeData: function (t) {
        if (this._skeletonCache) {
          return this._skeletonCache;
        }
        if (!(this.textures && this.textures.length > 0) && this.textureNames && this.textureNames.length > 0) {
          return null;
        }
        var e = this._getAtlas(t);
        if (!e) {
          return null;
        }
        var i = new sp.spine.AtlasAttachmentLoader(e);
        var n = null;
        var r = null;
        if (this.skeletonJson) {
          r = new sp.spine.SkeletonJson(i);
          n = this.skeletonJson;
        } else {
          r = new sp.spine.SkeletonBinary(i);
          n = new Uint8Array(this._nativeAsset);
        }
        r.scale = this.scale;
        this._skeletonCache = r.readSkeletonData(n);
        e.dispose();
        return this._skeletonCache;
      },
      getSkinsEnum: false,
      getAnimsEnum: false,
      _getTexture: function (t) {
        var e = this.textureNames;
        for (var i = 0; i < e.length; i++) {
          if (e[i] === t) {
            var n = this.textures[i];
            var r = new sp.SkeletonTexture({
              width: n.width,
              height: n.height
            });
            r.setRealTexture(n);
            return r;
          }
        }
        return null;
      },
      _getAtlas: function () {
        if (this._atlasCache) {
          return this._atlasCache;
        }
        var t = this.atlasText;
        if (!t && this.atlas) {
          t = this.atlas.text;
        }
        return t ? this._atlasCache = new sp.spine.TextureAtlas(t, this._getTexture.bind(this)) : null;
      },
      destroy: function () {
        i.removeSkeleton(this._uuid);
        this._super();
      }
    });
    sp.SkeletonData = e.exports = n;
  }, {
    "./skeleton-cache": 322
  }],
  324: [function () {
    "use strict";

    sp.SkeletonTexture = cc.Class({
      name: "sp.SkeletonTexture",
      extends: sp.spine.Texture,
      _texture: null,
      _material: null,
      setRealTexture: function (t) {
        this._texture = t;
      },
      getRealTexture: function () {
        return this._texture;
      },
      setFilters: function (t, e) {
        if (this._texture) {
          this._texture.setFilters(t, e);
        }
      },
      setWraps: function (t, e) {
        if (this._texture) {
          this._texture.setWrapMode(t, e);
        }
      },
      dispose: function () {}
    });
  }, {}],
  325: [function (t, e, i) {
    "use strict";

    i.__esModule = true;
    i.default = undefined;
    var n;
    var r = (n = t("../../cocos2d/core/renderer/assembler")) && n.__esModule ? n : {
      default: n
    };
    function s(t, e) {
      return (s = Object.setPrototypeOf || function (t, e) {
        t.__proto__ = e;
        return t;
      })(t, e);
    }
    var a;
    var o;
    var c;
    var l;
    var h;
    var u;
    var f;
    var d;
    var _;
    var p;
    var v;
    var g;
    var m;
    var y;
    var T;
    var E;
    var A;
    var x = t("./Skeleton");
    var C = t("./lib/spine");
    var b = t("../../cocos2d/core/renderer/render-flow");
    var S = t("../../cocos2d/core/renderer/webgl/vertex-format");
    var R = S.vfmtPosUvColor;
    var M = S.vfmtPosUvTwoColor;
    var w = cc.gfx;
    var I = 0;
    var O = [0, 1, 2, 2, 3, 0];
    var L = cc.color(0, 0, 255, 255);
    var P = cc.color(255, 0, 0, 255);
    var D = cc.color(0, 255, 0, 255);
    var N = cc.color(255, 255, 0, 255);
    var F = null;
    var B = null;
    var V = null;
    var k = null;
    F = new C.Color(1, 1, 1, 1);
    B = new C.Color(1, 1, 1, 1);
    V = new C.Vector2();
    k = new C.Vector2();
    var U;
    var z;
    var G;
    var H;
    var W;
    var X;
    var Y;
    var j;
    var q;
    var Z;
    var K;
    var Q;
    var J;
    var $;
    var tt;
    var et;
    var it;
    var nt;
    var rt;
    var st;
    var at;
    var ot;
    var ct;
    var lt;
    var ht;
    var ut;
    var ft;
    var dt;
    var _t;
    var pt = 0;
    var vt = 0;
    var gt = 0;
    var mt = 0;
    var yt = 0;
    var Tt = 0;
    var Et = 0;
    function At(t, e) {
      var i;
      var n;
      switch (e) {
        case C.BlendMode.Additive:
          i = a ? cc.macro.ONE : cc.macro.SRC_ALPHA;
          n = cc.macro.ONE;
          break;
        case C.BlendMode.Multiply:
          i = cc.macro.DST_COLOR;
          n = cc.macro.ONE_MINUS_SRC_ALPHA;
          break;
        case C.BlendMode.Screen:
          i = cc.macro.ONE;
          n = cc.macro.ONE_MINUS_SRC_COLOR;
          break;
        case C.BlendMode.Normal:
        default:
          i = a ? cc.macro.ONE : cc.macro.SRC_ALPHA;
          n = cc.macro.ONE_MINUS_SRC_ALPHA;
      }
      var r = !lt.enableBatch;
      var s = lt._materials[0];
      if (!s) {
        return null;
      }
      var o = t.getId() + i + n + h + r;
      var c = lt._materialCache;
      var l = c[o];
      if (!l) {
        if (c.baseMaterial) {
          l = cc.MaterialVariant.create(s);
        } else {
          l = s;
          c.baseMaterial = s;
        }
        l.define("CC_USE_MODEL", r);
        l.define("USE_TINT", h);
        l.setProperty("texture", t);
        l.setBlend(true, w.BLEND_FUNC_ADD, i, n, w.BLEND_FUNC_ADD, i, n);
        c[o] = l;
      }
      return l;
    }
    function xt(t) {
      st = t.fa * g;
      $ = _ * (o = a ? st / 255 : 1);
      tt = p * o;
      et = v * o;
      it = t.fr * $;
      nt = t.fg * tt;
      rt = t.fb * et;
      m = (st << 24 >>> 0) + (rt << 16) + (nt << 8) + it;
      at = t.dr * $;
      ot = t.dg * tt;
      ct = t.db * et;
      y = ((a ? 255 : 0) << 24 >>> 0) + (ct << 16) + (ot << 8) + at;
    }
    var bt = function (t) {
      function n() {
        return t.apply(this, arguments) || this;
      }
      n.prototype = Object.create(t.prototype);
      n.prototype.constructor = n;
      s(n, t);
      var r = n.prototype;
      r.updateRenderData = function (t) {
        if (!t.isAnimationCached()) {
          var e = t._skeleton;
          if (e) {
            e.updateWorldTransform();
          }
        }
      };
      r.fillVertices = function (t, e, i, n, r) {
        var s;
        var c = ht._vData;
        var l = ht._iData;
        var u = ht._uintVData;
        F.a = i.a * e.a * t.a * g * 255;
        o = a ? F.a : 255;
        U = _ * e.r * t.r * o;
        z = p * e.g * t.g * o;
        G = v * e.b * t.b * o;
        F.r = U * i.r;
        F.g = z * i.g;
        F.b = G * i.b;
        if (null == r.darkColor) {
          B.set(0, 0, 0, 1);
        } else {
          B.r = r.darkColor.r * U;
          B.g = r.darkColor.g * z;
          B.b = r.darkColor.b * G;
        }
        B.a = a ? 255 : 0;
        if (n.isClipping()) {
          var f = c.subarray(gt + 2);
          n.clipTriangles(c.subarray(gt), pt, l.subarray(Tt), yt, f, F, B, h, E);
          var d = new Float32Array(n.clippedVertices);
          var T = n.clippedTriangles;
          yt = T.length;
          pt = d.length / A * E;
          s = ht.request(pt / E, yt);
          Tt = s.indiceOffset;
          mt = s.vertexOffset;
          gt = s.byteOffset >> 2;
          c = ht._vData;
          l = ht._iData;
          u = ht._uintVData;
          l.set(T, Tt);
          if (_t) {
            var x = 0;
            var C = d.length;
            for (var b = gt; x < C; x += A, b += E) {
              V.x = d[x];
              V.y = d[x + 1];
              F.set(d[x + 2], d[x + 3], d[x + 4], d[x + 5]);
              k.x = d[x + 6];
              k.y = d[x + 7];
              if (h) {
                B.set(d[x + 8], d[x + 9], d[x + 10], d[x + 11]);
              } else {
                B.set(0, 0, 0, 0);
              }
              _t.transform(V, k, F, B);
              c[b] = V.x;
              c[b + 1] = V.y;
              c[b + 2] = k.x;
              c[b + 3] = k.y;
              u[b + 4] = (F.a << 24 >>> 0) + (F.b << 16) + (F.g << 8) + F.r;
              if (h) {
                u[b + 5] = (B.a << 24 >>> 0) + (B.b << 16) + (B.g << 8) + B.r;
              }
            }
          } else {
            var S = 0;
            var R = d.length;
            for (var M = gt; S < R; S += A, M += E) {
              c[M] = d[S];
              c[M + 1] = d[S + 1];
              c[M + 2] = d[S + 6];
              c[M + 3] = d[S + 7];
              m = (d[S + 5] << 24 >>> 0) + (d[S + 4] << 16) + (d[S + 3] << 8) + d[S + 2];
              u[M + 4] = m;
              if (h) {
                y = (d[S + 11] << 24 >>> 0) + (d[S + 10] << 16) + (d[S + 9] << 8) + d[S + 8];
                u[M + 5] = y;
              }
            }
          }
        } else if (_t) {
          var w = gt;
          for (var I = gt + pt; w < I; w += E) {
            V.x = c[w];
            V.y = c[w + 1];
            k.x = c[w + 2];
            k.y = c[w + 3];
            _t.transform(V, k, F, B);
            c[w] = V.x;
            c[w + 1] = V.y;
            c[w + 2] = k.x;
            c[w + 3] = k.y;
            u[w + 4] = (F.a << 24 >>> 0) + (F.b << 16) + (F.g << 8) + F.r;
            if (h) {
              u[w + 5] = (B.a << 24 >>> 0) + (B.b << 16) + (B.g << 8) + B.r;
            }
          }
        } else {
          m = (F.a << 24 >>> 0) + (F.b << 16) + (F.g << 8) + F.r;
          y = (B.a << 24 >>> 0) + (B.b << 16) + (B.g << 8) + B.r;
          var O = gt;
          for (var L = gt + pt; O < L; O += E) {
            u[O + 4] = m;
            if (h) {
              u[O + 5] = y;
            }
          }
        }
      };
      r.realTimeTraverse = function (t) {
        var e;
        var i;
        var n;
        var r;
        var s;
        var a;
        var o;
        var _;
        var p;
        var v;
        var g;
        var m;
        var y = lt._skeleton;
        var T = y.color;
        var x = lt._debugRenderer;
        var b = lt._clipper;
        var S = null;
        c = lt._startSlotIndex;
        l = lt._endSlotIndex;
        H = false;
        if (-1 == c) {
          H = true;
        }
        u = lt.debugSlots;
        f = lt.debugBones;
        d = lt.debugMesh;
        if (x && (f || u || d)) {
          x.clear();
          x.lineWidth = 2;
        }
        A = h ? 12 : 8;
        pt = 0;
        gt = 0;
        mt = 0;
        yt = 0;
        Tt = 0;
        var R = 0;
        for (var M = y.drawOrder.length; R < M; R++) {
          if (null != (g = y.drawOrder[R]) && g.bone.active) {
            if (c >= 0 && c == g.data.index) {
              H = true;
            }
            if (H) {
              if (l >= 0 && l == g.data.index) {
                H = false;
              }
              pt = 0;
              yt = 0;
              if (n = g.getAttachment()) {
                _ = n instanceof C.RegionAttachment;
                p = n instanceof C.MeshAttachment;
                if (n instanceof C.ClippingAttachment) {
                  b.clipStart(g, n);
                } else if (_ || p) {
                  if (S = At(n.region.texture._texture, g.data.blendMode)) {
                    if (W || S.getHash() !== ut.material.getHash()) {
                      W = false;
                      ut._flush();
                      ut.node = ft;
                      ut.material = S;
                    }
                    if (_) {
                      o = O;
                      pt = 4 * E;
                      yt = 6;
                      v = ht.request(4, 6);
                      Tt = v.indiceOffset;
                      mt = v.vertexOffset;
                      gt = v.byteOffset >> 2;
                      e = ht._vData;
                      i = ht._iData;
                      n.computeWorldVertices(g.bone, e, gt, E);
                      if (x && u) {
                        x.strokeColor = L;
                        x.moveTo(e[gt], e[gt + 1]);
                        var w = gt + E;
                        for (var I = gt + pt; w < I; w += E) {
                          x.lineTo(e[w], e[w + 1]);
                        }
                        x.close();
                        x.stroke();
                      }
                    } else if (p && (o = n.triangles, pt = (n.worldVerticesLength >> 1) * E, yt = o.length, v = ht.request(pt / E, yt), Tt = v.indiceOffset, mt = v.vertexOffset, gt = v.byteOffset >> 2, e = ht._vData, i = ht._iData, n.computeWorldVertices(g, 0, n.worldVerticesLength, e, gt, E), x && d)) {
                      x.strokeColor = N;
                      var F = 0;
                      for (var B = o.length; F < B; F += 3) {
                        var V = o[F] * E + gt;
                        var k = o[F + 1] * E + gt;
                        var U = o[F + 2] * E + gt;
                        x.moveTo(e[V], e[V + 1]);
                        x.lineTo(e[k], e[k + 1]);
                        x.lineTo(e[U], e[U + 1]);
                        x.close();
                        x.stroke();
                      }
                    }
                    if (0 != pt && 0 != yt) {
                      i.set(o, Tt);
                      a = n.uvs;
                      var z = gt;
                      var G = gt + pt;
                      for (var $ = 0; z < G; z += E, $ += 2) {
                        e[z + 2] = a[$];
                        e[z + 3] = a[$ + 1];
                      }
                      r = n.color;
                      s = g.color;
                      this.fillVertices(T, r, s, b, g);
                      e = ht._vData;
                      i = ht._iData;
                      if (yt > 0) {
                        var tt = Tt;
                        for (var et = Tt + yt; tt < et; tt++) {
                          i[tt] += mt;
                        }
                        if (t) {
                          m = t.m;
                          j = m[0];
                          q = m[4];
                          Z = m[12];
                          K = m[1];
                          Q = m[5];
                          J = m[13];
                          var it = gt;
                          for (var nt = gt + pt; it < nt; it += E) {
                            X = e[it];
                            Y = e[it + 1];
                            e[it] = X * j + Y * q + Z;
                            e[it + 1] = X * K + Y * Q + J;
                          }
                        }
                        ht.adjust(pt / E, yt);
                      }
                      b.clipEndWithSlot(g);
                    } else {
                      b.clipEndWithSlot(g);
                    }
                  } else {
                    b.clipEndWithSlot(g);
                  }
                } else {
                  b.clipEndWithSlot(g);
                }
              } else {
                b.clipEndWithSlot(g);
              }
            } else {
              b.clipEndWithSlot(g);
            }
          }
        }
        b.clipEnd();
        if (x && f) {
          var rt;
          x.strokeColor = P;
          x.fillColor = L;
          var st = 0;
          for (var at = y.bones.length; st < at; st++) {
            var ot = (rt = y.bones[st]).data.length * rt.a + rt.worldX;
            var ct = rt.data.length * rt.c + rt.worldY;
            x.moveTo(rt.worldX, rt.worldY);
            x.lineTo(ot, ct);
            x.stroke();
            x.circle(rt.worldX, rt.worldY, 1.5 * Math.PI);
            x.fill();
            if (0 === st) {
              x.fillColor = D;
            }
          }
        }
      };
      r.cacheTraverse = function (t) {
        var e = lt._curFrame;
        if (e) {
          var i = e.segments;
          if (0 != i.length) {
            var n;
            var r;
            var s;
            var a;
            var o;
            var c;
            var l = e.vertices;
            var h = e.indices;
            var u = 0;
            var f = 0;
            var d = 0;
            if (t) {
              c = t.m;
              j = c[0];
              K = c[1];
              q = c[4];
              Q = c[5];
              Z = c[12];
              J = c[13];
            }
            var _ = 16 & I;
            var p = _ && 1 === j && 0 === K && 0 === q && 1 === Q;
            var v = 0;
            var g = e.colors;
            var T = g[v++];
            var E = T.vfOffset;
            xt(T);
            var A = 0;
            for (var x = i.length; A < x; A++) {
              var C = i[A];
              if (a = At(C.tex, C.blendMode)) {
                if (W || a.getHash() !== ut.material.getHash()) {
                  W = false;
                  ut._flush();
                  ut.node = ft;
                  ut.material = a;
                }
                vt = C.vertexCount;
                yt = C.indexCount;
                o = ht.request(vt, yt);
                Tt = o.indiceOffset;
                mt = o.vertexOffset;
                Et = o.byteOffset >> 2;
                n = ht._vData;
                r = ht._iData;
                s = ht._uintVData;
                var b = Tt;
                for (var S = Tt + yt; b < S; b++) {
                  r[b] = mt + h[f++];
                }
                d = C.vfCount;
                n.set(l.subarray(u, u + d), Et);
                u += d;
                if (p) {
                  var R = Et;
                  for (var M = Et + d; R < M; R += 6) {
                    n[R] += Z;
                    n[R + 1] += J;
                  }
                } else if (_) {
                  var w = Et;
                  for (var O = Et + d; w < O; w += 6) {
                    X = n[w];
                    Y = n[w + 1];
                    n[w] = X * j + Y * q + Z;
                    n[w + 1] = X * K + Y * Q + J;
                  }
                }
                ht.adjust(vt, yt);
                if (dt) {
                  var L = u - d;
                  var P = Et + 4;
                  for (var D = Et + 4 + d; P < D; P += 6, L += 6) {
                    if (L >= E) {
                      xt(T = g[v++]);
                      E = T.vfOffset;
                    }
                    s[P] = m;
                    s[P + 1] = y;
                  }
                }
              }
            }
          }
        }
      };
      r.fillBuffers = function (t, e) {
        var i = t.node;
        i._renderFlag |= b.FLAG_UPDATE_RENDER_DATA;
        if (t._skeleton) {
          var n = i._color;
          _ = n.r / 255;
          p = n.g / 255;
          v = n.b / 255;
          g = n.a / 255;
          h = t.useTint || t.isAnimationCached();
          T = h ? M : R;
          E = h ? 6 : 5;
          ft = t.node;
          ht = e.getBuffer("spine", T);
          ut = e;
          lt = t;
          W = true;
          a = t.premultipliedAlpha;
          o = 1;
          I = 0;
          dt = false;
          _t = t._effectDelegate && t._effectDelegate._vertexEffect;
          if (4294967295 !== n._val || a) {
            dt = true;
          }
          if (h) {
            I |= 1;
          }
          var r = undefined;
          if (lt.enableBatch) {
            r = ft._worldMatrix;
            W = false;
            I |= 16;
          }
          if (t.isAnimationCached()) {
            this.cacheTraverse(r);
          } else {
            if (_t) {
              _t.begin(t._skeleton);
            }
            this.realTimeTraverse(r);
            if (_t) {
              _t.end();
            }
          }
          e.worldMatDirty++;
          t.attachUtil._syncAttachedNode();
          ft = undefined;
          ht = undefined;
          ut = undefined;
          lt = undefined;
          _t = null;
        }
      };
      r.postFillBuffers = function (t, e) {
        e.worldMatDirty--;
      };
      return n;
    }(r.default);
    i.default = bt;
    r.default.register(x, bt);
    e.exports = i.default;
  }, {
    "../../cocos2d/core/renderer/assembler": 190,
    "../../cocos2d/core/renderer/render-flow": 194,
    "../../cocos2d/core/renderer/webgl/vertex-format": 225,
    "./Skeleton": 319,
    "./lib/spine": 321
  }],
  326: [function (t, e) {
    "use strict";

    var i = function () {
      this.start = null;
      this.end = null;
      this.complete = null;
      this.event = null;
      this.interrupt = null;
      this.dispose = null;
    };
    i.getListeners = function (t) {
      if (!t.listener) {
        t.listener = new i();
      }
      return t.listener;
    };
    e.exports = i;
  }, {}],
  327: [function (t, e) {
    "use strict";

    var i = t("./lib/spine");
    sp.VertexEffectDelegate = cc.Class({
      name: "sp.VertexEffectDelegate",
      ctor: function () {
        this._vertexEffect = null;
        this._interpolation = null;
        this._effectType = "none";
      },
      clear: function () {
        this._vertexEffect = null;
        this._interpolation = null;
        this._effectType = "none";
      },
      initJitter: function (t, e) {
        this._effectType = "jitter";
        this._vertexEffect = new i.JitterEffect(t, e);
        return this._vertexEffect;
      },
      initSwirlWithPow: function (t, e) {
        this._interpolation = new i.Pow(e);
        this._vertexEffect = new i.SwirlEffect(t, this._interpolation);
        return this._vertexEffect;
      },
      initSwirlWithPowOut: function (t, e) {
        this._interpolation = new i.PowOut(e);
        this._vertexEffect = new i.SwirlEffect(t, this._interpolation);
        return this._vertexEffect;
      },
      getJitterVertexEffect: function () {
        return this._vertexEffect;
      },
      getSwirlVertexEffect: function () {
        return this._vertexEffect;
      },
      getVertexEffect: function () {
        return this._vertexEffect;
      },
      getEffectType: function () {
        return this._effectType;
      }
    });
    e.exports = sp.VertexEffectDelegate;
  }, {
    "./lib/spine": 321
  }],
  328: [function (t, e) {
    "use strict";

    var i = "undefined" == typeof window ? global : window;
    i.cc = i.cc || {};
    cc.internal = cc.internal || {};
    t("./predefine");
    t("./polyfill/typescript");
    t("./cocos2d/core/predefine");
    t("./cocos2d");
    t("./extends");
    e.exports = i.cc;
  }, {
    "./cocos2d": 264,
    "./cocos2d/core/predefine": 187,
    "./extends": 316,
    "./package": undefined,
    "./polyfill/typescript": undefined,
    "./predefine": 329
  }],
  329: [function () {
    "use strict";

    var t = "undefined" == typeof window ? global : window;
    function e(e, i) {
      if (undefined === t[e]) {
        Object.defineProperty(t, e, {
          get: function () {
            return i;
          }
        });
      }
    }
    (function (e, i) {
      if (undefined === t[e]) {
        t[e] = i;
      }
    })("CC_DEBUG", true);
    t.CC_BUILD = true;
    t.CC_DEV = false;
    t.CC_DEBUG = false;
    t.CC_JSB = false;
    t.CC_NATIVERENDERER = false;
    t.CC_SUPPORT_JIT = true;
    t.CC_PHYSICS_BUILTIN = false;
    t.CC_PHYSICS_CANNON = false;
    t.CC_EDITOR = false;
    t.CC_PREVIEW = false;
    t.CC_TEST = false;
    t.CC_RUNTIME = false;
    t.CC_JSB = false;
    var n = !(!("object" == typeof t[e]) || !wx.getSharedCanvas);
    var r = !(!("object" == typeof t[e]) || !wx.getSystemInfoSync && !wx.getSharedCanvas);
    var s = "object" == typeof t[e];
    e("CC_WECHATGAMESUB", n);
    e("CC_WECHATGAME", r);
    e("CC_QQPLAY", s);
    t.CocosEngine = cc.ENGINE_VERSION = "6.5.0-rc.3";
    t.PG_Engine = "6.5.0-rc.3";
  }, {}]
}, {}, [328]);